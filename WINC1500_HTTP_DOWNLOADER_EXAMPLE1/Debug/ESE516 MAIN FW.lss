
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000278d0  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002e8  20000000  000398d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005754  200002f0  00039bc0  000302e8  2**4
                  ALLOC
  3 .stack        00002004  20005a44  0003f314  000302e8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000302e8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030310  2**0
                  CONTENTS, READONLY
  6 .debug_info   0010fa8a  00000000  00000000  00030369  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000100a5  00000000  00000000  0013fdf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00011f47  00000000  00000000  0014fe98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000031b0  00000000  00000000  00161ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002e28  00000000  00000000  00164f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00027247  00000000  00000000  00167db7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00055aa2  00000000  00000000  0018effe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000bbd0f  00000000  00000000  001e4aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000bb3c  00000000  00000000  002a07b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	48 7a 00 20 09 a3 02 00 01 a4 02 00 01 a4 02 00     Hz. ............
	...
   1202c:	99 94 01 00 00 00 00 00 00 00 00 00 c1 95 01 00     ................
   1203c:	09 96 01 00 01 a4 02 00 01 a4 02 00 01 a4 02 00     ................
   1204c:	59 64 02 00 85 59 02 00 01 a4 02 00 a9 2c 01 00     Yd...Y.......,..
   1205c:	01 a4 02 00 ed 2d 01 00 fd 6a 02 00 15 6b 02 00     .....-...j...k..
   1206c:	2d 6b 02 00 45 6b 02 00 5d 6b 02 00 75 6b 02 00     -k..Ek..]k..uk..
   1207c:	51 a2 02 00 65 a2 02 00 79 a2 02 00 85 71 01 00     Q...e...y....q..
   1208c:	99 71 01 00 ad 71 01 00 00 00 00 00 00 00 00 00     .q...q..........
   1209c:	31 2b 01 00 01 a4 02 00 6d 2c 01 00 01 a4 02 00     1+......m,......
   120ac:	01 a4 02 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	200002f0 	.word	0x200002f0
   120d4:	00000000 	.word	0x00000000
   120d8:	000398d0 	.word	0x000398d0

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	200002f4 	.word	0x200002f4
   12108:	000398d0 	.word	0x000398d0
   1210c:	000398d0 	.word	0x000398d0
   12110:	00000000 	.word	0x00000000

00012114 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   12114:	b580      	push	{r7, lr}
   12116:	b082      	sub	sp, #8
   12118:	af00      	add	r7, sp, #0
   1211a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   1211c:	687b      	ldr	r3, [r7, #4]
   1211e:	2200      	movs	r2, #0
   12120:	701a      	strb	r2, [r3, #0]
}
   12122:	46c0      	nop			; (mov r8, r8)
   12124:	46bd      	mov	sp, r7
   12126:	b002      	add	sp, #8
   12128:	bd80      	pop	{r7, pc}
	...

0001212c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1212c:	b580      	push	{r7, lr}
   1212e:	b082      	sub	sp, #8
   12130:	af00      	add	r7, sp, #0
   12132:	0002      	movs	r2, r0
   12134:	6039      	str	r1, [r7, #0]
   12136:	1dfb      	adds	r3, r7, #7
   12138:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1213a:	1dfb      	adds	r3, r7, #7
   1213c:	781b      	ldrb	r3, [r3, #0]
   1213e:	2b01      	cmp	r3, #1
   12140:	d00a      	beq.n	12158 <system_apb_clock_set_mask+0x2c>
   12142:	2b02      	cmp	r3, #2
   12144:	d00f      	beq.n	12166 <system_apb_clock_set_mask+0x3a>
   12146:	2b00      	cmp	r3, #0
   12148:	d114      	bne.n	12174 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1214a:	4b0e      	ldr	r3, [pc, #56]	; (12184 <system_apb_clock_set_mask+0x58>)
   1214c:	4a0d      	ldr	r2, [pc, #52]	; (12184 <system_apb_clock_set_mask+0x58>)
   1214e:	6991      	ldr	r1, [r2, #24]
   12150:	683a      	ldr	r2, [r7, #0]
   12152:	430a      	orrs	r2, r1
   12154:	619a      	str	r2, [r3, #24]
			break;
   12156:	e00f      	b.n	12178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12158:	4b0a      	ldr	r3, [pc, #40]	; (12184 <system_apb_clock_set_mask+0x58>)
   1215a:	4a0a      	ldr	r2, [pc, #40]	; (12184 <system_apb_clock_set_mask+0x58>)
   1215c:	69d1      	ldr	r1, [r2, #28]
   1215e:	683a      	ldr	r2, [r7, #0]
   12160:	430a      	orrs	r2, r1
   12162:	61da      	str	r2, [r3, #28]
			break;
   12164:	e008      	b.n	12178 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12166:	4b07      	ldr	r3, [pc, #28]	; (12184 <system_apb_clock_set_mask+0x58>)
   12168:	4a06      	ldr	r2, [pc, #24]	; (12184 <system_apb_clock_set_mask+0x58>)
   1216a:	6a11      	ldr	r1, [r2, #32]
   1216c:	683a      	ldr	r2, [r7, #0]
   1216e:	430a      	orrs	r2, r1
   12170:	621a      	str	r2, [r3, #32]
			break;
   12172:	e001      	b.n	12178 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12174:	2317      	movs	r3, #23
   12176:	e000      	b.n	1217a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   12178:	2300      	movs	r3, #0
}
   1217a:	0018      	movs	r0, r3
   1217c:	46bd      	mov	sp, r7
   1217e:	b002      	add	sp, #8
   12180:	bd80      	pop	{r7, pc}
   12182:	46c0      	nop			; (mov r8, r8)
   12184:	40000400 	.word	0x40000400

00012188 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   12188:	b580      	push	{r7, lr}
   1218a:	b082      	sub	sp, #8
   1218c:	af00      	add	r7, sp, #0
   1218e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   12190:	687b      	ldr	r3, [r7, #4]
   12192:	2280      	movs	r2, #128	; 0x80
   12194:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12196:	687b      	ldr	r3, [r7, #4]
   12198:	2200      	movs	r2, #0
   1219a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1219c:	687b      	ldr	r3, [r7, #4]
   1219e:	2201      	movs	r2, #1
   121a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   121a2:	687b      	ldr	r3, [r7, #4]
   121a4:	2200      	movs	r2, #0
   121a6:	70da      	strb	r2, [r3, #3]
}
   121a8:	46c0      	nop			; (mov r8, r8)
   121aa:	46bd      	mov	sp, r7
   121ac:	b002      	add	sp, #8
   121ae:	bd80      	pop	{r7, pc}

000121b0 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
   121b0:	b580      	push	{r7, lr}
   121b2:	b082      	sub	sp, #8
   121b4:	af00      	add	r7, sp, #0
   121b6:	0002      	movs	r2, r0
   121b8:	1dfb      	adds	r3, r7, #7
   121ba:	701a      	strb	r2, [r3, #0]
	switch (vref) {
   121bc:	1dfb      	adds	r3, r7, #7
   121be:	781b      	ldrb	r3, [r3, #0]
   121c0:	2b00      	cmp	r3, #0
   121c2:	d002      	beq.n	121ca <system_voltage_reference_enable+0x1a>
   121c4:	2b01      	cmp	r3, #1
   121c6:	d007      	beq.n	121d8 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
   121c8:	e00d      	b.n	121e6 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
   121ca:	4b08      	ldr	r3, [pc, #32]	; (121ec <system_voltage_reference_enable+0x3c>)
   121cc:	4a07      	ldr	r2, [pc, #28]	; (121ec <system_voltage_reference_enable+0x3c>)
   121ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
   121d0:	2102      	movs	r1, #2
   121d2:	430a      	orrs	r2, r1
   121d4:	641a      	str	r2, [r3, #64]	; 0x40
			break;
   121d6:	e006      	b.n	121e6 <system_voltage_reference_enable+0x36>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
   121d8:	4b04      	ldr	r3, [pc, #16]	; (121ec <system_voltage_reference_enable+0x3c>)
   121da:	4a04      	ldr	r2, [pc, #16]	; (121ec <system_voltage_reference_enable+0x3c>)
   121dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
   121de:	2104      	movs	r1, #4
   121e0:	430a      	orrs	r2, r1
   121e2:	641a      	str	r2, [r3, #64]	; 0x40
			break;
   121e4:	46c0      	nop			; (mov r8, r8)
	}
}
   121e6:	46bd      	mov	sp, r7
   121e8:	b002      	add	sp, #8
   121ea:	bd80      	pop	{r7, pc}
   121ec:	40000800 	.word	0x40000800

000121f0 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   121f0:	b580      	push	{r7, lr}
   121f2:	b084      	sub	sp, #16
   121f4:	af00      	add	r7, sp, #0
   121f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   121f8:	687b      	ldr	r3, [r7, #4]
   121fa:	681b      	ldr	r3, [r3, #0]
   121fc:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   121fe:	68fb      	ldr	r3, [r7, #12]
   12200:	7e5b      	ldrb	r3, [r3, #25]
   12202:	b2db      	uxtb	r3, r3
   12204:	b25b      	sxtb	r3, r3
   12206:	2b00      	cmp	r3, #0
   12208:	da01      	bge.n	1220e <adc_is_syncing+0x1e>
		return true;
   1220a:	2301      	movs	r3, #1
   1220c:	e000      	b.n	12210 <adc_is_syncing+0x20>
	}

	return false;
   1220e:	2300      	movs	r3, #0
}
   12210:	0018      	movs	r0, r3
   12212:	46bd      	mov	sp, r7
   12214:	b004      	add	sp, #16
   12216:	bd80      	pop	{r7, pc}

00012218 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
   12218:	b580      	push	{r7, lr}
   1221a:	b082      	sub	sp, #8
   1221c:	af00      	add	r7, sp, #0
   1221e:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
   12220:	687b      	ldr	r3, [r7, #4]
   12222:	2200      	movs	r2, #0
   12224:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
   12226:	687b      	ldr	r3, [r7, #4]
   12228:	2200      	movs	r2, #0
   1222a:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
   1222c:	687b      	ldr	r3, [r7, #4]
   1222e:	2200      	movs	r2, #0
   12230:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
   12232:	687b      	ldr	r3, [r7, #4]
   12234:	2200      	movs	r2, #0
   12236:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
   12238:	687b      	ldr	r3, [r7, #4]
   1223a:	2200      	movs	r2, #0
   1223c:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
   1223e:	687b      	ldr	r3, [r7, #4]
   12240:	2200      	movs	r2, #0
   12242:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
   12244:	687b      	ldr	r3, [r7, #4]
   12246:	2200      	movs	r2, #0
   12248:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
   1224a:	687b      	ldr	r3, [r7, #4]
   1224c:	2200      	movs	r2, #0
   1224e:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
   12250:	687b      	ldr	r3, [r7, #4]
   12252:	2200      	movs	r2, #0
   12254:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
   12256:	687b      	ldr	r3, [r7, #4]
   12258:	22c0      	movs	r2, #192	; 0xc0
   1225a:	0152      	lsls	r2, r2, #5
   1225c:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
   1225e:	687b      	ldr	r3, [r7, #4]
   12260:	2200      	movs	r2, #0
   12262:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
   12264:	687b      	ldr	r3, [r7, #4]
   12266:	2200      	movs	r2, #0
   12268:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
   1226a:	687b      	ldr	r3, [r7, #4]
   1226c:	2200      	movs	r2, #0
   1226e:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
   12270:	687b      	ldr	r3, [r7, #4]
   12272:	2200      	movs	r2, #0
   12274:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
   12276:	687b      	ldr	r3, [r7, #4]
   12278:	2200      	movs	r2, #0
   1227a:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
   1227c:	687b      	ldr	r3, [r7, #4]
   1227e:	222a      	movs	r2, #42	; 0x2a
   12280:	2100      	movs	r1, #0
   12282:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
   12284:	687b      	ldr	r3, [r7, #4]
   12286:	2200      	movs	r2, #0
   12288:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
   1228a:	687b      	ldr	r3, [r7, #4]
   1228c:	2200      	movs	r2, #0
   1228e:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
   12290:	687b      	ldr	r3, [r7, #4]
   12292:	2224      	movs	r2, #36	; 0x24
   12294:	2100      	movs	r1, #0
   12296:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
   12298:	687b      	ldr	r3, [r7, #4]
   1229a:	2200      	movs	r2, #0
   1229c:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
   1229e:	687b      	ldr	r3, [r7, #4]
   122a0:	2200      	movs	r2, #0
   122a2:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
   122a4:	687b      	ldr	r3, [r7, #4]
   122a6:	2200      	movs	r2, #0
   122a8:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
   122aa:	687b      	ldr	r3, [r7, #4]
   122ac:	222b      	movs	r2, #43	; 0x2b
   122ae:	2100      	movs	r1, #0
   122b0:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
   122b2:	687b      	ldr	r3, [r7, #4]
   122b4:	222c      	movs	r2, #44	; 0x2c
   122b6:	2100      	movs	r1, #0
   122b8:	5499      	strb	r1, [r3, r2]
}
   122ba:	46c0      	nop			; (mov r8, r8)
   122bc:	46bd      	mov	sp, r7
   122be:	b002      	add	sp, #8
   122c0:	bd80      	pop	{r7, pc}
	...

000122c4 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
   122c4:	b580      	push	{r7, lr}
   122c6:	b098      	sub	sp, #96	; 0x60
   122c8:	af00      	add	r7, sp, #0
   122ca:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
   122cc:	230c      	movs	r3, #12
   122ce:	18fa      	adds	r2, r7, r3
   122d0:	4b15      	ldr	r3, [pc, #84]	; (12328 <_adc_configure_ain_pin+0x64>)
   122d2:	0010      	movs	r0, r2
   122d4:	0019      	movs	r1, r3
   122d6:	2350      	movs	r3, #80	; 0x50
   122d8:	001a      	movs	r2, r3
   122da:	4b14      	ldr	r3, [pc, #80]	; (1232c <_adc_configure_ain_pin+0x68>)
   122dc:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
   122de:	4b14      	ldr	r3, [pc, #80]	; (12330 <_adc_configure_ain_pin+0x6c>)
   122e0:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
   122e2:	687b      	ldr	r3, [r7, #4]
   122e4:	2b13      	cmp	r3, #19
   122e6:	d81a      	bhi.n	1231e <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
   122e8:	230c      	movs	r3, #12
   122ea:	18fb      	adds	r3, r7, r3
   122ec:	687a      	ldr	r2, [r7, #4]
   122ee:	0092      	lsls	r2, r2, #2
   122f0:	58d3      	ldr	r3, [r2, r3]
   122f2:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
   122f4:	2308      	movs	r3, #8
   122f6:	18fb      	adds	r3, r7, r3
   122f8:	0018      	movs	r0, r3
   122fa:	4b0e      	ldr	r3, [pc, #56]	; (12334 <_adc_configure_ain_pin+0x70>)
   122fc:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
   122fe:	2308      	movs	r3, #8
   12300:	18fb      	adds	r3, r7, r3
   12302:	2200      	movs	r2, #0
   12304:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
   12306:	2308      	movs	r3, #8
   12308:	18fb      	adds	r3, r7, r3
   1230a:	2201      	movs	r2, #1
   1230c:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
   1230e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   12310:	b2db      	uxtb	r3, r3
   12312:	2208      	movs	r2, #8
   12314:	18ba      	adds	r2, r7, r2
   12316:	0011      	movs	r1, r2
   12318:	0018      	movs	r0, r3
   1231a:	4b07      	ldr	r3, [pc, #28]	; (12338 <_adc_configure_ain_pin+0x74>)
   1231c:	4798      	blx	r3
	}
}
   1231e:	46c0      	nop			; (mov r8, r8)
   12320:	46bd      	mov	sp, r7
   12322:	b018      	add	sp, #96	; 0x60
   12324:	bd80      	pop	{r7, pc}
   12326:	46c0      	nop			; (mov r8, r8)
   12328:	000356f8 	.word	0x000356f8
   1232c:	000342e5 	.word	0x000342e5
   12330:	0000ffff 	.word	0x0000ffff
   12334:	00012189 	.word	0x00012189
   12338:	000295d9 	.word	0x000295d9

0001233c <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
   1233c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1233e:	b089      	sub	sp, #36	; 0x24
   12340:	af00      	add	r7, sp, #0
   12342:	6078      	str	r0, [r7, #4]
   12344:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
   12346:	231f      	movs	r3, #31
   12348:	18fb      	adds	r3, r7, r3
   1234a:	2200      	movs	r2, #0
   1234c:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
   1234e:	2310      	movs	r3, #16
   12350:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
   12352:	2317      	movs	r3, #23
   12354:	18fb      	adds	r3, r7, r3
   12356:	2200      	movs	r2, #0
   12358:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_REVISION_Msk) >> DSU_DID_REVISION_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
   1235a:	687b      	ldr	r3, [r7, #4]
   1235c:	681b      	ldr	r3, [r3, #0]
   1235e:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   12360:	230c      	movs	r3, #12
   12362:	18fb      	adds	r3, r7, r3
   12364:	0018      	movs	r0, r3
   12366:	4bce      	ldr	r3, [pc, #824]	; (126a0 <_adc_set_config+0x364>)
   12368:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
   1236a:	683b      	ldr	r3, [r7, #0]
   1236c:	781a      	ldrb	r2, [r3, #0]
   1236e:	230c      	movs	r3, #12
   12370:	18fb      	adds	r3, r7, r3
   12372:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
   12374:	230c      	movs	r3, #12
   12376:	18fb      	adds	r3, r7, r3
   12378:	0019      	movs	r1, r3
   1237a:	201e      	movs	r0, #30
   1237c:	4bc9      	ldr	r3, [pc, #804]	; (126a4 <_adc_set_config+0x368>)
   1237e:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
   12380:	201e      	movs	r0, #30
   12382:	4bc9      	ldr	r3, [pc, #804]	; (126a8 <_adc_set_config+0x36c>)
   12384:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
   12386:	683b      	ldr	r3, [r7, #0]
   12388:	222c      	movs	r2, #44	; 0x2c
   1238a:	5c9b      	ldrb	r3, [r3, r2]
   1238c:	2b00      	cmp	r3, #0
   1238e:	d040      	beq.n	12412 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
   12390:	2316      	movs	r3, #22
   12392:	18fb      	adds	r3, r7, r3
   12394:	683a      	ldr	r2, [r7, #0]
   12396:	212b      	movs	r1, #43	; 0x2b
   12398:	5c52      	ldrb	r2, [r2, r1]
   1239a:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
   1239c:	683b      	ldr	r3, [r7, #0]
   1239e:	7b19      	ldrb	r1, [r3, #12]
		uint8_t start_pin =
   123a0:	2315      	movs	r3, #21
   123a2:	18fb      	adds	r3, r7, r3
   123a4:	2216      	movs	r2, #22
   123a6:	18ba      	adds	r2, r7, r2
   123a8:	7812      	ldrb	r2, [r2, #0]
   123aa:	188a      	adds	r2, r1, r2
   123ac:	701a      	strb	r2, [r3, #0]
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
   123ae:	683b      	ldr	r3, [r7, #0]
   123b0:	222c      	movs	r2, #44	; 0x2c
   123b2:	5c99      	ldrb	r1, [r3, r2]
		uint8_t end_pin =
   123b4:	230f      	movs	r3, #15
   123b6:	18fb      	adds	r3, r7, r3
   123b8:	2215      	movs	r2, #21
   123ba:	18ba      	adds	r2, r7, r2
   123bc:	7812      	ldrb	r2, [r2, #0]
   123be:	188a      	adds	r2, r1, r2
   123c0:	701a      	strb	r2, [r3, #0]

		while (start_pin < end_pin) {
   123c2:	e018      	b.n	123f6 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
   123c4:	2316      	movs	r3, #22
   123c6:	18fb      	adds	r3, r7, r3
   123c8:	781b      	ldrb	r3, [r3, #0]
   123ca:	220f      	movs	r2, #15
   123cc:	4013      	ands	r3, r2
   123ce:	683a      	ldr	r2, [r7, #0]
   123d0:	7b12      	ldrb	r2, [r2, #12]
   123d2:	189b      	adds	r3, r3, r2
   123d4:	0018      	movs	r0, r3
   123d6:	4bb5      	ldr	r3, [pc, #724]	; (126ac <_adc_set_config+0x370>)
   123d8:	4798      	blx	r3
			start_pin++;
   123da:	2315      	movs	r3, #21
   123dc:	18fb      	adds	r3, r7, r3
   123de:	781a      	ldrb	r2, [r3, #0]
   123e0:	2315      	movs	r3, #21
   123e2:	18fb      	adds	r3, r7, r3
   123e4:	3201      	adds	r2, #1
   123e6:	701a      	strb	r2, [r3, #0]
			offset++;
   123e8:	2316      	movs	r3, #22
   123ea:	18fb      	adds	r3, r7, r3
   123ec:	781a      	ldrb	r2, [r3, #0]
   123ee:	2316      	movs	r3, #22
   123f0:	18fb      	adds	r3, r7, r3
   123f2:	3201      	adds	r2, #1
   123f4:	701a      	strb	r2, [r3, #0]
		while (start_pin < end_pin) {
   123f6:	2315      	movs	r3, #21
   123f8:	18fa      	adds	r2, r7, r3
   123fa:	230f      	movs	r3, #15
   123fc:	18fb      	adds	r3, r7, r3
   123fe:	7812      	ldrb	r2, [r2, #0]
   12400:	781b      	ldrb	r3, [r3, #0]
   12402:	429a      	cmp	r2, r3
   12404:	d3de      	bcc.n	123c4 <_adc_set_config+0x88>
		}
		_adc_configure_ain_pin(config->negative_input);
   12406:	683b      	ldr	r3, [r7, #0]
   12408:	89db      	ldrh	r3, [r3, #14]
   1240a:	0018      	movs	r0, r3
   1240c:	4ba7      	ldr	r3, [pc, #668]	; (126ac <_adc_set_config+0x370>)
   1240e:	4798      	blx	r3
   12410:	e009      	b.n	12426 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
   12412:	683b      	ldr	r3, [r7, #0]
   12414:	7b1b      	ldrb	r3, [r3, #12]
   12416:	0018      	movs	r0, r3
   12418:	4ba4      	ldr	r3, [pc, #656]	; (126ac <_adc_set_config+0x370>)
   1241a:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
   1241c:	683b      	ldr	r3, [r7, #0]
   1241e:	89db      	ldrh	r3, [r3, #14]
   12420:	0018      	movs	r0, r3
   12422:	4ba2      	ldr	r3, [pc, #648]	; (126ac <_adc_set_config+0x370>)
   12424:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
   12426:	683b      	ldr	r3, [r7, #0]
   12428:	7d5b      	ldrb	r3, [r3, #21]
   1242a:	009b      	lsls	r3, r3, #2
   1242c:	b2da      	uxtb	r2, r3
   1242e:	693b      	ldr	r3, [r7, #16]
   12430:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
   12432:	683b      	ldr	r3, [r7, #0]
   12434:	7d9b      	ldrb	r3, [r3, #22]
   12436:	01db      	lsls	r3, r3, #7
   12438:	b25a      	sxtb	r2, r3
			(config->reference);
   1243a:	683b      	ldr	r3, [r7, #0]
   1243c:	785b      	ldrb	r3, [r3, #1]
   1243e:	b25b      	sxtb	r3, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
   12440:	4313      	orrs	r3, r2
   12442:	b25b      	sxtb	r3, r3
   12444:	b2da      	uxtb	r2, r3
	adc_module->REFCTRL.reg =
   12446:	693b      	ldr	r3, [r7, #16]
   12448:	705a      	strb	r2, [r3, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
   1244a:	683b      	ldr	r3, [r7, #0]
   1244c:	791b      	ldrb	r3, [r3, #4]
   1244e:	2b34      	cmp	r3, #52	; 0x34
   12450:	d846      	bhi.n	124e0 <_adc_set_config+0x1a4>
   12452:	009a      	lsls	r2, r3, #2
   12454:	4b96      	ldr	r3, [pc, #600]	; (126b0 <_adc_set_config+0x374>)
   12456:	18d3      	adds	r3, r2, r3
   12458:	681b      	ldr	r3, [r3, #0]
   1245a:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
   1245c:	231f      	movs	r3, #31
   1245e:	18fb      	adds	r3, r7, r3
   12460:	683a      	ldr	r2, [r7, #0]
   12462:	7c52      	ldrb	r2, [r2, #17]
   12464:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
   12466:	2317      	movs	r3, #23
   12468:	18fb      	adds	r3, r7, r3
   1246a:	683a      	ldr	r2, [r7, #0]
   1246c:	7c12      	ldrb	r2, [r2, #16]
   1246e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   12470:	2310      	movs	r3, #16
   12472:	61bb      	str	r3, [r7, #24]
		break;
   12474:	e036      	b.n	124e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
   12476:	231f      	movs	r3, #31
   12478:	18fb      	adds	r3, r7, r3
   1247a:	2201      	movs	r2, #1
   1247c:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
   1247e:	2317      	movs	r3, #23
   12480:	18fb      	adds	r3, r7, r3
   12482:	2202      	movs	r2, #2
   12484:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   12486:	2310      	movs	r3, #16
   12488:	61bb      	str	r3, [r7, #24]
		break;
   1248a:	e02b      	b.n	124e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
   1248c:	231f      	movs	r3, #31
   1248e:	18fb      	adds	r3, r7, r3
   12490:	2202      	movs	r2, #2
   12492:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
   12494:	2317      	movs	r3, #23
   12496:	18fb      	adds	r3, r7, r3
   12498:	2204      	movs	r2, #4
   1249a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   1249c:	2310      	movs	r3, #16
   1249e:	61bb      	str	r3, [r7, #24]
		break;
   124a0:	e020      	b.n	124e4 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
   124a2:	231f      	movs	r3, #31
   124a4:	18fb      	adds	r3, r7, r3
   124a6:	2201      	movs	r2, #1
   124a8:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
   124aa:	2317      	movs	r3, #23
   124ac:	18fb      	adds	r3, r7, r3
   124ae:	2206      	movs	r2, #6
   124b0:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   124b2:	2310      	movs	r3, #16
   124b4:	61bb      	str	r3, [r7, #24]
		break;
   124b6:	e015      	b.n	124e4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
   124b8:	231f      	movs	r3, #31
   124ba:	18fb      	adds	r3, r7, r3
   124bc:	2200      	movs	r2, #0
   124be:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
   124c0:	2317      	movs	r3, #23
   124c2:	18fb      	adds	r3, r7, r3
   124c4:	2208      	movs	r2, #8
   124c6:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
   124c8:	2310      	movs	r3, #16
   124ca:	61bb      	str	r3, [r7, #24]
		break;
   124cc:	e00a      	b.n	124e4 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
   124ce:	2330      	movs	r3, #48	; 0x30
   124d0:	61bb      	str	r3, [r7, #24]
		break;
   124d2:	e007      	b.n	124e4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
   124d4:	2320      	movs	r3, #32
   124d6:	61bb      	str	r3, [r7, #24]
		break;
   124d8:	e004      	b.n	124e4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
   124da:	2300      	movs	r3, #0
   124dc:	61bb      	str	r3, [r7, #24]
		break;
   124de:	e001      	b.n	124e4 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
   124e0:	2317      	movs	r3, #23
   124e2:	e1ae      	b.n	12842 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
   124e4:	231f      	movs	r3, #31
   124e6:	18fb      	adds	r3, r7, r3
   124e8:	781b      	ldrb	r3, [r3, #0]
   124ea:	011b      	lsls	r3, r3, #4
   124ec:	b2db      	uxtb	r3, r3
   124ee:	2270      	movs	r2, #112	; 0x70
   124f0:	4013      	ands	r3, r2
   124f2:	b2da      	uxtb	r2, r3
   124f4:	2317      	movs	r3, #23
   124f6:	18fb      	adds	r3, r7, r3
   124f8:	781b      	ldrb	r3, [r3, #0]
   124fa:	4313      	orrs	r3, r2
   124fc:	b2da      	uxtb	r2, r3
   124fe:	693b      	ldr	r3, [r7, #16]
   12500:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
   12502:	683b      	ldr	r3, [r7, #0]
   12504:	7ddb      	ldrb	r3, [r3, #23]
   12506:	2b3f      	cmp	r3, #63	; 0x3f
   12508:	d901      	bls.n	1250e <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
   1250a:	2317      	movs	r3, #23
   1250c:	e199      	b.n	12842 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
   1250e:	683b      	ldr	r3, [r7, #0]
   12510:	7dda      	ldrb	r2, [r3, #23]
		adc_module->SAMPCTRL.reg =
   12512:	693b      	ldr	r3, [r7, #16]
   12514:	70da      	strb	r2, [r3, #3]
	}

	while (adc_is_syncing(module_inst)) {
   12516:	46c0      	nop			; (mov r8, r8)
   12518:	687b      	ldr	r3, [r7, #4]
   1251a:	0018      	movs	r0, r3
   1251c:	4b65      	ldr	r3, [pc, #404]	; (126b4 <_adc_set_config+0x378>)
   1251e:	4798      	blx	r3
   12520:	1e03      	subs	r3, r0, #0
   12522:	d1f9      	bne.n	12518 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
   12524:	683b      	ldr	r3, [r7, #0]
   12526:	885a      	ldrh	r2, [r3, #2]
   12528:	69bb      	ldr	r3, [r7, #24]
   1252a:	b29b      	uxth	r3, r3
   1252c:	4313      	orrs	r3, r2
   1252e:	b29a      	uxth	r2, r3
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
   12530:	683b      	ldr	r3, [r7, #0]
   12532:	2124      	movs	r1, #36	; 0x24
   12534:	5c5b      	ldrb	r3, [r3, r1]
   12536:	b29b      	uxth	r3, r3
   12538:	00db      	lsls	r3, r3, #3
   1253a:	b29b      	uxth	r3, r3
			resolution |
   1253c:	4313      	orrs	r3, r2
   1253e:	b29a      	uxth	r2, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
   12540:	683b      	ldr	r3, [r7, #0]
   12542:	7d1b      	ldrb	r3, [r3, #20]
   12544:	b29b      	uxth	r3, r3
   12546:	009b      	lsls	r3, r3, #2
   12548:	b29b      	uxth	r3, r3
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
   1254a:	4313      	orrs	r3, r2
   1254c:	b29a      	uxth	r2, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   1254e:	683b      	ldr	r3, [r7, #0]
   12550:	7c9b      	ldrb	r3, [r3, #18]
   12552:	b29b      	uxth	r3, r3
   12554:	18db      	adds	r3, r3, r3
   12556:	b29b      	uxth	r3, r3
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
   12558:	4313      	orrs	r3, r2
   1255a:	b29a      	uxth	r2, r3
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
   1255c:	683b      	ldr	r3, [r7, #0]
   1255e:	7cdb      	ldrb	r3, [r3, #19]
   12560:	b29b      	uxth	r3, r3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
   12562:	4313      	orrs	r3, r2
   12564:	b29a      	uxth	r2, r3
	adc_module->CTRLB.reg =
   12566:	693b      	ldr	r3, [r7, #16]
   12568:	809a      	strh	r2, [r3, #4]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
   1256a:	683b      	ldr	r3, [r7, #0]
   1256c:	7e1b      	ldrb	r3, [r3, #24]
   1256e:	2b00      	cmp	r3, #0
   12570:	d100      	bne.n	12574 <_adc_set_config+0x238>
   12572:	e0c4      	b.n	126fe <_adc_set_config+0x3c2>
		switch (resolution) {
   12574:	69bb      	ldr	r3, [r7, #24]
   12576:	2b10      	cmp	r3, #16
   12578:	d100      	bne.n	1257c <_adc_set_config+0x240>
   1257a:	e076      	b.n	1266a <_adc_set_config+0x32e>
   1257c:	d802      	bhi.n	12584 <_adc_set_config+0x248>
   1257e:	2b00      	cmp	r3, #0
   12580:	d04d      	beq.n	1261e <_adc_set_config+0x2e2>
   12582:	e0bc      	b.n	126fe <_adc_set_config+0x3c2>
   12584:	2b20      	cmp	r3, #32
   12586:	d023      	beq.n	125d0 <_adc_set_config+0x294>
   12588:	2b30      	cmp	r3, #48	; 0x30
   1258a:	d000      	beq.n	1258e <_adc_set_config+0x252>
   1258c:	e0b7      	b.n	126fe <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
   1258e:	683b      	ldr	r3, [r7, #0]
   12590:	7cdb      	ldrb	r3, [r3, #19]
   12592:	2b00      	cmp	r3, #0
   12594:	d011      	beq.n	125ba <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
   12596:	683b      	ldr	r3, [r7, #0]
   12598:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1259a:	2b7f      	cmp	r3, #127	; 0x7f
   1259c:	dc0b      	bgt.n	125b6 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
   1259e:	683b      	ldr	r3, [r7, #0]
   125a0:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 127 ||
   125a2:	3380      	adds	r3, #128	; 0x80
   125a4:	db07      	blt.n	125b6 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
   125a6:	683b      	ldr	r3, [r7, #0]
   125a8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
   125aa:	2b7f      	cmp	r3, #127	; 0x7f
   125ac:	dc03      	bgt.n	125b6 <_adc_set_config+0x27a>
					config->window.window_upper_value < -128)) {
   125ae:	683b      	ldr	r3, [r7, #0]
   125b0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 127 ||
   125b2:	3380      	adds	r3, #128	; 0x80
   125b4:	da01      	bge.n	125ba <_adc_set_config+0x27e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   125b6:	2317      	movs	r3, #23
   125b8:	e143      	b.n	12842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
   125ba:	683b      	ldr	r3, [r7, #0]
   125bc:	69db      	ldr	r3, [r3, #28]
   125be:	2bff      	cmp	r3, #255	; 0xff
   125c0:	dc04      	bgt.n	125cc <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
   125c2:	683b      	ldr	r3, [r7, #0]
   125c4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 255 ||
   125c6:	2bff      	cmp	r3, #255	; 0xff
   125c8:	dc00      	bgt.n	125cc <_adc_set_config+0x290>
   125ca:	e091      	b.n	126f0 <_adc_set_config+0x3b4>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   125cc:	2317      	movs	r3, #23
   125ce:	e138      	b.n	12842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
   125d0:	683b      	ldr	r3, [r7, #0]
   125d2:	7cdb      	ldrb	r3, [r3, #19]
   125d4:	2b00      	cmp	r3, #0
   125d6:	d015      	beq.n	12604 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
   125d8:	683b      	ldr	r3, [r7, #0]
   125da:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   125dc:	4a36      	ldr	r2, [pc, #216]	; (126b8 <_adc_set_config+0x37c>)
   125de:	4293      	cmp	r3, r2
   125e0:	dc0e      	bgt.n	12600 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
   125e2:	683b      	ldr	r3, [r7, #0]
   125e4:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 511 ||
   125e6:	4a35      	ldr	r2, [pc, #212]	; (126bc <_adc_set_config+0x380>)
   125e8:	4293      	cmp	r3, r2
   125ea:	db09      	blt.n	12600 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
   125ec:	683b      	ldr	r3, [r7, #0]
   125ee:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
   125f0:	4a31      	ldr	r2, [pc, #196]	; (126b8 <_adc_set_config+0x37c>)
   125f2:	4293      	cmp	r3, r2
   125f4:	dc04      	bgt.n	12600 <_adc_set_config+0x2c4>
					config->window.window_upper_value < -512)) {
   125f6:	683b      	ldr	r3, [r7, #0]
   125f8:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 511 ||
   125fa:	4a30      	ldr	r2, [pc, #192]	; (126bc <_adc_set_config+0x380>)
   125fc:	4293      	cmp	r3, r2
   125fe:	da01      	bge.n	12604 <_adc_set_config+0x2c8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   12600:	2317      	movs	r3, #23
   12602:	e11e      	b.n	12842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
   12604:	683b      	ldr	r3, [r7, #0]
   12606:	69db      	ldr	r3, [r3, #28]
   12608:	4a2d      	ldr	r2, [pc, #180]	; (126c0 <_adc_set_config+0x384>)
   1260a:	4293      	cmp	r3, r2
   1260c:	dc05      	bgt.n	1261a <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
   1260e:	683b      	ldr	r3, [r7, #0]
   12610:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 1023 ||
   12612:	4a2b      	ldr	r2, [pc, #172]	; (126c0 <_adc_set_config+0x384>)
   12614:	4293      	cmp	r3, r2
   12616:	dc00      	bgt.n	1261a <_adc_set_config+0x2de>
   12618:	e06c      	b.n	126f4 <_adc_set_config+0x3b8>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1261a:	2317      	movs	r3, #23
   1261c:	e111      	b.n	12842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
   1261e:	683b      	ldr	r3, [r7, #0]
   12620:	7cdb      	ldrb	r3, [r3, #19]
   12622:	2b00      	cmp	r3, #0
   12624:	d015      	beq.n	12652 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
   12626:	683b      	ldr	r3, [r7, #0]
   12628:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   1262a:	4a26      	ldr	r2, [pc, #152]	; (126c4 <_adc_set_config+0x388>)
   1262c:	4293      	cmp	r3, r2
   1262e:	dc0e      	bgt.n	1264e <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
   12630:	683b      	ldr	r3, [r7, #0]
   12632:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 2047 ||
   12634:	4a24      	ldr	r2, [pc, #144]	; (126c8 <_adc_set_config+0x38c>)
   12636:	4293      	cmp	r3, r2
   12638:	db09      	blt.n	1264e <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
   1263a:	683b      	ldr	r3, [r7, #0]
   1263c:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
   1263e:	4a21      	ldr	r2, [pc, #132]	; (126c4 <_adc_set_config+0x388>)
   12640:	4293      	cmp	r3, r2
   12642:	dc04      	bgt.n	1264e <_adc_set_config+0x312>
					config->window.window_upper_value < -2048)) {
   12644:	683b      	ldr	r3, [r7, #0]
   12646:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 2047 ||
   12648:	4a1f      	ldr	r2, [pc, #124]	; (126c8 <_adc_set_config+0x38c>)
   1264a:	4293      	cmp	r3, r2
   1264c:	da01      	bge.n	12652 <_adc_set_config+0x316>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1264e:	2317      	movs	r3, #23
   12650:	e0f7      	b.n	12842 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
   12652:	683b      	ldr	r3, [r7, #0]
   12654:	69db      	ldr	r3, [r3, #28]
   12656:	4a1d      	ldr	r2, [pc, #116]	; (126cc <_adc_set_config+0x390>)
   12658:	4293      	cmp	r3, r2
   1265a:	dc04      	bgt.n	12666 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
   1265c:	683b      	ldr	r3, [r7, #0]
   1265e:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 4095 ||
   12660:	4a1a      	ldr	r2, [pc, #104]	; (126cc <_adc_set_config+0x390>)
   12662:	4293      	cmp	r3, r2
   12664:	dd48      	ble.n	126f8 <_adc_set_config+0x3bc>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   12666:	2317      	movs	r3, #23
   12668:	e0eb      	b.n	12842 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
   1266a:	683b      	ldr	r3, [r7, #0]
   1266c:	7cdb      	ldrb	r3, [r3, #19]
   1266e:	2b00      	cmp	r3, #0
   12670:	d032      	beq.n	126d8 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
   12672:	683b      	ldr	r3, [r7, #0]
   12674:	69db      	ldr	r3, [r3, #28]
			if (config->differential_mode &&
   12676:	4a16      	ldr	r2, [pc, #88]	; (126d0 <_adc_set_config+0x394>)
   12678:	4293      	cmp	r3, r2
   1267a:	dc0e      	bgt.n	1269a <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
   1267c:	683b      	ldr	r3, [r7, #0]
   1267e:	69db      	ldr	r3, [r3, #28]
					(config->window.window_lower_value > 32767 ||
   12680:	4a14      	ldr	r2, [pc, #80]	; (126d4 <_adc_set_config+0x398>)
   12682:	4293      	cmp	r3, r2
   12684:	db09      	blt.n	1269a <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
   12686:	683b      	ldr	r3, [r7, #0]
   12688:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
   1268a:	4a11      	ldr	r2, [pc, #68]	; (126d0 <_adc_set_config+0x394>)
   1268c:	4293      	cmp	r3, r2
   1268e:	dc04      	bgt.n	1269a <_adc_set_config+0x35e>
					config->window.window_upper_value < -32768)) {
   12690:	683b      	ldr	r3, [r7, #0]
   12692:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_upper_value > 32767 ||
   12694:	4a0f      	ldr	r2, [pc, #60]	; (126d4 <_adc_set_config+0x398>)
   12696:	4293      	cmp	r3, r2
   12698:	da1e      	bge.n	126d8 <_adc_set_config+0x39c>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   1269a:	2317      	movs	r3, #23
   1269c:	e0d1      	b.n	12842 <_adc_set_config+0x506>
   1269e:	46c0      	nop			; (mov r8, r8)
   126a0:	00012115 	.word	0x00012115
   126a4:	00029279 	.word	0x00029279
   126a8:	000292bd 	.word	0x000292bd
   126ac:	000122c5 	.word	0x000122c5
   126b0:	00035748 	.word	0x00035748
   126b4:	000121f1 	.word	0x000121f1
   126b8:	000001ff 	.word	0x000001ff
   126bc:	fffffe00 	.word	0xfffffe00
   126c0:	000003ff 	.word	0x000003ff
   126c4:	000007ff 	.word	0x000007ff
   126c8:	fffff800 	.word	0xfffff800
   126cc:	00000fff 	.word	0x00000fff
   126d0:	00007fff 	.word	0x00007fff
   126d4:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
   126d8:	683b      	ldr	r3, [r7, #0]
   126da:	69db      	ldr	r3, [r3, #28]
   126dc:	4a5b      	ldr	r2, [pc, #364]	; (1284c <_adc_set_config+0x510>)
   126de:	4293      	cmp	r3, r2
   126e0:	dc04      	bgt.n	126ec <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
   126e2:	683b      	ldr	r3, [r7, #0]
   126e4:	6a1b      	ldr	r3, [r3, #32]
			} else if (config->window.window_lower_value > 65535 ||
   126e6:	4a59      	ldr	r2, [pc, #356]	; (1284c <_adc_set_config+0x510>)
   126e8:	4293      	cmp	r3, r2
   126ea:	dd07      	ble.n	126fc <_adc_set_config+0x3c0>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
   126ec:	2317      	movs	r3, #23
   126ee:	e0a8      	b.n	12842 <_adc_set_config+0x506>
			break;
   126f0:	46c0      	nop			; (mov r8, r8)
   126f2:	e004      	b.n	126fe <_adc_set_config+0x3c2>
			break;
   126f4:	46c0      	nop			; (mov r8, r8)
   126f6:	e002      	b.n	126fe <_adc_set_config+0x3c2>
			break;
   126f8:	46c0      	nop			; (mov r8, r8)
   126fa:	e000      	b.n	126fe <_adc_set_config+0x3c2>
			}
			break;
   126fc:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
   126fe:	46c0      	nop			; (mov r8, r8)
   12700:	687b      	ldr	r3, [r7, #4]
   12702:	0018      	movs	r0, r3
   12704:	4b52      	ldr	r3, [pc, #328]	; (12850 <_adc_set_config+0x514>)
   12706:	4798      	blx	r3
   12708:	1e03      	subs	r3, r0, #0
   1270a:	d1f9      	bne.n	12700 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
   1270c:	683b      	ldr	r3, [r7, #0]
   1270e:	7e1a      	ldrb	r2, [r3, #24]
   12710:	693b      	ldr	r3, [r7, #16]
   12712:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
   12714:	46c0      	nop			; (mov r8, r8)
   12716:	687b      	ldr	r3, [r7, #4]
   12718:	0018      	movs	r0, r3
   1271a:	4b4d      	ldr	r3, [pc, #308]	; (12850 <_adc_set_config+0x514>)
   1271c:	4798      	blx	r3
   1271e:	1e03      	subs	r3, r0, #0
   12720:	d1f9      	bne.n	12716 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
   12722:	683b      	ldr	r3, [r7, #0]
   12724:	69db      	ldr	r3, [r3, #28]
	adc_module->WINLT.reg =
   12726:	b29a      	uxth	r2, r3
   12728:	693b      	ldr	r3, [r7, #16]
   1272a:	839a      	strh	r2, [r3, #28]

	while (adc_is_syncing(module_inst)) {
   1272c:	46c0      	nop			; (mov r8, r8)
   1272e:	687b      	ldr	r3, [r7, #4]
   12730:	0018      	movs	r0, r3
   12732:	4b47      	ldr	r3, [pc, #284]	; (12850 <_adc_set_config+0x514>)
   12734:	4798      	blx	r3
   12736:	1e03      	subs	r3, r0, #0
   12738:	d1f9      	bne.n	1272e <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
   1273a:	683b      	ldr	r3, [r7, #0]
   1273c:	6a1b      	ldr	r3, [r3, #32]
   1273e:	b29a      	uxth	r2, r3
   12740:	693b      	ldr	r3, [r7, #16]
   12742:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
   12744:	2314      	movs	r3, #20
   12746:	18fb      	adds	r3, r7, r3
   12748:	683a      	ldr	r2, [r7, #0]
   1274a:	212c      	movs	r1, #44	; 0x2c
   1274c:	5c52      	ldrb	r2, [r2, r1]
   1274e:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
   12750:	2314      	movs	r3, #20
   12752:	18fb      	adds	r3, r7, r3
   12754:	781b      	ldrb	r3, [r3, #0]
   12756:	2b00      	cmp	r3, #0
   12758:	d006      	beq.n	12768 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
   1275a:	2314      	movs	r3, #20
   1275c:	18fb      	adds	r3, r7, r3
   1275e:	781a      	ldrb	r2, [r3, #0]
   12760:	2314      	movs	r3, #20
   12762:	18fb      	adds	r3, r7, r3
   12764:	3a01      	subs	r2, #1
   12766:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   12768:	2314      	movs	r3, #20
   1276a:	18fb      	adds	r3, r7, r3
   1276c:	781b      	ldrb	r3, [r3, #0]
   1276e:	2b0f      	cmp	r3, #15
   12770:	d804      	bhi.n	1277c <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
   12772:	683b      	ldr	r3, [r7, #0]
   12774:	222b      	movs	r2, #43	; 0x2b
   12776:	5c9b      	ldrb	r3, [r3, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
   12778:	2b0f      	cmp	r3, #15
   1277a:	d901      	bls.n	12780 <_adc_set_config+0x444>
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
   1277c:	2317      	movs	r3, #23
   1277e:	e060      	b.n	12842 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
   12780:	46c0      	nop			; (mov r8, r8)
   12782:	687b      	ldr	r3, [r7, #4]
   12784:	0018      	movs	r0, r3
   12786:	4b32      	ldr	r3, [pc, #200]	; (12850 <_adc_set_config+0x514>)
   12788:	4798      	blx	r3
   1278a:	1e03      	subs	r3, r0, #0
   1278c:	d1f9      	bne.n	12782 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
   1278e:	683b      	ldr	r3, [r7, #0]
   12790:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
   12792:	683a      	ldr	r2, [r7, #0]
   12794:	212b      	movs	r1, #43	; 0x2b
   12796:	5c52      	ldrb	r2, [r2, r1]
   12798:	0512      	lsls	r2, r2, #20
			config->gain_factor |
   1279a:	4313      	orrs	r3, r2
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   1279c:	2214      	movs	r2, #20
   1279e:	18ba      	adds	r2, r7, r2
   127a0:	7812      	ldrb	r2, [r2, #0]
   127a2:	0412      	lsls	r2, r2, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
   127a4:	4313      	orrs	r3, r2
			config->negative_input |
   127a6:	683a      	ldr	r2, [r7, #0]
   127a8:	89d2      	ldrh	r2, [r2, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
   127aa:	4313      	orrs	r3, r2
			config->positive_input;
   127ac:	683a      	ldr	r2, [r7, #0]
   127ae:	7b12      	ldrb	r2, [r2, #12]
			config->negative_input |
   127b0:	431a      	orrs	r2, r3
	adc_module->INPUTCTRL.reg =
   127b2:	693b      	ldr	r3, [r7, #16]
   127b4:	611a      	str	r2, [r3, #16]

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
   127b6:	683b      	ldr	r3, [r7, #0]
   127b8:	222a      	movs	r2, #42	; 0x2a
   127ba:	5c9a      	ldrb	r2, [r3, r2]
   127bc:	693b      	ldr	r3, [r7, #16]
   127be:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
   127c0:	693b      	ldr	r3, [r7, #16]
   127c2:	220f      	movs	r2, #15
   127c4:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
   127c6:	683b      	ldr	r3, [r7, #0]
   127c8:	2224      	movs	r2, #36	; 0x24
   127ca:	5c9b      	ldrb	r3, [r3, r2]
   127cc:	2b00      	cmp	r3, #0
   127ce:	d01e      	beq.n	1280e <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
   127d0:	683b      	ldr	r3, [r7, #0]
   127d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   127d4:	4a1f      	ldr	r2, [pc, #124]	; (12854 <_adc_set_config+0x518>)
   127d6:	4293      	cmp	r3, r2
   127d8:	d901      	bls.n	127de <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
   127da:	2317      	movs	r3, #23
   127dc:	e031      	b.n	12842 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
   127de:	683b      	ldr	r3, [r7, #0]
   127e0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   127e2:	693b      	ldr	r3, [r7, #16]
   127e4:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
   127e6:	683b      	ldr	r3, [r7, #0]
   127e8:	2228      	movs	r2, #40	; 0x28
   127ea:	5e9b      	ldrsh	r3, [r3, r2]
   127ec:	4a1a      	ldr	r2, [pc, #104]	; (12858 <_adc_set_config+0x51c>)
   127ee:	4293      	cmp	r3, r2
   127f0:	dc05      	bgt.n	127fe <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
   127f2:	683b      	ldr	r3, [r7, #0]
   127f4:	2228      	movs	r2, #40	; 0x28
   127f6:	5e9b      	ldrsh	r3, [r3, r2]
		if (config->correction.offset_correction > 2047 ||
   127f8:	4a18      	ldr	r2, [pc, #96]	; (1285c <_adc_set_config+0x520>)
   127fa:	4293      	cmp	r3, r2
   127fc:	da01      	bge.n	12802 <_adc_set_config+0x4c6>
			return STATUS_ERR_INVALID_ARG;
   127fe:	2317      	movs	r3, #23
   12800:	e01f      	b.n	12842 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
   12802:	683b      	ldr	r3, [r7, #0]
   12804:	2228      	movs	r2, #40	; 0x28
   12806:	5e9b      	ldrsh	r3, [r3, r2]
   12808:	b29a      	uxth	r2, r3
   1280a:	693b      	ldr	r3, [r7, #16]
   1280c:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
   1280e:	4b14      	ldr	r3, [pc, #80]	; (12860 <_adc_set_config+0x524>)
   12810:	681b      	ldr	r3, [r3, #0]
   12812:	08db      	lsrs	r3, r3, #3
   12814:	b29b      	uxth	r3, r3
   12816:	021b      	lsls	r3, r3, #8
   12818:	b29a      	uxth	r2, r3
   1281a:	23e0      	movs	r3, #224	; 0xe0
   1281c:	00db      	lsls	r3, r3, #3
   1281e:	4013      	ands	r3, r2
   12820:	b29a      	uxth	r2, r3
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
   12822:	4b10      	ldr	r3, [pc, #64]	; (12864 <_adc_set_config+0x528>)
   12824:	685c      	ldr	r4, [r3, #4]
   12826:	681b      	ldr	r3, [r3, #0]
   12828:	0161      	lsls	r1, r4, #5
   1282a:	0edd      	lsrs	r5, r3, #27
   1282c:	430d      	orrs	r5, r1
   1282e:	0ee6      	lsrs	r6, r4, #27
   12830:	b2ab      	uxth	r3, r5
   12832:	21ff      	movs	r1, #255	; 0xff
   12834:	400b      	ands	r3, r1
   12836:	b29b      	uxth	r3, r3
			) |
   12838:	4313      	orrs	r3, r2
   1283a:	b29a      	uxth	r2, r3
	adc_module->CALIB.reg =
   1283c:	693b      	ldr	r3, [r7, #16]
   1283e:	851a      	strh	r2, [r3, #40]	; 0x28
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
   12840:	2300      	movs	r3, #0
}
   12842:	0018      	movs	r0, r3
   12844:	46bd      	mov	sp, r7
   12846:	b009      	add	sp, #36	; 0x24
   12848:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1284a:	46c0      	nop			; (mov r8, r8)
   1284c:	0000ffff 	.word	0x0000ffff
   12850:	000121f1 	.word	0x000121f1
   12854:	00000fff 	.word	0x00000fff
   12858:	000007ff 	.word	0x000007ff
   1285c:	fffff800 	.word	0xfffff800
   12860:	00806024 	.word	0x00806024
   12864:	00806020 	.word	0x00806020

00012868 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
   12868:	b580      	push	{r7, lr}
   1286a:	b086      	sub	sp, #24
   1286c:	af00      	add	r7, sp, #0
   1286e:	60f8      	str	r0, [r7, #12]
   12870:	60b9      	str	r1, [r7, #8]
   12872:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
   12874:	68fb      	ldr	r3, [r7, #12]
   12876:	68ba      	ldr	r2, [r7, #8]
   12878:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
   1287a:	2380      	movs	r3, #128	; 0x80
   1287c:	025b      	lsls	r3, r3, #9
   1287e:	0019      	movs	r1, r3
   12880:	2002      	movs	r0, #2
   12882:	4b32      	ldr	r3, [pc, #200]	; (1294c <adc_init+0xe4>)
   12884:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
   12886:	68bb      	ldr	r3, [r7, #8]
   12888:	781b      	ldrb	r3, [r3, #0]
   1288a:	b2db      	uxtb	r3, r3
   1288c:	001a      	movs	r2, r3
   1288e:	2301      	movs	r3, #1
   12890:	4013      	ands	r3, r2
   12892:	d001      	beq.n	12898 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
   12894:	2305      	movs	r3, #5
   12896:	e055      	b.n	12944 <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
   12898:	68bb      	ldr	r3, [r7, #8]
   1289a:	781b      	ldrb	r3, [r3, #0]
   1289c:	b2db      	uxtb	r3, r3
   1289e:	001a      	movs	r2, r3
   128a0:	2302      	movs	r3, #2
   128a2:	4013      	ands	r3, r2
   128a4:	d001      	beq.n	128aa <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
   128a6:	231c      	movs	r3, #28
   128a8:	e04c      	b.n	12944 <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
   128aa:	687b      	ldr	r3, [r7, #4]
   128ac:	785a      	ldrb	r2, [r3, #1]
   128ae:	68fb      	ldr	r3, [r7, #12]
   128b0:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
   128b2:	68fb      	ldr	r3, [r7, #12]
   128b4:	791b      	ldrb	r3, [r3, #4]
   128b6:	2b00      	cmp	r3, #0
   128b8:	d102      	bne.n	128c0 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
   128ba:	2001      	movs	r0, #1
   128bc:	4b24      	ldr	r3, [pc, #144]	; (12950 <adc_init+0xe8>)
   128be:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
   128c0:	2317      	movs	r3, #23
   128c2:	18fb      	adds	r3, r7, r3
   128c4:	2200      	movs	r2, #0
   128c6:	701a      	strb	r2, [r3, #0]
   128c8:	e00e      	b.n	128e8 <adc_init+0x80>
		module_inst->callback[i] = NULL;
   128ca:	2317      	movs	r3, #23
   128cc:	18fb      	adds	r3, r7, r3
   128ce:	781a      	ldrb	r2, [r3, #0]
   128d0:	68fb      	ldr	r3, [r7, #12]
   128d2:	3202      	adds	r2, #2
   128d4:	0092      	lsls	r2, r2, #2
   128d6:	2100      	movs	r1, #0
   128d8:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
   128da:	2317      	movs	r3, #23
   128dc:	18fb      	adds	r3, r7, r3
   128de:	781a      	ldrb	r2, [r3, #0]
   128e0:	2317      	movs	r3, #23
   128e2:	18fb      	adds	r3, r7, r3
   128e4:	3201      	adds	r2, #1
   128e6:	701a      	strb	r2, [r3, #0]
   128e8:	2317      	movs	r3, #23
   128ea:	18fb      	adds	r3, r7, r3
   128ec:	781b      	ldrb	r3, [r3, #0]
   128ee:	2b02      	cmp	r3, #2
   128f0:	d9eb      	bls.n	128ca <adc_init+0x62>
	};

	module_inst->registered_callback_mask = 0;
   128f2:	68fb      	ldr	r3, [r7, #12]
   128f4:	2200      	movs	r2, #0
   128f6:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
   128f8:	68fb      	ldr	r3, [r7, #12]
   128fa:	2200      	movs	r2, #0
   128fc:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
   128fe:	68fb      	ldr	r3, [r7, #12]
   12900:	2200      	movs	r2, #0
   12902:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
   12904:	68fb      	ldr	r3, [r7, #12]
   12906:	2200      	movs	r2, #0
   12908:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
   1290a:	4b12      	ldr	r3, [pc, #72]	; (12954 <adc_init+0xec>)
   1290c:	68fa      	ldr	r2, [r7, #12]
   1290e:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
   12910:	687b      	ldr	r3, [r7, #4]
   12912:	222a      	movs	r2, #42	; 0x2a
   12914:	5c9b      	ldrb	r3, [r3, r2]
   12916:	2b00      	cmp	r3, #0
   12918:	d10a      	bne.n	12930 <adc_init+0xc8>
			!config->freerunning) {
   1291a:	687b      	ldr	r3, [r7, #4]
   1291c:	7d1b      	ldrb	r3, [r3, #20]
   1291e:	2201      	movs	r2, #1
   12920:	4053      	eors	r3, r2
   12922:	b2db      	uxtb	r3, r3
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
   12924:	2b00      	cmp	r3, #0
   12926:	d003      	beq.n	12930 <adc_init+0xc8>
		module_inst->software_trigger = true;
   12928:	68fb      	ldr	r3, [r7, #12]
   1292a:	2201      	movs	r2, #1
   1292c:	775a      	strb	r2, [r3, #29]
   1292e:	e002      	b.n	12936 <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
   12930:	68fb      	ldr	r3, [r7, #12]
   12932:	2200      	movs	r2, #0
   12934:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
   12936:	687a      	ldr	r2, [r7, #4]
   12938:	68fb      	ldr	r3, [r7, #12]
   1293a:	0011      	movs	r1, r2
   1293c:	0018      	movs	r0, r3
   1293e:	4b06      	ldr	r3, [pc, #24]	; (12958 <adc_init+0xf0>)
   12940:	4798      	blx	r3
   12942:	0003      	movs	r3, r0
}
   12944:	0018      	movs	r0, r3
   12946:	46bd      	mov	sp, r7
   12948:	b006      	add	sp, #24
   1294a:	bd80      	pop	{r7, pc}
   1294c:	0001212d 	.word	0x0001212d
   12950:	000121b1 	.word	0x000121b1
   12954:	20004590 	.word	0x20004590
   12958:	0001233d 	.word	0x0001233d

0001295c <adc_is_syncing>:
{
   1295c:	b580      	push	{r7, lr}
   1295e:	b084      	sub	sp, #16
   12960:	af00      	add	r7, sp, #0
   12962:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   12964:	687b      	ldr	r3, [r7, #4]
   12966:	681b      	ldr	r3, [r3, #0]
   12968:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   1296a:	68fb      	ldr	r3, [r7, #12]
   1296c:	7e5b      	ldrb	r3, [r3, #25]
   1296e:	b2db      	uxtb	r3, r3
   12970:	b25b      	sxtb	r3, r3
   12972:	2b00      	cmp	r3, #0
   12974:	da01      	bge.n	1297a <adc_is_syncing+0x1e>
		return true;
   12976:	2301      	movs	r3, #1
   12978:	e000      	b.n	1297c <adc_is_syncing+0x20>
	return false;
   1297a:	2300      	movs	r3, #0
}
   1297c:	0018      	movs	r0, r3
   1297e:	46bd      	mov	sp, r7
   12980:	b004      	add	sp, #16
   12982:	bd80      	pop	{r7, pc}

00012984 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   12984:	b580      	push	{r7, lr}
   12986:	b084      	sub	sp, #16
   12988:	af00      	add	r7, sp, #0
   1298a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   1298c:	687b      	ldr	r3, [r7, #4]
   1298e:	681b      	ldr	r3, [r3, #0]
   12990:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   12992:	46c0      	nop			; (mov r8, r8)
   12994:	687b      	ldr	r3, [r7, #4]
   12996:	0018      	movs	r0, r3
   12998:	4b0b      	ldr	r3, [pc, #44]	; (129c8 <adc_start_conversion+0x44>)
   1299a:	4798      	blx	r3
   1299c:	1e03      	subs	r3, r0, #0
   1299e:	d1f9      	bne.n	12994 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   129a0:	68fb      	ldr	r3, [r7, #12]
   129a2:	7b1b      	ldrb	r3, [r3, #12]
   129a4:	b2db      	uxtb	r3, r3
   129a6:	2202      	movs	r2, #2
   129a8:	4313      	orrs	r3, r2
   129aa:	b2da      	uxtb	r2, r3
   129ac:	68fb      	ldr	r3, [r7, #12]
   129ae:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   129b0:	46c0      	nop			; (mov r8, r8)
   129b2:	687b      	ldr	r3, [r7, #4]
   129b4:	0018      	movs	r0, r3
   129b6:	4b04      	ldr	r3, [pc, #16]	; (129c8 <adc_start_conversion+0x44>)
   129b8:	4798      	blx	r3
   129ba:	1e03      	subs	r3, r0, #0
   129bc:	d1f9      	bne.n	129b2 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   129be:	46c0      	nop			; (mov r8, r8)
   129c0:	46bd      	mov	sp, r7
   129c2:	b004      	add	sp, #16
   129c4:	bd80      	pop	{r7, pc}
   129c6:	46c0      	nop			; (mov r8, r8)
   129c8:	0001295d 	.word	0x0001295d

000129cc <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   129cc:	b580      	push	{r7, lr}
   129ce:	b084      	sub	sp, #16
   129d0:	af00      	add	r7, sp, #0
   129d2:	6078      	str	r0, [r7, #4]
   129d4:	000a      	movs	r2, r1
   129d6:	1cfb      	adds	r3, r7, #3
   129d8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   129da:	687b      	ldr	r3, [r7, #4]
   129dc:	681b      	ldr	r3, [r3, #0]
   129de:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   129e0:	68fb      	ldr	r3, [r7, #12]
   129e2:	1cfa      	adds	r2, r7, #3
   129e4:	7812      	ldrb	r2, [r2, #0]
   129e6:	759a      	strb	r2, [r3, #22]
}
   129e8:	46c0      	nop			; (mov r8, r8)
   129ea:	46bd      	mov	sp, r7
   129ec:	b004      	add	sp, #16
   129ee:	bd80      	pop	{r7, pc}

000129f0 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   129f0:	b580      	push	{r7, lr}
   129f2:	b084      	sub	sp, #16
   129f4:	af00      	add	r7, sp, #0
   129f6:	0002      	movs	r2, r0
   129f8:	1dfb      	adds	r3, r7, #7
   129fa:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   129fc:	1dfb      	adds	r3, r7, #7
   129fe:	781a      	ldrb	r2, [r3, #0]
   12a00:	4b47      	ldr	r3, [pc, #284]	; (12b20 <_adc_interrupt_handler+0x130>)
   12a02:	0092      	lsls	r2, r2, #2
   12a04:	58d3      	ldr	r3, [r2, r3]
   12a06:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   12a08:	68fb      	ldr	r3, [r7, #12]
   12a0a:	681b      	ldr	r3, [r3, #0]
   12a0c:	7e1b      	ldrb	r3, [r3, #24]
   12a0e:	b2da      	uxtb	r2, r3
   12a10:	68fb      	ldr	r3, [r7, #12]
   12a12:	681b      	ldr	r3, [r3, #0]
   12a14:	7ddb      	ldrb	r3, [r3, #23]
   12a16:	b2db      	uxtb	r3, r3
   12a18:	4013      	ands	r3, r2
   12a1a:	b2db      	uxtb	r3, r3
   12a1c:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   12a1e:	68bb      	ldr	r3, [r7, #8]
   12a20:	2201      	movs	r2, #1
   12a22:	4013      	ands	r3, r2
   12a24:	d045      	beq.n	12ab2 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   12a26:	68fb      	ldr	r3, [r7, #12]
   12a28:	681b      	ldr	r3, [r3, #0]
   12a2a:	2201      	movs	r2, #1
   12a2c:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   12a2e:	46c0      	nop			; (mov r8, r8)
   12a30:	68fb      	ldr	r3, [r7, #12]
   12a32:	0018      	movs	r0, r3
   12a34:	4b3b      	ldr	r3, [pc, #236]	; (12b24 <_adc_interrupt_handler+0x134>)
   12a36:	4798      	blx	r3
   12a38:	1e03      	subs	r3, r0, #0
   12a3a:	d1f9      	bne.n	12a30 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   12a3c:	68fb      	ldr	r3, [r7, #12]
   12a3e:	695b      	ldr	r3, [r3, #20]
   12a40:	1c99      	adds	r1, r3, #2
   12a42:	68fa      	ldr	r2, [r7, #12]
   12a44:	6151      	str	r1, [r2, #20]
   12a46:	68fa      	ldr	r2, [r7, #12]
   12a48:	6812      	ldr	r2, [r2, #0]
   12a4a:	8b52      	ldrh	r2, [r2, #26]
   12a4c:	b292      	uxth	r2, r2
   12a4e:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12a50:	68fb      	ldr	r3, [r7, #12]
   12a52:	8b1b      	ldrh	r3, [r3, #24]
   12a54:	b29b      	uxth	r3, r3
   12a56:	3b01      	subs	r3, #1
   12a58:	b29b      	uxth	r3, r3
   12a5a:	68fa      	ldr	r2, [r7, #12]
   12a5c:	1c19      	adds	r1, r3, #0
   12a5e:	8311      	strh	r1, [r2, #24]
   12a60:	2b00      	cmp	r3, #0
   12a62:	d008      	beq.n	12a76 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   12a64:	68fb      	ldr	r3, [r7, #12]
   12a66:	7f5b      	ldrb	r3, [r3, #29]
   12a68:	2b00      	cmp	r3, #0
   12a6a:	d022      	beq.n	12ab2 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12a6c:	68fb      	ldr	r3, [r7, #12]
   12a6e:	0018      	movs	r0, r3
   12a70:	4b2d      	ldr	r3, [pc, #180]	; (12b28 <_adc_interrupt_handler+0x138>)
   12a72:	4798      	blx	r3
   12a74:	e01d      	b.n	12ab2 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   12a76:	68fb      	ldr	r3, [r7, #12]
   12a78:	2101      	movs	r1, #1
   12a7a:	0018      	movs	r0, r3
   12a7c:	4b2b      	ldr	r3, [pc, #172]	; (12b2c <_adc_interrupt_handler+0x13c>)
   12a7e:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12a80:	68fb      	ldr	r3, [r7, #12]
   12a82:	7f1b      	ldrb	r3, [r3, #28]
   12a84:	b2db      	uxtb	r3, r3
   12a86:	2b05      	cmp	r3, #5
   12a88:	d113      	bne.n	12ab2 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12a8a:	68fb      	ldr	r3, [r7, #12]
   12a8c:	2200      	movs	r2, #0
   12a8e:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12a90:	68fb      	ldr	r3, [r7, #12]
   12a92:	7edb      	ldrb	r3, [r3, #27]
   12a94:	001a      	movs	r2, r3
   12a96:	2301      	movs	r3, #1
   12a98:	4013      	ands	r3, r2
   12a9a:	d00a      	beq.n	12ab2 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12a9c:	68fb      	ldr	r3, [r7, #12]
   12a9e:	7e9b      	ldrb	r3, [r3, #26]
   12aa0:	001a      	movs	r2, r3
   12aa2:	2301      	movs	r3, #1
   12aa4:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   12aa6:	d004      	beq.n	12ab2 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12aa8:	68fb      	ldr	r3, [r7, #12]
   12aaa:	689b      	ldr	r3, [r3, #8]
   12aac:	68fa      	ldr	r2, [r7, #12]
   12aae:	0010      	movs	r0, r2
   12ab0:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   12ab2:	68bb      	ldr	r3, [r7, #8]
   12ab4:	2204      	movs	r2, #4
   12ab6:	4013      	ands	r3, r2
   12ab8:	d014      	beq.n	12ae4 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12aba:	68fb      	ldr	r3, [r7, #12]
   12abc:	681b      	ldr	r3, [r3, #0]
   12abe:	2204      	movs	r2, #4
   12ac0:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12ac2:	68fb      	ldr	r3, [r7, #12]
   12ac4:	7edb      	ldrb	r3, [r3, #27]
   12ac6:	001a      	movs	r2, r3
   12ac8:	2302      	movs	r3, #2
   12aca:	4013      	ands	r3, r2
   12acc:	d00a      	beq.n	12ae4 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12ace:	68fb      	ldr	r3, [r7, #12]
   12ad0:	7e9b      	ldrb	r3, [r3, #26]
   12ad2:	001a      	movs	r2, r3
   12ad4:	2302      	movs	r3, #2
   12ad6:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12ad8:	d004      	beq.n	12ae4 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12ada:	68fb      	ldr	r3, [r7, #12]
   12adc:	68db      	ldr	r3, [r3, #12]
   12ade:	68fa      	ldr	r2, [r7, #12]
   12ae0:	0010      	movs	r0, r2
   12ae2:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   12ae4:	68bb      	ldr	r3, [r7, #8]
   12ae6:	2202      	movs	r2, #2
   12ae8:	4013      	ands	r3, r2
   12aea:	d014      	beq.n	12b16 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   12aec:	68fb      	ldr	r3, [r7, #12]
   12aee:	681b      	ldr	r3, [r3, #0]
   12af0:	2202      	movs	r2, #2
   12af2:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12af4:	68fb      	ldr	r3, [r7, #12]
   12af6:	7edb      	ldrb	r3, [r3, #27]
   12af8:	001a      	movs	r2, r3
   12afa:	2304      	movs	r3, #4
   12afc:	4013      	ands	r3, r2
   12afe:	d00a      	beq.n	12b16 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   12b00:	68fb      	ldr	r3, [r7, #12]
   12b02:	7e9b      	ldrb	r3, [r3, #26]
   12b04:	001a      	movs	r2, r3
   12b06:	2304      	movs	r3, #4
   12b08:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12b0a:	d004      	beq.n	12b16 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   12b0c:	68fb      	ldr	r3, [r7, #12]
   12b0e:	691b      	ldr	r3, [r3, #16]
   12b10:	68fa      	ldr	r2, [r7, #12]
   12b12:	0010      	movs	r0, r2
   12b14:	4798      	blx	r3
		}
	}
}
   12b16:	46c0      	nop			; (mov r8, r8)
   12b18:	46bd      	mov	sp, r7
   12b1a:	b004      	add	sp, #16
   12b1c:	bd80      	pop	{r7, pc}
   12b1e:	46c0      	nop			; (mov r8, r8)
   12b20:	20004590 	.word	0x20004590
   12b24:	0001295d 	.word	0x0001295d
   12b28:	00012985 	.word	0x00012985
   12b2c:	000129cd 	.word	0x000129cd

00012b30 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   12b30:	b580      	push	{r7, lr}
   12b32:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   12b34:	2000      	movs	r0, #0
   12b36:	4b02      	ldr	r3, [pc, #8]	; (12b40 <ADC_Handler+0x10>)
   12b38:	4798      	blx	r3
}
   12b3a:	46c0      	nop			; (mov r8, r8)
   12b3c:	46bd      	mov	sp, r7
   12b3e:	bd80      	pop	{r7, pc}
   12b40:	000129f1 	.word	0x000129f1

00012b44 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   12b44:	b580      	push	{r7, lr}
   12b46:	b082      	sub	sp, #8
   12b48:	af00      	add	r7, sp, #0
   12b4a:	0002      	movs	r2, r0
   12b4c:	1dfb      	adds	r3, r7, #7
   12b4e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12b50:	4a07      	ldr	r2, [pc, #28]	; (12b70 <system_interrupt_disable+0x2c>)
   12b52:	1dfb      	adds	r3, r7, #7
   12b54:	781b      	ldrb	r3, [r3, #0]
   12b56:	0019      	movs	r1, r3
   12b58:	231f      	movs	r3, #31
   12b5a:	400b      	ands	r3, r1
   12b5c:	2101      	movs	r1, #1
   12b5e:	4099      	lsls	r1, r3
   12b60:	000b      	movs	r3, r1
   12b62:	0019      	movs	r1, r3
   12b64:	2380      	movs	r3, #128	; 0x80
   12b66:	50d1      	str	r1, [r2, r3]
}
   12b68:	46c0      	nop			; (mov r8, r8)
   12b6a:	46bd      	mov	sp, r7
   12b6c:	b002      	add	sp, #8
   12b6e:	bd80      	pop	{r7, pc}
   12b70:	e000e100 	.word	0xe000e100

00012b74 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   12b74:	b580      	push	{r7, lr}
   12b76:	b084      	sub	sp, #16
   12b78:	af00      	add	r7, sp, #0
   12b7a:	0002      	movs	r2, r0
   12b7c:	1dfb      	adds	r3, r7, #7
   12b7e:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12b80:	1dfb      	adds	r3, r7, #7
   12b82:	781a      	ldrb	r2, [r3, #0]
   12b84:	4b37      	ldr	r3, [pc, #220]	; (12c64 <_dac_interrupt_handler+0xf0>)
   12b86:	0092      	lsls	r2, r2, #2
   12b88:	58d3      	ldr	r3, [r2, r3]
   12b8a:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12b8c:	68fb      	ldr	r3, [r7, #12]
   12b8e:	681b      	ldr	r3, [r3, #0]
   12b90:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   12b92:	68bb      	ldr	r3, [r7, #8]
   12b94:	799b      	ldrb	r3, [r3, #6]
   12b96:	b2db      	uxtb	r3, r3
   12b98:	001a      	movs	r2, r3
   12b9a:	2301      	movs	r3, #1
   12b9c:	4013      	ands	r3, r2
   12b9e:	d00e      	beq.n	12bbe <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12ba0:	68bb      	ldr	r3, [r7, #8]
   12ba2:	2201      	movs	r2, #1
   12ba4:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   12ba6:	68fb      	ldr	r3, [r7, #12]
   12ba8:	3314      	adds	r3, #20
   12baa:	2b00      	cmp	r3, #0
   12bac:	d007      	beq.n	12bbe <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12bae:	68fb      	ldr	r3, [r7, #12]
   12bb0:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   12bb2:	2b00      	cmp	r3, #0
   12bb4:	d003      	beq.n	12bbe <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   12bb6:	68fb      	ldr	r3, [r7, #12]
   12bb8:	699b      	ldr	r3, [r3, #24]
   12bba:	2000      	movs	r0, #0
   12bbc:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12bbe:	68bb      	ldr	r3, [r7, #8]
   12bc0:	799b      	ldrb	r3, [r3, #6]
   12bc2:	b2db      	uxtb	r3, r3
   12bc4:	001a      	movs	r2, r3
   12bc6:	2302      	movs	r3, #2
   12bc8:	4013      	ands	r3, r2
   12bca:	d047      	beq.n	12c5c <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12bcc:	68bb      	ldr	r3, [r7, #8]
   12bce:	2202      	movs	r2, #2
   12bd0:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   12bd2:	68fb      	ldr	r3, [r7, #12]
   12bd4:	899b      	ldrh	r3, [r3, #12]
   12bd6:	b29b      	uxth	r3, r3
   12bd8:	2b00      	cmp	r3, #0
   12bda:	d033      	beq.n	12c44 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12bdc:	68fb      	ldr	r3, [r7, #12]
   12bde:	689a      	ldr	r2, [r3, #8]
   12be0:	68fb      	ldr	r3, [r7, #12]
   12be2:	89db      	ldrh	r3, [r3, #14]
   12be4:	b29b      	uxth	r3, r3
   12be6:	1c59      	adds	r1, r3, #1
   12be8:	b288      	uxth	r0, r1
   12bea:	68f9      	ldr	r1, [r7, #12]
   12bec:	81c8      	strh	r0, [r1, #14]
   12bee:	005b      	lsls	r3, r3, #1
   12bf0:	18d3      	adds	r3, r2, r3
   12bf2:	881b      	ldrh	r3, [r3, #0]
   12bf4:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   12bf6:	68bb      	ldr	r3, [r7, #8]
   12bf8:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   12bfa:	68fb      	ldr	r3, [r7, #12]
   12bfc:	899b      	ldrh	r3, [r3, #12]
   12bfe:	b29b      	uxth	r3, r3
   12c00:	3b01      	subs	r3, #1
   12c02:	b29a      	uxth	r2, r3
   12c04:	68fb      	ldr	r3, [r7, #12]
   12c06:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   12c08:	68fb      	ldr	r3, [r7, #12]
   12c0a:	899b      	ldrh	r3, [r3, #12]
   12c0c:	b29b      	uxth	r3, r3
   12c0e:	2b00      	cmp	r3, #0
   12c10:	d118      	bne.n	12c44 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   12c12:	68fb      	ldr	r3, [r7, #12]
   12c14:	2220      	movs	r2, #32
   12c16:	2100      	movs	r1, #0
   12c18:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   12c1a:	68bb      	ldr	r3, [r7, #8]
   12c1c:	2202      	movs	r2, #2
   12c1e:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12c20:	68bb      	ldr	r3, [r7, #8]
   12c22:	2202      	movs	r2, #2
   12c24:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   12c26:	2019      	movs	r0, #25
   12c28:	4b0f      	ldr	r3, [pc, #60]	; (12c68 <_dac_interrupt_handler+0xf4>)
   12c2a:	4798      	blx	r3

				if ((module->callback) &&
   12c2c:	68fb      	ldr	r3, [r7, #12]
   12c2e:	3314      	adds	r3, #20
   12c30:	2b00      	cmp	r3, #0
   12c32:	d007      	beq.n	12c44 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   12c34:	68fb      	ldr	r3, [r7, #12]
   12c36:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   12c38:	2b00      	cmp	r3, #0
   12c3a:	d003      	beq.n	12c44 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   12c3c:	68fb      	ldr	r3, [r7, #12]
   12c3e:	69db      	ldr	r3, [r3, #28]
   12c40:	2000      	movs	r0, #0
   12c42:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   12c44:	68fb      	ldr	r3, [r7, #12]
   12c46:	3314      	adds	r3, #20
   12c48:	2b00      	cmp	r3, #0
   12c4a:	d007      	beq.n	12c5c <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12c4c:	68fb      	ldr	r3, [r7, #12]
   12c4e:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12c50:	2b00      	cmp	r3, #0
   12c52:	d003      	beq.n	12c5c <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   12c54:	68fb      	ldr	r3, [r7, #12]
   12c56:	695b      	ldr	r3, [r3, #20]
   12c58:	2000      	movs	r0, #0
   12c5a:	4798      	blx	r3
		}
	}
}
   12c5c:	46c0      	nop			; (mov r8, r8)
   12c5e:	46bd      	mov	sp, r7
   12c60:	b004      	add	sp, #16
   12c62:	bd80      	pop	{r7, pc}
   12c64:	20004594 	.word	0x20004594
   12c68:	00012b45 	.word	0x00012b45

00012c6c <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12c6c:	b580      	push	{r7, lr}
   12c6e:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12c70:	2000      	movs	r0, #0
   12c72:	4b02      	ldr	r3, [pc, #8]	; (12c7c <DAC_Handler+0x10>)
   12c74:	4798      	blx	r3
}
   12c76:	46c0      	nop			; (mov r8, r8)
   12c78:	46bd      	mov	sp, r7
   12c7a:	bd80      	pop	{r7, pc}
   12c7c:	00012b75 	.word	0x00012b75

00012c80 <system_interrupt_enter_critical_section>:
{
   12c80:	b580      	push	{r7, lr}
   12c82:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   12c84:	4b02      	ldr	r3, [pc, #8]	; (12c90 <system_interrupt_enter_critical_section+0x10>)
   12c86:	4798      	blx	r3
}
   12c88:	46c0      	nop			; (mov r8, r8)
   12c8a:	46bd      	mov	sp, r7
   12c8c:	bd80      	pop	{r7, pc}
   12c8e:	46c0      	nop			; (mov r8, r8)
   12c90:	000255e5 	.word	0x000255e5

00012c94 <system_interrupt_leave_critical_section>:
{
   12c94:	b580      	push	{r7, lr}
   12c96:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12c98:	4b02      	ldr	r3, [pc, #8]	; (12ca4 <system_interrupt_leave_critical_section+0x10>)
   12c9a:	4798      	blx	r3
}
   12c9c:	46c0      	nop			; (mov r8, r8)
   12c9e:	46bd      	mov	sp, r7
   12ca0:	bd80      	pop	{r7, pc}
   12ca2:	46c0      	nop			; (mov r8, r8)
   12ca4:	00025639 	.word	0x00025639

00012ca8 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12ca8:	b580      	push	{r7, lr}
   12caa:	b086      	sub	sp, #24
   12cac:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12cae:	4b49      	ldr	r3, [pc, #292]	; (12dd4 <DMAC_Handler+0x12c>)
   12cb0:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   12cb2:	4b49      	ldr	r3, [pc, #292]	; (12dd8 <DMAC_Handler+0x130>)
   12cb4:	8c1b      	ldrh	r3, [r3, #32]
   12cb6:	b29b      	uxth	r3, r3
   12cb8:	b2da      	uxtb	r2, r3
   12cba:	2317      	movs	r3, #23
   12cbc:	18fb      	adds	r3, r7, r3
   12cbe:	210f      	movs	r1, #15
   12cc0:	400a      	ands	r2, r1
   12cc2:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   12cc4:	2317      	movs	r3, #23
   12cc6:	18fb      	adds	r3, r7, r3
   12cc8:	781a      	ldrb	r2, [r3, #0]
   12cca:	4b44      	ldr	r3, [pc, #272]	; (12ddc <DMAC_Handler+0x134>)
   12ccc:	0092      	lsls	r2, r2, #2
   12cce:	58d3      	ldr	r3, [r2, r3]
   12cd0:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   12cd2:	4a41      	ldr	r2, [pc, #260]	; (12dd8 <DMAC_Handler+0x130>)
   12cd4:	693b      	ldr	r3, [r7, #16]
   12cd6:	781b      	ldrb	r3, [r3, #0]
   12cd8:	210f      	movs	r1, #15
   12cda:	400b      	ands	r3, r1
   12cdc:	b2d9      	uxtb	r1, r3
   12cde:	233f      	movs	r3, #63	; 0x3f
   12ce0:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   12ce2:	493d      	ldr	r1, [pc, #244]	; (12dd8 <DMAC_Handler+0x130>)
   12ce4:	230f      	movs	r3, #15
   12ce6:	18fb      	adds	r3, r7, r3
   12ce8:	224e      	movs	r2, #78	; 0x4e
   12cea:	5c8a      	ldrb	r2, [r1, r2]
   12cec:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   12cee:	693b      	ldr	r3, [r7, #16]
   12cf0:	781b      	ldrb	r3, [r3, #0]
   12cf2:	4a3b      	ldr	r2, [pc, #236]	; (12de0 <DMAC_Handler+0x138>)
   12cf4:	011b      	lsls	r3, r3, #4
   12cf6:	18d3      	adds	r3, r2, r3
   12cf8:	3302      	adds	r3, #2
   12cfa:	881b      	ldrh	r3, [r3, #0]
   12cfc:	b29b      	uxth	r3, r3
   12cfe:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   12d00:	693b      	ldr	r3, [r7, #16]
   12d02:	781b      	ldrb	r3, [r3, #0]
   12d04:	4a37      	ldr	r2, [pc, #220]	; (12de4 <DMAC_Handler+0x13c>)
   12d06:	011b      	lsls	r3, r3, #4
   12d08:	18d3      	adds	r3, r2, r3
   12d0a:	3302      	adds	r3, #2
   12d0c:	881b      	ldrh	r3, [r3, #0]
   12d0e:	b29b      	uxth	r3, r3
   12d10:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   12d12:	68ba      	ldr	r2, [r7, #8]
   12d14:	687b      	ldr	r3, [r7, #4]
   12d16:	1ad2      	subs	r2, r2, r3
   12d18:	693b      	ldr	r3, [r7, #16]
   12d1a:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   12d1c:	230f      	movs	r3, #15
   12d1e:	18fb      	adds	r3, r7, r3
   12d20:	781b      	ldrb	r3, [r3, #0]
   12d22:	2201      	movs	r2, #1
   12d24:	4013      	ands	r3, r2
   12d26:	d016      	beq.n	12d56 <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   12d28:	4a2b      	ldr	r2, [pc, #172]	; (12dd8 <DMAC_Handler+0x130>)
   12d2a:	234e      	movs	r3, #78	; 0x4e
   12d2c:	2101      	movs	r1, #1
   12d2e:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   12d30:	693b      	ldr	r3, [r7, #16]
   12d32:	2210      	movs	r2, #16
   12d34:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12d36:	693b      	ldr	r3, [r7, #16]
   12d38:	7c1b      	ldrb	r3, [r3, #16]
   12d3a:	001a      	movs	r2, r3
   12d3c:	2301      	movs	r3, #1
   12d3e:	4013      	ands	r3, r2
   12d40:	d042      	beq.n	12dc8 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   12d42:	693b      	ldr	r3, [r7, #16]
   12d44:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   12d46:	2b00      	cmp	r3, #0
   12d48:	d03e      	beq.n	12dc8 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12d4a:	693b      	ldr	r3, [r7, #16]
   12d4c:	685b      	ldr	r3, [r3, #4]
   12d4e:	693a      	ldr	r2, [r7, #16]
   12d50:	0010      	movs	r0, r2
   12d52:	4798      	blx	r3
   12d54:	e038      	b.n	12dc8 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   12d56:	230f      	movs	r3, #15
   12d58:	18fb      	adds	r3, r7, r3
   12d5a:	781b      	ldrb	r3, [r3, #0]
   12d5c:	2202      	movs	r2, #2
   12d5e:	4013      	ands	r3, r2
   12d60:	d016      	beq.n	12d90 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   12d62:	4a1d      	ldr	r2, [pc, #116]	; (12dd8 <DMAC_Handler+0x130>)
   12d64:	234e      	movs	r3, #78	; 0x4e
   12d66:	2102      	movs	r1, #2
   12d68:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12d6a:	693b      	ldr	r3, [r7, #16]
   12d6c:	2200      	movs	r2, #0
   12d6e:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12d70:	693b      	ldr	r3, [r7, #16]
   12d72:	7c1b      	ldrb	r3, [r3, #16]
   12d74:	001a      	movs	r2, r3
   12d76:	2302      	movs	r3, #2
   12d78:	4013      	ands	r3, r2
   12d7a:	d025      	beq.n	12dc8 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12d7c:	693b      	ldr	r3, [r7, #16]
   12d7e:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12d80:	2b00      	cmp	r3, #0
   12d82:	d021      	beq.n	12dc8 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   12d84:	693b      	ldr	r3, [r7, #16]
   12d86:	689b      	ldr	r3, [r3, #8]
   12d88:	693a      	ldr	r2, [r7, #16]
   12d8a:	0010      	movs	r0, r2
   12d8c:	4798      	blx	r3
   12d8e:	e01b      	b.n	12dc8 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12d90:	230f      	movs	r3, #15
   12d92:	18fb      	adds	r3, r7, r3
   12d94:	781b      	ldrb	r3, [r3, #0]
   12d96:	2204      	movs	r2, #4
   12d98:	4013      	ands	r3, r2
   12d9a:	d015      	beq.n	12dc8 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12d9c:	4a0e      	ldr	r2, [pc, #56]	; (12dd8 <DMAC_Handler+0x130>)
   12d9e:	234e      	movs	r3, #78	; 0x4e
   12da0:	2104      	movs	r1, #4
   12da2:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   12da4:	693b      	ldr	r3, [r7, #16]
   12da6:	2206      	movs	r2, #6
   12da8:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12daa:	693b      	ldr	r3, [r7, #16]
   12dac:	7c1b      	ldrb	r3, [r3, #16]
   12dae:	001a      	movs	r2, r3
   12db0:	2304      	movs	r3, #4
   12db2:	4013      	ands	r3, r2
   12db4:	d008      	beq.n	12dc8 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   12db6:	693b      	ldr	r3, [r7, #16]
   12db8:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12dba:	2b00      	cmp	r3, #0
   12dbc:	d004      	beq.n	12dc8 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12dbe:	693b      	ldr	r3, [r7, #16]
   12dc0:	68db      	ldr	r3, [r3, #12]
   12dc2:	693a      	ldr	r2, [r7, #16]
   12dc4:	0010      	movs	r0, r2
   12dc6:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12dc8:	4b07      	ldr	r3, [pc, #28]	; (12de8 <DMAC_Handler+0x140>)
   12dca:	4798      	blx	r3
}
   12dcc:	46c0      	nop			; (mov r8, r8)
   12dce:	46bd      	mov	sp, r7
   12dd0:	b006      	add	sp, #24
   12dd2:	bd80      	pop	{r7, pc}
   12dd4:	00012c81 	.word	0x00012c81
   12dd8:	41004800 	.word	0x41004800
   12ddc:	20000360 	.word	0x20000360
   12de0:	200045a0 	.word	0x200045a0
   12de4:	20000310 	.word	0x20000310
   12de8:	00012c95 	.word	0x00012c95

00012dec <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   12dec:	b580      	push	{r7, lr}
   12dee:	b082      	sub	sp, #8
   12df0:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   12df2:	4b15      	ldr	r3, [pc, #84]	; (12e48 <EVSYS_Handler+0x5c>)
   12df4:	691b      	ldr	r3, [r3, #16]
   12df6:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   12df8:	4b14      	ldr	r3, [pc, #80]	; (12e4c <EVSYS_Handler+0x60>)
   12dfa:	699b      	ldr	r3, [r3, #24]
   12dfc:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   12dfe:	4b12      	ldr	r3, [pc, #72]	; (12e48 <EVSYS_Handler+0x5c>)
   12e00:	689a      	ldr	r2, [r3, #8]
   12e02:	683b      	ldr	r3, [r7, #0]
   12e04:	431a      	orrs	r2, r3
   12e06:	4b10      	ldr	r3, [pc, #64]	; (12e48 <EVSYS_Handler+0x5c>)
   12e08:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   12e0a:	4b10      	ldr	r3, [pc, #64]	; (12e4c <EVSYS_Handler+0x60>)
   12e0c:	4a10      	ldr	r2, [pc, #64]	; (12e50 <EVSYS_Handler+0x64>)
   12e0e:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   12e10:	e008      	b.n	12e24 <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   12e12:	687b      	ldr	r3, [r7, #4]
   12e14:	685a      	ldr	r2, [r3, #4]
   12e16:	687b      	ldr	r3, [r7, #4]
   12e18:	681b      	ldr	r3, [r3, #0]
   12e1a:	0018      	movs	r0, r3
   12e1c:	4790      	blx	r2
		current_hook = current_hook->next;
   12e1e:	687b      	ldr	r3, [r7, #4]
   12e20:	689b      	ldr	r3, [r3, #8]
   12e22:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   12e24:	687b      	ldr	r3, [r7, #4]
   12e26:	2b00      	cmp	r3, #0
   12e28:	d1f3      	bne.n	12e12 <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   12e2a:	4b07      	ldr	r3, [pc, #28]	; (12e48 <EVSYS_Handler+0x5c>)
   12e2c:	68db      	ldr	r3, [r3, #12]
   12e2e:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   12e30:	4b05      	ldr	r3, [pc, #20]	; (12e48 <EVSYS_Handler+0x5c>)
   12e32:	689b      	ldr	r3, [r3, #8]
   12e34:	683a      	ldr	r2, [r7, #0]
   12e36:	43d2      	mvns	r2, r2
   12e38:	401a      	ands	r2, r3
   12e3a:	4b03      	ldr	r3, [pc, #12]	; (12e48 <EVSYS_Handler+0x5c>)
   12e3c:	609a      	str	r2, [r3, #8]
}
   12e3e:	46c0      	nop			; (mov r8, r8)
   12e40:	46bd      	mov	sp, r7
   12e42:	b002      	add	sp, #8
   12e44:	bd80      	pop	{r7, pc}
   12e46:	46c0      	nop			; (mov r8, r8)
   12e48:	20000000 	.word	0x20000000
   12e4c:	42000400 	.word	0x42000400
   12e50:	0f0fffff 	.word	0x0f0fffff

00012e54 <system_apb_clock_set_mask>:
{
   12e54:	b580      	push	{r7, lr}
   12e56:	b082      	sub	sp, #8
   12e58:	af00      	add	r7, sp, #0
   12e5a:	0002      	movs	r2, r0
   12e5c:	6039      	str	r1, [r7, #0]
   12e5e:	1dfb      	adds	r3, r7, #7
   12e60:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   12e62:	1dfb      	adds	r3, r7, #7
   12e64:	781b      	ldrb	r3, [r3, #0]
   12e66:	2b01      	cmp	r3, #1
   12e68:	d00a      	beq.n	12e80 <system_apb_clock_set_mask+0x2c>
   12e6a:	2b02      	cmp	r3, #2
   12e6c:	d00f      	beq.n	12e8e <system_apb_clock_set_mask+0x3a>
   12e6e:	2b00      	cmp	r3, #0
   12e70:	d114      	bne.n	12e9c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   12e72:	4b0e      	ldr	r3, [pc, #56]	; (12eac <system_apb_clock_set_mask+0x58>)
   12e74:	4a0d      	ldr	r2, [pc, #52]	; (12eac <system_apb_clock_set_mask+0x58>)
   12e76:	6991      	ldr	r1, [r2, #24]
   12e78:	683a      	ldr	r2, [r7, #0]
   12e7a:	430a      	orrs	r2, r1
   12e7c:	619a      	str	r2, [r3, #24]
			break;
   12e7e:	e00f      	b.n	12ea0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   12e80:	4b0a      	ldr	r3, [pc, #40]	; (12eac <system_apb_clock_set_mask+0x58>)
   12e82:	4a0a      	ldr	r2, [pc, #40]	; (12eac <system_apb_clock_set_mask+0x58>)
   12e84:	69d1      	ldr	r1, [r2, #28]
   12e86:	683a      	ldr	r2, [r7, #0]
   12e88:	430a      	orrs	r2, r1
   12e8a:	61da      	str	r2, [r3, #28]
			break;
   12e8c:	e008      	b.n	12ea0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   12e8e:	4b07      	ldr	r3, [pc, #28]	; (12eac <system_apb_clock_set_mask+0x58>)
   12e90:	4a06      	ldr	r2, [pc, #24]	; (12eac <system_apb_clock_set_mask+0x58>)
   12e92:	6a11      	ldr	r1, [r2, #32]
   12e94:	683a      	ldr	r2, [r7, #0]
   12e96:	430a      	orrs	r2, r1
   12e98:	621a      	str	r2, [r3, #32]
			break;
   12e9a:	e001      	b.n	12ea0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   12e9c:	2317      	movs	r3, #23
   12e9e:	e000      	b.n	12ea2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   12ea0:	2300      	movs	r3, #0
}
   12ea2:	0018      	movs	r0, r3
   12ea4:	46bd      	mov	sp, r7
   12ea6:	b002      	add	sp, #8
   12ea8:	bd80      	pop	{r7, pc}
   12eaa:	46c0      	nop			; (mov r8, r8)
   12eac:	40000400 	.word	0x40000400

00012eb0 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   12eb0:	b580      	push	{r7, lr}
   12eb2:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   12eb4:	2102      	movs	r1, #2
   12eb6:	2002      	movs	r0, #2
   12eb8:	4b07      	ldr	r3, [pc, #28]	; (12ed8 <_system_events_init+0x28>)
   12eba:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   12ebc:	4b07      	ldr	r3, [pc, #28]	; (12edc <_system_events_init+0x2c>)
   12ebe:	2201      	movs	r2, #1
   12ec0:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   12ec2:	46c0      	nop			; (mov r8, r8)
   12ec4:	4b05      	ldr	r3, [pc, #20]	; (12edc <_system_events_init+0x2c>)
   12ec6:	781b      	ldrb	r3, [r3, #0]
   12ec8:	b2db      	uxtb	r3, r3
   12eca:	001a      	movs	r2, r3
   12ecc:	2301      	movs	r3, #1
   12ece:	4013      	ands	r3, r2
   12ed0:	d1f8      	bne.n	12ec4 <_system_events_init+0x14>
	}
}
   12ed2:	46c0      	nop			; (mov r8, r8)
   12ed4:	46bd      	mov	sp, r7
   12ed6:	bd80      	pop	{r7, pc}
   12ed8:	00012e55 	.word	0x00012e55
   12edc:	42000400 	.word	0x42000400

00012ee0 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   12ee0:	b580      	push	{r7, lr}
   12ee2:	b084      	sub	sp, #16
   12ee4:	af00      	add	r7, sp, #0
   12ee6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   12ee8:	687b      	ldr	r3, [r7, #4]
   12eea:	681b      	ldr	r3, [r3, #0]
   12eec:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   12eee:	68fb      	ldr	r3, [r7, #12]
   12ef0:	69db      	ldr	r3, [r3, #28]
   12ef2:	2207      	movs	r2, #7
   12ef4:	4013      	ands	r3, r2
   12ef6:	1e5a      	subs	r2, r3, #1
   12ef8:	4193      	sbcs	r3, r2
   12efa:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   12efc:	0018      	movs	r0, r3
   12efe:	46bd      	mov	sp, r7
   12f00:	b004      	add	sp, #16
   12f02:	bd80      	pop	{r7, pc}

00012f04 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   12f04:	b580      	push	{r7, lr}
   12f06:	b082      	sub	sp, #8
   12f08:	af00      	add	r7, sp, #0
   12f0a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   12f0c:	46c0      	nop			; (mov r8, r8)
   12f0e:	687b      	ldr	r3, [r7, #4]
   12f10:	0018      	movs	r0, r3
   12f12:	4b04      	ldr	r3, [pc, #16]	; (12f24 <_i2c_master_wait_for_sync+0x20>)
   12f14:	4798      	blx	r3
   12f16:	1e03      	subs	r3, r0, #0
   12f18:	d1f9      	bne.n	12f0e <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   12f1a:	46c0      	nop			; (mov r8, r8)
   12f1c:	46bd      	mov	sp, r7
   12f1e:	b002      	add	sp, #8
   12f20:	bd80      	pop	{r7, pc}
   12f22:	46c0      	nop			; (mov r8, r8)
   12f24:	00012ee1 	.word	0x00012ee1

00012f28 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   12f28:	b580      	push	{r7, lr}
   12f2a:	b084      	sub	sp, #16
   12f2c:	af00      	add	r7, sp, #0
   12f2e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12f30:	687b      	ldr	r3, [r7, #4]
   12f32:	681b      	ldr	r3, [r3, #0]
   12f34:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12f36:	68fb      	ldr	r3, [r7, #12]
   12f38:	681b      	ldr	r3, [r3, #0]
   12f3a:	011b      	lsls	r3, r3, #4
   12f3c:	0fdb      	lsrs	r3, r3, #31
   12f3e:	b2db      	uxtb	r3, r3
   12f40:	001a      	movs	r2, r3
   12f42:	230b      	movs	r3, #11
   12f44:	18fb      	adds	r3, r7, r3
   12f46:	1e51      	subs	r1, r2, #1
   12f48:	418a      	sbcs	r2, r1
   12f4a:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   12f4c:	2308      	movs	r3, #8
   12f4e:	18fb      	adds	r3, r7, r3
   12f50:	687a      	ldr	r2, [r7, #4]
   12f52:	8b52      	ldrh	r2, [r2, #26]
   12f54:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   12f56:	687b      	ldr	r3, [r7, #4]
   12f58:	8b9b      	ldrh	r3, [r3, #28]
   12f5a:	b29a      	uxth	r2, r3
   12f5c:	2308      	movs	r3, #8
   12f5e:	18fb      	adds	r3, r7, r3
   12f60:	2108      	movs	r1, #8
   12f62:	1879      	adds	r1, r7, r1
   12f64:	8809      	ldrh	r1, [r1, #0]
   12f66:	1a8a      	subs	r2, r1, r2
   12f68:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12f6a:	687b      	ldr	r3, [r7, #4]
   12f6c:	8b9b      	ldrh	r3, [r3, #28]
   12f6e:	b29b      	uxth	r3, r3
   12f70:	3b01      	subs	r3, #1
   12f72:	b29a      	uxth	r2, r3
   12f74:	687b      	ldr	r3, [r7, #4]
   12f76:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   12f78:	230b      	movs	r3, #11
   12f7a:	18fb      	adds	r3, r7, r3
   12f7c:	781b      	ldrb	r3, [r3, #0]
   12f7e:	2b00      	cmp	r3, #0
   12f80:	d010      	beq.n	12fa4 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   12f82:	687b      	ldr	r3, [r7, #4]
   12f84:	7adb      	ldrb	r3, [r3, #11]
   12f86:	2b00      	cmp	r3, #0
   12f88:	d01c      	beq.n	12fc4 <_i2c_master_read+0x9c>
   12f8a:	687b      	ldr	r3, [r7, #4]
   12f8c:	8b9b      	ldrh	r3, [r3, #28]
   12f8e:	b29b      	uxth	r3, r3
   12f90:	2b01      	cmp	r3, #1
   12f92:	d117      	bne.n	12fc4 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   12f94:	68fb      	ldr	r3, [r7, #12]
   12f96:	685b      	ldr	r3, [r3, #4]
   12f98:	2280      	movs	r2, #128	; 0x80
   12f9a:	02d2      	lsls	r2, r2, #11
   12f9c:	431a      	orrs	r2, r3
   12f9e:	68fb      	ldr	r3, [r7, #12]
   12fa0:	605a      	str	r2, [r3, #4]
   12fa2:	e00f      	b.n	12fc4 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   12fa4:	687b      	ldr	r3, [r7, #4]
   12fa6:	7adb      	ldrb	r3, [r3, #11]
   12fa8:	2b00      	cmp	r3, #0
   12faa:	d00b      	beq.n	12fc4 <_i2c_master_read+0x9c>
   12fac:	687b      	ldr	r3, [r7, #4]
   12fae:	8b9b      	ldrh	r3, [r3, #28]
   12fb0:	b29b      	uxth	r3, r3
   12fb2:	2b00      	cmp	r3, #0
   12fb4:	d106      	bne.n	12fc4 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   12fb6:	68fb      	ldr	r3, [r7, #12]
   12fb8:	685b      	ldr	r3, [r3, #4]
   12fba:	2280      	movs	r2, #128	; 0x80
   12fbc:	02d2      	lsls	r2, r2, #11
   12fbe:	431a      	orrs	r2, r3
   12fc0:	68fb      	ldr	r3, [r7, #12]
   12fc2:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   12fc4:	687b      	ldr	r3, [r7, #4]
   12fc6:	8b9b      	ldrh	r3, [r3, #28]
   12fc8:	b29b      	uxth	r3, r3
   12fca:	2b00      	cmp	r3, #0
   12fcc:	d10e      	bne.n	12fec <_i2c_master_read+0xc4>
		if (module->send_stop) {
   12fce:	687b      	ldr	r3, [r7, #4]
   12fd0:	7a9b      	ldrb	r3, [r3, #10]
   12fd2:	2b00      	cmp	r3, #0
   12fd4:	d00a      	beq.n	12fec <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   12fd6:	687b      	ldr	r3, [r7, #4]
   12fd8:	0018      	movs	r0, r3
   12fda:	4b0e      	ldr	r3, [pc, #56]	; (13014 <_i2c_master_read+0xec>)
   12fdc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12fde:	68fb      	ldr	r3, [r7, #12]
   12fe0:	685b      	ldr	r3, [r3, #4]
   12fe2:	22c0      	movs	r2, #192	; 0xc0
   12fe4:	0292      	lsls	r2, r2, #10
   12fe6:	431a      	orrs	r2, r3
   12fe8:	68fb      	ldr	r3, [r7, #12]
   12fea:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   12fec:	687b      	ldr	r3, [r7, #4]
   12fee:	0018      	movs	r0, r3
   12ff0:	4b08      	ldr	r3, [pc, #32]	; (13014 <_i2c_master_read+0xec>)
   12ff2:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   12ff4:	687b      	ldr	r3, [r7, #4]
   12ff6:	6a1a      	ldr	r2, [r3, #32]
   12ff8:	2308      	movs	r3, #8
   12ffa:	18fb      	adds	r3, r7, r3
   12ffc:	881b      	ldrh	r3, [r3, #0]
   12ffe:	18d3      	adds	r3, r2, r3
   13000:	68fa      	ldr	r2, [r7, #12]
   13002:	2128      	movs	r1, #40	; 0x28
   13004:	5c52      	ldrb	r2, [r2, r1]
   13006:	b2d2      	uxtb	r2, r2
   13008:	701a      	strb	r2, [r3, #0]
}
   1300a:	46c0      	nop			; (mov r8, r8)
   1300c:	46bd      	mov	sp, r7
   1300e:	b004      	add	sp, #16
   13010:	bd80      	pop	{r7, pc}
   13012:	46c0      	nop			; (mov r8, r8)
   13014:	00012f05 	.word	0x00012f05

00013018 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   13018:	b580      	push	{r7, lr}
   1301a:	b084      	sub	sp, #16
   1301c:	af00      	add	r7, sp, #0
   1301e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13020:	687b      	ldr	r3, [r7, #4]
   13022:	681b      	ldr	r3, [r3, #0]
   13024:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   13026:	68fb      	ldr	r3, [r7, #12]
   13028:	8b5b      	ldrh	r3, [r3, #26]
   1302a:	b29b      	uxth	r3, r3
   1302c:	001a      	movs	r2, r3
   1302e:	2304      	movs	r3, #4
   13030:	4013      	ands	r3, r2
   13032:	d004      	beq.n	1303e <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   13034:	687b      	ldr	r3, [r7, #4]
   13036:	2225      	movs	r2, #37	; 0x25
   13038:	211e      	movs	r1, #30
   1303a:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   1303c:	e024      	b.n	13088 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   1303e:	230a      	movs	r3, #10
   13040:	18fb      	adds	r3, r7, r3
   13042:	687a      	ldr	r2, [r7, #4]
   13044:	8b52      	ldrh	r2, [r2, #26]
   13046:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   13048:	687b      	ldr	r3, [r7, #4]
   1304a:	8b9b      	ldrh	r3, [r3, #28]
   1304c:	b29a      	uxth	r2, r3
   1304e:	230a      	movs	r3, #10
   13050:	18fb      	adds	r3, r7, r3
   13052:	210a      	movs	r1, #10
   13054:	1879      	adds	r1, r7, r1
   13056:	8809      	ldrh	r1, [r1, #0]
   13058:	1a8a      	subs	r2, r1, r2
   1305a:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   1305c:	687b      	ldr	r3, [r7, #4]
   1305e:	8b9b      	ldrh	r3, [r3, #28]
   13060:	b29b      	uxth	r3, r3
   13062:	3b01      	subs	r3, #1
   13064:	b29a      	uxth	r2, r3
   13066:	687b      	ldr	r3, [r7, #4]
   13068:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   1306a:	687b      	ldr	r3, [r7, #4]
   1306c:	0018      	movs	r0, r3
   1306e:	4b08      	ldr	r3, [pc, #32]	; (13090 <_i2c_master_write+0x78>)
   13070:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   13072:	687b      	ldr	r3, [r7, #4]
   13074:	6a1a      	ldr	r2, [r3, #32]
   13076:	230a      	movs	r3, #10
   13078:	18fb      	adds	r3, r7, r3
   1307a:	881b      	ldrh	r3, [r3, #0]
   1307c:	18d3      	adds	r3, r2, r3
   1307e:	781b      	ldrb	r3, [r3, #0]
   13080:	b2d9      	uxtb	r1, r3
   13082:	68fb      	ldr	r3, [r7, #12]
   13084:	2228      	movs	r2, #40	; 0x28
   13086:	5499      	strb	r1, [r3, r2]
}
   13088:	46bd      	mov	sp, r7
   1308a:	b004      	add	sp, #16
   1308c:	bd80      	pop	{r7, pc}
   1308e:	46c0      	nop			; (mov r8, r8)
   13090:	00012f05 	.word	0x00012f05

00013094 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   13094:	b580      	push	{r7, lr}
   13096:	b084      	sub	sp, #16
   13098:	af00      	add	r7, sp, #0
   1309a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1309c:	687b      	ldr	r3, [r7, #4]
   1309e:	681b      	ldr	r3, [r3, #0]
   130a0:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   130a2:	68fb      	ldr	r3, [r7, #12]
   130a4:	7e1b      	ldrb	r3, [r3, #24]
   130a6:	b2db      	uxtb	r3, r3
   130a8:	001a      	movs	r2, r3
   130aa:	2301      	movs	r3, #1
   130ac:	4013      	ands	r3, r2
   130ae:	d02b      	beq.n	13108 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   130b0:	68fb      	ldr	r3, [r7, #12]
   130b2:	2201      	movs	r2, #1
   130b4:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   130b6:	68fb      	ldr	r3, [r7, #12]
   130b8:	8b5b      	ldrh	r3, [r3, #26]
   130ba:	b29b      	uxth	r3, r3
   130bc:	001a      	movs	r2, r3
   130be:	2302      	movs	r3, #2
   130c0:	4013      	ands	r3, r2
   130c2:	d004      	beq.n	130ce <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   130c4:	687b      	ldr	r3, [r7, #4]
   130c6:	2225      	movs	r2, #37	; 0x25
   130c8:	2141      	movs	r1, #65	; 0x41
   130ca:	5499      	strb	r1, [r3, r2]
   130cc:	e01c      	b.n	13108 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   130ce:	68fb      	ldr	r3, [r7, #12]
   130d0:	8b5b      	ldrh	r3, [r3, #26]
   130d2:	b29b      	uxth	r3, r3
   130d4:	001a      	movs	r2, r3
   130d6:	2304      	movs	r3, #4
   130d8:	4013      	ands	r3, r2
   130da:	d015      	beq.n	13108 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   130dc:	687b      	ldr	r3, [r7, #4]
   130de:	2225      	movs	r2, #37	; 0x25
   130e0:	2118      	movs	r1, #24
   130e2:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   130e4:	687b      	ldr	r3, [r7, #4]
   130e6:	2200      	movs	r2, #0
   130e8:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   130ea:	687b      	ldr	r3, [r7, #4]
   130ec:	7a9b      	ldrb	r3, [r3, #10]
   130ee:	2b00      	cmp	r3, #0
   130f0:	d00a      	beq.n	13108 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   130f2:	687b      	ldr	r3, [r7, #4]
   130f4:	0018      	movs	r0, r3
   130f6:	4b13      	ldr	r3, [pc, #76]	; (13144 <_i2c_master_async_address_response+0xb0>)
   130f8:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   130fa:	68fb      	ldr	r3, [r7, #12]
   130fc:	685b      	ldr	r3, [r3, #4]
   130fe:	22c0      	movs	r2, #192	; 0xc0
   13100:	0292      	lsls	r2, r2, #10
   13102:	431a      	orrs	r2, r3
   13104:	68fb      	ldr	r3, [r7, #12]
   13106:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   13108:	687b      	ldr	r3, [r7, #4]
   1310a:	8b9b      	ldrh	r3, [r3, #28]
   1310c:	b29a      	uxth	r2, r3
   1310e:	687b      	ldr	r3, [r7, #4]
   13110:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   13112:	687b      	ldr	r3, [r7, #4]
   13114:	2225      	movs	r2, #37	; 0x25
   13116:	5c9b      	ldrb	r3, [r3, r2]
   13118:	b2db      	uxtb	r3, r3
   1311a:	2b05      	cmp	r3, #5
   1311c:	d10e      	bne.n	1313c <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   1311e:	687b      	ldr	r3, [r7, #4]
   13120:	2224      	movs	r2, #36	; 0x24
   13122:	5c9b      	ldrb	r3, [r3, r2]
   13124:	b2db      	uxtb	r3, r3
   13126:	2b00      	cmp	r3, #0
   13128:	d104      	bne.n	13134 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   1312a:	687b      	ldr	r3, [r7, #4]
   1312c:	0018      	movs	r0, r3
   1312e:	4b06      	ldr	r3, [pc, #24]	; (13148 <_i2c_master_async_address_response+0xb4>)
   13130:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   13132:	e003      	b.n	1313c <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   13134:	687b      	ldr	r3, [r7, #4]
   13136:	0018      	movs	r0, r3
   13138:	4b04      	ldr	r3, [pc, #16]	; (1314c <_i2c_master_async_address_response+0xb8>)
   1313a:	4798      	blx	r3
}
   1313c:	46c0      	nop			; (mov r8, r8)
   1313e:	46bd      	mov	sp, r7
   13140:	b004      	add	sp, #16
   13142:	bd80      	pop	{r7, pc}
   13144:	00012f05 	.word	0x00012f05
   13148:	00013019 	.word	0x00013019
   1314c:	00012f29 	.word	0x00012f29

00013150 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   13150:	b580      	push	{r7, lr}
   13152:	b084      	sub	sp, #16
   13154:	af00      	add	r7, sp, #0
   13156:	60f8      	str	r0, [r7, #12]
   13158:	60b9      	str	r1, [r7, #8]
   1315a:	1dfb      	adds	r3, r7, #7
   1315c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   1315e:	1dfb      	adds	r3, r7, #7
   13160:	781b      	ldrb	r3, [r3, #0]
   13162:	68fa      	ldr	r2, [r7, #12]
   13164:	3302      	adds	r3, #2
   13166:	009b      	lsls	r3, r3, #2
   13168:	18d3      	adds	r3, r2, r3
   1316a:	3304      	adds	r3, #4
   1316c:	68ba      	ldr	r2, [r7, #8]
   1316e:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   13170:	68fb      	ldr	r3, [r7, #12]
   13172:	7e1b      	ldrb	r3, [r3, #24]
   13174:	b2db      	uxtb	r3, r3
   13176:	b25a      	sxtb	r2, r3
   13178:	1dfb      	adds	r3, r7, #7
   1317a:	781b      	ldrb	r3, [r3, #0]
   1317c:	2101      	movs	r1, #1
   1317e:	4099      	lsls	r1, r3
   13180:	000b      	movs	r3, r1
   13182:	b25b      	sxtb	r3, r3
   13184:	4313      	orrs	r3, r2
   13186:	b25b      	sxtb	r3, r3
   13188:	b2da      	uxtb	r2, r3
   1318a:	68fb      	ldr	r3, [r7, #12]
   1318c:	761a      	strb	r2, [r3, #24]
}
   1318e:	46c0      	nop			; (mov r8, r8)
   13190:	46bd      	mov	sp, r7
   13192:	b004      	add	sp, #16
   13194:	bd80      	pop	{r7, pc}
	...

00013198 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13198:	b590      	push	{r4, r7, lr}
   1319a:	b087      	sub	sp, #28
   1319c:	af00      	add	r7, sp, #0
   1319e:	6078      	str	r0, [r7, #4]
   131a0:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   131a2:	687b      	ldr	r3, [r7, #4]
   131a4:	681b      	ldr	r3, [r3, #0]
   131a6:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   131a8:	683b      	ldr	r3, [r7, #0]
   131aa:	685a      	ldr	r2, [r3, #4]
   131ac:	687b      	ldr	r3, [r7, #4]
   131ae:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   131b0:	683b      	ldr	r3, [r7, #0]
   131b2:	885a      	ldrh	r2, [r3, #2]
   131b4:	687b      	ldr	r3, [r7, #4]
   131b6:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   131b8:	687b      	ldr	r3, [r7, #4]
   131ba:	2224      	movs	r2, #36	; 0x24
   131bc:	2101      	movs	r1, #1
   131be:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   131c0:	687b      	ldr	r3, [r7, #4]
   131c2:	2225      	movs	r2, #37	; 0x25
   131c4:	2105      	movs	r1, #5
   131c6:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   131c8:	693b      	ldr	r3, [r7, #16]
   131ca:	681b      	ldr	r3, [r3, #0]
   131cc:	011b      	lsls	r3, r3, #4
   131ce:	0fdb      	lsrs	r3, r3, #31
   131d0:	b2db      	uxtb	r3, r3
   131d2:	001a      	movs	r2, r3
   131d4:	230f      	movs	r3, #15
   131d6:	18fb      	adds	r3, r7, r3
   131d8:	1e51      	subs	r1, r2, #1
   131da:	418a      	sbcs	r2, r1
   131dc:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   131de:	683b      	ldr	r3, [r7, #0]
   131e0:	7a5b      	ldrb	r3, [r3, #9]
   131e2:	2b00      	cmp	r3, #0
   131e4:	d006      	beq.n	131f4 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   131e6:	683b      	ldr	r3, [r7, #0]
   131e8:	7a9a      	ldrb	r2, [r3, #10]
   131ea:	687b      	ldr	r3, [r7, #4]
   131ec:	0011      	movs	r1, r2
   131ee:	0018      	movs	r0, r3
   131f0:	4b3b      	ldr	r3, [pc, #236]	; (132e0 <_i2c_master_read_packet+0x148>)
   131f2:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   131f4:	230f      	movs	r3, #15
   131f6:	18fb      	adds	r3, r7, r3
   131f8:	781b      	ldrb	r3, [r3, #0]
   131fa:	2b00      	cmp	r3, #0
   131fc:	d00b      	beq.n	13216 <_i2c_master_read_packet+0x7e>
   131fe:	683b      	ldr	r3, [r7, #0]
   13200:	885b      	ldrh	r3, [r3, #2]
   13202:	2b01      	cmp	r3, #1
   13204:	d107      	bne.n	13216 <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13206:	693b      	ldr	r3, [r7, #16]
   13208:	685b      	ldr	r3, [r3, #4]
   1320a:	2280      	movs	r2, #128	; 0x80
   1320c:	02d2      	lsls	r2, r2, #11
   1320e:	431a      	orrs	r2, r3
   13210:	693b      	ldr	r3, [r7, #16]
   13212:	605a      	str	r2, [r3, #4]
   13214:	e005      	b.n	13222 <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13216:	693b      	ldr	r3, [r7, #16]
   13218:	685b      	ldr	r3, [r3, #4]
   1321a:	4a32      	ldr	r2, [pc, #200]	; (132e4 <_i2c_master_read_packet+0x14c>)
   1321c:	401a      	ands	r2, r3
   1321e:	693b      	ldr	r3, [r7, #16]
   13220:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   13222:	683b      	ldr	r3, [r7, #0]
   13224:	7a1b      	ldrb	r3, [r3, #8]
   13226:	2b00      	cmp	r3, #0
   13228:	d045      	beq.n	132b6 <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   1322a:	683b      	ldr	r3, [r7, #0]
   1322c:	881b      	ldrh	r3, [r3, #0]
   1322e:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13230:	683b      	ldr	r3, [r7, #0]
   13232:	7a5b      	ldrb	r3, [r3, #9]
   13234:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   13236:	4313      	orrs	r3, r2
   13238:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1323a:	2380      	movs	r3, #128	; 0x80
   1323c:	021b      	lsls	r3, r3, #8
   1323e:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   13240:	693b      	ldr	r3, [r7, #16]
   13242:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   13244:	2317      	movs	r3, #23
   13246:	18fc      	adds	r4, r7, r3
   13248:	687b      	ldr	r3, [r7, #4]
   1324a:	0018      	movs	r0, r3
   1324c:	4b26      	ldr	r3, [pc, #152]	; (132e8 <_i2c_master_read_packet+0x150>)
   1324e:	4798      	blx	r3
   13250:	0003      	movs	r3, r0
   13252:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13254:	693b      	ldr	r3, [r7, #16]
   13256:	685b      	ldr	r3, [r3, #4]
   13258:	4a22      	ldr	r2, [pc, #136]	; (132e4 <_i2c_master_read_packet+0x14c>)
   1325a:	401a      	ands	r2, r3
   1325c:	693b      	ldr	r3, [r7, #16]
   1325e:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   13260:	2317      	movs	r3, #23
   13262:	18fb      	adds	r3, r7, r3
   13264:	781b      	ldrb	r3, [r3, #0]
   13266:	2b00      	cmp	r3, #0
   13268:	d107      	bne.n	1327a <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   1326a:	2317      	movs	r3, #23
   1326c:	18fc      	adds	r4, r7, r3
   1326e:	687b      	ldr	r3, [r7, #4]
   13270:	0018      	movs	r0, r3
   13272:	4b1e      	ldr	r3, [pc, #120]	; (132ec <_i2c_master_read_packet+0x154>)
   13274:	4798      	blx	r3
   13276:	0003      	movs	r3, r0
   13278:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   1327a:	2317      	movs	r3, #23
   1327c:	18fb      	adds	r3, r7, r3
   1327e:	781b      	ldrb	r3, [r3, #0]
   13280:	2b00      	cmp	r3, #0
   13282:	d114      	bne.n	132ae <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   13284:	693b      	ldr	r3, [r7, #16]
   13286:	2203      	movs	r2, #3
   13288:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   1328a:	683b      	ldr	r3, [r7, #0]
   1328c:	881b      	ldrh	r3, [r3, #0]
   1328e:	0a1b      	lsrs	r3, r3, #8
   13290:	b29b      	uxth	r3, r3
   13292:	2278      	movs	r2, #120	; 0x78
   13294:	4313      	orrs	r3, r2
   13296:	b29b      	uxth	r3, r3
   13298:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1329a:	683b      	ldr	r3, [r7, #0]
   1329c:	7a5b      	ldrb	r3, [r3, #9]
   1329e:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   132a0:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   132a2:	2201      	movs	r2, #1
   132a4:	4313      	orrs	r3, r2
   132a6:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   132a8:	693b      	ldr	r3, [r7, #16]
   132aa:	625a      	str	r2, [r3, #36]	; 0x24
   132ac:	e012      	b.n	132d4 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   132ae:	2317      	movs	r3, #23
   132b0:	18fb      	adds	r3, r7, r3
   132b2:	781b      	ldrb	r3, [r3, #0]
   132b4:	e00f      	b.n	132d6 <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   132b6:	693b      	ldr	r3, [r7, #16]
   132b8:	2203      	movs	r2, #3
   132ba:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   132bc:	683b      	ldr	r3, [r7, #0]
   132be:	881b      	ldrh	r3, [r3, #0]
   132c0:	005b      	lsls	r3, r3, #1
   132c2:	2201      	movs	r2, #1
   132c4:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   132c6:	683b      	ldr	r3, [r7, #0]
   132c8:	7a5b      	ldrb	r3, [r3, #9]
   132ca:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   132cc:	4313      	orrs	r3, r2
   132ce:	001a      	movs	r2, r3
   132d0:	693b      	ldr	r3, [r7, #16]
   132d2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   132d4:	2300      	movs	r3, #0
}
   132d6:	0018      	movs	r0, r3
   132d8:	46bd      	mov	sp, r7
   132da:	b007      	add	sp, #28
   132dc:	bd90      	pop	{r4, r7, pc}
   132de:	46c0      	nop			; (mov r8, r8)
   132e0:	00017131 	.word	0x00017131
   132e4:	fffbffff 	.word	0xfffbffff
   132e8:	000170d3 	.word	0x000170d3
   132ec:	00017075 	.word	0x00017075

000132f0 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   132f0:	b580      	push	{r7, lr}
   132f2:	b082      	sub	sp, #8
   132f4:	af00      	add	r7, sp, #0
   132f6:	6078      	str	r0, [r7, #4]
   132f8:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   132fa:	687b      	ldr	r3, [r7, #4]
   132fc:	8b9b      	ldrh	r3, [r3, #28]
   132fe:	b29b      	uxth	r3, r3
   13300:	2b00      	cmp	r3, #0
   13302:	d001      	beq.n	13308 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   13304:	2305      	movs	r3, #5
   13306:	e00c      	b.n	13322 <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   13308:	687b      	ldr	r3, [r7, #4]
   1330a:	2201      	movs	r2, #1
   1330c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   1330e:	687b      	ldr	r3, [r7, #4]
   13310:	2201      	movs	r2, #1
   13312:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   13314:	683a      	ldr	r2, [r7, #0]
   13316:	687b      	ldr	r3, [r7, #4]
   13318:	0011      	movs	r1, r2
   1331a:	0018      	movs	r0, r3
   1331c:	4b03      	ldr	r3, [pc, #12]	; (1332c <i2c_master_read_packet_job+0x3c>)
   1331e:	4798      	blx	r3
   13320:	0003      	movs	r3, r0
}
   13322:	0018      	movs	r0, r3
   13324:	46bd      	mov	sp, r7
   13326:	b002      	add	sp, #8
   13328:	bd80      	pop	{r7, pc}
   1332a:	46c0      	nop			; (mov r8, r8)
   1332c:	00013199 	.word	0x00013199

00013330 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13330:	b580      	push	{r7, lr}
   13332:	b084      	sub	sp, #16
   13334:	af00      	add	r7, sp, #0
   13336:	6078      	str	r0, [r7, #4]
   13338:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1333a:	687b      	ldr	r3, [r7, #4]
   1333c:	681b      	ldr	r3, [r3, #0]
   1333e:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   13340:	683b      	ldr	r3, [r7, #0]
   13342:	7a5b      	ldrb	r3, [r3, #9]
   13344:	2b00      	cmp	r3, #0
   13346:	d006      	beq.n	13356 <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13348:	683b      	ldr	r3, [r7, #0]
   1334a:	7a9a      	ldrb	r2, [r3, #10]
   1334c:	687b      	ldr	r3, [r7, #4]
   1334e:	0011      	movs	r1, r2
   13350:	0018      	movs	r0, r3
   13352:	4b1e      	ldr	r3, [pc, #120]	; (133cc <_i2c_master_write_packet+0x9c>)
   13354:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13356:	68fb      	ldr	r3, [r7, #12]
   13358:	685b      	ldr	r3, [r3, #4]
   1335a:	4a1d      	ldr	r2, [pc, #116]	; (133d0 <_i2c_master_write_packet+0xa0>)
   1335c:	401a      	ands	r2, r3
   1335e:	68fb      	ldr	r3, [r7, #12]
   13360:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   13362:	683b      	ldr	r3, [r7, #0]
   13364:	685a      	ldr	r2, [r3, #4]
   13366:	687b      	ldr	r3, [r7, #4]
   13368:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   1336a:	683b      	ldr	r3, [r7, #0]
   1336c:	885a      	ldrh	r2, [r3, #2]
   1336e:	687b      	ldr	r3, [r7, #4]
   13370:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   13372:	687b      	ldr	r3, [r7, #4]
   13374:	2224      	movs	r2, #36	; 0x24
   13376:	2100      	movs	r1, #0
   13378:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   1337a:	687b      	ldr	r3, [r7, #4]
   1337c:	2225      	movs	r2, #37	; 0x25
   1337e:	2105      	movs	r1, #5
   13380:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   13382:	68fb      	ldr	r3, [r7, #12]
   13384:	2203      	movs	r2, #3
   13386:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   13388:	683b      	ldr	r3, [r7, #0]
   1338a:	7a1b      	ldrb	r3, [r3, #8]
   1338c:	2b00      	cmp	r3, #0
   1338e:	d00d      	beq.n	133ac <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13390:	683b      	ldr	r3, [r7, #0]
   13392:	881b      	ldrh	r3, [r3, #0]
   13394:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13396:	683b      	ldr	r3, [r7, #0]
   13398:	7a5b      	ldrb	r3, [r3, #9]
   1339a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   1339c:	4313      	orrs	r3, r2
   1339e:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   133a0:	2380      	movs	r3, #128	; 0x80
   133a2:	021b      	lsls	r3, r3, #8
   133a4:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   133a6:	68fb      	ldr	r3, [r7, #12]
   133a8:	625a      	str	r2, [r3, #36]	; 0x24
   133aa:	e009      	b.n	133c0 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   133ac:	683b      	ldr	r3, [r7, #0]
   133ae:	881b      	ldrh	r3, [r3, #0]
   133b0:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   133b2:	683b      	ldr	r3, [r7, #0]
   133b4:	7a5b      	ldrb	r3, [r3, #9]
   133b6:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   133b8:	4313      	orrs	r3, r2
   133ba:	001a      	movs	r2, r3
   133bc:	68fb      	ldr	r3, [r7, #12]
   133be:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   133c0:	2300      	movs	r3, #0
}
   133c2:	0018      	movs	r0, r3
   133c4:	46bd      	mov	sp, r7
   133c6:	b004      	add	sp, #16
   133c8:	bd80      	pop	{r7, pc}
   133ca:	46c0      	nop			; (mov r8, r8)
   133cc:	00017131 	.word	0x00017131
   133d0:	fffbffff 	.word	0xfffbffff

000133d4 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   133d4:	b580      	push	{r7, lr}
   133d6:	b082      	sub	sp, #8
   133d8:	af00      	add	r7, sp, #0
   133da:	6078      	str	r0, [r7, #4]
   133dc:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   133de:	687b      	ldr	r3, [r7, #4]
   133e0:	8b9b      	ldrh	r3, [r3, #28]
   133e2:	b29b      	uxth	r3, r3
   133e4:	2b00      	cmp	r3, #0
   133e6:	d001      	beq.n	133ec <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   133e8:	2305      	movs	r3, #5
   133ea:	e00c      	b.n	13406 <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   133ec:	687b      	ldr	r3, [r7, #4]
   133ee:	2201      	movs	r2, #1
   133f0:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   133f2:	687b      	ldr	r3, [r7, #4]
   133f4:	2201      	movs	r2, #1
   133f6:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   133f8:	683a      	ldr	r2, [r7, #0]
   133fa:	687b      	ldr	r3, [r7, #4]
   133fc:	0011      	movs	r1, r2
   133fe:	0018      	movs	r0, r3
   13400:	4b03      	ldr	r3, [pc, #12]	; (13410 <i2c_master_write_packet_job+0x3c>)
   13402:	4798      	blx	r3
   13404:	0003      	movs	r3, r0
}
   13406:	0018      	movs	r0, r3
   13408:	46bd      	mov	sp, r7
   1340a:	b002      	add	sp, #8
   1340c:	bd80      	pop	{r7, pc}
   1340e:	46c0      	nop			; (mov r8, r8)
   13410:	00013331 	.word	0x00013331

00013414 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   13414:	b580      	push	{r7, lr}
   13416:	b086      	sub	sp, #24
   13418:	af00      	add	r7, sp, #0
   1341a:	0002      	movs	r2, r0
   1341c:	1dfb      	adds	r3, r7, #7
   1341e:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   13420:	1dfb      	adds	r3, r7, #7
   13422:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   13424:	4b93      	ldr	r3, [pc, #588]	; (13674 <_i2c_master_interrupt_handler+0x260>)
   13426:	0092      	lsls	r2, r2, #2
   13428:	58d3      	ldr	r3, [r2, r3]
   1342a:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1342c:	697b      	ldr	r3, [r7, #20]
   1342e:	681b      	ldr	r3, [r3, #0]
   13430:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13432:	693b      	ldr	r3, [r7, #16]
   13434:	681b      	ldr	r3, [r3, #0]
   13436:	011b      	lsls	r3, r3, #4
   13438:	0fdb      	lsrs	r3, r3, #31
   1343a:	b2db      	uxtb	r3, r3
   1343c:	001a      	movs	r2, r3
   1343e:	230f      	movs	r3, #15
   13440:	18fb      	adds	r3, r7, r3
   13442:	1e51      	subs	r1, r2, #1
   13444:	418a      	sbcs	r2, r1
   13446:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   13448:	230e      	movs	r3, #14
   1344a:	18fb      	adds	r3, r7, r3
   1344c:	697a      	ldr	r2, [r7, #20]
   1344e:	7e52      	ldrb	r2, [r2, #25]
   13450:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   13452:	697b      	ldr	r3, [r7, #20]
   13454:	7e1b      	ldrb	r3, [r3, #24]
   13456:	b2da      	uxtb	r2, r3
   13458:	230e      	movs	r3, #14
   1345a:	18fb      	adds	r3, r7, r3
   1345c:	210e      	movs	r1, #14
   1345e:	1879      	adds	r1, r7, r1
   13460:	7809      	ldrb	r1, [r1, #0]
   13462:	400a      	ands	r2, r1
   13464:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   13466:	697b      	ldr	r3, [r7, #20]
   13468:	8b5b      	ldrh	r3, [r3, #26]
   1346a:	b29b      	uxth	r3, r3
   1346c:	2b00      	cmp	r3, #0
   1346e:	d109      	bne.n	13484 <_i2c_master_interrupt_handler+0x70>
   13470:	697b      	ldr	r3, [r7, #20]
   13472:	8b9b      	ldrh	r3, [r3, #28]
   13474:	b29b      	uxth	r3, r3
   13476:	2b00      	cmp	r3, #0
   13478:	d004      	beq.n	13484 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   1347a:	697b      	ldr	r3, [r7, #20]
   1347c:	0018      	movs	r0, r3
   1347e:	4b7e      	ldr	r3, [pc, #504]	; (13678 <_i2c_master_interrupt_handler+0x264>)
   13480:	4798      	blx	r3
   13482:	e070      	b.n	13566 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13484:	697b      	ldr	r3, [r7, #20]
   13486:	8b5b      	ldrh	r3, [r3, #26]
   13488:	b29b      	uxth	r3, r3
   1348a:	2b00      	cmp	r3, #0
   1348c:	d039      	beq.n	13502 <_i2c_master_interrupt_handler+0xee>
   1348e:	697b      	ldr	r3, [r7, #20]
   13490:	8b9b      	ldrh	r3, [r3, #28]
   13492:	b29b      	uxth	r3, r3
   13494:	2b00      	cmp	r3, #0
   13496:	d134      	bne.n	13502 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   13498:	697b      	ldr	r3, [r7, #20]
   1349a:	2225      	movs	r2, #37	; 0x25
   1349c:	5c9b      	ldrb	r3, [r3, r2]
   1349e:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   134a0:	2b05      	cmp	r3, #5
   134a2:	d12e      	bne.n	13502 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   134a4:	697b      	ldr	r3, [r7, #20]
   134a6:	2224      	movs	r2, #36	; 0x24
   134a8:	5c9b      	ldrb	r3, [r3, r2]
   134aa:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   134ac:	2b00      	cmp	r3, #0
   134ae:	d128      	bne.n	13502 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   134b0:	693b      	ldr	r3, [r7, #16]
   134b2:	2203      	movs	r2, #3
   134b4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   134b6:	697b      	ldr	r3, [r7, #20]
   134b8:	2200      	movs	r2, #0
   134ba:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   134bc:	697b      	ldr	r3, [r7, #20]
   134be:	2225      	movs	r2, #37	; 0x25
   134c0:	2100      	movs	r1, #0
   134c2:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   134c4:	697b      	ldr	r3, [r7, #20]
   134c6:	7a9b      	ldrb	r3, [r3, #10]
   134c8:	2b00      	cmp	r3, #0
   134ca:	d00b      	beq.n	134e4 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   134cc:	697b      	ldr	r3, [r7, #20]
   134ce:	0018      	movs	r0, r3
   134d0:	4b6a      	ldr	r3, [pc, #424]	; (1367c <_i2c_master_interrupt_handler+0x268>)
   134d2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   134d4:	693b      	ldr	r3, [r7, #16]
   134d6:	685b      	ldr	r3, [r3, #4]
   134d8:	22c0      	movs	r2, #192	; 0xc0
   134da:	0292      	lsls	r2, r2, #10
   134dc:	431a      	orrs	r2, r3
   134de:	693b      	ldr	r3, [r7, #16]
   134e0:	605a      	str	r2, [r3, #4]
   134e2:	e002      	b.n	134ea <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   134e4:	693b      	ldr	r3, [r7, #16]
   134e6:	2201      	movs	r2, #1
   134e8:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   134ea:	230e      	movs	r3, #14
   134ec:	18fb      	adds	r3, r7, r3
   134ee:	781b      	ldrb	r3, [r3, #0]
   134f0:	2201      	movs	r2, #1
   134f2:	4013      	ands	r3, r2
   134f4:	d037      	beq.n	13566 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   134f6:	697b      	ldr	r3, [r7, #20]
   134f8:	68db      	ldr	r3, [r3, #12]
   134fa:	697a      	ldr	r2, [r7, #20]
   134fc:	0010      	movs	r0, r2
   134fe:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   13500:	e031      	b.n	13566 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   13502:	697b      	ldr	r3, [r7, #20]
   13504:	8b5b      	ldrh	r3, [r3, #26]
   13506:	b29b      	uxth	r3, r3
   13508:	2b00      	cmp	r3, #0
   1350a:	d02c      	beq.n	13566 <_i2c_master_interrupt_handler+0x152>
   1350c:	697b      	ldr	r3, [r7, #20]
   1350e:	8b9b      	ldrh	r3, [r3, #28]
   13510:	b29b      	uxth	r3, r3
   13512:	2b00      	cmp	r3, #0
   13514:	d027      	beq.n	13566 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13516:	693b      	ldr	r3, [r7, #16]
   13518:	8b5b      	ldrh	r3, [r3, #26]
   1351a:	b29b      	uxth	r3, r3
   1351c:	001a      	movs	r2, r3
   1351e:	2320      	movs	r3, #32
   13520:	4013      	ands	r3, r2
   13522:	d111      	bne.n	13548 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13524:	230f      	movs	r3, #15
   13526:	18fb      	adds	r3, r7, r3
   13528:	781b      	ldrb	r3, [r3, #0]
   1352a:	2201      	movs	r2, #1
   1352c:	4053      	eors	r3, r2
   1352e:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13530:	2b00      	cmp	r3, #0
   13532:	d104      	bne.n	1353e <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13534:	697b      	ldr	r3, [r7, #20]
   13536:	8b9b      	ldrh	r3, [r3, #28]
   13538:	b29b      	uxth	r3, r3
   1353a:	2b01      	cmp	r3, #1
   1353c:	d004      	beq.n	13548 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   1353e:	697b      	ldr	r3, [r7, #20]
   13540:	2225      	movs	r2, #37	; 0x25
   13542:	2141      	movs	r1, #65	; 0x41
   13544:	5499      	strb	r1, [r3, r2]
   13546:	e00e      	b.n	13566 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   13548:	697b      	ldr	r3, [r7, #20]
   1354a:	2224      	movs	r2, #36	; 0x24
   1354c:	5c9b      	ldrb	r3, [r3, r2]
   1354e:	b2db      	uxtb	r3, r3
   13550:	2b00      	cmp	r3, #0
   13552:	d104      	bne.n	1355e <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   13554:	697b      	ldr	r3, [r7, #20]
   13556:	0018      	movs	r0, r3
   13558:	4b49      	ldr	r3, [pc, #292]	; (13680 <_i2c_master_interrupt_handler+0x26c>)
   1355a:	4798      	blx	r3
   1355c:	e003      	b.n	13566 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   1355e:	697b      	ldr	r3, [r7, #20]
   13560:	0018      	movs	r0, r3
   13562:	4b48      	ldr	r3, [pc, #288]	; (13684 <_i2c_master_interrupt_handler+0x270>)
   13564:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13566:	697b      	ldr	r3, [r7, #20]
   13568:	8b5b      	ldrh	r3, [r3, #26]
   1356a:	b29b      	uxth	r3, r3
   1356c:	2b00      	cmp	r3, #0
   1356e:	d047      	beq.n	13600 <_i2c_master_interrupt_handler+0x1ec>
   13570:	697b      	ldr	r3, [r7, #20]
   13572:	8b9b      	ldrh	r3, [r3, #28]
   13574:	b29b      	uxth	r3, r3
   13576:	2b00      	cmp	r3, #0
   13578:	d142      	bne.n	13600 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   1357a:	697b      	ldr	r3, [r7, #20]
   1357c:	2225      	movs	r2, #37	; 0x25
   1357e:	5c9b      	ldrb	r3, [r3, r2]
   13580:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13582:	2b05      	cmp	r3, #5
   13584:	d13c      	bne.n	13600 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   13586:	697b      	ldr	r3, [r7, #20]
   13588:	2224      	movs	r2, #36	; 0x24
   1358a:	5c9b      	ldrb	r3, [r3, r2]
   1358c:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   1358e:	2b01      	cmp	r3, #1
   13590:	d136      	bne.n	13600 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   13592:	693b      	ldr	r3, [r7, #16]
   13594:	7e1b      	ldrb	r3, [r3, #24]
   13596:	b2db      	uxtb	r3, r3
   13598:	001a      	movs	r2, r3
   1359a:	2302      	movs	r3, #2
   1359c:	4013      	ands	r3, r2
   1359e:	d002      	beq.n	135a6 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   135a0:	693b      	ldr	r3, [r7, #16]
   135a2:	2202      	movs	r2, #2
   135a4:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   135a6:	693b      	ldr	r3, [r7, #16]
   135a8:	2203      	movs	r2, #3
   135aa:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   135ac:	697b      	ldr	r3, [r7, #20]
   135ae:	2200      	movs	r2, #0
   135b0:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   135b2:	697b      	ldr	r3, [r7, #20]
   135b4:	2225      	movs	r2, #37	; 0x25
   135b6:	2100      	movs	r1, #0
   135b8:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   135ba:	230e      	movs	r3, #14
   135bc:	18fb      	adds	r3, r7, r3
   135be:	781b      	ldrb	r3, [r3, #0]
   135c0:	2202      	movs	r2, #2
   135c2:	4013      	ands	r3, r2
   135c4:	d00b      	beq.n	135de <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   135c6:	697b      	ldr	r3, [r7, #20]
   135c8:	2224      	movs	r2, #36	; 0x24
   135ca:	5c9b      	ldrb	r3, [r3, r2]
   135cc:	b2db      	uxtb	r3, r3
   135ce:	2b01      	cmp	r3, #1
   135d0:	d105      	bne.n	135de <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   135d2:	697b      	ldr	r3, [r7, #20]
   135d4:	691b      	ldr	r3, [r3, #16]
   135d6:	697a      	ldr	r2, [r7, #20]
   135d8:	0010      	movs	r0, r2
   135da:	4798      	blx	r3
   135dc:	e010      	b.n	13600 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   135de:	230e      	movs	r3, #14
   135e0:	18fb      	adds	r3, r7, r3
   135e2:	781b      	ldrb	r3, [r3, #0]
   135e4:	2201      	movs	r2, #1
   135e6:	4013      	ands	r3, r2
   135e8:	d00a      	beq.n	13600 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   135ea:	697b      	ldr	r3, [r7, #20]
   135ec:	2224      	movs	r2, #36	; 0x24
   135ee:	5c9b      	ldrb	r3, [r3, r2]
   135f0:	b2db      	uxtb	r3, r3
   135f2:	2b00      	cmp	r3, #0
   135f4:	d104      	bne.n	13600 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   135f6:	697b      	ldr	r3, [r7, #20]
   135f8:	68db      	ldr	r3, [r3, #12]
   135fa:	697a      	ldr	r2, [r7, #20]
   135fc:	0010      	movs	r0, r2
   135fe:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   13600:	697b      	ldr	r3, [r7, #20]
   13602:	2225      	movs	r2, #37	; 0x25
   13604:	5c9b      	ldrb	r3, [r3, r2]
   13606:	b2db      	uxtb	r3, r3
   13608:	2b05      	cmp	r3, #5
   1360a:	d02e      	beq.n	1366a <_i2c_master_interrupt_handler+0x256>
   1360c:	697b      	ldr	r3, [r7, #20]
   1360e:	2225      	movs	r2, #37	; 0x25
   13610:	5c9b      	ldrb	r3, [r3, r2]
   13612:	b2db      	uxtb	r3, r3
   13614:	2b00      	cmp	r3, #0
   13616:	d028      	beq.n	1366a <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   13618:	693b      	ldr	r3, [r7, #16]
   1361a:	2203      	movs	r2, #3
   1361c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   1361e:	697b      	ldr	r3, [r7, #20]
   13620:	2200      	movs	r2, #0
   13622:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   13624:	697b      	ldr	r3, [r7, #20]
   13626:	2200      	movs	r2, #0
   13628:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1362a:	697b      	ldr	r3, [r7, #20]
   1362c:	2225      	movs	r2, #37	; 0x25
   1362e:	5c9b      	ldrb	r3, [r3, r2]
   13630:	b2db      	uxtb	r3, r3
   13632:	2b41      	cmp	r3, #65	; 0x41
   13634:	d00e      	beq.n	13654 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   13636:	697b      	ldr	r3, [r7, #20]
   13638:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1363a:	2b00      	cmp	r3, #0
   1363c:	d00a      	beq.n	13654 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   1363e:	697b      	ldr	r3, [r7, #20]
   13640:	0018      	movs	r0, r3
   13642:	4b0e      	ldr	r3, [pc, #56]	; (1367c <_i2c_master_interrupt_handler+0x268>)
   13644:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   13646:	693b      	ldr	r3, [r7, #16]
   13648:	685b      	ldr	r3, [r3, #4]
   1364a:	22e0      	movs	r2, #224	; 0xe0
   1364c:	02d2      	lsls	r2, r2, #11
   1364e:	431a      	orrs	r2, r3
   13650:	693b      	ldr	r3, [r7, #16]
   13652:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   13654:	230e      	movs	r3, #14
   13656:	18fb      	adds	r3, r7, r3
   13658:	781b      	ldrb	r3, [r3, #0]
   1365a:	2204      	movs	r2, #4
   1365c:	4013      	ands	r3, r2
   1365e:	d004      	beq.n	1366a <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   13660:	697b      	ldr	r3, [r7, #20]
   13662:	695b      	ldr	r3, [r3, #20]
   13664:	697a      	ldr	r2, [r7, #20]
   13666:	0010      	movs	r0, r2
   13668:	4798      	blx	r3
		}
	}
}
   1366a:	46c0      	nop			; (mov r8, r8)
   1366c:	46bd      	mov	sp, r7
   1366e:	b006      	add	sp, #24
   13670:	bd80      	pop	{r7, pc}
   13672:	46c0      	nop			; (mov r8, r8)
   13674:	200059b8 	.word	0x200059b8
   13678:	00013095 	.word	0x00013095
   1367c:	00012f05 	.word	0x00012f05
   13680:	00013019 	.word	0x00013019
   13684:	00012f29 	.word	0x00012f29

00013688 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   13688:	b580      	push	{r7, lr}
   1368a:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   1368c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   13690:	4b02      	ldr	r3, [pc, #8]	; (1369c <NVIC_SystemReset+0x14>)
   13692:	4a03      	ldr	r2, [pc, #12]	; (136a0 <NVIC_SystemReset+0x18>)
   13694:	60da      	str	r2, [r3, #12]
   13696:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   1369a:	e7fe      	b.n	1369a <NVIC_SystemReset+0x12>
   1369c:	e000ed00 	.word	0xe000ed00
   136a0:	05fa0004 	.word	0x05fa0004

000136a4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   136a4:	b580      	push	{r7, lr}
   136a6:	b084      	sub	sp, #16
   136a8:	af00      	add	r7, sp, #0
   136aa:	0002      	movs	r2, r0
   136ac:	1dfb      	adds	r3, r7, #7
   136ae:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   136b0:	230f      	movs	r3, #15
   136b2:	18fb      	adds	r3, r7, r3
   136b4:	1dfa      	adds	r2, r7, #7
   136b6:	7812      	ldrb	r2, [r2, #0]
   136b8:	09d2      	lsrs	r2, r2, #7
   136ba:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   136bc:	230e      	movs	r3, #14
   136be:	18fb      	adds	r3, r7, r3
   136c0:	1dfa      	adds	r2, r7, #7
   136c2:	7812      	ldrb	r2, [r2, #0]
   136c4:	0952      	lsrs	r2, r2, #5
   136c6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   136c8:	4b0d      	ldr	r3, [pc, #52]	; (13700 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   136ca:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   136cc:	230f      	movs	r3, #15
   136ce:	18fb      	adds	r3, r7, r3
   136d0:	781b      	ldrb	r3, [r3, #0]
   136d2:	2b00      	cmp	r3, #0
   136d4:	d10f      	bne.n	136f6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   136d6:	230f      	movs	r3, #15
   136d8:	18fb      	adds	r3, r7, r3
   136da:	781b      	ldrb	r3, [r3, #0]
   136dc:	009b      	lsls	r3, r3, #2
   136de:	2210      	movs	r2, #16
   136e0:	4694      	mov	ip, r2
   136e2:	44bc      	add	ip, r7
   136e4:	4463      	add	r3, ip
   136e6:	3b08      	subs	r3, #8
   136e8:	681a      	ldr	r2, [r3, #0]
   136ea:	230e      	movs	r3, #14
   136ec:	18fb      	adds	r3, r7, r3
   136ee:	781b      	ldrb	r3, [r3, #0]
   136f0:	01db      	lsls	r3, r3, #7
   136f2:	18d3      	adds	r3, r2, r3
   136f4:	e000      	b.n	136f8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   136f6:	2300      	movs	r3, #0
	}
}
   136f8:	0018      	movs	r0, r3
   136fa:	46bd      	mov	sp, r7
   136fc:	b004      	add	sp, #16
   136fe:	bd80      	pop	{r7, pc}
   13700:	41004400 	.word	0x41004400

00013704 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   13704:	b580      	push	{r7, lr}
   13706:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   13708:	4b02      	ldr	r3, [pc, #8]	; (13714 <system_reset+0x10>)
   1370a:	4798      	blx	r3
}
   1370c:	46c0      	nop			; (mov r8, r8)
   1370e:	46bd      	mov	sp, r7
   13710:	bd80      	pop	{r7, pc}
   13712:	46c0      	nop			; (mov r8, r8)
   13714:	00013689 	.word	0x00013689

00013718 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   13718:	b580      	push	{r7, lr}
   1371a:	b082      	sub	sp, #8
   1371c:	af00      	add	r7, sp, #0
   1371e:	0002      	movs	r2, r0
   13720:	1dfb      	adds	r3, r7, #7
   13722:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   13724:	1dfb      	adds	r3, r7, #7
   13726:	781b      	ldrb	r3, [r3, #0]
   13728:	0018      	movs	r0, r3
   1372a:	4b03      	ldr	r3, [pc, #12]	; (13738 <port_get_group_from_gpio_pin+0x20>)
   1372c:	4798      	blx	r3
   1372e:	0003      	movs	r3, r0
}
   13730:	0018      	movs	r0, r3
   13732:	46bd      	mov	sp, r7
   13734:	b002      	add	sp, #8
   13736:	bd80      	pop	{r7, pc}
   13738:	000136a5 	.word	0x000136a5

0001373c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   1373c:	b580      	push	{r7, lr}
   1373e:	b084      	sub	sp, #16
   13740:	af00      	add	r7, sp, #0
   13742:	0002      	movs	r2, r0
   13744:	1dfb      	adds	r3, r7, #7
   13746:	701a      	strb	r2, [r3, #0]
   13748:	1dbb      	adds	r3, r7, #6
   1374a:	1c0a      	adds	r2, r1, #0
   1374c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1374e:	1dfb      	adds	r3, r7, #7
   13750:	781b      	ldrb	r3, [r3, #0]
   13752:	0018      	movs	r0, r3
   13754:	4b0d      	ldr	r3, [pc, #52]	; (1378c <port_pin_set_output_level+0x50>)
   13756:	4798      	blx	r3
   13758:	0003      	movs	r3, r0
   1375a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1375c:	1dfb      	adds	r3, r7, #7
   1375e:	781b      	ldrb	r3, [r3, #0]
   13760:	221f      	movs	r2, #31
   13762:	4013      	ands	r3, r2
   13764:	2201      	movs	r2, #1
   13766:	409a      	lsls	r2, r3
   13768:	0013      	movs	r3, r2
   1376a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   1376c:	1dbb      	adds	r3, r7, #6
   1376e:	781b      	ldrb	r3, [r3, #0]
   13770:	2b00      	cmp	r3, #0
   13772:	d003      	beq.n	1377c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   13774:	68fb      	ldr	r3, [r7, #12]
   13776:	68ba      	ldr	r2, [r7, #8]
   13778:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   1377a:	e002      	b.n	13782 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1377c:	68fb      	ldr	r3, [r7, #12]
   1377e:	68ba      	ldr	r2, [r7, #8]
   13780:	615a      	str	r2, [r3, #20]
}
   13782:	46c0      	nop			; (mov r8, r8)
   13784:	46bd      	mov	sp, r7
   13786:	b004      	add	sp, #16
   13788:	bd80      	pop	{r7, pc}
   1378a:	46c0      	nop			; (mov r8, r8)
   1378c:	00013719 	.word	0x00013719

00013790 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   13790:	b580      	push	{r7, lr}
   13792:	b086      	sub	sp, #24
   13794:	af00      	add	r7, sp, #0
   13796:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   13798:	4b9a      	ldr	r3, [pc, #616]	; (13a04 <vCommandConsoleTask+0x274>)
   1379a:	0018      	movs	r0, r3
   1379c:	4b9a      	ldr	r3, [pc, #616]	; (13a08 <vCommandConsoleTask+0x278>)
   1379e:	4798      	blx	r3
	
/*    FreeRTOS_CLIRegisterCommand(&xImuGetCommand);*/
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   137a0:	4b9a      	ldr	r3, [pc, #616]	; (13a0c <vCommandConsoleTask+0x27c>)
   137a2:	0018      	movs	r0, r3
   137a4:	4b98      	ldr	r3, [pc, #608]	; (13a08 <vCommandConsoleTask+0x278>)
   137a6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   137a8:	4b99      	ldr	r3, [pc, #612]	; (13a10 <vCommandConsoleTask+0x280>)
   137aa:	0018      	movs	r0, r3
   137ac:	4b96      	ldr	r3, [pc, #600]	; (13a08 <vCommandConsoleTask+0x278>)
   137ae:	4798      	blx	r3
//     FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
//     FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
//     FreeRTOS_CLIRegisterCommand(&xDistanceSensorGetDistance);
//     FreeRTOS_CLIRegisterCommand(&xSendDummyGameData);

	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   137b0:	4b98      	ldr	r3, [pc, #608]	; (13a14 <vCommandConsoleTask+0x284>)
   137b2:	0018      	movs	r0, r3
   137b4:	4b94      	ldr	r3, [pc, #592]	; (13a08 <vCommandConsoleTask+0x278>)
   137b6:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xtdsScan);
   137b8:	4b97      	ldr	r3, [pc, #604]	; (13a18 <vCommandConsoleTask+0x288>)
   137ba:	0018      	movs	r0, r3
   137bc:	4b92      	ldr	r3, [pc, #584]	; (13a08 <vCommandConsoleTask+0x278>)
   137be:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xpumpon);
   137c0:	4b96      	ldr	r3, [pc, #600]	; (13a1c <vCommandConsoleTask+0x28c>)
   137c2:	0018      	movs	r0, r3
   137c4:	4b90      	ldr	r3, [pc, #576]	; (13a08 <vCommandConsoleTask+0x278>)
   137c6:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xpumpoff);
   137c8:	4b95      	ldr	r3, [pc, #596]	; (13a20 <vCommandConsoleTask+0x290>)
   137ca:	0018      	movs	r0, r3
   137cc:	4b8e      	ldr	r3, [pc, #568]	; (13a08 <vCommandConsoleTask+0x278>)
   137ce:	4798      	blx	r3
// 	FreeRTOS_CLIRegisterCommand(&xWaterLevel);
// 	FreeRTOS_CLIRegisterCommand(&xtest);
// 	FreeRTOS_CLIRegisterCommand(&xtestall);

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   137d0:	2317      	movs	r3, #23
   137d2:	18fb      	adds	r3, r7, r3
   137d4:	2200      	movs	r2, #0
   137d6:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   137d8:	4b92      	ldr	r3, [pc, #584]	; (13a24 <vCommandConsoleTask+0x294>)
   137da:	0018      	movs	r0, r3
   137dc:	4b92      	ldr	r3, [pc, #584]	; (13a28 <vCommandConsoleTask+0x298>)
   137de:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   137e0:	2203      	movs	r2, #3
   137e2:	2100      	movs	r1, #0
   137e4:	2001      	movs	r0, #1
   137e6:	4b91      	ldr	r3, [pc, #580]	; (13a2c <vCommandConsoleTask+0x29c>)
   137e8:	4798      	blx	r3
   137ea:	0002      	movs	r2, r0
   137ec:	4b90      	ldr	r3, [pc, #576]	; (13a30 <vCommandConsoleTask+0x2a0>)
   137ee:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   137f0:	4b8f      	ldr	r3, [pc, #572]	; (13a30 <vCommandConsoleTask+0x2a0>)
   137f2:	681b      	ldr	r3, [r3, #0]
   137f4:	2b00      	cmp	r3, #0
   137f6:	d107      	bne.n	13808 <vCommandConsoleTask+0x78>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   137f8:	4b8e      	ldr	r3, [pc, #568]	; (13a34 <vCommandConsoleTask+0x2a4>)
   137fa:	0019      	movs	r1, r3
   137fc:	2003      	movs	r0, #3
   137fe:	4b8e      	ldr	r3, [pc, #568]	; (13a38 <vCommandConsoleTask+0x2a8>)
   13800:	4798      	blx	r3
        vTaskSuspend(NULL);
   13802:	2000      	movs	r0, #0
   13804:	4b8d      	ldr	r3, [pc, #564]	; (13a3c <vCommandConsoleTask+0x2ac>)
   13806:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   13808:	230c      	movs	r3, #12
   1380a:	18fb      	adds	r3, r7, r3
   1380c:	0018      	movs	r0, r3
   1380e:	4b8c      	ldr	r3, [pc, #560]	; (13a40 <vCommandConsoleTask+0x2b0>)
   13810:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   13812:	230c      	movs	r3, #12
   13814:	18fb      	adds	r3, r7, r3
   13816:	781b      	ldrb	r3, [r3, #0]
   13818:	2b0a      	cmp	r3, #10
   1381a:	d004      	beq.n	13826 <vCommandConsoleTask+0x96>
   1381c:	230c      	movs	r3, #12
   1381e:	18fb      	adds	r3, r7, r3
   13820:	781b      	ldrb	r3, [r3, #0]
   13822:	2b0d      	cmp	r3, #13
   13824:	d137      	bne.n	13896 <vCommandConsoleTask+0x106>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   13826:	4b87      	ldr	r3, [pc, #540]	; (13a44 <vCommandConsoleTask+0x2b4>)
   13828:	0018      	movs	r0, r3
   1382a:	4b7f      	ldr	r3, [pc, #508]	; (13a28 <vCommandConsoleTask+0x298>)
   1382c:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   1382e:	4b86      	ldr	r3, [pc, #536]	; (13a48 <vCommandConsoleTask+0x2b8>)
   13830:	2200      	movs	r2, #0
   13832:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   13834:	4b85      	ldr	r3, [pc, #532]	; (13a4c <vCommandConsoleTask+0x2bc>)
   13836:	2200      	movs	r2, #0
   13838:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   1383a:	4985      	ldr	r1, [pc, #532]	; (13a50 <vCommandConsoleTask+0x2c0>)
   1383c:	4b85      	ldr	r3, [pc, #532]	; (13a54 <vCommandConsoleTask+0x2c4>)
   1383e:	2231      	movs	r2, #49	; 0x31
   13840:	0018      	movs	r0, r3
   13842:	4b85      	ldr	r3, [pc, #532]	; (13a58 <vCommandConsoleTask+0x2c8>)
   13844:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   13846:	4b83      	ldr	r3, [pc, #524]	; (13a54 <vCommandConsoleTask+0x2c4>)
   13848:	2231      	movs	r2, #49	; 0x31
   1384a:	2100      	movs	r1, #0
   1384c:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   1384e:	4983      	ldr	r1, [pc, #524]	; (13a5c <vCommandConsoleTask+0x2cc>)
   13850:	4b7f      	ldr	r3, [pc, #508]	; (13a50 <vCommandConsoleTask+0x2c0>)
   13852:	2264      	movs	r2, #100	; 0x64
   13854:	0018      	movs	r0, r3
   13856:	4b82      	ldr	r3, [pc, #520]	; (13a60 <vCommandConsoleTask+0x2d0>)
   13858:	4798      	blx	r3
   1385a:	0003      	movs	r3, r0
   1385c:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   1385e:	4b7f      	ldr	r3, [pc, #508]	; (13a5c <vCommandConsoleTask+0x2cc>)
   13860:	2263      	movs	r2, #99	; 0x63
   13862:	2100      	movs	r1, #0
   13864:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   13866:	4b7d      	ldr	r3, [pc, #500]	; (13a5c <vCommandConsoleTask+0x2cc>)
   13868:	0018      	movs	r0, r3
   1386a:	4b6f      	ldr	r3, [pc, #444]	; (13a28 <vCommandConsoleTask+0x298>)
   1386c:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   1386e:	693b      	ldr	r3, [r7, #16]
   13870:	2b00      	cmp	r3, #0
   13872:	d1ec      	bne.n	1384e <vCommandConsoleTask+0xbe>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   13874:	2317      	movs	r3, #23
   13876:	18fb      	adds	r3, r7, r3
   13878:	2200      	movs	r2, #0
   1387a:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   1387c:	4b74      	ldr	r3, [pc, #464]	; (13a50 <vCommandConsoleTask+0x2c0>)
   1387e:	2232      	movs	r2, #50	; 0x32
   13880:	2100      	movs	r1, #0
   13882:	0018      	movs	r0, r3
   13884:	4b77      	ldr	r3, [pc, #476]	; (13a64 <vCommandConsoleTask+0x2d4>)
   13886:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   13888:	4b74      	ldr	r3, [pc, #464]	; (13a5c <vCommandConsoleTask+0x2cc>)
   1388a:	2264      	movs	r2, #100	; 0x64
   1388c:	2100      	movs	r1, #0
   1388e:	0018      	movs	r0, r3
   13890:	4b74      	ldr	r3, [pc, #464]	; (13a64 <vCommandConsoleTask+0x2d4>)
   13892:	4798      	blx	r3
   13894:	e0b5      	b.n	13a02 <vCommandConsoleTask+0x272>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   13896:	4b6c      	ldr	r3, [pc, #432]	; (13a48 <vCommandConsoleTask+0x2b8>)
   13898:	781b      	ldrb	r3, [r3, #0]
   1389a:	2b00      	cmp	r3, #0
   1389c:	d059      	beq.n	13952 <vCommandConsoleTask+0x1c2>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   1389e:	4b6b      	ldr	r3, [pc, #428]	; (13a4c <vCommandConsoleTask+0x2bc>)
   138a0:	781b      	ldrb	r3, [r3, #0]
   138a2:	2b03      	cmp	r3, #3
   138a4:	d80c      	bhi.n	138c0 <vCommandConsoleTask+0x130>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   138a6:	4b69      	ldr	r3, [pc, #420]	; (13a4c <vCommandConsoleTask+0x2bc>)
   138a8:	781b      	ldrb	r3, [r3, #0]
   138aa:	1c5a      	adds	r2, r3, #1
   138ac:	b2d1      	uxtb	r1, r2
   138ae:	4a67      	ldr	r2, [pc, #412]	; (13a4c <vCommandConsoleTask+0x2bc>)
   138b0:	7011      	strb	r1, [r2, #0]
   138b2:	001a      	movs	r2, r3
   138b4:	230c      	movs	r3, #12
   138b6:	18fb      	adds	r3, r7, r3
   138b8:	7819      	ldrb	r1, [r3, #0]
   138ba:	4b6b      	ldr	r3, [pc, #428]	; (13a68 <vCommandConsoleTask+0x2d8>)
   138bc:	5499      	strb	r1, [r3, r2]
   138be:	e005      	b.n	138cc <vCommandConsoleTask+0x13c>
                } else {
                    isEscapeCode = false;
   138c0:	4b61      	ldr	r3, [pc, #388]	; (13a48 <vCommandConsoleTask+0x2b8>)
   138c2:	2200      	movs	r2, #0
   138c4:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   138c6:	4b61      	ldr	r3, [pc, #388]	; (13a4c <vCommandConsoleTask+0x2bc>)
   138c8:	2200      	movs	r2, #0
   138ca:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   138cc:	4b5f      	ldr	r3, [pc, #380]	; (13a4c <vCommandConsoleTask+0x2bc>)
   138ce:	781b      	ldrb	r3, [r3, #0]
   138d0:	2b01      	cmp	r3, #1
   138d2:	d999      	bls.n	13808 <vCommandConsoleTask+0x78>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   138d4:	4a65      	ldr	r2, [pc, #404]	; (13a6c <vCommandConsoleTask+0x2dc>)
   138d6:	4b64      	ldr	r3, [pc, #400]	; (13a68 <vCommandConsoleTask+0x2d8>)
   138d8:	0011      	movs	r1, r2
   138da:	0018      	movs	r0, r3
   138dc:	4b64      	ldr	r3, [pc, #400]	; (13a70 <vCommandConsoleTask+0x2e0>)
   138de:	4798      	blx	r3
   138e0:	1e03      	subs	r3, r0, #0
   138e2:	d02f      	beq.n	13944 <vCommandConsoleTask+0x1b4>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   138e4:	4963      	ldr	r1, [pc, #396]	; (13a74 <vCommandConsoleTask+0x2e4>)
   138e6:	4b5a      	ldr	r3, [pc, #360]	; (13a50 <vCommandConsoleTask+0x2c0>)
   138e8:	221b      	movs	r2, #27
   138ea:	0018      	movs	r0, r3
   138ec:	4b62      	ldr	r3, [pc, #392]	; (13a78 <vCommandConsoleTask+0x2e8>)
   138ee:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   138f0:	4b57      	ldr	r3, [pc, #348]	; (13a50 <vCommandConsoleTask+0x2c0>)
   138f2:	0018      	movs	r0, r3
   138f4:	4b4c      	ldr	r3, [pc, #304]	; (13a28 <vCommandConsoleTask+0x298>)
   138f6:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   138f8:	2317      	movs	r3, #23
   138fa:	18fb      	adds	r3, r7, r3
   138fc:	2200      	movs	r2, #0
   138fe:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   13900:	4b53      	ldr	r3, [pc, #332]	; (13a50 <vCommandConsoleTask+0x2c0>)
   13902:	2232      	movs	r2, #50	; 0x32
   13904:	2100      	movs	r1, #0
   13906:	0018      	movs	r0, r3
   13908:	4b56      	ldr	r3, [pc, #344]	; (13a64 <vCommandConsoleTask+0x2d4>)
   1390a:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   1390c:	4951      	ldr	r1, [pc, #324]	; (13a54 <vCommandConsoleTask+0x2c4>)
   1390e:	4b50      	ldr	r3, [pc, #320]	; (13a50 <vCommandConsoleTask+0x2c0>)
   13910:	2231      	movs	r2, #49	; 0x31
   13912:	0018      	movs	r0, r3
   13914:	4b50      	ldr	r3, [pc, #320]	; (13a58 <vCommandConsoleTask+0x2c8>)
   13916:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   13918:	4b4d      	ldr	r3, [pc, #308]	; (13a50 <vCommandConsoleTask+0x2c0>)
   1391a:	0018      	movs	r0, r3
   1391c:	4b57      	ldr	r3, [pc, #348]	; (13a7c <vCommandConsoleTask+0x2ec>)
   1391e:	4798      	blx	r3
   13920:	0003      	movs	r3, r0
   13922:	2b30      	cmp	r3, #48	; 0x30
   13924:	d806      	bhi.n	13934 <vCommandConsoleTask+0x1a4>
   13926:	4b4b      	ldr	r3, [pc, #300]	; (13a54 <vCommandConsoleTask+0x2c4>)
   13928:	0018      	movs	r0, r3
   1392a:	4b54      	ldr	r3, [pc, #336]	; (13a7c <vCommandConsoleTask+0x2ec>)
   1392c:	4798      	blx	r3
   1392e:	0003      	movs	r3, r0
   13930:	b2da      	uxtb	r2, r3
   13932:	e000      	b.n	13936 <vCommandConsoleTask+0x1a6>
   13934:	2231      	movs	r2, #49	; 0x31
   13936:	2317      	movs	r3, #23
   13938:	18fb      	adds	r3, r7, r3
   1393a:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   1393c:	4b44      	ldr	r3, [pc, #272]	; (13a50 <vCommandConsoleTask+0x2c0>)
   1393e:	0018      	movs	r0, r3
   13940:	4b39      	ldr	r3, [pc, #228]	; (13a28 <vCommandConsoleTask+0x298>)
   13942:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   13944:	4b40      	ldr	r3, [pc, #256]	; (13a48 <vCommandConsoleTask+0x2b8>)
   13946:	2200      	movs	r2, #0
   13948:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   1394a:	4b40      	ldr	r3, [pc, #256]	; (13a4c <vCommandConsoleTask+0x2bc>)
   1394c:	2200      	movs	r2, #0
   1394e:	701a      	strb	r2, [r3, #0]
   13950:	e75a      	b.n	13808 <vCommandConsoleTask+0x78>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   13952:	230c      	movs	r3, #12
   13954:	18fb      	adds	r3, r7, r3
   13956:	781b      	ldrb	r3, [r3, #0]
   13958:	2b0d      	cmp	r3, #13
   1395a:	d100      	bne.n	1395e <vCommandConsoleTask+0x1ce>
   1395c:	e754      	b.n	13808 <vCommandConsoleTask+0x78>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   1395e:	230c      	movs	r3, #12
   13960:	18fb      	adds	r3, r7, r3
   13962:	781b      	ldrb	r3, [r3, #0]
   13964:	2b08      	cmp	r3, #8
   13966:	d004      	beq.n	13972 <vCommandConsoleTask+0x1e2>
   13968:	230c      	movs	r3, #12
   1396a:	18fb      	adds	r3, r7, r3
   1396c:	781b      	ldrb	r3, [r3, #0]
   1396e:	2b7f      	cmp	r3, #127	; 0x7f
   13970:	d11c      	bne.n	139ac <vCommandConsoleTask+0x21c>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   13972:	2308      	movs	r3, #8
   13974:	18fb      	adds	r3, r7, r3
   13976:	4a42      	ldr	r2, [pc, #264]	; (13a80 <vCommandConsoleTask+0x2f0>)
   13978:	6812      	ldr	r2, [r2, #0]
   1397a:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   1397c:	2308      	movs	r3, #8
   1397e:	18fb      	adds	r3, r7, r3
   13980:	0018      	movs	r0, r3
   13982:	4b29      	ldr	r3, [pc, #164]	; (13a28 <vCommandConsoleTask+0x298>)
   13984:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   13986:	2317      	movs	r3, #23
   13988:	18fb      	adds	r3, r7, r3
   1398a:	781b      	ldrb	r3, [r3, #0]
   1398c:	2b00      	cmp	r3, #0
   1398e:	d037      	beq.n	13a00 <vCommandConsoleTask+0x270>
                    cInputIndex--;
   13990:	2317      	movs	r3, #23
   13992:	18fb      	adds	r3, r7, r3
   13994:	781a      	ldrb	r2, [r3, #0]
   13996:	2317      	movs	r3, #23
   13998:	18fb      	adds	r3, r7, r3
   1399a:	3a01      	subs	r2, #1
   1399c:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   1399e:	2317      	movs	r3, #23
   139a0:	18fb      	adds	r3, r7, r3
   139a2:	781b      	ldrb	r3, [r3, #0]
   139a4:	4a2a      	ldr	r2, [pc, #168]	; (13a50 <vCommandConsoleTask+0x2c0>)
   139a6:	2100      	movs	r1, #0
   139a8:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   139aa:	e029      	b.n	13a00 <vCommandConsoleTask+0x270>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   139ac:	230c      	movs	r3, #12
   139ae:	18fb      	adds	r3, r7, r3
   139b0:	781b      	ldrb	r3, [r3, #0]
   139b2:	2b1b      	cmp	r3, #27
   139b4:	d106      	bne.n	139c4 <vCommandConsoleTask+0x234>
                isEscapeCode = true;  // Next characters will be code arguments
   139b6:	4b24      	ldr	r3, [pc, #144]	; (13a48 <vCommandConsoleTask+0x2b8>)
   139b8:	2201      	movs	r2, #1
   139ba:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   139bc:	4b23      	ldr	r3, [pc, #140]	; (13a4c <vCommandConsoleTask+0x2bc>)
   139be:	2200      	movs	r2, #0
   139c0:	701a      	strb	r2, [r3, #0]
   139c2:	e721      	b.n	13808 <vCommandConsoleTask+0x78>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   139c4:	2317      	movs	r3, #23
   139c6:	18fb      	adds	r3, r7, r3
   139c8:	781b      	ldrb	r3, [r3, #0]
   139ca:	2b31      	cmp	r3, #49	; 0x31
   139cc:	d80e      	bhi.n	139ec <vCommandConsoleTask+0x25c>
                    pcInputString[cInputIndex] = cRxedChar[0];
   139ce:	2317      	movs	r3, #23
   139d0:	18fb      	adds	r3, r7, r3
   139d2:	781b      	ldrb	r3, [r3, #0]
   139d4:	220c      	movs	r2, #12
   139d6:	18ba      	adds	r2, r7, r2
   139d8:	7811      	ldrb	r1, [r2, #0]
   139da:	4a1d      	ldr	r2, [pc, #116]	; (13a50 <vCommandConsoleTask+0x2c0>)
   139dc:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   139de:	2317      	movs	r3, #23
   139e0:	18fb      	adds	r3, r7, r3
   139e2:	781a      	ldrb	r2, [r3, #0]
   139e4:	2317      	movs	r3, #23
   139e6:	18fb      	adds	r3, r7, r3
   139e8:	3201      	adds	r2, #1
   139ea:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   139ec:	230c      	movs	r3, #12
   139ee:	18fb      	adds	r3, r7, r3
   139f0:	2200      	movs	r2, #0
   139f2:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   139f4:	230c      	movs	r3, #12
   139f6:	18fb      	adds	r3, r7, r3
   139f8:	0018      	movs	r0, r3
   139fa:	4b0b      	ldr	r3, [pc, #44]	; (13a28 <vCommandConsoleTask+0x298>)
   139fc:	4798      	blx	r3
   139fe:	e703      	b.n	13808 <vCommandConsoleTask+0x78>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13a00:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   13a02:	e701      	b.n	13808 <vCommandConsoleTask+0x78>
   13a04:	00035a20 	.word	0x00035a20
   13a08:	00017279 	.word	0x00017279
   13a0c:	00035a80 	.word	0x00035a80
   13a10:	00035a30 	.word	0x00035a30
   13a14:	00035a40 	.word	0x00035a40
   13a18:	00035a50 	.word	0x00035a50
   13a1c:	00035a60 	.word	0x00035a60
   13a20:	00035a70 	.word	0x00035a70
   13a24:	0003581c 	.word	0x0003581c
   13a28:	0001d1a5 	.word	0x0001d1a5
   13a2c:	00019845 	.word	0x00019845
   13a30:	200045f0 	.word	0x200045f0
   13a34:	00035964 	.word	0x00035964
   13a38:	0001d291 	.word	0x0001d291
   13a3c:	0001b631 	.word	0x0001b631
   13a40:	00013a85 	.word	0x00013a85
   13a44:	00035984 	.word	0x00035984
   13a48:	20000384 	.word	0x20000384
   13a4c:	20000385 	.word	0x20000385
   13a50:	200003bc 	.word	0x200003bc
   13a54:	20000388 	.word	0x20000388
   13a58:	00034703 	.word	0x00034703
   13a5c:	200003f0 	.word	0x200003f0
   13a60:	000172e9 	.word	0x000172e9
   13a64:	0003431b 	.word	0x0003431b
   13a68:	20000454 	.word	0x20000454
   13a6c:	00035988 	.word	0x00035988
   13a70:	0003461d 	.word	0x0003461d
   13a74:	0003598c 	.word	0x0003598c
   13a78:	000345d9 	.word	0x000345d9
   13a7c:	000346d3 	.word	0x000346d3
   13a80:	00035994 	.word	0x00035994

00013a84 <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   13a84:	b580      	push	{r7, lr}
   13a86:	b084      	sub	sp, #16
   13a88:	af00      	add	r7, sp, #0
   13a8a:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   13a8c:	687b      	ldr	r3, [r7, #4]
   13a8e:	0018      	movs	r0, r3
   13a90:	4b0c      	ldr	r3, [pc, #48]	; (13ac4 <FreeRTOS_read+0x40>)
   13a92:	4798      	blx	r3
   13a94:	0003      	movs	r3, r0
   13a96:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   13a98:	e00d      	b.n	13ab6 <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   13a9a:	4b0b      	ldr	r3, [pc, #44]	; (13ac8 <FreeRTOS_read+0x44>)
   13a9c:	681a      	ldr	r2, [r3, #0]
   13a9e:	2301      	movs	r3, #1
   13aa0:	425b      	negs	r3, r3
   13aa2:	0019      	movs	r1, r3
   13aa4:	0010      	movs	r0, r2
   13aa6:	4b09      	ldr	r3, [pc, #36]	; (13acc <FreeRTOS_read+0x48>)
   13aa8:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   13aaa:	687b      	ldr	r3, [r7, #4]
   13aac:	0018      	movs	r0, r3
   13aae:	4b05      	ldr	r3, [pc, #20]	; (13ac4 <FreeRTOS_read+0x40>)
   13ab0:	4798      	blx	r3
   13ab2:	0003      	movs	r3, r0
   13ab4:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   13ab6:	68fb      	ldr	r3, [r7, #12]
   13ab8:	3301      	adds	r3, #1
   13aba:	d0ee      	beq.n	13a9a <FreeRTOS_read+0x16>
    }
}
   13abc:	46c0      	nop			; (mov r8, r8)
   13abe:	46bd      	mov	sp, r7
   13ac0:	b004      	add	sp, #16
   13ac2:	bd80      	pop	{r7, pc}
   13ac4:	0001d241 	.word	0x0001d241
   13ac8:	200045f0 	.word	0x200045f0
   13acc:	0001a7fd 	.word	0x0001a7fd

00013ad0 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   13ad0:	b580      	push	{r7, lr}
   13ad2:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   13ad4:	4b0a      	ldr	r3, [pc, #40]	; (13b00 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13ad6:	2200      	movs	r2, #0
   13ad8:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   13ada:	4b0a      	ldr	r3, [pc, #40]	; (13b04 <CliCharReadySemaphoreGiveFromISR+0x34>)
   13adc:	681b      	ldr	r3, [r3, #0]
   13ade:	4a08      	ldr	r2, [pc, #32]	; (13b00 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13ae0:	0011      	movs	r1, r2
   13ae2:	0018      	movs	r0, r3
   13ae4:	4b08      	ldr	r3, [pc, #32]	; (13b08 <CliCharReadySemaphoreGiveFromISR+0x38>)
   13ae6:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13ae8:	4b05      	ldr	r3, [pc, #20]	; (13b00 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13aea:	681b      	ldr	r3, [r3, #0]
   13aec:	2b00      	cmp	r3, #0
   13aee:	d003      	beq.n	13af8 <CliCharReadySemaphoreGiveFromISR+0x28>
   13af0:	4b06      	ldr	r3, [pc, #24]	; (13b0c <CliCharReadySemaphoreGiveFromISR+0x3c>)
   13af2:	2280      	movs	r2, #128	; 0x80
   13af4:	0552      	lsls	r2, r2, #21
   13af6:	601a      	str	r2, [r3, #0]
}
   13af8:	46c0      	nop			; (mov r8, r8)
   13afa:	46bd      	mov	sp, r7
   13afc:	bd80      	pop	{r7, pc}
   13afe:	46c0      	nop			; (mov r8, r8)
   13b00:	20000458 	.word	0x20000458
   13b04:	200045f0 	.word	0x200045f0
   13b08:	0001a175 	.word	0x0001a175
   13b0c:	e000ed04 	.word	0xe000ed04

00013b10 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13b10:	b590      	push	{r4, r7, lr}
   13b12:	b087      	sub	sp, #28
   13b14:	af00      	add	r7, sp, #0
   13b16:	60f8      	str	r0, [r7, #12]
   13b18:	60b9      	str	r1, [r7, #8]
   13b1a:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   13b1c:	2317      	movs	r3, #23
   13b1e:	18fb      	adds	r3, r7, r3
   13b20:	221b      	movs	r2, #27
   13b22:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   13b24:	2317      	movs	r3, #23
   13b26:	18fb      	adds	r3, r7, r3
   13b28:	781b      	ldrb	r3, [r3, #0]
   13b2a:	4a08      	ldr	r2, [pc, #32]	; (13b4c <xCliClearTerminalScreen+0x3c>)
   13b2c:	4808      	ldr	r0, [pc, #32]	; (13b50 <xCliClearTerminalScreen+0x40>)
   13b2e:	210f      	movs	r1, #15
   13b30:	4c08      	ldr	r4, [pc, #32]	; (13b54 <xCliClearTerminalScreen+0x44>)
   13b32:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   13b34:	4a06      	ldr	r2, [pc, #24]	; (13b50 <xCliClearTerminalScreen+0x40>)
   13b36:	68b9      	ldr	r1, [r7, #8]
   13b38:	68fb      	ldr	r3, [r7, #12]
   13b3a:	0018      	movs	r0, r3
   13b3c:	4b05      	ldr	r3, [pc, #20]	; (13b54 <xCliClearTerminalScreen+0x44>)
   13b3e:	4798      	blx	r3
    return pdFALSE;
   13b40:	2300      	movs	r3, #0
}
   13b42:	0018      	movs	r0, r3
   13b44:	46bd      	mov	sp, r7
   13b46:	b007      	add	sp, #28
   13b48:	bd90      	pop	{r4, r7, pc}
   13b4a:	46c0      	nop			; (mov r8, r8)
   13b4c:	00035998 	.word	0x00035998
   13b50:	20000374 	.word	0x20000374
   13b54:	00034575 	.word	0x00034575

00013b58 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13b58:	b580      	push	{r7, lr}
   13b5a:	b084      	sub	sp, #16
   13b5c:	af00      	add	r7, sp, #0
   13b5e:	60f8      	str	r0, [r7, #12]
   13b60:	60b9      	str	r1, [r7, #8]
   13b62:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   13b64:	2002      	movs	r0, #2
   13b66:	4b06      	ldr	r3, [pc, #24]	; (13b80 <CLI_OTAU+0x28>)
   13b68:	4798      	blx	r3
	vTaskDelay(20000);
   13b6a:	4b06      	ldr	r3, [pc, #24]	; (13b84 <CLI_OTAU+0x2c>)
   13b6c:	0018      	movs	r0, r3
   13b6e:	4b06      	ldr	r3, [pc, #24]	; (13b88 <CLI_OTAU+0x30>)
   13b70:	4798      	blx	r3
	system_reset();
   13b72:	4b06      	ldr	r3, [pc, #24]	; (13b8c <CLI_OTAU+0x34>)
   13b74:	4798      	blx	r3
    return pdFALSE;
   13b76:	2300      	movs	r3, #0
}
   13b78:	0018      	movs	r0, r3
   13b7a:	46bd      	mov	sp, r7
   13b7c:	b004      	add	sp, #16
   13b7e:	bd80      	pop	{r7, pc}
   13b80:	00016805 	.word	0x00016805
   13b84:	00004e20 	.word	0x00004e20
   13b88:	0001b551 	.word	0x0001b551
   13b8c:	00013705 	.word	0x00013705

00013b90 <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13b90:	b580      	push	{r7, lr}
   13b92:	b084      	sub	sp, #16
   13b94:	af00      	add	r7, sp, #0
   13b96:	60f8      	str	r0, [r7, #12]
   13b98:	60b9      	str	r1, [r7, #8]
   13b9a:	607a      	str	r2, [r7, #4]
    system_reset();
   13b9c:	4b03      	ldr	r3, [pc, #12]	; (13bac <CLI_ResetDevice+0x1c>)
   13b9e:	4798      	blx	r3
    return pdFALSE;
   13ba0:	2300      	movs	r3, #0
}
   13ba2:	0018      	movs	r0, r3
   13ba4:	46bd      	mov	sp, r7
   13ba6:	b004      	add	sp, #16
   13ba8:	bd80      	pop	{r7, pc}
   13baa:	46c0      	nop			; (mov r8, r8)
   13bac:	00013705 	.word	0x00013705

00013bb0 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13bb0:	b590      	push	{r4, r7, lr}
   13bb2:	b08f      	sub	sp, #60	; 0x3c
   13bb4:	af00      	add	r7, sp, #0
   13bb6:	60f8      	str	r0, [r7, #12]
   13bb8:	60b9      	str	r1, [r7, #8]
   13bba:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        //uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   13bbc:	2318      	movs	r3, #24
   13bbe:	18fb      	adds	r3, r7, r3
   13bc0:	2200      	movs	r2, #0
   13bc2:	701a      	strb	r2, [r3, #0]
   13bc4:	2318      	movs	r3, #24
   13bc6:	18fb      	adds	r3, r7, r3
   13bc8:	2200      	movs	r2, #0
   13bca:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   13bcc:	2318      	movs	r3, #24
   13bce:	18fb      	adds	r3, r7, r3
   13bd0:	2200      	movs	r2, #0
   13bd2:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   13bd4:	2318      	movs	r3, #24
   13bd6:	18fb      	adds	r3, r7, r3
   13bd8:	2200      	movs	r2, #0
   13bda:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   13bdc:	231c      	movs	r3, #28
   13bde:	18fb      	adds	r3, r7, r3
   13be0:	2200      	movs	r2, #0
   13be2:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   13be4:	231c      	movs	r3, #28
   13be6:	18fb      	adds	r3, r7, r3
   13be8:	2214      	movs	r2, #20
   13bea:	18ba      	adds	r2, r7, r2
   13bec:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   13bee:	231c      	movs	r3, #28
   13bf0:	18fb      	adds	r3, r7, r3
   13bf2:	2201      	movs	r2, #1
   13bf4:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   13bf6:	231c      	movs	r3, #28
   13bf8:	18fb      	adds	r3, r7, r3
   13bfa:	2218      	movs	r2, #24
   13bfc:	18ba      	adds	r2, r7, r2
   13bfe:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   13c00:	231c      	movs	r3, #28
   13c02:	18fb      	adds	r3, r7, r3
   13c04:	2201      	movs	r2, #1
   13c06:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   13c08:	4b2a      	ldr	r3, [pc, #168]	; (13cb4 <CLI_i2cScan+0x104>)
   13c0a:	0018      	movs	r0, r3
   13c0c:	4b2a      	ldr	r3, [pc, #168]	; (13cb8 <CLI_i2cScan+0x108>)
   13c0e:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   13c10:	2300      	movs	r3, #0
   13c12:	637b      	str	r3, [r7, #52]	; 0x34
   13c14:	e042      	b.n	13c9c <CLI_i2cScan+0xec>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   13c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13c18:	4a28      	ldr	r2, [pc, #160]	; (13cbc <CLI_i2cScan+0x10c>)
   13c1a:	4829      	ldr	r0, [pc, #164]	; (13cc0 <CLI_i2cScan+0x110>)
   13c1c:	210f      	movs	r1, #15
   13c1e:	4c29      	ldr	r4, [pc, #164]	; (13cc4 <CLI_i2cScan+0x114>)
   13c20:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   13c22:	4b27      	ldr	r3, [pc, #156]	; (13cc0 <CLI_i2cScan+0x110>)
   13c24:	0018      	movs	r0, r3
   13c26:	4b24      	ldr	r3, [pc, #144]	; (13cb8 <CLI_i2cScan+0x108>)
   13c28:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   13c2a:	2300      	movs	r3, #0
   13c2c:	633b      	str	r3, [r7, #48]	; 0x30
   13c2e:	e02b      	b.n	13c88 <CLI_i2cScan+0xd8>
                {

                    i2cOled.address = (i + j);
   13c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13c32:	b2da      	uxtb	r2, r3
   13c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13c36:	b2db      	uxtb	r3, r3
   13c38:	18d3      	adds	r3, r2, r3
   13c3a:	b2da      	uxtb	r2, r3
   13c3c:	231c      	movs	r3, #28
   13c3e:	18fb      	adds	r3, r7, r3
   13c40:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cPingAddressWait(&i2cOled, 100, 100);
   13c42:	231c      	movs	r3, #28
   13c44:	18fb      	adds	r3, r7, r3
   13c46:	2264      	movs	r2, #100	; 0x64
   13c48:	2164      	movs	r1, #100	; 0x64
   13c4a:	0018      	movs	r0, r3
   13c4c:	4b1e      	ldr	r3, [pc, #120]	; (13cc8 <CLI_i2cScan+0x118>)
   13c4e:	4798      	blx	r3
   13c50:	0003      	movs	r3, r0
   13c52:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   13c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13c56:	2b00      	cmp	r3, #0
   13c58:	d10c      	bne.n	13c74 <CLI_i2cScan+0xc4>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x ", i2cOled.address);
   13c5a:	231c      	movs	r3, #28
   13c5c:	18fb      	adds	r3, r7, r3
   13c5e:	781b      	ldrb	r3, [r3, #0]
   13c60:	4a1a      	ldr	r2, [pc, #104]	; (13ccc <CLI_i2cScan+0x11c>)
   13c62:	4817      	ldr	r0, [pc, #92]	; (13cc0 <CLI_i2cScan+0x110>)
   13c64:	210f      	movs	r1, #15
   13c66:	4c17      	ldr	r4, [pc, #92]	; (13cc4 <CLI_i2cScan+0x114>)
   13c68:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   13c6a:	4b15      	ldr	r3, [pc, #84]	; (13cc0 <CLI_i2cScan+0x110>)
   13c6c:	0018      	movs	r0, r3
   13c6e:	4b12      	ldr	r3, [pc, #72]	; (13cb8 <CLI_i2cScan+0x108>)
   13c70:	4798      	blx	r3
   13c72:	e006      	b.n	13c82 <CLI_i2cScan+0xd2>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X  ");
   13c74:	4b12      	ldr	r3, [pc, #72]	; (13cc0 <CLI_i2cScan+0x110>)
   13c76:	4a16      	ldr	r2, [pc, #88]	; (13cd0 <CLI_i2cScan+0x120>)
   13c78:	601a      	str	r2, [r3, #0]
						SerialConsoleWriteString(bufCli);
   13c7a:	4b11      	ldr	r3, [pc, #68]	; (13cc0 <CLI_i2cScan+0x110>)
   13c7c:	0018      	movs	r0, r3
   13c7e:	4b0e      	ldr	r3, [pc, #56]	; (13cb8 <CLI_i2cScan+0x108>)
   13c80:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   13c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13c84:	3301      	adds	r3, #1
   13c86:	633b      	str	r3, [r7, #48]	; 0x30
   13c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13c8a:	2b0f      	cmp	r3, #15
   13c8c:	ddd0      	ble.n	13c30 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   13c8e:	4b11      	ldr	r3, [pc, #68]	; (13cd4 <CLI_i2cScan+0x124>)
   13c90:	0018      	movs	r0, r3
   13c92:	4b09      	ldr	r3, [pc, #36]	; (13cb8 <CLI_i2cScan+0x108>)
   13c94:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   13c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13c98:	3310      	adds	r3, #16
   13c9a:	637b      	str	r3, [r7, #52]	; 0x34
   13c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13c9e:	2b7f      	cmp	r3, #127	; 0x7f
   13ca0:	ddb9      	ble.n	13c16 <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   13ca2:	4b0c      	ldr	r3, [pc, #48]	; (13cd4 <CLI_i2cScan+0x124>)
   13ca4:	0018      	movs	r0, r3
   13ca6:	4b04      	ldr	r3, [pc, #16]	; (13cb8 <CLI_i2cScan+0x108>)
   13ca8:	4798      	blx	r3
			return pdFALSE;
   13caa:	2300      	movs	r3, #0

}
   13cac:	0018      	movs	r0, r3
   13cae:	46bd      	mov	sp, r7
   13cb0:	b00f      	add	sp, #60	; 0x3c
   13cb2:	bd90      	pop	{r4, r7, pc}
   13cb4:	000359a0 	.word	0x000359a0
   13cb8:	0001d1a5 	.word	0x0001d1a5
   13cbc:	000359d4 	.word	0x000359d4
   13cc0:	20000374 	.word	0x20000374
   13cc4:	00034575 	.word	0x00034575
   13cc8:	00014861 	.word	0x00014861
   13ccc:	000359dc 	.word	0x000359dc
   13cd0:	00202058 	.word	0x00202058
   13cd4:	00035984 	.word	0x00035984

00013cd8 <CLI_adcScan>:
 * @brief    Scan ADC once  
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_adcScan(){
   13cd8:	b590      	push	{r4, r7, lr}
   13cda:	b08b      	sub	sp, #44	; 0x2c
   13cdc:	af00      	add	r7, sp, #0
	
		float tdsValue = getTDSdata();
   13cde:	4b0b      	ldr	r3, [pc, #44]	; (13d0c <CLI_adcScan+0x34>)
   13ce0:	4798      	blx	r3
   13ce2:	1c03      	adds	r3, r0, #0
   13ce4:	627b      	str	r3, [r7, #36]	; 0x24
 		char buff1[30];
 		snprintf(buff1, 30, "TDS reading: %d ppm\r\n", (uint16_t)tdsValue);
   13ce6:	4b0a      	ldr	r3, [pc, #40]	; (13d10 <CLI_adcScan+0x38>)
   13ce8:	6a78      	ldr	r0, [r7, #36]	; 0x24
   13cea:	4798      	blx	r3
   13cec:	0003      	movs	r3, r0
   13cee:	b29b      	uxth	r3, r3
   13cf0:	4a08      	ldr	r2, [pc, #32]	; (13d14 <CLI_adcScan+0x3c>)
   13cf2:	1d38      	adds	r0, r7, #4
   13cf4:	211e      	movs	r1, #30
   13cf6:	4c08      	ldr	r4, [pc, #32]	; (13d18 <CLI_adcScan+0x40>)
   13cf8:	47a0      	blx	r4
		SerialConsoleWriteString(buff1);
   13cfa:	1d3b      	adds	r3, r7, #4
   13cfc:	0018      	movs	r0, r3
   13cfe:	4b07      	ldr	r3, [pc, #28]	; (13d1c <CLI_adcScan+0x44>)
   13d00:	4798      	blx	r3
		
		return pdFALSE;
   13d02:	2300      	movs	r3, #0
}
   13d04:	0018      	movs	r0, r3
   13d06:	46bd      	mov	sp, r7
   13d08:	b00b      	add	sp, #44	; 0x2c
   13d0a:	bd90      	pop	{r4, r7, pc}
   13d0c:	00014ac1 	.word	0x00014ac1
   13d10:	00032251 	.word	0x00032251
   13d14:	000359e4 	.word	0x000359e4
   13d18:	00034575 	.word	0x00034575
   13d1c:	0001d1a5 	.word	0x0001d1a5

00013d20 <CLI_gpioON>:
 * @brief    runs gpio  
 * @param    gpio
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_gpioON(){
   13d20:	b580      	push	{r7, lr}
   13d22:	af00      	add	r7, sp, #0
	SerialConsoleWriteString("Starting motor \r\n");
   13d24:	4b05      	ldr	r3, [pc, #20]	; (13d3c <CLI_gpioON+0x1c>)
   13d26:	0018      	movs	r0, r3
   13d28:	4b05      	ldr	r3, [pc, #20]	; (13d40 <CLI_gpioON+0x20>)
   13d2a:	4798      	blx	r3
	port_pin_set_output_level(PIN_PB02, true);
   13d2c:	2101      	movs	r1, #1
   13d2e:	2022      	movs	r0, #34	; 0x22
   13d30:	4b04      	ldr	r3, [pc, #16]	; (13d44 <CLI_gpioON+0x24>)
   13d32:	4798      	blx	r3
	return pdFALSE;
   13d34:	2300      	movs	r3, #0
}
   13d36:	0018      	movs	r0, r3
   13d38:	46bd      	mov	sp, r7
   13d3a:	bd80      	pop	{r7, pc}
   13d3c:	000359fc 	.word	0x000359fc
   13d40:	0001d1a5 	.word	0x0001d1a5
   13d44:	0001373d 	.word	0x0001373d

00013d48 <CLI_gpioOFF>:
 * @brief    runs gpio  
 * @param    gpio
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_gpioOFF(){
   13d48:	b580      	push	{r7, lr}
   13d4a:	af00      	add	r7, sp, #0
	port_pin_set_output_level(PIN_PB02, false);
   13d4c:	2100      	movs	r1, #0
   13d4e:	2022      	movs	r0, #34	; 0x22
   13d50:	4b04      	ldr	r3, [pc, #16]	; (13d64 <CLI_gpioOFF+0x1c>)
   13d52:	4798      	blx	r3
	SerialConsoleWriteString("Done motor \r\n");
   13d54:	4b04      	ldr	r3, [pc, #16]	; (13d68 <CLI_gpioOFF+0x20>)
   13d56:	0018      	movs	r0, r3
   13d58:	4b04      	ldr	r3, [pc, #16]	; (13d6c <CLI_gpioOFF+0x24>)
   13d5a:	4798      	blx	r3
	return pdFALSE;
   13d5c:	2300      	movs	r3, #0
}
   13d5e:	0018      	movs	r0, r3
   13d60:	46bd      	mov	sp, r7
   13d62:	bd80      	pop	{r7, pc}
   13d64:	0001373d 	.word	0x0001373d
   13d68:	00035a10 	.word	0x00035a10
   13d6c:	0001d1a5 	.word	0x0001d1a5

00013d70 <system_pinmux_get_group_from_gpio_pin>:
{
   13d70:	b580      	push	{r7, lr}
   13d72:	b084      	sub	sp, #16
   13d74:	af00      	add	r7, sp, #0
   13d76:	0002      	movs	r2, r0
   13d78:	1dfb      	adds	r3, r7, #7
   13d7a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   13d7c:	230f      	movs	r3, #15
   13d7e:	18fb      	adds	r3, r7, r3
   13d80:	1dfa      	adds	r2, r7, #7
   13d82:	7812      	ldrb	r2, [r2, #0]
   13d84:	09d2      	lsrs	r2, r2, #7
   13d86:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   13d88:	230e      	movs	r3, #14
   13d8a:	18fb      	adds	r3, r7, r3
   13d8c:	1dfa      	adds	r2, r7, #7
   13d8e:	7812      	ldrb	r2, [r2, #0]
   13d90:	0952      	lsrs	r2, r2, #5
   13d92:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   13d94:	4b0d      	ldr	r3, [pc, #52]	; (13dcc <system_pinmux_get_group_from_gpio_pin+0x5c>)
   13d96:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   13d98:	230f      	movs	r3, #15
   13d9a:	18fb      	adds	r3, r7, r3
   13d9c:	781b      	ldrb	r3, [r3, #0]
   13d9e:	2b00      	cmp	r3, #0
   13da0:	d10f      	bne.n	13dc2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   13da2:	230f      	movs	r3, #15
   13da4:	18fb      	adds	r3, r7, r3
   13da6:	781b      	ldrb	r3, [r3, #0]
   13da8:	009b      	lsls	r3, r3, #2
   13daa:	2210      	movs	r2, #16
   13dac:	4694      	mov	ip, r2
   13dae:	44bc      	add	ip, r7
   13db0:	4463      	add	r3, ip
   13db2:	3b08      	subs	r3, #8
   13db4:	681a      	ldr	r2, [r3, #0]
   13db6:	230e      	movs	r3, #14
   13db8:	18fb      	adds	r3, r7, r3
   13dba:	781b      	ldrb	r3, [r3, #0]
   13dbc:	01db      	lsls	r3, r3, #7
   13dbe:	18d3      	adds	r3, r2, r3
   13dc0:	e000      	b.n	13dc4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   13dc2:	2300      	movs	r3, #0
}
   13dc4:	0018      	movs	r0, r3
   13dc6:	46bd      	mov	sp, r7
   13dc8:	b004      	add	sp, #16
   13dca:	bd80      	pop	{r7, pc}
   13dcc:	41004400 	.word	0x41004400

00013dd0 <port_get_group_from_gpio_pin>:
{
   13dd0:	b580      	push	{r7, lr}
   13dd2:	b082      	sub	sp, #8
   13dd4:	af00      	add	r7, sp, #0
   13dd6:	0002      	movs	r2, r0
   13dd8:	1dfb      	adds	r3, r7, #7
   13dda:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   13ddc:	1dfb      	adds	r3, r7, #7
   13dde:	781b      	ldrb	r3, [r3, #0]
   13de0:	0018      	movs	r0, r3
   13de2:	4b03      	ldr	r3, [pc, #12]	; (13df0 <port_get_group_from_gpio_pin+0x20>)
   13de4:	4798      	blx	r3
   13de6:	0003      	movs	r3, r0
}
   13de8:	0018      	movs	r0, r3
   13dea:	46bd      	mov	sp, r7
   13dec:	b002      	add	sp, #8
   13dee:	bd80      	pop	{r7, pc}
   13df0:	00013d71 	.word	0x00013d71

00013df4 <port_pin_set_output_level>:
{
   13df4:	b580      	push	{r7, lr}
   13df6:	b084      	sub	sp, #16
   13df8:	af00      	add	r7, sp, #0
   13dfa:	0002      	movs	r2, r0
   13dfc:	1dfb      	adds	r3, r7, #7
   13dfe:	701a      	strb	r2, [r3, #0]
   13e00:	1dbb      	adds	r3, r7, #6
   13e02:	1c0a      	adds	r2, r1, #0
   13e04:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   13e06:	1dfb      	adds	r3, r7, #7
   13e08:	781b      	ldrb	r3, [r3, #0]
   13e0a:	0018      	movs	r0, r3
   13e0c:	4b0d      	ldr	r3, [pc, #52]	; (13e44 <port_pin_set_output_level+0x50>)
   13e0e:	4798      	blx	r3
   13e10:	0003      	movs	r3, r0
   13e12:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   13e14:	1dfb      	adds	r3, r7, #7
   13e16:	781b      	ldrb	r3, [r3, #0]
   13e18:	221f      	movs	r2, #31
   13e1a:	4013      	ands	r3, r2
   13e1c:	2201      	movs	r2, #1
   13e1e:	409a      	lsls	r2, r3
   13e20:	0013      	movs	r3, r2
   13e22:	60bb      	str	r3, [r7, #8]
	if (level) {
   13e24:	1dbb      	adds	r3, r7, #6
   13e26:	781b      	ldrb	r3, [r3, #0]
   13e28:	2b00      	cmp	r3, #0
   13e2a:	d003      	beq.n	13e34 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   13e2c:	68fb      	ldr	r3, [r7, #12]
   13e2e:	68ba      	ldr	r2, [r7, #8]
   13e30:	619a      	str	r2, [r3, #24]
}
   13e32:	e002      	b.n	13e3a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   13e34:	68fb      	ldr	r3, [r7, #12]
   13e36:	68ba      	ldr	r2, [r7, #8]
   13e38:	615a      	str	r2, [r3, #20]
}
   13e3a:	46c0      	nop			; (mov r8, r8)
   13e3c:	46bd      	mov	sp, r7
   13e3e:	b004      	add	sp, #16
   13e40:	bd80      	pop	{r7, pc}
   13e42:	46c0      	nop			; (mov r8, r8)
   13e44:	00013dd1 	.word	0x00013dd1

00013e48 <vHydr8Task>:

#include <errno.h>

uint8_t waterLevel_global = 0;

void vHydr8Task(void *pvParameters){
   13e48:	b590      	push	{r4, r7, lr}
   13e4a:	b091      	sub	sp, #68	; 0x44
   13e4c:	af00      	add	r7, sp, #0
   13e4e:	6078      	str	r0, [r7, #4]
	WaterSensor_Init();
   13e50:	4b7c      	ldr	r3, [pc, #496]	; (14044 <vHydr8Task+0x1fc>)
   13e52:	4798      	blx	r3
	uint8_t countIn = 0;
   13e54:	233f      	movs	r3, #63	; 0x3f
   13e56:	18fb      	adds	r3, r7, r3
   13e58:	2200      	movs	r2, #0
   13e5a:	701a      	strb	r2, [r3, #0]
	uint8_t pumpON=0;
   13e5c:	233e      	movs	r3, #62	; 0x3e
   13e5e:	18fb      	adds	r3, r7, r3
   13e60:	2200      	movs	r2, #0
   13e62:	701a      	strb	r2, [r3, #0]
	uint8_t wlPercent=0;
   13e64:	233d      	movs	r3, #61	; 0x3d
   13e66:	18fb      	adds	r3, r7, r3
   13e68:	2200      	movs	r2, #0
   13e6a:	701a      	strb	r2, [r3, #0]
	struct Hydr8WaterLevel hydr8WaterData;
	struct Hydr8TdsLevel hydr8TDSData;
	struct pumpLED pumpLedData;
	struct tdsLED tdsLedData;
	struct VolumeConsumed volData;
	pumpLedData.pumpLedState = 0;
   13e6c:	2314      	movs	r3, #20
   13e6e:	18fb      	adds	r3, r7, r3
   13e70:	2200      	movs	r2, #0
   13e72:	701a      	strb	r2, [r3, #0]
	tdsLedData.tdsLedState = 0;
   13e74:	2310      	movs	r3, #16
   13e76:	18fb      	adds	r3, r7, r3
   13e78:	2200      	movs	r2, #0
   13e7a:	701a      	strb	r2, [r3, #0]
	
	//For calculating volume
	uint8_t waterLevelPrevious=0;
   13e7c:	233c      	movs	r3, #60	; 0x3c
   13e7e:	18fb      	adds	r3, r7, r3
   13e80:	2200      	movs	r2, #0
   13e82:	701a      	strb	r2, [r3, #0]
	uint16_t volume=0;
   13e84:	233a      	movs	r3, #58	; 0x3a
   13e86:	18fb      	adds	r3, r7, r3
   13e88:	2200      	movs	r2, #0
   13e8a:	801a      	strh	r2, [r3, #0]
	volData.volumeData = 0;
   13e8c:	230c      	movs	r3, #12
   13e8e:	18fb      	adds	r3, r7, r3
   13e90:	2200      	movs	r2, #0
   13e92:	801a      	strh	r2, [r3, #0]
	
	while(1){
		float tdsValue = getTDSdata();
   13e94:	4b6c      	ldr	r3, [pc, #432]	; (14048 <vHydr8Task+0x200>)
   13e96:	4798      	blx	r3
   13e98:	1c03      	adds	r3, r0, #0
   13e9a:	637b      	str	r3, [r7, #52]	; 0x34
		hydr8TDSData.tdsLevel = (uint16_t)tdsValue;
   13e9c:	4b6b      	ldr	r3, [pc, #428]	; (1404c <vHydr8Task+0x204>)
   13e9e:	6b78      	ldr	r0, [r7, #52]	; 0x34
   13ea0:	4798      	blx	r3
   13ea2:	0003      	movs	r3, r0
   13ea4:	b29a      	uxth	r2, r3
   13ea6:	2318      	movs	r3, #24
   13ea8:	18fb      	adds	r3, r7, r3
   13eaa:	801a      	strh	r2, [r3, #0]
		WifiAddHydr8TDSDataToQueue(&hydr8TDSData);
   13eac:	2318      	movs	r3, #24
   13eae:	18fb      	adds	r3, r7, r3
   13eb0:	0018      	movs	r0, r3
   13eb2:	4b67      	ldr	r3, [pc, #412]	; (14050 <vHydr8Task+0x208>)
   13eb4:	4798      	blx	r3

		if(tdsValue < TDS_THRESHOLD){
   13eb6:	4b67      	ldr	r3, [pc, #412]	; (14054 <vHydr8Task+0x20c>)
   13eb8:	4967      	ldr	r1, [pc, #412]	; (14058 <vHydr8Task+0x210>)
   13eba:	6b78      	ldr	r0, [r7, #52]	; 0x34
   13ebc:	4798      	blx	r3
   13ebe:	1e03      	subs	r3, r0, #0
   13ec0:	d100      	bne.n	13ec4 <vHydr8Task+0x7c>
   13ec2:	e0a5      	b.n	14010 <vHydr8Task+0x1c8>
			WifiAddHydr8TdsLedToQueue(&tdsLedData);
   13ec4:	2310      	movs	r3, #16
   13ec6:	18fb      	adds	r3, r7, r3
   13ec8:	0018      	movs	r0, r3
   13eca:	4b64      	ldr	r3, [pc, #400]	; (1405c <vHydr8Task+0x214>)
   13ecc:	4798      	blx	r3
			countIn=0;
   13ece:	233f      	movs	r3, #63	; 0x3f
   13ed0:	18fb      	adds	r3, r7, r3
   13ed2:	2200      	movs	r2, #0
   13ed4:	701a      	strb	r2, [r3, #0]
			while(countIn <= PUMP_LIM){
   13ed6:	e094      	b.n	14002 <vHydr8Task+0x1ba>
				memset(wlDataLow,0,8);
   13ed8:	232c      	movs	r3, #44	; 0x2c
   13eda:	18fb      	adds	r3, r7, r3
   13edc:	2208      	movs	r2, #8
   13ede:	2100      	movs	r1, #0
   13ee0:	0018      	movs	r0, r3
   13ee2:	4b5f      	ldr	r3, [pc, #380]	; (14060 <vHydr8Task+0x218>)
   13ee4:	4798      	blx	r3
				memset(wlDataHigh,0,12);
   13ee6:	2320      	movs	r3, #32
   13ee8:	18fb      	adds	r3, r7, r3
   13eea:	220c      	movs	r2, #12
   13eec:	2100      	movs	r1, #0
   13eee:	0018      	movs	r0, r3
   13ef0:	4b5b      	ldr	r3, [pc, #364]	; (14060 <vHydr8Task+0x218>)
   13ef2:	4798      	blx	r3
				wlPercent = getWaterLevel(wlDataLow,wlDataHigh);
   13ef4:	233d      	movs	r3, #61	; 0x3d
   13ef6:	18fc      	adds	r4, r7, r3
   13ef8:	2320      	movs	r3, #32
   13efa:	18fa      	adds	r2, r7, r3
   13efc:	232c      	movs	r3, #44	; 0x2c
   13efe:	18fb      	adds	r3, r7, r3
   13f00:	0011      	movs	r1, r2
   13f02:	0018      	movs	r0, r3
   13f04:	4b57      	ldr	r3, [pc, #348]	; (14064 <vHydr8Task+0x21c>)
   13f06:	4798      	blx	r3
   13f08:	0003      	movs	r3, r0
   13f0a:	7023      	strb	r3, [r4, #0]
				if(wlPercent<=WL_LOW_THRESHOLD){
   13f0c:	233d      	movs	r3, #61	; 0x3d
   13f0e:	18fb      	adds	r3, r7, r3
   13f10:	781b      	ldrb	r3, [r3, #0]
   13f12:	2b14      	cmp	r3, #20
   13f14:	d804      	bhi.n	13f20 <vHydr8Task+0xd8>
					pumpON=1;
   13f16:	233e      	movs	r3, #62	; 0x3e
   13f18:	18fb      	adds	r3, r7, r3
   13f1a:	2201      	movs	r2, #1
   13f1c:	701a      	strb	r2, [r3, #0]
   13f1e:	e008      	b.n	13f32 <vHydr8Task+0xea>
				}
				else if(wlPercent>=WL_HIGH_THRESHOLD){
   13f20:	233d      	movs	r3, #61	; 0x3d
   13f22:	18fb      	adds	r3, r7, r3
   13f24:	781b      	ldrb	r3, [r3, #0]
   13f26:	2b4f      	cmp	r3, #79	; 0x4f
   13f28:	d903      	bls.n	13f32 <vHydr8Task+0xea>
					pumpON=0;
   13f2a:	233e      	movs	r3, #62	; 0x3e
   13f2c:	18fb      	adds	r3, r7, r3
   13f2e:	2200      	movs	r2, #0
   13f30:	701a      	strb	r2, [r3, #0]
				}
				
				if((pumpON==1)&&(masterControl==1)){
   13f32:	233e      	movs	r3, #62	; 0x3e
   13f34:	18fb      	adds	r3, r7, r3
   13f36:	781b      	ldrb	r3, [r3, #0]
   13f38:	2b01      	cmp	r3, #1
   13f3a:	d111      	bne.n	13f60 <vHydr8Task+0x118>
   13f3c:	4b4a      	ldr	r3, [pc, #296]	; (14068 <vHydr8Task+0x220>)
   13f3e:	781b      	ldrb	r3, [r3, #0]
   13f40:	2b01      	cmp	r3, #1
   13f42:	d10d      	bne.n	13f60 <vHydr8Task+0x118>
					port_pin_set_output_level(PIN_PB02, true);
   13f44:	2101      	movs	r1, #1
   13f46:	2022      	movs	r0, #34	; 0x22
   13f48:	4b48      	ldr	r3, [pc, #288]	; (1406c <vHydr8Task+0x224>)
   13f4a:	4798      	blx	r3
					pumpLedData.pumpLedState = 1;
   13f4c:	2314      	movs	r3, #20
   13f4e:	18fb      	adds	r3, r7, r3
   13f50:	2201      	movs	r2, #1
   13f52:	701a      	strb	r2, [r3, #0]
					WifiAddHydr8PumpLedToQueue(&pumpLedData);
   13f54:	2314      	movs	r3, #20
   13f56:	18fb      	adds	r3, r7, r3
   13f58:	0018      	movs	r0, r3
   13f5a:	4b45      	ldr	r3, [pc, #276]	; (14070 <vHydr8Task+0x228>)
   13f5c:	4798      	blx	r3
   13f5e:	e039      	b.n	13fd4 <vHydr8Task+0x18c>
				}
				else{
					port_pin_set_output_level(PIN_PB02, false);
   13f60:	2100      	movs	r1, #0
   13f62:	2022      	movs	r0, #34	; 0x22
   13f64:	4b41      	ldr	r3, [pc, #260]	; (1406c <vHydr8Task+0x224>)
   13f66:	4798      	blx	r3
						if(wlPercent<waterLevelPrevious){
   13f68:	233d      	movs	r3, #61	; 0x3d
   13f6a:	18fa      	adds	r2, r7, r3
   13f6c:	233c      	movs	r3, #60	; 0x3c
   13f6e:	18fb      	adds	r3, r7, r3
   13f70:	7812      	ldrb	r2, [r2, #0]
   13f72:	781b      	ldrb	r3, [r3, #0]
   13f74:	429a      	cmp	r2, r3
   13f76:	d213      	bcs.n	13fa0 <vHydr8Task+0x158>
							volume = volume + (waterLevelPrevious-wlPercent)*WATER_VOLUME_APPROX;
   13f78:	233c      	movs	r3, #60	; 0x3c
   13f7a:	18fb      	adds	r3, r7, r3
   13f7c:	781a      	ldrb	r2, [r3, #0]
   13f7e:	233d      	movs	r3, #61	; 0x3d
   13f80:	18fb      	adds	r3, r7, r3
   13f82:	781b      	ldrb	r3, [r3, #0]
   13f84:	1ad3      	subs	r3, r2, r3
   13f86:	b29b      	uxth	r3, r3
   13f88:	1c1a      	adds	r2, r3, #0
   13f8a:	0112      	lsls	r2, r2, #4
   13f8c:	1ad3      	subs	r3, r2, r3
   13f8e:	18db      	adds	r3, r3, r3
   13f90:	b299      	uxth	r1, r3
   13f92:	233a      	movs	r3, #58	; 0x3a
   13f94:	18fb      	adds	r3, r7, r3
   13f96:	223a      	movs	r2, #58	; 0x3a
   13f98:	18ba      	adds	r2, r7, r2
   13f9a:	8812      	ldrh	r2, [r2, #0]
   13f9c:	188a      	adds	r2, r1, r2
   13f9e:	801a      	strh	r2, [r3, #0]
						}
					volData.volumeData = volume;
   13fa0:	230c      	movs	r3, #12
   13fa2:	18fb      	adds	r3, r7, r3
   13fa4:	223a      	movs	r2, #58	; 0x3a
   13fa6:	18ba      	adds	r2, r7, r2
   13fa8:	8812      	ldrh	r2, [r2, #0]
   13faa:	801a      	strh	r2, [r3, #0]
					WifiAddHydr8VolumeToQueue(&volData);
   13fac:	230c      	movs	r3, #12
   13fae:	18fb      	adds	r3, r7, r3
   13fb0:	0018      	movs	r0, r3
   13fb2:	4b30      	ldr	r3, [pc, #192]	; (14074 <vHydr8Task+0x22c>)
   13fb4:	4798      	blx	r3
					waterLevelPrevious = wlPercent;
   13fb6:	233c      	movs	r3, #60	; 0x3c
   13fb8:	18fb      	adds	r3, r7, r3
   13fba:	223d      	movs	r2, #61	; 0x3d
   13fbc:	18ba      	adds	r2, r7, r2
   13fbe:	7812      	ldrb	r2, [r2, #0]
   13fc0:	701a      	strb	r2, [r3, #0]
					pumpLedData.pumpLedState = 0;
   13fc2:	2314      	movs	r3, #20
   13fc4:	18fb      	adds	r3, r7, r3
   13fc6:	2200      	movs	r2, #0
   13fc8:	701a      	strb	r2, [r3, #0]
					WifiAddHydr8PumpLedToQueue(&pumpLedData);
   13fca:	2314      	movs	r3, #20
   13fcc:	18fb      	adds	r3, r7, r3
   13fce:	0018      	movs	r0, r3
   13fd0:	4b27      	ldr	r3, [pc, #156]	; (14070 <vHydr8Task+0x228>)
   13fd2:	4798      	blx	r3
				}
				hydr8WaterData.waterLevel = wlPercent;
   13fd4:	231c      	movs	r3, #28
   13fd6:	18fb      	adds	r3, r7, r3
   13fd8:	223d      	movs	r2, #61	; 0x3d
   13fda:	18ba      	adds	r2, r7, r2
   13fdc:	7812      	ldrb	r2, [r2, #0]
   13fde:	701a      	strb	r2, [r3, #0]
				WifiAddHydr8WLDataToQueue(&hydr8WaterData);
   13fe0:	231c      	movs	r3, #28
   13fe2:	18fb      	adds	r3, r7, r3
   13fe4:	0018      	movs	r0, r3
   13fe6:	4b24      	ldr	r3, [pc, #144]	; (14078 <vHydr8Task+0x230>)
   13fe8:	4798      	blx	r3
				vTaskDelay(500);
   13fea:	23fa      	movs	r3, #250	; 0xfa
   13fec:	005b      	lsls	r3, r3, #1
   13fee:	0018      	movs	r0, r3
   13ff0:	4b22      	ldr	r3, [pc, #136]	; (1407c <vHydr8Task+0x234>)
   13ff2:	4798      	blx	r3
				countIn++;
   13ff4:	233f      	movs	r3, #63	; 0x3f
   13ff6:	18fb      	adds	r3, r7, r3
   13ff8:	781a      	ldrb	r2, [r3, #0]
   13ffa:	233f      	movs	r3, #63	; 0x3f
   13ffc:	18fb      	adds	r3, r7, r3
   13ffe:	3201      	adds	r2, #1
   14000:	701a      	strb	r2, [r3, #0]
			while(countIn <= PUMP_LIM){
   14002:	233f      	movs	r3, #63	; 0x3f
   14004:	18fb      	adds	r3, r7, r3
   14006:	781b      	ldrb	r3, [r3, #0]
   14008:	2b0a      	cmp	r3, #10
   1400a:	d800      	bhi.n	1400e <vHydr8Task+0x1c6>
   1400c:	e764      	b.n	13ed8 <vHydr8Task+0x90>
   1400e:	e741      	b.n	13e94 <vHydr8Task+0x4c>
			}
		}
		else{
			port_pin_set_output_level(PIN_PB02, false);
   14010:	2100      	movs	r1, #0
   14012:	2022      	movs	r0, #34	; 0x22
   14014:	4b15      	ldr	r3, [pc, #84]	; (1406c <vHydr8Task+0x224>)
   14016:	4798      	blx	r3
			hydr8WaterData.waterLevel = wlPercent;
   14018:	231c      	movs	r3, #28
   1401a:	18fb      	adds	r3, r7, r3
   1401c:	223d      	movs	r2, #61	; 0x3d
   1401e:	18ba      	adds	r2, r7, r2
   14020:	7812      	ldrb	r2, [r2, #0]
   14022:	701a      	strb	r2, [r3, #0]
			WifiAddHydr8WLDataToQueue(&hydr8WaterData);
   14024:	231c      	movs	r3, #28
   14026:	18fb      	adds	r3, r7, r3
   14028:	0018      	movs	r0, r3
   1402a:	4b13      	ldr	r3, [pc, #76]	; (14078 <vHydr8Task+0x230>)
   1402c:	4798      	blx	r3
			tdsLedData.tdsLedState=1;
   1402e:	2310      	movs	r3, #16
   14030:	18fb      	adds	r3, r7, r3
   14032:	2201      	movs	r2, #1
   14034:	701a      	strb	r2, [r3, #0]
			WifiAddHydr8TdsLedToQueue(&tdsLedData);
   14036:	2310      	movs	r3, #16
   14038:	18fb      	adds	r3, r7, r3
   1403a:	0018      	movs	r0, r3
   1403c:	4b07      	ldr	r3, [pc, #28]	; (1405c <vHydr8Task+0x214>)
   1403e:	4798      	blx	r3
	while(1){
   14040:	e728      	b.n	13e94 <vHydr8Task+0x4c>
   14042:	46c0      	nop			; (mov r8, r8)
   14044:	00014d15 	.word	0x00014d15
   14048:	00014ac1 	.word	0x00014ac1
   1404c:	00032251 	.word	0x00032251
   14050:	00016865 	.word	0x00016865
   14054:	000321ad 	.word	0x000321ad
   14058:	43480000 	.word	0x43480000
   1405c:	000168e9 	.word	0x000168e9
   14060:	0003431b 	.word	0x0003431b
   14064:	00014e4d 	.word	0x00014e4d
   14068:	20000014 	.word	0x20000014
   1406c:	00013df5 	.word	0x00013df5
   14070:	00016891 	.word	0x00016891
   14074:	000168bd 	.word	0x000168bd
   14078:	00016839 	.word	0x00016839
   1407c:	0001b551 	.word	0x0001b551

00014080 <system_interrupt_enable>:
{
   14080:	b580      	push	{r7, lr}
   14082:	b082      	sub	sp, #8
   14084:	af00      	add	r7, sp, #0
   14086:	0002      	movs	r2, r0
   14088:	1dfb      	adds	r3, r7, #7
   1408a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1408c:	4b06      	ldr	r3, [pc, #24]	; (140a8 <system_interrupt_enable+0x28>)
   1408e:	1dfa      	adds	r2, r7, #7
   14090:	7812      	ldrb	r2, [r2, #0]
   14092:	0011      	movs	r1, r2
   14094:	221f      	movs	r2, #31
   14096:	400a      	ands	r2, r1
   14098:	2101      	movs	r1, #1
   1409a:	4091      	lsls	r1, r2
   1409c:	000a      	movs	r2, r1
   1409e:	601a      	str	r2, [r3, #0]
}
   140a0:	46c0      	nop			; (mov r8, r8)
   140a2:	46bd      	mov	sp, r7
   140a4:	b002      	add	sp, #8
   140a6:	bd80      	pop	{r7, pc}
   140a8:	e000e100 	.word	0xe000e100

000140ac <i2c_master_is_syncing>:
{
   140ac:	b580      	push	{r7, lr}
   140ae:	b084      	sub	sp, #16
   140b0:	af00      	add	r7, sp, #0
   140b2:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   140b4:	687b      	ldr	r3, [r7, #4]
   140b6:	681b      	ldr	r3, [r3, #0]
   140b8:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   140ba:	68fb      	ldr	r3, [r7, #12]
   140bc:	69db      	ldr	r3, [r3, #28]
   140be:	2207      	movs	r2, #7
   140c0:	4013      	ands	r3, r2
   140c2:	1e5a      	subs	r2, r3, #1
   140c4:	4193      	sbcs	r3, r2
   140c6:	b2db      	uxtb	r3, r3
}
   140c8:	0018      	movs	r0, r3
   140ca:	46bd      	mov	sp, r7
   140cc:	b004      	add	sp, #16
   140ce:	bd80      	pop	{r7, pc}

000140d0 <_i2c_master_wait_for_sync>:
{
   140d0:	b580      	push	{r7, lr}
   140d2:	b082      	sub	sp, #8
   140d4:	af00      	add	r7, sp, #0
   140d6:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   140d8:	46c0      	nop			; (mov r8, r8)
   140da:	687b      	ldr	r3, [r7, #4]
   140dc:	0018      	movs	r0, r3
   140de:	4b04      	ldr	r3, [pc, #16]	; (140f0 <_i2c_master_wait_for_sync+0x20>)
   140e0:	4798      	blx	r3
   140e2:	1e03      	subs	r3, r0, #0
   140e4:	d1f9      	bne.n	140da <_i2c_master_wait_for_sync+0xa>
}
   140e6:	46c0      	nop			; (mov r8, r8)
   140e8:	46bd      	mov	sp, r7
   140ea:	b002      	add	sp, #8
   140ec:	bd80      	pop	{r7, pc}
   140ee:	46c0      	nop			; (mov r8, r8)
   140f0:	000140ad 	.word	0x000140ad

000140f4 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   140f4:	b580      	push	{r7, lr}
   140f6:	b082      	sub	sp, #8
   140f8:	af00      	add	r7, sp, #0
   140fa:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   140fc:	687b      	ldr	r3, [r7, #4]
   140fe:	2264      	movs	r2, #100	; 0x64
   14100:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   14102:	687b      	ldr	r3, [r7, #4]
   14104:	4a1b      	ldr	r2, [pc, #108]	; (14174 <i2c_master_get_config_defaults+0x80>)
   14106:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   14108:	687b      	ldr	r3, [r7, #4]
   1410a:	2200      	movs	r2, #0
   1410c:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   1410e:	687b      	ldr	r3, [r7, #4]
   14110:	2200      	movs	r2, #0
   14112:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   14114:	687b      	ldr	r3, [r7, #4]
   14116:	2200      	movs	r2, #0
   14118:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   1411a:	687b      	ldr	r3, [r7, #4]
   1411c:	2280      	movs	r2, #128	; 0x80
   1411e:	0392      	lsls	r2, r2, #14
   14120:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   14122:	687b      	ldr	r3, [r7, #4]
   14124:	2201      	movs	r2, #1
   14126:	4252      	negs	r2, r2
   14128:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   1412a:	687b      	ldr	r3, [r7, #4]
   1412c:	2201      	movs	r2, #1
   1412e:	4252      	negs	r2, r2
   14130:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   14132:	687b      	ldr	r3, [r7, #4]
   14134:	2200      	movs	r2, #0
   14136:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   14138:	687b      	ldr	r3, [r7, #4]
   1413a:	2200      	movs	r2, #0
   1413c:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   1413e:	687b      	ldr	r3, [r7, #4]
   14140:	2224      	movs	r2, #36	; 0x24
   14142:	2100      	movs	r1, #0
   14144:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   14146:	687b      	ldr	r3, [r7, #4]
   14148:	2200      	movs	r2, #0
   1414a:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   1414c:	687b      	ldr	r3, [r7, #4]
   1414e:	222c      	movs	r2, #44	; 0x2c
   14150:	2100      	movs	r1, #0
   14152:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   14154:	687b      	ldr	r3, [r7, #4]
   14156:	222d      	movs	r2, #45	; 0x2d
   14158:	2100      	movs	r1, #0
   1415a:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   1415c:	687b      	ldr	r3, [r7, #4]
   1415e:	222e      	movs	r2, #46	; 0x2e
   14160:	2100      	movs	r1, #0
   14162:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   14164:	687b      	ldr	r3, [r7, #4]
   14166:	22d7      	movs	r2, #215	; 0xd7
   14168:	861a      	strh	r2, [r3, #48]	; 0x30
}
   1416a:	46c0      	nop			; (mov r8, r8)
   1416c:	46bd      	mov	sp, r7
   1416e:	b002      	add	sp, #8
   14170:	bd80      	pop	{r7, pc}
   14172:	46c0      	nop			; (mov r8, r8)
   14174:	00000d48 	.word	0x00000d48

00014178 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   14178:	b580      	push	{r7, lr}
   1417a:	b084      	sub	sp, #16
   1417c:	af00      	add	r7, sp, #0
   1417e:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14180:	687b      	ldr	r3, [r7, #4]
   14182:	681b      	ldr	r3, [r3, #0]
   14184:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   14186:	2300      	movs	r3, #0
   14188:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   1418a:	687b      	ldr	r3, [r7, #4]
   1418c:	0018      	movs	r0, r3
   1418e:	4b14      	ldr	r3, [pc, #80]	; (141e0 <i2c_master_enable+0x68>)
   14190:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   14192:	68bb      	ldr	r3, [r7, #8]
   14194:	681b      	ldr	r3, [r3, #0]
   14196:	2202      	movs	r2, #2
   14198:	431a      	orrs	r2, r3
   1419a:	68bb      	ldr	r3, [r7, #8]
   1419c:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1419e:	687b      	ldr	r3, [r7, #4]
   141a0:	681b      	ldr	r3, [r3, #0]
   141a2:	0018      	movs	r0, r3
   141a4:	4b0f      	ldr	r3, [pc, #60]	; (141e4 <i2c_master_enable+0x6c>)
   141a6:	4798      	blx	r3
   141a8:	0003      	movs	r3, r0
   141aa:	0018      	movs	r0, r3
   141ac:	4b0e      	ldr	r3, [pc, #56]	; (141e8 <i2c_master_enable+0x70>)
   141ae:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   141b0:	e00c      	b.n	141cc <i2c_master_enable+0x54>
		timeout_counter++;
   141b2:	68fb      	ldr	r3, [r7, #12]
   141b4:	3301      	adds	r3, #1
   141b6:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   141b8:	687b      	ldr	r3, [r7, #4]
   141ba:	88db      	ldrh	r3, [r3, #6]
   141bc:	001a      	movs	r2, r3
   141be:	68fb      	ldr	r3, [r7, #12]
   141c0:	429a      	cmp	r2, r3
   141c2:	d803      	bhi.n	141cc <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   141c4:	68bb      	ldr	r3, [r7, #8]
   141c6:	2210      	movs	r2, #16
   141c8:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   141ca:	e006      	b.n	141da <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   141cc:	68bb      	ldr	r3, [r7, #8]
   141ce:	8b5b      	ldrh	r3, [r3, #26]
   141d0:	b29b      	uxth	r3, r3
   141d2:	001a      	movs	r2, r3
   141d4:	2310      	movs	r3, #16
   141d6:	4013      	ands	r3, r2
   141d8:	d0eb      	beq.n	141b2 <i2c_master_enable+0x3a>
		}
	}
}
   141da:	46bd      	mov	sp, r7
   141dc:	b004      	add	sp, #16
   141de:	bd80      	pop	{r7, pc}
   141e0:	000140d1 	.word	0x000140d1
   141e4:	00026ab9 	.word	0x00026ab9
   141e8:	00014081 	.word	0x00014081

000141ec <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   141ec:	b580      	push	{r7, lr}
   141ee:	b082      	sub	sp, #8
   141f0:	af00      	add	r7, sp, #0
   141f2:	6078      	str	r0, [r7, #4]
   141f4:	000a      	movs	r2, r1
   141f6:	1cfb      	adds	r3, r7, #3
   141f8:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   141fa:	687b      	ldr	r3, [r7, #4]
   141fc:	7e5b      	ldrb	r3, [r3, #25]
   141fe:	b2db      	uxtb	r3, r3
   14200:	b25a      	sxtb	r2, r3
   14202:	1cfb      	adds	r3, r7, #3
   14204:	781b      	ldrb	r3, [r3, #0]
   14206:	2101      	movs	r1, #1
   14208:	4099      	lsls	r1, r3
   1420a:	000b      	movs	r3, r1
   1420c:	b25b      	sxtb	r3, r3
   1420e:	4313      	orrs	r3, r2
   14210:	b25b      	sxtb	r3, r3
   14212:	b2da      	uxtb	r2, r3
   14214:	687b      	ldr	r3, [r7, #4]
   14216:	765a      	strb	r2, [r3, #25]
}
   14218:	46c0      	nop			; (mov r8, r8)
   1421a:	46bd      	mov	sp, r7
   1421c:	b002      	add	sp, #8
   1421e:	bd80      	pop	{r7, pc}

00014220 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   14220:	b590      	push	{r4, r7, lr}
   14222:	b091      	sub	sp, #68	; 0x44
   14224:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   14226:	2300      	movs	r3, #0
   14228:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   1422a:	233a      	movs	r3, #58	; 0x3a
   1422c:	18fb      	adds	r3, r7, r3
   1422e:	2200      	movs	r2, #0
   14230:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   14232:	1d3b      	adds	r3, r7, #4
   14234:	0018      	movs	r0, r3
   14236:	4b21      	ldr	r3, [pc, #132]	; (142bc <I2cDriverConfigureSensorBus+0x9c>)
   14238:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   1423a:	1d3b      	adds	r3, r7, #4
   1423c:	4a20      	ldr	r2, [pc, #128]	; (142c0 <I2cDriverConfigureSensorBus+0xa0>)
   1423e:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   14240:	1d3b      	adds	r3, r7, #4
   14242:	4a20      	ldr	r2, [pc, #128]	; (142c4 <I2cDriverConfigureSensorBus+0xa4>)
   14244:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   14246:	1d3b      	adds	r3, r7, #4
   14248:	22fa      	movs	r2, #250	; 0xfa
   1424a:	0092      	lsls	r2, r2, #2
   1424c:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   1424e:	233b      	movs	r3, #59	; 0x3b
   14250:	18fb      	adds	r3, r7, r3
   14252:	2203      	movs	r2, #3
   14254:	701a      	strb	r2, [r3, #0]
   14256:	e01e      	b.n	14296 <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   14258:	233a      	movs	r3, #58	; 0x3a
   1425a:	18fc      	adds	r4, r7, r3
   1425c:	1d3a      	adds	r2, r7, #4
   1425e:	491a      	ldr	r1, [pc, #104]	; (142c8 <I2cDriverConfigureSensorBus+0xa8>)
   14260:	4b1a      	ldr	r3, [pc, #104]	; (142cc <I2cDriverConfigureSensorBus+0xac>)
   14262:	0018      	movs	r0, r3
   14264:	4b1a      	ldr	r3, [pc, #104]	; (142d0 <I2cDriverConfigureSensorBus+0xb0>)
   14266:	4798      	blx	r3
   14268:	0003      	movs	r3, r0
   1426a:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   1426c:	233a      	movs	r3, #58	; 0x3a
   1426e:	18fb      	adds	r3, r7, r3
   14270:	781b      	ldrb	r3, [r3, #0]
   14272:	2b00      	cmp	r3, #0
   14274:	d104      	bne.n	14280 <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   14276:	233a      	movs	r3, #58	; 0x3a
   14278:	18fb      	adds	r3, r7, r3
   1427a:	781b      	ldrb	r3, [r3, #0]
   1427c:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   1427e:	e00f      	b.n	142a0 <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   14280:	4b12      	ldr	r3, [pc, #72]	; (142cc <I2cDriverConfigureSensorBus+0xac>)
   14282:	0018      	movs	r0, r3
   14284:	4b13      	ldr	r3, [pc, #76]	; (142d4 <I2cDriverConfigureSensorBus+0xb4>)
   14286:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   14288:	233b      	movs	r3, #59	; 0x3b
   1428a:	18fb      	adds	r3, r7, r3
   1428c:	781a      	ldrb	r2, [r3, #0]
   1428e:	233b      	movs	r3, #59	; 0x3b
   14290:	18fb      	adds	r3, r7, r3
   14292:	3a01      	subs	r2, #1
   14294:	701a      	strb	r2, [r3, #0]
   14296:	233b      	movs	r3, #59	; 0x3b
   14298:	18fb      	adds	r3, r7, r3
   1429a:	781b      	ldrb	r3, [r3, #0]
   1429c:	2b00      	cmp	r3, #0
   1429e:	d1db      	bne.n	14258 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   142a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   142a2:	2b00      	cmp	r3, #0
   142a4:	d104      	bne.n	142b0 <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   142a6:	4b09      	ldr	r3, [pc, #36]	; (142cc <I2cDriverConfigureSensorBus+0xac>)
   142a8:	0018      	movs	r0, r3
   142aa:	4b0b      	ldr	r3, [pc, #44]	; (142d8 <I2cDriverConfigureSensorBus+0xb8>)
   142ac:	4798      	blx	r3
   142ae:	e000      	b.n	142b2 <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   142b0:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   142b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   142b4:	0018      	movs	r0, r3
   142b6:	46bd      	mov	sp, r7
   142b8:	b011      	add	sp, #68	; 0x44
   142ba:	bd90      	pop	{r4, r7, pc}
   142bc:	000140f5 	.word	0x000140f5
   142c0:	00080002 	.word	0x00080002
   142c4:	00090002 	.word	0x00090002
   142c8:	42000800 	.word	0x42000800
   142cc:	20004618 	.word	0x20004618
   142d0:	00016ed9 	.word	0x00016ed9
   142d4:	0001700d 	.word	0x0001700d
   142d8:	00014179 	.word	0x00014179

000142dc <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   142dc:	b580      	push	{r7, lr}
   142de:	b084      	sub	sp, #16
   142e0:	af00      	add	r7, sp, #0
   142e2:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   142e4:	4b0e      	ldr	r3, [pc, #56]	; (14320 <I2cSensorsTxComplete+0x44>)
   142e6:	2200      	movs	r2, #0
   142e8:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   142ea:	4b0d      	ldr	r3, [pc, #52]	; (14320 <I2cSensorsTxComplete+0x44>)
   142ec:	2201      	movs	r2, #1
   142ee:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   142f0:	2300      	movs	r3, #0
   142f2:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   142f4:	4b0b      	ldr	r3, [pc, #44]	; (14324 <I2cSensorsTxComplete+0x48>)
   142f6:	681b      	ldr	r3, [r3, #0]
   142f8:	220c      	movs	r2, #12
   142fa:	18ba      	adds	r2, r7, r2
   142fc:	0011      	movs	r1, r2
   142fe:	0018      	movs	r0, r3
   14300:	4b09      	ldr	r3, [pc, #36]	; (14328 <I2cSensorsTxComplete+0x4c>)
   14302:	4798      	blx	r3
    sensorTransmitError = false;
   14304:	4b09      	ldr	r3, [pc, #36]	; (1432c <I2cSensorsTxComplete+0x50>)
   14306:	2200      	movs	r2, #0
   14308:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   1430a:	68fb      	ldr	r3, [r7, #12]
   1430c:	2b00      	cmp	r3, #0
   1430e:	d003      	beq.n	14318 <I2cSensorsTxComplete+0x3c>
   14310:	4b07      	ldr	r3, [pc, #28]	; (14330 <I2cSensorsTxComplete+0x54>)
   14312:	2280      	movs	r2, #128	; 0x80
   14314:	0552      	lsls	r2, r2, #21
   14316:	601a      	str	r2, [r3, #0]
}
   14318:	46c0      	nop			; (mov r8, r8)
   1431a:	46bd      	mov	sp, r7
   1431c:	b004      	add	sp, #16
   1431e:	bd80      	pop	{r7, pc}
   14320:	20000460 	.word	0x20000460
   14324:	20004640 	.word	0x20004640
   14328:	0001a175 	.word	0x0001a175
   1432c:	2000045c 	.word	0x2000045c
   14330:	e000ed04 	.word	0xe000ed04

00014334 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   14334:	b580      	push	{r7, lr}
   14336:	b084      	sub	sp, #16
   14338:	af00      	add	r7, sp, #0
   1433a:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   1433c:	4b0e      	ldr	r3, [pc, #56]	; (14378 <I2cSensorsRxComplete+0x44>)
   1433e:	2200      	movs	r2, #0
   14340:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   14342:	4b0d      	ldr	r3, [pc, #52]	; (14378 <I2cSensorsRxComplete+0x44>)
   14344:	2201      	movs	r2, #1
   14346:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14348:	2300      	movs	r3, #0
   1434a:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   1434c:	4b0b      	ldr	r3, [pc, #44]	; (1437c <I2cSensorsRxComplete+0x48>)
   1434e:	681b      	ldr	r3, [r3, #0]
   14350:	220c      	movs	r2, #12
   14352:	18ba      	adds	r2, r7, r2
   14354:	0011      	movs	r1, r2
   14356:	0018      	movs	r0, r3
   14358:	4b09      	ldr	r3, [pc, #36]	; (14380 <I2cSensorsRxComplete+0x4c>)
   1435a:	4798      	blx	r3
    sensorTransmitError = false;
   1435c:	4b09      	ldr	r3, [pc, #36]	; (14384 <I2cSensorsRxComplete+0x50>)
   1435e:	2200      	movs	r2, #0
   14360:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14362:	68fb      	ldr	r3, [r7, #12]
   14364:	2b00      	cmp	r3, #0
   14366:	d003      	beq.n	14370 <I2cSensorsRxComplete+0x3c>
   14368:	4b07      	ldr	r3, [pc, #28]	; (14388 <I2cSensorsRxComplete+0x54>)
   1436a:	2280      	movs	r2, #128	; 0x80
   1436c:	0552      	lsls	r2, r2, #21
   1436e:	601a      	str	r2, [r3, #0]
}
   14370:	46c0      	nop			; (mov r8, r8)
   14372:	46bd      	mov	sp, r7
   14374:	b004      	add	sp, #16
   14376:	bd80      	pop	{r7, pc}
   14378:	20000460 	.word	0x20000460
   1437c:	20004640 	.word	0x20004640
   14380:	0001a175 	.word	0x0001a175
   14384:	2000045c 	.word	0x2000045c
   14388:	e000ed04 	.word	0xe000ed04

0001438c <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   1438c:	b580      	push	{r7, lr}
   1438e:	b084      	sub	sp, #16
   14390:	af00      	add	r7, sp, #0
   14392:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14394:	4b0e      	ldr	r3, [pc, #56]	; (143d0 <I2cSensorsError+0x44>)
   14396:	2200      	movs	r2, #0
   14398:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   1439a:	4b0d      	ldr	r3, [pc, #52]	; (143d0 <I2cSensorsError+0x44>)
   1439c:	2201      	movs	r2, #1
   1439e:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   143a0:	2300      	movs	r3, #0
   143a2:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   143a4:	4b0b      	ldr	r3, [pc, #44]	; (143d4 <I2cSensorsError+0x48>)
   143a6:	681b      	ldr	r3, [r3, #0]
   143a8:	220c      	movs	r2, #12
   143aa:	18ba      	adds	r2, r7, r2
   143ac:	0011      	movs	r1, r2
   143ae:	0018      	movs	r0, r3
   143b0:	4b09      	ldr	r3, [pc, #36]	; (143d8 <I2cSensorsError+0x4c>)
   143b2:	4798      	blx	r3
    sensorTransmitError = true;
   143b4:	4b09      	ldr	r3, [pc, #36]	; (143dc <I2cSensorsError+0x50>)
   143b6:	2201      	movs	r2, #1
   143b8:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   143ba:	68fb      	ldr	r3, [r7, #12]
   143bc:	2b00      	cmp	r3, #0
   143be:	d003      	beq.n	143c8 <I2cSensorsError+0x3c>
   143c0:	4b07      	ldr	r3, [pc, #28]	; (143e0 <I2cSensorsError+0x54>)
   143c2:	2280      	movs	r2, #128	; 0x80
   143c4:	0552      	lsls	r2, r2, #21
   143c6:	601a      	str	r2, [r3, #0]
}
   143c8:	46c0      	nop			; (mov r8, r8)
   143ca:	46bd      	mov	sp, r7
   143cc:	b004      	add	sp, #16
   143ce:	bd80      	pop	{r7, pc}
   143d0:	20000460 	.word	0x20000460
   143d4:	20004640 	.word	0x20004640
   143d8:	0001a175 	.word	0x0001a175
   143dc:	2000045c 	.word	0x2000045c
   143e0:	e000ed04 	.word	0xe000ed04

000143e4 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   143e4:	b580      	push	{r7, lr}
   143e6:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   143e8:	4911      	ldr	r1, [pc, #68]	; (14430 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   143ea:	4b12      	ldr	r3, [pc, #72]	; (14434 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   143ec:	2200      	movs	r2, #0
   143ee:	0018      	movs	r0, r3
   143f0:	4b11      	ldr	r3, [pc, #68]	; (14438 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   143f2:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   143f4:	4b0f      	ldr	r3, [pc, #60]	; (14434 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   143f6:	2100      	movs	r1, #0
   143f8:	0018      	movs	r0, r3
   143fa:	4b10      	ldr	r3, [pc, #64]	; (1443c <I2cDriverRegisterSensorBusCallbacks+0x58>)
   143fc:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   143fe:	4910      	ldr	r1, [pc, #64]	; (14440 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   14400:	4b0c      	ldr	r3, [pc, #48]	; (14434 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14402:	2201      	movs	r2, #1
   14404:	0018      	movs	r0, r3
   14406:	4b0c      	ldr	r3, [pc, #48]	; (14438 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14408:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   1440a:	4b0a      	ldr	r3, [pc, #40]	; (14434 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1440c:	2101      	movs	r1, #1
   1440e:	0018      	movs	r0, r3
   14410:	4b0a      	ldr	r3, [pc, #40]	; (1443c <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14412:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   14414:	490b      	ldr	r1, [pc, #44]	; (14444 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   14416:	4b07      	ldr	r3, [pc, #28]	; (14434 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14418:	2202      	movs	r2, #2
   1441a:	0018      	movs	r0, r3
   1441c:	4b06      	ldr	r3, [pc, #24]	; (14438 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   1441e:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   14420:	4b04      	ldr	r3, [pc, #16]	; (14434 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14422:	2102      	movs	r1, #2
   14424:	0018      	movs	r0, r3
   14426:	4b05      	ldr	r3, [pc, #20]	; (1443c <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14428:	4798      	blx	r3
}
   1442a:	46c0      	nop			; (mov r8, r8)
   1442c:	46bd      	mov	sp, r7
   1442e:	bd80      	pop	{r7, pc}
   14430:	000142dd 	.word	0x000142dd
   14434:	20004618 	.word	0x20004618
   14438:	00013151 	.word	0x00013151
   1443c:	000141ed 	.word	0x000141ed
   14440:	00014335 	.word	0x00014335
   14444:	0001438d 	.word	0x0001438d

00014448 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   14448:	b580      	push	{r7, lr}
   1444a:	b082      	sub	sp, #8
   1444c:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   1444e:	2300      	movs	r3, #0
   14450:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   14452:	4b14      	ldr	r3, [pc, #80]	; (144a4 <I2cInitializeDriver+0x5c>)
   14454:	4798      	blx	r3
   14456:	0003      	movs	r3, r0
   14458:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   1445a:	687b      	ldr	r3, [r7, #4]
   1445c:	2b00      	cmp	r3, #0
   1445e:	d11a      	bne.n	14496 <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   14460:	4b11      	ldr	r3, [pc, #68]	; (144a8 <I2cInitializeDriver+0x60>)
   14462:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   14464:	2001      	movs	r0, #1
   14466:	4b11      	ldr	r3, [pc, #68]	; (144ac <I2cInitializeDriver+0x64>)
   14468:	4798      	blx	r3
   1446a:	0002      	movs	r2, r0
   1446c:	4b10      	ldr	r3, [pc, #64]	; (144b0 <I2cInitializeDriver+0x68>)
   1446e:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   14470:	2203      	movs	r2, #3
   14472:	2100      	movs	r1, #0
   14474:	2001      	movs	r0, #1
   14476:	4b0f      	ldr	r3, [pc, #60]	; (144b4 <I2cInitializeDriver+0x6c>)
   14478:	4798      	blx	r3
   1447a:	0002      	movs	r2, r0
   1447c:	4b0e      	ldr	r3, [pc, #56]	; (144b8 <I2cInitializeDriver+0x70>)
   1447e:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   14480:	4b0b      	ldr	r3, [pc, #44]	; (144b0 <I2cInitializeDriver+0x68>)
   14482:	681b      	ldr	r3, [r3, #0]
   14484:	2b00      	cmp	r3, #0
   14486:	d003      	beq.n	14490 <I2cInitializeDriver+0x48>
   14488:	4b0b      	ldr	r3, [pc, #44]	; (144b8 <I2cInitializeDriver+0x70>)
   1448a:	681b      	ldr	r3, [r3, #0]
   1448c:	2b00      	cmp	r3, #0
   1448e:	d103      	bne.n	14498 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   14490:	2306      	movs	r3, #6
   14492:	607b      	str	r3, [r7, #4]
        goto exit;
   14494:	e000      	b.n	14498 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   14496:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14498:	687b      	ldr	r3, [r7, #4]
}
   1449a:	0018      	movs	r0, r3
   1449c:	46bd      	mov	sp, r7
   1449e:	b002      	add	sp, #8
   144a0:	bd80      	pop	{r7, pc}
   144a2:	46c0      	nop			; (mov r8, r8)
   144a4:	00014221 	.word	0x00014221
   144a8:	000143e5 	.word	0x000143e5
   144ac:	00019aad 	.word	0x00019aad
   144b0:	20004614 	.word	0x20004614
   144b4:	00019845 	.word	0x00019845
   144b8:	20004640 	.word	0x20004640

000144bc <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   144bc:	b590      	push	{r4, r7, lr}
   144be:	b085      	sub	sp, #20
   144c0:	af00      	add	r7, sp, #0
   144c2:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   144c4:	2300      	movs	r3, #0
   144c6:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   144c8:	687b      	ldr	r3, [r7, #4]
   144ca:	2b00      	cmp	r3, #0
   144cc:	d003      	beq.n	144d6 <I2cWriteData+0x1a>
   144ce:	687b      	ldr	r3, [r7, #4]
   144d0:	685b      	ldr	r3, [r3, #4]
   144d2:	2b00      	cmp	r3, #0
   144d4:	d103      	bne.n	144de <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   144d6:	2308      	movs	r3, #8
   144d8:	425b      	negs	r3, r3
   144da:	60fb      	str	r3, [r7, #12]
        goto exit;
   144dc:	e01f      	b.n	1451e <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   144de:	687b      	ldr	r3, [r7, #4]
   144e0:	781b      	ldrb	r3, [r3, #0]
   144e2:	b29a      	uxth	r2, r3
   144e4:	4b10      	ldr	r3, [pc, #64]	; (14528 <I2cWriteData+0x6c>)
   144e6:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   144e8:	687b      	ldr	r3, [r7, #4]
   144ea:	685a      	ldr	r2, [r3, #4]
   144ec:	4b0e      	ldr	r3, [pc, #56]	; (14528 <I2cWriteData+0x6c>)
   144ee:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   144f0:	687b      	ldr	r3, [r7, #4]
   144f2:	89da      	ldrh	r2, [r3, #14]
   144f4:	4b0c      	ldr	r3, [pc, #48]	; (14528 <I2cWriteData+0x6c>)
   144f6:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   144f8:	230b      	movs	r3, #11
   144fa:	18fc      	adds	r4, r7, r3
   144fc:	4a0a      	ldr	r2, [pc, #40]	; (14528 <I2cWriteData+0x6c>)
   144fe:	4b0b      	ldr	r3, [pc, #44]	; (1452c <I2cWriteData+0x70>)
   14500:	0011      	movs	r1, r2
   14502:	0018      	movs	r0, r3
   14504:	4b0a      	ldr	r3, [pc, #40]	; (14530 <I2cWriteData+0x74>)
   14506:	4798      	blx	r3
   14508:	0003      	movs	r3, r0
   1450a:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   1450c:	230b      	movs	r3, #11
   1450e:	18fb      	adds	r3, r7, r3
   14510:	781b      	ldrb	r3, [r3, #0]
   14512:	2b00      	cmp	r3, #0
   14514:	d003      	beq.n	1451e <I2cWriteData+0x62>
        error = ERROR_IO;
   14516:	2306      	movs	r3, #6
   14518:	425b      	negs	r3, r3
   1451a:	60fb      	str	r3, [r7, #12]
        goto exit;
   1451c:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   1451e:	68fb      	ldr	r3, [r7, #12]
}
   14520:	0018      	movs	r0, r3
   14522:	46bd      	mov	sp, r7
   14524:	b005      	add	sp, #20
   14526:	bd90      	pop	{r4, r7, pc}
   14528:	20004644 	.word	0x20004644
   1452c:	20004618 	.word	0x20004618
   14530:	000133d5 	.word	0x000133d5

00014534 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   14534:	b590      	push	{r4, r7, lr}
   14536:	b085      	sub	sp, #20
   14538:	af00      	add	r7, sp, #0
   1453a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   1453c:	2300      	movs	r3, #0
   1453e:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   14540:	687b      	ldr	r3, [r7, #4]
   14542:	2b00      	cmp	r3, #0
   14544:	d003      	beq.n	1454e <I2cReadData+0x1a>
   14546:	687b      	ldr	r3, [r7, #4]
   14548:	685b      	ldr	r3, [r3, #4]
   1454a:	2b00      	cmp	r3, #0
   1454c:	d103      	bne.n	14556 <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   1454e:	2308      	movs	r3, #8
   14550:	425b      	negs	r3, r3
   14552:	60fb      	str	r3, [r7, #12]
        goto exit;
   14554:	e01f      	b.n	14596 <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   14556:	687b      	ldr	r3, [r7, #4]
   14558:	781b      	ldrb	r3, [r3, #0]
   1455a:	b29a      	uxth	r2, r3
   1455c:	4b10      	ldr	r3, [pc, #64]	; (145a0 <I2cReadData+0x6c>)
   1455e:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   14560:	687b      	ldr	r3, [r7, #4]
   14562:	689a      	ldr	r2, [r3, #8]
   14564:	4b0e      	ldr	r3, [pc, #56]	; (145a0 <I2cReadData+0x6c>)
   14566:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   14568:	687b      	ldr	r3, [r7, #4]
   1456a:	899a      	ldrh	r2, [r3, #12]
   1456c:	4b0c      	ldr	r3, [pc, #48]	; (145a0 <I2cReadData+0x6c>)
   1456e:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   14570:	230b      	movs	r3, #11
   14572:	18fc      	adds	r4, r7, r3
   14574:	4a0a      	ldr	r2, [pc, #40]	; (145a0 <I2cReadData+0x6c>)
   14576:	4b0b      	ldr	r3, [pc, #44]	; (145a4 <I2cReadData+0x70>)
   14578:	0011      	movs	r1, r2
   1457a:	0018      	movs	r0, r3
   1457c:	4b0a      	ldr	r3, [pc, #40]	; (145a8 <I2cReadData+0x74>)
   1457e:	4798      	blx	r3
   14580:	0003      	movs	r3, r0
   14582:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   14584:	230b      	movs	r3, #11
   14586:	18fb      	adds	r3, r7, r3
   14588:	781b      	ldrb	r3, [r3, #0]
   1458a:	2b00      	cmp	r3, #0
   1458c:	d003      	beq.n	14596 <I2cReadData+0x62>
        error = ERROR_IO;
   1458e:	2306      	movs	r3, #6
   14590:	425b      	negs	r3, r3
   14592:	60fb      	str	r3, [r7, #12]
        goto exit;
   14594:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14596:	68fb      	ldr	r3, [r7, #12]
}
   14598:	0018      	movs	r0, r3
   1459a:	46bd      	mov	sp, r7
   1459c:	b005      	add	sp, #20
   1459e:	bd90      	pop	{r4, r7, pc}
   145a0:	20004644 	.word	0x20004644
   145a4:	20004618 	.word	0x20004618
   145a8:	000132f1 	.word	0x000132f1

000145ac <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   145ac:	b590      	push	{r4, r7, lr}
   145ae:	b083      	sub	sp, #12
   145b0:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   145b2:	2300      	movs	r3, #0
   145b4:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   145b6:	4b09      	ldr	r3, [pc, #36]	; (145dc <I2cFreeMutex+0x30>)
   145b8:	6818      	ldr	r0, [r3, #0]
   145ba:	2300      	movs	r3, #0
   145bc:	2200      	movs	r2, #0
   145be:	2100      	movs	r1, #0
   145c0:	4c07      	ldr	r4, [pc, #28]	; (145e0 <I2cFreeMutex+0x34>)
   145c2:	47a0      	blx	r4
   145c4:	0003      	movs	r3, r0
   145c6:	2b01      	cmp	r3, #1
   145c8:	d002      	beq.n	145d0 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   145ca:	2314      	movs	r3, #20
   145cc:	425b      	negs	r3, r3
   145ce:	607b      	str	r3, [r7, #4]
    }
    return error;
   145d0:	687b      	ldr	r3, [r7, #4]
}
   145d2:	0018      	movs	r0, r3
   145d4:	46bd      	mov	sp, r7
   145d6:	b003      	add	sp, #12
   145d8:	bd90      	pop	{r4, r7, pc}
   145da:	46c0      	nop			; (mov r8, r8)
   145dc:	20004614 	.word	0x20004614
   145e0:	00019aed 	.word	0x00019aed

000145e4 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   145e4:	b580      	push	{r7, lr}
   145e6:	b084      	sub	sp, #16
   145e8:	af00      	add	r7, sp, #0
   145ea:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   145ec:	2300      	movs	r3, #0
   145ee:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   145f0:	4b08      	ldr	r3, [pc, #32]	; (14614 <I2cGetMutex+0x30>)
   145f2:	681b      	ldr	r3, [r3, #0]
   145f4:	687a      	ldr	r2, [r7, #4]
   145f6:	0011      	movs	r1, r2
   145f8:	0018      	movs	r0, r3
   145fa:	4b07      	ldr	r3, [pc, #28]	; (14618 <I2cGetMutex+0x34>)
   145fc:	4798      	blx	r3
   145fe:	0003      	movs	r3, r0
   14600:	2b01      	cmp	r3, #1
   14602:	d002      	beq.n	1460a <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   14604:	231d      	movs	r3, #29
   14606:	425b      	negs	r3, r3
   14608:	60fb      	str	r3, [r7, #12]
    }
    return error;
   1460a:	68fb      	ldr	r3, [r7, #12]
}
   1460c:	0018      	movs	r0, r3
   1460e:	46bd      	mov	sp, r7
   14610:	b004      	add	sp, #16
   14612:	bd80      	pop	{r7, pc}
   14614:	20004614 	.word	0x20004614
   14618:	0001a7fd 	.word	0x0001a7fd

0001461c <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   1461c:	b580      	push	{r7, lr}
   1461e:	b084      	sub	sp, #16
   14620:	af00      	add	r7, sp, #0
   14622:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14624:	2300      	movs	r3, #0
   14626:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   14628:	4b04      	ldr	r3, [pc, #16]	; (1463c <I2cGetSemaphoreHandle+0x20>)
   1462a:	681a      	ldr	r2, [r3, #0]
   1462c:	687b      	ldr	r3, [r7, #4]
   1462e:	601a      	str	r2, [r3, #0]
    return error;
   14630:	68fb      	ldr	r3, [r7, #12]
}
   14632:	0018      	movs	r0, r3
   14634:	46bd      	mov	sp, r7
   14636:	b004      	add	sp, #16
   14638:	bd80      	pop	{r7, pc}
   1463a:	46c0      	nop			; (mov r8, r8)
   1463c:	20004640 	.word	0x20004640

00014640 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   14640:	b580      	push	{r7, lr}
   14642:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   14644:	4b02      	ldr	r3, [pc, #8]	; (14650 <I2cGetTaskErrorStatus+0x10>)
   14646:	781b      	ldrb	r3, [r3, #0]
}
   14648:	0018      	movs	r0, r3
   1464a:	46bd      	mov	sp, r7
   1464c:	bd80      	pop	{r7, pc}
   1464e:	46c0      	nop			; (mov r8, r8)
   14650:	2000045c 	.word	0x2000045c

00014654 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   14654:	b580      	push	{r7, lr}
   14656:	b082      	sub	sp, #8
   14658:	af00      	add	r7, sp, #0
   1465a:	0002      	movs	r2, r0
   1465c:	1dfb      	adds	r3, r7, #7
   1465e:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   14660:	4b03      	ldr	r3, [pc, #12]	; (14670 <I2cSetTaskErrorStatus+0x1c>)
   14662:	1dfa      	adds	r2, r7, #7
   14664:	7812      	ldrb	r2, [r2, #0]
   14666:	701a      	strb	r2, [r3, #0]
}
   14668:	46c0      	nop			; (mov r8, r8)
   1466a:	46bd      	mov	sp, r7
   1466c:	b002      	add	sp, #8
   1466e:	bd80      	pop	{r7, pc}
   14670:	2000045c 	.word	0x2000045c

00014674 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   14674:	b580      	push	{r7, lr}
   14676:	b084      	sub	sp, #16
   14678:	af00      	add	r7, sp, #0
   1467a:	6078      	str	r0, [r7, #4]
   1467c:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   1467e:	2300      	movs	r3, #0
   14680:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   14682:	2300      	movs	r3, #0
   14684:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14686:	2396      	movs	r3, #150	; 0x96
   14688:	005b      	lsls	r3, r3, #1
   1468a:	0018      	movs	r0, r3
   1468c:	4b28      	ldr	r3, [pc, #160]	; (14730 <I2cWriteDataWait+0xbc>)
   1468e:	4798      	blx	r3
   14690:	0003      	movs	r3, r0
   14692:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   14694:	68fb      	ldr	r3, [r7, #12]
   14696:	2b00      	cmp	r3, #0
   14698:	d138      	bne.n	1470c <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   1469a:	2308      	movs	r3, #8
   1469c:	18fb      	adds	r3, r7, r3
   1469e:	0018      	movs	r0, r3
   146a0:	4b24      	ldr	r3, [pc, #144]	; (14734 <I2cWriteDataWait+0xc0>)
   146a2:	4798      	blx	r3
   146a4:	0003      	movs	r3, r0
   146a6:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   146a8:	68fb      	ldr	r3, [r7, #12]
   146aa:	2b00      	cmp	r3, #0
   146ac:	d130      	bne.n	14710 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   146ae:	687b      	ldr	r3, [r7, #4]
   146b0:	0018      	movs	r0, r3
   146b2:	4b21      	ldr	r3, [pc, #132]	; (14738 <I2cWriteDataWait+0xc4>)
   146b4:	4798      	blx	r3
   146b6:	0003      	movs	r3, r0
   146b8:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   146ba:	68fb      	ldr	r3, [r7, #12]
   146bc:	2b00      	cmp	r3, #0
   146be:	d12a      	bne.n	14716 <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   146c0:	68bb      	ldr	r3, [r7, #8]
   146c2:	683a      	ldr	r2, [r7, #0]
   146c4:	0011      	movs	r1, r2
   146c6:	0018      	movs	r0, r3
   146c8:	4b1c      	ldr	r3, [pc, #112]	; (1473c <I2cWriteDataWait+0xc8>)
   146ca:	4798      	blx	r3
   146cc:	0003      	movs	r3, r0
   146ce:	2b01      	cmp	r3, #1
   146d0:	d111      	bne.n	146f6 <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   146d2:	4b1b      	ldr	r3, [pc, #108]	; (14740 <I2cWriteDataWait+0xcc>)
   146d4:	4798      	blx	r3
   146d6:	1e03      	subs	r3, r0, #0
   146d8:	d011      	beq.n	146fe <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   146da:	2000      	movs	r0, #0
   146dc:	4b19      	ldr	r3, [pc, #100]	; (14744 <I2cWriteDataWait+0xd0>)
   146de:	4798      	blx	r3
            if (error != ERROR_NONE) {
   146e0:	68fb      	ldr	r3, [r7, #12]
   146e2:	2b00      	cmp	r3, #0
   146e4:	d003      	beq.n	146ee <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   146e6:	2321      	movs	r3, #33	; 0x21
   146e8:	425b      	negs	r3, r3
   146ea:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   146ec:	e014      	b.n	14718 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   146ee:	2303      	movs	r3, #3
   146f0:	425b      	negs	r3, r3
   146f2:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   146f4:	e010      	b.n	14718 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   146f6:	2303      	movs	r3, #3
   146f8:	425b      	negs	r3, r3
   146fa:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   146fc:	e00c      	b.n	14718 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   146fe:	4b12      	ldr	r3, [pc, #72]	; (14748 <I2cWriteDataWait+0xd4>)
   14700:	4798      	blx	r3
   14702:	0002      	movs	r2, r0
   14704:	68fb      	ldr	r3, [r7, #12]
   14706:	4313      	orrs	r3, r2
   14708:	60fb      	str	r3, [r7, #12]
   1470a:	e002      	b.n	14712 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   1470c:	46c0      	nop			; (mov r8, r8)
   1470e:	e000      	b.n	14712 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   14710:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   14712:	68fb      	ldr	r3, [r7, #12]
   14714:	e007      	b.n	14726 <I2cWriteDataWait+0xb2>
        goto exitError0;
   14716:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   14718:	4b0b      	ldr	r3, [pc, #44]	; (14748 <I2cWriteDataWait+0xd4>)
   1471a:	4798      	blx	r3
   1471c:	0002      	movs	r2, r0
   1471e:	68fb      	ldr	r3, [r7, #12]
   14720:	4313      	orrs	r3, r2
   14722:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   14724:	68fb      	ldr	r3, [r7, #12]
}
   14726:	0018      	movs	r0, r3
   14728:	46bd      	mov	sp, r7
   1472a:	b004      	add	sp, #16
   1472c:	bd80      	pop	{r7, pc}
   1472e:	46c0      	nop			; (mov r8, r8)
   14730:	000145e5 	.word	0x000145e5
   14734:	0001461d 	.word	0x0001461d
   14738:	000144bd 	.word	0x000144bd
   1473c:	0001a7fd 	.word	0x0001a7fd
   14740:	00014641 	.word	0x00014641
   14744:	00014655 	.word	0x00014655
   14748:	000145ad 	.word	0x000145ad

0001474c <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   1474c:	b580      	push	{r7, lr}
   1474e:	b086      	sub	sp, #24
   14750:	af00      	add	r7, sp, #0
   14752:	60f8      	str	r0, [r7, #12]
   14754:	60b9      	str	r1, [r7, #8]
   14756:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   14758:	2300      	movs	r3, #0
   1475a:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   1475c:	2300      	movs	r3, #0
   1475e:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14760:	2396      	movs	r3, #150	; 0x96
   14762:	005b      	lsls	r3, r3, #1
   14764:	0018      	movs	r0, r3
   14766:	4b35      	ldr	r3, [pc, #212]	; (1483c <I2cReadDataWait+0xf0>)
   14768:	4798      	blx	r3
   1476a:	0003      	movs	r3, r0
   1476c:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   1476e:	697b      	ldr	r3, [r7, #20]
   14770:	2b00      	cmp	r3, #0
   14772:	d155      	bne.n	14820 <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   14774:	2310      	movs	r3, #16
   14776:	18fb      	adds	r3, r7, r3
   14778:	0018      	movs	r0, r3
   1477a:	4b31      	ldr	r3, [pc, #196]	; (14840 <I2cReadDataWait+0xf4>)
   1477c:	4798      	blx	r3
   1477e:	0003      	movs	r3, r0
   14780:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   14782:	697b      	ldr	r3, [r7, #20]
   14784:	2b00      	cmp	r3, #0
   14786:	d14d      	bne.n	14824 <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   14788:	68fb      	ldr	r3, [r7, #12]
   1478a:	0018      	movs	r0, r3
   1478c:	4b2d      	ldr	r3, [pc, #180]	; (14844 <I2cReadDataWait+0xf8>)
   1478e:	4798      	blx	r3
   14790:	0003      	movs	r3, r0
   14792:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14794:	697b      	ldr	r3, [r7, #20]
   14796:	2b00      	cmp	r3, #0
   14798:	d147      	bne.n	1482a <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   1479a:	693b      	ldr	r3, [r7, #16]
   1479c:	687a      	ldr	r2, [r7, #4]
   1479e:	0011      	movs	r1, r2
   147a0:	0018      	movs	r0, r3
   147a2:	4b29      	ldr	r3, [pc, #164]	; (14848 <I2cReadDataWait+0xfc>)
   147a4:	4798      	blx	r3
   147a6:	0003      	movs	r3, r0
   147a8:	2b01      	cmp	r3, #1
   147aa:	d118      	bne.n	147de <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   147ac:	4b27      	ldr	r3, [pc, #156]	; (1484c <I2cReadDataWait+0x100>)
   147ae:	4798      	blx	r3
   147b0:	1e03      	subs	r3, r0, #0
   147b2:	d006      	beq.n	147c2 <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   147b4:	2000      	movs	r0, #0
   147b6:	4b26      	ldr	r3, [pc, #152]	; (14850 <I2cReadDataWait+0x104>)
   147b8:	4798      	blx	r3
            error = ERROR_ABORTED;
   147ba:	2303      	movs	r3, #3
   147bc:	425b      	negs	r3, r3
   147be:	617b      	str	r3, [r7, #20]
            goto exitError0;
   147c0:	e034      	b.n	1482c <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   147c2:	68bb      	ldr	r3, [r7, #8]
   147c4:	0018      	movs	r0, r3
   147c6:	4b23      	ldr	r3, [pc, #140]	; (14854 <I2cReadDataWait+0x108>)
   147c8:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   147ca:	68fb      	ldr	r3, [r7, #12]
   147cc:	0018      	movs	r0, r3
   147ce:	4b22      	ldr	r3, [pc, #136]	; (14858 <I2cReadDataWait+0x10c>)
   147d0:	4798      	blx	r3
   147d2:	0003      	movs	r3, r0
   147d4:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   147d6:	697b      	ldr	r3, [r7, #20]
   147d8:	2b00      	cmp	r3, #0
   147da:	d004      	beq.n	147e6 <I2cReadDataWait+0x9a>
        goto exitError0;
   147dc:	e026      	b.n	1482c <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   147de:	2303      	movs	r3, #3
   147e0:	425b      	negs	r3, r3
   147e2:	617b      	str	r3, [r7, #20]
        goto exitError0;
   147e4:	e022      	b.n	1482c <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   147e6:	693b      	ldr	r3, [r7, #16]
   147e8:	687a      	ldr	r2, [r7, #4]
   147ea:	0011      	movs	r1, r2
   147ec:	0018      	movs	r0, r3
   147ee:	4b16      	ldr	r3, [pc, #88]	; (14848 <I2cReadDataWait+0xfc>)
   147f0:	4798      	blx	r3
   147f2:	0003      	movs	r3, r0
   147f4:	2b01      	cmp	r3, #1
   147f6:	d10a      	bne.n	1480e <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   147f8:	4b14      	ldr	r3, [pc, #80]	; (1484c <I2cReadDataWait+0x100>)
   147fa:	4798      	blx	r3
   147fc:	1e03      	subs	r3, r0, #0
   147fe:	d00a      	beq.n	14816 <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   14800:	2000      	movs	r0, #0
   14802:	4b13      	ldr	r3, [pc, #76]	; (14850 <I2cReadDataWait+0x104>)
   14804:	4798      	blx	r3
            error = ERROR_ABORTED;
   14806:	2303      	movs	r3, #3
   14808:	425b      	negs	r3, r3
   1480a:	617b      	str	r3, [r7, #20]
            goto exitError0;
   1480c:	e00e      	b.n	1482c <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   1480e:	2303      	movs	r3, #3
   14810:	425b      	negs	r3, r3
   14812:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14814:	e00a      	b.n	1482c <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   14816:	4b11      	ldr	r3, [pc, #68]	; (1485c <I2cReadDataWait+0x110>)
   14818:	4798      	blx	r3
   1481a:	0003      	movs	r3, r0
   1481c:	617b      	str	r3, [r7, #20]
   1481e:	e002      	b.n	14826 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   14820:	46c0      	nop			; (mov r8, r8)
   14822:	e000      	b.n	14826 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   14824:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   14826:	697b      	ldr	r3, [r7, #20]
   14828:	e003      	b.n	14832 <I2cReadDataWait+0xe6>
        goto exitError0;
   1482a:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   1482c:	4b0b      	ldr	r3, [pc, #44]	; (1485c <I2cReadDataWait+0x110>)
   1482e:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   14830:	697b      	ldr	r3, [r7, #20]
}
   14832:	0018      	movs	r0, r3
   14834:	46bd      	mov	sp, r7
   14836:	b006      	add	sp, #24
   14838:	bd80      	pop	{r7, pc}
   1483a:	46c0      	nop			; (mov r8, r8)
   1483c:	000145e5 	.word	0x000145e5
   14840:	0001461d 	.word	0x0001461d
   14844:	000144bd 	.word	0x000144bd
   14848:	0001a7fd 	.word	0x0001a7fd
   1484c:	00014641 	.word	0x00014641
   14850:	00014655 	.word	0x00014655
   14854:	0001b551 	.word	0x0001b551
   14858:	00014535 	.word	0x00014535
   1485c:	000145ad 	.word	0x000145ad

00014860 <I2cPingAddressWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cPingAddressWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   14860:	b580      	push	{r7, lr}
   14862:	b086      	sub	sp, #24
   14864:	af00      	add	r7, sp, #0
   14866:	60f8      	str	r0, [r7, #12]
   14868:	60b9      	str	r1, [r7, #8]
   1486a:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   1486c:	2300      	movs	r3, #0
   1486e:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   14870:	2300      	movs	r3, #0
   14872:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14874:	2396      	movs	r3, #150	; 0x96
   14876:	005b      	lsls	r3, r3, #1
   14878:	0018      	movs	r0, r3
   1487a:	4b24      	ldr	r3, [pc, #144]	; (1490c <I2cPingAddressWait+0xac>)
   1487c:	4798      	blx	r3
   1487e:	0003      	movs	r3, r0
   14880:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   14882:	697b      	ldr	r3, [r7, #20]
   14884:	2b00      	cmp	r3, #0
   14886:	d133      	bne.n	148f0 <I2cPingAddressWait+0x90>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   14888:	2310      	movs	r3, #16
   1488a:	18fb      	adds	r3, r7, r3
   1488c:	0018      	movs	r0, r3
   1488e:	4b20      	ldr	r3, [pc, #128]	; (14910 <I2cPingAddressWait+0xb0>)
   14890:	4798      	blx	r3
   14892:	0003      	movs	r3, r0
   14894:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   14896:	697b      	ldr	r3, [r7, #20]
   14898:	2b00      	cmp	r3, #0
   1489a:	d12b      	bne.n	148f4 <I2cPingAddressWait+0x94>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   1489c:	68fb      	ldr	r3, [r7, #12]
   1489e:	0018      	movs	r0, r3
   148a0:	4b1c      	ldr	r3, [pc, #112]	; (14914 <I2cPingAddressWait+0xb4>)
   148a2:	4798      	blx	r3
   148a4:	0003      	movs	r3, r0
   148a6:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   148a8:	697b      	ldr	r3, [r7, #20]
   148aa:	2b00      	cmp	r3, #0
   148ac:	d125      	bne.n	148fa <I2cPingAddressWait+0x9a>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   148ae:	693b      	ldr	r3, [r7, #16]
   148b0:	687a      	ldr	r2, [r7, #4]
   148b2:	0011      	movs	r1, r2
   148b4:	0018      	movs	r0, r3
   148b6:	4b18      	ldr	r3, [pc, #96]	; (14918 <I2cPingAddressWait+0xb8>)
   148b8:	4798      	blx	r3
   148ba:	0003      	movs	r3, r0
   148bc:	2b01      	cmp	r3, #1
   148be:	d113      	bne.n	148e8 <I2cPingAddressWait+0x88>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   148c0:	4b16      	ldr	r3, [pc, #88]	; (1491c <I2cPingAddressWait+0xbc>)
   148c2:	4798      	blx	r3
   148c4:	1e03      	subs	r3, r0, #0
   148c6:	d006      	beq.n	148d6 <I2cPingAddressWait+0x76>
            I2cSetTaskErrorStatus(false);
   148c8:	2000      	movs	r0, #0
   148ca:	4b15      	ldr	r3, [pc, #84]	; (14920 <I2cPingAddressWait+0xc0>)
   148cc:	4798      	blx	r3
            error = ERROR_ABORTED;
   148ce:	2303      	movs	r3, #3
   148d0:	425b      	negs	r3, r3
   148d2:	617b      	str	r3, [r7, #20]
            goto exitError0;
   148d4:	e012      	b.n	148fc <I2cPingAddressWait+0x9c>
        }
        vTaskDelay(delay);
   148d6:	68bb      	ldr	r3, [r7, #8]
   148d8:	0018      	movs	r0, r3
   148da:	4b12      	ldr	r3, [pc, #72]	; (14924 <I2cPingAddressWait+0xc4>)
   148dc:	4798      	blx	r3
        goto exitError0;
    }


    //---8. Release Mutex
    error = I2cFreeMutex();
   148de:	4b12      	ldr	r3, [pc, #72]	; (14928 <I2cPingAddressWait+0xc8>)
   148e0:	4798      	blx	r3
   148e2:	0003      	movs	r3, r0
   148e4:	617b      	str	r3, [r7, #20]
   148e6:	e006      	b.n	148f6 <I2cPingAddressWait+0x96>
        error = ERR_TIMEOUT;
   148e8:	2303      	movs	r3, #3
   148ea:	425b      	negs	r3, r3
   148ec:	617b      	str	r3, [r7, #20]
        goto exitError0;
   148ee:	e005      	b.n	148fc <I2cPingAddressWait+0x9c>
    if (ERROR_NONE != error) goto exit;
   148f0:	46c0      	nop			; (mov r8, r8)
   148f2:	e000      	b.n	148f6 <I2cPingAddressWait+0x96>
    if (ERROR_NONE != error) goto exit;
   148f4:	46c0      	nop			; (mov r8, r8)
exit:
    return error;
   148f6:	697b      	ldr	r3, [r7, #20]
   148f8:	e003      	b.n	14902 <I2cPingAddressWait+0xa2>
        goto exitError0;
   148fa:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   148fc:	4b0a      	ldr	r3, [pc, #40]	; (14928 <I2cPingAddressWait+0xc8>)
   148fe:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   14900:	697b      	ldr	r3, [r7, #20]
}
   14902:	0018      	movs	r0, r3
   14904:	46bd      	mov	sp, r7
   14906:	b006      	add	sp, #24
   14908:	bd80      	pop	{r7, pc}
   1490a:	46c0      	nop			; (mov r8, r8)
   1490c:	000145e5 	.word	0x000145e5
   14910:	0001461d 	.word	0x0001461d
   14914:	000144bd 	.word	0x000144bd
   14918:	0001a7fd 	.word	0x0001a7fd
   1491c:	00014641 	.word	0x00014641
   14920:	00014655 	.word	0x00014655
   14924:	0001b551 	.word	0x0001b551
   14928:	000145ad 	.word	0x000145ad

0001492c <adc_is_syncing>:
{
   1492c:	b580      	push	{r7, lr}
   1492e:	b084      	sub	sp, #16
   14930:	af00      	add	r7, sp, #0
   14932:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   14934:	687b      	ldr	r3, [r7, #4]
   14936:	681b      	ldr	r3, [r3, #0]
   14938:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   1493a:	68fb      	ldr	r3, [r7, #12]
   1493c:	7e5b      	ldrb	r3, [r3, #25]
   1493e:	b2db      	uxtb	r3, r3
   14940:	b25b      	sxtb	r3, r3
   14942:	2b00      	cmp	r3, #0
   14944:	da01      	bge.n	1494a <adc_is_syncing+0x1e>
		return true;
   14946:	2301      	movs	r3, #1
   14948:	e000      	b.n	1494c <adc_is_syncing+0x20>
	return false;
   1494a:	2300      	movs	r3, #0
}
   1494c:	0018      	movs	r0, r3
   1494e:	46bd      	mov	sp, r7
   14950:	b004      	add	sp, #16
   14952:	bd80      	pop	{r7, pc}

00014954 <adc_get_status>:
{
   14954:	b580      	push	{r7, lr}
   14956:	b086      	sub	sp, #24
   14958:	af00      	add	r7, sp, #0
   1495a:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   1495c:	687b      	ldr	r3, [r7, #4]
   1495e:	681b      	ldr	r3, [r3, #0]
   14960:	613b      	str	r3, [r7, #16]
	uint32_t int_flags = adc_module->INTFLAG.reg;
   14962:	693b      	ldr	r3, [r7, #16]
   14964:	7e1b      	ldrb	r3, [r3, #24]
   14966:	b2db      	uxtb	r3, r3
   14968:	60fb      	str	r3, [r7, #12]
	uint32_t status_flags = 0;
   1496a:	2300      	movs	r3, #0
   1496c:	617b      	str	r3, [r7, #20]
	if (int_flags & ADC_INTFLAG_RESRDY) {
   1496e:	68fb      	ldr	r3, [r7, #12]
   14970:	2201      	movs	r2, #1
   14972:	4013      	ands	r3, r2
   14974:	d003      	beq.n	1497e <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
   14976:	697b      	ldr	r3, [r7, #20]
   14978:	2201      	movs	r2, #1
   1497a:	4313      	orrs	r3, r2
   1497c:	617b      	str	r3, [r7, #20]
	if (int_flags & ADC_INTFLAG_WINMON) {
   1497e:	68fb      	ldr	r3, [r7, #12]
   14980:	2204      	movs	r2, #4
   14982:	4013      	ands	r3, r2
   14984:	d003      	beq.n	1498e <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
   14986:	697b      	ldr	r3, [r7, #20]
   14988:	2202      	movs	r2, #2
   1498a:	4313      	orrs	r3, r2
   1498c:	617b      	str	r3, [r7, #20]
	if (int_flags & ADC_INTFLAG_OVERRUN) {
   1498e:	68fb      	ldr	r3, [r7, #12]
   14990:	2202      	movs	r2, #2
   14992:	4013      	ands	r3, r2
   14994:	d003      	beq.n	1499e <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
   14996:	697b      	ldr	r3, [r7, #20]
   14998:	2204      	movs	r2, #4
   1499a:	4313      	orrs	r3, r2
   1499c:	617b      	str	r3, [r7, #20]
	return status_flags;
   1499e:	697b      	ldr	r3, [r7, #20]
}
   149a0:	0018      	movs	r0, r3
   149a2:	46bd      	mov	sp, r7
   149a4:	b006      	add	sp, #24
   149a6:	bd80      	pop	{r7, pc}

000149a8 <adc_clear_status>:
{
   149a8:	b580      	push	{r7, lr}
   149aa:	b084      	sub	sp, #16
   149ac:	af00      	add	r7, sp, #0
   149ae:	6078      	str	r0, [r7, #4]
   149b0:	6039      	str	r1, [r7, #0]
	Adc *const adc_module = module_inst->hw;
   149b2:	687b      	ldr	r3, [r7, #4]
   149b4:	681b      	ldr	r3, [r3, #0]
   149b6:	60bb      	str	r3, [r7, #8]
	uint32_t int_flags = 0;
   149b8:	2300      	movs	r3, #0
   149ba:	60fb      	str	r3, [r7, #12]
	if (status_flags & ADC_STATUS_RESULT_READY) {
   149bc:	683b      	ldr	r3, [r7, #0]
   149be:	2201      	movs	r2, #1
   149c0:	4013      	ands	r3, r2
   149c2:	d003      	beq.n	149cc <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
   149c4:	68fb      	ldr	r3, [r7, #12]
   149c6:	2201      	movs	r2, #1
   149c8:	4313      	orrs	r3, r2
   149ca:	60fb      	str	r3, [r7, #12]
	if (status_flags & ADC_STATUS_WINDOW) {
   149cc:	683b      	ldr	r3, [r7, #0]
   149ce:	2202      	movs	r2, #2
   149d0:	4013      	ands	r3, r2
   149d2:	d003      	beq.n	149dc <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
   149d4:	68fb      	ldr	r3, [r7, #12]
   149d6:	2204      	movs	r2, #4
   149d8:	4313      	orrs	r3, r2
   149da:	60fb      	str	r3, [r7, #12]
	if (status_flags & ADC_STATUS_OVERRUN) {
   149dc:	683b      	ldr	r3, [r7, #0]
   149de:	2204      	movs	r2, #4
   149e0:	4013      	ands	r3, r2
   149e2:	d003      	beq.n	149ec <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
   149e4:	68fb      	ldr	r3, [r7, #12]
   149e6:	2202      	movs	r2, #2
   149e8:	4313      	orrs	r3, r2
   149ea:	60fb      	str	r3, [r7, #12]
	adc_module->INTFLAG.reg = int_flags;
   149ec:	68fb      	ldr	r3, [r7, #12]
   149ee:	b2da      	uxtb	r2, r3
   149f0:	68bb      	ldr	r3, [r7, #8]
   149f2:	761a      	strb	r2, [r3, #24]
}
   149f4:	46c0      	nop			; (mov r8, r8)
   149f6:	46bd      	mov	sp, r7
   149f8:	b004      	add	sp, #16
   149fa:	bd80      	pop	{r7, pc}

000149fc <adc_start_conversion>:
{
   149fc:	b580      	push	{r7, lr}
   149fe:	b084      	sub	sp, #16
   14a00:	af00      	add	r7, sp, #0
   14a02:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   14a04:	687b      	ldr	r3, [r7, #4]
   14a06:	681b      	ldr	r3, [r3, #0]
   14a08:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
   14a0a:	46c0      	nop			; (mov r8, r8)
   14a0c:	687b      	ldr	r3, [r7, #4]
   14a0e:	0018      	movs	r0, r3
   14a10:	4b0b      	ldr	r3, [pc, #44]	; (14a40 <adc_start_conversion+0x44>)
   14a12:	4798      	blx	r3
   14a14:	1e03      	subs	r3, r0, #0
   14a16:	d1f9      	bne.n	14a0c <adc_start_conversion+0x10>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   14a18:	68fb      	ldr	r3, [r7, #12]
   14a1a:	7b1b      	ldrb	r3, [r3, #12]
   14a1c:	b2db      	uxtb	r3, r3
   14a1e:	2202      	movs	r2, #2
   14a20:	4313      	orrs	r3, r2
   14a22:	b2da      	uxtb	r2, r3
   14a24:	68fb      	ldr	r3, [r7, #12]
   14a26:	731a      	strb	r2, [r3, #12]
	while (adc_is_syncing(module_inst)) {
   14a28:	46c0      	nop			; (mov r8, r8)
   14a2a:	687b      	ldr	r3, [r7, #4]
   14a2c:	0018      	movs	r0, r3
   14a2e:	4b04      	ldr	r3, [pc, #16]	; (14a40 <adc_start_conversion+0x44>)
   14a30:	4798      	blx	r3
   14a32:	1e03      	subs	r3, r0, #0
   14a34:	d1f9      	bne.n	14a2a <adc_start_conversion+0x2e>
}
   14a36:	46c0      	nop			; (mov r8, r8)
   14a38:	46bd      	mov	sp, r7
   14a3a:	b004      	add	sp, #16
   14a3c:	bd80      	pop	{r7, pc}
   14a3e:	46c0      	nop			; (mov r8, r8)
   14a40:	0001492d 	.word	0x0001492d

00014a44 <adc_read>:
{
   14a44:	b580      	push	{r7, lr}
   14a46:	b084      	sub	sp, #16
   14a48:	af00      	add	r7, sp, #0
   14a4a:	6078      	str	r0, [r7, #4]
   14a4c:	6039      	str	r1, [r7, #0]
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
   14a4e:	687b      	ldr	r3, [r7, #4]
   14a50:	0018      	movs	r0, r3
   14a52:	4b18      	ldr	r3, [pc, #96]	; (14ab4 <adc_read+0x70>)
   14a54:	4798      	blx	r3
   14a56:	0002      	movs	r2, r0
   14a58:	2301      	movs	r3, #1
   14a5a:	4013      	ands	r3, r2
   14a5c:	d101      	bne.n	14a62 <adc_read+0x1e>
		return STATUS_BUSY;
   14a5e:	2305      	movs	r3, #5
   14a60:	e023      	b.n	14aaa <adc_read+0x66>
	Adc *const adc_module = module_inst->hw;
   14a62:	687b      	ldr	r3, [r7, #4]
   14a64:	681b      	ldr	r3, [r3, #0]
   14a66:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
   14a68:	46c0      	nop			; (mov r8, r8)
   14a6a:	687b      	ldr	r3, [r7, #4]
   14a6c:	0018      	movs	r0, r3
   14a6e:	4b12      	ldr	r3, [pc, #72]	; (14ab8 <adc_read+0x74>)
   14a70:	4798      	blx	r3
   14a72:	1e03      	subs	r3, r0, #0
   14a74:	d1f9      	bne.n	14a6a <adc_read+0x26>
	*result = adc_module->RESULT.reg;
   14a76:	68fb      	ldr	r3, [r7, #12]
   14a78:	8b5b      	ldrh	r3, [r3, #26]
   14a7a:	b29a      	uxth	r2, r3
   14a7c:	683b      	ldr	r3, [r7, #0]
   14a7e:	801a      	strh	r2, [r3, #0]
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
   14a80:	687b      	ldr	r3, [r7, #4]
   14a82:	2101      	movs	r1, #1
   14a84:	0018      	movs	r0, r3
   14a86:	4b0d      	ldr	r3, [pc, #52]	; (14abc <adc_read+0x78>)
   14a88:	4798      	blx	r3
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
   14a8a:	687b      	ldr	r3, [r7, #4]
   14a8c:	0018      	movs	r0, r3
   14a8e:	4b09      	ldr	r3, [pc, #36]	; (14ab4 <adc_read+0x70>)
   14a90:	4798      	blx	r3
   14a92:	0002      	movs	r2, r0
   14a94:	2304      	movs	r3, #4
   14a96:	4013      	ands	r3, r2
   14a98:	d006      	beq.n	14aa8 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
   14a9a:	687b      	ldr	r3, [r7, #4]
   14a9c:	2104      	movs	r1, #4
   14a9e:	0018      	movs	r0, r3
   14aa0:	4b06      	ldr	r3, [pc, #24]	; (14abc <adc_read+0x78>)
   14aa2:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
   14aa4:	231e      	movs	r3, #30
   14aa6:	e000      	b.n	14aaa <adc_read+0x66>
	return STATUS_OK;
   14aa8:	2300      	movs	r3, #0
}
   14aaa:	0018      	movs	r0, r3
   14aac:	46bd      	mov	sp, r7
   14aae:	b004      	add	sp, #16
   14ab0:	bd80      	pop	{r7, pc}
   14ab2:	46c0      	nop			; (mov r8, r8)
   14ab4:	00014955 	.word	0x00014955
   14ab8:	0001492d 	.word	0x0001492d
   14abc:	000149a9 	.word	0x000149a9

00014ac0 <getTDSdata>:
#include "SEN0244.h"
#include "stdint.h"
#include "SerialConsole.h"

float getTDSdata();
float getTDSdata(){
   14ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
   14ac2:	b089      	sub	sp, #36	; 0x24
   14ac4:	af00      	add	r7, sp, #0
	uint16_t result1,result;
	uint16_t resultAgg=0;
   14ac6:	2316      	movs	r3, #22
   14ac8:	2208      	movs	r2, #8
   14aca:	4694      	mov	ip, r2
   14acc:	44bc      	add	ip, r7
   14ace:	4463      	add	r3, ip
   14ad0:	2200      	movs	r2, #0
   14ad2:	801a      	strh	r2, [r3, #0]
	uint8_t loop = 10;
   14ad4:	2313      	movs	r3, #19
   14ad6:	2208      	movs	r2, #8
   14ad8:	4694      	mov	ip, r2
   14ada:	44bc      	add	ip, r7
   14adc:	4463      	add	r3, ip
   14ade:	220a      	movs	r2, #10
   14ae0:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0;i<loop;i++){
   14ae2:	2314      	movs	r3, #20
   14ae4:	2208      	movs	r2, #8
   14ae6:	4694      	mov	ip, r2
   14ae8:	44bc      	add	ip, r7
   14aea:	4463      	add	r3, ip
   14aec:	2200      	movs	r2, #0
   14aee:	801a      	strh	r2, [r3, #0]
   14af0:	e038      	b.n	14b64 <getTDSdata+0xa4>
		adc_start_conversion(&adc_instance);
   14af2:	4b72      	ldr	r3, [pc, #456]	; (14cbc <getTDSdata+0x1fc>)
   14af4:	0018      	movs	r0, r3
   14af6:	4b72      	ldr	r3, [pc, #456]	; (14cc0 <getTDSdata+0x200>)
   14af8:	4798      	blx	r3
		do {
		} while (adc_read(&adc_instance, &result1) == STATUS_BUSY);
   14afa:	230a      	movs	r3, #10
   14afc:	18fa      	adds	r2, r7, r3
   14afe:	4b6f      	ldr	r3, [pc, #444]	; (14cbc <getTDSdata+0x1fc>)
   14b00:	0011      	movs	r1, r2
   14b02:	0018      	movs	r0, r3
   14b04:	4b6f      	ldr	r3, [pc, #444]	; (14cc4 <getTDSdata+0x204>)
   14b06:	4798      	blx	r3
   14b08:	0003      	movs	r3, r0
   14b0a:	2b05      	cmp	r3, #5
   14b0c:	d0f5      	beq.n	14afa <getTDSdata+0x3a>
		vTaskDelay(10);
   14b0e:	200a      	movs	r0, #10
   14b10:	4b6d      	ldr	r3, [pc, #436]	; (14cc8 <getTDSdata+0x208>)
   14b12:	4798      	blx	r3
		result = result1;
   14b14:	2310      	movs	r3, #16
   14b16:	2208      	movs	r2, #8
   14b18:	4694      	mov	ip, r2
   14b1a:	44bc      	add	ip, r7
   14b1c:	4463      	add	r3, ip
   14b1e:	220a      	movs	r2, #10
   14b20:	18ba      	adds	r2, r7, r2
   14b22:	8812      	ldrh	r2, [r2, #0]
   14b24:	801a      	strh	r2, [r3, #0]
		resultAgg = resultAgg+result;
   14b26:	2316      	movs	r3, #22
   14b28:	2208      	movs	r2, #8
   14b2a:	4694      	mov	ip, r2
   14b2c:	44bc      	add	ip, r7
   14b2e:	4463      	add	r3, ip
   14b30:	2216      	movs	r2, #22
   14b32:	2108      	movs	r1, #8
   14b34:	1879      	adds	r1, r7, r1
   14b36:	1889      	adds	r1, r1, r2
   14b38:	2210      	movs	r2, #16
   14b3a:	2008      	movs	r0, #8
   14b3c:	4684      	mov	ip, r0
   14b3e:	44bc      	add	ip, r7
   14b40:	4462      	add	r2, ip
   14b42:	8809      	ldrh	r1, [r1, #0]
   14b44:	8812      	ldrh	r2, [r2, #0]
   14b46:	188a      	adds	r2, r1, r2
   14b48:	801a      	strh	r2, [r3, #0]
	for(uint16_t i=0;i<loop;i++){
   14b4a:	2314      	movs	r3, #20
   14b4c:	2208      	movs	r2, #8
   14b4e:	4694      	mov	ip, r2
   14b50:	44bc      	add	ip, r7
   14b52:	4463      	add	r3, ip
   14b54:	881a      	ldrh	r2, [r3, #0]
   14b56:	2314      	movs	r3, #20
   14b58:	2108      	movs	r1, #8
   14b5a:	468c      	mov	ip, r1
   14b5c:	44bc      	add	ip, r7
   14b5e:	4463      	add	r3, ip
   14b60:	3201      	adds	r2, #1
   14b62:	801a      	strh	r2, [r3, #0]
   14b64:	2313      	movs	r3, #19
   14b66:	2208      	movs	r2, #8
   14b68:	4694      	mov	ip, r2
   14b6a:	44bc      	add	ip, r7
   14b6c:	4463      	add	r3, ip
   14b6e:	781b      	ldrb	r3, [r3, #0]
   14b70:	b29b      	uxth	r3, r3
   14b72:	2214      	movs	r2, #20
   14b74:	2108      	movs	r1, #8
   14b76:	468c      	mov	ip, r1
   14b78:	44bc      	add	ip, r7
   14b7a:	4462      	add	r2, ip
   14b7c:	8812      	ldrh	r2, [r2, #0]
   14b7e:	429a      	cmp	r2, r3
   14b80:	d3b7      	bcc.n	14af2 <getTDSdata+0x32>
	}
	float resultAvg = resultAgg/loop;
   14b82:	2316      	movs	r3, #22
   14b84:	2208      	movs	r2, #8
   14b86:	4694      	mov	ip, r2
   14b88:	44bc      	add	ip, r7
   14b8a:	4463      	add	r3, ip
   14b8c:	881a      	ldrh	r2, [r3, #0]
   14b8e:	2313      	movs	r3, #19
   14b90:	2108      	movs	r1, #8
   14b92:	468c      	mov	ip, r1
   14b94:	44bc      	add	ip, r7
   14b96:	4463      	add	r3, ip
   14b98:	7819      	ldrb	r1, [r3, #0]
   14b9a:	4b4c      	ldr	r3, [pc, #304]	; (14ccc <getTDSdata+0x20c>)
   14b9c:	0010      	movs	r0, r2
   14b9e:	4798      	blx	r3
   14ba0:	0003      	movs	r3, r0
   14ba2:	001a      	movs	r2, r3
   14ba4:	4b4a      	ldr	r3, [pc, #296]	; (14cd0 <getTDSdata+0x210>)
   14ba6:	0010      	movs	r0, r2
   14ba8:	4798      	blx	r3
   14baa:	1c03      	adds	r3, r0, #0
   14bac:	617b      	str	r3, [r7, #20]
	float voltage = (resultAvg*3.3)/4096; //Convert analog reading to Voltage
   14bae:	4b49      	ldr	r3, [pc, #292]	; (14cd4 <getTDSdata+0x214>)
   14bb0:	6978      	ldr	r0, [r7, #20]
   14bb2:	4798      	blx	r3
   14bb4:	4c48      	ldr	r4, [pc, #288]	; (14cd8 <getTDSdata+0x218>)
   14bb6:	4a49      	ldr	r2, [pc, #292]	; (14cdc <getTDSdata+0x21c>)
   14bb8:	4b49      	ldr	r3, [pc, #292]	; (14ce0 <getTDSdata+0x220>)
   14bba:	47a0      	blx	r4
   14bbc:	0003      	movs	r3, r0
   14bbe:	000c      	movs	r4, r1
   14bc0:	0018      	movs	r0, r3
   14bc2:	0021      	movs	r1, r4
   14bc4:	4c47      	ldr	r4, [pc, #284]	; (14ce4 <getTDSdata+0x224>)
   14bc6:	2200      	movs	r2, #0
   14bc8:	4b47      	ldr	r3, [pc, #284]	; (14ce8 <getTDSdata+0x228>)
   14bca:	47a0      	blx	r4
   14bcc:	0003      	movs	r3, r0
   14bce:	000c      	movs	r4, r1
   14bd0:	0019      	movs	r1, r3
   14bd2:	0022      	movs	r2, r4
   14bd4:	4b45      	ldr	r3, [pc, #276]	; (14cec <getTDSdata+0x22c>)
   14bd6:	0008      	movs	r0, r1
   14bd8:	0011      	movs	r1, r2
   14bda:	4798      	blx	r3
   14bdc:	1c03      	adds	r3, r0, #0
   14bde:	613b      	str	r3, [r7, #16]
	float tdsValue = (133.42/voltage*voltage*voltage - 255.86*voltage*voltage + 857.39*voltage)*0.5;
   14be0:	4b3c      	ldr	r3, [pc, #240]	; (14cd4 <getTDSdata+0x214>)
   14be2:	6938      	ldr	r0, [r7, #16]
   14be4:	4798      	blx	r3
   14be6:	0002      	movs	r2, r0
   14be8:	000b      	movs	r3, r1
   14bea:	4c3e      	ldr	r4, [pc, #248]	; (14ce4 <getTDSdata+0x224>)
   14bec:	4840      	ldr	r0, [pc, #256]	; (14cf0 <getTDSdata+0x230>)
   14bee:	4941      	ldr	r1, [pc, #260]	; (14cf4 <getTDSdata+0x234>)
   14bf0:	47a0      	blx	r4
   14bf2:	0003      	movs	r3, r0
   14bf4:	000c      	movs	r4, r1
   14bf6:	001d      	movs	r5, r3
   14bf8:	0026      	movs	r6, r4
   14bfa:	4b36      	ldr	r3, [pc, #216]	; (14cd4 <getTDSdata+0x214>)
   14bfc:	6938      	ldr	r0, [r7, #16]
   14bfe:	4798      	blx	r3
   14c00:	0002      	movs	r2, r0
   14c02:	000b      	movs	r3, r1
   14c04:	4c34      	ldr	r4, [pc, #208]	; (14cd8 <getTDSdata+0x218>)
   14c06:	0028      	movs	r0, r5
   14c08:	0031      	movs	r1, r6
   14c0a:	47a0      	blx	r4
   14c0c:	0003      	movs	r3, r0
   14c0e:	000c      	movs	r4, r1
   14c10:	001d      	movs	r5, r3
   14c12:	0026      	movs	r6, r4
   14c14:	4b2f      	ldr	r3, [pc, #188]	; (14cd4 <getTDSdata+0x214>)
   14c16:	6938      	ldr	r0, [r7, #16]
   14c18:	4798      	blx	r3
   14c1a:	0002      	movs	r2, r0
   14c1c:	000b      	movs	r3, r1
   14c1e:	4c2e      	ldr	r4, [pc, #184]	; (14cd8 <getTDSdata+0x218>)
   14c20:	0028      	movs	r0, r5
   14c22:	0031      	movs	r1, r6
   14c24:	47a0      	blx	r4
   14c26:	0003      	movs	r3, r0
   14c28:	000c      	movs	r4, r1
   14c2a:	001d      	movs	r5, r3
   14c2c:	0026      	movs	r6, r4
   14c2e:	4b29      	ldr	r3, [pc, #164]	; (14cd4 <getTDSdata+0x214>)
   14c30:	6938      	ldr	r0, [r7, #16]
   14c32:	4798      	blx	r3
   14c34:	4c28      	ldr	r4, [pc, #160]	; (14cd8 <getTDSdata+0x218>)
   14c36:	4a30      	ldr	r2, [pc, #192]	; (14cf8 <getTDSdata+0x238>)
   14c38:	4b30      	ldr	r3, [pc, #192]	; (14cfc <getTDSdata+0x23c>)
   14c3a:	47a0      	blx	r4
   14c3c:	0003      	movs	r3, r0
   14c3e:	000c      	movs	r4, r1
   14c40:	603b      	str	r3, [r7, #0]
   14c42:	607c      	str	r4, [r7, #4]
   14c44:	4b23      	ldr	r3, [pc, #140]	; (14cd4 <getTDSdata+0x214>)
   14c46:	6938      	ldr	r0, [r7, #16]
   14c48:	4798      	blx	r3
   14c4a:	0002      	movs	r2, r0
   14c4c:	000b      	movs	r3, r1
   14c4e:	4c22      	ldr	r4, [pc, #136]	; (14cd8 <getTDSdata+0x218>)
   14c50:	6838      	ldr	r0, [r7, #0]
   14c52:	6879      	ldr	r1, [r7, #4]
   14c54:	47a0      	blx	r4
   14c56:	0003      	movs	r3, r0
   14c58:	000c      	movs	r4, r1
   14c5a:	001a      	movs	r2, r3
   14c5c:	0023      	movs	r3, r4
   14c5e:	4c28      	ldr	r4, [pc, #160]	; (14d00 <getTDSdata+0x240>)
   14c60:	0028      	movs	r0, r5
   14c62:	0031      	movs	r1, r6
   14c64:	47a0      	blx	r4
   14c66:	0003      	movs	r3, r0
   14c68:	000c      	movs	r4, r1
   14c6a:	001d      	movs	r5, r3
   14c6c:	0026      	movs	r6, r4
   14c6e:	4b19      	ldr	r3, [pc, #100]	; (14cd4 <getTDSdata+0x214>)
   14c70:	6938      	ldr	r0, [r7, #16]
   14c72:	4798      	blx	r3
   14c74:	4c18      	ldr	r4, [pc, #96]	; (14cd8 <getTDSdata+0x218>)
   14c76:	4a23      	ldr	r2, [pc, #140]	; (14d04 <getTDSdata+0x244>)
   14c78:	4b23      	ldr	r3, [pc, #140]	; (14d08 <getTDSdata+0x248>)
   14c7a:	47a0      	blx	r4
   14c7c:	0003      	movs	r3, r0
   14c7e:	000c      	movs	r4, r1
   14c80:	001a      	movs	r2, r3
   14c82:	0023      	movs	r3, r4
   14c84:	4c21      	ldr	r4, [pc, #132]	; (14d0c <getTDSdata+0x24c>)
   14c86:	0028      	movs	r0, r5
   14c88:	0031      	movs	r1, r6
   14c8a:	47a0      	blx	r4
   14c8c:	0003      	movs	r3, r0
   14c8e:	000c      	movs	r4, r1
   14c90:	0018      	movs	r0, r3
   14c92:	0021      	movs	r1, r4
   14c94:	4c10      	ldr	r4, [pc, #64]	; (14cd8 <getTDSdata+0x218>)
   14c96:	2200      	movs	r2, #0
   14c98:	4b1d      	ldr	r3, [pc, #116]	; (14d10 <getTDSdata+0x250>)
   14c9a:	47a0      	blx	r4
   14c9c:	0003      	movs	r3, r0
   14c9e:	000c      	movs	r4, r1
   14ca0:	0019      	movs	r1, r3
   14ca2:	0022      	movs	r2, r4
   14ca4:	4b11      	ldr	r3, [pc, #68]	; (14cec <getTDSdata+0x22c>)
   14ca6:	0008      	movs	r0, r1
   14ca8:	0011      	movs	r1, r2
   14caa:	4798      	blx	r3
   14cac:	1c03      	adds	r3, r0, #0
   14cae:	60fb      	str	r3, [r7, #12]
	return tdsValue;
   14cb0:	68fb      	ldr	r3, [r7, #12]
}
   14cb2:	1c18      	adds	r0, r3, #0
   14cb4:	46bd      	mov	sp, r7
   14cb6:	b009      	add	sp, #36	; 0x24
   14cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14cba:	46c0      	nop			; (mov r8, r8)
   14cbc:	200045f4 	.word	0x200045f4
   14cc0:	000149fd 	.word	0x000149fd
   14cc4:	00014a45 	.word	0x00014a45
   14cc8:	0001b551 	.word	0x0001b551
   14ccc:	00031fb1 	.word	0x00031fb1
   14cd0:	00032749 	.word	0x00032749
   14cd4:	00034075 	.word	0x00034075
   14cd8:	00033471 	.word	0x00033471
   14cdc:	66666666 	.word	0x66666666
   14ce0:	400a6666 	.word	0x400a6666
   14ce4:	00032e09 	.word	0x00032e09
   14ce8:	40b00000 	.word	0x40b00000
   14cec:	00034119 	.word	0x00034119
   14cf0:	a3d70a3d 	.word	0xa3d70a3d
   14cf4:	4060ad70 	.word	0x4060ad70
   14cf8:	1eb851ec 	.word	0x1eb851ec
   14cfc:	406ffb85 	.word	0x406ffb85
   14d00:	00033971 	.word	0x00033971
   14d04:	b851eb85 	.word	0xb851eb85
   14d08:	408acb1e 	.word	0x408acb1e
   14d0c:	000327e9 	.word	0x000327e9
   14d10:	3fe00000 	.word	0x3fe00000

00014d14 <WaterSensor_Init>:

int WaterSensor_Read_Data_L(uint8_t *buffer, uint8_t count);
int WaterSensor_Init(void);

I2C_Data WaterSensorData;
int WaterSensor_Init(){
   14d14:	b580      	push	{r7, lr}
   14d16:	b082      	sub	sp, #8
   14d18:	af00      	add	r7, sp, #0
	
     uint8_t cmd[] = {0x77, 0x78};
   14d1a:	003b      	movs	r3, r7
   14d1c:	4a0d      	ldr	r2, [pc, #52]	; (14d54 <WaterSensor_Init+0x40>)
   14d1e:	8812      	ldrh	r2, [r2, #0]
   14d20:	801a      	strh	r2, [r3, #0]

     WaterSensorData.address = WaterSensor_ADDR_L;
   14d22:	4b0d      	ldr	r3, [pc, #52]	; (14d58 <WaterSensor_Init+0x44>)
   14d24:	2277      	movs	r2, #119	; 0x77
   14d26:	701a      	strb	r2, [r3, #0]
     WaterSensorData.msgOut = (const uint8_t *) &cmd[0];
   14d28:	4b0b      	ldr	r3, [pc, #44]	; (14d58 <WaterSensor_Init+0x44>)
   14d2a:	003a      	movs	r2, r7
   14d2c:	605a      	str	r2, [r3, #4]
     WaterSensorData.lenOut = sizeof(cmd);
   14d2e:	4b0a      	ldr	r3, [pc, #40]	; (14d58 <WaterSensor_Init+0x44>)
   14d30:	2202      	movs	r2, #2
   14d32:	81da      	strh	r2, [r3, #14]
     WaterSensorData.lenIn = 0;
   14d34:	4b08      	ldr	r3, [pc, #32]	; (14d58 <WaterSensor_Init+0x44>)
   14d36:	2200      	movs	r2, #0
   14d38:	819a      	strh	r2, [r3, #12]
     int32_t error = I2cWriteDataWait(&WaterSensorData, 0xff);
   14d3a:	4b07      	ldr	r3, [pc, #28]	; (14d58 <WaterSensor_Init+0x44>)
   14d3c:	21ff      	movs	r1, #255	; 0xff
   14d3e:	0018      	movs	r0, r3
   14d40:	4b06      	ldr	r3, [pc, #24]	; (14d5c <WaterSensor_Init+0x48>)
   14d42:	4798      	blx	r3
   14d44:	0003      	movs	r3, r0
   14d46:	607b      	str	r3, [r7, #4]
     return error;
   14d48:	687b      	ldr	r3, [r7, #4]
}
   14d4a:	0018      	movs	r0, r3
   14d4c:	46bd      	mov	sp, r7
   14d4e:	b002      	add	sp, #8
   14d50:	bd80      	pop	{r7, pc}
   14d52:	46c0      	nop			; (mov r8, r8)
   14d54:	00035a90 	.word	0x00035a90
   14d58:	20004650 	.word	0x20004650
   14d5c:	00014675 	.word	0x00014675

00014d60 <WaterSensor_Read_Data_L>:

int WaterSensor_Read_Data_L(uint8_t *buffer, uint8_t count){
   14d60:	b580      	push	{r7, lr}
   14d62:	b084      	sub	sp, #16
   14d64:	af00      	add	r7, sp, #0
   14d66:	6078      	str	r0, [r7, #4]
   14d68:	000a      	movs	r2, r1
   14d6a:	1cfb      	adds	r3, r7, #3
   14d6c:	701a      	strb	r2, [r3, #0]
	
	uint8_t cmd[] = {0x77, 0x78};
   14d6e:	2308      	movs	r3, #8
   14d70:	18fb      	adds	r3, r7, r3
   14d72:	4a13      	ldr	r2, [pc, #76]	; (14dc0 <WaterSensor_Read_Data_L+0x60>)
   14d74:	8812      	ldrh	r2, [r2, #0]
   14d76:	801a      	strh	r2, [r3, #0]
	WaterSensorData.address = WaterSensor_ADDR_L;
   14d78:	4b12      	ldr	r3, [pc, #72]	; (14dc4 <WaterSensor_Read_Data_L+0x64>)
   14d7a:	2277      	movs	r2, #119	; 0x77
   14d7c:	701a      	strb	r2, [r3, #0]
	WaterSensorData.msgOut = (const uint8_t*) &cmd[0];
   14d7e:	4b11      	ldr	r3, [pc, #68]	; (14dc4 <WaterSensor_Read_Data_L+0x64>)
   14d80:	2208      	movs	r2, #8
   14d82:	18ba      	adds	r2, r7, r2
   14d84:	605a      	str	r2, [r3, #4]
	WaterSensorData.lenOut = 1;
   14d86:	4b0f      	ldr	r3, [pc, #60]	; (14dc4 <WaterSensor_Read_Data_L+0x64>)
   14d88:	2201      	movs	r2, #1
   14d8a:	81da      	strh	r2, [r3, #14]
	WaterSensorData.msgIn = buffer;
   14d8c:	4b0d      	ldr	r3, [pc, #52]	; (14dc4 <WaterSensor_Read_Data_L+0x64>)
   14d8e:	687a      	ldr	r2, [r7, #4]
   14d90:	609a      	str	r2, [r3, #8]
	WaterSensorData.lenIn = 8;
   14d92:	4b0c      	ldr	r3, [pc, #48]	; (14dc4 <WaterSensor_Read_Data_L+0x64>)
   14d94:	2208      	movs	r2, #8
   14d96:	819a      	strh	r2, [r3, #12]

	int error = I2cReadDataWait(&WaterSensorData, 0xff, 0xff);
   14d98:	4b0a      	ldr	r3, [pc, #40]	; (14dc4 <WaterSensor_Read_Data_L+0x64>)
   14d9a:	22ff      	movs	r2, #255	; 0xff
   14d9c:	21ff      	movs	r1, #255	; 0xff
   14d9e:	0018      	movs	r0, r3
   14da0:	4b09      	ldr	r3, [pc, #36]	; (14dc8 <WaterSensor_Read_Data_L+0x68>)
   14da2:	4798      	blx	r3
   14da4:	0003      	movs	r3, r0
   14da6:	60fb      	str	r3, [r7, #12]

	if (ERROR_NONE != error) {
   14da8:	68fb      	ldr	r3, [r7, #12]
   14daa:	2b00      	cmp	r3, #0
   14dac:	d003      	beq.n	14db6 <WaterSensor_Read_Data_L+0x56>
		SerialConsoleWriteString("Error reading WaterSensor low!/r/n");
   14dae:	4b07      	ldr	r3, [pc, #28]	; (14dcc <WaterSensor_Read_Data_L+0x6c>)
   14db0:	0018      	movs	r0, r3
   14db2:	4b07      	ldr	r3, [pc, #28]	; (14dd0 <WaterSensor_Read_Data_L+0x70>)
   14db4:	4798      	blx	r3
	}
	return error;
   14db6:	68fb      	ldr	r3, [r7, #12]
}
   14db8:	0018      	movs	r0, r3
   14dba:	46bd      	mov	sp, r7
   14dbc:	b004      	add	sp, #16
   14dbe:	bd80      	pop	{r7, pc}
   14dc0:	00035a90 	.word	0x00035a90
   14dc4:	20004650 	.word	0x20004650
   14dc8:	0001474d 	.word	0x0001474d
   14dcc:	00035a94 	.word	0x00035a94
   14dd0:	0001d1a5 	.word	0x0001d1a5

00014dd4 <WaterSensor_Read_Data_H>:

int WaterSensor_Read_Data_H(uint8_t *buffer, uint8_t count){
   14dd4:	b580      	push	{r7, lr}
   14dd6:	b084      	sub	sp, #16
   14dd8:	af00      	add	r7, sp, #0
   14dda:	6078      	str	r0, [r7, #4]
   14ddc:	000a      	movs	r2, r1
   14dde:	1cfb      	adds	r3, r7, #3
   14de0:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[] = {0x77, 0x78};
   14de2:	2308      	movs	r3, #8
   14de4:	18fb      	adds	r3, r7, r3
   14de6:	4a14      	ldr	r2, [pc, #80]	; (14e38 <WaterSensor_Read_Data_H+0x64>)
   14de8:	8812      	ldrh	r2, [r2, #0]
   14dea:	801a      	strh	r2, [r3, #0]
	WaterSensorData.address = WaterSensor_ADDR_H;
   14dec:	4b13      	ldr	r3, [pc, #76]	; (14e3c <WaterSensor_Read_Data_H+0x68>)
   14dee:	2278      	movs	r2, #120	; 0x78
   14df0:	701a      	strb	r2, [r3, #0]
	WaterSensorData.msgOut = (const uint8_t*) &cmd[1];
   14df2:	4b12      	ldr	r3, [pc, #72]	; (14e3c <WaterSensor_Read_Data_H+0x68>)
   14df4:	2208      	movs	r2, #8
   14df6:	18ba      	adds	r2, r7, r2
   14df8:	3201      	adds	r2, #1
   14dfa:	605a      	str	r2, [r3, #4]
	WaterSensorData.lenOut = 1;
   14dfc:	4b0f      	ldr	r3, [pc, #60]	; (14e3c <WaterSensor_Read_Data_H+0x68>)
   14dfe:	2201      	movs	r2, #1
   14e00:	81da      	strh	r2, [r3, #14]
	WaterSensorData.msgIn = buffer;
   14e02:	4b0e      	ldr	r3, [pc, #56]	; (14e3c <WaterSensor_Read_Data_H+0x68>)
   14e04:	687a      	ldr	r2, [r7, #4]
   14e06:	609a      	str	r2, [r3, #8]
	WaterSensorData.lenIn = 12;
   14e08:	4b0c      	ldr	r3, [pc, #48]	; (14e3c <WaterSensor_Read_Data_H+0x68>)
   14e0a:	220c      	movs	r2, #12
   14e0c:	819a      	strh	r2, [r3, #12]

	int error = I2cReadDataWait(&WaterSensorData, 0xff, 0xff);
   14e0e:	4b0b      	ldr	r3, [pc, #44]	; (14e3c <WaterSensor_Read_Data_H+0x68>)
   14e10:	22ff      	movs	r2, #255	; 0xff
   14e12:	21ff      	movs	r1, #255	; 0xff
   14e14:	0018      	movs	r0, r3
   14e16:	4b0a      	ldr	r3, [pc, #40]	; (14e40 <WaterSensor_Read_Data_H+0x6c>)
   14e18:	4798      	blx	r3
   14e1a:	0003      	movs	r3, r0
   14e1c:	60fb      	str	r3, [r7, #12]

	if (ERROR_NONE != error) {
   14e1e:	68fb      	ldr	r3, [r7, #12]
   14e20:	2b00      	cmp	r3, #0
   14e22:	d003      	beq.n	14e2c <WaterSensor_Read_Data_H+0x58>
		SerialConsoleWriteString("Error reading WaterSensor low!/r/n");
   14e24:	4b07      	ldr	r3, [pc, #28]	; (14e44 <WaterSensor_Read_Data_H+0x70>)
   14e26:	0018      	movs	r0, r3
   14e28:	4b07      	ldr	r3, [pc, #28]	; (14e48 <WaterSensor_Read_Data_H+0x74>)
   14e2a:	4798      	blx	r3
	}
	return error;
   14e2c:	68fb      	ldr	r3, [r7, #12]
}
   14e2e:	0018      	movs	r0, r3
   14e30:	46bd      	mov	sp, r7
   14e32:	b004      	add	sp, #16
   14e34:	bd80      	pop	{r7, pc}
   14e36:	46c0      	nop			; (mov r8, r8)
   14e38:	00035a90 	.word	0x00035a90
   14e3c:	20004650 	.word	0x20004650
   14e40:	0001474d 	.word	0x0001474d
   14e44:	00035a94 	.word	0x00035a94
   14e48:	0001d1a5 	.word	0x0001d1a5

00014e4c <getWaterLevel>:

uint8_t getWaterLevel(uint8_t *wlDataLow, uint8_t *wlDataHigh){
   14e4c:	b580      	push	{r7, lr}
   14e4e:	b088      	sub	sp, #32
   14e50:	af00      	add	r7, sp, #0
   14e52:	6078      	str	r0, [r7, #4]
   14e54:	6039      	str	r1, [r7, #0]
	int state = WaterSensor_Read_Data_L(wlDataLow,sizeof(wlDataLow));
   14e56:	687b      	ldr	r3, [r7, #4]
   14e58:	2104      	movs	r1, #4
   14e5a:	0018      	movs	r0, r3
   14e5c:	4b30      	ldr	r3, [pc, #192]	; (14f20 <getWaterLevel+0xd4>)
   14e5e:	4798      	blx	r3
   14e60:	0003      	movs	r3, r0
   14e62:	60fb      	str	r3, [r7, #12]
	vTaskDelay(50);
   14e64:	2032      	movs	r0, #50	; 0x32
   14e66:	4b2f      	ldr	r3, [pc, #188]	; (14f24 <getWaterLevel+0xd8>)
   14e68:	4798      	blx	r3
	state = WaterSensor_Read_Data_H(wlDataHigh,sizeof(wlDataHigh));
   14e6a:	683b      	ldr	r3, [r7, #0]
   14e6c:	2104      	movs	r1, #4
   14e6e:	0018      	movs	r0, r3
   14e70:	4b2d      	ldr	r3, [pc, #180]	; (14f28 <getWaterLevel+0xdc>)
   14e72:	4798      	blx	r3
   14e74:	0003      	movs	r3, r0
   14e76:	60fb      	str	r3, [r7, #12]
	uint32_t touch_val = 0;
   14e78:	2300      	movs	r3, #0
   14e7a:	61fb      	str	r3, [r7, #28]
	uint8_t trig_section = 0;
   14e7c:	231b      	movs	r3, #27
   14e7e:	18fb      	adds	r3, r7, r3
   14e80:	2200      	movs	r2, #0
   14e82:	701a      	strb	r2, [r3, #0]
	for (int i = 0 ; i < 8; i++) {
   14e84:	2300      	movs	r3, #0
   14e86:	617b      	str	r3, [r7, #20]
   14e88:	e010      	b.n	14eac <getWaterLevel+0x60>
		if (wlDataLow[i] > THRESHOLD) {
   14e8a:	697b      	ldr	r3, [r7, #20]
   14e8c:	687a      	ldr	r2, [r7, #4]
   14e8e:	18d3      	adds	r3, r2, r3
   14e90:	781b      	ldrb	r3, [r3, #0]
   14e92:	2b64      	cmp	r3, #100	; 0x64
   14e94:	d907      	bls.n	14ea6 <getWaterLevel+0x5a>
			touch_val |= 1 << i;
   14e96:	2201      	movs	r2, #1
   14e98:	697b      	ldr	r3, [r7, #20]
   14e9a:	409a      	lsls	r2, r3
   14e9c:	0013      	movs	r3, r2
   14e9e:	001a      	movs	r2, r3
   14ea0:	69fb      	ldr	r3, [r7, #28]
   14ea2:	4313      	orrs	r3, r2
   14ea4:	61fb      	str	r3, [r7, #28]
	for (int i = 0 ; i < 8; i++) {
   14ea6:	697b      	ldr	r3, [r7, #20]
   14ea8:	3301      	adds	r3, #1
   14eaa:	617b      	str	r3, [r7, #20]
   14eac:	697b      	ldr	r3, [r7, #20]
   14eae:	2b07      	cmp	r3, #7
   14eb0:	ddeb      	ble.n	14e8a <getWaterLevel+0x3e>

		}
	}
	for (int i = 0 ; i < 12; i++) {
   14eb2:	2300      	movs	r3, #0
   14eb4:	613b      	str	r3, [r7, #16]
   14eb6:	e010      	b.n	14eda <getWaterLevel+0x8e>
		if (wlDataHigh[i] > THRESHOLD) {
   14eb8:	693b      	ldr	r3, [r7, #16]
   14eba:	683a      	ldr	r2, [r7, #0]
   14ebc:	18d3      	adds	r3, r2, r3
   14ebe:	781b      	ldrb	r3, [r3, #0]
   14ec0:	2b64      	cmp	r3, #100	; 0x64
   14ec2:	d907      	bls.n	14ed4 <getWaterLevel+0x88>
			touch_val |= (uint32_t)1 << (8 + i);
   14ec4:	693b      	ldr	r3, [r7, #16]
   14ec6:	3308      	adds	r3, #8
   14ec8:	2201      	movs	r2, #1
   14eca:	409a      	lsls	r2, r3
   14ecc:	0013      	movs	r3, r2
   14ece:	69fa      	ldr	r2, [r7, #28]
   14ed0:	4313      	orrs	r3, r2
   14ed2:	61fb      	str	r3, [r7, #28]
	for (int i = 0 ; i < 12; i++) {
   14ed4:	693b      	ldr	r3, [r7, #16]
   14ed6:	3301      	adds	r3, #1
   14ed8:	613b      	str	r3, [r7, #16]
   14eda:	693b      	ldr	r3, [r7, #16]
   14edc:	2b0b      	cmp	r3, #11
   14ede:	ddeb      	ble.n	14eb8 <getWaterLevel+0x6c>
		}
	}

	while (touch_val & 0x01)
   14ee0:	e009      	b.n	14ef6 <getWaterLevel+0xaa>
	{
		trig_section++;
   14ee2:	231b      	movs	r3, #27
   14ee4:	18fb      	adds	r3, r7, r3
   14ee6:	781a      	ldrb	r2, [r3, #0]
   14ee8:	231b      	movs	r3, #27
   14eea:	18fb      	adds	r3, r7, r3
   14eec:	3201      	adds	r2, #1
   14eee:	701a      	strb	r2, [r3, #0]
		touch_val >>= 1;
   14ef0:	69fb      	ldr	r3, [r7, #28]
   14ef2:	085b      	lsrs	r3, r3, #1
   14ef4:	61fb      	str	r3, [r7, #28]
	while (touch_val & 0x01)
   14ef6:	69fb      	ldr	r3, [r7, #28]
   14ef8:	2201      	movs	r2, #1
   14efa:	4013      	ands	r3, r2
   14efc:	d1f1      	bne.n	14ee2 <getWaterLevel+0x96>
	}
	uint8_t waterLevelCent = trig_section*5;
   14efe:	230b      	movs	r3, #11
   14f00:	18fa      	adds	r2, r7, r3
   14f02:	231b      	movs	r3, #27
   14f04:	18fb      	adds	r3, r7, r3
   14f06:	781b      	ldrb	r3, [r3, #0]
   14f08:	1c19      	adds	r1, r3, #0
   14f0a:	0089      	lsls	r1, r1, #2
   14f0c:	18cb      	adds	r3, r1, r3
   14f0e:	7013      	strb	r3, [r2, #0]
	return waterLevelCent;
   14f10:	230b      	movs	r3, #11
   14f12:	18fb      	adds	r3, r7, r3
   14f14:	781b      	ldrb	r3, [r3, #0]
   14f16:	0018      	movs	r0, r3
   14f18:	46bd      	mov	sp, r7
   14f1a:	b008      	add	sp, #32
   14f1c:	bd80      	pop	{r7, pc}
   14f1e:	46c0      	nop			; (mov r8, r8)
   14f20:	00014d61 	.word	0x00014d61
   14f24:	0001b551 	.word	0x0001b551
   14f28:	00014dd5 	.word	0x00014dd5

00014f2c <system_pinmux_get_group_from_gpio_pin>:
{
   14f2c:	b580      	push	{r7, lr}
   14f2e:	b084      	sub	sp, #16
   14f30:	af00      	add	r7, sp, #0
   14f32:	0002      	movs	r2, r0
   14f34:	1dfb      	adds	r3, r7, #7
   14f36:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   14f38:	230f      	movs	r3, #15
   14f3a:	18fb      	adds	r3, r7, r3
   14f3c:	1dfa      	adds	r2, r7, #7
   14f3e:	7812      	ldrb	r2, [r2, #0]
   14f40:	09d2      	lsrs	r2, r2, #7
   14f42:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   14f44:	230e      	movs	r3, #14
   14f46:	18fb      	adds	r3, r7, r3
   14f48:	1dfa      	adds	r2, r7, #7
   14f4a:	7812      	ldrb	r2, [r2, #0]
   14f4c:	0952      	lsrs	r2, r2, #5
   14f4e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   14f50:	4b0d      	ldr	r3, [pc, #52]	; (14f88 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   14f52:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   14f54:	230f      	movs	r3, #15
   14f56:	18fb      	adds	r3, r7, r3
   14f58:	781b      	ldrb	r3, [r3, #0]
   14f5a:	2b00      	cmp	r3, #0
   14f5c:	d10f      	bne.n	14f7e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   14f5e:	230f      	movs	r3, #15
   14f60:	18fb      	adds	r3, r7, r3
   14f62:	781b      	ldrb	r3, [r3, #0]
   14f64:	009b      	lsls	r3, r3, #2
   14f66:	2210      	movs	r2, #16
   14f68:	4694      	mov	ip, r2
   14f6a:	44bc      	add	ip, r7
   14f6c:	4463      	add	r3, ip
   14f6e:	3b08      	subs	r3, #8
   14f70:	681a      	ldr	r2, [r3, #0]
   14f72:	230e      	movs	r3, #14
   14f74:	18fb      	adds	r3, r7, r3
   14f76:	781b      	ldrb	r3, [r3, #0]
   14f78:	01db      	lsls	r3, r3, #7
   14f7a:	18d3      	adds	r3, r2, r3
   14f7c:	e000      	b.n	14f80 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   14f7e:	2300      	movs	r3, #0
}
   14f80:	0018      	movs	r0, r3
   14f82:	46bd      	mov	sp, r7
   14f84:	b004      	add	sp, #16
   14f86:	bd80      	pop	{r7, pc}
   14f88:	41004400 	.word	0x41004400

00014f8c <port_get_group_from_gpio_pin>:
{
   14f8c:	b580      	push	{r7, lr}
   14f8e:	b082      	sub	sp, #8
   14f90:	af00      	add	r7, sp, #0
   14f92:	0002      	movs	r2, r0
   14f94:	1dfb      	adds	r3, r7, #7
   14f96:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   14f98:	1dfb      	adds	r3, r7, #7
   14f9a:	781b      	ldrb	r3, [r3, #0]
   14f9c:	0018      	movs	r0, r3
   14f9e:	4b03      	ldr	r3, [pc, #12]	; (14fac <port_get_group_from_gpio_pin+0x20>)
   14fa0:	4798      	blx	r3
   14fa2:	0003      	movs	r3, r0
}
   14fa4:	0018      	movs	r0, r3
   14fa6:	46bd      	mov	sp, r7
   14fa8:	b002      	add	sp, #8
   14faa:	bd80      	pop	{r7, pc}
   14fac:	00014f2d 	.word	0x00014f2d

00014fb0 <port_pin_set_output_level>:
{
   14fb0:	b580      	push	{r7, lr}
   14fb2:	b084      	sub	sp, #16
   14fb4:	af00      	add	r7, sp, #0
   14fb6:	0002      	movs	r2, r0
   14fb8:	1dfb      	adds	r3, r7, #7
   14fba:	701a      	strb	r2, [r3, #0]
   14fbc:	1dbb      	adds	r3, r7, #6
   14fbe:	1c0a      	adds	r2, r1, #0
   14fc0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   14fc2:	1dfb      	adds	r3, r7, #7
   14fc4:	781b      	ldrb	r3, [r3, #0]
   14fc6:	0018      	movs	r0, r3
   14fc8:	4b0d      	ldr	r3, [pc, #52]	; (15000 <port_pin_set_output_level+0x50>)
   14fca:	4798      	blx	r3
   14fcc:	0003      	movs	r3, r0
   14fce:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   14fd0:	1dfb      	adds	r3, r7, #7
   14fd2:	781b      	ldrb	r3, [r3, #0]
   14fd4:	221f      	movs	r2, #31
   14fd6:	4013      	ands	r3, r2
   14fd8:	2201      	movs	r2, #1
   14fda:	409a      	lsls	r2, r3
   14fdc:	0013      	movs	r3, r2
   14fde:	60bb      	str	r3, [r7, #8]
	if (level) {
   14fe0:	1dbb      	adds	r3, r7, #6
   14fe2:	781b      	ldrb	r3, [r3, #0]
   14fe4:	2b00      	cmp	r3, #0
   14fe6:	d003      	beq.n	14ff0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   14fe8:	68fb      	ldr	r3, [r7, #12]
   14fea:	68ba      	ldr	r2, [r7, #8]
   14fec:	619a      	str	r2, [r3, #24]
}
   14fee:	e002      	b.n	14ff6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   14ff0:	68fb      	ldr	r3, [r7, #12]
   14ff2:	68ba      	ldr	r2, [r7, #8]
   14ff4:	615a      	str	r2, [r3, #20]
}
   14ff6:	46c0      	nop			; (mov r8, r8)
   14ff8:	46bd      	mov	sp, r7
   14ffa:	b004      	add	sp, #16
   14ffc:	bd80      	pop	{r7, pc}
   14ffe:	46c0      	nop			; (mov r8, r8)
   15000:	00014f8d 	.word	0x00014f8d

00015004 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   15004:	b580      	push	{r7, lr}
   15006:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   15008:	4b02      	ldr	r3, [pc, #8]	; (15014 <init_state+0x10>)
   1500a:	2200      	movs	r2, #0
   1500c:	701a      	strb	r2, [r3, #0]
}
   1500e:	46c0      	nop			; (mov r8, r8)
   15010:	46bd      	mov	sp, r7
   15012:	bd80      	pop	{r7, pc}
   15014:	2000049d 	.word	0x2000049d

00015018 <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   15018:	b580      	push	{r7, lr}
   1501a:	b082      	sub	sp, #8
   1501c:	af00      	add	r7, sp, #0
   1501e:	0002      	movs	r2, r0
   15020:	1dfb      	adds	r3, r7, #7
   15022:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   15024:	1dfb      	adds	r3, r7, #7
   15026:	781b      	ldrb	r3, [r3, #0]
   15028:	b25b      	sxtb	r3, r3
   1502a:	43db      	mvns	r3, r3
   1502c:	b25b      	sxtb	r3, r3
   1502e:	4a06      	ldr	r2, [pc, #24]	; (15048 <clear_state+0x30>)
   15030:	7812      	ldrb	r2, [r2, #0]
   15032:	b252      	sxtb	r2, r2
   15034:	4013      	ands	r3, r2
   15036:	b25b      	sxtb	r3, r3
   15038:	b2da      	uxtb	r2, r3
   1503a:	4b03      	ldr	r3, [pc, #12]	; (15048 <clear_state+0x30>)
   1503c:	701a      	strb	r2, [r3, #0]
}
   1503e:	46c0      	nop			; (mov r8, r8)
   15040:	46bd      	mov	sp, r7
   15042:	b002      	add	sp, #8
   15044:	bd80      	pop	{r7, pc}
   15046:	46c0      	nop			; (mov r8, r8)
   15048:	2000049d 	.word	0x2000049d

0001504c <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   1504c:	b580      	push	{r7, lr}
   1504e:	b082      	sub	sp, #8
   15050:	af00      	add	r7, sp, #0
   15052:	0002      	movs	r2, r0
   15054:	1dfb      	adds	r3, r7, #7
   15056:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   15058:	4b05      	ldr	r3, [pc, #20]	; (15070 <add_state+0x24>)
   1505a:	781a      	ldrb	r2, [r3, #0]
   1505c:	1dfb      	adds	r3, r7, #7
   1505e:	781b      	ldrb	r3, [r3, #0]
   15060:	4313      	orrs	r3, r2
   15062:	b2da      	uxtb	r2, r3
   15064:	4b02      	ldr	r3, [pc, #8]	; (15070 <add_state+0x24>)
   15066:	701a      	strb	r2, [r3, #0]
}
   15068:	46c0      	nop			; (mov r8, r8)
   1506a:	46bd      	mov	sp, r7
   1506c:	b002      	add	sp, #8
   1506e:	bd80      	pop	{r7, pc}
   15070:	2000049d 	.word	0x2000049d

00015074 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   15074:	b580      	push	{r7, lr}
   15076:	b082      	sub	sp, #8
   15078:	af00      	add	r7, sp, #0
   1507a:	0002      	movs	r2, r0
   1507c:	1dfb      	adds	r3, r7, #7
   1507e:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   15080:	4b06      	ldr	r3, [pc, #24]	; (1509c <is_state_set+0x28>)
   15082:	781b      	ldrb	r3, [r3, #0]
   15084:	1dfa      	adds	r2, r7, #7
   15086:	7812      	ldrb	r2, [r2, #0]
   15088:	4013      	ands	r3, r2
   1508a:	b2db      	uxtb	r3, r3
   1508c:	1e5a      	subs	r2, r3, #1
   1508e:	4193      	sbcs	r3, r2
   15090:	b2db      	uxtb	r3, r3
}
   15092:	0018      	movs	r0, r3
   15094:	46bd      	mov	sp, r7
   15096:	b002      	add	sp, #8
   15098:	bd80      	pop	{r7, pc}
   1509a:	46c0      	nop			; (mov r8, r8)
   1509c:	2000049d 	.word	0x2000049d

000150a0 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   150a0:	b590      	push	{r4, r7, lr}
   150a2:	b085      	sub	sp, #20
   150a4:	af00      	add	r7, sp, #0
   150a6:	6078      	str	r0, [r7, #4]
   150a8:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   150aa:	687b      	ldr	r3, [r7, #4]
   150ac:	2b00      	cmp	r3, #0
   150ae:	d002      	beq.n	150b6 <is_exist_file+0x16>
   150b0:	683b      	ldr	r3, [r7, #0]
   150b2:	2b00      	cmp	r3, #0
   150b4:	d101      	bne.n	150ba <is_exist_file+0x1a>
        return false;
   150b6:	2300      	movs	r3, #0
   150b8:	e013      	b.n	150e2 <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   150ba:	230f      	movs	r3, #15
   150bc:	18fc      	adds	r4, r7, r3
   150be:	6839      	ldr	r1, [r7, #0]
   150c0:	4b0a      	ldr	r3, [pc, #40]	; (150ec <is_exist_file+0x4c>)
   150c2:	2200      	movs	r2, #0
   150c4:	0018      	movs	r0, r3
   150c6:	4b0a      	ldr	r3, [pc, #40]	; (150f0 <is_exist_file+0x50>)
   150c8:	4798      	blx	r3
   150ca:	0003      	movs	r3, r0
   150cc:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   150ce:	4b07      	ldr	r3, [pc, #28]	; (150ec <is_exist_file+0x4c>)
   150d0:	0018      	movs	r0, r3
   150d2:	4b08      	ldr	r3, [pc, #32]	; (150f4 <is_exist_file+0x54>)
   150d4:	4798      	blx	r3
    return (ret == FR_OK);
   150d6:	230f      	movs	r3, #15
   150d8:	18fb      	adds	r3, r7, r3
   150da:	781b      	ldrb	r3, [r3, #0]
   150dc:	425a      	negs	r2, r3
   150de:	4153      	adcs	r3, r2
   150e0:	b2db      	uxtb	r3, r3
}
   150e2:	0018      	movs	r0, r3
   150e4:	46bd      	mov	sp, r7
   150e6:	b005      	add	sp, #20
   150e8:	bd90      	pop	{r4, r7, pc}
   150ea:	46c0      	nop			; (mov r8, r8)
   150ec:	200006d0 	.word	0x200006d0
   150f0:	0002cd3d 	.word	0x0002cd3d
   150f4:	0002d73d 	.word	0x0002d73d

000150f8 <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   150f8:	b580      	push	{r7, lr}
   150fa:	b09e      	sub	sp, #120	; 0x78
   150fc:	af00      	add	r7, sp, #0
   150fe:	60f8      	str	r0, [r7, #12]
   15100:	60b9      	str	r1, [r7, #8]
   15102:	1dfb      	adds	r3, r7, #7
   15104:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   15106:	2376      	movs	r3, #118	; 0x76
   15108:	18fb      	adds	r3, r7, r3
   1510a:	2201      	movs	r2, #1
   1510c:	801a      	strh	r2, [r3, #0]
   1510e:	2374      	movs	r3, #116	; 0x74
   15110:	18fb      	adds	r3, r7, r3
   15112:	2200      	movs	r2, #0
   15114:	801a      	strh	r2, [r3, #0]
   15116:	236e      	movs	r3, #110	; 0x6e
   15118:	18fb      	adds	r3, r7, r3
   1511a:	2200      	movs	r2, #0
   1511c:	801a      	strh	r2, [r3, #0]
   1511e:	2372      	movs	r3, #114	; 0x72
   15120:	18fb      	adds	r3, r7, r3
   15122:	2200      	movs	r2, #0
   15124:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   15126:	2324      	movs	r3, #36	; 0x24
   15128:	18fb      	adds	r3, r7, r3
   1512a:	0018      	movs	r0, r3
   1512c:	2341      	movs	r3, #65	; 0x41
   1512e:	001a      	movs	r2, r3
   15130:	2100      	movs	r1, #0
   15132:	4b92      	ldr	r3, [pc, #584]	; (1537c <rename_to_unique+0x284>)
   15134:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   15136:	2318      	movs	r3, #24
   15138:	18fb      	adds	r3, r7, r3
   1513a:	0018      	movs	r0, r3
   1513c:	2309      	movs	r3, #9
   1513e:	001a      	movs	r2, r3
   15140:	2100      	movs	r1, #0
   15142:	4b8e      	ldr	r3, [pc, #568]	; (1537c <rename_to_unique+0x284>)
   15144:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   15146:	2314      	movs	r3, #20
   15148:	18fb      	adds	r3, r7, r3
   1514a:	2200      	movs	r2, #0
   1514c:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   1514e:	2300      	movs	r3, #0
   15150:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   15152:	2371      	movs	r3, #113	; 0x71
   15154:	18fb      	adds	r3, r7, r3
   15156:	2200      	movs	r2, #0
   15158:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   1515a:	68bb      	ldr	r3, [r7, #8]
   1515c:	2b00      	cmp	r3, #0
   1515e:	d101      	bne.n	15164 <rename_to_unique+0x6c>
        return false;
   15160:	2300      	movs	r3, #0
   15162:	e106      	b.n	15372 <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   15164:	68ba      	ldr	r2, [r7, #8]
   15166:	68fb      	ldr	r3, [r7, #12]
   15168:	0011      	movs	r1, r2
   1516a:	0018      	movs	r0, r3
   1516c:	4b84      	ldr	r3, [pc, #528]	; (15380 <rename_to_unique+0x288>)
   1516e:	4798      	blx	r3
   15170:	0003      	movs	r3, r0
   15172:	001a      	movs	r2, r3
   15174:	2301      	movs	r3, #1
   15176:	4053      	eors	r3, r2
   15178:	b2db      	uxtb	r3, r3
   1517a:	2b00      	cmp	r3, #0
   1517c:	d001      	beq.n	15182 <rename_to_unique+0x8a>
        return true;
   1517e:	2301      	movs	r3, #1
   15180:	e0f7      	b.n	15372 <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   15182:	68bb      	ldr	r3, [r7, #8]
   15184:	0018      	movs	r0, r3
   15186:	4b7f      	ldr	r3, [pc, #508]	; (15384 <rename_to_unique+0x28c>)
   15188:	4798      	blx	r3
   1518a:	0003      	movs	r3, r0
   1518c:	2b40      	cmp	r3, #64	; 0x40
   1518e:	d901      	bls.n	15194 <rename_to_unique+0x9c>
        return false;
   15190:	2300      	movs	r3, #0
   15192:	e0ee      	b.n	15372 <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   15194:	68bb      	ldr	r3, [r7, #8]
   15196:	212e      	movs	r1, #46	; 0x2e
   15198:	0018      	movs	r0, r3
   1519a:	4b7b      	ldr	r3, [pc, #492]	; (15388 <rename_to_unique+0x290>)
   1519c:	4798      	blx	r3
   1519e:	0003      	movs	r3, r0
   151a0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   151a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   151a4:	2b00      	cmp	r3, #0
   151a6:	d052      	beq.n	1524e <rename_to_unique+0x156>
        ext_len = strlen(p);
   151a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   151aa:	0018      	movs	r0, r3
   151ac:	4b75      	ldr	r3, [pc, #468]	; (15384 <rename_to_unique+0x28c>)
   151ae:	4798      	blx	r3
   151b0:	0002      	movs	r2, r0
   151b2:	236e      	movs	r3, #110	; 0x6e
   151b4:	18fb      	adds	r3, r7, r3
   151b6:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   151b8:	236e      	movs	r3, #110	; 0x6e
   151ba:	18fb      	adds	r3, r7, r3
   151bc:	881b      	ldrh	r3, [r3, #0]
   151be:	2b07      	cmp	r3, #7
   151c0:	d837      	bhi.n	15232 <rename_to_unique+0x13a>
            valid_ext = true;
   151c2:	2371      	movs	r3, #113	; 0x71
   151c4:	18fb      	adds	r3, r7, r3
   151c6:	2201      	movs	r2, #1
   151c8:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   151ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
   151cc:	2318      	movs	r3, #24
   151ce:	18fb      	adds	r3, r7, r3
   151d0:	0011      	movs	r1, r2
   151d2:	0018      	movs	r0, r3
   151d4:	4b6d      	ldr	r3, [pc, #436]	; (1538c <rename_to_unique+0x294>)
   151d6:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   151d8:	68bb      	ldr	r3, [r7, #8]
   151da:	0018      	movs	r0, r3
   151dc:	4b69      	ldr	r3, [pc, #420]	; (15384 <rename_to_unique+0x28c>)
   151de:	4798      	blx	r3
   151e0:	0002      	movs	r2, r0
   151e2:	236e      	movs	r3, #110	; 0x6e
   151e4:	18fb      	adds	r3, r7, r3
   151e6:	881b      	ldrh	r3, [r3, #0]
   151e8:	1ad3      	subs	r3, r2, r3
   151ea:	2b3c      	cmp	r3, #60	; 0x3c
   151ec:	d911      	bls.n	15212 <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   151ee:	2374      	movs	r3, #116	; 0x74
   151f0:	18fb      	adds	r3, r7, r3
   151f2:	226e      	movs	r2, #110	; 0x6e
   151f4:	18ba      	adds	r2, r7, r2
   151f6:	8812      	ldrh	r2, [r2, #0]
   151f8:	213c      	movs	r1, #60	; 0x3c
   151fa:	1a8a      	subs	r2, r1, r2
   151fc:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   151fe:	2374      	movs	r3, #116	; 0x74
   15200:	18fb      	adds	r3, r7, r3
   15202:	881a      	ldrh	r2, [r3, #0]
   15204:	68b9      	ldr	r1, [r7, #8]
   15206:	2324      	movs	r3, #36	; 0x24
   15208:	18fb      	adds	r3, r7, r3
   1520a:	0018      	movs	r0, r3
   1520c:	4b60      	ldr	r3, [pc, #384]	; (15390 <rename_to_unique+0x298>)
   1520e:	4798      	blx	r3
   15210:	e02a      	b.n	15268 <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   15212:	6eba      	ldr	r2, [r7, #104]	; 0x68
   15214:	68bb      	ldr	r3, [r7, #8]
   15216:	1ad2      	subs	r2, r2, r3
   15218:	2374      	movs	r3, #116	; 0x74
   1521a:	18fb      	adds	r3, r7, r3
   1521c:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   1521e:	2374      	movs	r3, #116	; 0x74
   15220:	18fb      	adds	r3, r7, r3
   15222:	881a      	ldrh	r2, [r3, #0]
   15224:	68b9      	ldr	r1, [r7, #8]
   15226:	2324      	movs	r3, #36	; 0x24
   15228:	18fb      	adds	r3, r7, r3
   1522a:	0018      	movs	r0, r3
   1522c:	4b58      	ldr	r3, [pc, #352]	; (15390 <rename_to_unique+0x298>)
   1522e:	4798      	blx	r3
   15230:	e01a      	b.n	15268 <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   15232:	2374      	movs	r3, #116	; 0x74
   15234:	18fb      	adds	r3, r7, r3
   15236:	223c      	movs	r2, #60	; 0x3c
   15238:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   1523a:	2374      	movs	r3, #116	; 0x74
   1523c:	18fb      	adds	r3, r7, r3
   1523e:	881a      	ldrh	r2, [r3, #0]
   15240:	68b9      	ldr	r1, [r7, #8]
   15242:	2324      	movs	r3, #36	; 0x24
   15244:	18fb      	adds	r3, r7, r3
   15246:	0018      	movs	r0, r3
   15248:	4b51      	ldr	r3, [pc, #324]	; (15390 <rename_to_unique+0x298>)
   1524a:	4798      	blx	r3
   1524c:	e00c      	b.n	15268 <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   1524e:	2374      	movs	r3, #116	; 0x74
   15250:	18fb      	adds	r3, r7, r3
   15252:	223c      	movs	r2, #60	; 0x3c
   15254:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   15256:	2374      	movs	r3, #116	; 0x74
   15258:	18fb      	adds	r3, r7, r3
   1525a:	881a      	ldrh	r2, [r3, #0]
   1525c:	68b9      	ldr	r1, [r7, #8]
   1525e:	2324      	movs	r3, #36	; 0x24
   15260:	18fb      	adds	r3, r7, r3
   15262:	0018      	movs	r0, r3
   15264:	4b4a      	ldr	r3, [pc, #296]	; (15390 <rename_to_unique+0x298>)
   15266:	4798      	blx	r3
    }

    name[name_len++] = '-';
   15268:	2374      	movs	r3, #116	; 0x74
   1526a:	18fb      	adds	r3, r7, r3
   1526c:	881b      	ldrh	r3, [r3, #0]
   1526e:	2274      	movs	r2, #116	; 0x74
   15270:	18ba      	adds	r2, r7, r2
   15272:	1c59      	adds	r1, r3, #1
   15274:	8011      	strh	r1, [r2, #0]
   15276:	001a      	movs	r2, r3
   15278:	2324      	movs	r3, #36	; 0x24
   1527a:	18fb      	adds	r3, r7, r3
   1527c:	212d      	movs	r1, #45	; 0x2d
   1527e:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   15280:	2376      	movs	r3, #118	; 0x76
   15282:	18fb      	adds	r3, r7, r3
   15284:	2200      	movs	r2, #0
   15286:	801a      	strh	r2, [r3, #0]
   15288:	2372      	movs	r3, #114	; 0x72
   1528a:	18fb      	adds	r3, r7, r3
   1528c:	2201      	movs	r2, #1
   1528e:	801a      	strh	r2, [r3, #0]
   15290:	e010      	b.n	152b4 <rename_to_unique+0x1bc>
        count *= 10;
   15292:	2372      	movs	r3, #114	; 0x72
   15294:	18fa      	adds	r2, r7, r3
   15296:	2372      	movs	r3, #114	; 0x72
   15298:	18fb      	adds	r3, r7, r3
   1529a:	881b      	ldrh	r3, [r3, #0]
   1529c:	1c19      	adds	r1, r3, #0
   1529e:	0089      	lsls	r1, r1, #2
   152a0:	18cb      	adds	r3, r1, r3
   152a2:	18db      	adds	r3, r3, r3
   152a4:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   152a6:	2376      	movs	r3, #118	; 0x76
   152a8:	18fb      	adds	r3, r7, r3
   152aa:	881a      	ldrh	r2, [r3, #0]
   152ac:	2376      	movs	r3, #118	; 0x76
   152ae:	18fb      	adds	r3, r7, r3
   152b0:	3201      	adds	r2, #1
   152b2:	801a      	strh	r2, [r3, #0]
   152b4:	2376      	movs	r3, #118	; 0x76
   152b6:	18fb      	adds	r3, r7, r3
   152b8:	881b      	ldrh	r3, [r3, #0]
   152ba:	2b02      	cmp	r3, #2
   152bc:	d9e9      	bls.n	15292 <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   152be:	2376      	movs	r3, #118	; 0x76
   152c0:	18fb      	adds	r3, r7, r3
   152c2:	2201      	movs	r2, #1
   152c4:	801a      	strh	r2, [r3, #0]
   152c6:	e04b      	b.n	15360 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   152c8:	2376      	movs	r3, #118	; 0x76
   152ca:	18fb      	adds	r3, r7, r3
   152cc:	881a      	ldrh	r2, [r3, #0]
   152ce:	4931      	ldr	r1, [pc, #196]	; (15394 <rename_to_unique+0x29c>)
   152d0:	2314      	movs	r3, #20
   152d2:	18fb      	adds	r3, r7, r3
   152d4:	0018      	movs	r0, r3
   152d6:	4b30      	ldr	r3, [pc, #192]	; (15398 <rename_to_unique+0x2a0>)
   152d8:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   152da:	2374      	movs	r3, #116	; 0x74
   152dc:	18fb      	adds	r3, r7, r3
   152de:	881b      	ldrh	r3, [r3, #0]
   152e0:	2224      	movs	r2, #36	; 0x24
   152e2:	18ba      	adds	r2, r7, r2
   152e4:	18d3      	adds	r3, r2, r3
   152e6:	2214      	movs	r2, #20
   152e8:	18b9      	adds	r1, r7, r2
   152ea:	2203      	movs	r2, #3
   152ec:	0018      	movs	r0, r3
   152ee:	4b28      	ldr	r3, [pc, #160]	; (15390 <rename_to_unique+0x298>)
   152f0:	4798      	blx	r3
        if (valid_ext) {
   152f2:	2371      	movs	r3, #113	; 0x71
   152f4:	18fb      	adds	r3, r7, r3
   152f6:	781b      	ldrb	r3, [r3, #0]
   152f8:	2b00      	cmp	r3, #0
   152fa:	d00c      	beq.n	15316 <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   152fc:	2374      	movs	r3, #116	; 0x74
   152fe:	18fb      	adds	r3, r7, r3
   15300:	881b      	ldrh	r3, [r3, #0]
   15302:	3303      	adds	r3, #3
   15304:	2224      	movs	r2, #36	; 0x24
   15306:	18ba      	adds	r2, r7, r2
   15308:	18d3      	adds	r3, r2, r3
   1530a:	2218      	movs	r2, #24
   1530c:	18ba      	adds	r2, r7, r2
   1530e:	0011      	movs	r1, r2
   15310:	0018      	movs	r0, r3
   15312:	4b1e      	ldr	r3, [pc, #120]	; (1538c <rename_to_unique+0x294>)
   15314:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   15316:	2324      	movs	r3, #36	; 0x24
   15318:	18fa      	adds	r2, r7, r3
   1531a:	68fb      	ldr	r3, [r7, #12]
   1531c:	0011      	movs	r1, r2
   1531e:	0018      	movs	r0, r3
   15320:	4b17      	ldr	r3, [pc, #92]	; (15380 <rename_to_unique+0x288>)
   15322:	4798      	blx	r3
   15324:	0003      	movs	r3, r0
   15326:	001a      	movs	r2, r3
   15328:	2301      	movs	r3, #1
   1532a:	4053      	eors	r3, r2
   1532c:	b2db      	uxtb	r3, r3
   1532e:	2b00      	cmp	r3, #0
   15330:	d00f      	beq.n	15352 <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   15332:	1dfb      	adds	r3, r7, #7
   15334:	781a      	ldrb	r2, [r3, #0]
   15336:	68bb      	ldr	r3, [r7, #8]
   15338:	2100      	movs	r1, #0
   1533a:	0018      	movs	r0, r3
   1533c:	4b0f      	ldr	r3, [pc, #60]	; (1537c <rename_to_unique+0x284>)
   1533e:	4798      	blx	r3
            strcpy(file_path_name, name);
   15340:	2324      	movs	r3, #36	; 0x24
   15342:	18fa      	adds	r2, r7, r3
   15344:	68bb      	ldr	r3, [r7, #8]
   15346:	0011      	movs	r1, r2
   15348:	0018      	movs	r0, r3
   1534a:	4b10      	ldr	r3, [pc, #64]	; (1538c <rename_to_unique+0x294>)
   1534c:	4798      	blx	r3
            return true;
   1534e:	2301      	movs	r3, #1
   15350:	e00f      	b.n	15372 <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   15352:	2376      	movs	r3, #118	; 0x76
   15354:	18fb      	adds	r3, r7, r3
   15356:	881a      	ldrh	r2, [r3, #0]
   15358:	2376      	movs	r3, #118	; 0x76
   1535a:	18fb      	adds	r3, r7, r3
   1535c:	3201      	adds	r2, #1
   1535e:	801a      	strh	r2, [r3, #0]
   15360:	2376      	movs	r3, #118	; 0x76
   15362:	18fa      	adds	r2, r7, r3
   15364:	2372      	movs	r3, #114	; 0x72
   15366:	18fb      	adds	r3, r7, r3
   15368:	8812      	ldrh	r2, [r2, #0]
   1536a:	881b      	ldrh	r3, [r3, #0]
   1536c:	429a      	cmp	r2, r3
   1536e:	d3ab      	bcc.n	152c8 <rename_to_unique+0x1d0>
        }
    }
    return false;
   15370:	2300      	movs	r3, #0
}
   15372:	0018      	movs	r0, r3
   15374:	46bd      	mov	sp, r7
   15376:	b01e      	add	sp, #120	; 0x78
   15378:	bd80      	pop	{r7, pc}
   1537a:	46c0      	nop			; (mov r8, r8)
   1537c:	0003431b 	.word	0x0003431b
   15380:	000150a1 	.word	0x000150a1
   15384:	000346d3 	.word	0x000346d3
   15388:	0003472d 	.word	0x0003472d
   1538c:	00034687 	.word	0x00034687
   15390:	00034703 	.word	0x00034703
   15394:	00035acc 	.word	0x00035acc
   15398:	000345d9 	.word	0x000345d9

0001539c <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   1539c:	b590      	push	{r4, r7, lr}
   1539e:	b083      	sub	sp, #12
   153a0:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   153a2:	2001      	movs	r0, #1
   153a4:	4b22      	ldr	r3, [pc, #136]	; (15430 <start_download+0x94>)
   153a6:	4798      	blx	r3
   153a8:	0003      	movs	r3, r0
   153aa:	001a      	movs	r2, r3
   153ac:	2301      	movs	r3, #1
   153ae:	4053      	eors	r3, r2
   153b0:	b2db      	uxtb	r3, r3
   153b2:	2b00      	cmp	r3, #0
   153b4:	d005      	beq.n	153c2 <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   153b6:	4b1f      	ldr	r3, [pc, #124]	; (15434 <start_download+0x98>)
   153b8:	0019      	movs	r1, r3
   153ba:	2001      	movs	r0, #1
   153bc:	4b1e      	ldr	r3, [pc, #120]	; (15438 <start_download+0x9c>)
   153be:	4798      	blx	r3
        return;
   153c0:	e032      	b.n	15428 <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   153c2:	2002      	movs	r0, #2
   153c4:	4b1a      	ldr	r3, [pc, #104]	; (15430 <start_download+0x94>)
   153c6:	4798      	blx	r3
   153c8:	0003      	movs	r3, r0
   153ca:	001a      	movs	r2, r3
   153cc:	2301      	movs	r3, #1
   153ce:	4053      	eors	r3, r2
   153d0:	b2db      	uxtb	r3, r3
   153d2:	2b00      	cmp	r3, #0
   153d4:	d005      	beq.n	153e2 <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   153d6:	4b19      	ldr	r3, [pc, #100]	; (1543c <start_download+0xa0>)
   153d8:	0019      	movs	r1, r3
   153da:	2001      	movs	r0, #1
   153dc:	4b16      	ldr	r3, [pc, #88]	; (15438 <start_download+0x9c>)
   153de:	4798      	blx	r3
        return;
   153e0:	e022      	b.n	15428 <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   153e2:	2004      	movs	r0, #4
   153e4:	4b12      	ldr	r3, [pc, #72]	; (15430 <start_download+0x94>)
   153e6:	4798      	blx	r3
   153e8:	1e03      	subs	r3, r0, #0
   153ea:	d005      	beq.n	153f8 <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   153ec:	4b14      	ldr	r3, [pc, #80]	; (15440 <start_download+0xa4>)
   153ee:	0019      	movs	r1, r3
   153f0:	2001      	movs	r0, #1
   153f2:	4b11      	ldr	r3, [pc, #68]	; (15438 <start_download+0x9c>)
   153f4:	4798      	blx	r3
        return;
   153f6:	e017      	b.n	15428 <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   153f8:	2008      	movs	r0, #8
   153fa:	4b0d      	ldr	r3, [pc, #52]	; (15430 <start_download+0x94>)
   153fc:	4798      	blx	r3
   153fe:	1e03      	subs	r3, r0, #0
   15400:	d005      	beq.n	1540e <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   15402:	4b10      	ldr	r3, [pc, #64]	; (15444 <start_download+0xa8>)
   15404:	0019      	movs	r1, r3
   15406:	2001      	movs	r0, #1
   15408:	4b0b      	ldr	r3, [pc, #44]	; (15438 <start_download+0x9c>)
   1540a:	4798      	blx	r3
        return;
   1540c:	e00c      	b.n	15428 <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   1540e:	4b0e      	ldr	r3, [pc, #56]	; (15448 <start_download+0xac>)
   15410:	0019      	movs	r1, r3
   15412:	2001      	movs	r0, #1
   15414:	4b08      	ldr	r3, [pc, #32]	; (15438 <start_download+0x9c>)
   15416:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   15418:	490c      	ldr	r1, [pc, #48]	; (1544c <start_download+0xb0>)
   1541a:	480d      	ldr	r0, [pc, #52]	; (15450 <start_download+0xb4>)
   1541c:	2300      	movs	r3, #0
   1541e:	9300      	str	r3, [sp, #0]
   15420:	2300      	movs	r3, #0
   15422:	2201      	movs	r2, #1
   15424:	4c0b      	ldr	r4, [pc, #44]	; (15454 <start_download+0xb8>)
   15426:	47a0      	blx	r4
}
   15428:	46bd      	mov	sp, r7
   1542a:	b001      	add	sp, #4
   1542c:	bd90      	pop	{r4, r7, pc}
   1542e:	46c0      	nop			; (mov r8, r8)
   15430:	00015075 	.word	0x00015075
   15434:	00035ad4 	.word	0x00035ad4
   15438:	0001d291 	.word	0x0001d291
   1543c:	00035b00 	.word	0x00035b00
   15440:	00035b2c 	.word	0x00035b2c
   15444:	00035b58 	.word	0x00035b58
   15448:	00035b84 	.word	0x00035b84
   1544c:	00035bb0 	.word	0x00035bb0
   15450:	200046b8 	.word	0x200046b8
   15454:	00030391 	.word	0x00030391

00015458 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   15458:	b5b0      	push	{r4, r5, r7, lr}
   1545a:	b086      	sub	sp, #24
   1545c:	af00      	add	r7, sp, #0
   1545e:	6078      	str	r0, [r7, #4]
   15460:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   15462:	687b      	ldr	r3, [r7, #4]
   15464:	2b00      	cmp	r3, #0
   15466:	d002      	beq.n	1546e <store_file_packet+0x16>
   15468:	683b      	ldr	r3, [r7, #0]
   1546a:	2b00      	cmp	r3, #0
   1546c:	d105      	bne.n	1547a <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   1546e:	4b58      	ldr	r3, [pc, #352]	; (155d0 <store_file_packet+0x178>)
   15470:	0019      	movs	r1, r3
   15472:	2001      	movs	r0, #1
   15474:	4b57      	ldr	r3, [pc, #348]	; (155d4 <store_file_packet+0x17c>)
   15476:	4798      	blx	r3
        return;
   15478:	e0a6      	b.n	155c8 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   1547a:	2008      	movs	r0, #8
   1547c:	4b56      	ldr	r3, [pc, #344]	; (155d8 <store_file_packet+0x180>)
   1547e:	4798      	blx	r3
   15480:	0003      	movs	r3, r0
   15482:	001a      	movs	r2, r3
   15484:	2301      	movs	r3, #1
   15486:	4053      	eors	r3, r2
   15488:	b2db      	uxtb	r3, r3
   1548a:	2b00      	cmp	r3, #0
   1548c:	d055      	beq.n	1553a <store_file_packet+0xe2>
        char *cp = NULL;
   1548e:	2300      	movs	r3, #0
   15490:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   15492:	4b52      	ldr	r3, [pc, #328]	; (155dc <store_file_packet+0x184>)
   15494:	2230      	movs	r2, #48	; 0x30
   15496:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   15498:	4b50      	ldr	r3, [pc, #320]	; (155dc <store_file_packet+0x184>)
   1549a:	223a      	movs	r2, #58	; 0x3a
   1549c:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   1549e:	4b50      	ldr	r3, [pc, #320]	; (155e0 <store_file_packet+0x188>)
   154a0:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   154a2:	e002      	b.n	154aa <store_file_packet+0x52>
            cp--;
   154a4:	697b      	ldr	r3, [r7, #20]
   154a6:	3b01      	subs	r3, #1
   154a8:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   154aa:	697b      	ldr	r3, [r7, #20]
   154ac:	781b      	ldrb	r3, [r3, #0]
   154ae:	2b2f      	cmp	r3, #47	; 0x2f
   154b0:	d1f8      	bne.n	154a4 <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   154b2:	697b      	ldr	r3, [r7, #20]
   154b4:	0018      	movs	r0, r3
   154b6:	4b4b      	ldr	r3, [pc, #300]	; (155e4 <store_file_packet+0x18c>)
   154b8:	4798      	blx	r3
   154ba:	0003      	movs	r3, r0
   154bc:	2b01      	cmp	r3, #1
   154be:	d924      	bls.n	1550a <store_file_packet+0xb2>
            cp++;
   154c0:	697b      	ldr	r3, [r7, #20]
   154c2:	3301      	adds	r3, #1
   154c4:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   154c6:	697a      	ldr	r2, [r7, #20]
   154c8:	4b47      	ldr	r3, [pc, #284]	; (155e8 <store_file_packet+0x190>)
   154ca:	0011      	movs	r1, r2
   154cc:	0018      	movs	r0, r3
   154ce:	4b47      	ldr	r3, [pc, #284]	; (155ec <store_file_packet+0x194>)
   154d0:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   154d2:	4942      	ldr	r1, [pc, #264]	; (155dc <store_file_packet+0x184>)
   154d4:	4b46      	ldr	r3, [pc, #280]	; (155f0 <store_file_packet+0x198>)
   154d6:	2240      	movs	r2, #64	; 0x40
   154d8:	0018      	movs	r0, r3
   154da:	4b46      	ldr	r3, [pc, #280]	; (155f4 <store_file_packet+0x19c>)
   154dc:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   154de:	4a3f      	ldr	r2, [pc, #252]	; (155dc <store_file_packet+0x184>)
   154e0:	4b45      	ldr	r3, [pc, #276]	; (155f8 <store_file_packet+0x1a0>)
   154e2:	0019      	movs	r1, r3
   154e4:	2001      	movs	r0, #1
   154e6:	4b3b      	ldr	r3, [pc, #236]	; (155d4 <store_file_packet+0x17c>)
   154e8:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   154ea:	2313      	movs	r3, #19
   154ec:	18fc      	adds	r4, r7, r3
   154ee:	493b      	ldr	r1, [pc, #236]	; (155dc <store_file_packet+0x184>)
   154f0:	4b3f      	ldr	r3, [pc, #252]	; (155f0 <store_file_packet+0x198>)
   154f2:	220a      	movs	r2, #10
   154f4:	0018      	movs	r0, r3
   154f6:	4b41      	ldr	r3, [pc, #260]	; (155fc <store_file_packet+0x1a4>)
   154f8:	4798      	blx	r3
   154fa:	0003      	movs	r3, r0
   154fc:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   154fe:	2313      	movs	r3, #19
   15500:	18fb      	adds	r3, r7, r3
   15502:	781b      	ldrb	r3, [r3, #0]
   15504:	2b00      	cmp	r3, #0
   15506:	d012      	beq.n	1552e <store_file_packet+0xd6>
   15508:	e008      	b.n	1551c <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   1550a:	4b3d      	ldr	r3, [pc, #244]	; (15600 <store_file_packet+0x1a8>)
   1550c:	0019      	movs	r1, r3
   1550e:	2001      	movs	r0, #1
   15510:	4b30      	ldr	r3, [pc, #192]	; (155d4 <store_file_packet+0x17c>)
   15512:	4798      	blx	r3
            add_state(CANCELED);
   15514:	2020      	movs	r0, #32
   15516:	4b3b      	ldr	r3, [pc, #236]	; (15604 <store_file_packet+0x1ac>)
   15518:	4798      	blx	r3
            return;
   1551a:	e055      	b.n	155c8 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   1551c:	2313      	movs	r3, #19
   1551e:	18fb      	adds	r3, r7, r3
   15520:	781a      	ldrb	r2, [r3, #0]
   15522:	4b39      	ldr	r3, [pc, #228]	; (15608 <store_file_packet+0x1b0>)
   15524:	0019      	movs	r1, r3
   15526:	2001      	movs	r0, #1
   15528:	4b2a      	ldr	r3, [pc, #168]	; (155d4 <store_file_packet+0x17c>)
   1552a:	4798      	blx	r3
            return;
   1552c:	e04c      	b.n	155c8 <store_file_packet+0x170>
        }

        received_file_size = 0;
   1552e:	4b37      	ldr	r3, [pc, #220]	; (1560c <store_file_packet+0x1b4>)
   15530:	2200      	movs	r2, #0
   15532:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   15534:	2008      	movs	r0, #8
   15536:	4b33      	ldr	r3, [pc, #204]	; (15604 <store_file_packet+0x1ac>)
   15538:	4798      	blx	r3
    }

    if (data != NULL) {
   1553a:	687b      	ldr	r3, [r7, #4]
   1553c:	2b00      	cmp	r3, #0
   1553e:	d043      	beq.n	155c8 <store_file_packet+0x170>
        UINT wsize = 0;
   15540:	2300      	movs	r3, #0
   15542:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   15544:	2313      	movs	r3, #19
   15546:	18fc      	adds	r4, r7, r3
   15548:	230c      	movs	r3, #12
   1554a:	18fb      	adds	r3, r7, r3
   1554c:	683a      	ldr	r2, [r7, #0]
   1554e:	6879      	ldr	r1, [r7, #4]
   15550:	4827      	ldr	r0, [pc, #156]	; (155f0 <store_file_packet+0x198>)
   15552:	4d2f      	ldr	r5, [pc, #188]	; (15610 <store_file_packet+0x1b8>)
   15554:	47a8      	blx	r5
   15556:	0003      	movs	r3, r0
   15558:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   1555a:	2313      	movs	r3, #19
   1555c:	18fb      	adds	r3, r7, r3
   1555e:	781b      	ldrb	r3, [r3, #0]
   15560:	2b00      	cmp	r3, #0
   15562:	d00c      	beq.n	1557e <store_file_packet+0x126>
            f_close(&file_object);
   15564:	4b22      	ldr	r3, [pc, #136]	; (155f0 <store_file_packet+0x198>)
   15566:	0018      	movs	r0, r3
   15568:	4b2a      	ldr	r3, [pc, #168]	; (15614 <store_file_packet+0x1bc>)
   1556a:	4798      	blx	r3
            add_state(CANCELED);
   1556c:	2020      	movs	r0, #32
   1556e:	4b25      	ldr	r3, [pc, #148]	; (15604 <store_file_packet+0x1ac>)
   15570:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   15572:	4b29      	ldr	r3, [pc, #164]	; (15618 <store_file_packet+0x1c0>)
   15574:	0019      	movs	r1, r3
   15576:	2001      	movs	r0, #1
   15578:	4b16      	ldr	r3, [pc, #88]	; (155d4 <store_file_packet+0x17c>)
   1557a:	4798      	blx	r3
            return;
   1557c:	e024      	b.n	155c8 <store_file_packet+0x170>
        }

        received_file_size += wsize;
   1557e:	4b23      	ldr	r3, [pc, #140]	; (1560c <store_file_packet+0x1b4>)
   15580:	681a      	ldr	r2, [r3, #0]
   15582:	68fb      	ldr	r3, [r7, #12]
   15584:	18d2      	adds	r2, r2, r3
   15586:	4b21      	ldr	r3, [pc, #132]	; (1560c <store_file_packet+0x1b4>)
   15588:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   1558a:	4b20      	ldr	r3, [pc, #128]	; (1560c <store_file_packet+0x1b4>)
   1558c:	681a      	ldr	r2, [r3, #0]
   1558e:	4b23      	ldr	r3, [pc, #140]	; (1561c <store_file_packet+0x1c4>)
   15590:	681b      	ldr	r3, [r3, #0]
   15592:	4923      	ldr	r1, [pc, #140]	; (15620 <store_file_packet+0x1c8>)
   15594:	2001      	movs	r0, #1
   15596:	4c0f      	ldr	r4, [pc, #60]	; (155d4 <store_file_packet+0x17c>)
   15598:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   1559a:	4b1c      	ldr	r3, [pc, #112]	; (1560c <store_file_packet+0x1b4>)
   1559c:	681a      	ldr	r2, [r3, #0]
   1559e:	4b1f      	ldr	r3, [pc, #124]	; (1561c <store_file_packet+0x1c4>)
   155a0:	681b      	ldr	r3, [r3, #0]
   155a2:	429a      	cmp	r2, r3
   155a4:	d310      	bcc.n	155c8 <store_file_packet+0x170>
            f_close(&file_object);
   155a6:	4b12      	ldr	r3, [pc, #72]	; (155f0 <store_file_packet+0x198>)
   155a8:	0018      	movs	r0, r3
   155aa:	4b1a      	ldr	r3, [pc, #104]	; (15614 <store_file_packet+0x1bc>)
   155ac:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   155ae:	4b1d      	ldr	r3, [pc, #116]	; (15624 <store_file_packet+0x1cc>)
   155b0:	0019      	movs	r1, r3
   155b2:	2001      	movs	r0, #1
   155b4:	4b07      	ldr	r3, [pc, #28]	; (155d4 <store_file_packet+0x17c>)
   155b6:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   155b8:	2100      	movs	r1, #0
   155ba:	2017      	movs	r0, #23
   155bc:	4b1a      	ldr	r3, [pc, #104]	; (15628 <store_file_packet+0x1d0>)
   155be:	4798      	blx	r3
            add_state(COMPLETED);
   155c0:	2010      	movs	r0, #16
   155c2:	4b10      	ldr	r3, [pc, #64]	; (15604 <store_file_packet+0x1ac>)
   155c4:	4798      	blx	r3
            return;
   155c6:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   155c8:	46bd      	mov	sp, r7
   155ca:	b006      	add	sp, #24
   155cc:	bdb0      	pop	{r4, r5, r7, pc}
   155ce:	46c0      	nop			; (mov r8, r8)
   155d0:	00035bd8 	.word	0x00035bd8
   155d4:	0001d291 	.word	0x0001d291
   155d8:	00015075 	.word	0x00015075
   155dc:	2000009c 	.word	0x2000009c
   155e0:	00035bd7 	.word	0x00035bd7
   155e4:	000346d3 	.word	0x000346d3
   155e8:	2000009e 	.word	0x2000009e
   155ec:	00034687 	.word	0x00034687
   155f0:	200006d0 	.word	0x200006d0
   155f4:	000150f9 	.word	0x000150f9
   155f8:	00035c3c 	.word	0x00035c3c
   155fc:	0002cd3d 	.word	0x0002cd3d
   15600:	00035bfc 	.word	0x00035bfc
   15604:	0001504d 	.word	0x0001504d
   15608:	00035c64 	.word	0x00035c64
   1560c:	200006f8 	.word	0x200006f8
   15610:	0002d26d 	.word	0x0002d26d
   15614:	0002d73d 	.word	0x0002d73d
   15618:	00035c98 	.word	0x00035c98
   1561c:	200006f4 	.word	0x200006f4
   15620:	00035cd4 	.word	0x00035cd4
   15624:	00035d08 	.word	0x00035d08
   15628:	00014fb1 	.word	0x00014fb1

0001562c <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   1562c:	b590      	push	{r4, r7, lr}
   1562e:	b085      	sub	sp, #20
   15630:	af00      	add	r7, sp, #0
   15632:	60f8      	str	r0, [r7, #12]
   15634:	60b9      	str	r1, [r7, #8]
   15636:	607a      	str	r2, [r7, #4]
    switch (type) {
   15638:	68bb      	ldr	r3, [r7, #8]
   1563a:	2b04      	cmp	r3, #4
   1563c:	d900      	bls.n	15640 <http_client_callback+0x14>
   1563e:	e077      	b.n	15730 <http_client_callback+0x104>
   15640:	68bb      	ldr	r3, [r7, #8]
   15642:	009a      	lsls	r2, r3, #2
   15644:	4b3c      	ldr	r3, [pc, #240]	; (15738 <http_client_callback+0x10c>)
   15646:	18d3      	adds	r3, r2, r3
   15648:	681b      	ldr	r3, [r3, #0]
   1564a:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   1564c:	4b3b      	ldr	r3, [pc, #236]	; (1573c <http_client_callback+0x110>)
   1564e:	0019      	movs	r1, r3
   15650:	2001      	movs	r0, #1
   15652:	4b3b      	ldr	r3, [pc, #236]	; (15740 <http_client_callback+0x114>)
   15654:	4798      	blx	r3
            break;
   15656:	e06b      	b.n	15730 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   15658:	4b3a      	ldr	r3, [pc, #232]	; (15744 <http_client_callback+0x118>)
   1565a:	0019      	movs	r1, r3
   1565c:	2001      	movs	r0, #1
   1565e:	4b38      	ldr	r3, [pc, #224]	; (15740 <http_client_callback+0x114>)
   15660:	4798      	blx	r3
            add_state(GET_REQUESTED);
   15662:	2004      	movs	r0, #4
   15664:	4b38      	ldr	r3, [pc, #224]	; (15748 <http_client_callback+0x11c>)
   15666:	4798      	blx	r3
            break;
   15668:	e062      	b.n	15730 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   1566a:	687b      	ldr	r3, [r7, #4]
   1566c:	881b      	ldrh	r3, [r3, #0]
   1566e:	001a      	movs	r2, r3
   15670:	687b      	ldr	r3, [r7, #4]
   15672:	685b      	ldr	r3, [r3, #4]
   15674:	4935      	ldr	r1, [pc, #212]	; (1574c <http_client_callback+0x120>)
   15676:	2001      	movs	r0, #1
   15678:	4c31      	ldr	r4, [pc, #196]	; (15740 <http_client_callback+0x114>)
   1567a:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   1567c:	687b      	ldr	r3, [r7, #4]
   1567e:	881b      	ldrh	r3, [r3, #0]
   15680:	2bc8      	cmp	r3, #200	; 0xc8
   15682:	d10d      	bne.n	156a0 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   15684:	687b      	ldr	r3, [r7, #4]
   15686:	685a      	ldr	r2, [r3, #4]
   15688:	4b31      	ldr	r3, [pc, #196]	; (15750 <http_client_callback+0x124>)
   1568a:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   1568c:	4b31      	ldr	r3, [pc, #196]	; (15754 <http_client_callback+0x128>)
   1568e:	2200      	movs	r2, #0
   15690:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   15692:	687b      	ldr	r3, [r7, #4]
   15694:	685a      	ldr	r2, [r3, #4]
   15696:	2380      	movs	r3, #128	; 0x80
   15698:	009b      	lsls	r3, r3, #2
   1569a:	429a      	cmp	r2, r3
   1569c:	d843      	bhi.n	15726 <http_client_callback+0xfa>
   1569e:	e003      	b.n	156a8 <http_client_callback+0x7c>
                add_state(CANCELED);
   156a0:	2020      	movs	r0, #32
   156a2:	4b29      	ldr	r3, [pc, #164]	; (15748 <http_client_callback+0x11c>)
   156a4:	4798      	blx	r3
                return;
   156a6:	e043      	b.n	15730 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   156a8:	687b      	ldr	r3, [r7, #4]
   156aa:	689a      	ldr	r2, [r3, #8]
   156ac:	687b      	ldr	r3, [r7, #4]
   156ae:	685b      	ldr	r3, [r3, #4]
   156b0:	0019      	movs	r1, r3
   156b2:	0010      	movs	r0, r2
   156b4:	4b28      	ldr	r3, [pc, #160]	; (15758 <http_client_callback+0x12c>)
   156b6:	4798      	blx	r3
                add_state(COMPLETED);
   156b8:	2010      	movs	r0, #16
   156ba:	4b23      	ldr	r3, [pc, #140]	; (15748 <http_client_callback+0x11c>)
   156bc:	4798      	blx	r3
            }
            break;
   156be:	e032      	b.n	15726 <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   156c0:	687b      	ldr	r3, [r7, #4]
   156c2:	685a      	ldr	r2, [r3, #4]
   156c4:	687b      	ldr	r3, [r7, #4]
   156c6:	681b      	ldr	r3, [r3, #0]
   156c8:	0019      	movs	r1, r3
   156ca:	0010      	movs	r0, r2
   156cc:	4b22      	ldr	r3, [pc, #136]	; (15758 <http_client_callback+0x12c>)
   156ce:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   156d0:	687b      	ldr	r3, [r7, #4]
   156d2:	7a1b      	ldrb	r3, [r3, #8]
   156d4:	2b00      	cmp	r3, #0
   156d6:	d028      	beq.n	1572a <http_client_callback+0xfe>
                add_state(COMPLETED);
   156d8:	2010      	movs	r0, #16
   156da:	4b1b      	ldr	r3, [pc, #108]	; (15748 <http_client_callback+0x11c>)
   156dc:	4798      	blx	r3
            }

            break;
   156de:	e024      	b.n	1572a <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   156e0:	687b      	ldr	r3, [r7, #4]
   156e2:	681a      	ldr	r2, [r3, #0]
   156e4:	4b1d      	ldr	r3, [pc, #116]	; (1575c <http_client_callback+0x130>)
   156e6:	0019      	movs	r1, r3
   156e8:	2001      	movs	r0, #1
   156ea:	4b15      	ldr	r3, [pc, #84]	; (15740 <http_client_callback+0x114>)
   156ec:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   156ee:	687b      	ldr	r3, [r7, #4]
   156f0:	681b      	ldr	r3, [r3, #0]
   156f2:	330b      	adds	r3, #11
   156f4:	d11b      	bne.n	1572e <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   156f6:	2008      	movs	r0, #8
   156f8:	4b19      	ldr	r3, [pc, #100]	; (15760 <http_client_callback+0x134>)
   156fa:	4798      	blx	r3
   156fc:	1e03      	subs	r3, r0, #0
   156fe:	d006      	beq.n	1570e <http_client_callback+0xe2>
                    f_close(&file_object);
   15700:	4b18      	ldr	r3, [pc, #96]	; (15764 <http_client_callback+0x138>)
   15702:	0018      	movs	r0, r3
   15704:	4b18      	ldr	r3, [pc, #96]	; (15768 <http_client_callback+0x13c>)
   15706:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   15708:	2008      	movs	r0, #8
   1570a:	4b18      	ldr	r3, [pc, #96]	; (1576c <http_client_callback+0x140>)
   1570c:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   1570e:	2004      	movs	r0, #4
   15710:	4b13      	ldr	r3, [pc, #76]	; (15760 <http_client_callback+0x134>)
   15712:	4798      	blx	r3
   15714:	1e03      	subs	r3, r0, #0
   15716:	d002      	beq.n	1571e <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   15718:	2004      	movs	r0, #4
   1571a:	4b14      	ldr	r3, [pc, #80]	; (1576c <http_client_callback+0x140>)
   1571c:	4798      	blx	r3
                }

                start_download();
   1571e:	4b14      	ldr	r3, [pc, #80]	; (15770 <http_client_callback+0x144>)
   15720:	4798      	blx	r3
            }

            break;
   15722:	46c0      	nop			; (mov r8, r8)
   15724:	e003      	b.n	1572e <http_client_callback+0x102>
            break;
   15726:	46c0      	nop			; (mov r8, r8)
   15728:	e002      	b.n	15730 <http_client_callback+0x104>
            break;
   1572a:	46c0      	nop			; (mov r8, r8)
   1572c:	e000      	b.n	15730 <http_client_callback+0x104>
            break;
   1572e:	46c0      	nop			; (mov r8, r8)
    }
}
   15730:	46bd      	mov	sp, r7
   15732:	b005      	add	sp, #20
   15734:	bd90      	pop	{r4, r7, pc}
   15736:	46c0      	nop			; (mov r8, r8)
   15738:	00036400 	.word	0x00036400
   1573c:	00035d3c 	.word	0x00035d3c
   15740:	0001d291 	.word	0x0001d291
   15744:	00035d74 	.word	0x00035d74
   15748:	0001504d 	.word	0x0001504d
   1574c:	00035da0 	.word	0x00035da0
   15750:	200006f4 	.word	0x200006f4
   15754:	200006f8 	.word	0x200006f8
   15758:	00015459 	.word	0x00015459
   1575c:	00035ddc 	.word	0x00035ddc
   15760:	00015075 	.word	0x00015075
   15764:	200006d0 	.word	0x200006d0
   15768:	0002d73d 	.word	0x0002d73d
   1576c:	00015019 	.word	0x00015019
   15770:	0001539d 	.word	0x0001539d

00015774 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   15774:	b580      	push	{r7, lr}
   15776:	b082      	sub	sp, #8
   15778:	af00      	add	r7, sp, #0
   1577a:	603a      	str	r2, [r7, #0]
   1577c:	1dfb      	adds	r3, r7, #7
   1577e:	1c02      	adds	r2, r0, #0
   15780:	701a      	strb	r2, [r3, #0]
   15782:	1dbb      	adds	r3, r7, #6
   15784:	1c0a      	adds	r2, r1, #0
   15786:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   15788:	683a      	ldr	r2, [r7, #0]
   1578a:	1dbb      	adds	r3, r7, #6
   1578c:	7819      	ldrb	r1, [r3, #0]
   1578e:	1dfb      	adds	r3, r7, #7
   15790:	781b      	ldrb	r3, [r3, #0]
   15792:	b25b      	sxtb	r3, r3
   15794:	0018      	movs	r0, r3
   15796:	4b03      	ldr	r3, [pc, #12]	; (157a4 <socket_cb+0x30>)
   15798:	4798      	blx	r3
}
   1579a:	46c0      	nop			; (mov r8, r8)
   1579c:	46bd      	mov	sp, r7
   1579e:	b002      	add	sp, #8
   157a0:	bd80      	pop	{r7, pc}
   157a2:	46c0      	nop			; (mov r8, r8)
   157a4:	000300a1 	.word	0x000300a1

000157a8 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   157a8:	b5b0      	push	{r4, r5, r7, lr}
   157aa:	b086      	sub	sp, #24
   157ac:	af04      	add	r7, sp, #16
   157ae:	6078      	str	r0, [r7, #4]
   157b0:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   157b2:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   157b4:	22ff      	movs	r2, #255	; 0xff
   157b6:	4013      	ands	r3, r2
   157b8:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   157ba:	683b      	ldr	r3, [r7, #0]
   157bc:	0a1b      	lsrs	r3, r3, #8
   157be:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   157c0:	23ff      	movs	r3, #255	; 0xff
   157c2:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   157c4:	683a      	ldr	r2, [r7, #0]
   157c6:	0c12      	lsrs	r2, r2, #16
   157c8:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   157ca:	22ff      	movs	r2, #255	; 0xff
   157cc:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   157ce:	6839      	ldr	r1, [r7, #0]
   157d0:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   157d2:	000d      	movs	r5, r1
   157d4:	6878      	ldr	r0, [r7, #4]
   157d6:	4909      	ldr	r1, [pc, #36]	; (157fc <resolve_cb+0x54>)
   157d8:	9502      	str	r5, [sp, #8]
   157da:	9201      	str	r2, [sp, #4]
   157dc:	9300      	str	r3, [sp, #0]
   157de:	0023      	movs	r3, r4
   157e0:	0002      	movs	r2, r0
   157e2:	2001      	movs	r0, #1
   157e4:	4c06      	ldr	r4, [pc, #24]	; (15800 <resolve_cb+0x58>)
   157e6:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   157e8:	683a      	ldr	r2, [r7, #0]
   157ea:	687b      	ldr	r3, [r7, #4]
   157ec:	0011      	movs	r1, r2
   157ee:	0018      	movs	r0, r3
   157f0:	4b04      	ldr	r3, [pc, #16]	; (15804 <resolve_cb+0x5c>)
   157f2:	4798      	blx	r3
}
   157f4:	46c0      	nop			; (mov r8, r8)
   157f6:	46bd      	mov	sp, r7
   157f8:	b002      	add	sp, #8
   157fa:	bdb0      	pop	{r4, r5, r7, pc}
   157fc:	00035e0c 	.word	0x00035e0c
   15800:	0001d291 	.word	0x0001d291
   15804:	00030205 	.word	0x00030205

00015808 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   15808:	b590      	push	{r4, r7, lr}
   1580a:	b087      	sub	sp, #28
   1580c:	af02      	add	r7, sp, #8
   1580e:	0002      	movs	r2, r0
   15810:	6039      	str	r1, [r7, #0]
   15812:	1dfb      	adds	r3, r7, #7
   15814:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   15816:	1dfb      	adds	r3, r7, #7
   15818:	781b      	ldrb	r3, [r3, #0]
   1581a:	2b2c      	cmp	r3, #44	; 0x2c
   1581c:	d002      	beq.n	15824 <wifi_cb+0x1c>
   1581e:	2b32      	cmp	r3, #50	; 0x32
   15820:	d03d      	beq.n	1589e <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   15822:	e06f      	b.n	15904 <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   15824:	683b      	ldr	r3, [r7, #0]
   15826:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   15828:	68fb      	ldr	r3, [r7, #12]
   1582a:	781b      	ldrb	r3, [r3, #0]
   1582c:	2b01      	cmp	r3, #1
   1582e:	d107      	bne.n	15840 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   15830:	4b36      	ldr	r3, [pc, #216]	; (1590c <wifi_cb+0x104>)
   15832:	0019      	movs	r1, r3
   15834:	2001      	movs	r0, #1
   15836:	4b36      	ldr	r3, [pc, #216]	; (15910 <wifi_cb+0x108>)
   15838:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   1583a:	4b36      	ldr	r3, [pc, #216]	; (15914 <wifi_cb+0x10c>)
   1583c:	4798      	blx	r3
            break;
   1583e:	e05e      	b.n	158fe <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   15840:	68fb      	ldr	r3, [r7, #12]
   15842:	781b      	ldrb	r3, [r3, #0]
   15844:	2b00      	cmp	r3, #0
   15846:	d15a      	bne.n	158fe <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   15848:	4b33      	ldr	r3, [pc, #204]	; (15918 <wifi_cb+0x110>)
   1584a:	0019      	movs	r1, r3
   1584c:	2001      	movs	r0, #1
   1584e:	4b30      	ldr	r3, [pc, #192]	; (15910 <wifi_cb+0x108>)
   15850:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   15852:	2002      	movs	r0, #2
   15854:	4b31      	ldr	r3, [pc, #196]	; (1591c <wifi_cb+0x114>)
   15856:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   15858:	2008      	movs	r0, #8
   1585a:	4b31      	ldr	r3, [pc, #196]	; (15920 <wifi_cb+0x118>)
   1585c:	4798      	blx	r3
   1585e:	1e03      	subs	r3, r0, #0
   15860:	d006      	beq.n	15870 <wifi_cb+0x68>
                    f_close(&file_object);
   15862:	4b30      	ldr	r3, [pc, #192]	; (15924 <wifi_cb+0x11c>)
   15864:	0018      	movs	r0, r3
   15866:	4b30      	ldr	r3, [pc, #192]	; (15928 <wifi_cb+0x120>)
   15868:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   1586a:	2008      	movs	r0, #8
   1586c:	4b2b      	ldr	r3, [pc, #172]	; (1591c <wifi_cb+0x114>)
   1586e:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   15870:	2004      	movs	r0, #4
   15872:	4b2b      	ldr	r3, [pc, #172]	; (15920 <wifi_cb+0x118>)
   15874:	4798      	blx	r3
   15876:	1e03      	subs	r3, r0, #0
   15878:	d002      	beq.n	15880 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   1587a:	2004      	movs	r0, #4
   1587c:	4b27      	ldr	r3, [pc, #156]	; (1591c <wifi_cb+0x114>)
   1587e:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   15880:	4b2a      	ldr	r3, [pc, #168]	; (1592c <wifi_cb+0x124>)
   15882:	2101      	movs	r1, #1
   15884:	0018      	movs	r0, r3
   15886:	4b2a      	ldr	r3, [pc, #168]	; (15930 <wifi_cb+0x128>)
   15888:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   1588a:	4a2a      	ldr	r2, [pc, #168]	; (15934 <wifi_cb+0x12c>)
   1588c:	482a      	ldr	r0, [pc, #168]	; (15938 <wifi_cb+0x130>)
   1588e:	23ff      	movs	r3, #255	; 0xff
   15890:	9300      	str	r3, [sp, #0]
   15892:	0013      	movs	r3, r2
   15894:	2202      	movs	r2, #2
   15896:	2107      	movs	r1, #7
   15898:	4c28      	ldr	r4, [pc, #160]	; (1593c <wifi_cb+0x134>)
   1589a:	47a0      	blx	r4
            break;
   1589c:	e02f      	b.n	158fe <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   1589e:	683b      	ldr	r3, [r7, #0]
   158a0:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   158a2:	68bb      	ldr	r3, [r7, #8]
   158a4:	781b      	ldrb	r3, [r3, #0]
   158a6:	0018      	movs	r0, r3
   158a8:	68bb      	ldr	r3, [r7, #8]
   158aa:	3301      	adds	r3, #1
   158ac:	781b      	ldrb	r3, [r3, #0]
   158ae:	001c      	movs	r4, r3
   158b0:	68bb      	ldr	r3, [r7, #8]
   158b2:	3302      	adds	r3, #2
   158b4:	781b      	ldrb	r3, [r3, #0]
   158b6:	001a      	movs	r2, r3
   158b8:	68bb      	ldr	r3, [r7, #8]
   158ba:	3303      	adds	r3, #3
   158bc:	781b      	ldrb	r3, [r3, #0]
   158be:	4920      	ldr	r1, [pc, #128]	; (15940 <wifi_cb+0x138>)
   158c0:	9301      	str	r3, [sp, #4]
   158c2:	9200      	str	r2, [sp, #0]
   158c4:	0023      	movs	r3, r4
   158c6:	0002      	movs	r2, r0
   158c8:	2001      	movs	r0, #1
   158ca:	4c11      	ldr	r4, [pc, #68]	; (15910 <wifi_cb+0x108>)
   158cc:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   158ce:	2002      	movs	r0, #2
   158d0:	4b1c      	ldr	r3, [pc, #112]	; (15944 <wifi_cb+0x13c>)
   158d2:	4798      	blx	r3
            if (do_download_flag == 1) {
   158d4:	4b1c      	ldr	r3, [pc, #112]	; (15948 <wifi_cb+0x140>)
   158d6:	781b      	ldrb	r3, [r3, #0]
   158d8:	2b01      	cmp	r3, #1
   158da:	d102      	bne.n	158e2 <wifi_cb+0xda>
                start_download();
   158dc:	4b1b      	ldr	r3, [pc, #108]	; (1594c <wifi_cb+0x144>)
   158de:	4798      	blx	r3
        } break;
   158e0:	e00f      	b.n	15902 <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   158e2:	4a1b      	ldr	r2, [pc, #108]	; (15950 <wifi_cb+0x148>)
   158e4:	4b11      	ldr	r3, [pc, #68]	; (1592c <wifi_cb+0x124>)
   158e6:	0011      	movs	r1, r2
   158e8:	0018      	movs	r0, r3
   158ea:	4b1a      	ldr	r3, [pc, #104]	; (15954 <wifi_cb+0x14c>)
   158ec:	4798      	blx	r3
   158ee:	1e03      	subs	r3, r0, #0
   158f0:	d007      	beq.n	15902 <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   158f2:	4b19      	ldr	r3, [pc, #100]	; (15958 <wifi_cb+0x150>)
   158f4:	0019      	movs	r1, r3
   158f6:	2001      	movs	r0, #1
   158f8:	4b05      	ldr	r3, [pc, #20]	; (15910 <wifi_cb+0x108>)
   158fa:	4798      	blx	r3
        } break;
   158fc:	e001      	b.n	15902 <wifi_cb+0xfa>
            break;
   158fe:	46c0      	nop			; (mov r8, r8)
   15900:	e000      	b.n	15904 <wifi_cb+0xfc>
        } break;
   15902:	46c0      	nop			; (mov r8, r8)
    }
}
   15904:	46c0      	nop			; (mov r8, r8)
   15906:	46bd      	mov	sp, r7
   15908:	b005      	add	sp, #20
   1590a:	bd90      	pop	{r4, r7, pc}
   1590c:	00035e3c 	.word	0x00035e3c
   15910:	0001d291 	.word	0x0001d291
   15914:	00021871 	.word	0x00021871
   15918:	00035e5c 	.word	0x00035e5c
   1591c:	00015019 	.word	0x00015019
   15920:	00015075 	.word	0x00015075
   15924:	200006d0 	.word	0x200006d0
   15928:	0002d73d 	.word	0x0002d73d
   1592c:	200006fc 	.word	0x200006fc
   15930:	0002ed4d 	.word	0x0002ed4d
   15934:	00035e80 	.word	0x00035e80
   15938:	00035e8c 	.word	0x00035e8c
   1593c:	0002139d 	.word	0x0002139d
   15940:	00035e94 	.word	0x00035e94
   15944:	0001504d 	.word	0x0001504d
   15948:	2000049c 	.word	0x2000049c
   1594c:	0001539d 	.word	0x0001539d
   15950:	00035ab8 	.word	0x00035ab8
   15954:	0002ec19 	.word	0x0002ec19
   15958:	00035ebc 	.word	0x00035ebc

0001595c <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   1595c:	b590      	push	{r4, r7, lr}
   1595e:	b083      	sub	sp, #12
   15960:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   15962:	4b29      	ldr	r3, [pc, #164]	; (15a08 <init_storage+0xac>)
   15964:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   15966:	4b29      	ldr	r3, [pc, #164]	; (15a0c <init_storage+0xb0>)
   15968:	0019      	movs	r1, r3
   1596a:	2001      	movs	r0, #1
   1596c:	4b28      	ldr	r3, [pc, #160]	; (15a10 <init_storage+0xb4>)
   1596e:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   15970:	1dfc      	adds	r4, r7, #7
   15972:	2000      	movs	r0, #0
   15974:	4b27      	ldr	r3, [pc, #156]	; (15a14 <init_storage+0xb8>)
   15976:	4798      	blx	r3
   15978:	0003      	movs	r3, r0
   1597a:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   1597c:	1dfb      	adds	r3, r7, #7
   1597e:	781b      	ldrb	r3, [r3, #0]
   15980:	2b01      	cmp	r3, #1
   15982:	d110      	bne.n	159a6 <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   15984:	4b24      	ldr	r3, [pc, #144]	; (15a18 <init_storage+0xbc>)
   15986:	0019      	movs	r1, r3
   15988:	2001      	movs	r0, #1
   1598a:	4b21      	ldr	r3, [pc, #132]	; (15a10 <init_storage+0xb4>)
   1598c:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   1598e:	4b23      	ldr	r3, [pc, #140]	; (15a1c <init_storage+0xc0>)
   15990:	0019      	movs	r1, r3
   15992:	2001      	movs	r0, #1
   15994:	4b1e      	ldr	r3, [pc, #120]	; (15a10 <init_storage+0xb4>)
   15996:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   15998:	46c0      	nop			; (mov r8, r8)
   1599a:	2000      	movs	r0, #0
   1599c:	4b20      	ldr	r3, [pc, #128]	; (15a20 <init_storage+0xc4>)
   1599e:	4798      	blx	r3
   159a0:	0003      	movs	r3, r0
   159a2:	2b02      	cmp	r3, #2
   159a4:	d1f9      	bne.n	1599a <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   159a6:	1dfb      	adds	r3, r7, #7
   159a8:	781b      	ldrb	r3, [r3, #0]
   159aa:	2b00      	cmp	r3, #0
   159ac:	d1e0      	bne.n	15970 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   159ae:	4b1d      	ldr	r3, [pc, #116]	; (15a24 <init_storage+0xc8>)
   159b0:	0019      	movs	r1, r3
   159b2:	2001      	movs	r0, #1
   159b4:	4b16      	ldr	r3, [pc, #88]	; (15a10 <init_storage+0xb4>)
   159b6:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   159b8:	238c      	movs	r3, #140	; 0x8c
   159ba:	009a      	lsls	r2, r3, #2
   159bc:	4b1a      	ldr	r3, [pc, #104]	; (15a28 <init_storage+0xcc>)
   159be:	2100      	movs	r1, #0
   159c0:	0018      	movs	r0, r3
   159c2:	4b1a      	ldr	r3, [pc, #104]	; (15a2c <init_storage+0xd0>)
   159c4:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   159c6:	1dbc      	adds	r4, r7, #6
   159c8:	4b17      	ldr	r3, [pc, #92]	; (15a28 <init_storage+0xcc>)
   159ca:	0019      	movs	r1, r3
   159cc:	2000      	movs	r0, #0
   159ce:	4b18      	ldr	r3, [pc, #96]	; (15a30 <init_storage+0xd4>)
   159d0:	4798      	blx	r3
   159d2:	0003      	movs	r3, r0
   159d4:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   159d6:	1dbb      	adds	r3, r7, #6
   159d8:	781b      	ldrb	r3, [r3, #0]
   159da:	2b0b      	cmp	r3, #11
   159dc:	d107      	bne.n	159ee <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   159de:	1dbb      	adds	r3, r7, #6
   159e0:	781a      	ldrb	r2, [r3, #0]
   159e2:	4b14      	ldr	r3, [pc, #80]	; (15a34 <init_storage+0xd8>)
   159e4:	0019      	movs	r1, r3
   159e6:	2001      	movs	r0, #1
   159e8:	4b09      	ldr	r3, [pc, #36]	; (15a10 <init_storage+0xb4>)
   159ea:	4798      	blx	r3
            return;
   159ec:	e008      	b.n	15a00 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   159ee:	4b12      	ldr	r3, [pc, #72]	; (15a38 <init_storage+0xdc>)
   159f0:	0019      	movs	r1, r3
   159f2:	2001      	movs	r0, #1
   159f4:	4b06      	ldr	r3, [pc, #24]	; (15a10 <init_storage+0xb4>)
   159f6:	4798      	blx	r3
        add_state(STORAGE_READY);
   159f8:	2001      	movs	r0, #1
   159fa:	4b10      	ldr	r3, [pc, #64]	; (15a3c <init_storage+0xe0>)
   159fc:	4798      	blx	r3
        return;
   159fe:	46c0      	nop			; (mov r8, r8)
    }
}
   15a00:	46bd      	mov	sp, r7
   15a02:	b003      	add	sp, #12
   15a04:	bd90      	pop	{r4, r7, pc}
   15a06:	46c0      	nop			; (mov r8, r8)
   15a08:	0001e0a9 	.word	0x0001e0a9
   15a0c:	00035ee0 	.word	0x00035ee0
   15a10:	0001d291 	.word	0x0001d291
   15a14:	0001e585 	.word	0x0001e585
   15a18:	00035f18 	.word	0x00035f18
   15a1c:	00035f40 	.word	0x00035f40
   15a20:	0001e0f9 	.word	0x0001e0f9
   15a24:	00035f74 	.word	0x00035f74
   15a28:	200004a0 	.word	0x200004a0
   15a2c:	0003431b 	.word	0x0003431b
   15a30:	0002cce5 	.word	0x0002cce5
   15a34:	00035f98 	.word	0x00035f98
   15a38:	00035fc8 	.word	0x00035fc8
   15a3c:	0001504d 	.word	0x0001504d

00015a40 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   15a40:	b580      	push	{r7, lr}
   15a42:	b082      	sub	sp, #8
   15a44:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   15a46:	1d3b      	adds	r3, r7, #4
   15a48:	0018      	movs	r0, r3
   15a4a:	4b08      	ldr	r3, [pc, #32]	; (15a6c <configure_timer+0x2c>)
   15a4c:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   15a4e:	1d3a      	adds	r2, r7, #4
   15a50:	4b07      	ldr	r3, [pc, #28]	; (15a70 <configure_timer+0x30>)
   15a52:	0011      	movs	r1, r2
   15a54:	0018      	movs	r0, r3
   15a56:	4b07      	ldr	r3, [pc, #28]	; (15a74 <configure_timer+0x34>)
   15a58:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   15a5a:	4b05      	ldr	r3, [pc, #20]	; (15a70 <configure_timer+0x30>)
   15a5c:	0018      	movs	r0, r3
   15a5e:	4b06      	ldr	r3, [pc, #24]	; (15a78 <configure_timer+0x38>)
   15a60:	4798      	blx	r3
}
   15a62:	46c0      	nop			; (mov r8, r8)
   15a64:	46bd      	mov	sp, r7
   15a66:	b002      	add	sp, #8
   15a68:	bd80      	pop	{r7, pc}
   15a6a:	46c0      	nop			; (mov r8, r8)
   15a6c:	00031835 	.word	0x00031835
   15a70:	20004660 	.word	0x20004660
   15a74:	00031859 	.word	0x00031859
   15a78:	00031945 	.word	0x00031945

00015a7c <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   15a7c:	b580      	push	{r7, lr}
   15a7e:	b088      	sub	sp, #32
   15a80:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   15a82:	003b      	movs	r3, r7
   15a84:	0018      	movs	r0, r3
   15a86:	4b12      	ldr	r3, [pc, #72]	; (15ad0 <configure_http_client+0x54>)
   15a88:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   15a8a:	003b      	movs	r3, r7
   15a8c:	2280      	movs	r2, #128	; 0x80
   15a8e:	0092      	lsls	r2, r2, #2
   15a90:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   15a92:	003b      	movs	r3, r7
   15a94:	4a0f      	ldr	r2, [pc, #60]	; (15ad4 <configure_http_client+0x58>)
   15a96:	605a      	str	r2, [r3, #4]
//     httpc_conf.port = 443;
//     httpc_conf.tls = 1;

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   15a98:	003a      	movs	r2, r7
   15a9a:	4b0f      	ldr	r3, [pc, #60]	; (15ad8 <configure_http_client+0x5c>)
   15a9c:	0011      	movs	r1, r2
   15a9e:	0018      	movs	r0, r3
   15aa0:	4b0e      	ldr	r3, [pc, #56]	; (15adc <configure_http_client+0x60>)
   15aa2:	4798      	blx	r3
   15aa4:	0003      	movs	r3, r0
   15aa6:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   15aa8:	69fb      	ldr	r3, [r7, #28]
   15aaa:	2b00      	cmp	r3, #0
   15aac:	da06      	bge.n	15abc <configure_http_client+0x40>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   15aae:	69fa      	ldr	r2, [r7, #28]
   15ab0:	4b0b      	ldr	r3, [pc, #44]	; (15ae0 <configure_http_client+0x64>)
   15ab2:	0019      	movs	r1, r3
   15ab4:	2001      	movs	r0, #1
   15ab6:	4b0b      	ldr	r3, [pc, #44]	; (15ae4 <configure_http_client+0x68>)
   15ab8:	4798      	blx	r3
        while (1) {
   15aba:	e7fe      	b.n	15aba <configure_http_client+0x3e>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   15abc:	4a0a      	ldr	r2, [pc, #40]	; (15ae8 <configure_http_client+0x6c>)
   15abe:	4b06      	ldr	r3, [pc, #24]	; (15ad8 <configure_http_client+0x5c>)
   15ac0:	0011      	movs	r1, r2
   15ac2:	0018      	movs	r0, r3
   15ac4:	4b09      	ldr	r3, [pc, #36]	; (15aec <configure_http_client+0x70>)
   15ac6:	4798      	blx	r3
}
   15ac8:	46c0      	nop			; (mov r8, r8)
   15aca:	46bd      	mov	sp, r7
   15acc:	b008      	add	sp, #32
   15ace:	bd80      	pop	{r7, pc}
   15ad0:	0002fec9 	.word	0x0002fec9
   15ad4:	20004660 	.word	0x20004660
   15ad8:	200046b8 	.word	0x200046b8
   15adc:	0002ff15 	.word	0x0002ff15
   15ae0:	00035fec 	.word	0x00035fec
   15ae4:	0001d291 	.word	0x0001d291
   15ae8:	0001562d 	.word	0x0001562d
   15aec:	00030001 	.word	0x00030001

00015af0 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   15af0:	b580      	push	{r7, lr}
   15af2:	b082      	sub	sp, #8
   15af4:	af00      	add	r7, sp, #0
   15af6:	603a      	str	r2, [r7, #0]
   15af8:	1dfb      	adds	r3, r7, #7
   15afa:	1c02      	adds	r2, r0, #0
   15afc:	701a      	strb	r2, [r3, #0]
   15afe:	1dbb      	adds	r3, r7, #6
   15b00:	1c0a      	adds	r2, r1, #0
   15b02:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   15b04:	683a      	ldr	r2, [r7, #0]
   15b06:	1dbb      	adds	r3, r7, #6
   15b08:	7819      	ldrb	r1, [r3, #0]
   15b0a:	1dfb      	adds	r3, r7, #7
   15b0c:	781b      	ldrb	r3, [r3, #0]
   15b0e:	b25b      	sxtb	r3, r3
   15b10:	0018      	movs	r0, r3
   15b12:	4b03      	ldr	r3, [pc, #12]	; (15b20 <socket_event_handler+0x30>)
   15b14:	4798      	blx	r3
}
   15b16:	46c0      	nop			; (mov r8, r8)
   15b18:	46bd      	mov	sp, r7
   15b1a:	b002      	add	sp, #8
   15b1c:	bd80      	pop	{r7, pc}
   15b1e:	46c0      	nop			; (mov r8, r8)
   15b20:	0002ebc1 	.word	0x0002ebc1

00015b24 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   15b24:	b580      	push	{r7, lr}
   15b26:	b082      	sub	sp, #8
   15b28:	af00      	add	r7, sp, #0
   15b2a:	6078      	str	r0, [r7, #4]
   15b2c:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   15b2e:	683a      	ldr	r2, [r7, #0]
   15b30:	687b      	ldr	r3, [r7, #4]
   15b32:	0011      	movs	r1, r2
   15b34:	0018      	movs	r0, r3
   15b36:	4b03      	ldr	r3, [pc, #12]	; (15b44 <socket_resolve_handler+0x20>)
   15b38:	4798      	blx	r3
}
   15b3a:	46c0      	nop			; (mov r8, r8)
   15b3c:	46bd      	mov	sp, r7
   15b3e:	b002      	add	sp, #8
   15b40:	bd80      	pop	{r7, pc}
   15b42:	46c0      	nop			; (mov r8, r8)
   15b44:	0002ebf5 	.word	0x0002ebf5

00015b48 <SubscriberHandlerMasterControl>:
        }
    }
}

void SubscriberHandlerMasterControl(MessageData *msgData)
{
   15b48:	b580      	push	{r7, lr}
   15b4a:	b082      	sub	sp, #8
   15b4c:	af00      	add	r7, sp, #0
   15b4e:	6078      	str	r0, [r7, #4]
// 	LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
// 	LogMessage(LOG_DEBUG_LVL, " >> ");
// 	LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);

	// Handle LedData message
	if (strncmp((char *)msgData->topicName->lenstring.data, MASTER_TOPIC, msgData->message->payloadlen) == 0) {
   15b50:	687b      	ldr	r3, [r7, #4]
   15b52:	685b      	ldr	r3, [r3, #4]
   15b54:	6898      	ldr	r0, [r3, #8]
   15b56:	687b      	ldr	r3, [r7, #4]
   15b58:	681b      	ldr	r3, [r3, #0]
   15b5a:	68da      	ldr	r2, [r3, #12]
   15b5c:	4b14      	ldr	r3, [pc, #80]	; (15bb0 <SubscriberHandlerMasterControl+0x68>)
   15b5e:	0019      	movs	r1, r3
   15b60:	4b14      	ldr	r3, [pc, #80]	; (15bb4 <SubscriberHandlerMasterControl+0x6c>)
   15b62:	4798      	blx	r3
   15b64:	1e03      	subs	r3, r0, #0
   15b66:	d11e      	bne.n	15ba6 <SubscriberHandlerMasterControl+0x5e>
		if (strncmp((char *)msgData->message->payload, MASTER_TOPIC_OFF, msgData->message->payloadlen) == 0) {
   15b68:	687b      	ldr	r3, [r7, #4]
   15b6a:	681b      	ldr	r3, [r3, #0]
   15b6c:	6898      	ldr	r0, [r3, #8]
   15b6e:	687b      	ldr	r3, [r7, #4]
   15b70:	681b      	ldr	r3, [r3, #0]
   15b72:	68da      	ldr	r2, [r3, #12]
   15b74:	4b10      	ldr	r3, [pc, #64]	; (15bb8 <SubscriberHandlerMasterControl+0x70>)
   15b76:	0019      	movs	r1, r3
   15b78:	4b0e      	ldr	r3, [pc, #56]	; (15bb4 <SubscriberHandlerMasterControl+0x6c>)
   15b7a:	4798      	blx	r3
   15b7c:	1e03      	subs	r3, r0, #0
   15b7e:	d103      	bne.n	15b88 <SubscriberHandlerMasterControl+0x40>
			masterControl = 0;
   15b80:	4b0e      	ldr	r3, [pc, #56]	; (15bbc <SubscriberHandlerMasterControl+0x74>)
   15b82:	2200      	movs	r2, #0
   15b84:	701a      	strb	r2, [r3, #0]
			} else if (strncmp((char *)msgData->message->payload, MASTER_TOPIC_ON, msgData->message->payloadlen) == 0) {
			masterControl = 1;
		}
	}
}
   15b86:	e00e      	b.n	15ba6 <SubscriberHandlerMasterControl+0x5e>
			} else if (strncmp((char *)msgData->message->payload, MASTER_TOPIC_ON, msgData->message->payloadlen) == 0) {
   15b88:	687b      	ldr	r3, [r7, #4]
   15b8a:	681b      	ldr	r3, [r3, #0]
   15b8c:	6898      	ldr	r0, [r3, #8]
   15b8e:	687b      	ldr	r3, [r7, #4]
   15b90:	681b      	ldr	r3, [r3, #0]
   15b92:	68da      	ldr	r2, [r3, #12]
   15b94:	4b0a      	ldr	r3, [pc, #40]	; (15bc0 <SubscriberHandlerMasterControl+0x78>)
   15b96:	0019      	movs	r1, r3
   15b98:	4b06      	ldr	r3, [pc, #24]	; (15bb4 <SubscriberHandlerMasterControl+0x6c>)
   15b9a:	4798      	blx	r3
   15b9c:	1e03      	subs	r3, r0, #0
   15b9e:	d102      	bne.n	15ba6 <SubscriberHandlerMasterControl+0x5e>
			masterControl = 1;
   15ba0:	4b06      	ldr	r3, [pc, #24]	; (15bbc <SubscriberHandlerMasterControl+0x74>)
   15ba2:	2201      	movs	r2, #1
   15ba4:	701a      	strb	r2, [r3, #0]
}
   15ba6:	46c0      	nop			; (mov r8, r8)
   15ba8:	46bd      	mov	sp, r7
   15baa:	b002      	add	sp, #8
   15bac:	bd80      	pop	{r7, pc}
   15bae:	46c0      	nop			; (mov r8, r8)
   15bb0:	00036070 	.word	0x00036070
   15bb4:	000346e1 	.word	0x000346e1
   15bb8:	00036060 	.word	0x00036060
   15bbc:	20000014 	.word	0x20000014
   15bc0:	00036068 	.word	0x00036068

00015bc4 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   15bc4:	b590      	push	{r4, r7, lr}
   15bc6:	b08b      	sub	sp, #44	; 0x2c
   15bc8:	af06      	add	r7, sp, #24
   15bca:	60f8      	str	r0, [r7, #12]
   15bcc:	60b9      	str	r1, [r7, #8]
   15bce:	607a      	str	r2, [r7, #4]
    switch (type) {
   15bd0:	68bb      	ldr	r3, [r7, #8]
   15bd2:	2b01      	cmp	r3, #1
   15bd4:	d03b      	beq.n	15c4e <mqtt_callback+0x8a>
   15bd6:	2b05      	cmp	r3, #5
   15bd8:	d052      	beq.n	15c80 <mqtt_callback+0xbc>
   15bda:	2b00      	cmp	r3, #0
   15bdc:	d000      	beq.n	15be0 <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   15bde:	e055      	b.n	15c8c <mqtt_callback+0xc8>
            if (data->sock_connected.result >= 0) {
   15be0:	687b      	ldr	r3, [r7, #4]
   15be2:	681b      	ldr	r3, [r3, #0]
   15be4:	2b00      	cmp	r3, #0
   15be6:	db25      	blt.n	15c34 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   15be8:	4b2a      	ldr	r3, [pc, #168]	; (15c94 <mqtt_callback+0xd0>)
   15bea:	0019      	movs	r1, r3
   15bec:	2001      	movs	r0, #1
   15bee:	4b2a      	ldr	r3, [pc, #168]	; (15c98 <mqtt_callback+0xd4>)
   15bf0:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   15bf2:	492a      	ldr	r1, [pc, #168]	; (15c9c <mqtt_callback+0xd8>)
   15bf4:	4a2a      	ldr	r2, [pc, #168]	; (15ca0 <mqtt_callback+0xdc>)
   15bf6:	68f8      	ldr	r0, [r7, #12]
   15bf8:	2300      	movs	r3, #0
   15bfa:	9305      	str	r3, [sp, #20]
   15bfc:	2300      	movs	r3, #0
   15bfe:	9304      	str	r3, [sp, #16]
   15c00:	2300      	movs	r3, #0
   15c02:	9303      	str	r3, [sp, #12]
   15c04:	2300      	movs	r3, #0
   15c06:	9302      	str	r3, [sp, #8]
   15c08:	2300      	movs	r3, #0
   15c0a:	9301      	str	r3, [sp, #4]
   15c0c:	4b24      	ldr	r3, [pc, #144]	; (15ca0 <mqtt_callback+0xdc>)
   15c0e:	9300      	str	r3, [sp, #0]
   15c10:	000b      	movs	r3, r1
   15c12:	2101      	movs	r1, #1
   15c14:	4c23      	ldr	r4, [pc, #140]	; (15ca4 <mqtt_callback+0xe0>)
   15c16:	47a0      	blx	r4
   15c18:	1e03      	subs	r3, r0, #0
   15c1a:	d005      	beq.n	15c28 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   15c1c:	4b22      	ldr	r3, [pc, #136]	; (15ca8 <mqtt_callback+0xe4>)
   15c1e:	0019      	movs	r1, r3
   15c20:	2001      	movs	r0, #1
   15c22:	4b1d      	ldr	r3, [pc, #116]	; (15c98 <mqtt_callback+0xd4>)
   15c24:	4798      	blx	r3
        } break;
   15c26:	e031      	b.n	15c8c <mqtt_callback+0xc8>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   15c28:	4b20      	ldr	r3, [pc, #128]	; (15cac <mqtt_callback+0xe8>)
   15c2a:	0019      	movs	r1, r3
   15c2c:	2001      	movs	r0, #1
   15c2e:	4b1a      	ldr	r3, [pc, #104]	; (15c98 <mqtt_callback+0xd4>)
   15c30:	4798      	blx	r3
        } break;
   15c32:	e02b      	b.n	15c8c <mqtt_callback+0xc8>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   15c34:	4a1e      	ldr	r2, [pc, #120]	; (15cb0 <mqtt_callback+0xec>)
   15c36:	4b1f      	ldr	r3, [pc, #124]	; (15cb4 <mqtt_callback+0xf0>)
   15c38:	0019      	movs	r1, r3
   15c3a:	2001      	movs	r0, #1
   15c3c:	4b16      	ldr	r3, [pc, #88]	; (15c98 <mqtt_callback+0xd4>)
   15c3e:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   15c40:	4a1b      	ldr	r2, [pc, #108]	; (15cb0 <mqtt_callback+0xec>)
   15c42:	68fb      	ldr	r3, [r7, #12]
   15c44:	0011      	movs	r1, r2
   15c46:	0018      	movs	r0, r3
   15c48:	4b1b      	ldr	r3, [pc, #108]	; (15cb8 <mqtt_callback+0xf4>)
   15c4a:	4798      	blx	r3
        } break;
   15c4c:	e01e      	b.n	15c8c <mqtt_callback+0xc8>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   15c4e:	687b      	ldr	r3, [r7, #4]
   15c50:	781b      	ldrb	r3, [r3, #0]
   15c52:	2b00      	cmp	r3, #0
   15c54:	d10b      	bne.n	15c6e <mqtt_callback+0xaa>
					mqtt_subscribe(module_inst,MASTER_TOPIC,2,SubscriberHandlerMasterControl);
   15c56:	4b19      	ldr	r3, [pc, #100]	; (15cbc <mqtt_callback+0xf8>)
   15c58:	4919      	ldr	r1, [pc, #100]	; (15cc0 <mqtt_callback+0xfc>)
   15c5a:	68f8      	ldr	r0, [r7, #12]
   15c5c:	2202      	movs	r2, #2
   15c5e:	4c19      	ldr	r4, [pc, #100]	; (15cc4 <mqtt_callback+0x100>)
   15c60:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   15c62:	4b19      	ldr	r3, [pc, #100]	; (15cc8 <mqtt_callback+0x104>)
   15c64:	0019      	movs	r1, r3
   15c66:	2001      	movs	r0, #1
   15c68:	4b0b      	ldr	r3, [pc, #44]	; (15c98 <mqtt_callback+0xd4>)
   15c6a:	4798      	blx	r3
            break;
   15c6c:	e00e      	b.n	15c8c <mqtt_callback+0xc8>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   15c6e:	687b      	ldr	r3, [r7, #4]
   15c70:	781b      	ldrb	r3, [r3, #0]
   15c72:	001a      	movs	r2, r3
   15c74:	4b15      	ldr	r3, [pc, #84]	; (15ccc <mqtt_callback+0x108>)
   15c76:	0019      	movs	r1, r3
   15c78:	2001      	movs	r0, #1
   15c7a:	4b07      	ldr	r3, [pc, #28]	; (15c98 <mqtt_callback+0xd4>)
   15c7c:	4798      	blx	r3
            break;
   15c7e:	e005      	b.n	15c8c <mqtt_callback+0xc8>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   15c80:	4b13      	ldr	r3, [pc, #76]	; (15cd0 <mqtt_callback+0x10c>)
   15c82:	0019      	movs	r1, r3
   15c84:	2001      	movs	r0, #1
   15c86:	4b04      	ldr	r3, [pc, #16]	; (15c98 <mqtt_callback+0xd4>)
   15c88:	4798      	blx	r3
            break;
   15c8a:	46c0      	nop			; (mov r8, r8)
}
   15c8c:	46c0      	nop			; (mov r8, r8)
   15c8e:	46bd      	mov	sp, r7
   15c90:	b005      	add	sp, #20
   15c92:	bd90      	pop	{r4, r7, pc}
   15c94:	00036088 	.word	0x00036088
   15c98:	0001d291 	.word	0x0001d291
   15c9c:	000360a4 	.word	0x000360a4
   15ca0:	000360b4 	.word	0x000360b4
   15ca4:	0002ec61 	.word	0x0002ec61
   15ca8:	000360bc 	.word	0x000360bc
   15cac:	000360e4 	.word	0x000360e4
   15cb0:	00035ab8 	.word	0x00035ab8
   15cb4:	00036100 	.word	0x00036100
   15cb8:	0002ec19 	.word	0x0002ec19
   15cbc:	00015b49 	.word	0x00015b49
   15cc0:	00036070 	.word	0x00036070
   15cc4:	0002ee01 	.word	0x0002ee01
   15cc8:	00036138 	.word	0x00036138
   15ccc:	0003614c 	.word	0x0003614c
   15cd0:	00036180 	.word	0x00036180

00015cd4 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   15cd4:	b580      	push	{r7, lr}
   15cd6:	b088      	sub	sp, #32
   15cd8:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   15cda:	1d3b      	adds	r3, r7, #4
   15cdc:	0018      	movs	r0, r3
   15cde:	4b1f      	ldr	r3, [pc, #124]	; (15d5c <configure_mqtt+0x88>)
   15ce0:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   15ce2:	1d3b      	adds	r3, r7, #4
   15ce4:	4a1e      	ldr	r2, [pc, #120]	; (15d60 <configure_mqtt+0x8c>)
   15ce6:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   15ce8:	1d3b      	adds	r3, r7, #4
   15cea:	2280      	movs	r2, #128	; 0x80
   15cec:	0092      	lsls	r2, r2, #2
   15cee:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   15cf0:	1d3b      	adds	r3, r7, #4
   15cf2:	4a1c      	ldr	r2, [pc, #112]	; (15d64 <configure_mqtt+0x90>)
   15cf4:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   15cf6:	1d3b      	adds	r3, r7, #4
   15cf8:	2280      	movs	r2, #128	; 0x80
   15cfa:	0092      	lsls	r2, r2, #2
   15cfc:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   15cfe:	1d3b      	adds	r3, r7, #4
   15d00:	4a19      	ldr	r2, [pc, #100]	; (15d68 <configure_mqtt+0x94>)
   15d02:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   15d04:	1d3b      	adds	r3, r7, #4
   15d06:	4a19      	ldr	r2, [pc, #100]	; (15d6c <configure_mqtt+0x98>)
   15d08:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   15d0a:	1d3a      	adds	r2, r7, #4
   15d0c:	4b18      	ldr	r3, [pc, #96]	; (15d70 <configure_mqtt+0x9c>)
   15d0e:	0011      	movs	r1, r2
   15d10:	0018      	movs	r0, r3
   15d12:	4b18      	ldr	r3, [pc, #96]	; (15d74 <configure_mqtt+0xa0>)
   15d14:	4798      	blx	r3
   15d16:	0003      	movs	r3, r0
   15d18:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   15d1a:	69fb      	ldr	r3, [r7, #28]
   15d1c:	2b00      	cmp	r3, #0
   15d1e:	da06      	bge.n	15d2e <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   15d20:	69fa      	ldr	r2, [r7, #28]
   15d22:	4b15      	ldr	r3, [pc, #84]	; (15d78 <configure_mqtt+0xa4>)
   15d24:	0019      	movs	r1, r3
   15d26:	2001      	movs	r0, #1
   15d28:	4b14      	ldr	r3, [pc, #80]	; (15d7c <configure_mqtt+0xa8>)
   15d2a:	4798      	blx	r3
        while (1) {
   15d2c:	e7fe      	b.n	15d2c <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   15d2e:	4a14      	ldr	r2, [pc, #80]	; (15d80 <configure_mqtt+0xac>)
   15d30:	4b0f      	ldr	r3, [pc, #60]	; (15d70 <configure_mqtt+0x9c>)
   15d32:	0011      	movs	r1, r2
   15d34:	0018      	movs	r0, r3
   15d36:	4b13      	ldr	r3, [pc, #76]	; (15d84 <configure_mqtt+0xb0>)
   15d38:	4798      	blx	r3
   15d3a:	0003      	movs	r3, r0
   15d3c:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   15d3e:	69fb      	ldr	r3, [r7, #28]
   15d40:	2b00      	cmp	r3, #0
   15d42:	da06      	bge.n	15d52 <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   15d44:	69fa      	ldr	r2, [r7, #28]
   15d46:	4b10      	ldr	r3, [pc, #64]	; (15d88 <configure_mqtt+0xb4>)
   15d48:	0019      	movs	r1, r3
   15d4a:	2001      	movs	r0, #1
   15d4c:	4b0b      	ldr	r3, [pc, #44]	; (15d7c <configure_mqtt+0xa8>)
   15d4e:	4798      	blx	r3
        while (1) {
   15d50:	e7fe      	b.n	15d50 <configure_mqtt+0x7c>
        }
    }
}
   15d52:	46c0      	nop			; (mov r8, r8)
   15d54:	46bd      	mov	sp, r7
   15d56:	b008      	add	sp, #32
   15d58:	bd80      	pop	{r7, pc}
   15d5a:	46c0      	nop			; (mov r8, r8)
   15d5c:	0002eb59 	.word	0x0002eb59
   15d60:	20000734 	.word	0x20000734
   15d64:	20000934 	.word	0x20000934
   15d68:	0000075b 	.word	0x0000075b
   15d6c:	00001770 	.word	0x00001770
   15d70:	200006fc 	.word	0x200006fc
   15d74:	0002eaa9 	.word	0x0002eaa9
   15d78:	00036194 	.word	0x00036194
   15d7c:	0001d291 	.word	0x0001d291
   15d80:	00015bc5 	.word	0x00015bc5
   15d84:	0002eb99 	.word	0x0002eb99
   15d88:	000361c8 	.word	0x000361c8

00015d8c <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   15d8c:	b580      	push	{r7, lr}
   15d8e:	b084      	sub	sp, #16
   15d90:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   15d92:	1d3b      	adds	r3, r7, #4
   15d94:	0018      	movs	r0, r3
   15d96:	4b0b      	ldr	r3, [pc, #44]	; (15dc4 <configure_extint_channel+0x38>)
   15d98:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   15d9a:	1d3b      	adds	r3, r7, #4
   15d9c:	2237      	movs	r2, #55	; 0x37
   15d9e:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   15da0:	1d3b      	adds	r3, r7, #4
   15da2:	2200      	movs	r2, #0
   15da4:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   15da6:	1d3b      	adds	r3, r7, #4
   15da8:	2201      	movs	r2, #1
   15daa:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   15dac:	1d3b      	adds	r3, r7, #4
   15dae:	2202      	movs	r2, #2
   15db0:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   15db2:	1d3b      	adds	r3, r7, #4
   15db4:	0019      	movs	r1, r3
   15db6:	2007      	movs	r0, #7
   15db8:	4b03      	ldr	r3, [pc, #12]	; (15dc8 <configure_extint_channel+0x3c>)
   15dba:	4798      	blx	r3
}
   15dbc:	46c0      	nop			; (mov r8, r8)
   15dbe:	46bd      	mov	sp, r7
   15dc0:	b004      	add	sp, #16
   15dc2:	bd80      	pop	{r7, pc}
   15dc4:	00025c91 	.word	0x00025c91
   15dc8:	00025cc5 	.word	0x00025cc5

00015dcc <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   15dcc:	b580      	push	{r7, lr}
   15dce:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   15dd0:	4b06      	ldr	r3, [pc, #24]	; (15dec <configure_extint_callbacks+0x20>)
   15dd2:	2200      	movs	r2, #0
   15dd4:	2107      	movs	r1, #7
   15dd6:	0018      	movs	r0, r3
   15dd8:	4b05      	ldr	r3, [pc, #20]	; (15df0 <configure_extint_callbacks+0x24>)
   15dda:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   15ddc:	2100      	movs	r1, #0
   15dde:	2007      	movs	r0, #7
   15de0:	4b04      	ldr	r3, [pc, #16]	; (15df4 <configure_extint_callbacks+0x28>)
   15de2:	4798      	blx	r3
}
   15de4:	46c0      	nop			; (mov r8, r8)
   15de6:	46bd      	mov	sp, r7
   15de8:	bd80      	pop	{r7, pc}
   15dea:	46c0      	nop			; (mov r8, r8)
   15dec:	00015df9 	.word	0x00015df9
   15df0:	00025891 	.word	0x00025891
   15df4:	000258f5 	.word	0x000258f5

00015df8 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   15df8:	b5b0      	push	{r4, r5, r7, lr}
   15dfa:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   15dfc:	4b0c      	ldr	r3, [pc, #48]	; (15e30 <extint_detection_callback+0x38>)
   15dfe:	681b      	ldr	r3, [r3, #0]
   15e00:	1c5a      	adds	r2, r3, #1
   15e02:	4b0b      	ldr	r3, [pc, #44]	; (15e30 <extint_detection_callback+0x38>)
   15e04:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   15e06:	4b0a      	ldr	r3, [pc, #40]	; (15e30 <extint_detection_callback+0x38>)
   15e08:	681b      	ldr	r3, [r3, #0]
   15e0a:	2b28      	cmp	r3, #40	; 0x28
   15e0c:	d902      	bls.n	15e14 <extint_detection_callback+0x1c>
   15e0e:	4b08      	ldr	r3, [pc, #32]	; (15e30 <extint_detection_callback+0x38>)
   15e10:	2201      	movs	r2, #1
   15e12:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   15e14:	4b06      	ldr	r3, [pc, #24]	; (15e30 <extint_detection_callback+0x38>)
   15e16:	681b      	ldr	r3, [r3, #0]
   15e18:	4a06      	ldr	r2, [pc, #24]	; (15e34 <extint_detection_callback+0x3c>)
   15e1a:	4807      	ldr	r0, [pc, #28]	; (15e38 <extint_detection_callback+0x40>)
   15e1c:	213f      	movs	r1, #63	; 0x3f
   15e1e:	4c07      	ldr	r4, [pc, #28]	; (15e3c <extint_detection_callback+0x44>)
   15e20:	47a0      	blx	r4
    isPressed = true;
   15e22:	4b07      	ldr	r3, [pc, #28]	; (15e40 <extint_detection_callback+0x48>)
   15e24:	2201      	movs	r2, #1
   15e26:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   15e28:	46c0      	nop			; (mov r8, r8)
   15e2a:	46bd      	mov	sp, r7
   15e2c:	bdb0      	pop	{r4, r5, r7, pc}
   15e2e:	46c0      	nop			; (mov r8, r8)
   15e30:	20000098 	.word	0x20000098
   15e34:	000361fc 	.word	0x000361fc
   15e38:	20000058 	.word	0x20000058
   15e3c:	00034575 	.word	0x00034575
   15e40:	20000b34 	.word	0x20000b34

00015e44 <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   15e44:	b580      	push	{r7, lr}
   15e46:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   15e48:	4a15      	ldr	r2, [pc, #84]	; (15ea0 <HTTP_DownloadFileInit+0x5c>)
   15e4a:	4b16      	ldr	r3, [pc, #88]	; (15ea4 <HTTP_DownloadFileInit+0x60>)
   15e4c:	0011      	movs	r1, r2
   15e4e:	0018      	movs	r0, r3
   15e50:	4b15      	ldr	r3, [pc, #84]	; (15ea8 <HTTP_DownloadFileInit+0x64>)
   15e52:	4798      	blx	r3
   15e54:	1e03      	subs	r3, r0, #0
   15e56:	d008      	beq.n	15e6a <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   15e58:	4b14      	ldr	r3, [pc, #80]	; (15eac <HTTP_DownloadFileInit+0x68>)
   15e5a:	0019      	movs	r1, r3
   15e5c:	2001      	movs	r0, #1
   15e5e:	4b14      	ldr	r3, [pc, #80]	; (15eb0 <HTTP_DownloadFileInit+0x6c>)
   15e60:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   15e62:	e002      	b.n	15e6a <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   15e64:	2000      	movs	r0, #0
   15e66:	4b13      	ldr	r3, [pc, #76]	; (15eb4 <HTTP_DownloadFileInit+0x70>)
   15e68:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   15e6a:	4b0e      	ldr	r3, [pc, #56]	; (15ea4 <HTTP_DownloadFileInit+0x60>)
   15e6c:	2234      	movs	r2, #52	; 0x34
   15e6e:	5c9b      	ldrb	r3, [r3, r2]
   15e70:	2b00      	cmp	r3, #0
   15e72:	d1f7      	bne.n	15e64 <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   15e74:	4b10      	ldr	r3, [pc, #64]	; (15eb8 <HTTP_DownloadFileInit+0x74>)
   15e76:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   15e78:	4b10      	ldr	r3, [pc, #64]	; (15ebc <HTTP_DownloadFileInit+0x78>)
   15e7a:	2201      	movs	r2, #1
   15e7c:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   15e7e:	4a10      	ldr	r2, [pc, #64]	; (15ec0 <HTTP_DownloadFileInit+0x7c>)
   15e80:	4b10      	ldr	r3, [pc, #64]	; (15ec4 <HTTP_DownloadFileInit+0x80>)
   15e82:	0011      	movs	r1, r2
   15e84:	0018      	movs	r0, r3
   15e86:	4b10      	ldr	r3, [pc, #64]	; (15ec8 <HTTP_DownloadFileInit+0x84>)
   15e88:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   15e8a:	4b10      	ldr	r3, [pc, #64]	; (15ecc <HTTP_DownloadFileInit+0x88>)
   15e8c:	4798      	blx	r3

    start_download();
   15e8e:	4b10      	ldr	r3, [pc, #64]	; (15ed0 <HTTP_DownloadFileInit+0x8c>)
   15e90:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   15e92:	4b10      	ldr	r3, [pc, #64]	; (15ed4 <HTTP_DownloadFileInit+0x90>)
   15e94:	2203      	movs	r2, #3
   15e96:	701a      	strb	r2, [r3, #0]
}
   15e98:	46c0      	nop			; (mov r8, r8)
   15e9a:	46bd      	mov	sp, r7
   15e9c:	bd80      	pop	{r7, pc}
   15e9e:	46c0      	nop			; (mov r8, r8)
   15ea0:	00035ab8 	.word	0x00035ab8
   15ea4:	200006fc 	.word	0x200006fc
   15ea8:	0002ed4d 	.word	0x0002ed4d
   15eac:	00035ebc 	.word	0x00035ebc
   15eb0:	0001d291 	.word	0x0001d291
   15eb4:	00021381 	.word	0x00021381
   15eb8:	0002493d 	.word	0x0002493d
   15ebc:	2000049c 	.word	0x2000049c
   15ec0:	000157a9 	.word	0x000157a9
   15ec4:	00015775 	.word	0x00015775
   15ec8:	00024985 	.word	0x00024985
   15ecc:	000248ed 	.word	0x000248ed
   15ed0:	0001539d 	.word	0x0001539d
   15ed4:	20000474 	.word	0x20000474

00015ed8 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   15ed8:	b590      	push	{r4, r7, lr}
   15eda:	b085      	sub	sp, #20
   15edc:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   15ede:	e009      	b.n	15ef4 <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   15ee0:	2000      	movs	r0, #0
   15ee2:	4b28      	ldr	r3, [pc, #160]	; (15f84 <HTTP_DownloadFileTransaction+0xac>)
   15ee4:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   15ee6:	4b28      	ldr	r3, [pc, #160]	; (15f88 <HTTP_DownloadFileTransaction+0xb0>)
   15ee8:	0018      	movs	r0, r3
   15eea:	4b28      	ldr	r3, [pc, #160]	; (15f8c <HTTP_DownloadFileTransaction+0xb4>)
   15eec:	4798      	blx	r3
        vTaskDelay(5);
   15eee:	2005      	movs	r0, #5
   15ef0:	4b27      	ldr	r3, [pc, #156]	; (15f90 <HTTP_DownloadFileTransaction+0xb8>)
   15ef2:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   15ef4:	2010      	movs	r0, #16
   15ef6:	4b27      	ldr	r3, [pc, #156]	; (15f94 <HTTP_DownloadFileTransaction+0xbc>)
   15ef8:	4798      	blx	r3
   15efa:	0003      	movs	r3, r0
   15efc:	001a      	movs	r2, r3
   15efe:	2301      	movs	r3, #1
   15f00:	4053      	eors	r3, r2
   15f02:	b2db      	uxtb	r3, r3
   15f04:	2b00      	cmp	r3, #0
   15f06:	d009      	beq.n	15f1c <HTTP_DownloadFileTransaction+0x44>
   15f08:	2020      	movs	r0, #32
   15f0a:	4b22      	ldr	r3, [pc, #136]	; (15f94 <HTTP_DownloadFileTransaction+0xbc>)
   15f0c:	4798      	blx	r3
   15f0e:	0003      	movs	r3, r0
   15f10:	001a      	movs	r2, r3
   15f12:	2301      	movs	r3, #1
   15f14:	4053      	eors	r3, r2
   15f16:	b2db      	uxtb	r3, r3
   15f18:	2b00      	cmp	r3, #0
   15f1a:	d1e1      	bne.n	15ee0 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   15f1c:	4b1e      	ldr	r3, [pc, #120]	; (15f98 <HTTP_DownloadFileTransaction+0xc0>)
   15f1e:	4798      	blx	r3
    vTaskDelay(1000);
   15f20:	23fa      	movs	r3, #250	; 0xfa
   15f22:	009b      	lsls	r3, r3, #2
   15f24:	0018      	movs	r0, r3
   15f26:	4b1a      	ldr	r3, [pc, #104]	; (15f90 <HTTP_DownloadFileTransaction+0xb8>)
   15f28:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   15f2a:	4b1c      	ldr	r3, [pc, #112]	; (15f9c <HTTP_DownloadFileTransaction+0xc4>)
   15f2c:	2200      	movs	r2, #0
   15f2e:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   15f30:	003b      	movs	r3, r7
   15f32:	4a1b      	ldr	r2, [pc, #108]	; (15fa0 <HTTP_DownloadFileTransaction+0xc8>)
   15f34:	ca13      	ldmia	r2!, {r0, r1, r4}
   15f36:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   15f38:	003b      	movs	r3, r7
   15f3a:	2230      	movs	r2, #48	; 0x30
   15f3c:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   15f3e:	230f      	movs	r3, #15
   15f40:	18fc      	adds	r4, r7, r3
   15f42:	0039      	movs	r1, r7
   15f44:	4b17      	ldr	r3, [pc, #92]	; (15fa4 <HTTP_DownloadFileTransaction+0xcc>)
   15f46:	220a      	movs	r2, #10
   15f48:	0018      	movs	r0, r3
   15f4a:	4b17      	ldr	r3, [pc, #92]	; (15fa8 <HTTP_DownloadFileTransaction+0xd0>)
   15f4c:	4798      	blx	r3
   15f4e:	0003      	movs	r3, r0
   15f50:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   15f52:	230f      	movs	r3, #15
   15f54:	18fb      	adds	r3, r7, r3
   15f56:	781b      	ldrb	r3, [r3, #0]
   15f58:	2b00      	cmp	r3, #0
   15f5a:	d008      	beq.n	15f6e <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   15f5c:	230f      	movs	r3, #15
   15f5e:	18fb      	adds	r3, r7, r3
   15f60:	781a      	ldrb	r2, [r3, #0]
   15f62:	4b12      	ldr	r3, [pc, #72]	; (15fac <HTTP_DownloadFileTransaction+0xd4>)
   15f64:	0019      	movs	r1, r3
   15f66:	2000      	movs	r0, #0
   15f68:	4b11      	ldr	r3, [pc, #68]	; (15fb0 <HTTP_DownloadFileTransaction+0xd8>)
   15f6a:	4798      	blx	r3
   15f6c:	e003      	b.n	15f76 <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   15f6e:	4b11      	ldr	r3, [pc, #68]	; (15fb4 <HTTP_DownloadFileTransaction+0xdc>)
   15f70:	0018      	movs	r0, r3
   15f72:	4b11      	ldr	r3, [pc, #68]	; (15fb8 <HTTP_DownloadFileTransaction+0xe0>)
   15f74:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_INIT;
   15f76:	4b11      	ldr	r3, [pc, #68]	; (15fbc <HTTP_DownloadFileTransaction+0xe4>)
   15f78:	2200      	movs	r2, #0
   15f7a:	701a      	strb	r2, [r3, #0]
}
   15f7c:	46c0      	nop			; (mov r8, r8)
   15f7e:	46bd      	mov	sp, r7
   15f80:	b005      	add	sp, #20
   15f82:	bd90      	pop	{r4, r7, pc}
   15f84:	00021381 	.word	0x00021381
   15f88:	20004660 	.word	0x20004660
   15f8c:	00031a75 	.word	0x00031a75
   15f90:	0001b551 	.word	0x0001b551
   15f94:	00015075 	.word	0x00015075
   15f98:	0002493d 	.word	0x0002493d
   15f9c:	2000049c 	.word	0x2000049c
   15fa0:	00036234 	.word	0x00036234
   15fa4:	200006d0 	.word	0x200006d0
   15fa8:	0002cd3d 	.word	0x0002cd3d
   15fac:	00036210 	.word	0x00036210
   15fb0:	0001d291 	.word	0x0001d291
   15fb4:	00036220 	.word	0x00036220
   15fb8:	0001d1a5 	.word	0x0001d1a5
   15fbc:	20000474 	.word	0x20000474

00015fc0 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   15fc0:	b580      	push	{r7, lr}
   15fc2:	af00      	add	r7, sp, #0
    socketDeinit();
   15fc4:	4b18      	ldr	r3, [pc, #96]	; (16028 <MQTT_InitRoutine+0x68>)
   15fc6:	4798      	blx	r3
    configure_mqtt();
   15fc8:	4b18      	ldr	r3, [pc, #96]	; (1602c <MQTT_InitRoutine+0x6c>)
   15fca:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   15fcc:	4a18      	ldr	r2, [pc, #96]	; (16030 <MQTT_InitRoutine+0x70>)
   15fce:	4b19      	ldr	r3, [pc, #100]	; (16034 <MQTT_InitRoutine+0x74>)
   15fd0:	0011      	movs	r1, r2
   15fd2:	0018      	movs	r0, r3
   15fd4:	4b18      	ldr	r3, [pc, #96]	; (16038 <MQTT_InitRoutine+0x78>)
   15fd6:	4798      	blx	r3
    socketInit();
   15fd8:	4b18      	ldr	r3, [pc, #96]	; (1603c <MQTT_InitRoutine+0x7c>)
   15fda:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   15fdc:	4b18      	ldr	r3, [pc, #96]	; (16040 <MQTT_InitRoutine+0x80>)
   15fde:	2234      	movs	r2, #52	; 0x34
   15fe0:	5c9b      	ldrb	r3, [r3, r2]
   15fe2:	2201      	movs	r2, #1
   15fe4:	4053      	eors	r3, r2
   15fe6:	b2db      	uxtb	r3, r3
   15fe8:	2b00      	cmp	r3, #0
   15fea:	d00c      	beq.n	16006 <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   15fec:	4a15      	ldr	r2, [pc, #84]	; (16044 <MQTT_InitRoutine+0x84>)
   15fee:	4b14      	ldr	r3, [pc, #80]	; (16040 <MQTT_InitRoutine+0x80>)
   15ff0:	0011      	movs	r1, r2
   15ff2:	0018      	movs	r0, r3
   15ff4:	4b14      	ldr	r3, [pc, #80]	; (16048 <MQTT_InitRoutine+0x88>)
   15ff6:	4798      	blx	r3
   15ff8:	1e03      	subs	r3, r0, #0
   15ffa:	d004      	beq.n	16006 <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   15ffc:	4b13      	ldr	r3, [pc, #76]	; (1604c <MQTT_InitRoutine+0x8c>)
   15ffe:	0019      	movs	r1, r3
   16000:	2001      	movs	r0, #1
   16002:	4b13      	ldr	r3, [pc, #76]	; (16050 <MQTT_InitRoutine+0x90>)
   16004:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   16006:	4b0e      	ldr	r3, [pc, #56]	; (16040 <MQTT_InitRoutine+0x80>)
   16008:	2234      	movs	r2, #52	; 0x34
   1600a:	5c9b      	ldrb	r3, [r3, r2]
   1600c:	2b00      	cmp	r3, #0
   1600e:	d004      	beq.n	1601a <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   16010:	4b10      	ldr	r3, [pc, #64]	; (16054 <MQTT_InitRoutine+0x94>)
   16012:	0019      	movs	r1, r3
   16014:	2001      	movs	r0, #1
   16016:	4b0e      	ldr	r3, [pc, #56]	; (16050 <MQTT_InitRoutine+0x90>)
   16018:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   1601a:	4b0f      	ldr	r3, [pc, #60]	; (16058 <MQTT_InitRoutine+0x98>)
   1601c:	2201      	movs	r2, #1
   1601e:	701a      	strb	r2, [r3, #0]
}
   16020:	46c0      	nop			; (mov r8, r8)
   16022:	46bd      	mov	sp, r7
   16024:	bd80      	pop	{r7, pc}
   16026:	46c0      	nop			; (mov r8, r8)
   16028:	0002493d 	.word	0x0002493d
   1602c:	00015cd5 	.word	0x00015cd5
   16030:	00015b25 	.word	0x00015b25
   16034:	00015af1 	.word	0x00015af1
   16038:	00024985 	.word	0x00024985
   1603c:	000248ed 	.word	0x000248ed
   16040:	200006fc 	.word	0x200006fc
   16044:	00035ab8 	.word	0x00035ab8
   16048:	0002ec19 	.word	0x0002ec19
   1604c:	00035ebc 	.word	0x00035ebc
   16050:	0001d291 	.word	0x0001d291
   16054:	00036240 	.word	0x00036240
   16058:	20000474 	.word	0x20000474

0001605c <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   1605c:	b580      	push	{r7, lr}
   1605e:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   16060:	2000      	movs	r0, #0
   16062:	4b10      	ldr	r3, [pc, #64]	; (160a4 <MQTT_HandleTransactions+0x48>)
   16064:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   16066:	4b10      	ldr	r3, [pc, #64]	; (160a8 <MQTT_HandleTransactions+0x4c>)
   16068:	0018      	movs	r0, r3
   1606a:	4b10      	ldr	r3, [pc, #64]	; (160ac <MQTT_HandleTransactions+0x50>)
   1606c:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   1606e:	4b10      	ldr	r3, [pc, #64]	; (160b0 <MQTT_HandleTransactions+0x54>)
   16070:	4798      	blx	r3
    MQTT_HandleImuMessages();
   16072:	4b10      	ldr	r3, [pc, #64]	; (160b4 <MQTT_HandleTransactions+0x58>)
   16074:	4798      	blx	r3
	//MQTT_HandleHydr8Messages();
	MQTT_HandleHydr8WLMessages();
   16076:	4b10      	ldr	r3, [pc, #64]	; (160b8 <MQTT_HandleTransactions+0x5c>)
   16078:	4798      	blx	r3
	MQTT_HandleHydr8TDSMessages();
   1607a:	4b10      	ldr	r3, [pc, #64]	; (160bc <MQTT_HandleTransactions+0x60>)
   1607c:	4798      	blx	r3
	MQTT_HandleHydr8PumpLedMessages();
   1607e:	4b10      	ldr	r3, [pc, #64]	; (160c0 <MQTT_HandleTransactions+0x64>)
   16080:	4798      	blx	r3
	MQTT_HandleHydr8TdsLedMessages();
   16082:	4b10      	ldr	r3, [pc, #64]	; (160c4 <MQTT_HandleTransactions+0x68>)
   16084:	4798      	blx	r3
	MQTT_HandleHydr8VolumeMessages();
   16086:	4b10      	ldr	r3, [pc, #64]	; (160c8 <MQTT_HandleTransactions+0x6c>)
   16088:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   1608a:	4b10      	ldr	r3, [pc, #64]	; (160cc <MQTT_HandleTransactions+0x70>)
   1608c:	2234      	movs	r2, #52	; 0x34
   1608e:	5c9b      	ldrb	r3, [r3, r2]
   16090:	2b00      	cmp	r3, #0
   16092:	d004      	beq.n	1609e <MQTT_HandleTransactions+0x42>
   16094:	4b0d      	ldr	r3, [pc, #52]	; (160cc <MQTT_HandleTransactions+0x70>)
   16096:	2164      	movs	r1, #100	; 0x64
   16098:	0018      	movs	r0, r3
   1609a:	4b0d      	ldr	r3, [pc, #52]	; (160d0 <MQTT_HandleTransactions+0x74>)
   1609c:	4798      	blx	r3
}
   1609e:	46c0      	nop			; (mov r8, r8)
   160a0:	46bd      	mov	sp, r7
   160a2:	bd80      	pop	{r7, pc}
   160a4:	00021381 	.word	0x00021381
   160a8:	20004660 	.word	0x20004660
   160ac:	00031a75 	.word	0x00031a75
   160b0:	000163a5 	.word	0x000163a5
   160b4:	000160d5 	.word	0x000160d5
   160b8:	00016161 	.word	0x00016161
   160bc:	00016331 	.word	0x00016331
   160c0:	000161d5 	.word	0x000161d5
   160c4:	00016249 	.word	0x00016249
   160c8:	000162bd 	.word	0x000162bd
   160cc:	200006fc 	.word	0x200006fc
   160d0:	0002ee49 	.word	0x0002ee49

000160d4 <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
   160d4:	b590      	push	{r4, r7, lr}
   160d6:	b085      	sub	sp, #20
   160d8:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   160da:	4b18      	ldr	r3, [pc, #96]	; (1613c <MQTT_HandleImuMessages+0x68>)
   160dc:	681b      	ldr	r3, [r3, #0]
   160de:	0039      	movs	r1, r7
   160e0:	2200      	movs	r2, #0
   160e2:	0018      	movs	r0, r3
   160e4:	4b16      	ldr	r3, [pc, #88]	; (16140 <MQTT_HandleImuMessages+0x6c>)
   160e6:	4798      	blx	r3
   160e8:	0003      	movs	r3, r0
   160ea:	2b01      	cmp	r3, #1
   160ec:	d121      	bne.n	16132 <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   160ee:	003b      	movs	r3, r7
   160f0:	2200      	movs	r2, #0
   160f2:	5e9b      	ldrsh	r3, [r3, r2]
   160f4:	001c      	movs	r4, r3
   160f6:	003b      	movs	r3, r7
   160f8:	2202      	movs	r2, #2
   160fa:	5e9b      	ldrsh	r3, [r3, r2]
   160fc:	0019      	movs	r1, r3
   160fe:	003b      	movs	r3, r7
   16100:	2204      	movs	r2, #4
   16102:	5e9b      	ldrsh	r3, [r3, r2]
   16104:	4a0f      	ldr	r2, [pc, #60]	; (16144 <MQTT_HandleImuMessages+0x70>)
   16106:	4810      	ldr	r0, [pc, #64]	; (16148 <MQTT_HandleImuMessages+0x74>)
   16108:	9301      	str	r3, [sp, #4]
   1610a:	9100      	str	r1, [sp, #0]
   1610c:	0023      	movs	r3, r4
   1610e:	213f      	movs	r1, #63	; 0x3f
   16110:	4c0e      	ldr	r4, [pc, #56]	; (1614c <MQTT_HandleImuMessages+0x78>)
   16112:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   16114:	4b0c      	ldr	r3, [pc, #48]	; (16148 <MQTT_HandleImuMessages+0x74>)
   16116:	0018      	movs	r0, r3
   16118:	4b0d      	ldr	r3, [pc, #52]	; (16150 <MQTT_HandleImuMessages+0x7c>)
   1611a:	4798      	blx	r3
   1611c:	0004      	movs	r4, r0
   1611e:	4a0a      	ldr	r2, [pc, #40]	; (16148 <MQTT_HandleImuMessages+0x74>)
   16120:	490c      	ldr	r1, [pc, #48]	; (16154 <MQTT_HandleImuMessages+0x80>)
   16122:	480d      	ldr	r0, [pc, #52]	; (16158 <MQTT_HandleImuMessages+0x84>)
   16124:	2300      	movs	r3, #0
   16126:	9301      	str	r3, [sp, #4]
   16128:	2301      	movs	r3, #1
   1612a:	9300      	str	r3, [sp, #0]
   1612c:	0023      	movs	r3, r4
   1612e:	4c0b      	ldr	r4, [pc, #44]	; (1615c <MQTT_HandleImuMessages+0x88>)
   16130:	47a0      	blx	r4
    }
}
   16132:	46c0      	nop			; (mov r8, r8)
   16134:	46bd      	mov	sp, r7
   16136:	b003      	add	sp, #12
   16138:	bd90      	pop	{r4, r7, pc}
   1613a:	46c0      	nop			; (mov r8, r8)
   1613c:	20000480 	.word	0x20000480
   16140:	0001a3a5 	.word	0x0001a3a5
   16144:	0003625c 	.word	0x0003625c
   16148:	20000018 	.word	0x20000018
   1614c:	00034575 	.word	0x00034575
   16150:	000346d3 	.word	0x000346d3
   16154:	00036280 	.word	0x00036280
   16158:	200006fc 	.word	0x200006fc
   1615c:	0002ed95 	.word	0x0002ed95

00016160 <MQTT_HandleHydr8WLMessages>:
// 		mqtt_publish(&mqtt_inst, HYDR8_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
// 	}
// }

static void MQTT_HandleHydr8WLMessages(void)
{
   16160:	b590      	push	{r4, r7, lr}
   16162:	b085      	sub	sp, #20
   16164:	af02      	add	r7, sp, #8
	struct Hydr8WaterLevel hydr8WaterData;
	if (pdPASS == xQueueReceive(xQueueHydr8WLBuffer, &hydr8WaterData, 0)) {
   16166:	4b12      	ldr	r3, [pc, #72]	; (161b0 <MQTT_HandleHydr8WLMessages+0x50>)
   16168:	681b      	ldr	r3, [r3, #0]
   1616a:	1d39      	adds	r1, r7, #4
   1616c:	2200      	movs	r2, #0
   1616e:	0018      	movs	r0, r3
   16170:	4b10      	ldr	r3, [pc, #64]	; (161b4 <MQTT_HandleHydr8WLMessages+0x54>)
   16172:	4798      	blx	r3
   16174:	0003      	movs	r3, r0
   16176:	2b01      	cmp	r3, #1
   16178:	d115      	bne.n	161a6 <MQTT_HandleHydr8WLMessages+0x46>
		snprintf(mqtt_msg, 63, "%lu", hydr8WaterData.waterLevel);
   1617a:	1d3b      	adds	r3, r7, #4
   1617c:	781b      	ldrb	r3, [r3, #0]
   1617e:	4a0e      	ldr	r2, [pc, #56]	; (161b8 <MQTT_HandleHydr8WLMessages+0x58>)
   16180:	480e      	ldr	r0, [pc, #56]	; (161bc <MQTT_HandleHydr8WLMessages+0x5c>)
   16182:	213f      	movs	r1, #63	; 0x3f
   16184:	4c0e      	ldr	r4, [pc, #56]	; (161c0 <MQTT_HandleHydr8WLMessages+0x60>)
   16186:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, HYDR8_WL_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   16188:	4b0c      	ldr	r3, [pc, #48]	; (161bc <MQTT_HandleHydr8WLMessages+0x5c>)
   1618a:	0018      	movs	r0, r3
   1618c:	4b0d      	ldr	r3, [pc, #52]	; (161c4 <MQTT_HandleHydr8WLMessages+0x64>)
   1618e:	4798      	blx	r3
   16190:	0004      	movs	r4, r0
   16192:	4a0a      	ldr	r2, [pc, #40]	; (161bc <MQTT_HandleHydr8WLMessages+0x5c>)
   16194:	490c      	ldr	r1, [pc, #48]	; (161c8 <MQTT_HandleHydr8WLMessages+0x68>)
   16196:	480d      	ldr	r0, [pc, #52]	; (161cc <MQTT_HandleHydr8WLMessages+0x6c>)
   16198:	2300      	movs	r3, #0
   1619a:	9301      	str	r3, [sp, #4]
   1619c:	2301      	movs	r3, #1
   1619e:	9300      	str	r3, [sp, #0]
   161a0:	0023      	movs	r3, r4
   161a2:	4c0b      	ldr	r4, [pc, #44]	; (161d0 <MQTT_HandleHydr8WLMessages+0x70>)
   161a4:	47a0      	blx	r4
	}
}
   161a6:	46c0      	nop			; (mov r8, r8)
   161a8:	46bd      	mov	sp, r7
   161aa:	b003      	add	sp, #12
   161ac:	bd90      	pop	{r4, r7, pc}
   161ae:	46c0      	nop			; (mov r8, r8)
   161b0:	20000484 	.word	0x20000484
   161b4:	0001a3a5 	.word	0x0001a3a5
   161b8:	00036294 	.word	0x00036294
   161bc:	20000018 	.word	0x20000018
   161c0:	00034575 	.word	0x00034575
   161c4:	000346d3 	.word	0x000346d3
   161c8:	00036298 	.word	0x00036298
   161cc:	200006fc 	.word	0x200006fc
   161d0:	0002ed95 	.word	0x0002ed95

000161d4 <MQTT_HandleHydr8PumpLedMessages>:

static void MQTT_HandleHydr8PumpLedMessages(void)
{
   161d4:	b590      	push	{r4, r7, lr}
   161d6:	b085      	sub	sp, #20
   161d8:	af02      	add	r7, sp, #8
	struct pumpLED pumpLedData;
	if (pdPASS == xQueueReceive(xQueueHydr8PumpLEDBuffer, &pumpLedData, 0)) {
   161da:	4b12      	ldr	r3, [pc, #72]	; (16224 <MQTT_HandleHydr8PumpLedMessages+0x50>)
   161dc:	681b      	ldr	r3, [r3, #0]
   161de:	1d39      	adds	r1, r7, #4
   161e0:	2200      	movs	r2, #0
   161e2:	0018      	movs	r0, r3
   161e4:	4b10      	ldr	r3, [pc, #64]	; (16228 <MQTT_HandleHydr8PumpLedMessages+0x54>)
   161e6:	4798      	blx	r3
   161e8:	0003      	movs	r3, r0
   161ea:	2b01      	cmp	r3, #1
   161ec:	d115      	bne.n	1621a <MQTT_HandleHydr8PumpLedMessages+0x46>
		snprintf(mqtt_msg, 63, "%d", pumpLedData.pumpLedState);
   161ee:	1d3b      	adds	r3, r7, #4
   161f0:	781b      	ldrb	r3, [r3, #0]
   161f2:	4a0e      	ldr	r2, [pc, #56]	; (1622c <MQTT_HandleHydr8PumpLedMessages+0x58>)
   161f4:	480e      	ldr	r0, [pc, #56]	; (16230 <MQTT_HandleHydr8PumpLedMessages+0x5c>)
   161f6:	213f      	movs	r1, #63	; 0x3f
   161f8:	4c0e      	ldr	r4, [pc, #56]	; (16234 <MQTT_HandleHydr8PumpLedMessages+0x60>)
   161fa:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, HYDR8_PUMP_LED_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   161fc:	4b0c      	ldr	r3, [pc, #48]	; (16230 <MQTT_HandleHydr8PumpLedMessages+0x5c>)
   161fe:	0018      	movs	r0, r3
   16200:	4b0d      	ldr	r3, [pc, #52]	; (16238 <MQTT_HandleHydr8PumpLedMessages+0x64>)
   16202:	4798      	blx	r3
   16204:	0004      	movs	r4, r0
   16206:	4a0a      	ldr	r2, [pc, #40]	; (16230 <MQTT_HandleHydr8PumpLedMessages+0x5c>)
   16208:	490c      	ldr	r1, [pc, #48]	; (1623c <MQTT_HandleHydr8PumpLedMessages+0x68>)
   1620a:	480d      	ldr	r0, [pc, #52]	; (16240 <MQTT_HandleHydr8PumpLedMessages+0x6c>)
   1620c:	2300      	movs	r3, #0
   1620e:	9301      	str	r3, [sp, #4]
   16210:	2301      	movs	r3, #1
   16212:	9300      	str	r3, [sp, #0]
   16214:	0023      	movs	r3, r4
   16216:	4c0b      	ldr	r4, [pc, #44]	; (16244 <MQTT_HandleHydr8PumpLedMessages+0x70>)
   16218:	47a0      	blx	r4
	}
}
   1621a:	46c0      	nop			; (mov r8, r8)
   1621c:	46bd      	mov	sp, r7
   1621e:	b003      	add	sp, #12
   16220:	bd90      	pop	{r4, r7, pc}
   16222:	46c0      	nop			; (mov r8, r8)
   16224:	2000048c 	.word	0x2000048c
   16228:	0001a3a5 	.word	0x0001a3a5
   1622c:	000362ac 	.word	0x000362ac
   16230:	20000018 	.word	0x20000018
   16234:	00034575 	.word	0x00034575
   16238:	000346d3 	.word	0x000346d3
   1623c:	000362b0 	.word	0x000362b0
   16240:	200006fc 	.word	0x200006fc
   16244:	0002ed95 	.word	0x0002ed95

00016248 <MQTT_HandleHydr8TdsLedMessages>:

static void MQTT_HandleHydr8TdsLedMessages(void)
{
   16248:	b590      	push	{r4, r7, lr}
   1624a:	b085      	sub	sp, #20
   1624c:	af02      	add	r7, sp, #8
	struct tdsLED tdsLedData;
	if (pdPASS == xQueueReceive(xQueueHydr8TdsLEDBuffer, &tdsLedData, 0)) {
   1624e:	4b12      	ldr	r3, [pc, #72]	; (16298 <MQTT_HandleHydr8TdsLedMessages+0x50>)
   16250:	681b      	ldr	r3, [r3, #0]
   16252:	1d39      	adds	r1, r7, #4
   16254:	2200      	movs	r2, #0
   16256:	0018      	movs	r0, r3
   16258:	4b10      	ldr	r3, [pc, #64]	; (1629c <MQTT_HandleHydr8TdsLedMessages+0x54>)
   1625a:	4798      	blx	r3
   1625c:	0003      	movs	r3, r0
   1625e:	2b01      	cmp	r3, #1
   16260:	d115      	bne.n	1628e <MQTT_HandleHydr8TdsLedMessages+0x46>
		snprintf(mqtt_msg, 63, "%d", tdsLedData.tdsLedState);
   16262:	1d3b      	adds	r3, r7, #4
   16264:	781b      	ldrb	r3, [r3, #0]
   16266:	4a0e      	ldr	r2, [pc, #56]	; (162a0 <MQTT_HandleHydr8TdsLedMessages+0x58>)
   16268:	480e      	ldr	r0, [pc, #56]	; (162a4 <MQTT_HandleHydr8TdsLedMessages+0x5c>)
   1626a:	213f      	movs	r1, #63	; 0x3f
   1626c:	4c0e      	ldr	r4, [pc, #56]	; (162a8 <MQTT_HandleHydr8TdsLedMessages+0x60>)
   1626e:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, HYDR8_TDS_LED_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   16270:	4b0c      	ldr	r3, [pc, #48]	; (162a4 <MQTT_HandleHydr8TdsLedMessages+0x5c>)
   16272:	0018      	movs	r0, r3
   16274:	4b0d      	ldr	r3, [pc, #52]	; (162ac <MQTT_HandleHydr8TdsLedMessages+0x64>)
   16276:	4798      	blx	r3
   16278:	0004      	movs	r4, r0
   1627a:	4a0a      	ldr	r2, [pc, #40]	; (162a4 <MQTT_HandleHydr8TdsLedMessages+0x5c>)
   1627c:	490c      	ldr	r1, [pc, #48]	; (162b0 <MQTT_HandleHydr8TdsLedMessages+0x68>)
   1627e:	480d      	ldr	r0, [pc, #52]	; (162b4 <MQTT_HandleHydr8TdsLedMessages+0x6c>)
   16280:	2300      	movs	r3, #0
   16282:	9301      	str	r3, [sp, #4]
   16284:	2301      	movs	r3, #1
   16286:	9300      	str	r3, [sp, #0]
   16288:	0023      	movs	r3, r4
   1628a:	4c0b      	ldr	r4, [pc, #44]	; (162b8 <MQTT_HandleHydr8TdsLedMessages+0x70>)
   1628c:	47a0      	blx	r4
	}
}
   1628e:	46c0      	nop			; (mov r8, r8)
   16290:	46bd      	mov	sp, r7
   16292:	b003      	add	sp, #12
   16294:	bd90      	pop	{r4, r7, pc}
   16296:	46c0      	nop			; (mov r8, r8)
   16298:	20000490 	.word	0x20000490
   1629c:	0001a3a5 	.word	0x0001a3a5
   162a0:	000362ac 	.word	0x000362ac
   162a4:	20000018 	.word	0x20000018
   162a8:	00034575 	.word	0x00034575
   162ac:	000346d3 	.word	0x000346d3
   162b0:	000362cc 	.word	0x000362cc
   162b4:	200006fc 	.word	0x200006fc
   162b8:	0002ed95 	.word	0x0002ed95

000162bc <MQTT_HandleHydr8VolumeMessages>:

static void MQTT_HandleHydr8VolumeMessages(void)
{
   162bc:	b590      	push	{r4, r7, lr}
   162be:	b085      	sub	sp, #20
   162c0:	af02      	add	r7, sp, #8
	struct VolumeConsumed volData;
	if (pdPASS == xQueueReceive(xQueueHydr8VolumeBuffer, &volData, 0)) {
   162c2:	4b12      	ldr	r3, [pc, #72]	; (1630c <MQTT_HandleHydr8VolumeMessages+0x50>)
   162c4:	681b      	ldr	r3, [r3, #0]
   162c6:	1d39      	adds	r1, r7, #4
   162c8:	2200      	movs	r2, #0
   162ca:	0018      	movs	r0, r3
   162cc:	4b10      	ldr	r3, [pc, #64]	; (16310 <MQTT_HandleHydr8VolumeMessages+0x54>)
   162ce:	4798      	blx	r3
   162d0:	0003      	movs	r3, r0
   162d2:	2b01      	cmp	r3, #1
   162d4:	d115      	bne.n	16302 <MQTT_HandleHydr8VolumeMessages+0x46>
		snprintf(mqtt_msg, 63, "%d", volData.volumeData);
   162d6:	1d3b      	adds	r3, r7, #4
   162d8:	881b      	ldrh	r3, [r3, #0]
   162da:	4a0e      	ldr	r2, [pc, #56]	; (16314 <MQTT_HandleHydr8VolumeMessages+0x58>)
   162dc:	480e      	ldr	r0, [pc, #56]	; (16318 <MQTT_HandleHydr8VolumeMessages+0x5c>)
   162de:	213f      	movs	r1, #63	; 0x3f
   162e0:	4c0e      	ldr	r4, [pc, #56]	; (1631c <MQTT_HandleHydr8VolumeMessages+0x60>)
   162e2:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, HYDR8_VOLUME_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   162e4:	4b0c      	ldr	r3, [pc, #48]	; (16318 <MQTT_HandleHydr8VolumeMessages+0x5c>)
   162e6:	0018      	movs	r0, r3
   162e8:	4b0d      	ldr	r3, [pc, #52]	; (16320 <MQTT_HandleHydr8VolumeMessages+0x64>)
   162ea:	4798      	blx	r3
   162ec:	0004      	movs	r4, r0
   162ee:	4a0a      	ldr	r2, [pc, #40]	; (16318 <MQTT_HandleHydr8VolumeMessages+0x5c>)
   162f0:	490c      	ldr	r1, [pc, #48]	; (16324 <MQTT_HandleHydr8VolumeMessages+0x68>)
   162f2:	480d      	ldr	r0, [pc, #52]	; (16328 <MQTT_HandleHydr8VolumeMessages+0x6c>)
   162f4:	2300      	movs	r3, #0
   162f6:	9301      	str	r3, [sp, #4]
   162f8:	2301      	movs	r3, #1
   162fa:	9300      	str	r3, [sp, #0]
   162fc:	0023      	movs	r3, r4
   162fe:	4c0b      	ldr	r4, [pc, #44]	; (1632c <MQTT_HandleHydr8VolumeMessages+0x70>)
   16300:	47a0      	blx	r4
	}
}
   16302:	46c0      	nop			; (mov r8, r8)
   16304:	46bd      	mov	sp, r7
   16306:	b003      	add	sp, #12
   16308:	bd90      	pop	{r4, r7, pc}
   1630a:	46c0      	nop			; (mov r8, r8)
   1630c:	20000494 	.word	0x20000494
   16310:	0001a3a5 	.word	0x0001a3a5
   16314:	000362ac 	.word	0x000362ac
   16318:	20000018 	.word	0x20000018
   1631c:	00034575 	.word	0x00034575
   16320:	000346d3 	.word	0x000346d3
   16324:	000362e8 	.word	0x000362e8
   16328:	200006fc 	.word	0x200006fc
   1632c:	0002ed95 	.word	0x0002ed95

00016330 <MQTT_HandleHydr8TDSMessages>:

static void MQTT_HandleHydr8TDSMessages(void)
{
   16330:	b590      	push	{r4, r7, lr}
   16332:	b085      	sub	sp, #20
   16334:	af02      	add	r7, sp, #8
	struct Hydr8TdsLevel hydr8TDSData;
	if (pdPASS == xQueueReceive(xQueueHydr8TDSBuffer, &hydr8TDSData, 0)) {
   16336:	4b12      	ldr	r3, [pc, #72]	; (16380 <MQTT_HandleHydr8TDSMessages+0x50>)
   16338:	681b      	ldr	r3, [r3, #0]
   1633a:	1d39      	adds	r1, r7, #4
   1633c:	2200      	movs	r2, #0
   1633e:	0018      	movs	r0, r3
   16340:	4b10      	ldr	r3, [pc, #64]	; (16384 <MQTT_HandleHydr8TDSMessages+0x54>)
   16342:	4798      	blx	r3
   16344:	0003      	movs	r3, r0
   16346:	2b01      	cmp	r3, #1
   16348:	d115      	bne.n	16376 <MQTT_HandleHydr8TDSMessages+0x46>
		snprintf(mqtt_msg, 63, "%d",hydr8TDSData.tdsLevel);
   1634a:	1d3b      	adds	r3, r7, #4
   1634c:	881b      	ldrh	r3, [r3, #0]
   1634e:	4a0e      	ldr	r2, [pc, #56]	; (16388 <MQTT_HandleHydr8TDSMessages+0x58>)
   16350:	480e      	ldr	r0, [pc, #56]	; (1638c <MQTT_HandleHydr8TDSMessages+0x5c>)
   16352:	213f      	movs	r1, #63	; 0x3f
   16354:	4c0e      	ldr	r4, [pc, #56]	; (16390 <MQTT_HandleHydr8TDSMessages+0x60>)
   16356:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, HYDR8_TDS_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   16358:	4b0c      	ldr	r3, [pc, #48]	; (1638c <MQTT_HandleHydr8TDSMessages+0x5c>)
   1635a:	0018      	movs	r0, r3
   1635c:	4b0d      	ldr	r3, [pc, #52]	; (16394 <MQTT_HandleHydr8TDSMessages+0x64>)
   1635e:	4798      	blx	r3
   16360:	0004      	movs	r4, r0
   16362:	4a0a      	ldr	r2, [pc, #40]	; (1638c <MQTT_HandleHydr8TDSMessages+0x5c>)
   16364:	490c      	ldr	r1, [pc, #48]	; (16398 <MQTT_HandleHydr8TDSMessages+0x68>)
   16366:	480d      	ldr	r0, [pc, #52]	; (1639c <MQTT_HandleHydr8TDSMessages+0x6c>)
   16368:	2300      	movs	r3, #0
   1636a:	9301      	str	r3, [sp, #4]
   1636c:	2301      	movs	r3, #1
   1636e:	9300      	str	r3, [sp, #0]
   16370:	0023      	movs	r3, r4
   16372:	4c0b      	ldr	r4, [pc, #44]	; (163a0 <MQTT_HandleHydr8TDSMessages+0x70>)
   16374:	47a0      	blx	r4
	}
}
   16376:	46c0      	nop			; (mov r8, r8)
   16378:	46bd      	mov	sp, r7
   1637a:	b003      	add	sp, #12
   1637c:	bd90      	pop	{r4, r7, pc}
   1637e:	46c0      	nop			; (mov r8, r8)
   16380:	20000488 	.word	0x20000488
   16384:	0001a3a5 	.word	0x0001a3a5
   16388:	000362ac 	.word	0x000362ac
   1638c:	20000018 	.word	0x20000018
   16390:	00034575 	.word	0x00034575
   16394:	000346d3 	.word	0x000346d3
   16398:	00036300 	.word	0x00036300
   1639c:	200006fc 	.word	0x200006fc
   163a0:	0002ed95 	.word	0x0002ed95

000163a4 <MQTT_HandleGameMessages>:



static void MQTT_HandleGameMessages(void)
{
   163a4:	b590      	push	{r4, r7, lr}
   163a6:	b08b      	sub	sp, #44	; 0x2c
   163a8:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
   163aa:	4b39      	ldr	r3, [pc, #228]	; (16490 <MQTT_HandleGameMessages+0xec>)
   163ac:	681b      	ldr	r3, [r3, #0]
   163ae:	2208      	movs	r2, #8
   163b0:	18b9      	adds	r1, r7, r2
   163b2:	2200      	movs	r2, #0
   163b4:	0018      	movs	r0, r3
   163b6:	4b37      	ldr	r3, [pc, #220]	; (16494 <MQTT_HandleGameMessages+0xf0>)
   163b8:	4798      	blx	r3
   163ba:	0003      	movs	r3, r0
   163bc:	2b01      	cmp	r3, #1
   163be:	d163      	bne.n	16488 <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
   163c0:	4b35      	ldr	r3, [pc, #212]	; (16498 <MQTT_HandleGameMessages+0xf4>)
   163c2:	4a36      	ldr	r2, [pc, #216]	; (1649c <MQTT_HandleGameMessages+0xf8>)
   163c4:	ca03      	ldmia	r2!, {r0, r1}
   163c6:	c303      	stmia	r3!, {r0, r1}
   163c8:	8812      	ldrh	r2, [r2, #0]
   163ca:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   163cc:	2300      	movs	r3, #0
   163ce:	61fb      	str	r3, [r7, #28]
   163d0:	e02d      	b.n	1642e <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
   163d2:	2308      	movs	r3, #8
   163d4:	18fa      	adds	r2, r7, r3
   163d6:	69fb      	ldr	r3, [r7, #28]
   163d8:	18d3      	adds	r3, r2, r3
   163da:	781b      	ldrb	r3, [r3, #0]
   163dc:	2bff      	cmp	r3, #255	; 0xff
   163de:	d02a      	beq.n	16436 <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   163e0:	2308      	movs	r3, #8
   163e2:	18fa      	adds	r2, r7, r3
   163e4:	69fb      	ldr	r3, [r7, #28]
   163e6:	18d3      	adds	r3, r2, r3
   163e8:	781b      	ldrb	r3, [r3, #0]
   163ea:	4a2d      	ldr	r2, [pc, #180]	; (164a0 <MQTT_HandleGameMessages+0xfc>)
   163ec:	0038      	movs	r0, r7
   163ee:	2103      	movs	r1, #3
   163f0:	4c2c      	ldr	r4, [pc, #176]	; (164a4 <MQTT_HandleGameMessages+0x100>)
   163f2:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
   163f4:	003a      	movs	r2, r7
   163f6:	4b28      	ldr	r3, [pc, #160]	; (16498 <MQTT_HandleGameMessages+0xf4>)
   163f8:	0011      	movs	r1, r2
   163fa:	0018      	movs	r0, r3
   163fc:	4b2a      	ldr	r3, [pc, #168]	; (164a8 <MQTT_HandleGameMessages+0x104>)
   163fe:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
   16400:	69fb      	ldr	r3, [r7, #28]
   16402:	3301      	adds	r3, #1
   16404:	2208      	movs	r2, #8
   16406:	18ba      	adds	r2, r7, r2
   16408:	5cd3      	ldrb	r3, [r2, r3]
   1640a:	2bff      	cmp	r3, #255	; 0xff
   1640c:	d00c      	beq.n	16428 <MQTT_HandleGameMessages+0x84>
   1640e:	69fb      	ldr	r3, [r7, #28]
   16410:	3301      	adds	r3, #1
   16412:	2b13      	cmp	r3, #19
   16414:	dc08      	bgt.n	16428 <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
   16416:	003b      	movs	r3, r7
   16418:	222c      	movs	r2, #44	; 0x2c
   1641a:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
   1641c:	003a      	movs	r2, r7
   1641e:	4b1e      	ldr	r3, [pc, #120]	; (16498 <MQTT_HandleGameMessages+0xf4>)
   16420:	0011      	movs	r1, r2
   16422:	0018      	movs	r0, r3
   16424:	4b20      	ldr	r3, [pc, #128]	; (164a8 <MQTT_HandleGameMessages+0x104>)
   16426:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   16428:	69fb      	ldr	r3, [r7, #28]
   1642a:	3301      	adds	r3, #1
   1642c:	61fb      	str	r3, [r7, #28]
   1642e:	69fb      	ldr	r3, [r7, #28]
   16430:	2b13      	cmp	r3, #19
   16432:	ddce      	ble.n	163d2 <MQTT_HandleGameMessages+0x2e>
   16434:	e000      	b.n	16438 <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
   16436:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
   16438:	4b17      	ldr	r3, [pc, #92]	; (16498 <MQTT_HandleGameMessages+0xf4>)
   1643a:	0018      	movs	r0, r3
   1643c:	4b1b      	ldr	r3, [pc, #108]	; (164ac <MQTT_HandleGameMessages+0x108>)
   1643e:	4798      	blx	r3
   16440:	0003      	movs	r3, r0
   16442:	001a      	movs	r2, r3
   16444:	4b14      	ldr	r3, [pc, #80]	; (16498 <MQTT_HandleGameMessages+0xf4>)
   16446:	18d2      	adds	r2, r2, r3
   16448:	4b19      	ldr	r3, [pc, #100]	; (164b0 <MQTT_HandleGameMessages+0x10c>)
   1644a:	0010      	movs	r0, r2
   1644c:	0019      	movs	r1, r3
   1644e:	2303      	movs	r3, #3
   16450:	001a      	movs	r2, r3
   16452:	4b18      	ldr	r3, [pc, #96]	; (164b4 <MQTT_HandleGameMessages+0x110>)
   16454:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   16456:	4b10      	ldr	r3, [pc, #64]	; (16498 <MQTT_HandleGameMessages+0xf4>)
   16458:	0019      	movs	r1, r3
   1645a:	2001      	movs	r0, #1
   1645c:	4b16      	ldr	r3, [pc, #88]	; (164b8 <MQTT_HandleGameMessages+0x114>)
   1645e:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   16460:	4b16      	ldr	r3, [pc, #88]	; (164bc <MQTT_HandleGameMessages+0x118>)
   16462:	0019      	movs	r1, r3
   16464:	2001      	movs	r0, #1
   16466:	4b14      	ldr	r3, [pc, #80]	; (164b8 <MQTT_HandleGameMessages+0x114>)
   16468:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   1646a:	4b0b      	ldr	r3, [pc, #44]	; (16498 <MQTT_HandleGameMessages+0xf4>)
   1646c:	0018      	movs	r0, r3
   1646e:	4b0f      	ldr	r3, [pc, #60]	; (164ac <MQTT_HandleGameMessages+0x108>)
   16470:	4798      	blx	r3
   16472:	0004      	movs	r4, r0
   16474:	4a08      	ldr	r2, [pc, #32]	; (16498 <MQTT_HandleGameMessages+0xf4>)
   16476:	4912      	ldr	r1, [pc, #72]	; (164c0 <MQTT_HandleGameMessages+0x11c>)
   16478:	4812      	ldr	r0, [pc, #72]	; (164c4 <MQTT_HandleGameMessages+0x120>)
   1647a:	2300      	movs	r3, #0
   1647c:	9301      	str	r3, [sp, #4]
   1647e:	2301      	movs	r3, #1
   16480:	9300      	str	r3, [sp, #0]
   16482:	0023      	movs	r3, r4
   16484:	4c10      	ldr	r4, [pc, #64]	; (164c8 <MQTT_HandleGameMessages+0x124>)
   16486:	47a0      	blx	r4
    }
}
   16488:	46c0      	nop			; (mov r8, r8)
   1648a:	46bd      	mov	sp, r7
   1648c:	b009      	add	sp, #36	; 0x24
   1648e:	bd90      	pop	{r4, r7, pc}
   16490:	2000047c 	.word	0x2000047c
   16494:	0001a3a5 	.word	0x0001a3a5
   16498:	20000018 	.word	0x20000018
   1649c:	00036318 	.word	0x00036318
   164a0:	000362ac 	.word	0x000362ac
   164a4:	00034575 	.word	0x00034575
   164a8:	00034659 	.word	0x00034659
   164ac:	000346d3 	.word	0x000346d3
   164b0:	00036324 	.word	0x00036324
   164b4:	000342e5 	.word	0x000342e5
   164b8:	0001d291 	.word	0x0001d291
   164bc:	00036328 	.word	0x00036328
   164c0:	0003632c 	.word	0x0003632c
   164c4:	200006fc 	.word	0x200006fc
   164c8:	0002ed95 	.word	0x0002ed95

000164cc <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   164cc:	b590      	push	{r4, r7, lr}
   164ce:	b08d      	sub	sp, #52	; 0x34
   164d0:	af02      	add	r7, sp, #8
   164d2:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   164d4:	2064      	movs	r0, #100	; 0x64
   164d6:	4b97      	ldr	r3, [pc, #604]	; (16734 <vWifiTask+0x268>)
   164d8:	4798      	blx	r3
    init_state();
   164da:	4b97      	ldr	r3, [pc, #604]	; (16738 <vWifiTask+0x26c>)
   164dc:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   164de:	2200      	movs	r2, #0
   164e0:	2104      	movs	r1, #4
   164e2:	2005      	movs	r0, #5
   164e4:	4b95      	ldr	r3, [pc, #596]	; (1673c <vWifiTask+0x270>)
   164e6:	4798      	blx	r3
   164e8:	0002      	movs	r2, r0
   164ea:	4b95      	ldr	r3, [pc, #596]	; (16740 <vWifiTask+0x274>)
   164ec:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   164ee:	2200      	movs	r2, #0
   164f0:	2106      	movs	r1, #6
   164f2:	2005      	movs	r0, #5
   164f4:	4b91      	ldr	r3, [pc, #580]	; (1673c <vWifiTask+0x270>)
   164f6:	4798      	blx	r3
   164f8:	0002      	movs	r2, r0
   164fa:	4b92      	ldr	r3, [pc, #584]	; (16744 <vWifiTask+0x278>)
   164fc:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
   164fe:	2200      	movs	r2, #0
   16500:	2114      	movs	r1, #20
   16502:	2002      	movs	r0, #2
   16504:	4b8d      	ldr	r3, [pc, #564]	; (1673c <vWifiTask+0x270>)
   16506:	4798      	blx	r3
   16508:	0002      	movs	r2, r0
   1650a:	4b8f      	ldr	r3, [pc, #572]	; (16748 <vWifiTask+0x27c>)
   1650c:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   1650e:	2200      	movs	r2, #0
   16510:	2102      	movs	r1, #2
   16512:	2005      	movs	r0, #5
   16514:	4b89      	ldr	r3, [pc, #548]	; (1673c <vWifiTask+0x270>)
   16516:	4798      	blx	r3
   16518:	0002      	movs	r2, r0
   1651a:	4b8c      	ldr	r3, [pc, #560]	; (1674c <vWifiTask+0x280>)
   1651c:	601a      	str	r2, [r3, #0]
	//xQueueHydr8Buffer = xQueueCreate(5,sizeof(struct Hydr8DataPacket));
	xQueueHydr8WLBuffer = xQueueCreate(7,sizeof(struct Hydr8WaterLevel));
   1651e:	2200      	movs	r2, #0
   16520:	2101      	movs	r1, #1
   16522:	2007      	movs	r0, #7
   16524:	4b85      	ldr	r3, [pc, #532]	; (1673c <vWifiTask+0x270>)
   16526:	4798      	blx	r3
   16528:	0002      	movs	r2, r0
   1652a:	4b89      	ldr	r3, [pc, #548]	; (16750 <vWifiTask+0x284>)
   1652c:	601a      	str	r2, [r3, #0]
	xQueueHydr8TDSBuffer = xQueueCreate(3,sizeof(struct Hydr8TdsLevel));
   1652e:	2200      	movs	r2, #0
   16530:	2102      	movs	r1, #2
   16532:	2003      	movs	r0, #3
   16534:	4b81      	ldr	r3, [pc, #516]	; (1673c <vWifiTask+0x270>)
   16536:	4798      	blx	r3
   16538:	0002      	movs	r2, r0
   1653a:	4b86      	ldr	r3, [pc, #536]	; (16754 <vWifiTask+0x288>)
   1653c:	601a      	str	r2, [r3, #0]
	xQueueHydr8PumpLEDBuffer = xQueueCreate(5,sizeof(struct pumpLED));
   1653e:	2200      	movs	r2, #0
   16540:	2101      	movs	r1, #1
   16542:	2005      	movs	r0, #5
   16544:	4b7d      	ldr	r3, [pc, #500]	; (1673c <vWifiTask+0x270>)
   16546:	4798      	blx	r3
   16548:	0002      	movs	r2, r0
   1654a:	4b83      	ldr	r3, [pc, #524]	; (16758 <vWifiTask+0x28c>)
   1654c:	601a      	str	r2, [r3, #0]
	xQueueHydr8TdsLEDBuffer = xQueueCreate(5,sizeof(struct tdsLED));
   1654e:	2200      	movs	r2, #0
   16550:	2101      	movs	r1, #1
   16552:	2005      	movs	r0, #5
   16554:	4b79      	ldr	r3, [pc, #484]	; (1673c <vWifiTask+0x270>)
   16556:	4798      	blx	r3
   16558:	0002      	movs	r2, r0
   1655a:	4b80      	ldr	r3, [pc, #512]	; (1675c <vWifiTask+0x290>)
   1655c:	601a      	str	r2, [r3, #0]
	xQueueHydr8VolumeBuffer = xQueueCreate(5,sizeof(struct VolumeConsumed));
   1655e:	2200      	movs	r2, #0
   16560:	2102      	movs	r1, #2
   16562:	2005      	movs	r0, #5
   16564:	4b75      	ldr	r3, [pc, #468]	; (1673c <vWifiTask+0x270>)
   16566:	4798      	blx	r3
   16568:	0002      	movs	r2, r0
   1656a:	4b7d      	ldr	r3, [pc, #500]	; (16760 <vWifiTask+0x294>)
   1656c:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL || xQueueHydr8WLBuffer ==NULL || xQueueHydr8TDSBuffer == NULL|| xQueueHydr8PumpLEDBuffer == NULL || xQueueHydr8TdsLEDBuffer == NULL || xQueueHydr8VolumeBuffer == NULL) {
   1656e:	4b74      	ldr	r3, [pc, #464]	; (16740 <vWifiTask+0x274>)
   16570:	681b      	ldr	r3, [r3, #0]
   16572:	2b00      	cmp	r3, #0
   16574:	d01f      	beq.n	165b6 <vWifiTask+0xea>
   16576:	4b73      	ldr	r3, [pc, #460]	; (16744 <vWifiTask+0x278>)
   16578:	681b      	ldr	r3, [r3, #0]
   1657a:	2b00      	cmp	r3, #0
   1657c:	d01b      	beq.n	165b6 <vWifiTask+0xea>
   1657e:	4b72      	ldr	r3, [pc, #456]	; (16748 <vWifiTask+0x27c>)
   16580:	681b      	ldr	r3, [r3, #0]
   16582:	2b00      	cmp	r3, #0
   16584:	d017      	beq.n	165b6 <vWifiTask+0xea>
   16586:	4b71      	ldr	r3, [pc, #452]	; (1674c <vWifiTask+0x280>)
   16588:	681b      	ldr	r3, [r3, #0]
   1658a:	2b00      	cmp	r3, #0
   1658c:	d013      	beq.n	165b6 <vWifiTask+0xea>
   1658e:	4b70      	ldr	r3, [pc, #448]	; (16750 <vWifiTask+0x284>)
   16590:	681b      	ldr	r3, [r3, #0]
   16592:	2b00      	cmp	r3, #0
   16594:	d00f      	beq.n	165b6 <vWifiTask+0xea>
   16596:	4b6f      	ldr	r3, [pc, #444]	; (16754 <vWifiTask+0x288>)
   16598:	681b      	ldr	r3, [r3, #0]
   1659a:	2b00      	cmp	r3, #0
   1659c:	d00b      	beq.n	165b6 <vWifiTask+0xea>
   1659e:	4b6e      	ldr	r3, [pc, #440]	; (16758 <vWifiTask+0x28c>)
   165a0:	681b      	ldr	r3, [r3, #0]
   165a2:	2b00      	cmp	r3, #0
   165a4:	d007      	beq.n	165b6 <vWifiTask+0xea>
   165a6:	4b6d      	ldr	r3, [pc, #436]	; (1675c <vWifiTask+0x290>)
   165a8:	681b      	ldr	r3, [r3, #0]
   165aa:	2b00      	cmp	r3, #0
   165ac:	d003      	beq.n	165b6 <vWifiTask+0xea>
   165ae:	4b6c      	ldr	r3, [pc, #432]	; (16760 <vWifiTask+0x294>)
   165b0:	681b      	ldr	r3, [r3, #0]
   165b2:	2b00      	cmp	r3, #0
   165b4:	d103      	bne.n	165be <vWifiTask+0xf2>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   165b6:	4b6b      	ldr	r3, [pc, #428]	; (16764 <vWifiTask+0x298>)
   165b8:	0018      	movs	r0, r3
   165ba:	4b6b      	ldr	r3, [pc, #428]	; (16768 <vWifiTask+0x29c>)
   165bc:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   165be:	4b6b      	ldr	r3, [pc, #428]	; (1676c <vWifiTask+0x2a0>)
   165c0:	0018      	movs	r0, r3
   165c2:	4b69      	ldr	r3, [pc, #420]	; (16768 <vWifiTask+0x29c>)
   165c4:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   165c6:	4b6a      	ldr	r3, [pc, #424]	; (16770 <vWifiTask+0x2a4>)
   165c8:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   165ca:	4b6a      	ldr	r3, [pc, #424]	; (16774 <vWifiTask+0x2a8>)
   165cc:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   165ce:	4b6a      	ldr	r3, [pc, #424]	; (16778 <vWifiTask+0x2ac>)
   165d0:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   165d2:	4b6a      	ldr	r3, [pc, #424]	; (1677c <vWifiTask+0x2b0>)
   165d4:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   165d6:	4b6a      	ldr	r3, [pc, #424]	; (16780 <vWifiTask+0x2b4>)
   165d8:	4798      	blx	r3
    configure_extint_callbacks();
   165da:	4b6a      	ldr	r3, [pc, #424]	; (16784 <vWifiTask+0x2b8>)
   165dc:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   165de:	230c      	movs	r3, #12
   165e0:	18fb      	adds	r3, r7, r3
   165e2:	2218      	movs	r2, #24
   165e4:	2100      	movs	r1, #0
   165e6:	0018      	movs	r0, r3
   165e8:	4b67      	ldr	r3, [pc, #412]	; (16788 <vWifiTask+0x2bc>)
   165ea:	4798      	blx	r3

    nm_bsp_init();
   165ec:	4b67      	ldr	r3, [pc, #412]	; (1678c <vWifiTask+0x2c0>)
   165ee:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   165f0:	230c      	movs	r3, #12
   165f2:	18fb      	adds	r3, r7, r3
   165f4:	4a66      	ldr	r2, [pc, #408]	; (16790 <vWifiTask+0x2c4>)
   165f6:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   165f8:	2327      	movs	r3, #39	; 0x27
   165fa:	18fc      	adds	r4, r7, r3
   165fc:	230c      	movs	r3, #12
   165fe:	18fb      	adds	r3, r7, r3
   16600:	0018      	movs	r0, r3
   16602:	4b64      	ldr	r3, [pc, #400]	; (16794 <vWifiTask+0x2c8>)
   16604:	4798      	blx	r3
   16606:	0003      	movs	r3, r0
   16608:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   1660a:	2327      	movs	r3, #39	; 0x27
   1660c:	18fb      	adds	r3, r7, r3
   1660e:	781b      	ldrb	r3, [r3, #0]
   16610:	b25b      	sxtb	r3, r3
   16612:	2b00      	cmp	r3, #0
   16614:	d009      	beq.n	1662a <vWifiTask+0x15e>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   16616:	2327      	movs	r3, #39	; 0x27
   16618:	18fb      	adds	r3, r7, r3
   1661a:	2200      	movs	r2, #0
   1661c:	569a      	ldrsb	r2, [r3, r2]
   1661e:	4b5e      	ldr	r3, [pc, #376]	; (16798 <vWifiTask+0x2cc>)
   16620:	0019      	movs	r1, r3
   16622:	2001      	movs	r0, #1
   16624:	4b5d      	ldr	r3, [pc, #372]	; (1679c <vWifiTask+0x2d0>)
   16626:	4798      	blx	r3
        while (1) {
   16628:	e7fe      	b.n	16628 <vWifiTask+0x15c>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   1662a:	4a5d      	ldr	r2, [pc, #372]	; (167a0 <vWifiTask+0x2d4>)
   1662c:	4b5d      	ldr	r3, [pc, #372]	; (167a4 <vWifiTask+0x2d8>)
   1662e:	0019      	movs	r1, r3
   16630:	2001      	movs	r0, #1
   16632:	4b5a      	ldr	r3, [pc, #360]	; (1679c <vWifiTask+0x2d0>)
   16634:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   16636:	4b5c      	ldr	r3, [pc, #368]	; (167a8 <vWifiTask+0x2dc>)
   16638:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   1663a:	4a5c      	ldr	r2, [pc, #368]	; (167ac <vWifiTask+0x2e0>)
   1663c:	4b5c      	ldr	r3, [pc, #368]	; (167b0 <vWifiTask+0x2e4>)
   1663e:	0011      	movs	r1, r2
   16640:	0018      	movs	r0, r3
   16642:	4b5c      	ldr	r3, [pc, #368]	; (167b4 <vWifiTask+0x2e8>)
   16644:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   16646:	4a5c      	ldr	r2, [pc, #368]	; (167b8 <vWifiTask+0x2ec>)
   16648:	4855      	ldr	r0, [pc, #340]	; (167a0 <vWifiTask+0x2d4>)
   1664a:	23ff      	movs	r3, #255	; 0xff
   1664c:	9300      	str	r3, [sp, #0]
   1664e:	0013      	movs	r3, r2
   16650:	2202      	movs	r2, #2
   16652:	2107      	movs	r1, #7
   16654:	4c59      	ldr	r4, [pc, #356]	; (167bc <vWifiTask+0x2f0>)
   16656:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   16658:	e006      	b.n	16668 <vWifiTask+0x19c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   1665a:	2000      	movs	r0, #0
   1665c:	4b58      	ldr	r3, [pc, #352]	; (167c0 <vWifiTask+0x2f4>)
   1665e:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   16660:	4b58      	ldr	r3, [pc, #352]	; (167c4 <vWifiTask+0x2f8>)
   16662:	0018      	movs	r0, r3
   16664:	4b58      	ldr	r3, [pc, #352]	; (167c8 <vWifiTask+0x2fc>)
   16666:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   16668:	2002      	movs	r0, #2
   1666a:	4b58      	ldr	r3, [pc, #352]	; (167cc <vWifiTask+0x300>)
   1666c:	4798      	blx	r3
   1666e:	0003      	movs	r3, r0
   16670:	001a      	movs	r2, r3
   16672:	2301      	movs	r3, #1
   16674:	4053      	eors	r3, r2
   16676:	b2db      	uxtb	r3, r3
   16678:	2b00      	cmp	r3, #0
   1667a:	d1ee      	bne.n	1665a <vWifiTask+0x18e>
    }

    vTaskDelay(1000);
   1667c:	23fa      	movs	r3, #250	; 0xfa
   1667e:	009b      	lsls	r3, r3, #2
   16680:	0018      	movs	r0, r3
   16682:	4b2c      	ldr	r3, [pc, #176]	; (16734 <vWifiTask+0x268>)
   16684:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   16686:	4b52      	ldr	r3, [pc, #328]	; (167d0 <vWifiTask+0x304>)
   16688:	2201      	movs	r2, #1
   1668a:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   1668c:	4b50      	ldr	r3, [pc, #320]	; (167d0 <vWifiTask+0x304>)
   1668e:	781b      	ldrb	r3, [r3, #0]
   16690:	b25b      	sxtb	r3, r3
   16692:	2b01      	cmp	r3, #1
   16694:	d00b      	beq.n	166ae <vWifiTask+0x1e2>
   16696:	dc02      	bgt.n	1669e <vWifiTask+0x1d2>
   16698:	2b00      	cmp	r3, #0
   1669a:	d005      	beq.n	166a8 <vWifiTask+0x1dc>
   1669c:	e010      	b.n	166c0 <vWifiTask+0x1f4>
   1669e:	2b02      	cmp	r3, #2
   166a0:	d008      	beq.n	166b4 <vWifiTask+0x1e8>
   166a2:	2b03      	cmp	r3, #3
   166a4:	d009      	beq.n	166ba <vWifiTask+0x1ee>
   166a6:	e00b      	b.n	166c0 <vWifiTask+0x1f4>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   166a8:	4b4a      	ldr	r3, [pc, #296]	; (167d4 <vWifiTask+0x308>)
   166aa:	4798      	blx	r3

                break;
   166ac:	e00c      	b.n	166c8 <vWifiTask+0x1fc>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   166ae:	4b4a      	ldr	r3, [pc, #296]	; (167d8 <vWifiTask+0x30c>)
   166b0:	4798      	blx	r3
                break;
   166b2:	e009      	b.n	166c8 <vWifiTask+0x1fc>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   166b4:	4b49      	ldr	r3, [pc, #292]	; (167dc <vWifiTask+0x310>)
   166b6:	4798      	blx	r3
                break;
   166b8:	e006      	b.n	166c8 <vWifiTask+0x1fc>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   166ba:	4b49      	ldr	r3, [pc, #292]	; (167e0 <vWifiTask+0x314>)
   166bc:	4798      	blx	r3
                break;
   166be:	e003      	b.n	166c8 <vWifiTask+0x1fc>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   166c0:	4b43      	ldr	r3, [pc, #268]	; (167d0 <vWifiTask+0x304>)
   166c2:	2200      	movs	r2, #0
   166c4:	701a      	strb	r2, [r3, #0]
                break;
   166c6:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   166c8:	230b      	movs	r3, #11
   166ca:	18fb      	adds	r3, r7, r3
   166cc:	2200      	movs	r2, #0
   166ce:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   166d0:	4b1b      	ldr	r3, [pc, #108]	; (16740 <vWifiTask+0x274>)
   166d2:	681b      	ldr	r3, [r3, #0]
   166d4:	220b      	movs	r2, #11
   166d6:	18b9      	adds	r1, r7, r2
   166d8:	2200      	movs	r2, #0
   166da:	0018      	movs	r0, r3
   166dc:	4b41      	ldr	r3, [pc, #260]	; (167e4 <vWifiTask+0x318>)
   166de:	4798      	blx	r3
   166e0:	0003      	movs	r3, r0
   166e2:	2b01      	cmp	r3, #1
   166e4:	d105      	bne.n	166f2 <vWifiTask+0x226>
            wifiStateMachine = DataToReceive;  // Update new state
   166e6:	230b      	movs	r3, #11
   166e8:	18fb      	adds	r3, r7, r3
   166ea:	781b      	ldrb	r3, [r3, #0]
   166ec:	b25a      	sxtb	r2, r3
   166ee:	4b38      	ldr	r3, [pc, #224]	; (167d0 <vWifiTask+0x304>)
   166f0:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publis something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   166f2:	4b3d      	ldr	r3, [pc, #244]	; (167e8 <vWifiTask+0x31c>)
   166f4:	781b      	ldrb	r3, [r3, #0]
   166f6:	b2db      	uxtb	r3, r3
   166f8:	2b00      	cmp	r3, #0
   166fa:	d017      	beq.n	1672c <vWifiTask+0x260>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   166fc:	4b3b      	ldr	r3, [pc, #236]	; (167ec <vWifiTask+0x320>)
   166fe:	0018      	movs	r0, r3
   16700:	4b3b      	ldr	r3, [pc, #236]	; (167f0 <vWifiTask+0x324>)
   16702:	4798      	blx	r3
   16704:	0004      	movs	r4, r0
   16706:	4a39      	ldr	r2, [pc, #228]	; (167ec <vWifiTask+0x320>)
   16708:	493a      	ldr	r1, [pc, #232]	; (167f4 <vWifiTask+0x328>)
   1670a:	483b      	ldr	r0, [pc, #236]	; (167f8 <vWifiTask+0x32c>)
   1670c:	2300      	movs	r3, #0
   1670e:	9301      	str	r3, [sp, #4]
   16710:	2301      	movs	r3, #1
   16712:	9300      	str	r3, [sp, #0]
   16714:	0023      	movs	r3, r4
   16716:	4c39      	ldr	r4, [pc, #228]	; (167fc <vWifiTask+0x330>)
   16718:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   1671a:	4a34      	ldr	r2, [pc, #208]	; (167ec <vWifiTask+0x320>)
   1671c:	4b38      	ldr	r3, [pc, #224]	; (16800 <vWifiTask+0x334>)
   1671e:	0019      	movs	r1, r3
   16720:	2001      	movs	r0, #1
   16722:	4b1e      	ldr	r3, [pc, #120]	; (1679c <vWifiTask+0x2d0>)
   16724:	4798      	blx	r3
            isPressed = false;
   16726:	4b30      	ldr	r3, [pc, #192]	; (167e8 <vWifiTask+0x31c>)
   16728:	2200      	movs	r2, #0
   1672a:	701a      	strb	r2, [r3, #0]

        }

        vTaskDelay(100);
   1672c:	2064      	movs	r0, #100	; 0x64
   1672e:	4b01      	ldr	r3, [pc, #4]	; (16734 <vWifiTask+0x268>)
   16730:	4798      	blx	r3
    while (1) {
   16732:	e7ab      	b.n	1668c <vWifiTask+0x1c0>
   16734:	0001b551 	.word	0x0001b551
   16738:	00015005 	.word	0x00015005
   1673c:	00019845 	.word	0x00019845
   16740:	20000478 	.word	0x20000478
   16744:	20000480 	.word	0x20000480
   16748:	2000047c 	.word	0x2000047c
   1674c:	20000498 	.word	0x20000498
   16750:	20000484 	.word	0x20000484
   16754:	20000488 	.word	0x20000488
   16758:	2000048c 	.word	0x2000048c
   1675c:	20000490 	.word	0x20000490
   16760:	20000494 	.word	0x20000494
   16764:	00036340 	.word	0x00036340
   16768:	0001d1a5 	.word	0x0001d1a5
   1676c:	00036368 	.word	0x00036368
   16770:	00015a41 	.word	0x00015a41
   16774:	00015a7d 	.word	0x00015a7d
   16778:	00015cd5 	.word	0x00015cd5
   1677c:	0001595d 	.word	0x0001595d
   16780:	00015d8d 	.word	0x00015d8d
   16784:	00015dcd 	.word	0x00015dcd
   16788:	0003431b 	.word	0x0003431b
   1678c:	0001f6b5 	.word	0x0001f6b5
   16790:	00015809 	.word	0x00015809
   16794:	0002118d 	.word	0x0002118d
   16798:	00036384 	.word	0x00036384
   1679c:	0001d291 	.word	0x0001d291
   167a0:	00035e8c 	.word	0x00035e8c
   167a4:	000363b0 	.word	0x000363b0
   167a8:	000248ed 	.word	0x000248ed
   167ac:	00015b25 	.word	0x00015b25
   167b0:	00015af1 	.word	0x00015af1
   167b4:	00024985 	.word	0x00024985
   167b8:	00035e80 	.word	0x00035e80
   167bc:	0002139d 	.word	0x0002139d
   167c0:	00021381 	.word	0x00021381
   167c4:	20004660 	.word	0x20004660
   167c8:	00031a75 	.word	0x00031a75
   167cc:	00015075 	.word	0x00015075
   167d0:	20000474 	.word	0x20000474
   167d4:	00015fc1 	.word	0x00015fc1
   167d8:	0001605d 	.word	0x0001605d
   167dc:	00015e45 	.word	0x00015e45
   167e0:	00015ed9 	.word	0x00015ed9
   167e4:	0001a3a5 	.word	0x0001a3a5
   167e8:	20000b34 	.word	0x20000b34
   167ec:	20000058 	.word	0x20000058
   167f0:	000346d3 	.word	0x000346d3
   167f4:	000363d4 	.word	0x000363d4
   167f8:	200006fc 	.word	0x200006fc
   167fc:	0002ed95 	.word	0x0002ed95
   16800:	000363f0 	.word	0x000363f0

00016804 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   16804:	b590      	push	{r4, r7, lr}
   16806:	b083      	sub	sp, #12
   16808:	af00      	add	r7, sp, #0
   1680a:	0002      	movs	r2, r0
   1680c:	1dfb      	adds	r3, r7, #7
   1680e:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   16810:	1dfb      	adds	r3, r7, #7
   16812:	781b      	ldrb	r3, [r3, #0]
   16814:	2b03      	cmp	r3, #3
   16816:	d806      	bhi.n	16826 <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   16818:	4b05      	ldr	r3, [pc, #20]	; (16830 <WifiHandlerSetState+0x2c>)
   1681a:	6818      	ldr	r0, [r3, #0]
   1681c:	1df9      	adds	r1, r7, #7
   1681e:	2300      	movs	r3, #0
   16820:	220a      	movs	r2, #10
   16822:	4c04      	ldr	r4, [pc, #16]	; (16834 <WifiHandlerSetState+0x30>)
   16824:	47a0      	blx	r4
    }
}
   16826:	46c0      	nop			; (mov r8, r8)
   16828:	46bd      	mov	sp, r7
   1682a:	b003      	add	sp, #12
   1682c:	bd90      	pop	{r4, r7, pc}
   1682e:	46c0      	nop			; (mov r8, r8)
   16830:	20000478 	.word	0x20000478
   16834:	00019aed 	.word	0x00019aed

00016838 <WifiAddHydr8WLDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddHydr8WLDataToQueue(struct Hydr8WaterLevel *hydr8WaterData)
{
   16838:	b590      	push	{r4, r7, lr}
   1683a:	b085      	sub	sp, #20
   1683c:	af00      	add	r7, sp, #0
   1683e:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueHydr8WLBuffer, hydr8WaterData, (TickType_t)10);
   16840:	4b06      	ldr	r3, [pc, #24]	; (1685c <WifiAddHydr8WLDataToQueue+0x24>)
   16842:	6818      	ldr	r0, [r3, #0]
   16844:	6879      	ldr	r1, [r7, #4]
   16846:	2300      	movs	r3, #0
   16848:	220a      	movs	r2, #10
   1684a:	4c05      	ldr	r4, [pc, #20]	; (16860 <WifiAddHydr8WLDataToQueue+0x28>)
   1684c:	47a0      	blx	r4
   1684e:	0003      	movs	r3, r0
   16850:	60fb      	str	r3, [r7, #12]
    return error;
   16852:	68fb      	ldr	r3, [r7, #12]
}
   16854:	0018      	movs	r0, r3
   16856:	46bd      	mov	sp, r7
   16858:	b005      	add	sp, #20
   1685a:	bd90      	pop	{r4, r7, pc}
   1685c:	20000484 	.word	0x20000484
   16860:	00019aed 	.word	0x00019aed

00016864 <WifiAddHydr8TDSDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddHydr8TDSDataToQueue(struct Hydr8TdsLevel *hydr8TdsData)
{
   16864:	b590      	push	{r4, r7, lr}
   16866:	b085      	sub	sp, #20
   16868:	af00      	add	r7, sp, #0
   1686a:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueHydr8TDSBuffer, hydr8TdsData, (TickType_t)10);
   1686c:	4b06      	ldr	r3, [pc, #24]	; (16888 <WifiAddHydr8TDSDataToQueue+0x24>)
   1686e:	6818      	ldr	r0, [r3, #0]
   16870:	6879      	ldr	r1, [r7, #4]
   16872:	2300      	movs	r3, #0
   16874:	220a      	movs	r2, #10
   16876:	4c05      	ldr	r4, [pc, #20]	; (1688c <WifiAddHydr8TDSDataToQueue+0x28>)
   16878:	47a0      	blx	r4
   1687a:	0003      	movs	r3, r0
   1687c:	60fb      	str	r3, [r7, #12]
    return error;
   1687e:	68fb      	ldr	r3, [r7, #12]
}
   16880:	0018      	movs	r0, r3
   16882:	46bd      	mov	sp, r7
   16884:	b005      	add	sp, #20
   16886:	bd90      	pop	{r4, r7, pc}
   16888:	20000488 	.word	0x20000488
   1688c:	00019aed 	.word	0x00019aed

00016890 <WifiAddHydr8PumpLedToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddHydr8PumpLedToQueue(struct pumpLED *pumpLedStatus)
{
   16890:	b590      	push	{r4, r7, lr}
   16892:	b085      	sub	sp, #20
   16894:	af00      	add	r7, sp, #0
   16896:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueHydr8PumpLEDBuffer, pumpLedStatus, (TickType_t)10);
   16898:	4b06      	ldr	r3, [pc, #24]	; (168b4 <WifiAddHydr8PumpLedToQueue+0x24>)
   1689a:	6818      	ldr	r0, [r3, #0]
   1689c:	6879      	ldr	r1, [r7, #4]
   1689e:	2300      	movs	r3, #0
   168a0:	220a      	movs	r2, #10
   168a2:	4c05      	ldr	r4, [pc, #20]	; (168b8 <WifiAddHydr8PumpLedToQueue+0x28>)
   168a4:	47a0      	blx	r4
   168a6:	0003      	movs	r3, r0
   168a8:	60fb      	str	r3, [r7, #12]
    return error;
   168aa:	68fb      	ldr	r3, [r7, #12]
}
   168ac:	0018      	movs	r0, r3
   168ae:	46bd      	mov	sp, r7
   168b0:	b005      	add	sp, #20
   168b2:	bd90      	pop	{r4, r7, pc}
   168b4:	2000048c 	.word	0x2000048c
   168b8:	00019aed 	.word	0x00019aed

000168bc <WifiAddHydr8VolumeToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddHydr8VolumeToQueue(struct VolumeConsumed *volData)
{
   168bc:	b590      	push	{r4, r7, lr}
   168be:	b085      	sub	sp, #20
   168c0:	af00      	add	r7, sp, #0
   168c2:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueHydr8VolumeBuffer, volData, (TickType_t)10);
   168c4:	4b06      	ldr	r3, [pc, #24]	; (168e0 <WifiAddHydr8VolumeToQueue+0x24>)
   168c6:	6818      	ldr	r0, [r3, #0]
   168c8:	6879      	ldr	r1, [r7, #4]
   168ca:	2300      	movs	r3, #0
   168cc:	220a      	movs	r2, #10
   168ce:	4c05      	ldr	r4, [pc, #20]	; (168e4 <WifiAddHydr8VolumeToQueue+0x28>)
   168d0:	47a0      	blx	r4
   168d2:	0003      	movs	r3, r0
   168d4:	60fb      	str	r3, [r7, #12]
    return error;
   168d6:	68fb      	ldr	r3, [r7, #12]
}
   168d8:	0018      	movs	r0, r3
   168da:	46bd      	mov	sp, r7
   168dc:	b005      	add	sp, #20
   168de:	bd90      	pop	{r4, r7, pc}
   168e0:	20000494 	.word	0x20000494
   168e4:	00019aed 	.word	0x00019aed

000168e8 <WifiAddHydr8TdsLedToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddHydr8TdsLedToQueue(struct tdsLED *tdsLedStatus)
{
   168e8:	b590      	push	{r4, r7, lr}
   168ea:	b085      	sub	sp, #20
   168ec:	af00      	add	r7, sp, #0
   168ee:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueHydr8TdsLEDBuffer, tdsLedStatus, (TickType_t)10);
   168f0:	4b06      	ldr	r3, [pc, #24]	; (1690c <WifiAddHydr8TdsLedToQueue+0x24>)
   168f2:	6818      	ldr	r0, [r3, #0]
   168f4:	6879      	ldr	r1, [r7, #4]
   168f6:	2300      	movs	r3, #0
   168f8:	220a      	movs	r2, #10
   168fa:	4c05      	ldr	r4, [pc, #20]	; (16910 <WifiAddHydr8TdsLedToQueue+0x28>)
   168fc:	47a0      	blx	r4
   168fe:	0003      	movs	r3, r0
   16900:	60fb      	str	r3, [r7, #12]
    return error;
   16902:	68fb      	ldr	r3, [r7, #12]
}
   16904:	0018      	movs	r0, r3
   16906:	46bd      	mov	sp, r7
   16908:	b005      	add	sp, #20
   1690a:	bd90      	pop	{r4, r7, pc}
   1690c:	20000490 	.word	0x20000490
   16910:	00019aed 	.word	0x00019aed

00016914 <system_gclk_chan_get_config_defaults>:
{
   16914:	b580      	push	{r7, lr}
   16916:	b082      	sub	sp, #8
   16918:	af00      	add	r7, sp, #0
   1691a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1691c:	687b      	ldr	r3, [r7, #4]
   1691e:	2200      	movs	r2, #0
   16920:	701a      	strb	r2, [r3, #0]
}
   16922:	46c0      	nop			; (mov r8, r8)
   16924:	46bd      	mov	sp, r7
   16926:	b002      	add	sp, #8
   16928:	bd80      	pop	{r7, pc}
	...

0001692c <system_apb_clock_set_mask>:
{
   1692c:	b580      	push	{r7, lr}
   1692e:	b082      	sub	sp, #8
   16930:	af00      	add	r7, sp, #0
   16932:	0002      	movs	r2, r0
   16934:	6039      	str	r1, [r7, #0]
   16936:	1dfb      	adds	r3, r7, #7
   16938:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1693a:	1dfb      	adds	r3, r7, #7
   1693c:	781b      	ldrb	r3, [r3, #0]
   1693e:	2b01      	cmp	r3, #1
   16940:	d00a      	beq.n	16958 <system_apb_clock_set_mask+0x2c>
   16942:	2b02      	cmp	r3, #2
   16944:	d00f      	beq.n	16966 <system_apb_clock_set_mask+0x3a>
   16946:	2b00      	cmp	r3, #0
   16948:	d114      	bne.n	16974 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1694a:	4b0e      	ldr	r3, [pc, #56]	; (16984 <system_apb_clock_set_mask+0x58>)
   1694c:	4a0d      	ldr	r2, [pc, #52]	; (16984 <system_apb_clock_set_mask+0x58>)
   1694e:	6991      	ldr	r1, [r2, #24]
   16950:	683a      	ldr	r2, [r7, #0]
   16952:	430a      	orrs	r2, r1
   16954:	619a      	str	r2, [r3, #24]
			break;
   16956:	e00f      	b.n	16978 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   16958:	4b0a      	ldr	r3, [pc, #40]	; (16984 <system_apb_clock_set_mask+0x58>)
   1695a:	4a0a      	ldr	r2, [pc, #40]	; (16984 <system_apb_clock_set_mask+0x58>)
   1695c:	69d1      	ldr	r1, [r2, #28]
   1695e:	683a      	ldr	r2, [r7, #0]
   16960:	430a      	orrs	r2, r1
   16962:	61da      	str	r2, [r3, #28]
			break;
   16964:	e008      	b.n	16978 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   16966:	4b07      	ldr	r3, [pc, #28]	; (16984 <system_apb_clock_set_mask+0x58>)
   16968:	4a06      	ldr	r2, [pc, #24]	; (16984 <system_apb_clock_set_mask+0x58>)
   1696a:	6a11      	ldr	r1, [r2, #32]
   1696c:	683a      	ldr	r2, [r7, #0]
   1696e:	430a      	orrs	r2, r1
   16970:	621a      	str	r2, [r3, #32]
			break;
   16972:	e001      	b.n	16978 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   16974:	2317      	movs	r3, #23
   16976:	e000      	b.n	1697a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   16978:	2300      	movs	r3, #0
}
   1697a:	0018      	movs	r0, r3
   1697c:	46bd      	mov	sp, r7
   1697e:	b002      	add	sp, #8
   16980:	bd80      	pop	{r7, pc}
   16982:	46c0      	nop			; (mov r8, r8)
   16984:	40000400 	.word	0x40000400

00016988 <system_pinmux_get_config_defaults>:
{
   16988:	b580      	push	{r7, lr}
   1698a:	b082      	sub	sp, #8
   1698c:	af00      	add	r7, sp, #0
   1698e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   16990:	687b      	ldr	r3, [r7, #4]
   16992:	2280      	movs	r2, #128	; 0x80
   16994:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   16996:	687b      	ldr	r3, [r7, #4]
   16998:	2200      	movs	r2, #0
   1699a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1699c:	687b      	ldr	r3, [r7, #4]
   1699e:	2201      	movs	r2, #1
   169a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   169a2:	687b      	ldr	r3, [r7, #4]
   169a4:	2200      	movs	r2, #0
   169a6:	70da      	strb	r2, [r3, #3]
}
   169a8:	46c0      	nop			; (mov r8, r8)
   169aa:	46bd      	mov	sp, r7
   169ac:	b002      	add	sp, #8
   169ae:	bd80      	pop	{r7, pc}

000169b0 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   169b0:	b580      	push	{r7, lr}
   169b2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   169b4:	4b05      	ldr	r3, [pc, #20]	; (169cc <system_is_debugger_present+0x1c>)
   169b6:	789b      	ldrb	r3, [r3, #2]
   169b8:	b2db      	uxtb	r3, r3
   169ba:	001a      	movs	r2, r3
   169bc:	2302      	movs	r3, #2
   169be:	4013      	ands	r3, r2
   169c0:	1e5a      	subs	r2, r3, #1
   169c2:	4193      	sbcs	r3, r2
   169c4:	b2db      	uxtb	r3, r3
}
   169c6:	0018      	movs	r0, r3
   169c8:	46bd      	mov	sp, r7
   169ca:	bd80      	pop	{r7, pc}
   169cc:	41002000 	.word	0x41002000

000169d0 <system_interrupt_enter_critical_section>:
{
   169d0:	b580      	push	{r7, lr}
   169d2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   169d4:	4b02      	ldr	r3, [pc, #8]	; (169e0 <system_interrupt_enter_critical_section+0x10>)
   169d6:	4798      	blx	r3
}
   169d8:	46c0      	nop			; (mov r8, r8)
   169da:	46bd      	mov	sp, r7
   169dc:	bd80      	pop	{r7, pc}
   169de:	46c0      	nop			; (mov r8, r8)
   169e0:	000255e5 	.word	0x000255e5

000169e4 <system_interrupt_leave_critical_section>:
{
   169e4:	b580      	push	{r7, lr}
   169e6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   169e8:	4b02      	ldr	r3, [pc, #8]	; (169f4 <system_interrupt_leave_critical_section+0x10>)
   169ea:	4798      	blx	r3
}
   169ec:	46c0      	nop			; (mov r8, r8)
   169ee:	46bd      	mov	sp, r7
   169f0:	bd80      	pop	{r7, pc}
   169f2:	46c0      	nop			; (mov r8, r8)
   169f4:	00025639 	.word	0x00025639

000169f8 <system_interrupt_disable>:
{
   169f8:	b580      	push	{r7, lr}
   169fa:	b082      	sub	sp, #8
   169fc:	af00      	add	r7, sp, #0
   169fe:	0002      	movs	r2, r0
   16a00:	1dfb      	adds	r3, r7, #7
   16a02:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   16a04:	4a07      	ldr	r2, [pc, #28]	; (16a24 <system_interrupt_disable+0x2c>)
   16a06:	1dfb      	adds	r3, r7, #7
   16a08:	781b      	ldrb	r3, [r3, #0]
   16a0a:	0019      	movs	r1, r3
   16a0c:	231f      	movs	r3, #31
   16a0e:	400b      	ands	r3, r1
   16a10:	2101      	movs	r1, #1
   16a12:	4099      	lsls	r1, r3
   16a14:	000b      	movs	r3, r1
   16a16:	0019      	movs	r1, r3
   16a18:	2380      	movs	r3, #128	; 0x80
   16a1a:	50d1      	str	r1, [r2, r3]
}
   16a1c:	46c0      	nop			; (mov r8, r8)
   16a1e:	46bd      	mov	sp, r7
   16a20:	b002      	add	sp, #8
   16a22:	bd80      	pop	{r7, pc}
   16a24:	e000e100 	.word	0xe000e100

00016a28 <i2c_master_is_syncing>:
{
   16a28:	b580      	push	{r7, lr}
   16a2a:	b084      	sub	sp, #16
   16a2c:	af00      	add	r7, sp, #0
   16a2e:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   16a30:	687b      	ldr	r3, [r7, #4]
   16a32:	681b      	ldr	r3, [r3, #0]
   16a34:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   16a36:	68fb      	ldr	r3, [r7, #12]
   16a38:	69db      	ldr	r3, [r3, #28]
   16a3a:	2207      	movs	r2, #7
   16a3c:	4013      	ands	r3, r2
   16a3e:	1e5a      	subs	r2, r3, #1
   16a40:	4193      	sbcs	r3, r2
   16a42:	b2db      	uxtb	r3, r3
}
   16a44:	0018      	movs	r0, r3
   16a46:	46bd      	mov	sp, r7
   16a48:	b004      	add	sp, #16
   16a4a:	bd80      	pop	{r7, pc}

00016a4c <_i2c_master_wait_for_sync>:
{
   16a4c:	b580      	push	{r7, lr}
   16a4e:	b082      	sub	sp, #8
   16a50:	af00      	add	r7, sp, #0
   16a52:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   16a54:	46c0      	nop			; (mov r8, r8)
   16a56:	687b      	ldr	r3, [r7, #4]
   16a58:	0018      	movs	r0, r3
   16a5a:	4b04      	ldr	r3, [pc, #16]	; (16a6c <_i2c_master_wait_for_sync+0x20>)
   16a5c:	4798      	blx	r3
   16a5e:	1e03      	subs	r3, r0, #0
   16a60:	d1f9      	bne.n	16a56 <_i2c_master_wait_for_sync+0xa>
}
   16a62:	46c0      	nop			; (mov r8, r8)
   16a64:	46bd      	mov	sp, r7
   16a66:	b002      	add	sp, #8
   16a68:	bd80      	pop	{r7, pc}
   16a6a:	46c0      	nop			; (mov r8, r8)
   16a6c:	00016a29 	.word	0x00016a29

00016a70 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   16a70:	b580      	push	{r7, lr}
   16a72:	b084      	sub	sp, #16
   16a74:	af00      	add	r7, sp, #0
   16a76:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16a78:	687b      	ldr	r3, [r7, #4]
   16a7a:	681b      	ldr	r3, [r3, #0]
   16a7c:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   16a7e:	687b      	ldr	r3, [r7, #4]
   16a80:	681b      	ldr	r3, [r3, #0]
   16a82:	0018      	movs	r0, r3
   16a84:	4b0d      	ldr	r3, [pc, #52]	; (16abc <i2c_master_disable+0x4c>)
   16a86:	4798      	blx	r3
   16a88:	0003      	movs	r3, r0
   16a8a:	0018      	movs	r0, r3
   16a8c:	4b0c      	ldr	r3, [pc, #48]	; (16ac0 <i2c_master_disable+0x50>)
   16a8e:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   16a90:	687b      	ldr	r3, [r7, #4]
   16a92:	0018      	movs	r0, r3
   16a94:	4b0b      	ldr	r3, [pc, #44]	; (16ac4 <i2c_master_disable+0x54>)
   16a96:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   16a98:	68fb      	ldr	r3, [r7, #12]
   16a9a:	2283      	movs	r2, #131	; 0x83
   16a9c:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   16a9e:	68fb      	ldr	r3, [r7, #12]
   16aa0:	2283      	movs	r2, #131	; 0x83
   16aa2:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   16aa4:	68fb      	ldr	r3, [r7, #12]
   16aa6:	681b      	ldr	r3, [r3, #0]
   16aa8:	2202      	movs	r2, #2
   16aaa:	4393      	bics	r3, r2
   16aac:	001a      	movs	r2, r3
   16aae:	68fb      	ldr	r3, [r7, #12]
   16ab0:	601a      	str	r2, [r3, #0]

}
   16ab2:	46c0      	nop			; (mov r8, r8)
   16ab4:	46bd      	mov	sp, r7
   16ab6:	b004      	add	sp, #16
   16ab8:	bd80      	pop	{r7, pc}
   16aba:	46c0      	nop			; (mov r8, r8)
   16abc:	00026ab9 	.word	0x00026ab9
   16ac0:	000169f9 	.word	0x000169f9
   16ac4:	00016a4d 	.word	0x00016a4d

00016ac8 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   16ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
   16aca:	b097      	sub	sp, #92	; 0x5c
   16acc:	af00      	add	r7, sp, #0
   16ace:	6178      	str	r0, [r7, #20]
   16ad0:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   16ad2:	2300      	movs	r3, #0
   16ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   16ad6:	2300      	movs	r3, #0
   16ad8:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   16ada:	2300      	movs	r3, #0
   16adc:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   16ade:	233b      	movs	r3, #59	; 0x3b
   16ae0:	2210      	movs	r2, #16
   16ae2:	4694      	mov	ip, r2
   16ae4:	44bc      	add	ip, r7
   16ae6:	4463      	add	r3, ip
   16ae8:	2200      	movs	r2, #0
   16aea:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16aec:	697b      	ldr	r3, [r7, #20]
   16aee:	681b      	ldr	r3, [r3, #0]
   16af0:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   16af2:	697b      	ldr	r3, [r7, #20]
   16af4:	681b      	ldr	r3, [r3, #0]
   16af6:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   16af8:	2323      	movs	r3, #35	; 0x23
   16afa:	2210      	movs	r2, #16
   16afc:	18ba      	adds	r2, r7, r2
   16afe:	18d4      	adds	r4, r2, r3
   16b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16b02:	0018      	movs	r0, r3
   16b04:	4bc0      	ldr	r3, [pc, #768]	; (16e08 <_i2c_master_set_config+0x340>)
   16b06:	4798      	blx	r3
   16b08:	0003      	movs	r3, r0
   16b0a:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   16b0c:	230c      	movs	r3, #12
   16b0e:	2210      	movs	r2, #16
   16b10:	4694      	mov	ip, r2
   16b12:	44bc      	add	ip, r7
   16b14:	4463      	add	r3, ip
   16b16:	0018      	movs	r0, r3
   16b18:	4bbc      	ldr	r3, [pc, #752]	; (16e0c <_i2c_master_set_config+0x344>)
   16b1a:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   16b1c:	693b      	ldr	r3, [r7, #16]
   16b1e:	69db      	ldr	r3, [r3, #28]
   16b20:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   16b22:	693b      	ldr	r3, [r7, #16]
   16b24:	6a1b      	ldr	r3, [r3, #32]
   16b26:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   16b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16b2a:	2b00      	cmp	r3, #0
   16b2c:	d106      	bne.n	16b3c <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   16b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16b30:	2100      	movs	r1, #0
   16b32:	0018      	movs	r0, r3
   16b34:	4bb6      	ldr	r3, [pc, #728]	; (16e10 <_i2c_master_set_config+0x348>)
   16b36:	4798      	blx	r3
   16b38:	0003      	movs	r3, r0
   16b3a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   16b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16b3e:	b2da      	uxtb	r2, r3
   16b40:	230c      	movs	r3, #12
   16b42:	2110      	movs	r1, #16
   16b44:	468c      	mov	ip, r1
   16b46:	44bc      	add	ip, r7
   16b48:	4463      	add	r3, ip
   16b4a:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   16b4c:	230c      	movs	r3, #12
   16b4e:	2210      	movs	r2, #16
   16b50:	4694      	mov	ip, r2
   16b52:	44bc      	add	ip, r7
   16b54:	4463      	add	r3, ip
   16b56:	2202      	movs	r2, #2
   16b58:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   16b5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16b5c:	0c1b      	lsrs	r3, r3, #16
   16b5e:	b2db      	uxtb	r3, r3
   16b60:	220c      	movs	r2, #12
   16b62:	2110      	movs	r1, #16
   16b64:	468c      	mov	ip, r1
   16b66:	44bc      	add	ip, r7
   16b68:	4462      	add	r2, ip
   16b6a:	0011      	movs	r1, r2
   16b6c:	0018      	movs	r0, r3
   16b6e:	4ba9      	ldr	r3, [pc, #676]	; (16e14 <_i2c_master_set_config+0x34c>)
   16b70:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   16b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16b74:	2b00      	cmp	r3, #0
   16b76:	d106      	bne.n	16b86 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   16b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16b7a:	2101      	movs	r1, #1
   16b7c:	0018      	movs	r0, r3
   16b7e:	4ba4      	ldr	r3, [pc, #656]	; (16e10 <_i2c_master_set_config+0x348>)
   16b80:	4798      	blx	r3
   16b82:	0003      	movs	r3, r0
   16b84:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   16b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16b88:	b2da      	uxtb	r2, r3
   16b8a:	230c      	movs	r3, #12
   16b8c:	2110      	movs	r1, #16
   16b8e:	468c      	mov	ip, r1
   16b90:	44bc      	add	ip, r7
   16b92:	4463      	add	r3, ip
   16b94:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   16b96:	230c      	movs	r3, #12
   16b98:	2210      	movs	r2, #16
   16b9a:	4694      	mov	ip, r2
   16b9c:	44bc      	add	ip, r7
   16b9e:	4463      	add	r3, ip
   16ba0:	2202      	movs	r2, #2
   16ba2:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   16ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16ba6:	0c1b      	lsrs	r3, r3, #16
   16ba8:	b2db      	uxtb	r3, r3
   16baa:	220c      	movs	r2, #12
   16bac:	2110      	movs	r1, #16
   16bae:	468c      	mov	ip, r1
   16bb0:	44bc      	add	ip, r7
   16bb2:	4462      	add	r2, ip
   16bb4:	0011      	movs	r1, r2
   16bb6:	0018      	movs	r0, r3
   16bb8:	4b96      	ldr	r3, [pc, #600]	; (16e14 <_i2c_master_set_config+0x34c>)
   16bba:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   16bbc:	693b      	ldr	r3, [r7, #16]
   16bbe:	8a9a      	ldrh	r2, [r3, #20]
   16bc0:	697b      	ldr	r3, [r7, #20]
   16bc2:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   16bc4:	693b      	ldr	r3, [r7, #16]
   16bc6:	8ada      	ldrh	r2, [r3, #22]
   16bc8:	697b      	ldr	r3, [r7, #20]
   16bca:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   16bcc:	693b      	ldr	r3, [r7, #16]
   16bce:	7e1b      	ldrb	r3, [r3, #24]
   16bd0:	2b00      	cmp	r3, #0
   16bd2:	d103      	bne.n	16bdc <_i2c_master_set_config+0x114>
   16bd4:	4b90      	ldr	r3, [pc, #576]	; (16e18 <_i2c_master_set_config+0x350>)
   16bd6:	4798      	blx	r3
   16bd8:	1e03      	subs	r3, r0, #0
   16bda:	d002      	beq.n	16be2 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   16bdc:	2380      	movs	r3, #128	; 0x80
   16bde:	657b      	str	r3, [r7, #84]	; 0x54
   16be0:	e001      	b.n	16be6 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   16be2:	2300      	movs	r3, #0
   16be4:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   16be6:	693b      	ldr	r3, [r7, #16]
   16be8:	691b      	ldr	r3, [r3, #16]
   16bea:	2b00      	cmp	r3, #0
   16bec:	d004      	beq.n	16bf8 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   16bee:	693b      	ldr	r3, [r7, #16]
   16bf0:	691b      	ldr	r3, [r3, #16]
   16bf2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   16bf4:	4313      	orrs	r3, r2
   16bf6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   16bf8:	693b      	ldr	r3, [r7, #16]
   16bfa:	689b      	ldr	r3, [r3, #8]
   16bfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   16bfe:	4313      	orrs	r3, r2
   16c00:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   16c02:	693b      	ldr	r3, [r7, #16]
   16c04:	2224      	movs	r2, #36	; 0x24
   16c06:	5c9b      	ldrb	r3, [r3, r2]
   16c08:	2b00      	cmp	r3, #0
   16c0a:	d004      	beq.n	16c16 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   16c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   16c0e:	2280      	movs	r2, #128	; 0x80
   16c10:	05d2      	lsls	r2, r2, #23
   16c12:	4313      	orrs	r3, r2
   16c14:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   16c16:	693b      	ldr	r3, [r7, #16]
   16c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16c1a:	2b00      	cmp	r3, #0
   16c1c:	d004      	beq.n	16c28 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   16c1e:	693b      	ldr	r3, [r7, #16]
   16c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16c22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   16c24:	4313      	orrs	r3, r2
   16c26:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   16c28:	693b      	ldr	r3, [r7, #16]
   16c2a:	222c      	movs	r2, #44	; 0x2c
   16c2c:	5c9b      	ldrb	r3, [r3, r2]
   16c2e:	2b00      	cmp	r3, #0
   16c30:	d105      	bne.n	16c3e <_i2c_master_set_config+0x176>
   16c32:	693b      	ldr	r3, [r7, #16]
   16c34:	689a      	ldr	r2, [r3, #8]
   16c36:	2380      	movs	r3, #128	; 0x80
   16c38:	049b      	lsls	r3, r3, #18
   16c3a:	429a      	cmp	r2, r3
   16c3c:	d104      	bne.n	16c48 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   16c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   16c40:	2280      	movs	r2, #128	; 0x80
   16c42:	0512      	lsls	r2, r2, #20
   16c44:	4313      	orrs	r3, r2
   16c46:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   16c48:	693b      	ldr	r3, [r7, #16]
   16c4a:	222d      	movs	r2, #45	; 0x2d
   16c4c:	5c9b      	ldrb	r3, [r3, r2]
   16c4e:	2b00      	cmp	r3, #0
   16c50:	d004      	beq.n	16c5c <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   16c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   16c54:	2280      	movs	r2, #128	; 0x80
   16c56:	0412      	lsls	r2, r2, #16
   16c58:	4313      	orrs	r3, r2
   16c5a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   16c5c:	693b      	ldr	r3, [r7, #16]
   16c5e:	222e      	movs	r2, #46	; 0x2e
   16c60:	5c9b      	ldrb	r3, [r3, r2]
   16c62:	2b00      	cmp	r3, #0
   16c64:	d004      	beq.n	16c70 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   16c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   16c68:	2280      	movs	r2, #128	; 0x80
   16c6a:	03d2      	lsls	r2, r2, #15
   16c6c:	4313      	orrs	r3, r2
   16c6e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   16c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16c72:	681a      	ldr	r2, [r3, #0]
   16c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   16c76:	431a      	orrs	r2, r3
   16c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16c7a:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   16c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16c7e:	2280      	movs	r2, #128	; 0x80
   16c80:	0052      	lsls	r2, r2, #1
   16c82:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   16c84:	2323      	movs	r3, #35	; 0x23
   16c86:	2210      	movs	r2, #16
   16c88:	4694      	mov	ip, r2
   16c8a:	44bc      	add	ip, r7
   16c8c:	4463      	add	r3, ip
   16c8e:	781b      	ldrb	r3, [r3, #0]
   16c90:	3314      	adds	r3, #20
   16c92:	b2db      	uxtb	r3, r3
   16c94:	0018      	movs	r0, r3
   16c96:	4b61      	ldr	r3, [pc, #388]	; (16e1c <_i2c_master_set_config+0x354>)
   16c98:	4798      	blx	r3
   16c9a:	0003      	movs	r3, r0
   16c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   16c9e:	693b      	ldr	r3, [r7, #16]
   16ca0:	681b      	ldr	r3, [r3, #0]
   16ca2:	22fa      	movs	r2, #250	; 0xfa
   16ca4:	0092      	lsls	r2, r2, #2
   16ca6:	4353      	muls	r3, r2
   16ca8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   16caa:	693b      	ldr	r3, [r7, #16]
   16cac:	685b      	ldr	r3, [r3, #4]
   16cae:	22fa      	movs	r2, #250	; 0xfa
   16cb0:	0092      	lsls	r2, r2, #2
   16cb2:	4353      	muls	r3, r2
   16cb4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   16cb6:	693b      	ldr	r3, [r7, #16]
   16cb8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   16cba:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   16cbc:	4b58      	ldr	r3, [pc, #352]	; (16e20 <_i2c_master_set_config+0x358>)
   16cbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16cc0:	4798      	blx	r3
   16cc2:	0005      	movs	r5, r0
   16cc4:	000e      	movs	r6, r1
   16cc6:	4b56      	ldr	r3, [pc, #344]	; (16e20 <_i2c_master_set_config+0x358>)
   16cc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   16cca:	4798      	blx	r3
   16ccc:	60b8      	str	r0, [r7, #8]
   16cce:	60f9      	str	r1, [r7, #12]
   16cd0:	4b53      	ldr	r3, [pc, #332]	; (16e20 <_i2c_master_set_config+0x358>)
   16cd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16cd4:	4798      	blx	r3
   16cd6:	4c53      	ldr	r4, [pc, #332]	; (16e24 <_i2c_master_set_config+0x35c>)
   16cd8:	4a53      	ldr	r2, [pc, #332]	; (16e28 <_i2c_master_set_config+0x360>)
   16cda:	4b54      	ldr	r3, [pc, #336]	; (16e2c <_i2c_master_set_config+0x364>)
   16cdc:	47a0      	blx	r4
   16cde:	0003      	movs	r3, r0
   16ce0:	000c      	movs	r4, r1
   16ce2:	603b      	str	r3, [r7, #0]
   16ce4:	607c      	str	r4, [r7, #4]
   16ce6:	4b4e      	ldr	r3, [pc, #312]	; (16e20 <_i2c_master_set_config+0x358>)
   16ce8:	6a38      	ldr	r0, [r7, #32]
   16cea:	4798      	blx	r3
   16cec:	0002      	movs	r2, r0
   16cee:	000b      	movs	r3, r1
   16cf0:	4c4c      	ldr	r4, [pc, #304]	; (16e24 <_i2c_master_set_config+0x35c>)
   16cf2:	6838      	ldr	r0, [r7, #0]
   16cf4:	6879      	ldr	r1, [r7, #4]
   16cf6:	47a0      	blx	r4
   16cf8:	0003      	movs	r3, r0
   16cfa:	000c      	movs	r4, r1
   16cfc:	0018      	movs	r0, r3
   16cfe:	0021      	movs	r1, r4
   16d00:	4c4b      	ldr	r4, [pc, #300]	; (16e30 <_i2c_master_set_config+0x368>)
   16d02:	2200      	movs	r2, #0
   16d04:	4b4b      	ldr	r3, [pc, #300]	; (16e34 <_i2c_master_set_config+0x36c>)
   16d06:	47a0      	blx	r4
   16d08:	0003      	movs	r3, r0
   16d0a:	000c      	movs	r4, r1
   16d0c:	001a      	movs	r2, r3
   16d0e:	0023      	movs	r3, r4
   16d10:	4c44      	ldr	r4, [pc, #272]	; (16e24 <_i2c_master_set_config+0x35c>)
   16d12:	68b8      	ldr	r0, [r7, #8]
   16d14:	68f9      	ldr	r1, [r7, #12]
   16d16:	47a0      	blx	r4
   16d18:	0003      	movs	r3, r0
   16d1a:	000c      	movs	r4, r1
   16d1c:	001a      	movs	r2, r3
   16d1e:	0023      	movs	r3, r4
   16d20:	4c45      	ldr	r4, [pc, #276]	; (16e38 <_i2c_master_set_config+0x370>)
   16d22:	0028      	movs	r0, r5
   16d24:	0031      	movs	r1, r6
   16d26:	47a0      	blx	r4
   16d28:	0003      	movs	r3, r0
   16d2a:	000c      	movs	r4, r1
   16d2c:	001d      	movs	r5, r3
   16d2e:	0026      	movs	r6, r4
   16d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16d32:	005a      	lsls	r2, r3, #1
   16d34:	4b3a      	ldr	r3, [pc, #232]	; (16e20 <_i2c_master_set_config+0x358>)
   16d36:	0010      	movs	r0, r2
   16d38:	4798      	blx	r3
   16d3a:	0002      	movs	r2, r0
   16d3c:	000b      	movs	r3, r1
   16d3e:	4c3c      	ldr	r4, [pc, #240]	; (16e30 <_i2c_master_set_config+0x368>)
   16d40:	0028      	movs	r0, r5
   16d42:	0031      	movs	r1, r6
   16d44:	47a0      	blx	r4
   16d46:	0003      	movs	r3, r0
   16d48:	000c      	movs	r4, r1
   16d4a:	0018      	movs	r0, r3
   16d4c:	0021      	movs	r1, r4
   16d4e:	4c3a      	ldr	r4, [pc, #232]	; (16e38 <_i2c_master_set_config+0x370>)
   16d50:	2200      	movs	r2, #0
   16d52:	4b3a      	ldr	r3, [pc, #232]	; (16e3c <_i2c_master_set_config+0x374>)
   16d54:	47a0      	blx	r4
   16d56:	0003      	movs	r3, r0
   16d58:	000c      	movs	r4, r1
   16d5a:	001d      	movs	r5, r3
   16d5c:	0026      	movs	r6, r4
   16d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16d60:	005a      	lsls	r2, r3, #1
   16d62:	4b2f      	ldr	r3, [pc, #188]	; (16e20 <_i2c_master_set_config+0x358>)
   16d64:	0010      	movs	r0, r2
   16d66:	4798      	blx	r3
   16d68:	0002      	movs	r2, r0
   16d6a:	000b      	movs	r3, r1
   16d6c:	4c34      	ldr	r4, [pc, #208]	; (16e40 <_i2c_master_set_config+0x378>)
   16d6e:	0028      	movs	r0, r5
   16d70:	0031      	movs	r1, r6
   16d72:	47a0      	blx	r4
   16d74:	0003      	movs	r3, r0
   16d76:	000c      	movs	r4, r1
   16d78:	0019      	movs	r1, r3
   16d7a:	0022      	movs	r2, r4
   16d7c:	4b31      	ldr	r3, [pc, #196]	; (16e44 <_i2c_master_set_config+0x37c>)
   16d7e:	0008      	movs	r0, r1
   16d80:	0011      	movs	r1, r2
   16d82:	4798      	blx	r3
   16d84:	0003      	movs	r3, r0
   16d86:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   16d88:	693b      	ldr	r3, [r7, #16]
   16d8a:	689a      	ldr	r2, [r3, #8]
   16d8c:	2380      	movs	r3, #128	; 0x80
   16d8e:	049b      	lsls	r3, r3, #18
   16d90:	429a      	cmp	r2, r3
   16d92:	d16a      	bne.n	16e6a <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   16d94:	4b22      	ldr	r3, [pc, #136]	; (16e20 <_i2c_master_set_config+0x358>)
   16d96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16d98:	4798      	blx	r3
   16d9a:	4c25      	ldr	r4, [pc, #148]	; (16e30 <_i2c_master_set_config+0x368>)
   16d9c:	0002      	movs	r2, r0
   16d9e:	000b      	movs	r3, r1
   16da0:	47a0      	blx	r4
   16da2:	0003      	movs	r3, r0
   16da4:	000c      	movs	r4, r1
   16da6:	001d      	movs	r5, r3
   16da8:	0026      	movs	r6, r4
   16daa:	4b1d      	ldr	r3, [pc, #116]	; (16e20 <_i2c_master_set_config+0x358>)
   16dac:	6a78      	ldr	r0, [r7, #36]	; 0x24
   16dae:	4798      	blx	r3
   16db0:	4c1c      	ldr	r4, [pc, #112]	; (16e24 <_i2c_master_set_config+0x35c>)
   16db2:	2200      	movs	r2, #0
   16db4:	4b24      	ldr	r3, [pc, #144]	; (16e48 <_i2c_master_set_config+0x380>)
   16db6:	47a0      	blx	r4
   16db8:	0003      	movs	r3, r0
   16dba:	000c      	movs	r4, r1
   16dbc:	001a      	movs	r2, r3
   16dbe:	0023      	movs	r3, r4
   16dc0:	4c1f      	ldr	r4, [pc, #124]	; (16e40 <_i2c_master_set_config+0x378>)
   16dc2:	0028      	movs	r0, r5
   16dc4:	0031      	movs	r1, r6
   16dc6:	47a0      	blx	r4
   16dc8:	0003      	movs	r3, r0
   16dca:	000c      	movs	r4, r1
   16dcc:	0018      	movs	r0, r3
   16dce:	0021      	movs	r1, r4
   16dd0:	4c19      	ldr	r4, [pc, #100]	; (16e38 <_i2c_master_set_config+0x370>)
   16dd2:	2200      	movs	r2, #0
   16dd4:	4b19      	ldr	r3, [pc, #100]	; (16e3c <_i2c_master_set_config+0x374>)
   16dd6:	47a0      	blx	r4
   16dd8:	0003      	movs	r3, r0
   16dda:	000c      	movs	r4, r1
   16ddc:	0019      	movs	r1, r3
   16dde:	0022      	movs	r2, r4
   16de0:	4b18      	ldr	r3, [pc, #96]	; (16e44 <_i2c_master_set_config+0x37c>)
   16de2:	0008      	movs	r0, r1
   16de4:	0011      	movs	r1, r2
   16de6:	4798      	blx	r3
   16de8:	0003      	movs	r3, r0
   16dea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   16dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16dee:	2b00      	cmp	r3, #0
   16df0:	d02e      	beq.n	16e50 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   16df2:	4b16      	ldr	r3, [pc, #88]	; (16e4c <_i2c_master_set_config+0x384>)
   16df4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   16df6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16df8:	4798      	blx	r3
   16dfa:	0003      	movs	r3, r0
   16dfc:	1e9a      	subs	r2, r3, #2
   16dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16e00:	1ad3      	subs	r3, r2, r3
   16e02:	653b      	str	r3, [r7, #80]	; 0x50
   16e04:	e031      	b.n	16e6a <_i2c_master_set_config+0x3a2>
   16e06:	46c0      	nop			; (mov r8, r8)
   16e08:	000269e9 	.word	0x000269e9
   16e0c:	00016989 	.word	0x00016989
   16e10:	0002682d 	.word	0x0002682d
   16e14:	000295d9 	.word	0x000295d9
   16e18:	000169b1 	.word	0x000169b1
   16e1c:	0002939d 	.word	0x0002939d
   16e20:	00034005 	.word	0x00034005
   16e24:	00033471 	.word	0x00033471
   16e28:	e826d695 	.word	0xe826d695
   16e2c:	3e112e0b 	.word	0x3e112e0b
   16e30:	000327e9 	.word	0x000327e9
   16e34:	40240000 	.word	0x40240000
   16e38:	00033971 	.word	0x00033971
   16e3c:	3ff00000 	.word	0x3ff00000
   16e40:	00032e09 	.word	0x00032e09
   16e44:	00033f9d 	.word	0x00033f9d
   16e48:	40080000 	.word	0x40080000
   16e4c:	00031e9d 	.word	0x00031e9d
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   16e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16e52:	005a      	lsls	r2, r3, #1
   16e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16e56:	18d3      	adds	r3, r2, r3
   16e58:	1e5a      	subs	r2, r3, #1
   16e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16e5c:	0059      	lsls	r1, r3, #1
   16e5e:	4b1d      	ldr	r3, [pc, #116]	; (16ed4 <_i2c_master_set_config+0x40c>)
   16e60:	0010      	movs	r0, r2
   16e62:	4798      	blx	r3
   16e64:	0003      	movs	r3, r0
   16e66:	3b01      	subs	r3, #1
   16e68:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   16e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16e6c:	2bff      	cmp	r3, #255	; 0xff
   16e6e:	dc08      	bgt.n	16e82 <_i2c_master_set_config+0x3ba>
   16e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16e72:	2b00      	cmp	r3, #0
   16e74:	db05      	blt.n	16e82 <_i2c_master_set_config+0x3ba>
   16e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   16e78:	2bff      	cmp	r3, #255	; 0xff
   16e7a:	dc02      	bgt.n	16e82 <_i2c_master_set_config+0x3ba>
   16e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   16e7e:	2b00      	cmp	r3, #0
   16e80:	da06      	bge.n	16e90 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   16e82:	233b      	movs	r3, #59	; 0x3b
   16e84:	2210      	movs	r2, #16
   16e86:	4694      	mov	ip, r2
   16e88:	44bc      	add	ip, r7
   16e8a:	4463      	add	r3, ip
   16e8c:	2240      	movs	r2, #64	; 0x40
   16e8e:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   16e90:	233b      	movs	r3, #59	; 0x3b
   16e92:	2210      	movs	r2, #16
   16e94:	4694      	mov	ip, r2
   16e96:	44bc      	add	ip, r7
   16e98:	4463      	add	r3, ip
   16e9a:	781b      	ldrb	r3, [r3, #0]
   16e9c:	2b40      	cmp	r3, #64	; 0x40
   16e9e:	d00e      	beq.n	16ebe <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   16ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16ea2:	22ff      	movs	r2, #255	; 0xff
   16ea4:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   16ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   16ea8:	041b      	lsls	r3, r3, #16
   16eaa:	0019      	movs	r1, r3
   16eac:	23ff      	movs	r3, #255	; 0xff
   16eae:	041b      	lsls	r3, r3, #16
   16eb0:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   16eb2:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   16eb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   16eb6:	0612      	lsls	r2, r2, #24
   16eb8:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   16eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16ebc:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   16ebe:	233b      	movs	r3, #59	; 0x3b
   16ec0:	2210      	movs	r2, #16
   16ec2:	4694      	mov	ip, r2
   16ec4:	44bc      	add	ip, r7
   16ec6:	4463      	add	r3, ip
   16ec8:	781b      	ldrb	r3, [r3, #0]
}
   16eca:	0018      	movs	r0, r3
   16ecc:	46bd      	mov	sp, r7
   16ece:	b017      	add	sp, #92	; 0x5c
   16ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16ed2:	46c0      	nop			; (mov r8, r8)
   16ed4:	00031e9d 	.word	0x00031e9d

00016ed8 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   16ed8:	b590      	push	{r4, r7, lr}
   16eda:	b08b      	sub	sp, #44	; 0x2c
   16edc:	af00      	add	r7, sp, #0
   16ede:	60f8      	str	r0, [r7, #12]
   16ee0:	60b9      	str	r1, [r7, #8]
   16ee2:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   16ee4:	68fb      	ldr	r3, [r7, #12]
   16ee6:	68ba      	ldr	r2, [r7, #8]
   16ee8:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16eea:	68fb      	ldr	r3, [r7, #12]
   16eec:	681b      	ldr	r3, [r3, #0]
   16eee:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   16ef0:	68fb      	ldr	r3, [r7, #12]
   16ef2:	681b      	ldr	r3, [r3, #0]
   16ef4:	0018      	movs	r0, r3
   16ef6:	4b3b      	ldr	r3, [pc, #236]	; (16fe4 <i2c_master_init+0x10c>)
   16ef8:	4798      	blx	r3
   16efa:	0003      	movs	r3, r0
   16efc:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   16efe:	6a3b      	ldr	r3, [r7, #32]
   16f00:	3302      	adds	r3, #2
   16f02:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   16f04:	6a3b      	ldr	r3, [r7, #32]
   16f06:	3314      	adds	r3, #20
   16f08:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   16f0a:	2201      	movs	r2, #1
   16f0c:	69fb      	ldr	r3, [r7, #28]
   16f0e:	409a      	lsls	r2, r3
   16f10:	0013      	movs	r3, r2
   16f12:	0019      	movs	r1, r3
   16f14:	2002      	movs	r0, #2
   16f16:	4b34      	ldr	r3, [pc, #208]	; (16fe8 <i2c_master_init+0x110>)
   16f18:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   16f1a:	2314      	movs	r3, #20
   16f1c:	18fb      	adds	r3, r7, r3
   16f1e:	0018      	movs	r0, r3
   16f20:	4b32      	ldr	r3, [pc, #200]	; (16fec <i2c_master_init+0x114>)
   16f22:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   16f24:	687b      	ldr	r3, [r7, #4]
   16f26:	7b1a      	ldrb	r2, [r3, #12]
   16f28:	2314      	movs	r3, #20
   16f2a:	18fb      	adds	r3, r7, r3
   16f2c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   16f2e:	69bb      	ldr	r3, [r7, #24]
   16f30:	b2db      	uxtb	r3, r3
   16f32:	2214      	movs	r2, #20
   16f34:	18ba      	adds	r2, r7, r2
   16f36:	0011      	movs	r1, r2
   16f38:	0018      	movs	r0, r3
   16f3a:	4b2d      	ldr	r3, [pc, #180]	; (16ff0 <i2c_master_init+0x118>)
   16f3c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   16f3e:	69bb      	ldr	r3, [r7, #24]
   16f40:	b2db      	uxtb	r3, r3
   16f42:	0018      	movs	r0, r3
   16f44:	4b2b      	ldr	r3, [pc, #172]	; (16ff4 <i2c_master_init+0x11c>)
   16f46:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   16f48:	687b      	ldr	r3, [r7, #4]
   16f4a:	7b1b      	ldrb	r3, [r3, #12]
   16f4c:	2100      	movs	r1, #0
   16f4e:	0018      	movs	r0, r3
   16f50:	4b29      	ldr	r3, [pc, #164]	; (16ff8 <i2c_master_init+0x120>)
   16f52:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   16f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16f56:	681b      	ldr	r3, [r3, #0]
   16f58:	2202      	movs	r2, #2
   16f5a:	4013      	ands	r3, r2
   16f5c:	d001      	beq.n	16f62 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   16f5e:	231c      	movs	r3, #28
   16f60:	e03b      	b.n	16fda <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   16f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16f64:	681b      	ldr	r3, [r3, #0]
   16f66:	2201      	movs	r2, #1
   16f68:	4013      	ands	r3, r2
   16f6a:	d001      	beq.n	16f70 <i2c_master_init+0x98>
		return STATUS_BUSY;
   16f6c:	2305      	movs	r3, #5
   16f6e:	e034      	b.n	16fda <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   16f70:	68fb      	ldr	r3, [r7, #12]
   16f72:	681b      	ldr	r3, [r3, #0]
   16f74:	2217      	movs	r2, #23
   16f76:	18bc      	adds	r4, r7, r2
   16f78:	0018      	movs	r0, r3
   16f7a:	4b1a      	ldr	r3, [pc, #104]	; (16fe4 <i2c_master_init+0x10c>)
   16f7c:	4798      	blx	r3
   16f7e:	0003      	movs	r3, r0
   16f80:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   16f82:	4a1e      	ldr	r2, [pc, #120]	; (16ffc <i2c_master_init+0x124>)
   16f84:	2317      	movs	r3, #23
   16f86:	18fb      	adds	r3, r7, r3
   16f88:	781b      	ldrb	r3, [r3, #0]
   16f8a:	0011      	movs	r1, r2
   16f8c:	0018      	movs	r0, r3
   16f8e:	4b1c      	ldr	r3, [pc, #112]	; (17000 <i2c_master_init+0x128>)
   16f90:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   16f92:	2317      	movs	r3, #23
   16f94:	18fb      	adds	r3, r7, r3
   16f96:	781a      	ldrb	r2, [r3, #0]
   16f98:	4b1a      	ldr	r3, [pc, #104]	; (17004 <i2c_master_init+0x12c>)
   16f9a:	0092      	lsls	r2, r2, #2
   16f9c:	68f9      	ldr	r1, [r7, #12]
   16f9e:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   16fa0:	68fb      	ldr	r3, [r7, #12]
   16fa2:	2200      	movs	r2, #0
   16fa4:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   16fa6:	68fb      	ldr	r3, [r7, #12]
   16fa8:	2200      	movs	r2, #0
   16faa:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   16fac:	68fb      	ldr	r3, [r7, #12]
   16fae:	2200      	movs	r2, #0
   16fb0:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   16fb2:	68fb      	ldr	r3, [r7, #12]
   16fb4:	2200      	movs	r2, #0
   16fb6:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   16fb8:	68fb      	ldr	r3, [r7, #12]
   16fba:	2225      	movs	r2, #37	; 0x25
   16fbc:	2100      	movs	r1, #0
   16fbe:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   16fc0:	68fb      	ldr	r3, [r7, #12]
   16fc2:	2200      	movs	r2, #0
   16fc4:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   16fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16fc8:	2214      	movs	r2, #20
   16fca:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   16fcc:	687a      	ldr	r2, [r7, #4]
   16fce:	68fb      	ldr	r3, [r7, #12]
   16fd0:	0011      	movs	r1, r2
   16fd2:	0018      	movs	r0, r3
   16fd4:	4b0c      	ldr	r3, [pc, #48]	; (17008 <i2c_master_init+0x130>)
   16fd6:	4798      	blx	r3
   16fd8:	0003      	movs	r3, r0
}
   16fda:	0018      	movs	r0, r3
   16fdc:	46bd      	mov	sp, r7
   16fde:	b00b      	add	sp, #44	; 0x2c
   16fe0:	bd90      	pop	{r4, r7, pc}
   16fe2:	46c0      	nop			; (mov r8, r8)
   16fe4:	000269e9 	.word	0x000269e9
   16fe8:	0001692d 	.word	0x0001692d
   16fec:	00016915 	.word	0x00016915
   16ff0:	00029279 	.word	0x00029279
   16ff4:	000292bd 	.word	0x000292bd
   16ff8:	000267a1 	.word	0x000267a1
   16ffc:	00013415 	.word	0x00013415
   17000:	00026a4d 	.word	0x00026a4d
   17004:	200059b8 	.word	0x200059b8
   17008:	00016ac9 	.word	0x00016ac9

0001700c <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   1700c:	b580      	push	{r7, lr}
   1700e:	b084      	sub	sp, #16
   17010:	af00      	add	r7, sp, #0
   17012:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17014:	687b      	ldr	r3, [r7, #4]
   17016:	681b      	ldr	r3, [r3, #0]
   17018:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   1701a:	687b      	ldr	r3, [r7, #4]
   1701c:	0018      	movs	r0, r3
   1701e:	4b0f      	ldr	r3, [pc, #60]	; (1705c <i2c_master_reset+0x50>)
   17020:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   17022:	687b      	ldr	r3, [r7, #4]
   17024:	0018      	movs	r0, r3
   17026:	4b0e      	ldr	r3, [pc, #56]	; (17060 <i2c_master_reset+0x54>)
   17028:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   1702a:	4b0e      	ldr	r3, [pc, #56]	; (17064 <i2c_master_reset+0x58>)
   1702c:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   1702e:	687b      	ldr	r3, [r7, #4]
   17030:	681b      	ldr	r3, [r3, #0]
   17032:	0018      	movs	r0, r3
   17034:	4b0c      	ldr	r3, [pc, #48]	; (17068 <i2c_master_reset+0x5c>)
   17036:	4798      	blx	r3
   17038:	0003      	movs	r3, r0
   1703a:	0018      	movs	r0, r3
   1703c:	4b0b      	ldr	r3, [pc, #44]	; (1706c <i2c_master_reset+0x60>)
   1703e:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   17040:	4b0b      	ldr	r3, [pc, #44]	; (17070 <i2c_master_reset+0x64>)
   17042:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   17044:	687b      	ldr	r3, [r7, #4]
   17046:	0018      	movs	r0, r3
   17048:	4b04      	ldr	r3, [pc, #16]	; (1705c <i2c_master_reset+0x50>)
   1704a:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   1704c:	68fb      	ldr	r3, [r7, #12]
   1704e:	2201      	movs	r2, #1
   17050:	601a      	str	r2, [r3, #0]
}
   17052:	46c0      	nop			; (mov r8, r8)
   17054:	46bd      	mov	sp, r7
   17056:	b004      	add	sp, #16
   17058:	bd80      	pop	{r7, pc}
   1705a:	46c0      	nop			; (mov r8, r8)
   1705c:	00016a4d 	.word	0x00016a4d
   17060:	00016a71 	.word	0x00016a71
   17064:	000169d1 	.word	0x000169d1
   17068:	00026ab9 	.word	0x00026ab9
   1706c:	000293f5 	.word	0x000293f5
   17070:	000169e5 	.word	0x000169e5

00017074 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   17074:	b580      	push	{r7, lr}
   17076:	b084      	sub	sp, #16
   17078:	af00      	add	r7, sp, #0
   1707a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1707c:	687b      	ldr	r3, [r7, #4]
   1707e:	681b      	ldr	r3, [r3, #0]
   17080:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   17082:	68fb      	ldr	r3, [r7, #12]
   17084:	7e1b      	ldrb	r3, [r3, #24]
   17086:	b2db      	uxtb	r3, r3
   17088:	001a      	movs	r2, r3
   1708a:	2302      	movs	r3, #2
   1708c:	4013      	ands	r3, r2
   1708e:	d00b      	beq.n	170a8 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   17090:	68fb      	ldr	r3, [r7, #12]
   17092:	2202      	movs	r2, #2
   17094:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   17096:	68fb      	ldr	r3, [r7, #12]
   17098:	8b5b      	ldrh	r3, [r3, #26]
   1709a:	b29b      	uxth	r3, r3
   1709c:	001a      	movs	r2, r3
   1709e:	2302      	movs	r3, #2
   170a0:	4013      	ands	r3, r2
   170a2:	d011      	beq.n	170c8 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   170a4:	2341      	movs	r3, #65	; 0x41
   170a6:	e010      	b.n	170ca <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   170a8:	68fb      	ldr	r3, [r7, #12]
   170aa:	8b5b      	ldrh	r3, [r3, #26]
   170ac:	b29b      	uxth	r3, r3
   170ae:	001a      	movs	r2, r3
   170b0:	2304      	movs	r3, #4
   170b2:	4013      	ands	r3, r2
   170b4:	d008      	beq.n	170c8 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   170b6:	68fb      	ldr	r3, [r7, #12]
   170b8:	685b      	ldr	r3, [r3, #4]
   170ba:	22c0      	movs	r2, #192	; 0xc0
   170bc:	0292      	lsls	r2, r2, #10
   170be:	431a      	orrs	r2, r3
   170c0:	68fb      	ldr	r3, [r7, #12]
   170c2:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   170c4:	2318      	movs	r3, #24
   170c6:	e000      	b.n	170ca <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   170c8:	2300      	movs	r3, #0
}
   170ca:	0018      	movs	r0, r3
   170cc:	46bd      	mov	sp, r7
   170ce:	b004      	add	sp, #16
   170d0:	bd80      	pop	{r7, pc}

000170d2 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   170d2:	b580      	push	{r7, lr}
   170d4:	b084      	sub	sp, #16
   170d6:	af00      	add	r7, sp, #0
   170d8:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   170da:	687b      	ldr	r3, [r7, #4]
   170dc:	681b      	ldr	r3, [r3, #0]
   170de:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   170e0:	230e      	movs	r3, #14
   170e2:	18fb      	adds	r3, r7, r3
   170e4:	2200      	movs	r2, #0
   170e6:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   170e8:	e00f      	b.n	1710a <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   170ea:	230e      	movs	r3, #14
   170ec:	18fb      	adds	r3, r7, r3
   170ee:	220e      	movs	r2, #14
   170f0:	18ba      	adds	r2, r7, r2
   170f2:	8812      	ldrh	r2, [r2, #0]
   170f4:	3201      	adds	r2, #1
   170f6:	801a      	strh	r2, [r3, #0]
   170f8:	687b      	ldr	r3, [r7, #4]
   170fa:	891b      	ldrh	r3, [r3, #8]
   170fc:	220e      	movs	r2, #14
   170fe:	18ba      	adds	r2, r7, r2
   17100:	8812      	ldrh	r2, [r2, #0]
   17102:	429a      	cmp	r2, r3
   17104:	d301      	bcc.n	1710a <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   17106:	2312      	movs	r3, #18
   17108:	e00e      	b.n	17128 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1710a:	68bb      	ldr	r3, [r7, #8]
   1710c:	7e1b      	ldrb	r3, [r3, #24]
   1710e:	b2db      	uxtb	r3, r3
   17110:	001a      	movs	r2, r3
   17112:	2301      	movs	r3, #1
   17114:	4013      	ands	r3, r2
   17116:	d106      	bne.n	17126 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   17118:	68bb      	ldr	r3, [r7, #8]
   1711a:	7e1b      	ldrb	r3, [r3, #24]
   1711c:	b2db      	uxtb	r3, r3
   1711e:	001a      	movs	r2, r3
   17120:	2302      	movs	r3, #2
   17122:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   17124:	d0e1      	beq.n	170ea <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   17126:	2300      	movs	r3, #0
}
   17128:	0018      	movs	r0, r3
   1712a:	46bd      	mov	sp, r7
   1712c:	b004      	add	sp, #16
   1712e:	bd80      	pop	{r7, pc}

00017130 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   17130:	b590      	push	{r4, r7, lr}
   17132:	b085      	sub	sp, #20
   17134:	af00      	add	r7, sp, #0
   17136:	6078      	str	r0, [r7, #4]
   17138:	000a      	movs	r2, r1
   1713a:	1cfb      	adds	r3, r7, #3
   1713c:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1713e:	687b      	ldr	r3, [r7, #4]
   17140:	681b      	ldr	r3, [r3, #0]
   17142:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   17144:	68fb      	ldr	r3, [r7, #12]
   17146:	685b      	ldr	r3, [r3, #4]
   17148:	2280      	movs	r2, #128	; 0x80
   1714a:	02d2      	lsls	r2, r2, #11
   1714c:	431a      	orrs	r2, r3
   1714e:	68fb      	ldr	r3, [r7, #12]
   17150:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   17152:	1cfb      	adds	r3, r7, #3
   17154:	781a      	ldrb	r2, [r3, #0]
   17156:	68fb      	ldr	r3, [r7, #12]
   17158:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   1715a:	230b      	movs	r3, #11
   1715c:	18fc      	adds	r4, r7, r3
   1715e:	687b      	ldr	r3, [r7, #4]
   17160:	0018      	movs	r0, r3
   17162:	4b07      	ldr	r3, [pc, #28]	; (17180 <_i2c_master_send_hs_master_code+0x50>)
   17164:	4798      	blx	r3
   17166:	0003      	movs	r3, r0
   17168:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   1716a:	68fb      	ldr	r3, [r7, #12]
   1716c:	2201      	movs	r2, #1
   1716e:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   17170:	230b      	movs	r3, #11
   17172:	18fb      	adds	r3, r7, r3
   17174:	781b      	ldrb	r3, [r3, #0]
}
   17176:	0018      	movs	r0, r3
   17178:	46bd      	mov	sp, r7
   1717a:	b005      	add	sp, #20
   1717c:	bd90      	pop	{r4, r7, pc}
   1717e:	46c0      	nop			; (mov r8, r8)
   17180:	000170d3 	.word	0x000170d3

00017184 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   17184:	b580      	push	{r7, lr}
   17186:	af00      	add	r7, sp, #0
   17188:	2000      	movs	r0, #0
   1718a:	4b02      	ldr	r3, [pc, #8]	; (17194 <TC3_Handler+0x10>)
   1718c:	4798      	blx	r3
   1718e:	46c0      	nop			; (mov r8, r8)
   17190:	46bd      	mov	sp, r7
   17192:	bd80      	pop	{r7, pc}
   17194:	000171c1 	.word	0x000171c1

00017198 <TC4_Handler>:
   17198:	b580      	push	{r7, lr}
   1719a:	af00      	add	r7, sp, #0
   1719c:	2001      	movs	r0, #1
   1719e:	4b02      	ldr	r3, [pc, #8]	; (171a8 <TC4_Handler+0x10>)
   171a0:	4798      	blx	r3
   171a2:	46c0      	nop			; (mov r8, r8)
   171a4:	46bd      	mov	sp, r7
   171a6:	bd80      	pop	{r7, pc}
   171a8:	000171c1 	.word	0x000171c1

000171ac <TC5_Handler>:
   171ac:	b580      	push	{r7, lr}
   171ae:	af00      	add	r7, sp, #0
   171b0:	2002      	movs	r0, #2
   171b2:	4b02      	ldr	r3, [pc, #8]	; (171bc <TC5_Handler+0x10>)
   171b4:	4798      	blx	r3
   171b6:	46c0      	nop			; (mov r8, r8)
   171b8:	46bd      	mov	sp, r7
   171ba:	bd80      	pop	{r7, pc}
   171bc:	000171c1 	.word	0x000171c1

000171c0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   171c0:	b580      	push	{r7, lr}
   171c2:	b084      	sub	sp, #16
   171c4:	af00      	add	r7, sp, #0
   171c6:	0002      	movs	r2, r0
   171c8:	1dfb      	adds	r3, r7, #7
   171ca:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   171cc:	1dfb      	adds	r3, r7, #7
   171ce:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   171d0:	4b28      	ldr	r3, [pc, #160]	; (17274 <_tc_interrupt_handler+0xb4>)
   171d2:	0092      	lsls	r2, r2, #2
   171d4:	58d3      	ldr	r3, [r2, r3]
   171d6:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   171d8:	68fb      	ldr	r3, [r7, #12]
   171da:	681b      	ldr	r3, [r3, #0]
   171dc:	7b9b      	ldrb	r3, [r3, #14]
   171de:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   171e0:	68fa      	ldr	r2, [r7, #12]
   171e2:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   171e4:	4013      	ands	r3, r2
   171e6:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   171e8:	68fb      	ldr	r3, [r7, #12]
   171ea:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   171ec:	230b      	movs	r3, #11
   171ee:	18fb      	adds	r3, r7, r3
   171f0:	400a      	ands	r2, r1
   171f2:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   171f4:	230b      	movs	r3, #11
   171f6:	18fb      	adds	r3, r7, r3
   171f8:	781b      	ldrb	r3, [r3, #0]
   171fa:	2201      	movs	r2, #1
   171fc:	4013      	ands	r3, r2
   171fe:	d008      	beq.n	17212 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   17200:	68fb      	ldr	r3, [r7, #12]
   17202:	689b      	ldr	r3, [r3, #8]
   17204:	68fa      	ldr	r2, [r7, #12]
   17206:	0010      	movs	r0, r2
   17208:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   1720a:	68fb      	ldr	r3, [r7, #12]
   1720c:	681b      	ldr	r3, [r3, #0]
   1720e:	2201      	movs	r2, #1
   17210:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   17212:	230b      	movs	r3, #11
   17214:	18fb      	adds	r3, r7, r3
   17216:	781b      	ldrb	r3, [r3, #0]
   17218:	2202      	movs	r2, #2
   1721a:	4013      	ands	r3, r2
   1721c:	d008      	beq.n	17230 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   1721e:	68fb      	ldr	r3, [r7, #12]
   17220:	68db      	ldr	r3, [r3, #12]
   17222:	68fa      	ldr	r2, [r7, #12]
   17224:	0010      	movs	r0, r2
   17226:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   17228:	68fb      	ldr	r3, [r7, #12]
   1722a:	681b      	ldr	r3, [r3, #0]
   1722c:	2202      	movs	r2, #2
   1722e:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   17230:	230b      	movs	r3, #11
   17232:	18fb      	adds	r3, r7, r3
   17234:	781b      	ldrb	r3, [r3, #0]
   17236:	2210      	movs	r2, #16
   17238:	4013      	ands	r3, r2
   1723a:	d008      	beq.n	1724e <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   1723c:	68fb      	ldr	r3, [r7, #12]
   1723e:	691b      	ldr	r3, [r3, #16]
   17240:	68fa      	ldr	r2, [r7, #12]
   17242:	0010      	movs	r0, r2
   17244:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   17246:	68fb      	ldr	r3, [r7, #12]
   17248:	681b      	ldr	r3, [r3, #0]
   1724a:	2210      	movs	r2, #16
   1724c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   1724e:	230b      	movs	r3, #11
   17250:	18fb      	adds	r3, r7, r3
   17252:	781b      	ldrb	r3, [r3, #0]
   17254:	2220      	movs	r2, #32
   17256:	4013      	ands	r3, r2
   17258:	d008      	beq.n	1726c <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   1725a:	68fb      	ldr	r3, [r7, #12]
   1725c:	695b      	ldr	r3, [r3, #20]
   1725e:	68fa      	ldr	r2, [r7, #12]
   17260:	0010      	movs	r0, r2
   17262:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   17264:	68fb      	ldr	r3, [r7, #12]
   17266:	681b      	ldr	r3, [r3, #0]
   17268:	2220      	movs	r2, #32
   1726a:	739a      	strb	r2, [r3, #14]
	}
}
   1726c:	46c0      	nop			; (mov r8, r8)
   1726e:	46bd      	mov	sp, r7
   17270:	b004      	add	sp, #16
   17272:	bd80      	pop	{r7, pc}
   17274:	200047a0 	.word	0x200047a0

00017278 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   17278:	b580      	push	{r7, lr}
   1727a:	b084      	sub	sp, #16
   1727c:	af00      	add	r7, sp, #0
   1727e:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   17280:	2300      	movs	r3, #0
   17282:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   17284:	687b      	ldr	r3, [r7, #4]
   17286:	2b00      	cmp	r3, #0
   17288:	d101      	bne.n	1728e <FreeRTOS_CLIRegisterCommand+0x16>
   1728a:	b672      	cpsid	i
   1728c:	e7fe      	b.n	1728c <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   1728e:	2008      	movs	r0, #8
   17290:	4b11      	ldr	r3, [pc, #68]	; (172d8 <FreeRTOS_CLIRegisterCommand+0x60>)
   17292:	4798      	blx	r3
   17294:	0003      	movs	r3, r0
   17296:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   17298:	68bb      	ldr	r3, [r7, #8]
   1729a:	2b00      	cmp	r3, #0
   1729c:	d101      	bne.n	172a2 <FreeRTOS_CLIRegisterCommand+0x2a>
   1729e:	b672      	cpsid	i
   172a0:	e7fe      	b.n	172a0 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   172a2:	68bb      	ldr	r3, [r7, #8]
   172a4:	2b00      	cmp	r3, #0
   172a6:	d012      	beq.n	172ce <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   172a8:	4b0c      	ldr	r3, [pc, #48]	; (172dc <FreeRTOS_CLIRegisterCommand+0x64>)
   172aa:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   172ac:	68bb      	ldr	r3, [r7, #8]
   172ae:	687a      	ldr	r2, [r7, #4]
   172b0:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   172b2:	68bb      	ldr	r3, [r7, #8]
   172b4:	2200      	movs	r2, #0
   172b6:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   172b8:	4b09      	ldr	r3, [pc, #36]	; (172e0 <FreeRTOS_CLIRegisterCommand+0x68>)
   172ba:	681b      	ldr	r3, [r3, #0]
   172bc:	68ba      	ldr	r2, [r7, #8]
   172be:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   172c0:	4b07      	ldr	r3, [pc, #28]	; (172e0 <FreeRTOS_CLIRegisterCommand+0x68>)
   172c2:	68ba      	ldr	r2, [r7, #8]
   172c4:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   172c6:	4b07      	ldr	r3, [pc, #28]	; (172e4 <FreeRTOS_CLIRegisterCommand+0x6c>)
   172c8:	4798      	blx	r3

		xReturn = pdPASS;
   172ca:	2301      	movs	r3, #1
   172cc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   172ce:	68fb      	ldr	r3, [r7, #12]
}
   172d0:	0018      	movs	r0, r3
   172d2:	46bd      	mov	sp, r7
   172d4:	b004      	add	sp, #16
   172d6:	bd80      	pop	{r7, pc}
   172d8:	00019691 	.word	0x00019691
   172dc:	00019559 	.word	0x00019559
   172e0:	200000e8 	.word	0x200000e8
   172e4:	0001957d 	.word	0x0001957d

000172e8 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   172e8:	b580      	push	{r7, lr}
   172ea:	b088      	sub	sp, #32
   172ec:	af00      	add	r7, sp, #0
   172ee:	60f8      	str	r0, [r7, #12]
   172f0:	60b9      	str	r1, [r7, #8]
   172f2:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   172f4:	2301      	movs	r3, #1
   172f6:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   172f8:	4b3d      	ldr	r3, [pc, #244]	; (173f0 <FreeRTOS_CLIProcessCommand+0x108>)
   172fa:	681b      	ldr	r3, [r3, #0]
   172fc:	2b00      	cmp	r3, #0
   172fe:	d144      	bne.n	1738a <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   17300:	4b3b      	ldr	r3, [pc, #236]	; (173f0 <FreeRTOS_CLIProcessCommand+0x108>)
   17302:	4a3c      	ldr	r2, [pc, #240]	; (173f4 <FreeRTOS_CLIProcessCommand+0x10c>)
   17304:	601a      	str	r2, [r3, #0]
   17306:	e03a      	b.n	1737e <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   17308:	4b39      	ldr	r3, [pc, #228]	; (173f0 <FreeRTOS_CLIProcessCommand+0x108>)
   1730a:	681b      	ldr	r3, [r3, #0]
   1730c:	681b      	ldr	r3, [r3, #0]
   1730e:	681b      	ldr	r3, [r3, #0]
   17310:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   17312:	69bb      	ldr	r3, [r7, #24]
   17314:	0018      	movs	r0, r3
   17316:	4b38      	ldr	r3, [pc, #224]	; (173f8 <FreeRTOS_CLIProcessCommand+0x110>)
   17318:	4798      	blx	r3
   1731a:	0003      	movs	r3, r0
   1731c:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   1731e:	68fa      	ldr	r2, [r7, #12]
   17320:	697b      	ldr	r3, [r7, #20]
   17322:	18d3      	adds	r3, r2, r3
   17324:	781b      	ldrb	r3, [r3, #0]
   17326:	2b20      	cmp	r3, #32
   17328:	d005      	beq.n	17336 <FreeRTOS_CLIProcessCommand+0x4e>
   1732a:	68fa      	ldr	r2, [r7, #12]
   1732c:	697b      	ldr	r3, [r7, #20]
   1732e:	18d3      	adds	r3, r2, r3
   17330:	781b      	ldrb	r3, [r3, #0]
   17332:	2b00      	cmp	r3, #0
   17334:	d11e      	bne.n	17374 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   17336:	697a      	ldr	r2, [r7, #20]
   17338:	69b9      	ldr	r1, [r7, #24]
   1733a:	68fb      	ldr	r3, [r7, #12]
   1733c:	0018      	movs	r0, r3
   1733e:	4b2f      	ldr	r3, [pc, #188]	; (173fc <FreeRTOS_CLIProcessCommand+0x114>)
   17340:	4798      	blx	r3
   17342:	1e03      	subs	r3, r0, #0
   17344:	d116      	bne.n	17374 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   17346:	4b2a      	ldr	r3, [pc, #168]	; (173f0 <FreeRTOS_CLIProcessCommand+0x108>)
   17348:	681b      	ldr	r3, [r3, #0]
   1734a:	681b      	ldr	r3, [r3, #0]
   1734c:	7b1b      	ldrb	r3, [r3, #12]
   1734e:	b25b      	sxtb	r3, r3
   17350:	2b00      	cmp	r3, #0
   17352:	db19      	blt.n	17388 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   17354:	68fb      	ldr	r3, [r7, #12]
   17356:	0018      	movs	r0, r3
   17358:	4b29      	ldr	r3, [pc, #164]	; (17400 <FreeRTOS_CLIProcessCommand+0x118>)
   1735a:	4798      	blx	r3
   1735c:	0003      	movs	r3, r0
   1735e:	001a      	movs	r2, r3
   17360:	4b23      	ldr	r3, [pc, #140]	; (173f0 <FreeRTOS_CLIProcessCommand+0x108>)
   17362:	681b      	ldr	r3, [r3, #0]
   17364:	681b      	ldr	r3, [r3, #0]
   17366:	7b1b      	ldrb	r3, [r3, #12]
   17368:	b25b      	sxtb	r3, r3
   1736a:	429a      	cmp	r2, r3
   1736c:	d00c      	beq.n	17388 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   1736e:	2300      	movs	r3, #0
   17370:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   17372:	e009      	b.n	17388 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   17374:	4b1e      	ldr	r3, [pc, #120]	; (173f0 <FreeRTOS_CLIProcessCommand+0x108>)
   17376:	681b      	ldr	r3, [r3, #0]
   17378:	685a      	ldr	r2, [r3, #4]
   1737a:	4b1d      	ldr	r3, [pc, #116]	; (173f0 <FreeRTOS_CLIProcessCommand+0x108>)
   1737c:	601a      	str	r2, [r3, #0]
   1737e:	4b1c      	ldr	r3, [pc, #112]	; (173f0 <FreeRTOS_CLIProcessCommand+0x108>)
   17380:	681b      	ldr	r3, [r3, #0]
   17382:	2b00      	cmp	r3, #0
   17384:	d1c0      	bne.n	17308 <FreeRTOS_CLIProcessCommand+0x20>
   17386:	e000      	b.n	1738a <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   17388:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   1738a:	4b19      	ldr	r3, [pc, #100]	; (173f0 <FreeRTOS_CLIProcessCommand+0x108>)
   1738c:	681b      	ldr	r3, [r3, #0]
   1738e:	2b00      	cmp	r3, #0
   17390:	d00c      	beq.n	173ac <FreeRTOS_CLIProcessCommand+0xc4>
   17392:	69fb      	ldr	r3, [r7, #28]
   17394:	2b00      	cmp	r3, #0
   17396:	d109      	bne.n	173ac <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   17398:	687a      	ldr	r2, [r7, #4]
   1739a:	491a      	ldr	r1, [pc, #104]	; (17404 <FreeRTOS_CLIProcessCommand+0x11c>)
   1739c:	68bb      	ldr	r3, [r7, #8]
   1739e:	0018      	movs	r0, r3
   173a0:	4b19      	ldr	r3, [pc, #100]	; (17408 <FreeRTOS_CLIProcessCommand+0x120>)
   173a2:	4798      	blx	r3
		pxCommand = NULL;
   173a4:	4b12      	ldr	r3, [pc, #72]	; (173f0 <FreeRTOS_CLIProcessCommand+0x108>)
   173a6:	2200      	movs	r2, #0
   173a8:	601a      	str	r2, [r3, #0]
   173aa:	e01c      	b.n	173e6 <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   173ac:	4b10      	ldr	r3, [pc, #64]	; (173f0 <FreeRTOS_CLIProcessCommand+0x108>)
   173ae:	681b      	ldr	r3, [r3, #0]
   173b0:	2b00      	cmp	r3, #0
   173b2:	d010      	beq.n	173d6 <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   173b4:	4b0e      	ldr	r3, [pc, #56]	; (173f0 <FreeRTOS_CLIProcessCommand+0x108>)
   173b6:	681b      	ldr	r3, [r3, #0]
   173b8:	681b      	ldr	r3, [r3, #0]
   173ba:	689b      	ldr	r3, [r3, #8]
   173bc:	68fa      	ldr	r2, [r7, #12]
   173be:	6879      	ldr	r1, [r7, #4]
   173c0:	68b8      	ldr	r0, [r7, #8]
   173c2:	4798      	blx	r3
   173c4:	0003      	movs	r3, r0
   173c6:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   173c8:	69fb      	ldr	r3, [r7, #28]
   173ca:	2b00      	cmp	r3, #0
   173cc:	d10b      	bne.n	173e6 <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   173ce:	4b08      	ldr	r3, [pc, #32]	; (173f0 <FreeRTOS_CLIProcessCommand+0x108>)
   173d0:	2200      	movs	r2, #0
   173d2:	601a      	str	r2, [r3, #0]
   173d4:	e007      	b.n	173e6 <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   173d6:	687a      	ldr	r2, [r7, #4]
   173d8:	490c      	ldr	r1, [pc, #48]	; (1740c <FreeRTOS_CLIProcessCommand+0x124>)
   173da:	68bb      	ldr	r3, [r7, #8]
   173dc:	0018      	movs	r0, r3
   173de:	4b0a      	ldr	r3, [pc, #40]	; (17408 <FreeRTOS_CLIProcessCommand+0x120>)
   173e0:	4798      	blx	r3
		xReturn = pdFALSE;
   173e2:	2300      	movs	r3, #0
   173e4:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   173e6:	69fb      	ldr	r3, [r7, #28]
}
   173e8:	0018      	movs	r0, r3
   173ea:	46bd      	mov	sp, r7
   173ec:	b008      	add	sp, #32
   173ee:	bd80      	pop	{r7, pc}
   173f0:	20000b38 	.word	0x20000b38
   173f4:	200000e0 	.word	0x200000e0
   173f8:	000346d3 	.word	0x000346d3
   173fc:	000346e1 	.word	0x000346e1
   17400:	00017471 	.word	0x00017471
   17404:	0003644c 	.word	0x0003644c
   17408:	00034703 	.word	0x00034703
   1740c:	000364a4 	.word	0x000364a4

00017410 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   17410:	b580      	push	{r7, lr}
   17412:	b086      	sub	sp, #24
   17414:	af00      	add	r7, sp, #0
   17416:	60f8      	str	r0, [r7, #12]
   17418:	60b9      	str	r1, [r7, #8]
   1741a:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   1741c:	4b11      	ldr	r3, [pc, #68]	; (17464 <prvHelpCommand+0x54>)
   1741e:	681b      	ldr	r3, [r3, #0]
   17420:	2b00      	cmp	r3, #0
   17422:	d102      	bne.n	1742a <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   17424:	4b0f      	ldr	r3, [pc, #60]	; (17464 <prvHelpCommand+0x54>)
   17426:	4a10      	ldr	r2, [pc, #64]	; (17468 <prvHelpCommand+0x58>)
   17428:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   1742a:	4b0e      	ldr	r3, [pc, #56]	; (17464 <prvHelpCommand+0x54>)
   1742c:	681b      	ldr	r3, [r3, #0]
   1742e:	681b      	ldr	r3, [r3, #0]
   17430:	6859      	ldr	r1, [r3, #4]
   17432:	68ba      	ldr	r2, [r7, #8]
   17434:	68fb      	ldr	r3, [r7, #12]
   17436:	0018      	movs	r0, r3
   17438:	4b0c      	ldr	r3, [pc, #48]	; (1746c <prvHelpCommand+0x5c>)
   1743a:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   1743c:	4b09      	ldr	r3, [pc, #36]	; (17464 <prvHelpCommand+0x54>)
   1743e:	681b      	ldr	r3, [r3, #0]
   17440:	685a      	ldr	r2, [r3, #4]
   17442:	4b08      	ldr	r3, [pc, #32]	; (17464 <prvHelpCommand+0x54>)
   17444:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   17446:	4b07      	ldr	r3, [pc, #28]	; (17464 <prvHelpCommand+0x54>)
   17448:	681b      	ldr	r3, [r3, #0]
   1744a:	2b00      	cmp	r3, #0
   1744c:	d102      	bne.n	17454 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   1744e:	2300      	movs	r3, #0
   17450:	617b      	str	r3, [r7, #20]
   17452:	e001      	b.n	17458 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   17454:	2301      	movs	r3, #1
   17456:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   17458:	697b      	ldr	r3, [r7, #20]
}
   1745a:	0018      	movs	r0, r3
   1745c:	46bd      	mov	sp, r7
   1745e:	b006      	add	sp, #24
   17460:	bd80      	pop	{r7, pc}
   17462:	46c0      	nop			; (mov r8, r8)
   17464:	20000b3c 	.word	0x20000b3c
   17468:	200000e0 	.word	0x200000e0
   1746c:	00034703 	.word	0x00034703

00017470 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   17470:	b580      	push	{r7, lr}
   17472:	b084      	sub	sp, #16
   17474:	af00      	add	r7, sp, #0
   17476:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   17478:	230f      	movs	r3, #15
   1747a:	18fb      	adds	r3, r7, r3
   1747c:	2200      	movs	r2, #0
   1747e:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   17480:	2300      	movs	r3, #0
   17482:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   17484:	e018      	b.n	174b8 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   17486:	687b      	ldr	r3, [r7, #4]
   17488:	781b      	ldrb	r3, [r3, #0]
   1748a:	2b20      	cmp	r3, #32
   1748c:	d10f      	bne.n	174ae <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   1748e:	68bb      	ldr	r3, [r7, #8]
   17490:	2b01      	cmp	r3, #1
   17492:	d00e      	beq.n	174b2 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   17494:	230f      	movs	r3, #15
   17496:	18fb      	adds	r3, r7, r3
   17498:	781b      	ldrb	r3, [r3, #0]
   1749a:	b25b      	sxtb	r3, r3
   1749c:	b2db      	uxtb	r3, r3
   1749e:	3301      	adds	r3, #1
   174a0:	b2da      	uxtb	r2, r3
   174a2:	230f      	movs	r3, #15
   174a4:	18fb      	adds	r3, r7, r3
   174a6:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   174a8:	2301      	movs	r3, #1
   174aa:	60bb      	str	r3, [r7, #8]
   174ac:	e001      	b.n	174b2 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   174ae:	2300      	movs	r3, #0
   174b0:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   174b2:	687b      	ldr	r3, [r7, #4]
   174b4:	3301      	adds	r3, #1
   174b6:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   174b8:	687b      	ldr	r3, [r7, #4]
   174ba:	781b      	ldrb	r3, [r3, #0]
   174bc:	2b00      	cmp	r3, #0
   174be:	d1e2      	bne.n	17486 <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   174c0:	68bb      	ldr	r3, [r7, #8]
   174c2:	2b01      	cmp	r3, #1
   174c4:	d109      	bne.n	174da <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   174c6:	230f      	movs	r3, #15
   174c8:	18fb      	adds	r3, r7, r3
   174ca:	781b      	ldrb	r3, [r3, #0]
   174cc:	b25b      	sxtb	r3, r3
   174ce:	b2db      	uxtb	r3, r3
   174d0:	3b01      	subs	r3, #1
   174d2:	b2da      	uxtb	r2, r3
   174d4:	230f      	movs	r3, #15
   174d6:	18fb      	adds	r3, r7, r3
   174d8:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   174da:	230f      	movs	r3, #15
   174dc:	18fb      	adds	r3, r7, r3
   174de:	781b      	ldrb	r3, [r3, #0]
   174e0:	b25b      	sxtb	r3, r3
}
   174e2:	0018      	movs	r0, r3
   174e4:	46bd      	mov	sp, r7
   174e6:	b004      	add	sp, #16
   174e8:	bd80      	pop	{r7, pc}
	...

000174ec <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   174ec:	b580      	push	{r7, lr}
   174ee:	b082      	sub	sp, #8
   174f0:	af00      	add	r7, sp, #0
   174f2:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   174f4:	687b      	ldr	r3, [r7, #4]
   174f6:	0018      	movs	r0, r3
   174f8:	4b03      	ldr	r3, [pc, #12]	; (17508 <prvTraceGetQueueNumber+0x1c>)
   174fa:	4798      	blx	r3
   174fc:	0003      	movs	r3, r0
}
   174fe:	0018      	movs	r0, r3
   17500:	46bd      	mov	sp, r7
   17502:	b002      	add	sp, #8
   17504:	bd80      	pop	{r7, pc}
   17506:	46c0      	nop			; (mov r8, r8)
   17508:	0001acb5 	.word	0x0001acb5

0001750c <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   1750c:	b580      	push	{r7, lr}
   1750e:	b082      	sub	sp, #8
   17510:	af00      	add	r7, sp, #0
   17512:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   17514:	687b      	ldr	r3, [r7, #4]
   17516:	0018      	movs	r0, r3
   17518:	4b03      	ldr	r3, [pc, #12]	; (17528 <prvTraceGetQueueType+0x1c>)
   1751a:	4798      	blx	r3
   1751c:	0003      	movs	r3, r0
}
   1751e:	0018      	movs	r0, r3
   17520:	46bd      	mov	sp, r7
   17522:	b002      	add	sp, #8
   17524:	bd80      	pop	{r7, pc}
   17526:	46c0      	nop			; (mov r8, r8)
   17528:	0001ace1 	.word	0x0001ace1

0001752c <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   1752c:	b580      	push	{r7, lr}
   1752e:	b082      	sub	sp, #8
   17530:	af00      	add	r7, sp, #0
   17532:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   17534:	687b      	ldr	r3, [r7, #4]
   17536:	0018      	movs	r0, r3
   17538:	4b03      	ldr	r3, [pc, #12]	; (17548 <prvTraceGetTaskNumberLow16+0x1c>)
   1753a:	4798      	blx	r3
   1753c:	0003      	movs	r3, r0
   1753e:	b29b      	uxth	r3, r3
}
   17540:	0018      	movs	r0, r3
   17542:	46bd      	mov	sp, r7
   17544:	b002      	add	sp, #8
   17546:	bd80      	pop	{r7, pc}
   17548:	0001c011 	.word	0x0001c011

0001754c <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   1754c:	b580      	push	{r7, lr}
   1754e:	b082      	sub	sp, #8
   17550:	af00      	add	r7, sp, #0
   17552:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   17554:	687b      	ldr	r3, [r7, #4]
   17556:	0018      	movs	r0, r3
   17558:	4b04      	ldr	r3, [pc, #16]	; (1756c <prvTraceGetTaskNumberHigh16+0x20>)
   1755a:	4798      	blx	r3
   1755c:	0003      	movs	r3, r0
   1755e:	0c1b      	lsrs	r3, r3, #16
   17560:	b29b      	uxth	r3, r3
}
   17562:	0018      	movs	r0, r3
   17564:	46bd      	mov	sp, r7
   17566:	b002      	add	sp, #8
   17568:	bd80      	pop	{r7, pc}
   1756a:	46c0      	nop			; (mov r8, r8)
   1756c:	0001c011 	.word	0x0001c011

00017570 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   17570:	b580      	push	{r7, lr}
   17572:	b082      	sub	sp, #8
   17574:	af00      	add	r7, sp, #0
   17576:	6078      	str	r0, [r7, #4]
   17578:	000a      	movs	r2, r1
   1757a:	1cbb      	adds	r3, r7, #2
   1757c:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   1757e:	687b      	ldr	r3, [r7, #4]
   17580:	0018      	movs	r0, r3
   17582:	4b08      	ldr	r3, [pc, #32]	; (175a4 <prvTraceSetTaskNumberLow16+0x34>)
   17584:	4798      	blx	r3
   17586:	0003      	movs	r3, r0
   17588:	0c1b      	lsrs	r3, r3, #16
   1758a:	041a      	lsls	r2, r3, #16
   1758c:	1cbb      	adds	r3, r7, #2
   1758e:	881b      	ldrh	r3, [r3, #0]
   17590:	431a      	orrs	r2, r3
   17592:	687b      	ldr	r3, [r7, #4]
   17594:	0011      	movs	r1, r2
   17596:	0018      	movs	r0, r3
   17598:	4b03      	ldr	r3, [pc, #12]	; (175a8 <prvTraceSetTaskNumberLow16+0x38>)
   1759a:	4798      	blx	r3
}
   1759c:	46c0      	nop			; (mov r8, r8)
   1759e:	46bd      	mov	sp, r7
   175a0:	b002      	add	sp, #8
   175a2:	bd80      	pop	{r7, pc}
   175a4:	0001c011 	.word	0x0001c011
   175a8:	0001c039 	.word	0x0001c039

000175ac <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   175ac:	b580      	push	{r7, lr}
   175ae:	b082      	sub	sp, #8
   175b0:	af00      	add	r7, sp, #0
   175b2:	6078      	str	r0, [r7, #4]
   175b4:	000a      	movs	r2, r1
   175b6:	1cbb      	adds	r3, r7, #2
   175b8:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   175ba:	687b      	ldr	r3, [r7, #4]
   175bc:	0018      	movs	r0, r3
   175be:	4b09      	ldr	r3, [pc, #36]	; (175e4 <prvTraceSetTaskNumberHigh16+0x38>)
   175c0:	4798      	blx	r3
   175c2:	0003      	movs	r3, r0
   175c4:	041b      	lsls	r3, r3, #16
   175c6:	0c1a      	lsrs	r2, r3, #16
   175c8:	1cbb      	adds	r3, r7, #2
   175ca:	881b      	ldrh	r3, [r3, #0]
   175cc:	041b      	lsls	r3, r3, #16
   175ce:	431a      	orrs	r2, r3
   175d0:	687b      	ldr	r3, [r7, #4]
   175d2:	0011      	movs	r1, r2
   175d4:	0018      	movs	r0, r3
   175d6:	4b04      	ldr	r3, [pc, #16]	; (175e8 <prvTraceSetTaskNumberHigh16+0x3c>)
   175d8:	4798      	blx	r3
}
   175da:	46c0      	nop			; (mov r8, r8)
   175dc:	46bd      	mov	sp, r7
   175de:	b002      	add	sp, #8
   175e0:	bd80      	pop	{r7, pc}
   175e2:	46c0      	nop			; (mov r8, r8)
   175e4:	0001c011 	.word	0x0001c011
   175e8:	0001c039 	.word	0x0001c039

000175ec <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   175ec:	b580      	push	{r7, lr}
   175ee:	b082      	sub	sp, #8
   175f0:	af00      	add	r7, sp, #0
   175f2:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   175f4:	687b      	ldr	r3, [r7, #4]
   175f6:	0018      	movs	r0, r3
   175f8:	4b03      	ldr	r3, [pc, #12]	; (17608 <prvTraceGetQueueNumberLow16+0x1c>)
   175fa:	4798      	blx	r3
   175fc:	0003      	movs	r3, r0
   175fe:	b29b      	uxth	r3, r3
}
   17600:	0018      	movs	r0, r3
   17602:	46bd      	mov	sp, r7
   17604:	b002      	add	sp, #8
   17606:	bd80      	pop	{r7, pc}
   17608:	000174ed 	.word	0x000174ed

0001760c <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   1760c:	b580      	push	{r7, lr}
   1760e:	b082      	sub	sp, #8
   17610:	af00      	add	r7, sp, #0
   17612:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   17614:	687b      	ldr	r3, [r7, #4]
   17616:	0018      	movs	r0, r3
   17618:	4b04      	ldr	r3, [pc, #16]	; (1762c <prvTraceGetQueueNumberHigh16+0x20>)
   1761a:	4798      	blx	r3
   1761c:	0003      	movs	r3, r0
   1761e:	0c1b      	lsrs	r3, r3, #16
   17620:	b29b      	uxth	r3, r3
}
   17622:	0018      	movs	r0, r3
   17624:	46bd      	mov	sp, r7
   17626:	b002      	add	sp, #8
   17628:	bd80      	pop	{r7, pc}
   1762a:	46c0      	nop			; (mov r8, r8)
   1762c:	000174ed 	.word	0x000174ed

00017630 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   17630:	b580      	push	{r7, lr}
   17632:	b082      	sub	sp, #8
   17634:	af00      	add	r7, sp, #0
   17636:	6078      	str	r0, [r7, #4]
   17638:	000a      	movs	r2, r1
   1763a:	1cbb      	adds	r3, r7, #2
   1763c:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   1763e:	687b      	ldr	r3, [r7, #4]
   17640:	0018      	movs	r0, r3
   17642:	4b08      	ldr	r3, [pc, #32]	; (17664 <prvTraceSetQueueNumberLow16+0x34>)
   17644:	4798      	blx	r3
   17646:	0003      	movs	r3, r0
   17648:	0c1b      	lsrs	r3, r3, #16
   1764a:	041a      	lsls	r2, r3, #16
   1764c:	1cbb      	adds	r3, r7, #2
   1764e:	881b      	ldrh	r3, [r3, #0]
   17650:	431a      	orrs	r2, r3
   17652:	687b      	ldr	r3, [r7, #4]
   17654:	0011      	movs	r1, r2
   17656:	0018      	movs	r0, r3
   17658:	4b03      	ldr	r3, [pc, #12]	; (17668 <prvTraceSetQueueNumberLow16+0x38>)
   1765a:	4798      	blx	r3
}
   1765c:	46c0      	nop			; (mov r8, r8)
   1765e:	46bd      	mov	sp, r7
   17660:	b002      	add	sp, #8
   17662:	bd80      	pop	{r7, pc}
   17664:	000174ed 	.word	0x000174ed
   17668:	0001acc9 	.word	0x0001acc9

0001766c <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   1766c:	b580      	push	{r7, lr}
   1766e:	b082      	sub	sp, #8
   17670:	af00      	add	r7, sp, #0
   17672:	6078      	str	r0, [r7, #4]
   17674:	000a      	movs	r2, r1
   17676:	1cbb      	adds	r3, r7, #2
   17678:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   1767a:	687b      	ldr	r3, [r7, #4]
   1767c:	0018      	movs	r0, r3
   1767e:	4b09      	ldr	r3, [pc, #36]	; (176a4 <prvTraceSetQueueNumberHigh16+0x38>)
   17680:	4798      	blx	r3
   17682:	0003      	movs	r3, r0
   17684:	041b      	lsls	r3, r3, #16
   17686:	0c1a      	lsrs	r2, r3, #16
   17688:	1cbb      	adds	r3, r7, #2
   1768a:	881b      	ldrh	r3, [r3, #0]
   1768c:	041b      	lsls	r3, r3, #16
   1768e:	431a      	orrs	r2, r3
   17690:	687b      	ldr	r3, [r7, #4]
   17692:	0011      	movs	r1, r2
   17694:	0018      	movs	r0, r3
   17696:	4b04      	ldr	r3, [pc, #16]	; (176a8 <prvTraceSetQueueNumberHigh16+0x3c>)
   17698:	4798      	blx	r3
}
   1769a:	46c0      	nop			; (mov r8, r8)
   1769c:	46bd      	mov	sp, r7
   1769e:	b002      	add	sp, #8
   176a0:	bd80      	pop	{r7, pc}
   176a2:	46c0      	nop			; (mov r8, r8)
   176a4:	000174ed 	.word	0x000174ed
   176a8:	0001acc9 	.word	0x0001acc9

000176ac <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   176ac:	b580      	push	{r7, lr}
   176ae:	b084      	sub	sp, #16
   176b0:	af00      	add	r7, sp, #0
   176b2:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   176b4:	2300      	movs	r3, #0
   176b6:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   176b8:	2300      	movs	r3, #0
   176ba:	60bb      	str	r3, [r7, #8]
   176bc:	e018      	b.n	176f0 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   176be:	4b14      	ldr	r3, [pc, #80]	; (17710 <prvAddTaskToStackMonitor+0x64>)
   176c0:	68ba      	ldr	r2, [r7, #8]
   176c2:	00d2      	lsls	r2, r2, #3
   176c4:	58d3      	ldr	r3, [r2, r3]
   176c6:	2b00      	cmp	r3, #0
   176c8:	d10f      	bne.n	176ea <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   176ca:	4b11      	ldr	r3, [pc, #68]	; (17710 <prvAddTaskToStackMonitor+0x64>)
   176cc:	68ba      	ldr	r2, [r7, #8]
   176ce:	00d2      	lsls	r2, r2, #3
   176d0:	6879      	ldr	r1, [r7, #4]
   176d2:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   176d4:	4a0e      	ldr	r2, [pc, #56]	; (17710 <prvAddTaskToStackMonitor+0x64>)
   176d6:	68bb      	ldr	r3, [r7, #8]
   176d8:	00db      	lsls	r3, r3, #3
   176da:	18d3      	adds	r3, r2, r3
   176dc:	3304      	adds	r3, #4
   176de:	2201      	movs	r2, #1
   176e0:	4252      	negs	r2, r2
   176e2:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   176e4:	2301      	movs	r3, #1
   176e6:	60fb      	str	r3, [r7, #12]
			break;
   176e8:	e005      	b.n	176f6 <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   176ea:	68bb      	ldr	r3, [r7, #8]
   176ec:	3301      	adds	r3, #1
   176ee:	60bb      	str	r3, [r7, #8]
   176f0:	68bb      	ldr	r3, [r7, #8]
   176f2:	2b09      	cmp	r3, #9
   176f4:	dde3      	ble.n	176be <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   176f6:	68fb      	ldr	r3, [r7, #12]
   176f8:	2b00      	cmp	r3, #0
   176fa:	d104      	bne.n	17706 <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   176fc:	4b05      	ldr	r3, [pc, #20]	; (17714 <prvAddTaskToStackMonitor+0x68>)
   176fe:	681b      	ldr	r3, [r3, #0]
   17700:	1c5a      	adds	r2, r3, #1
   17702:	4b04      	ldr	r3, [pc, #16]	; (17714 <prvAddTaskToStackMonitor+0x68>)
   17704:	601a      	str	r2, [r3, #0]
	}
}
   17706:	46c0      	nop			; (mov r8, r8)
   17708:	46bd      	mov	sp, r7
   1770a:	b004      	add	sp, #16
   1770c:	bd80      	pop	{r7, pc}
   1770e:	46c0      	nop			; (mov r8, r8)
   17710:	20000b44 	.word	0x20000b44
   17714:	20000b94 	.word	0x20000b94

00017718 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   17718:	b590      	push	{r4, r7, lr}
   1771a:	b085      	sub	sp, #20
   1771c:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   1771e:	2300      	movs	r3, #0
   17720:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   17722:	4b2b      	ldr	r3, [pc, #172]	; (177d0 <prvReportStackUsage+0xb8>)
   17724:	681b      	ldr	r3, [r3, #0]
   17726:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   17728:	4b29      	ldr	r3, [pc, #164]	; (177d0 <prvReportStackUsage+0xb8>)
   1772a:	681a      	ldr	r2, [r3, #0]
   1772c:	4b29      	ldr	r3, [pc, #164]	; (177d4 <prvReportStackUsage+0xbc>)
   1772e:	00d2      	lsls	r2, r2, #3
   17730:	58d3      	ldr	r3, [r2, r3]
   17732:	2b00      	cmp	r3, #0
   17734:	d035      	beq.n	177a2 <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   17736:	4b26      	ldr	r3, [pc, #152]	; (177d0 <prvReportStackUsage+0xb8>)
   17738:	681a      	ldr	r2, [r3, #0]
   1773a:	4b26      	ldr	r3, [pc, #152]	; (177d4 <prvReportStackUsage+0xbc>)
   1773c:	00d2      	lsls	r2, r2, #3
   1773e:	58d3      	ldr	r3, [r2, r3]
   17740:	0018      	movs	r0, r3
   17742:	4b25      	ldr	r3, [pc, #148]	; (177d8 <prvReportStackUsage+0xc0>)
   17744:	4798      	blx	r3
   17746:	0003      	movs	r3, r0
   17748:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   1774a:	4b21      	ldr	r3, [pc, #132]	; (177d0 <prvReportStackUsage+0xb8>)
   1774c:	681b      	ldr	r3, [r3, #0]
   1774e:	4a21      	ldr	r2, [pc, #132]	; (177d4 <prvReportStackUsage+0xbc>)
   17750:	00db      	lsls	r3, r3, #3
   17752:	18d3      	adds	r3, r2, r3
   17754:	3304      	adds	r3, #4
   17756:	681a      	ldr	r2, [r3, #0]
   17758:	687b      	ldr	r3, [r7, #4]
   1775a:	429a      	cmp	r2, r3
   1775c:	d907      	bls.n	1776e <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   1775e:	4b1c      	ldr	r3, [pc, #112]	; (177d0 <prvReportStackUsage+0xb8>)
   17760:	681b      	ldr	r3, [r3, #0]
   17762:	4a1c      	ldr	r2, [pc, #112]	; (177d4 <prvReportStackUsage+0xbc>)
   17764:	00db      	lsls	r3, r3, #3
   17766:	18d3      	adds	r3, r2, r3
   17768:	3304      	adds	r3, #4
   1776a:	687a      	ldr	r2, [r7, #4]
   1776c:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   1776e:	4b18      	ldr	r3, [pc, #96]	; (177d0 <prvReportStackUsage+0xb8>)
   17770:	681a      	ldr	r2, [r3, #0]
   17772:	4b18      	ldr	r3, [pc, #96]	; (177d4 <prvReportStackUsage+0xbc>)
   17774:	00d2      	lsls	r2, r2, #3
   17776:	58d3      	ldr	r3, [r2, r3]
   17778:	0018      	movs	r0, r3
   1777a:	4b18      	ldr	r3, [pc, #96]	; (177dc <prvReportStackUsage+0xc4>)
   1777c:	4798      	blx	r3
   1777e:	0003      	movs	r3, r0
   17780:	b2db      	uxtb	r3, r3
   17782:	0019      	movs	r1, r3
   17784:	4b12      	ldr	r3, [pc, #72]	; (177d0 <prvReportStackUsage+0xb8>)
   17786:	681b      	ldr	r3, [r3, #0]
   17788:	4a12      	ldr	r2, [pc, #72]	; (177d4 <prvReportStackUsage+0xbc>)
   1778a:	00db      	lsls	r3, r3, #3
   1778c:	18d3      	adds	r3, r2, r3
   1778e:	3304      	adds	r3, #4
   17790:	681b      	ldr	r3, [r3, #0]
   17792:	000a      	movs	r2, r1
   17794:	2103      	movs	r1, #3
   17796:	20ea      	movs	r0, #234	; 0xea
   17798:	4c11      	ldr	r4, [pc, #68]	; (177e0 <prvReportStackUsage+0xc8>)
   1779a:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   1779c:	68fb      	ldr	r3, [r7, #12]
   1779e:	3301      	adds	r3, #1
   177a0:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   177a2:	4b0b      	ldr	r3, [pc, #44]	; (177d0 <prvReportStackUsage+0xb8>)
   177a4:	681b      	ldr	r3, [r3, #0]
   177a6:	1c5a      	adds	r2, r3, #1
   177a8:	4b0e      	ldr	r3, [pc, #56]	; (177e4 <prvReportStackUsage+0xcc>)
   177aa:	210a      	movs	r1, #10
   177ac:	0010      	movs	r0, r2
   177ae:	4798      	blx	r3
   177b0:	000b      	movs	r3, r1
   177b2:	001a      	movs	r2, r3
   177b4:	4b06      	ldr	r3, [pc, #24]	; (177d0 <prvReportStackUsage+0xb8>)
   177b6:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   177b8:	68fb      	ldr	r3, [r7, #12]
   177ba:	2b00      	cmp	r3, #0
   177bc:	dc04      	bgt.n	177c8 <prvReportStackUsage+0xb0>
   177be:	4b04      	ldr	r3, [pc, #16]	; (177d0 <prvReportStackUsage+0xb8>)
   177c0:	681a      	ldr	r2, [r3, #0]
   177c2:	68bb      	ldr	r3, [r7, #8]
   177c4:	429a      	cmp	r2, r3
   177c6:	d1af      	bne.n	17728 <prvReportStackUsage+0x10>
}
   177c8:	46c0      	nop			; (mov r8, r8)
   177ca:	46bd      	mov	sp, r7
   177cc:	b005      	add	sp, #20
   177ce:	bd90      	pop	{r4, r7, pc}
   177d0:	20000b98 	.word	0x20000b98
   177d4:	20000b44 	.word	0x20000b44
   177d8:	0001c1b1 	.word	0x0001c1b1
   177dc:	0001752d 	.word	0x0001752d
   177e0:	00018075 	.word	0x00018075
   177e4:	0003217d 	.word	0x0003217d

000177e8 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   177e8:	b580      	push	{r7, lr}
   177ea:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   177ec:	4b02      	ldr	r3, [pc, #8]	; (177f8 <prvTraceGetCurrentTaskHandle+0x10>)
   177ee:	4798      	blx	r3
   177f0:	0003      	movs	r3, r0
}
   177f2:	0018      	movs	r0, r3
   177f4:	46bd      	mov	sp, r7
   177f6:	bd80      	pop	{r7, pc}
   177f8:	0001c25d 	.word	0x0001c25d

000177fc <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   177fc:	b590      	push	{r4, r7, lr}
   177fe:	b085      	sub	sp, #20
   17800:	af02      	add	r7, sp, #8
   17802:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   17804:	4b14      	ldr	r3, [pc, #80]	; (17858 <vTraceEnable+0x5c>)
   17806:	4798      	blx	r3

	if (startOption == TRC_START)
   17808:	687b      	ldr	r3, [r7, #4]
   1780a:	2b01      	cmp	r3, #1
   1780c:	d102      	bne.n	17814 <vTraceEnable+0x18>
	{
		vTraceStart();
   1780e:	4b13      	ldr	r3, [pc, #76]	; (1785c <vTraceEnable+0x60>)
   17810:	4798      	blx	r3
   17812:	e00e      	b.n	17832 <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   17814:	687b      	ldr	r3, [r7, #4]
   17816:	2b02      	cmp	r3, #2
   17818:	d104      	bne.n	17824 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   1781a:	4b11      	ldr	r3, [pc, #68]	; (17860 <vTraceEnable+0x64>)
   1781c:	0018      	movs	r0, r3
   1781e:	4b11      	ldr	r3, [pc, #68]	; (17864 <vTraceEnable+0x68>)
   17820:	4798      	blx	r3
   17822:	e006      	b.n	17832 <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   17824:	687b      	ldr	r3, [r7, #4]
   17826:	2b00      	cmp	r3, #0
   17828:	d003      	beq.n	17832 <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   1782a:	4b0f      	ldr	r3, [pc, #60]	; (17868 <vTraceEnable+0x6c>)
   1782c:	0018      	movs	r0, r3
   1782e:	4b0d      	ldr	r3, [pc, #52]	; (17864 <vTraceEnable+0x68>)
   17830:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   17832:	4b0e      	ldr	r3, [pc, #56]	; (1786c <vTraceEnable+0x70>)
   17834:	681b      	ldr	r3, [r3, #0]
   17836:	2b00      	cmp	r3, #0
   17838:	d10a      	bne.n	17850 <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   1783a:	2396      	movs	r3, #150	; 0x96
   1783c:	005a      	lsls	r2, r3, #1
   1783e:	490c      	ldr	r1, [pc, #48]	; (17870 <vTraceEnable+0x74>)
   17840:	480c      	ldr	r0, [pc, #48]	; (17874 <vTraceEnable+0x78>)
   17842:	4b0a      	ldr	r3, [pc, #40]	; (1786c <vTraceEnable+0x70>)
   17844:	9301      	str	r3, [sp, #4]
   17846:	2304      	movs	r3, #4
   17848:	9300      	str	r3, [sp, #0]
   1784a:	2300      	movs	r3, #0
   1784c:	4c0a      	ldr	r4, [pc, #40]	; (17878 <vTraceEnable+0x7c>)
   1784e:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   17850:	46c0      	nop			; (mov r8, r8)
   17852:	46bd      	mov	sp, r7
   17854:	b003      	add	sp, #12
   17856:	bd90      	pop	{r4, r7, pc}
   17858:	00018741 	.word	0x00018741
   1785c:	00017c99 	.word	0x00017c99
   17860:	00036504 	.word	0x00036504
   17864:	00018de9 	.word	0x00018de9
   17868:	00036544 	.word	0x00036544
   1786c:	20000b40 	.word	0x20000b40
   17870:	00036578 	.word	0x00036578
   17874:	0001787d 	.word	0x0001787d
   17878:	0001b1b5 	.word	0x0001b1b5

0001787c <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   1787c:	b580      	push	{r7, lr}
   1787e:	b082      	sub	sp, #8
   17880:	af00      	add	r7, sp, #0
   17882:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   17884:	4b04      	ldr	r3, [pc, #16]	; (17898 <TzCtrl+0x1c>)
   17886:	4798      	blx	r3
   17888:	1e03      	subs	r3, r0, #0
   1788a:	d001      	beq.n	17890 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   1788c:	4b03      	ldr	r3, [pc, #12]	; (1789c <TzCtrl+0x20>)
   1788e:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   17890:	2004      	movs	r0, #4
   17892:	4b03      	ldr	r3, [pc, #12]	; (178a0 <TzCtrl+0x24>)
   17894:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   17896:	e7f5      	b.n	17884 <TzCtrl+0x8>
   17898:	00017cdd 	.word	0x00017cdd
   1789c:	00017719 	.word	0x00017719
   178a0:	0001b551 	.word	0x0001b551

000178a4 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   178a4:	b580      	push	{r7, lr}
   178a6:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   178a8:	4b60      	ldr	r3, [pc, #384]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   178aa:	681b      	ldr	r3, [r3, #0]
   178ac:	2209      	movs	r2, #9
   178ae:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   178b0:	4b5e      	ldr	r3, [pc, #376]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   178b2:	681b      	ldr	r3, [r3, #0]
   178b4:	2264      	movs	r2, #100	; 0x64
   178b6:	210a      	movs	r1, #10
   178b8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   178ba:	4b5c      	ldr	r3, [pc, #368]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   178bc:	681b      	ldr	r3, [r3, #0]
   178be:	2265      	movs	r2, #101	; 0x65
   178c0:	210a      	movs	r1, #10
   178c2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   178c4:	4b59      	ldr	r3, [pc, #356]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   178c6:	681b      	ldr	r3, [r3, #0]
   178c8:	2266      	movs	r2, #102	; 0x66
   178ca:	210a      	movs	r1, #10
   178cc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   178ce:	4b57      	ldr	r3, [pc, #348]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   178d0:	681b      	ldr	r3, [r3, #0]
   178d2:	2267      	movs	r2, #103	; 0x67
   178d4:	210f      	movs	r1, #15
   178d6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   178d8:	4b54      	ldr	r3, [pc, #336]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   178da:	681b      	ldr	r3, [r3, #0]
   178dc:	2268      	movs	r2, #104	; 0x68
   178de:	2105      	movs	r1, #5
   178e0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   178e2:	4b52      	ldr	r3, [pc, #328]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   178e4:	681b      	ldr	r3, [r3, #0]
   178e6:	2269      	movs	r2, #105	; 0x69
   178e8:	2105      	movs	r1, #5
   178ea:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   178ec:	4b4f      	ldr	r3, [pc, #316]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   178ee:	681b      	ldr	r3, [r3, #0]
   178f0:	226a      	movs	r2, #106	; 0x6a
   178f2:	2105      	movs	r1, #5
   178f4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   178f6:	4b4d      	ldr	r3, [pc, #308]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   178f8:	681b      	ldr	r3, [r3, #0]
   178fa:	226b      	movs	r2, #107	; 0x6b
   178fc:	2105      	movs	r1, #5
   178fe:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   17900:	4b4a      	ldr	r3, [pc, #296]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   17902:	681b      	ldr	r3, [r3, #0]
   17904:	226c      	movs	r2, #108	; 0x6c
   17906:	2105      	movs	r1, #5
   17908:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   1790a:	4b48      	ldr	r3, [pc, #288]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   1790c:	681b      	ldr	r3, [r3, #0]
   1790e:	2270      	movs	r2, #112	; 0x70
   17910:	210f      	movs	r1, #15
   17912:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   17914:	4b45      	ldr	r3, [pc, #276]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   17916:	681b      	ldr	r3, [r3, #0]
   17918:	2271      	movs	r2, #113	; 0x71
   1791a:	210f      	movs	r1, #15
   1791c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   1791e:	4b43      	ldr	r3, [pc, #268]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   17920:	681b      	ldr	r3, [r3, #0]
   17922:	2272      	movs	r2, #114	; 0x72
   17924:	210f      	movs	r1, #15
   17926:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   17928:	4b40      	ldr	r3, [pc, #256]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   1792a:	681b      	ldr	r3, [r3, #0]
   1792c:	2273      	movs	r2, #115	; 0x73
   1792e:	210f      	movs	r1, #15
   17930:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   17932:	4b3e      	ldr	r3, [pc, #248]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   17934:	681b      	ldr	r3, [r3, #0]
   17936:	2274      	movs	r2, #116	; 0x74
   17938:	210f      	movs	r1, #15
   1793a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   1793c:	4b3b      	ldr	r3, [pc, #236]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   1793e:	681b      	ldr	r3, [r3, #0]
   17940:	2275      	movs	r2, #117	; 0x75
   17942:	210f      	movs	r1, #15
   17944:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   17946:	4b39      	ldr	r3, [pc, #228]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   17948:	681b      	ldr	r3, [r3, #0]
   1794a:	2276      	movs	r2, #118	; 0x76
   1794c:	210f      	movs	r1, #15
   1794e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   17950:	4b36      	ldr	r3, [pc, #216]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   17952:	681b      	ldr	r3, [r3, #0]
   17954:	2277      	movs	r2, #119	; 0x77
   17956:	210f      	movs	r1, #15
   17958:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   1795a:	4b34      	ldr	r3, [pc, #208]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   1795c:	681b      	ldr	r3, [r3, #0]
   1795e:	2278      	movs	r2, #120	; 0x78
   17960:	210f      	movs	r1, #15
   17962:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   17964:	4b31      	ldr	r3, [pc, #196]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   17966:	681b      	ldr	r3, [r3, #0]
   17968:	227c      	movs	r2, #124	; 0x7c
   1796a:	2110      	movs	r1, #16
   1796c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   1796e:	4b2f      	ldr	r3, [pc, #188]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   17970:	681b      	ldr	r3, [r3, #0]
   17972:	227d      	movs	r2, #125	; 0x7d
   17974:	2110      	movs	r1, #16
   17976:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   17978:	4b2c      	ldr	r3, [pc, #176]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   1797a:	681b      	ldr	r3, [r3, #0]
   1797c:	227e      	movs	r2, #126	; 0x7e
   1797e:	2110      	movs	r1, #16
   17980:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   17982:	4b2a      	ldr	r3, [pc, #168]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   17984:	681b      	ldr	r3, [r3, #0]
   17986:	227f      	movs	r2, #127	; 0x7f
   17988:	2113      	movs	r1, #19
   1798a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   1798c:	4b27      	ldr	r3, [pc, #156]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   1798e:	681b      	ldr	r3, [r3, #0]
   17990:	2280      	movs	r2, #128	; 0x80
   17992:	2111      	movs	r1, #17
   17994:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   17996:	4b25      	ldr	r3, [pc, #148]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   17998:	681b      	ldr	r3, [r3, #0]
   1799a:	2281      	movs	r2, #129	; 0x81
   1799c:	2110      	movs	r1, #16
   1799e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   179a0:	4b22      	ldr	r3, [pc, #136]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   179a2:	681b      	ldr	r3, [r3, #0]
   179a4:	2282      	movs	r2, #130	; 0x82
   179a6:	2113      	movs	r1, #19
   179a8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   179aa:	4b20      	ldr	r3, [pc, #128]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   179ac:	681b      	ldr	r3, [r3, #0]
   179ae:	2283      	movs	r2, #131	; 0x83
   179b0:	2113      	movs	r1, #19
   179b2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   179b4:	4b1d      	ldr	r3, [pc, #116]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   179b6:	681b      	ldr	r3, [r3, #0]
   179b8:	2284      	movs	r2, #132	; 0x84
   179ba:	2113      	movs	r1, #19
   179bc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   179be:	4b1b      	ldr	r3, [pc, #108]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   179c0:	681b      	ldr	r3, [r3, #0]
   179c2:	2288      	movs	r2, #136	; 0x88
   179c4:	2100      	movs	r1, #0
   179c6:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   179c8:	4b18      	ldr	r3, [pc, #96]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   179ca:	681b      	ldr	r3, [r3, #0]
   179cc:	228a      	movs	r2, #138	; 0x8a
   179ce:	21a0      	movs	r1, #160	; 0xa0
   179d0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   179d2:	4b16      	ldr	r3, [pc, #88]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   179d4:	681b      	ldr	r3, [r3, #0]
   179d6:	228c      	movs	r2, #140	; 0x8c
   179d8:	21a0      	movs	r1, #160	; 0xa0
   179da:	0049      	lsls	r1, r1, #1
   179dc:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   179de:	4b13      	ldr	r3, [pc, #76]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   179e0:	681b      	ldr	r3, [r3, #0]
   179e2:	228e      	movs	r2, #142	; 0x8e
   179e4:	21f0      	movs	r1, #240	; 0xf0
   179e6:	0049      	lsls	r1, r1, #1
   179e8:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   179ea:	4b10      	ldr	r3, [pc, #64]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   179ec:	681b      	ldr	r3, [r3, #0]
   179ee:	2290      	movs	r2, #144	; 0x90
   179f0:	490f      	ldr	r1, [pc, #60]	; (17a30 <vTraceInitObjectPropertyTable+0x18c>)
   179f2:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   179f4:	4b0d      	ldr	r3, [pc, #52]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   179f6:	681b      	ldr	r3, [r3, #0]
   179f8:	2292      	movs	r2, #146	; 0x92
   179fa:	490e      	ldr	r1, [pc, #56]	; (17a34 <vTraceInitObjectPropertyTable+0x190>)
   179fc:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   179fe:	4b0b      	ldr	r3, [pc, #44]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   17a00:	681b      	ldr	r3, [r3, #0]
   17a02:	2294      	movs	r2, #148	; 0x94
   17a04:	490c      	ldr	r1, [pc, #48]	; (17a38 <vTraceInitObjectPropertyTable+0x194>)
   17a06:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   17a08:	4b08      	ldr	r3, [pc, #32]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   17a0a:	681b      	ldr	r3, [r3, #0]
   17a0c:	2296      	movs	r2, #150	; 0x96
   17a0e:	490b      	ldr	r1, [pc, #44]	; (17a3c <vTraceInitObjectPropertyTable+0x198>)
   17a10:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   17a12:	4b06      	ldr	r3, [pc, #24]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   17a14:	681b      	ldr	r3, [r3, #0]
   17a16:	2298      	movs	r2, #152	; 0x98
   17a18:	218c      	movs	r1, #140	; 0x8c
   17a1a:	00c9      	lsls	r1, r1, #3
   17a1c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   17a1e:	4b03      	ldr	r3, [pc, #12]	; (17a2c <vTraceInitObjectPropertyTable+0x188>)
   17a20:	681b      	ldr	r3, [r3, #0]
   17a22:	4a07      	ldr	r2, [pc, #28]	; (17a40 <vTraceInitObjectPropertyTable+0x19c>)
   17a24:	661a      	str	r2, [r3, #96]	; 0x60
}
   17a26:	46c0      	nop			; (mov r8, r8)
   17a28:	46bd      	mov	sp, r7
   17a2a:	bd80      	pop	{r7, pc}
   17a2c:	20000c58 	.word	0x20000c58
   17a30:	000002fd 	.word	0x000002fd
   17a34:	00000352 	.word	0x00000352
   17a38:	000003a2 	.word	0x000003a2
   17a3c:	00000401 	.word	0x00000401
   17a40:	000004bf 	.word	0x000004bf

00017a44 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   17a44:	b580      	push	{r7, lr}
   17a46:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   17a48:	4b2e      	ldr	r3, [pc, #184]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17a4a:	2200      	movs	r2, #0
   17a4c:	825a      	strh	r2, [r3, #18]
   17a4e:	4b2d      	ldr	r3, [pc, #180]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17a50:	8a5a      	ldrh	r2, [r3, #18]
   17a52:	4b2c      	ldr	r3, [pc, #176]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17a54:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   17a56:	4b2b      	ldr	r3, [pc, #172]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17a58:	220a      	movs	r2, #10
   17a5a:	829a      	strh	r2, [r3, #20]
   17a5c:	4b29      	ldr	r3, [pc, #164]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17a5e:	8a9a      	ldrh	r2, [r3, #20]
   17a60:	4b28      	ldr	r3, [pc, #160]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17a62:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   17a64:	4b27      	ldr	r3, [pc, #156]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17a66:	2214      	movs	r2, #20
   17a68:	82da      	strh	r2, [r3, #22]
   17a6a:	4b26      	ldr	r3, [pc, #152]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17a6c:	8ada      	ldrh	r2, [r3, #22]
   17a6e:	4b25      	ldr	r3, [pc, #148]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17a70:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   17a72:	4b24      	ldr	r3, [pc, #144]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17a74:	221e      	movs	r2, #30
   17a76:	831a      	strh	r2, [r3, #24]
   17a78:	4b22      	ldr	r3, [pc, #136]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17a7a:	8b1a      	ldrh	r2, [r3, #24]
   17a7c:	4b21      	ldr	r3, [pc, #132]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17a7e:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   17a80:	4b20      	ldr	r3, [pc, #128]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17a82:	222d      	movs	r2, #45	; 0x2d
   17a84:	835a      	strh	r2, [r3, #26]
   17a86:	4b1f      	ldr	r3, [pc, #124]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17a88:	8b5a      	ldrh	r2, [r3, #26]
   17a8a:	4b1e      	ldr	r3, [pc, #120]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17a8c:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   17a8e:	4b1d      	ldr	r3, [pc, #116]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17a90:	2232      	movs	r2, #50	; 0x32
   17a92:	839a      	strh	r2, [r3, #28]
   17a94:	4b1b      	ldr	r3, [pc, #108]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17a96:	8b9a      	ldrh	r2, [r3, #28]
   17a98:	4b1a      	ldr	r3, [pc, #104]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17a9a:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   17a9c:	4b19      	ldr	r3, [pc, #100]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17a9e:	2237      	movs	r2, #55	; 0x37
   17aa0:	83da      	strh	r2, [r3, #30]
   17aa2:	4b18      	ldr	r3, [pc, #96]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17aa4:	8bda      	ldrh	r2, [r3, #30]
   17aa6:	4b17      	ldr	r3, [pc, #92]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17aa8:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   17aaa:	4b16      	ldr	r3, [pc, #88]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17aac:	223c      	movs	r2, #60	; 0x3c
   17aae:	841a      	strh	r2, [r3, #32]
   17ab0:	4b14      	ldr	r3, [pc, #80]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17ab2:	8c1a      	ldrh	r2, [r3, #32]
   17ab4:	4b13      	ldr	r3, [pc, #76]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17ab6:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   17ab8:	4b12      	ldr	r3, [pc, #72]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17aba:	2241      	movs	r2, #65	; 0x41
   17abc:	845a      	strh	r2, [r3, #34]	; 0x22
   17abe:	4b11      	ldr	r3, [pc, #68]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17ac0:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   17ac2:	4b10      	ldr	r3, [pc, #64]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17ac4:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   17ac6:	4b0f      	ldr	r3, [pc, #60]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17ac8:	2209      	movs	r2, #9
   17aca:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   17acc:	4b0d      	ldr	r3, [pc, #52]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17ace:	2213      	movs	r2, #19
   17ad0:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   17ad2:	4b0c      	ldr	r3, [pc, #48]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17ad4:	221d      	movs	r2, #29
   17ad6:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   17ad8:	4b0a      	ldr	r3, [pc, #40]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17ada:	222c      	movs	r2, #44	; 0x2c
   17adc:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   17ade:	4b09      	ldr	r3, [pc, #36]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17ae0:	2231      	movs	r2, #49	; 0x31
   17ae2:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   17ae4:	4b07      	ldr	r3, [pc, #28]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17ae6:	2236      	movs	r2, #54	; 0x36
   17ae8:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   17aea:	4b06      	ldr	r3, [pc, #24]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17aec:	223b      	movs	r2, #59	; 0x3b
   17aee:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   17af0:	4b04      	ldr	r3, [pc, #16]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17af2:	2240      	movs	r2, #64	; 0x40
   17af4:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   17af6:	4b03      	ldr	r3, [pc, #12]	; (17b04 <vTraceInitObjectHandleStack+0xc0>)
   17af8:	2245      	movs	r2, #69	; 0x45
   17afa:	869a      	strh	r2, [r3, #52]	; 0x34
}
   17afc:	46c0      	nop			; (mov r8, r8)
   17afe:	46bd      	mov	sp, r7
   17b00:	bd80      	pop	{r7, pc}
   17b02:	46c0      	nop			; (mov r8, r8)
   17b04:	20000bc8 	.word	0x20000bc8

00017b08 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   17b08:	b580      	push	{r7, lr}
   17b0a:	b082      	sub	sp, #8
   17b0c:	af00      	add	r7, sp, #0
   17b0e:	0002      	movs	r2, r0
   17b10:	1dfb      	adds	r3, r7, #7
   17b12:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   17b14:	1dfb      	adds	r3, r7, #7
   17b16:	781b      	ldrb	r3, [r3, #0]
   17b18:	2b08      	cmp	r3, #8
   17b1a:	d816      	bhi.n	17b4a <pszTraceGetErrorNotEnoughHandles+0x42>
   17b1c:	009a      	lsls	r2, r3, #2
   17b1e:	4b0d      	ldr	r3, [pc, #52]	; (17b54 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   17b20:	18d3      	adds	r3, r2, r3
   17b22:	681b      	ldr	r3, [r3, #0]
   17b24:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   17b26:	4b0c      	ldr	r3, [pc, #48]	; (17b58 <pszTraceGetErrorNotEnoughHandles+0x50>)
   17b28:	e010      	b.n	17b4c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   17b2a:	4b0c      	ldr	r3, [pc, #48]	; (17b5c <pszTraceGetErrorNotEnoughHandles+0x54>)
   17b2c:	e00e      	b.n	17b4c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   17b2e:	4b0c      	ldr	r3, [pc, #48]	; (17b60 <pszTraceGetErrorNotEnoughHandles+0x58>)
   17b30:	e00c      	b.n	17b4c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   17b32:	4b0c      	ldr	r3, [pc, #48]	; (17b64 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   17b34:	e00a      	b.n	17b4c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   17b36:	4b0c      	ldr	r3, [pc, #48]	; (17b68 <pszTraceGetErrorNotEnoughHandles+0x60>)
   17b38:	e008      	b.n	17b4c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   17b3a:	4b0c      	ldr	r3, [pc, #48]	; (17b6c <pszTraceGetErrorNotEnoughHandles+0x64>)
   17b3c:	e006      	b.n	17b4c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   17b3e:	4b0c      	ldr	r3, [pc, #48]	; (17b70 <pszTraceGetErrorNotEnoughHandles+0x68>)
   17b40:	e004      	b.n	17b4c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   17b42:	4b0c      	ldr	r3, [pc, #48]	; (17b74 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   17b44:	e002      	b.n	17b4c <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   17b46:	4b0c      	ldr	r3, [pc, #48]	; (17b78 <pszTraceGetErrorNotEnoughHandles+0x70>)
   17b48:	e000      	b.n	17b4c <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   17b4a:	4b0c      	ldr	r3, [pc, #48]	; (17b7c <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   17b4c:	0018      	movs	r0, r3
   17b4e:	46bd      	mov	sp, r7
   17b50:	b002      	add	sp, #8
   17b52:	bd80      	pop	{r7, pc}
   17b54:	00036880 	.word	0x00036880
   17b58:	00036580 	.word	0x00036580
   17b5c:	000365c8 	.word	0x000365c8
   17b60:	00036610 	.word	0x00036610
   17b64:	00036664 	.word	0x00036664
   17b68:	000366b0 	.word	0x000366b0
   17b6c:	000366fc 	.word	0x000366fc
   17b70:	00036748 	.word	0x00036748
   17b74:	0003679c 	.word	0x0003679c
   17b78:	000367f4 	.word	0x000367f4
   17b7c:	00036850 	.word	0x00036850

00017b80 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   17b80:	b590      	push	{r4, r7, lr}
   17b82:	b087      	sub	sp, #28
   17b84:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   17b86:	2317      	movs	r3, #23
   17b88:	18fb      	adds	r3, r7, r3
   17b8a:	2200      	movs	r2, #0
   17b8c:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   17b8e:	4b36      	ldr	r3, [pc, #216]	; (17c68 <uiTraceStart+0xe8>)
   17b90:	681b      	ldr	r3, [r3, #0]
   17b92:	2b00      	cmp	r3, #0
   17b94:	d10b      	bne.n	17bae <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   17b96:	4b34      	ldr	r3, [pc, #208]	; (17c68 <uiTraceStart+0xe8>)
   17b98:	681b      	ldr	r3, [r3, #0]
   17b9a:	2b00      	cmp	r3, #0
   17b9c:	d105      	bne.n	17baa <uiTraceStart+0x2a>
   17b9e:	4b33      	ldr	r3, [pc, #204]	; (17c6c <uiTraceStart+0xec>)
   17ba0:	0018      	movs	r0, r3
   17ba2:	4b33      	ldr	r3, [pc, #204]	; (17c70 <uiTraceStart+0xf0>)
   17ba4:	4798      	blx	r3
   17ba6:	2300      	movs	r3, #0
   17ba8:	e059      	b.n	17c5e <uiTraceStart+0xde>
		return 0;
   17baa:	2300      	movs	r3, #0
   17bac:	e057      	b.n	17c5e <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   17bae:	4b2e      	ldr	r3, [pc, #184]	; (17c68 <uiTraceStart+0xe8>)
   17bb0:	681b      	ldr	r3, [r3, #0]
   17bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17bb4:	2b01      	cmp	r3, #1
   17bb6:	d101      	bne.n	17bbc <uiTraceStart+0x3c>
		return 1; /* Already running */
   17bb8:	2301      	movs	r3, #1
   17bba:	e050      	b.n	17c5e <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   17bbc:	4b2d      	ldr	r3, [pc, #180]	; (17c74 <uiTraceStart+0xf4>)
   17bbe:	681b      	ldr	r3, [r3, #0]
   17bc0:	2b00      	cmp	r3, #0
   17bc2:	d149      	bne.n	17c58 <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17bc4:	f3ef 8310 	mrs	r3, PRIMASK
   17bc8:	60bb      	str	r3, [r7, #8]
  return(result);
   17bca:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   17bcc:	613b      	str	r3, [r7, #16]
   17bce:	2301      	movs	r3, #1
   17bd0:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17bd2:	68fb      	ldr	r3, [r7, #12]
   17bd4:	f383 8810 	msr	PRIMASK, r3
   17bd8:	4b27      	ldr	r3, [pc, #156]	; (17c78 <uiTraceStart+0xf8>)
   17bda:	681b      	ldr	r3, [r3, #0]
   17bdc:	1c5a      	adds	r2, r3, #1
   17bde:	4b26      	ldr	r3, [pc, #152]	; (17c78 <uiTraceStart+0xf8>)
   17be0:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   17be2:	4b21      	ldr	r3, [pc, #132]	; (17c68 <uiTraceStart+0xe8>)
   17be4:	681b      	ldr	r3, [r3, #0]
   17be6:	2201      	movs	r2, #1
   17be8:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   17bea:	4b24      	ldr	r3, [pc, #144]	; (17c7c <uiTraceStart+0xfc>)
   17bec:	4798      	blx	r3
   17bee:	0003      	movs	r3, r0
   17bf0:	0018      	movs	r0, r3
   17bf2:	4b23      	ldr	r3, [pc, #140]	; (17c80 <uiTraceStart+0x100>)
   17bf4:	4798      	blx	r3
   17bf6:	0003      	movs	r3, r0
   17bf8:	001a      	movs	r2, r3
   17bfa:	2317      	movs	r3, #23
   17bfc:	18fb      	adds	r3, r7, r3
   17bfe:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   17c00:	2317      	movs	r3, #23
   17c02:	18fb      	adds	r3, r7, r3
   17c04:	781b      	ldrb	r3, [r3, #0]
   17c06:	2b00      	cmp	r3, #0
   17c08:	d116      	bne.n	17c38 <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   17c0a:	2317      	movs	r3, #23
   17c0c:	18fc      	adds	r4, r7, r3
   17c0e:	2003      	movs	r0, #3
   17c10:	4b1c      	ldr	r3, [pc, #112]	; (17c84 <uiTraceStart+0x104>)
   17c12:	4798      	blx	r3
   17c14:	0003      	movs	r3, r0
   17c16:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   17c18:	4a1b      	ldr	r2, [pc, #108]	; (17c88 <uiTraceStart+0x108>)
   17c1a:	2317      	movs	r3, #23
   17c1c:	18fb      	adds	r3, r7, r3
   17c1e:	781b      	ldrb	r3, [r3, #0]
   17c20:	0019      	movs	r1, r3
   17c22:	2003      	movs	r0, #3
   17c24:	4b19      	ldr	r3, [pc, #100]	; (17c8c <uiTraceStart+0x10c>)
   17c26:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   17c28:	2317      	movs	r3, #23
   17c2a:	18fb      	adds	r3, r7, r3
   17c2c:	781b      	ldrb	r3, [r3, #0]
   17c2e:	2200      	movs	r2, #0
   17c30:	0019      	movs	r1, r3
   17c32:	2003      	movs	r0, #3
   17c34:	4b16      	ldr	r3, [pc, #88]	; (17c90 <uiTraceStart+0x110>)
   17c36:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   17c38:	2317      	movs	r3, #23
   17c3a:	18fb      	adds	r3, r7, r3
   17c3c:	781b      	ldrb	r3, [r3, #0]
   17c3e:	0018      	movs	r0, r3
   17c40:	4b14      	ldr	r3, [pc, #80]	; (17c94 <uiTraceStart+0x114>)
   17c42:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   17c44:	4b0c      	ldr	r3, [pc, #48]	; (17c78 <uiTraceStart+0xf8>)
   17c46:	681b      	ldr	r3, [r3, #0]
   17c48:	1e5a      	subs	r2, r3, #1
   17c4a:	4b0b      	ldr	r3, [pc, #44]	; (17c78 <uiTraceStart+0xf8>)
   17c4c:	601a      	str	r2, [r3, #0]
   17c4e:	693b      	ldr	r3, [r7, #16]
   17c50:	607b      	str	r3, [r7, #4]
   17c52:	687b      	ldr	r3, [r7, #4]
   17c54:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   17c58:	4b03      	ldr	r3, [pc, #12]	; (17c68 <uiTraceStart+0xe8>)
   17c5a:	681b      	ldr	r3, [r3, #0]
   17c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   17c5e:	0018      	movs	r0, r3
   17c60:	46bd      	mov	sp, r7
   17c62:	b007      	add	sp, #28
   17c64:	bd90      	pop	{r4, r7, pc}
   17c66:	46c0      	nop			; (mov r8, r8)
   17c68:	20000c58 	.word	0x20000c58
   17c6c:	000368a4 	.word	0x000368a4
   17c70:	00018de9 	.word	0x00018de9
   17c74:	20000bb8 	.word	0x20000bb8
   17c78:	20000bb0 	.word	0x20000bb0
   17c7c:	000177e9 	.word	0x000177e9
   17c80:	0001752d 	.word	0x0001752d
   17c84:	00018acd 	.word	0x00018acd
   17c88:	000368e8 	.word	0x000368e8
   17c8c:	00018cfd 	.word	0x00018cfd
   17c90:	00018461 	.word	0x00018461
   17c94:	00018349 	.word	0x00018349

00017c98 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   17c98:	b580      	push	{r7, lr}
   17c9a:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   17c9c:	4b02      	ldr	r3, [pc, #8]	; (17ca8 <vTraceStart+0x10>)
   17c9e:	4798      	blx	r3
}
   17ca0:	46c0      	nop			; (mov r8, r8)
   17ca2:	46bd      	mov	sp, r7
   17ca4:	bd80      	pop	{r7, pc}
   17ca6:	46c0      	nop			; (mov r8, r8)
   17ca8:	00017b81 	.word	0x00017b81

00017cac <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   17cac:	b580      	push	{r7, lr}
   17cae:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   17cb0:	4b08      	ldr	r3, [pc, #32]	; (17cd4 <vTraceStop+0x28>)
   17cb2:	681b      	ldr	r3, [r3, #0]
   17cb4:	2b00      	cmp	r3, #0
   17cb6:	d003      	beq.n	17cc0 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   17cb8:	4b06      	ldr	r3, [pc, #24]	; (17cd4 <vTraceStop+0x28>)
   17cba:	681b      	ldr	r3, [r3, #0]
   17cbc:	2200      	movs	r2, #0
   17cbe:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   17cc0:	4b05      	ldr	r3, [pc, #20]	; (17cd8 <vTraceStop+0x2c>)
   17cc2:	681b      	ldr	r3, [r3, #0]
   17cc4:	2b00      	cmp	r3, #0
   17cc6:	d002      	beq.n	17cce <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   17cc8:	4b03      	ldr	r3, [pc, #12]	; (17cd8 <vTraceStop+0x2c>)
   17cca:	681b      	ldr	r3, [r3, #0]
   17ccc:	4798      	blx	r3
	}
}
   17cce:	46c0      	nop			; (mov r8, r8)
   17cd0:	46bd      	mov	sp, r7
   17cd2:	bd80      	pop	{r7, pc}
   17cd4:	20000c58 	.word	0x20000c58
   17cd8:	20000bc0 	.word	0x20000bc0

00017cdc <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   17cdc:	b580      	push	{r7, lr}
   17cde:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   17ce0:	4b05      	ldr	r3, [pc, #20]	; (17cf8 <xTraceIsRecordingEnabled+0x1c>)
   17ce2:	681b      	ldr	r3, [r3, #0]
   17ce4:	2b00      	cmp	r3, #0
   17ce6:	d003      	beq.n	17cf0 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   17ce8:	4b03      	ldr	r3, [pc, #12]	; (17cf8 <xTraceIsRecordingEnabled+0x1c>)
   17cea:	681b      	ldr	r3, [r3, #0]
   17cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17cee:	e000      	b.n	17cf2 <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   17cf0:	2300      	movs	r3, #0
	}
}
   17cf2:	0018      	movs	r0, r3
   17cf4:	46bd      	mov	sp, r7
   17cf6:	bd80      	pop	{r7, pc}
   17cf8:	20000c58 	.word	0x20000c58

00017cfc <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   17cfc:	b590      	push	{r4, r7, lr}
   17cfe:	b089      	sub	sp, #36	; 0x24
   17d00:	af00      	add	r7, sp, #0
   17d02:	0002      	movs	r2, r0
   17d04:	1dfb      	adds	r3, r7, #7
   17d06:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   17d08:	1dfb      	adds	r3, r7, #7
   17d0a:	781b      	ldrb	r3, [r3, #0]
   17d0c:	2b00      	cmp	r3, #0
   17d0e:	d057      	beq.n	17dc0 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   17d10:	4b2e      	ldr	r3, [pc, #184]	; (17dcc <prvTraceStoreTaskReady+0xd0>)
   17d12:	681b      	ldr	r3, [r3, #0]
   17d14:	2b00      	cmp	r3, #0
   17d16:	d055      	beq.n	17dc4 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   17d18:	1dfb      	adds	r3, r7, #7
   17d1a:	781b      	ldrb	r3, [r3, #0]
   17d1c:	2b0f      	cmp	r3, #15
   17d1e:	d904      	bls.n	17d2a <prvTraceStoreTaskReady+0x2e>
   17d20:	4b2b      	ldr	r3, [pc, #172]	; (17dd0 <prvTraceStoreTaskReady+0xd4>)
   17d22:	0018      	movs	r0, r3
   17d24:	4b2b      	ldr	r3, [pc, #172]	; (17dd4 <prvTraceStoreTaskReady+0xd8>)
   17d26:	4798      	blx	r3
   17d28:	e04d      	b.n	17dc6 <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   17d2a:	4b2b      	ldr	r3, [pc, #172]	; (17dd8 <prvTraceStoreTaskReady+0xdc>)
   17d2c:	681b      	ldr	r3, [r3, #0]
   17d2e:	2b00      	cmp	r3, #0
   17d30:	d004      	beq.n	17d3c <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   17d32:	4b2a      	ldr	r3, [pc, #168]	; (17ddc <prvTraceStoreTaskReady+0xe0>)
   17d34:	0018      	movs	r0, r3
   17d36:	4b27      	ldr	r3, [pc, #156]	; (17dd4 <prvTraceStoreTaskReady+0xd8>)
   17d38:	4798      	blx	r3
		return;
   17d3a:	e044      	b.n	17dc6 <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17d3c:	f3ef 8310 	mrs	r3, PRIMASK
   17d40:	60fb      	str	r3, [r7, #12]
  return(result);
   17d42:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   17d44:	61fb      	str	r3, [r7, #28]
   17d46:	2301      	movs	r3, #1
   17d48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17d4a:	693b      	ldr	r3, [r7, #16]
   17d4c:	f383 8810 	msr	PRIMASK, r3
   17d50:	4b21      	ldr	r3, [pc, #132]	; (17dd8 <prvTraceStoreTaskReady+0xdc>)
   17d52:	681b      	ldr	r3, [r3, #0]
   17d54:	1c5a      	adds	r2, r3, #1
   17d56:	4b20      	ldr	r3, [pc, #128]	; (17dd8 <prvTraceStoreTaskReady+0xdc>)
   17d58:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   17d5a:	4b21      	ldr	r3, [pc, #132]	; (17de0 <prvTraceStoreTaskReady+0xe4>)
   17d5c:	681b      	ldr	r3, [r3, #0]
   17d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17d60:	2b00      	cmp	r3, #0
   17d62:	d022      	beq.n	17daa <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   17d64:	231a      	movs	r3, #26
   17d66:	18fc      	adds	r4, r7, r3
   17d68:	4b1e      	ldr	r3, [pc, #120]	; (17de4 <prvTraceStoreTaskReady+0xe8>)
   17d6a:	0018      	movs	r0, r3
   17d6c:	4b1e      	ldr	r3, [pc, #120]	; (17de8 <prvTraceStoreTaskReady+0xec>)
   17d6e:	4798      	blx	r3
   17d70:	0003      	movs	r3, r0
   17d72:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   17d74:	2319      	movs	r3, #25
   17d76:	18fb      	adds	r3, r7, r3
   17d78:	1dfa      	adds	r2, r7, #7
   17d7a:	7812      	ldrb	r2, [r2, #0]
   17d7c:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   17d7e:	4b1b      	ldr	r3, [pc, #108]	; (17dec <prvTraceStoreTaskReady+0xf0>)
   17d80:	4798      	blx	r3
   17d82:	0003      	movs	r3, r0
   17d84:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   17d86:	697b      	ldr	r3, [r7, #20]
   17d88:	2b00      	cmp	r3, #0
   17d8a:	d00e      	beq.n	17daa <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   17d8c:	697b      	ldr	r3, [r7, #20]
   17d8e:	2202      	movs	r2, #2
   17d90:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   17d92:	697b      	ldr	r3, [r7, #20]
   17d94:	221a      	movs	r2, #26
   17d96:	18ba      	adds	r2, r7, r2
   17d98:	8812      	ldrh	r2, [r2, #0]
   17d9a:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   17d9c:	697b      	ldr	r3, [r7, #20]
   17d9e:	2219      	movs	r2, #25
   17da0:	18ba      	adds	r2, r7, r2
   17da2:	7812      	ldrb	r2, [r2, #0]
   17da4:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   17da6:	4b12      	ldr	r3, [pc, #72]	; (17df0 <prvTraceStoreTaskReady+0xf4>)
   17da8:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   17daa:	4b0b      	ldr	r3, [pc, #44]	; (17dd8 <prvTraceStoreTaskReady+0xdc>)
   17dac:	681b      	ldr	r3, [r3, #0]
   17dae:	1e5a      	subs	r2, r3, #1
   17db0:	4b09      	ldr	r3, [pc, #36]	; (17dd8 <prvTraceStoreTaskReady+0xdc>)
   17db2:	601a      	str	r2, [r3, #0]
   17db4:	69fb      	ldr	r3, [r7, #28]
   17db6:	60bb      	str	r3, [r7, #8]
   17db8:	68bb      	ldr	r3, [r7, #8]
   17dba:	f383 8810 	msr	PRIMASK, r3
   17dbe:	e002      	b.n	17dc6 <prvTraceStoreTaskReady+0xca>
		return;
   17dc0:	46c0      	nop			; (mov r8, r8)
   17dc2:	e000      	b.n	17dc6 <prvTraceStoreTaskReady+0xca>
		return;
   17dc4:	46c0      	nop			; (mov r8, r8)
}
   17dc6:	46bd      	mov	sp, r7
   17dc8:	b009      	add	sp, #36	; 0x24
   17dca:	bd90      	pop	{r4, r7, pc}
   17dcc:	200000f4 	.word	0x200000f4
   17dd0:	00036c50 	.word	0x00036c50
   17dd4:	00018de9 	.word	0x00018de9
   17dd8:	20000bb0 	.word	0x20000bb0
   17ddc:	00036c90 	.word	0x00036c90
   17de0:	20000c58 	.word	0x20000c58
   17de4:	0000ffff 	.word	0x0000ffff
   17de8:	00018ffd 	.word	0x00018ffd
   17dec:	000189a1 	.word	0x000189a1
   17df0:	00018fa5 	.word	0x00018fa5

00017df4 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   17df4:	b580      	push	{r7, lr}
   17df6:	b08e      	sub	sp, #56	; 0x38
   17df8:	af00      	add	r7, sp, #0
   17dfa:	60f8      	str	r0, [r7, #12]
   17dfc:	60b9      	str	r1, [r7, #8]
   17dfe:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   17e00:	4b48      	ldr	r3, [pc, #288]	; (17f24 <vTraceStoreMemMangEvent+0x130>)
   17e02:	681b      	ldr	r3, [r3, #0]
   17e04:	2b00      	cmp	r3, #0
   17e06:	d100      	bne.n	17e0a <vTraceStoreMemMangEvent+0x16>
   17e08:	e088      	b.n	17f1c <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   17e0a:	687b      	ldr	r3, [r7, #4]
   17e0c:	2b00      	cmp	r3, #0
   17e0e:	da03      	bge.n	17e18 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   17e10:	687b      	ldr	r3, [r7, #4]
   17e12:	425b      	negs	r3, r3
   17e14:	637b      	str	r3, [r7, #52]	; 0x34
   17e16:	e001      	b.n	17e1c <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   17e18:	687b      	ldr	r3, [r7, #4]
   17e1a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17e1c:	f3ef 8310 	mrs	r3, PRIMASK
   17e20:	61bb      	str	r3, [r7, #24]
  return(result);
   17e22:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   17e24:	633b      	str	r3, [r7, #48]	; 0x30
   17e26:	2301      	movs	r3, #1
   17e28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17e2a:	69fb      	ldr	r3, [r7, #28]
   17e2c:	f383 8810 	msr	PRIMASK, r3
   17e30:	4b3d      	ldr	r3, [pc, #244]	; (17f28 <vTraceStoreMemMangEvent+0x134>)
   17e32:	681b      	ldr	r3, [r3, #0]
   17e34:	1c5a      	adds	r2, r3, #1
   17e36:	4b3c      	ldr	r3, [pc, #240]	; (17f28 <vTraceStoreMemMangEvent+0x134>)
   17e38:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   17e3a:	68bb      	ldr	r3, [r7, #8]
   17e3c:	2b00      	cmp	r3, #0
   17e3e:	d005      	beq.n	17e4c <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   17e40:	4b3a      	ldr	r3, [pc, #232]	; (17f2c <vTraceStoreMemMangEvent+0x138>)
   17e42:	681a      	ldr	r2, [r3, #0]
   17e44:	687b      	ldr	r3, [r7, #4]
   17e46:	18d2      	adds	r2, r2, r3
   17e48:	4b38      	ldr	r3, [pc, #224]	; (17f2c <vTraceStoreMemMangEvent+0x138>)
   17e4a:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   17e4c:	4b35      	ldr	r3, [pc, #212]	; (17f24 <vTraceStoreMemMangEvent+0x130>)
   17e4e:	681b      	ldr	r3, [r3, #0]
   17e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17e52:	2b00      	cmp	r3, #0
   17e54:	d057      	beq.n	17f06 <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   17e56:	20ff      	movs	r0, #255	; 0xff
   17e58:	4b35      	ldr	r3, [pc, #212]	; (17f30 <vTraceStoreMemMangEvent+0x13c>)
   17e5a:	4798      	blx	r3
   17e5c:	0003      	movs	r3, r0
   17e5e:	001a      	movs	r2, r3
   17e60:	232f      	movs	r3, #47	; 0x2f
   17e62:	18fb      	adds	r3, r7, r3
   17e64:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   17e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17e68:	4a32      	ldr	r2, [pc, #200]	; (17f34 <vTraceStoreMemMangEvent+0x140>)
   17e6a:	0019      	movs	r1, r3
   17e6c:	0010      	movs	r0, r2
   17e6e:	4b32      	ldr	r3, [pc, #200]	; (17f38 <vTraceStoreMemMangEvent+0x144>)
   17e70:	4798      	blx	r3
   17e72:	0002      	movs	r2, r0
   17e74:	232c      	movs	r3, #44	; 0x2c
   17e76:	18fb      	adds	r3, r7, r3
   17e78:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   17e7a:	4b30      	ldr	r3, [pc, #192]	; (17f3c <vTraceStoreMemMangEvent+0x148>)
   17e7c:	4798      	blx	r3
   17e7e:	0003      	movs	r3, r0
   17e80:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   17e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17e84:	2b00      	cmp	r3, #0
   17e86:	d03e      	beq.n	17f06 <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   17e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17e8a:	222f      	movs	r2, #47	; 0x2f
   17e8c:	18ba      	adds	r2, r7, r2
   17e8e:	7812      	ldrb	r2, [r2, #0]
   17e90:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   17e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17e94:	2200      	movs	r2, #0
   17e96:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   17e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17e9a:	222c      	movs	r2, #44	; 0x2c
   17e9c:	18ba      	adds	r2, r7, r2
   17e9e:	8812      	ldrh	r2, [r2, #0]
   17ea0:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   17ea2:	4b27      	ldr	r3, [pc, #156]	; (17f40 <vTraceStoreMemMangEvent+0x14c>)
   17ea4:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   17ea6:	68bb      	ldr	r3, [r7, #8]
   17ea8:	4a22      	ldr	r2, [pc, #136]	; (17f34 <vTraceStoreMemMangEvent+0x140>)
   17eaa:	0019      	movs	r1, r3
   17eac:	0010      	movs	r0, r2
   17eae:	4b22      	ldr	r3, [pc, #136]	; (17f38 <vTraceStoreMemMangEvent+0x144>)
   17eb0:	4798      	blx	r3
   17eb2:	0002      	movs	r2, r0
   17eb4:	2326      	movs	r3, #38	; 0x26
   17eb6:	18fb      	adds	r3, r7, r3
   17eb8:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   17eba:	2325      	movs	r3, #37	; 0x25
   17ebc:	18fb      	adds	r3, r7, r3
   17ebe:	2200      	movs	r2, #0
   17ec0:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   17ec2:	4b1e      	ldr	r3, [pc, #120]	; (17f3c <vTraceStoreMemMangEvent+0x148>)
   17ec4:	4798      	blx	r3
   17ec6:	0003      	movs	r3, r0
   17ec8:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   17eca:	6a3b      	ldr	r3, [r7, #32]
   17ecc:	2b00      	cmp	r3, #0
   17ece:	d01a      	beq.n	17f06 <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   17ed0:	6a3b      	ldr	r3, [r7, #32]
   17ed2:	2226      	movs	r2, #38	; 0x26
   17ed4:	18ba      	adds	r2, r7, r2
   17ed6:	8812      	ldrh	r2, [r2, #0]
   17ed8:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   17eda:	6a3b      	ldr	r3, [r7, #32]
   17edc:	2225      	movs	r2, #37	; 0x25
   17ede:	18ba      	adds	r2, r7, r2
   17ee0:	7812      	ldrb	r2, [r2, #0]
   17ee2:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   17ee4:	68fb      	ldr	r3, [r7, #12]
   17ee6:	b2db      	uxtb	r3, r3
   17ee8:	3301      	adds	r3, #1
   17eea:	b2da      	uxtb	r2, r3
   17eec:	6a3b      	ldr	r3, [r7, #32]
   17eee:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   17ef0:	68fb      	ldr	r3, [r7, #12]
   17ef2:	b2da      	uxtb	r2, r3
   17ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17ef6:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   17ef8:	4b11      	ldr	r3, [pc, #68]	; (17f40 <vTraceStoreMemMangEvent+0x14c>)
   17efa:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   17efc:	4b09      	ldr	r3, [pc, #36]	; (17f24 <vTraceStoreMemMangEvent+0x130>)
   17efe:	681b      	ldr	r3, [r3, #0]
   17f00:	4a0a      	ldr	r2, [pc, #40]	; (17f2c <vTraceStoreMemMangEvent+0x138>)
   17f02:	6812      	ldr	r2, [r2, #0]
   17f04:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   17f06:	4b08      	ldr	r3, [pc, #32]	; (17f28 <vTraceStoreMemMangEvent+0x134>)
   17f08:	681b      	ldr	r3, [r3, #0]
   17f0a:	1e5a      	subs	r2, r3, #1
   17f0c:	4b06      	ldr	r3, [pc, #24]	; (17f28 <vTraceStoreMemMangEvent+0x134>)
   17f0e:	601a      	str	r2, [r3, #0]
   17f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17f12:	617b      	str	r3, [r7, #20]
   17f14:	697b      	ldr	r3, [r7, #20]
   17f16:	f383 8810 	msr	PRIMASK, r3
   17f1a:	e000      	b.n	17f1e <vTraceStoreMemMangEvent+0x12a>
		return;
   17f1c:	46c0      	nop			; (mov r8, r8)
}
   17f1e:	46bd      	mov	sp, r7
   17f20:	b00e      	add	sp, #56	; 0x38
   17f22:	bd80      	pop	{r7, pc}
   17f24:	20000c58 	.word	0x20000c58
   17f28:	20000bb0 	.word	0x20000bb0
   17f2c:	20000bc4 	.word	0x20000bc4
   17f30:	00018ffd 	.word	0x00018ffd
   17f34:	0000ffff 	.word	0x0000ffff
   17f38:	000181c1 	.word	0x000181c1
   17f3c:	000189a1 	.word	0x000189a1
   17f40:	00018fa5 	.word	0x00018fa5

00017f44 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   17f44:	b590      	push	{r4, r7, lr}
   17f46:	b08b      	sub	sp, #44	; 0x2c
   17f48:	af00      	add	r7, sp, #0
   17f4a:	60f8      	str	r0, [r7, #12]
   17f4c:	607a      	str	r2, [r7, #4]
   17f4e:	230b      	movs	r3, #11
   17f50:	18fb      	adds	r3, r7, r3
   17f52:	1c0a      	adds	r2, r1, #0
   17f54:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   17f56:	68fb      	ldr	r3, [r7, #12]
   17f58:	2bfe      	cmp	r3, #254	; 0xfe
   17f5a:	d904      	bls.n	17f66 <prvTraceStoreKernelCall+0x22>
   17f5c:	4b39      	ldr	r3, [pc, #228]	; (18044 <prvTraceStoreKernelCall+0x100>)
   17f5e:	0018      	movs	r0, r3
   17f60:	4b39      	ldr	r3, [pc, #228]	; (18048 <prvTraceStoreKernelCall+0x104>)
   17f62:	4798      	blx	r3
   17f64:	e06b      	b.n	1803e <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   17f66:	230b      	movs	r3, #11
   17f68:	18fb      	adds	r3, r7, r3
   17f6a:	781b      	ldrb	r3, [r3, #0]
   17f6c:	2b08      	cmp	r3, #8
   17f6e:	d904      	bls.n	17f7a <prvTraceStoreKernelCall+0x36>
   17f70:	4b36      	ldr	r3, [pc, #216]	; (1804c <prvTraceStoreKernelCall+0x108>)
   17f72:	0018      	movs	r0, r3
   17f74:	4b34      	ldr	r3, [pc, #208]	; (18048 <prvTraceStoreKernelCall+0x104>)
   17f76:	4798      	blx	r3
   17f78:	e061      	b.n	1803e <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   17f7a:	4b35      	ldr	r3, [pc, #212]	; (18050 <prvTraceStoreKernelCall+0x10c>)
   17f7c:	681a      	ldr	r2, [r3, #0]
   17f7e:	230b      	movs	r3, #11
   17f80:	18fb      	adds	r3, r7, r3
   17f82:	781b      	ldrb	r3, [r3, #0]
   17f84:	2164      	movs	r1, #100	; 0x64
   17f86:	18d3      	adds	r3, r2, r3
   17f88:	185b      	adds	r3, r3, r1
   17f8a:	781b      	ldrb	r3, [r3, #0]
   17f8c:	001a      	movs	r2, r3
   17f8e:	687b      	ldr	r3, [r7, #4]
   17f90:	429a      	cmp	r2, r3
   17f92:	d204      	bcs.n	17f9e <prvTraceStoreKernelCall+0x5a>
   17f94:	4b2f      	ldr	r3, [pc, #188]	; (18054 <prvTraceStoreKernelCall+0x110>)
   17f96:	0018      	movs	r0, r3
   17f98:	4b2b      	ldr	r3, [pc, #172]	; (18048 <prvTraceStoreKernelCall+0x104>)
   17f9a:	4798      	blx	r3
   17f9c:	e04f      	b.n	1803e <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   17f9e:	4b2e      	ldr	r3, [pc, #184]	; (18058 <prvTraceStoreKernelCall+0x114>)
   17fa0:	681b      	ldr	r3, [r3, #0]
   17fa2:	2b00      	cmp	r3, #0
   17fa4:	d004      	beq.n	17fb0 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   17fa6:	4b2d      	ldr	r3, [pc, #180]	; (1805c <prvTraceStoreKernelCall+0x118>)
   17fa8:	0018      	movs	r0, r3
   17faa:	4b27      	ldr	r3, [pc, #156]	; (18048 <prvTraceStoreKernelCall+0x104>)
   17fac:	4798      	blx	r3
		return;
   17fae:	e046      	b.n	1803e <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   17fb0:	4b2b      	ldr	r3, [pc, #172]	; (18060 <prvTraceStoreKernelCall+0x11c>)
   17fb2:	781b      	ldrb	r3, [r3, #0]
   17fb4:	2b00      	cmp	r3, #0
   17fb6:	d041      	beq.n	1803c <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17fb8:	f3ef 8310 	mrs	r3, PRIMASK
   17fbc:	617b      	str	r3, [r7, #20]
  return(result);
   17fbe:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   17fc0:	627b      	str	r3, [r7, #36]	; 0x24
   17fc2:	2301      	movs	r3, #1
   17fc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17fc6:	69bb      	ldr	r3, [r7, #24]
   17fc8:	f383 8810 	msr	PRIMASK, r3
   17fcc:	4b22      	ldr	r3, [pc, #136]	; (18058 <prvTraceStoreKernelCall+0x114>)
   17fce:	681b      	ldr	r3, [r3, #0]
   17fd0:	1c5a      	adds	r2, r3, #1
   17fd2:	4b21      	ldr	r3, [pc, #132]	; (18058 <prvTraceStoreKernelCall+0x114>)
   17fd4:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   17fd6:	4b1e      	ldr	r3, [pc, #120]	; (18050 <prvTraceStoreKernelCall+0x10c>)
   17fd8:	681b      	ldr	r3, [r3, #0]
   17fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17fdc:	2b00      	cmp	r3, #0
   17fde:	d022      	beq.n	18026 <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   17fe0:	2322      	movs	r3, #34	; 0x22
   17fe2:	18fc      	adds	r4, r7, r3
   17fe4:	4b1f      	ldr	r3, [pc, #124]	; (18064 <prvTraceStoreKernelCall+0x120>)
   17fe6:	0018      	movs	r0, r3
   17fe8:	4b1f      	ldr	r3, [pc, #124]	; (18068 <prvTraceStoreKernelCall+0x124>)
   17fea:	4798      	blx	r3
   17fec:	0003      	movs	r3, r0
   17fee:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   17ff0:	2321      	movs	r3, #33	; 0x21
   17ff2:	18fb      	adds	r3, r7, r3
   17ff4:	687a      	ldr	r2, [r7, #4]
   17ff6:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   17ff8:	4b1c      	ldr	r3, [pc, #112]	; (1806c <prvTraceStoreKernelCall+0x128>)
   17ffa:	4798      	blx	r3
   17ffc:	0003      	movs	r3, r0
   17ffe:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   18000:	69fb      	ldr	r3, [r7, #28]
   18002:	2b00      	cmp	r3, #0
   18004:	d00f      	beq.n	18026 <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   18006:	69fb      	ldr	r3, [r7, #28]
   18008:	2222      	movs	r2, #34	; 0x22
   1800a:	18ba      	adds	r2, r7, r2
   1800c:	8812      	ldrh	r2, [r2, #0]
   1800e:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   18010:	68fb      	ldr	r3, [r7, #12]
   18012:	b2da      	uxtb	r2, r3
   18014:	69fb      	ldr	r3, [r7, #28]
   18016:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   18018:	69fb      	ldr	r3, [r7, #28]
   1801a:	2221      	movs	r2, #33	; 0x21
   1801c:	18ba      	adds	r2, r7, r2
   1801e:	7812      	ldrb	r2, [r2, #0]
   18020:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   18022:	4b13      	ldr	r3, [pc, #76]	; (18070 <prvTraceStoreKernelCall+0x12c>)
   18024:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18026:	4b0c      	ldr	r3, [pc, #48]	; (18058 <prvTraceStoreKernelCall+0x114>)
   18028:	681b      	ldr	r3, [r3, #0]
   1802a:	1e5a      	subs	r2, r3, #1
   1802c:	4b0a      	ldr	r3, [pc, #40]	; (18058 <prvTraceStoreKernelCall+0x114>)
   1802e:	601a      	str	r2, [r3, #0]
   18030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18032:	613b      	str	r3, [r7, #16]
   18034:	693b      	ldr	r3, [r7, #16]
   18036:	f383 8810 	msr	PRIMASK, r3
   1803a:	e000      	b.n	1803e <prvTraceStoreKernelCall+0xfa>
		return;
   1803c:	46c0      	nop			; (mov r8, r8)
}
   1803e:	46bd      	mov	sp, r7
   18040:	b00b      	add	sp, #44	; 0x2c
   18042:	bd90      	pop	{r4, r7, pc}
   18044:	00036d00 	.word	0x00036d00
   18048:	00018de9 	.word	0x00018de9
   1804c:	00036d38 	.word	0x00036d38
   18050:	20000c58 	.word	0x20000c58
   18054:	00036d80 	.word	0x00036d80
   18058:	20000bb0 	.word	0x20000bb0
   1805c:	00036dc8 	.word	0x00036dc8
   18060:	20000bbc 	.word	0x20000bbc
   18064:	0000ffff 	.word	0x0000ffff
   18068:	00018ffd 	.word	0x00018ffd
   1806c:	000189a1 	.word	0x000189a1
   18070:	00018fa5 	.word	0x00018fa5

00018074 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   18074:	b580      	push	{r7, lr}
   18076:	b08a      	sub	sp, #40	; 0x28
   18078:	af00      	add	r7, sp, #0
   1807a:	60f8      	str	r0, [r7, #12]
   1807c:	607a      	str	r2, [r7, #4]
   1807e:	603b      	str	r3, [r7, #0]
   18080:	230b      	movs	r3, #11
   18082:	18fb      	adds	r3, r7, r3
   18084:	1c0a      	adds	r2, r1, #0
   18086:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   18088:	68fb      	ldr	r3, [r7, #12]
   1808a:	2bfe      	cmp	r3, #254	; 0xfe
   1808c:	d904      	bls.n	18098 <prvTraceStoreKernelCallWithParam+0x24>
   1808e:	4b40      	ldr	r3, [pc, #256]	; (18190 <prvTraceStoreKernelCallWithParam+0x11c>)
   18090:	0018      	movs	r0, r3
   18092:	4b40      	ldr	r3, [pc, #256]	; (18194 <prvTraceStoreKernelCallWithParam+0x120>)
   18094:	4798      	blx	r3
   18096:	e077      	b.n	18188 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   18098:	230b      	movs	r3, #11
   1809a:	18fb      	adds	r3, r7, r3
   1809c:	781b      	ldrb	r3, [r3, #0]
   1809e:	2b08      	cmp	r3, #8
   180a0:	d904      	bls.n	180ac <prvTraceStoreKernelCallWithParam+0x38>
   180a2:	4b3d      	ldr	r3, [pc, #244]	; (18198 <prvTraceStoreKernelCallWithParam+0x124>)
   180a4:	0018      	movs	r0, r3
   180a6:	4b3b      	ldr	r3, [pc, #236]	; (18194 <prvTraceStoreKernelCallWithParam+0x120>)
   180a8:	4798      	blx	r3
   180aa:	e06d      	b.n	18188 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   180ac:	4b3b      	ldr	r3, [pc, #236]	; (1819c <prvTraceStoreKernelCallWithParam+0x128>)
   180ae:	681a      	ldr	r2, [r3, #0]
   180b0:	230b      	movs	r3, #11
   180b2:	18fb      	adds	r3, r7, r3
   180b4:	781b      	ldrb	r3, [r3, #0]
   180b6:	2164      	movs	r1, #100	; 0x64
   180b8:	18d3      	adds	r3, r2, r3
   180ba:	185b      	adds	r3, r3, r1
   180bc:	781b      	ldrb	r3, [r3, #0]
   180be:	001a      	movs	r2, r3
   180c0:	687b      	ldr	r3, [r7, #4]
   180c2:	429a      	cmp	r2, r3
   180c4:	d204      	bcs.n	180d0 <prvTraceStoreKernelCallWithParam+0x5c>
   180c6:	4b36      	ldr	r3, [pc, #216]	; (181a0 <prvTraceStoreKernelCallWithParam+0x12c>)
   180c8:	0018      	movs	r0, r3
   180ca:	4b32      	ldr	r3, [pc, #200]	; (18194 <prvTraceStoreKernelCallWithParam+0x120>)
   180cc:	4798      	blx	r3
   180ce:	e05b      	b.n	18188 <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   180d0:	4b34      	ldr	r3, [pc, #208]	; (181a4 <prvTraceStoreKernelCallWithParam+0x130>)
   180d2:	681b      	ldr	r3, [r3, #0]
   180d4:	2b00      	cmp	r3, #0
   180d6:	d004      	beq.n	180e2 <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   180d8:	4b33      	ldr	r3, [pc, #204]	; (181a8 <prvTraceStoreKernelCallWithParam+0x134>)
   180da:	0018      	movs	r0, r3
   180dc:	4b2d      	ldr	r3, [pc, #180]	; (18194 <prvTraceStoreKernelCallWithParam+0x120>)
   180de:	4798      	blx	r3
		return;
   180e0:	e052      	b.n	18188 <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   180e2:	f3ef 8310 	mrs	r3, PRIMASK
   180e6:	617b      	str	r3, [r7, #20]
  return(result);
   180e8:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   180ea:	627b      	str	r3, [r7, #36]	; 0x24
   180ec:	2301      	movs	r3, #1
   180ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   180f0:	69bb      	ldr	r3, [r7, #24]
   180f2:	f383 8810 	msr	PRIMASK, r3
   180f6:	4b2b      	ldr	r3, [pc, #172]	; (181a4 <prvTraceStoreKernelCallWithParam+0x130>)
   180f8:	681b      	ldr	r3, [r3, #0]
   180fa:	1c5a      	adds	r2, r3, #1
   180fc:	4b29      	ldr	r3, [pc, #164]	; (181a4 <prvTraceStoreKernelCallWithParam+0x130>)
   180fe:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   18100:	4b26      	ldr	r3, [pc, #152]	; (1819c <prvTraceStoreKernelCallWithParam+0x128>)
   18102:	681b      	ldr	r3, [r3, #0]
   18104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18106:	2b00      	cmp	r3, #0
   18108:	d034      	beq.n	18174 <prvTraceStoreKernelCallWithParam+0x100>
   1810a:	4b28      	ldr	r3, [pc, #160]	; (181ac <prvTraceStoreKernelCallWithParam+0x138>)
   1810c:	781b      	ldrb	r3, [r3, #0]
   1810e:	2b00      	cmp	r3, #0
   18110:	d030      	beq.n	18174 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   18112:	20ff      	movs	r0, #255	; 0xff
   18114:	4b26      	ldr	r3, [pc, #152]	; (181b0 <prvTraceStoreKernelCallWithParam+0x13c>)
   18116:	4798      	blx	r3
   18118:	0003      	movs	r3, r0
   1811a:	001a      	movs	r2, r3
   1811c:	2323      	movs	r3, #35	; 0x23
   1811e:	18fb      	adds	r3, r7, r3
   18120:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   18122:	683b      	ldr	r3, [r7, #0]
   18124:	0019      	movs	r1, r3
   18126:	20ff      	movs	r0, #255	; 0xff
   18128:	4b22      	ldr	r3, [pc, #136]	; (181b4 <prvTraceStoreKernelCallWithParam+0x140>)
   1812a:	4798      	blx	r3
   1812c:	0002      	movs	r2, r0
   1812e:	2322      	movs	r3, #34	; 0x22
   18130:	18fb      	adds	r3, r7, r3
   18132:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   18134:	2321      	movs	r3, #33	; 0x21
   18136:	18fb      	adds	r3, r7, r3
   18138:	687a      	ldr	r2, [r7, #4]
   1813a:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   1813c:	4b1e      	ldr	r3, [pc, #120]	; (181b8 <prvTraceStoreKernelCallWithParam+0x144>)
   1813e:	4798      	blx	r3
   18140:	0003      	movs	r3, r0
   18142:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   18144:	69fb      	ldr	r3, [r7, #28]
   18146:	2b00      	cmp	r3, #0
   18148:	d014      	beq.n	18174 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   1814a:	69fb      	ldr	r3, [r7, #28]
   1814c:	2223      	movs	r2, #35	; 0x23
   1814e:	18ba      	adds	r2, r7, r2
   18150:	7812      	ldrb	r2, [r2, #0]
   18152:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   18154:	68fb      	ldr	r3, [r7, #12]
   18156:	b2da      	uxtb	r2, r3
   18158:	69fb      	ldr	r3, [r7, #28]
   1815a:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   1815c:	69fb      	ldr	r3, [r7, #28]
   1815e:	2221      	movs	r2, #33	; 0x21
   18160:	18ba      	adds	r2, r7, r2
   18162:	7812      	ldrb	r2, [r2, #0]
   18164:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   18166:	69fb      	ldr	r3, [r7, #28]
   18168:	2222      	movs	r2, #34	; 0x22
   1816a:	18ba      	adds	r2, r7, r2
   1816c:	7812      	ldrb	r2, [r2, #0]
   1816e:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   18170:	4b12      	ldr	r3, [pc, #72]	; (181bc <prvTraceStoreKernelCallWithParam+0x148>)
   18172:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18174:	4b0b      	ldr	r3, [pc, #44]	; (181a4 <prvTraceStoreKernelCallWithParam+0x130>)
   18176:	681b      	ldr	r3, [r3, #0]
   18178:	1e5a      	subs	r2, r3, #1
   1817a:	4b0a      	ldr	r3, [pc, #40]	; (181a4 <prvTraceStoreKernelCallWithParam+0x130>)
   1817c:	601a      	str	r2, [r3, #0]
   1817e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18180:	613b      	str	r3, [r7, #16]
   18182:	693b      	ldr	r3, [r7, #16]
   18184:	f383 8810 	msr	PRIMASK, r3
}
   18188:	46bd      	mov	sp, r7
   1818a:	b00a      	add	sp, #40	; 0x28
   1818c:	bd80      	pop	{r7, pc}
   1818e:	46c0      	nop			; (mov r8, r8)
   18190:	00036e00 	.word	0x00036e00
   18194:	00018de9 	.word	0x00018de9
   18198:	00036e40 	.word	0x00036e40
   1819c:	20000c58 	.word	0x20000c58
   181a0:	00036e90 	.word	0x00036e90
   181a4:	20000bb0 	.word	0x20000bb0
   181a8:	00036ee0 	.word	0x00036ee0
   181ac:	20000bbc 	.word	0x20000bbc
   181b0:	00018ffd 	.word	0x00018ffd
   181b4:	000181c1 	.word	0x000181c1
   181b8:	000189a1 	.word	0x000189a1
   181bc:	00018fa5 	.word	0x00018fa5

000181c0 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   181c0:	b580      	push	{r7, lr}
   181c2:	b084      	sub	sp, #16
   181c4:	af00      	add	r7, sp, #0
   181c6:	6078      	str	r0, [r7, #4]
   181c8:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   181ca:	687b      	ldr	r3, [r7, #4]
   181cc:	2bff      	cmp	r3, #255	; 0xff
   181ce:	d009      	beq.n	181e4 <prvTraceGetParam+0x24>
   181d0:	687b      	ldr	r3, [r7, #4]
   181d2:	4a19      	ldr	r2, [pc, #100]	; (18238 <prvTraceGetParam+0x78>)
   181d4:	4293      	cmp	r3, r2
   181d6:	d005      	beq.n	181e4 <prvTraceGetParam+0x24>
   181d8:	4b18      	ldr	r3, [pc, #96]	; (1823c <prvTraceGetParam+0x7c>)
   181da:	0018      	movs	r0, r3
   181dc:	4b18      	ldr	r3, [pc, #96]	; (18240 <prvTraceGetParam+0x80>)
   181de:	4798      	blx	r3
   181e0:	683b      	ldr	r3, [r7, #0]
   181e2:	e024      	b.n	1822e <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   181e4:	683a      	ldr	r2, [r7, #0]
   181e6:	687b      	ldr	r3, [r7, #4]
   181e8:	429a      	cmp	r2, r3
   181ea:	d801      	bhi.n	181f0 <prvTraceGetParam+0x30>
	{
		return param;
   181ec:	683b      	ldr	r3, [r7, #0]
   181ee:	e01e      	b.n	1822e <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   181f0:	4b14      	ldr	r3, [pc, #80]	; (18244 <prvTraceGetParam+0x84>)
   181f2:	4798      	blx	r3
   181f4:	0003      	movs	r3, r0
   181f6:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   181f8:	68fb      	ldr	r3, [r7, #12]
   181fa:	2b00      	cmp	r3, #0
   181fc:	d014      	beq.n	18228 <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   181fe:	68fb      	ldr	r3, [r7, #12]
   18200:	2201      	movs	r2, #1
   18202:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   18204:	687b      	ldr	r3, [r7, #4]
   18206:	43db      	mvns	r3, r3
   18208:	683a      	ldr	r2, [r7, #0]
   1820a:	4013      	ands	r3, r2
   1820c:	0a1b      	lsrs	r3, r3, #8
   1820e:	b2da      	uxtb	r2, r3
   18210:	68fb      	ldr	r3, [r7, #12]
   18212:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   18214:	687b      	ldr	r3, [r7, #4]
   18216:	43db      	mvns	r3, r3
   18218:	683a      	ldr	r2, [r7, #0]
   1821a:	4013      	ands	r3, r2
   1821c:	0c1b      	lsrs	r3, r3, #16
   1821e:	b29a      	uxth	r2, r3
   18220:	68fb      	ldr	r3, [r7, #12]
   18222:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   18224:	4b08      	ldr	r3, [pc, #32]	; (18248 <prvTraceGetParam+0x88>)
   18226:	4798      	blx	r3
		}

		return param & param_max;
   18228:	683b      	ldr	r3, [r7, #0]
   1822a:	687a      	ldr	r2, [r7, #4]
   1822c:	4013      	ands	r3, r2
	}
}
   1822e:	0018      	movs	r0, r3
   18230:	46bd      	mov	sp, r7
   18232:	b004      	add	sp, #16
   18234:	bd80      	pop	{r7, pc}
   18236:	46c0      	nop			; (mov r8, r8)
   18238:	0000ffff 	.word	0x0000ffff
   1823c:	00036f18 	.word	0x00036f18
   18240:	00018de9 	.word	0x00018de9
   18244:	000189a1 	.word	0x000189a1
   18248:	00018fa5 	.word	0x00018fa5

0001824c <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   1824c:	b580      	push	{r7, lr}
   1824e:	b08a      	sub	sp, #40	; 0x28
   18250:	af00      	add	r7, sp, #0
   18252:	6078      	str	r0, [r7, #4]
   18254:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   18256:	2326      	movs	r3, #38	; 0x26
   18258:	18fb      	adds	r3, r7, r3
   1825a:	2200      	movs	r2, #0
   1825c:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   1825e:	687b      	ldr	r3, [r7, #4]
   18260:	2bfe      	cmp	r3, #254	; 0xfe
   18262:	d904      	bls.n	1826e <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   18264:	4b2d      	ldr	r3, [pc, #180]	; (1831c <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   18266:	0018      	movs	r0, r3
   18268:	4b2d      	ldr	r3, [pc, #180]	; (18320 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   1826a:	4798      	blx	r3
   1826c:	e053      	b.n	18316 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   1826e:	4b2d      	ldr	r3, [pc, #180]	; (18324 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18270:	681b      	ldr	r3, [r3, #0]
   18272:	2b00      	cmp	r3, #0
   18274:	d004      	beq.n	18280 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   18276:	4b2c      	ldr	r3, [pc, #176]	; (18328 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   18278:	0018      	movs	r0, r3
   1827a:	4b29      	ldr	r3, [pc, #164]	; (18320 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   1827c:	4798      	blx	r3
		return;
   1827e:	e04a      	b.n	18316 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18280:	f3ef 8310 	mrs	r3, PRIMASK
   18284:	613b      	str	r3, [r7, #16]
  return(result);
   18286:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   18288:	623b      	str	r3, [r7, #32]
   1828a:	2301      	movs	r3, #1
   1828c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1828e:	697b      	ldr	r3, [r7, #20]
   18290:	f383 8810 	msr	PRIMASK, r3
   18294:	4b23      	ldr	r3, [pc, #140]	; (18324 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18296:	681b      	ldr	r3, [r3, #0]
   18298:	1c5a      	adds	r2, r3, #1
   1829a:	4b22      	ldr	r3, [pc, #136]	; (18324 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1829c:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   1829e:	4b23      	ldr	r3, [pc, #140]	; (1832c <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   182a0:	681b      	ldr	r3, [r3, #0]
   182a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   182a4:	2b00      	cmp	r3, #0
   182a6:	d02c      	beq.n	18302 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   182a8:	4b21      	ldr	r3, [pc, #132]	; (18330 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   182aa:	781b      	ldrb	r3, [r3, #0]
   182ac:	2b00      	cmp	r3, #0
   182ae:	d028      	beq.n	18302 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   182b0:	20ff      	movs	r0, #255	; 0xff
   182b2:	4b20      	ldr	r3, [pc, #128]	; (18334 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   182b4:	4798      	blx	r3
   182b6:	0003      	movs	r3, r0
   182b8:	001a      	movs	r2, r3
   182ba:	231f      	movs	r3, #31
   182bc:	18fb      	adds	r3, r7, r3
   182be:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   182c0:	683b      	ldr	r3, [r7, #0]
   182c2:	4a1d      	ldr	r2, [pc, #116]	; (18338 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   182c4:	0019      	movs	r1, r3
   182c6:	0010      	movs	r0, r2
   182c8:	4b1c      	ldr	r3, [pc, #112]	; (1833c <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   182ca:	4798      	blx	r3
   182cc:	0002      	movs	r2, r0
   182ce:	2326      	movs	r3, #38	; 0x26
   182d0:	18fb      	adds	r3, r7, r3
   182d2:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   182d4:	4b1a      	ldr	r3, [pc, #104]	; (18340 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   182d6:	4798      	blx	r3
   182d8:	0003      	movs	r3, r0
   182da:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   182dc:	69bb      	ldr	r3, [r7, #24]
   182de:	2b00      	cmp	r3, #0
   182e0:	d00f      	beq.n	18302 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   182e2:	69bb      	ldr	r3, [r7, #24]
   182e4:	221f      	movs	r2, #31
   182e6:	18ba      	adds	r2, r7, r2
   182e8:	7812      	ldrb	r2, [r2, #0]
   182ea:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   182ec:	687b      	ldr	r3, [r7, #4]
   182ee:	b2da      	uxtb	r2, r3
   182f0:	69bb      	ldr	r3, [r7, #24]
   182f2:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   182f4:	69bb      	ldr	r3, [r7, #24]
   182f6:	2226      	movs	r2, #38	; 0x26
   182f8:	18ba      	adds	r2, r7, r2
   182fa:	8812      	ldrh	r2, [r2, #0]
   182fc:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   182fe:	4b11      	ldr	r3, [pc, #68]	; (18344 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   18300:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18302:	4b08      	ldr	r3, [pc, #32]	; (18324 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18304:	681b      	ldr	r3, [r3, #0]
   18306:	1e5a      	subs	r2, r3, #1
   18308:	4b06      	ldr	r3, [pc, #24]	; (18324 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1830a:	601a      	str	r2, [r3, #0]
   1830c:	6a3b      	ldr	r3, [r7, #32]
   1830e:	60fb      	str	r3, [r7, #12]
   18310:	68fb      	ldr	r3, [r7, #12]
   18312:	f383 8810 	msr	PRIMASK, r3
}
   18316:	46bd      	mov	sp, r7
   18318:	b00a      	add	sp, #40	; 0x28
   1831a:	bd80      	pop	{r7, pc}
   1831c:	00036f54 	.word	0x00036f54
   18320:	00018de9 	.word	0x00018de9
   18324:	20000bb0 	.word	0x20000bb0
   18328:	00036fac 	.word	0x00036fac
   1832c:	20000c58 	.word	0x20000c58
   18330:	20000bbc 	.word	0x20000bbc
   18334:	00018ffd 	.word	0x00018ffd
   18338:	0000ffff 	.word	0x0000ffff
   1833c:	000181c1 	.word	0x000181c1
   18340:	000189a1 	.word	0x000189a1
   18344:	00018fa5 	.word	0x00018fa5

00018348 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   18348:	b590      	push	{r4, r7, lr}
   1834a:	b089      	sub	sp, #36	; 0x24
   1834c:	af00      	add	r7, sp, #0
   1834e:	0002      	movs	r2, r0
   18350:	1dfb      	adds	r3, r7, #7
   18352:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   18354:	1dfb      	adds	r3, r7, #7
   18356:	781b      	ldrb	r3, [r3, #0]
   18358:	2b0f      	cmp	r3, #15
   1835a:	d904      	bls.n	18366 <prvTraceStoreTaskswitch+0x1e>
   1835c:	4b34      	ldr	r3, [pc, #208]	; (18430 <prvTraceStoreTaskswitch+0xe8>)
   1835e:	0018      	movs	r0, r3
   18360:	4b34      	ldr	r3, [pc, #208]	; (18434 <prvTraceStoreTaskswitch+0xec>)
   18362:	4798      	blx	r3
   18364:	e061      	b.n	1842a <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18366:	f3ef 8310 	mrs	r3, PRIMASK
   1836a:	60fb      	str	r3, [r7, #12]
  return(result);
   1836c:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   1836e:	61fb      	str	r3, [r7, #28]
   18370:	2301      	movs	r3, #1
   18372:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18374:	693b      	ldr	r3, [r7, #16]
   18376:	f383 8810 	msr	PRIMASK, r3
   1837a:	4b2f      	ldr	r3, [pc, #188]	; (18438 <prvTraceStoreTaskswitch+0xf0>)
   1837c:	681b      	ldr	r3, [r3, #0]
   1837e:	1c5a      	adds	r2, r3, #1
   18380:	4b2d      	ldr	r3, [pc, #180]	; (18438 <prvTraceStoreTaskswitch+0xf0>)
   18382:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   18384:	4b2d      	ldr	r3, [pc, #180]	; (1843c <prvTraceStoreTaskswitch+0xf4>)
   18386:	781b      	ldrb	r3, [r3, #0]
   18388:	1dfa      	adds	r2, r7, #7
   1838a:	7812      	ldrb	r2, [r2, #0]
   1838c:	429a      	cmp	r2, r3
   1838e:	d042      	beq.n	18416 <prvTraceStoreTaskswitch+0xce>
   18390:	4b2b      	ldr	r3, [pc, #172]	; (18440 <prvTraceStoreTaskswitch+0xf8>)
   18392:	681b      	ldr	r3, [r3, #0]
   18394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18396:	2b00      	cmp	r3, #0
   18398:	d03d      	beq.n	18416 <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   1839a:	4b2a      	ldr	r3, [pc, #168]	; (18444 <prvTraceStoreTaskswitch+0xfc>)
   1839c:	2200      	movs	r2, #0
   1839e:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   183a0:	231a      	movs	r3, #26
   183a2:	18fc      	adds	r4, r7, r3
   183a4:	4b28      	ldr	r3, [pc, #160]	; (18448 <prvTraceStoreTaskswitch+0x100>)
   183a6:	0018      	movs	r0, r3
   183a8:	4b28      	ldr	r3, [pc, #160]	; (1844c <prvTraceStoreTaskswitch+0x104>)
   183aa:	4798      	blx	r3
   183ac:	0003      	movs	r3, r0
   183ae:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   183b0:	4b22      	ldr	r3, [pc, #136]	; (1843c <prvTraceStoreTaskswitch+0xf4>)
   183b2:	1dfa      	adds	r2, r7, #7
   183b4:	7812      	ldrb	r2, [r2, #0]
   183b6:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   183b8:	2319      	movs	r3, #25
   183ba:	18fb      	adds	r3, r7, r3
   183bc:	4a1f      	ldr	r2, [pc, #124]	; (1843c <prvTraceStoreTaskswitch+0xf4>)
   183be:	7812      	ldrb	r2, [r2, #0]
   183c0:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   183c2:	4b23      	ldr	r3, [pc, #140]	; (18450 <prvTraceStoreTaskswitch+0x108>)
   183c4:	4798      	blx	r3
   183c6:	0003      	movs	r3, r0
   183c8:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   183ca:	697b      	ldr	r3, [r7, #20]
   183cc:	2b00      	cmp	r3, #0
   183ce:	d022      	beq.n	18416 <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   183d0:	4b1a      	ldr	r3, [pc, #104]	; (1843c <prvTraceStoreTaskswitch+0xf4>)
   183d2:	781b      	ldrb	r3, [r3, #0]
   183d4:	0019      	movs	r1, r3
   183d6:	2003      	movs	r0, #3
   183d8:	4b1e      	ldr	r3, [pc, #120]	; (18454 <prvTraceStoreTaskswitch+0x10c>)
   183da:	4798      	blx	r3
   183dc:	0003      	movs	r3, r0
   183de:	2b01      	cmp	r3, #1
   183e0:	d103      	bne.n	183ea <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   183e2:	697b      	ldr	r3, [r7, #20]
   183e4:	2207      	movs	r2, #7
   183e6:	701a      	strb	r2, [r3, #0]
   183e8:	e002      	b.n	183f0 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   183ea:	697b      	ldr	r3, [r7, #20]
   183ec:	2206      	movs	r2, #6
   183ee:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   183f0:	697b      	ldr	r3, [r7, #20]
   183f2:	221a      	movs	r2, #26
   183f4:	18ba      	adds	r2, r7, r2
   183f6:	8812      	ldrh	r2, [r2, #0]
   183f8:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   183fa:	697b      	ldr	r3, [r7, #20]
   183fc:	2219      	movs	r2, #25
   183fe:	18ba      	adds	r2, r7, r2
   18400:	7812      	ldrb	r2, [r2, #0]
   18402:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   18404:	4b0d      	ldr	r3, [pc, #52]	; (1843c <prvTraceStoreTaskswitch+0xf4>)
   18406:	781b      	ldrb	r3, [r3, #0]
   18408:	2201      	movs	r2, #1
   1840a:	0019      	movs	r1, r3
   1840c:	2003      	movs	r0, #3
   1840e:	4b12      	ldr	r3, [pc, #72]	; (18458 <prvTraceStoreTaskswitch+0x110>)
   18410:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   18412:	4b12      	ldr	r3, [pc, #72]	; (1845c <prvTraceStoreTaskswitch+0x114>)
   18414:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   18416:	4b08      	ldr	r3, [pc, #32]	; (18438 <prvTraceStoreTaskswitch+0xf0>)
   18418:	681b      	ldr	r3, [r3, #0]
   1841a:	1e5a      	subs	r2, r3, #1
   1841c:	4b06      	ldr	r3, [pc, #24]	; (18438 <prvTraceStoreTaskswitch+0xf0>)
   1841e:	601a      	str	r2, [r3, #0]
   18420:	69fb      	ldr	r3, [r7, #28]
   18422:	60bb      	str	r3, [r7, #8]
   18424:	68bb      	ldr	r3, [r7, #8]
   18426:	f383 8810 	msr	PRIMASK, r3
}
   1842a:	46bd      	mov	sp, r7
   1842c:	b009      	add	sp, #36	; 0x24
   1842e:	bd90      	pop	{r4, r7, pc}
   18430:	00036fe4 	.word	0x00036fe4
   18434:	00018de9 	.word	0x00018de9
   18438:	20000bb0 	.word	0x20000bb0
   1843c:	20000bbc 	.word	0x20000bbc
   18440:	20000c58 	.word	0x20000c58
   18444:	20000b9c 	.word	0x20000b9c
   18448:	0000ffff 	.word	0x0000ffff
   1844c:	00018ffd 	.word	0x00018ffd
   18450:	000189a1 	.word	0x000189a1
   18454:	00018645 	.word	0x00018645
   18458:	000185a1 	.word	0x000185a1
   1845c:	00018fa5 	.word	0x00018fa5

00018460 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   18460:	b590      	push	{r4, r7, lr}
   18462:	b083      	sub	sp, #12
   18464:	af00      	add	r7, sp, #0
   18466:	0004      	movs	r4, r0
   18468:	0008      	movs	r0, r1
   1846a:	0011      	movs	r1, r2
   1846c:	1dfb      	adds	r3, r7, #7
   1846e:	1c22      	adds	r2, r4, #0
   18470:	701a      	strb	r2, [r3, #0]
   18472:	1dbb      	adds	r3, r7, #6
   18474:	1c02      	adds	r2, r0, #0
   18476:	701a      	strb	r2, [r3, #0]
   18478:	1d7b      	adds	r3, r7, #5
   1847a:	1c0a      	adds	r2, r1, #0
   1847c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1847e:	1dfb      	adds	r3, r7, #7
   18480:	781b      	ldrb	r3, [r3, #0]
   18482:	2b08      	cmp	r3, #8
   18484:	d904      	bls.n	18490 <prvTraceSetPriorityProperty+0x30>
   18486:	4b1a      	ldr	r3, [pc, #104]	; (184f0 <prvTraceSetPriorityProperty+0x90>)
   18488:	0018      	movs	r0, r3
   1848a:	4b1a      	ldr	r3, [pc, #104]	; (184f4 <prvTraceSetPriorityProperty+0x94>)
   1848c:	4798      	blx	r3
   1848e:	e02c      	b.n	184ea <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18490:	4b19      	ldr	r3, [pc, #100]	; (184f8 <prvTraceSetPriorityProperty+0x98>)
   18492:	681a      	ldr	r2, [r3, #0]
   18494:	1dfb      	adds	r3, r7, #7
   18496:	781b      	ldrb	r3, [r3, #0]
   18498:	2164      	movs	r1, #100	; 0x64
   1849a:	18d3      	adds	r3, r2, r3
   1849c:	185b      	adds	r3, r3, r1
   1849e:	781b      	ldrb	r3, [r3, #0]
   184a0:	1dba      	adds	r2, r7, #6
   184a2:	7812      	ldrb	r2, [r2, #0]
   184a4:	429a      	cmp	r2, r3
   184a6:	d904      	bls.n	184b2 <prvTraceSetPriorityProperty+0x52>
   184a8:	4b14      	ldr	r3, [pc, #80]	; (184fc <prvTraceSetPriorityProperty+0x9c>)
   184aa:	0018      	movs	r0, r3
   184ac:	4b11      	ldr	r3, [pc, #68]	; (184f4 <prvTraceSetPriorityProperty+0x94>)
   184ae:	4798      	blx	r3
   184b0:	e01b      	b.n	184ea <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   184b2:	4b11      	ldr	r3, [pc, #68]	; (184f8 <prvTraceSetPriorityProperty+0x98>)
   184b4:	681c      	ldr	r4, [r3, #0]
   184b6:	1dfb      	adds	r3, r7, #7
   184b8:	781a      	ldrb	r2, [r3, #0]
   184ba:	1dbb      	adds	r3, r7, #6
   184bc:	781b      	ldrb	r3, [r3, #0]
   184be:	0011      	movs	r1, r2
   184c0:	0018      	movs	r0, r3
   184c2:	4b0f      	ldr	r3, [pc, #60]	; (18500 <prvTraceSetPriorityProperty+0xa0>)
   184c4:	4798      	blx	r3
   184c6:	0003      	movs	r3, r0
   184c8:	0018      	movs	r0, r3
   184ca:	4b0b      	ldr	r3, [pc, #44]	; (184f8 <prvTraceSetPriorityProperty+0x98>)
   184cc:	681a      	ldr	r2, [r3, #0]
   184ce:	1dfb      	adds	r3, r7, #7
   184d0:	781b      	ldrb	r3, [r3, #0]
   184d2:	2170      	movs	r1, #112	; 0x70
   184d4:	18d3      	adds	r3, r2, r3
   184d6:	185b      	adds	r3, r3, r1
   184d8:	781b      	ldrb	r3, [r3, #0]
   184da:	18c3      	adds	r3, r0, r3
   184dc:	3301      	adds	r3, #1
   184de:	229c      	movs	r2, #156	; 0x9c
   184e0:	18e3      	adds	r3, r4, r3
   184e2:	189b      	adds	r3, r3, r2
   184e4:	1d7a      	adds	r2, r7, #5
   184e6:	7812      	ldrb	r2, [r2, #0]
   184e8:	701a      	strb	r2, [r3, #0]
}
   184ea:	46bd      	mov	sp, r7
   184ec:	b003      	add	sp, #12
   184ee:	bd90      	pop	{r4, r7, pc}
   184f0:	00037178 	.word	0x00037178
   184f4:	00018de9 	.word	0x00018de9
   184f8:	20000c58 	.word	0x20000c58
   184fc:	000371c4 	.word	0x000371c4
   18500:	000189f5 	.word	0x000189f5

00018504 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   18504:	b590      	push	{r4, r7, lr}
   18506:	b083      	sub	sp, #12
   18508:	af00      	add	r7, sp, #0
   1850a:	0002      	movs	r2, r0
   1850c:	1dfb      	adds	r3, r7, #7
   1850e:	701a      	strb	r2, [r3, #0]
   18510:	1dbb      	adds	r3, r7, #6
   18512:	1c0a      	adds	r2, r1, #0
   18514:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18516:	1dfb      	adds	r3, r7, #7
   18518:	781b      	ldrb	r3, [r3, #0]
   1851a:	2b08      	cmp	r3, #8
   1851c:	d905      	bls.n	1852a <prvTraceGetPriorityProperty+0x26>
   1851e:	4b1b      	ldr	r3, [pc, #108]	; (1858c <prvTraceGetPriorityProperty+0x88>)
   18520:	0018      	movs	r0, r3
   18522:	4b1b      	ldr	r3, [pc, #108]	; (18590 <prvTraceGetPriorityProperty+0x8c>)
   18524:	4798      	blx	r3
   18526:	2300      	movs	r3, #0
   18528:	e02b      	b.n	18582 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1852a:	4b1a      	ldr	r3, [pc, #104]	; (18594 <prvTraceGetPriorityProperty+0x90>)
   1852c:	681a      	ldr	r2, [r3, #0]
   1852e:	1dfb      	adds	r3, r7, #7
   18530:	781b      	ldrb	r3, [r3, #0]
   18532:	2164      	movs	r1, #100	; 0x64
   18534:	18d3      	adds	r3, r2, r3
   18536:	185b      	adds	r3, r3, r1
   18538:	781b      	ldrb	r3, [r3, #0]
   1853a:	1dba      	adds	r2, r7, #6
   1853c:	7812      	ldrb	r2, [r2, #0]
   1853e:	429a      	cmp	r2, r3
   18540:	d905      	bls.n	1854e <prvTraceGetPriorityProperty+0x4a>
   18542:	4b15      	ldr	r3, [pc, #84]	; (18598 <prvTraceGetPriorityProperty+0x94>)
   18544:	0018      	movs	r0, r3
   18546:	4b12      	ldr	r3, [pc, #72]	; (18590 <prvTraceGetPriorityProperty+0x8c>)
   18548:	4798      	blx	r3
   1854a:	2300      	movs	r3, #0
   1854c:	e019      	b.n	18582 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   1854e:	4b11      	ldr	r3, [pc, #68]	; (18594 <prvTraceGetPriorityProperty+0x90>)
   18550:	681c      	ldr	r4, [r3, #0]
   18552:	1dfb      	adds	r3, r7, #7
   18554:	781a      	ldrb	r2, [r3, #0]
   18556:	1dbb      	adds	r3, r7, #6
   18558:	781b      	ldrb	r3, [r3, #0]
   1855a:	0011      	movs	r1, r2
   1855c:	0018      	movs	r0, r3
   1855e:	4b0f      	ldr	r3, [pc, #60]	; (1859c <prvTraceGetPriorityProperty+0x98>)
   18560:	4798      	blx	r3
   18562:	0003      	movs	r3, r0
   18564:	0018      	movs	r0, r3
   18566:	4b0b      	ldr	r3, [pc, #44]	; (18594 <prvTraceGetPriorityProperty+0x90>)
   18568:	681a      	ldr	r2, [r3, #0]
   1856a:	1dfb      	adds	r3, r7, #7
   1856c:	781b      	ldrb	r3, [r3, #0]
   1856e:	2170      	movs	r1, #112	; 0x70
   18570:	18d3      	adds	r3, r2, r3
   18572:	185b      	adds	r3, r3, r1
   18574:	781b      	ldrb	r3, [r3, #0]
   18576:	18c3      	adds	r3, r0, r3
   18578:	3301      	adds	r3, #1
   1857a:	229c      	movs	r2, #156	; 0x9c
   1857c:	18e3      	adds	r3, r4, r3
   1857e:	189b      	adds	r3, r3, r2
   18580:	781b      	ldrb	r3, [r3, #0]
}
   18582:	0018      	movs	r0, r3
   18584:	46bd      	mov	sp, r7
   18586:	b003      	add	sp, #12
   18588:	bd90      	pop	{r4, r7, pc}
   1858a:	46c0      	nop			; (mov r8, r8)
   1858c:	00037204 	.word	0x00037204
   18590:	00018de9 	.word	0x00018de9
   18594:	20000c58 	.word	0x20000c58
   18598:	00037250 	.word	0x00037250
   1859c:	000189f5 	.word	0x000189f5

000185a0 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   185a0:	b590      	push	{r4, r7, lr}
   185a2:	b083      	sub	sp, #12
   185a4:	af00      	add	r7, sp, #0
   185a6:	0004      	movs	r4, r0
   185a8:	0008      	movs	r0, r1
   185aa:	0011      	movs	r1, r2
   185ac:	1dfb      	adds	r3, r7, #7
   185ae:	1c22      	adds	r2, r4, #0
   185b0:	701a      	strb	r2, [r3, #0]
   185b2:	1dbb      	adds	r3, r7, #6
   185b4:	1c02      	adds	r2, r0, #0
   185b6:	701a      	strb	r2, [r3, #0]
   185b8:	1d7b      	adds	r3, r7, #5
   185ba:	1c0a      	adds	r2, r1, #0
   185bc:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   185be:	1dfb      	adds	r3, r7, #7
   185c0:	781b      	ldrb	r3, [r3, #0]
   185c2:	2b08      	cmp	r3, #8
   185c4:	d904      	bls.n	185d0 <prvTraceSetObjectState+0x30>
   185c6:	4b1a      	ldr	r3, [pc, #104]	; (18630 <prvTraceSetObjectState+0x90>)
   185c8:	0018      	movs	r0, r3
   185ca:	4b1a      	ldr	r3, [pc, #104]	; (18634 <prvTraceSetObjectState+0x94>)
   185cc:	4798      	blx	r3
   185ce:	e02b      	b.n	18628 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   185d0:	4b19      	ldr	r3, [pc, #100]	; (18638 <prvTraceSetObjectState+0x98>)
   185d2:	681a      	ldr	r2, [r3, #0]
   185d4:	1dfb      	adds	r3, r7, #7
   185d6:	781b      	ldrb	r3, [r3, #0]
   185d8:	2164      	movs	r1, #100	; 0x64
   185da:	18d3      	adds	r3, r2, r3
   185dc:	185b      	adds	r3, r3, r1
   185de:	781b      	ldrb	r3, [r3, #0]
   185e0:	1dba      	adds	r2, r7, #6
   185e2:	7812      	ldrb	r2, [r2, #0]
   185e4:	429a      	cmp	r2, r3
   185e6:	d904      	bls.n	185f2 <prvTraceSetObjectState+0x52>
   185e8:	4b14      	ldr	r3, [pc, #80]	; (1863c <prvTraceSetObjectState+0x9c>)
   185ea:	0018      	movs	r0, r3
   185ec:	4b11      	ldr	r3, [pc, #68]	; (18634 <prvTraceSetObjectState+0x94>)
   185ee:	4798      	blx	r3
   185f0:	e01a      	b.n	18628 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   185f2:	4b11      	ldr	r3, [pc, #68]	; (18638 <prvTraceSetObjectState+0x98>)
   185f4:	681c      	ldr	r4, [r3, #0]
   185f6:	1dfb      	adds	r3, r7, #7
   185f8:	781a      	ldrb	r2, [r3, #0]
   185fa:	1dbb      	adds	r3, r7, #6
   185fc:	781b      	ldrb	r3, [r3, #0]
   185fe:	0011      	movs	r1, r2
   18600:	0018      	movs	r0, r3
   18602:	4b0f      	ldr	r3, [pc, #60]	; (18640 <prvTraceSetObjectState+0xa0>)
   18604:	4798      	blx	r3
   18606:	0003      	movs	r3, r0
   18608:	0018      	movs	r0, r3
   1860a:	4b0b      	ldr	r3, [pc, #44]	; (18638 <prvTraceSetObjectState+0x98>)
   1860c:	681a      	ldr	r2, [r3, #0]
   1860e:	1dfb      	adds	r3, r7, #7
   18610:	781b      	ldrb	r3, [r3, #0]
   18612:	2170      	movs	r1, #112	; 0x70
   18614:	18d3      	adds	r3, r2, r3
   18616:	185b      	adds	r3, r3, r1
   18618:	781b      	ldrb	r3, [r3, #0]
   1861a:	18c3      	adds	r3, r0, r3
   1861c:	229c      	movs	r2, #156	; 0x9c
   1861e:	18e3      	adds	r3, r4, r3
   18620:	189b      	adds	r3, r3, r2
   18622:	1d7a      	adds	r2, r7, #5
   18624:	7812      	ldrb	r2, [r2, #0]
   18626:	701a      	strb	r2, [r3, #0]
}
   18628:	46bd      	mov	sp, r7
   1862a:	b003      	add	sp, #12
   1862c:	bd90      	pop	{r4, r7, pc}
   1862e:	46c0      	nop			; (mov r8, r8)
   18630:	00037290 	.word	0x00037290
   18634:	00018de9 	.word	0x00018de9
   18638:	20000c58 	.word	0x20000c58
   1863c:	000372d4 	.word	0x000372d4
   18640:	000189f5 	.word	0x000189f5

00018644 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   18644:	b590      	push	{r4, r7, lr}
   18646:	b083      	sub	sp, #12
   18648:	af00      	add	r7, sp, #0
   1864a:	0002      	movs	r2, r0
   1864c:	1dfb      	adds	r3, r7, #7
   1864e:	701a      	strb	r2, [r3, #0]
   18650:	1dbb      	adds	r3, r7, #6
   18652:	1c0a      	adds	r2, r1, #0
   18654:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18656:	1dfb      	adds	r3, r7, #7
   18658:	781b      	ldrb	r3, [r3, #0]
   1865a:	2b08      	cmp	r3, #8
   1865c:	d905      	bls.n	1866a <prvTraceGetObjectState+0x26>
   1865e:	4b1a      	ldr	r3, [pc, #104]	; (186c8 <prvTraceGetObjectState+0x84>)
   18660:	0018      	movs	r0, r3
   18662:	4b1a      	ldr	r3, [pc, #104]	; (186cc <prvTraceGetObjectState+0x88>)
   18664:	4798      	blx	r3
   18666:	2300      	movs	r3, #0
   18668:	e02a      	b.n	186c0 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1866a:	4b19      	ldr	r3, [pc, #100]	; (186d0 <prvTraceGetObjectState+0x8c>)
   1866c:	681a      	ldr	r2, [r3, #0]
   1866e:	1dfb      	adds	r3, r7, #7
   18670:	781b      	ldrb	r3, [r3, #0]
   18672:	2164      	movs	r1, #100	; 0x64
   18674:	18d3      	adds	r3, r2, r3
   18676:	185b      	adds	r3, r3, r1
   18678:	781b      	ldrb	r3, [r3, #0]
   1867a:	1dba      	adds	r2, r7, #6
   1867c:	7812      	ldrb	r2, [r2, #0]
   1867e:	429a      	cmp	r2, r3
   18680:	d905      	bls.n	1868e <prvTraceGetObjectState+0x4a>
   18682:	4b14      	ldr	r3, [pc, #80]	; (186d4 <prvTraceGetObjectState+0x90>)
   18684:	0018      	movs	r0, r3
   18686:	4b11      	ldr	r3, [pc, #68]	; (186cc <prvTraceGetObjectState+0x88>)
   18688:	4798      	blx	r3
   1868a:	2300      	movs	r3, #0
   1868c:	e018      	b.n	186c0 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   1868e:	4b10      	ldr	r3, [pc, #64]	; (186d0 <prvTraceGetObjectState+0x8c>)
   18690:	681c      	ldr	r4, [r3, #0]
   18692:	1dfb      	adds	r3, r7, #7
   18694:	781a      	ldrb	r2, [r3, #0]
   18696:	1dbb      	adds	r3, r7, #6
   18698:	781b      	ldrb	r3, [r3, #0]
   1869a:	0011      	movs	r1, r2
   1869c:	0018      	movs	r0, r3
   1869e:	4b0e      	ldr	r3, [pc, #56]	; (186d8 <prvTraceGetObjectState+0x94>)
   186a0:	4798      	blx	r3
   186a2:	0003      	movs	r3, r0
   186a4:	0018      	movs	r0, r3
   186a6:	4b0a      	ldr	r3, [pc, #40]	; (186d0 <prvTraceGetObjectState+0x8c>)
   186a8:	681a      	ldr	r2, [r3, #0]
   186aa:	1dfb      	adds	r3, r7, #7
   186ac:	781b      	ldrb	r3, [r3, #0]
   186ae:	2170      	movs	r1, #112	; 0x70
   186b0:	18d3      	adds	r3, r2, r3
   186b2:	185b      	adds	r3, r3, r1
   186b4:	781b      	ldrb	r3, [r3, #0]
   186b6:	18c3      	adds	r3, r0, r3
   186b8:	229c      	movs	r2, #156	; 0x9c
   186ba:	18e3      	adds	r3, r4, r3
   186bc:	189b      	adds	r3, r3, r2
   186be:	781b      	ldrb	r3, [r3, #0]
}
   186c0:	0018      	movs	r0, r3
   186c2:	46bd      	mov	sp, r7
   186c4:	b003      	add	sp, #12
   186c6:	bd90      	pop	{r4, r7, pc}
   186c8:	00037310 	.word	0x00037310
   186cc:	00018de9 	.word	0x00018de9
   186d0:	20000c58 	.word	0x20000c58
   186d4:	00037354 	.word	0x00037354
   186d8:	000189f5 	.word	0x000189f5

000186dc <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   186dc:	b590      	push	{r4, r7, lr}
   186de:	b083      	sub	sp, #12
   186e0:	af00      	add	r7, sp, #0
   186e2:	0002      	movs	r2, r0
   186e4:	1dfb      	adds	r3, r7, #7
   186e6:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   186e8:	4b11      	ldr	r3, [pc, #68]	; (18730 <prvTraceSetTaskInstanceFinished+0x54>)
   186ea:	681b      	ldr	r3, [r3, #0]
   186ec:	2267      	movs	r2, #103	; 0x67
   186ee:	5c9b      	ldrb	r3, [r3, r2]
   186f0:	1dfa      	adds	r2, r7, #7
   186f2:	7812      	ldrb	r2, [r2, #0]
   186f4:	429a      	cmp	r2, r3
   186f6:	d904      	bls.n	18702 <prvTraceSetTaskInstanceFinished+0x26>
   186f8:	4b0e      	ldr	r3, [pc, #56]	; (18734 <prvTraceSetTaskInstanceFinished+0x58>)
   186fa:	0018      	movs	r0, r3
   186fc:	4b0e      	ldr	r3, [pc, #56]	; (18738 <prvTraceSetTaskInstanceFinished+0x5c>)
   186fe:	4798      	blx	r3
   18700:	e013      	b.n	1872a <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   18702:	4b0b      	ldr	r3, [pc, #44]	; (18730 <prvTraceSetTaskInstanceFinished+0x54>)
   18704:	681c      	ldr	r4, [r3, #0]
   18706:	1dfb      	adds	r3, r7, #7
   18708:	781b      	ldrb	r3, [r3, #0]
   1870a:	2103      	movs	r1, #3
   1870c:	0018      	movs	r0, r3
   1870e:	4b0b      	ldr	r3, [pc, #44]	; (1873c <prvTraceSetTaskInstanceFinished+0x60>)
   18710:	4798      	blx	r3
   18712:	0003      	movs	r3, r0
   18714:	0019      	movs	r1, r3
   18716:	4b06      	ldr	r3, [pc, #24]	; (18730 <prvTraceSetTaskInstanceFinished+0x54>)
   18718:	681b      	ldr	r3, [r3, #0]
   1871a:	2273      	movs	r2, #115	; 0x73
   1871c:	5c9b      	ldrb	r3, [r3, r2]
   1871e:	18cb      	adds	r3, r1, r3
   18720:	229c      	movs	r2, #156	; 0x9c
   18722:	18e3      	adds	r3, r4, r3
   18724:	189b      	adds	r3, r3, r2
   18726:	2200      	movs	r2, #0
   18728:	701a      	strb	r2, [r3, #0]
#endif
}
   1872a:	46bd      	mov	sp, r7
   1872c:	b003      	add	sp, #12
   1872e:	bd90      	pop	{r4, r7, pc}
   18730:	20000c58 	.word	0x20000c58
   18734:	00037390 	.word	0x00037390
   18738:	00018de9 	.word	0x00018de9
   1873c:	000189f5 	.word	0x000189f5

00018740 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   18740:	b580      	push	{r7, lr}
   18742:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   18744:	4b75      	ldr	r3, [pc, #468]	; (1891c <prvTraceInitTraceData+0x1dc>)
   18746:	681b      	ldr	r3, [r3, #0]
   18748:	2b00      	cmp	r3, #0
   1874a:	d103      	bne.n	18754 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   1874c:	4b73      	ldr	r3, [pc, #460]	; (1891c <prvTraceInitTraceData+0x1dc>)
   1874e:	4a74      	ldr	r2, [pc, #464]	; (18920 <prvTraceInitTraceData+0x1e0>)
   18750:	601a      	str	r2, [r3, #0]
   18752:	e006      	b.n	18762 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   18754:	4b71      	ldr	r3, [pc, #452]	; (1891c <prvTraceInitTraceData+0x1dc>)
   18756:	681b      	ldr	r3, [r3, #0]
   18758:	781b      	ldrb	r3, [r3, #0]
   1875a:	b2db      	uxtb	r3, r3
   1875c:	2b01      	cmp	r3, #1
   1875e:	d100      	bne.n	18762 <prvTraceInitTraceData+0x22>
   18760:	e0d8      	b.n	18914 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   18762:	4b70      	ldr	r3, [pc, #448]	; (18924 <prvTraceInitTraceData+0x1e4>)
   18764:	681a      	ldr	r2, [r3, #0]
   18766:	4b70      	ldr	r3, [pc, #448]	; (18928 <prvTraceInitTraceData+0x1e8>)
   18768:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   1876a:	4b6c      	ldr	r3, [pc, #432]	; (1891c <prvTraceInitTraceData+0x1dc>)
   1876c:	6818      	ldr	r0, [r3, #0]
   1876e:	23bd      	movs	r3, #189	; 0xbd
   18770:	011b      	lsls	r3, r3, #4
   18772:	001a      	movs	r2, r3
   18774:	2100      	movs	r1, #0
   18776:	4b6d      	ldr	r3, [pc, #436]	; (1892c <prvTraceInitTraceData+0x1ec>)
   18778:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   1877a:	4b68      	ldr	r3, [pc, #416]	; (1891c <prvTraceInitTraceData+0x1dc>)
   1877c:	681b      	ldr	r3, [r3, #0]
   1877e:	4a6c      	ldr	r2, [pc, #432]	; (18930 <prvTraceInitTraceData+0x1f0>)
   18780:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   18782:	4b66      	ldr	r3, [pc, #408]	; (1891c <prvTraceInitTraceData+0x1dc>)
   18784:	681b      	ldr	r3, [r3, #0]
   18786:	2205      	movs	r2, #5
   18788:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   1878a:	4b64      	ldr	r3, [pc, #400]	; (1891c <prvTraceInitTraceData+0x1dc>)
   1878c:	681b      	ldr	r3, [r3, #0]
   1878e:	2200      	movs	r2, #0
   18790:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   18792:	4b62      	ldr	r3, [pc, #392]	; (1891c <prvTraceInitTraceData+0x1dc>)
   18794:	681b      	ldr	r3, [r3, #0]
   18796:	22bd      	movs	r2, #189	; 0xbd
   18798:	0112      	lsls	r2, r2, #4
   1879a:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   1879c:	4b5f      	ldr	r3, [pc, #380]	; (1891c <prvTraceInitTraceData+0x1dc>)
   1879e:	681b      	ldr	r3, [r3, #0]
   187a0:	2296      	movs	r2, #150	; 0x96
   187a2:	0052      	lsls	r2, r2, #1
   187a4:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   187a6:	4b5d      	ldr	r3, [pc, #372]	; (1891c <prvTraceInitTraceData+0x1dc>)
   187a8:	681b      	ldr	r3, [r3, #0]
   187aa:	4a62      	ldr	r2, [pc, #392]	; (18934 <prvTraceInitTraceData+0x1f4>)
   187ac:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   187ae:	4b5b      	ldr	r3, [pc, #364]	; (1891c <prvTraceInitTraceData+0x1dc>)
   187b0:	681b      	ldr	r3, [r3, #0]
   187b2:	2200      	movs	r2, #0
   187b4:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   187b6:	4b59      	ldr	r3, [pc, #356]	; (1891c <prvTraceInitTraceData+0x1dc>)
   187b8:	681b      	ldr	r3, [r3, #0]
   187ba:	2200      	movs	r2, #0
   187bc:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   187be:	4b5e      	ldr	r3, [pc, #376]	; (18938 <prvTraceInitTraceData+0x1f8>)
   187c0:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   187c2:	4b56      	ldr	r3, [pc, #344]	; (1891c <prvTraceInitTraceData+0x1dc>)
   187c4:	681b      	ldr	r3, [r3, #0]
   187c6:	4a5d      	ldr	r2, [pc, #372]	; (1893c <prvTraceInitTraceData+0x1fc>)
   187c8:	495d      	ldr	r1, [pc, #372]	; (18940 <prvTraceInitTraceData+0x200>)
   187ca:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   187cc:	4b53      	ldr	r3, [pc, #332]	; (1891c <prvTraceInitTraceData+0x1dc>)
   187ce:	681a      	ldr	r2, [r3, #0]
   187d0:	23ac      	movs	r3, #172	; 0xac
   187d2:	00db      	lsls	r3, r3, #3
   187d4:	21c8      	movs	r1, #200	; 0xc8
   187d6:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   187d8:	4b50      	ldr	r3, [pc, #320]	; (1891c <prvTraceInitTraceData+0x1dc>)
   187da:	681b      	ldr	r3, [r3, #0]
   187dc:	4a59      	ldr	r2, [pc, #356]	; (18944 <prvTraceInitTraceData+0x204>)
   187de:	2101      	movs	r1, #1
   187e0:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   187e2:	4b4e      	ldr	r3, [pc, #312]	; (1891c <prvTraceInitTraceData+0x1dc>)
   187e4:	681a      	ldr	r2, [r3, #0]
   187e6:	23d7      	movs	r3, #215	; 0xd7
   187e8:	00db      	lsls	r3, r3, #3
   187ea:	4957      	ldr	r1, [pc, #348]	; (18948 <prvTraceInitTraceData+0x208>)
   187ec:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   187ee:	4b4b      	ldr	r3, [pc, #300]	; (1891c <prvTraceInitTraceData+0x1dc>)
   187f0:	681b      	ldr	r3, [r3, #0]
   187f2:	4a56      	ldr	r2, [pc, #344]	; (1894c <prvTraceInitTraceData+0x20c>)
   187f4:	4694      	mov	ip, r2
   187f6:	4463      	add	r3, ip
   187f8:	4955      	ldr	r1, [pc, #340]	; (18950 <prvTraceInitTraceData+0x210>)
   187fa:	2250      	movs	r2, #80	; 0x50
   187fc:	0018      	movs	r0, r3
   187fe:	4b55      	ldr	r3, [pc, #340]	; (18954 <prvTraceInitTraceData+0x214>)
   18800:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   18802:	4b46      	ldr	r3, [pc, #280]	; (1891c <prvTraceInitTraceData+0x1dc>)
   18804:	681b      	ldr	r3, [r3, #0]
   18806:	4a54      	ldr	r2, [pc, #336]	; (18958 <prvTraceInitTraceData+0x218>)
   18808:	4954      	ldr	r1, [pc, #336]	; (1895c <prvTraceInitTraceData+0x21c>)
   1880a:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   1880c:	4b43      	ldr	r3, [pc, #268]	; (1891c <prvTraceInitTraceData+0x1dc>)
   1880e:	681b      	ldr	r3, [r3, #0]
   18810:	4a53      	ldr	r2, [pc, #332]	; (18960 <prvTraceInitTraceData+0x220>)
   18812:	210a      	movs	r1, #10
   18814:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   18816:	4b41      	ldr	r3, [pc, #260]	; (1891c <prvTraceInitTraceData+0x1dc>)
   18818:	681b      	ldr	r3, [r3, #0]
   1881a:	4a52      	ldr	r2, [pc, #328]	; (18964 <prvTraceInitTraceData+0x224>)
   1881c:	210b      	movs	r1, #11
   1881e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   18820:	4b3e      	ldr	r3, [pc, #248]	; (1891c <prvTraceInitTraceData+0x1dc>)
   18822:	681b      	ldr	r3, [r3, #0]
   18824:	4a50      	ldr	r2, [pc, #320]	; (18968 <prvTraceInitTraceData+0x228>)
   18826:	210c      	movs	r1, #12
   18828:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   1882a:	4b3c      	ldr	r3, [pc, #240]	; (1891c <prvTraceInitTraceData+0x1dc>)
   1882c:	681b      	ldr	r3, [r3, #0]
   1882e:	4a4f      	ldr	r2, [pc, #316]	; (1896c <prvTraceInitTraceData+0x22c>)
   18830:	210d      	movs	r1, #13
   18832:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   18834:	4b39      	ldr	r3, [pc, #228]	; (1891c <prvTraceInitTraceData+0x1dc>)
   18836:	681b      	ldr	r3, [r3, #0]
   18838:	4a4d      	ldr	r2, [pc, #308]	; (18970 <prvTraceInitTraceData+0x230>)
   1883a:	2171      	movs	r1, #113	; 0x71
   1883c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   1883e:	4b37      	ldr	r3, [pc, #220]	; (1891c <prvTraceInitTraceData+0x1dc>)
   18840:	681b      	ldr	r3, [r3, #0]
   18842:	4a4c      	ldr	r2, [pc, #304]	; (18974 <prvTraceInitTraceData+0x234>)
   18844:	2172      	movs	r1, #114	; 0x72
   18846:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   18848:	4b34      	ldr	r3, [pc, #208]	; (1891c <prvTraceInitTraceData+0x1dc>)
   1884a:	681b      	ldr	r3, [r3, #0]
   1884c:	4a4a      	ldr	r2, [pc, #296]	; (18978 <prvTraceInitTraceData+0x238>)
   1884e:	2173      	movs	r1, #115	; 0x73
   18850:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   18852:	4b32      	ldr	r3, [pc, #200]	; (1891c <prvTraceInitTraceData+0x1dc>)
   18854:	681b      	ldr	r3, [r3, #0]
   18856:	4a49      	ldr	r2, [pc, #292]	; (1897c <prvTraceInitTraceData+0x23c>)
   18858:	2174      	movs	r1, #116	; 0x74
   1885a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   1885c:	4b2f      	ldr	r3, [pc, #188]	; (1891c <prvTraceInitTraceData+0x1dc>)
   1885e:	681b      	ldr	r3, [r3, #0]
   18860:	4a47      	ldr	r2, [pc, #284]	; (18980 <prvTraceInitTraceData+0x240>)
   18862:	21f1      	movs	r1, #241	; 0xf1
   18864:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   18866:	4b2d      	ldr	r3, [pc, #180]	; (1891c <prvTraceInitTraceData+0x1dc>)
   18868:	681b      	ldr	r3, [r3, #0]
   1886a:	4a46      	ldr	r2, [pc, #280]	; (18984 <prvTraceInitTraceData+0x244>)
   1886c:	21f2      	movs	r1, #242	; 0xf2
   1886e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   18870:	4b2a      	ldr	r3, [pc, #168]	; (1891c <prvTraceInitTraceData+0x1dc>)
   18872:	681b      	ldr	r3, [r3, #0]
   18874:	4a44      	ldr	r2, [pc, #272]	; (18988 <prvTraceInitTraceData+0x248>)
   18876:	21f3      	movs	r1, #243	; 0xf3
   18878:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   1887a:	4b28      	ldr	r3, [pc, #160]	; (1891c <prvTraceInitTraceData+0x1dc>)
   1887c:	681b      	ldr	r3, [r3, #0]
   1887e:	4a43      	ldr	r2, [pc, #268]	; (1898c <prvTraceInitTraceData+0x24c>)
   18880:	21f4      	movs	r1, #244	; 0xf4
   18882:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   18884:	4b42      	ldr	r3, [pc, #264]	; (18990 <prvTraceInitTraceData+0x250>)
   18886:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   18888:	4b24      	ldr	r3, [pc, #144]	; (1891c <prvTraceInitTraceData+0x1dc>)
   1888a:	681b      	ldr	r3, [r3, #0]
   1888c:	22f4      	movs	r2, #244	; 0xf4
   1888e:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   18890:	4b22      	ldr	r3, [pc, #136]	; (1891c <prvTraceInitTraceData+0x1dc>)
   18892:	681b      	ldr	r3, [r3, #0]
   18894:	22f3      	movs	r2, #243	; 0xf3
   18896:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   18898:	4b20      	ldr	r3, [pc, #128]	; (1891c <prvTraceInitTraceData+0x1dc>)
   1889a:	681b      	ldr	r3, [r3, #0]
   1889c:	22f2      	movs	r2, #242	; 0xf2
   1889e:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   188a0:	4b1e      	ldr	r3, [pc, #120]	; (1891c <prvTraceInitTraceData+0x1dc>)
   188a2:	681b      	ldr	r3, [r3, #0]
   188a4:	22f1      	movs	r2, #241	; 0xf1
   188a6:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   188a8:	4b1c      	ldr	r3, [pc, #112]	; (1891c <prvTraceInitTraceData+0x1dc>)
   188aa:	681b      	ldr	r3, [r3, #0]
   188ac:	2274      	movs	r2, #116	; 0x74
   188ae:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   188b0:	4b1a      	ldr	r3, [pc, #104]	; (1891c <prvTraceInitTraceData+0x1dc>)
   188b2:	681b      	ldr	r3, [r3, #0]
   188b4:	2273      	movs	r2, #115	; 0x73
   188b6:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   188b8:	4b18      	ldr	r3, [pc, #96]	; (1891c <prvTraceInitTraceData+0x1dc>)
   188ba:	681b      	ldr	r3, [r3, #0]
   188bc:	2272      	movs	r2, #114	; 0x72
   188be:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   188c0:	4b16      	ldr	r3, [pc, #88]	; (1891c <prvTraceInitTraceData+0x1dc>)
   188c2:	681b      	ldr	r3, [r3, #0]
   188c4:	2271      	movs	r2, #113	; 0x71
   188c6:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   188c8:	4b14      	ldr	r3, [pc, #80]	; (1891c <prvTraceInitTraceData+0x1dc>)
   188ca:	681b      	ldr	r3, [r3, #0]
   188cc:	2204      	movs	r2, #4
   188ce:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   188d0:	4b12      	ldr	r3, [pc, #72]	; (1891c <prvTraceInitTraceData+0x1dc>)
   188d2:	681b      	ldr	r3, [r3, #0]
   188d4:	2203      	movs	r2, #3
   188d6:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   188d8:	4b10      	ldr	r3, [pc, #64]	; (1891c <prvTraceInitTraceData+0x1dc>)
   188da:	681b      	ldr	r3, [r3, #0]
   188dc:	2202      	movs	r2, #2
   188de:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   188e0:	4b0e      	ldr	r3, [pc, #56]	; (1891c <prvTraceInitTraceData+0x1dc>)
   188e2:	681b      	ldr	r3, [r3, #0]
   188e4:	2201      	movs	r2, #1
   188e6:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   188e8:	4b2a      	ldr	r3, [pc, #168]	; (18994 <prvTraceInitTraceData+0x254>)
   188ea:	681b      	ldr	r3, [r3, #0]
   188ec:	2b00      	cmp	r3, #0
   188ee:	d012      	beq.n	18916 <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   188f0:	4b0a      	ldr	r3, [pc, #40]	; (1891c <prvTraceInitTraceData+0x1dc>)
   188f2:	681b      	ldr	r3, [r3, #0]
   188f4:	4a15      	ldr	r2, [pc, #84]	; (1894c <prvTraceInitTraceData+0x20c>)
   188f6:	1898      	adds	r0, r3, r2
   188f8:	4b26      	ldr	r3, [pc, #152]	; (18994 <prvTraceInitTraceData+0x254>)
   188fa:	681b      	ldr	r3, [r3, #0]
   188fc:	2250      	movs	r2, #80	; 0x50
   188fe:	0019      	movs	r1, r3
   18900:	4b14      	ldr	r3, [pc, #80]	; (18954 <prvTraceInitTraceData+0x214>)
   18902:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   18904:	4b05      	ldr	r3, [pc, #20]	; (1891c <prvTraceInitTraceData+0x1dc>)
   18906:	681b      	ldr	r3, [r3, #0]
   18908:	4a23      	ldr	r2, [pc, #140]	; (18998 <prvTraceInitTraceData+0x258>)
   1890a:	2101      	movs	r1, #1
   1890c:	5099      	str	r1, [r3, r2]
		vTraceStop();
   1890e:	4b23      	ldr	r3, [pc, #140]	; (1899c <prvTraceInitTraceData+0x25c>)
   18910:	4798      	blx	r3
   18912:	e000      	b.n	18916 <prvTraceInitTraceData+0x1d6>
			return;
   18914:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   18916:	46bd      	mov	sp, r7
   18918:	bd80      	pop	{r7, pc}
   1891a:	46c0      	nop			; (mov r8, r8)
   1891c:	20000c58 	.word	0x20000c58
   18920:	200047ac 	.word	0x200047ac
   18924:	e000e018 	.word	0xe000e018
   18928:	2000537c 	.word	0x2000537c
   1892c:	0003431b 	.word	0x0003431b
   18930:	00001aa1 	.word	0x00001aa1
   18934:	f0f0f0f0 	.word	0xf0f0f0f0
   18938:	000178a5 	.word	0x000178a5
   1893c:	0000055c 	.word	0x0000055c
   18940:	f1f1f1f1 	.word	0xf1f1f1f1
   18944:	00000564 	.word	0x00000564
   18948:	f2f2f2f2 	.word	0xf2f2f2f2
   1894c:	000006bc 	.word	0x000006bc
   18950:	000373d8 	.word	0x000373d8
   18954:	00018cb5 	.word	0x00018cb5
   18958:	0000070c 	.word	0x0000070c
   1895c:	f3f3f3f3 	.word	0xf3f3f3f3
   18960:	00000bc4 	.word	0x00000bc4
   18964:	00000bc5 	.word	0x00000bc5
   18968:	00000bc6 	.word	0x00000bc6
   1896c:	00000bc7 	.word	0x00000bc7
   18970:	00000bc8 	.word	0x00000bc8
   18974:	00000bc9 	.word	0x00000bc9
   18978:	00000bca 	.word	0x00000bca
   1897c:	00000bcb 	.word	0x00000bcb
   18980:	00000bcc 	.word	0x00000bcc
   18984:	00000bcd 	.word	0x00000bcd
   18988:	00000bce 	.word	0x00000bce
   1898c:	00000bcf 	.word	0x00000bcf
   18990:	00017a45 	.word	0x00017a45
   18994:	20000bb8 	.word	0x20000bb8
   18998:	000006b4 	.word	0x000006b4
   1899c:	00017cad 	.word	0x00017cad

000189a0 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   189a0:	b580      	push	{r7, lr}
   189a2:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   189a4:	4b10      	ldr	r3, [pc, #64]	; (189e8 <prvTraceNextFreeEventBufferSlot+0x48>)
   189a6:	681b      	ldr	r3, [r3, #0]
   189a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   189aa:	2b00      	cmp	r3, #0
   189ac:	d101      	bne.n	189b2 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   189ae:	2300      	movs	r3, #0
   189b0:	e017      	b.n	189e2 <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   189b2:	4b0d      	ldr	r3, [pc, #52]	; (189e8 <prvTraceNextFreeEventBufferSlot+0x48>)
   189b4:	681b      	ldr	r3, [r3, #0]
   189b6:	69da      	ldr	r2, [r3, #28]
   189b8:	232c      	movs	r3, #44	; 0x2c
   189ba:	33ff      	adds	r3, #255	; 0xff
   189bc:	429a      	cmp	r2, r3
   189be:	d905      	bls.n	189cc <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   189c0:	4b0a      	ldr	r3, [pc, #40]	; (189ec <prvTraceNextFreeEventBufferSlot+0x4c>)
   189c2:	0018      	movs	r0, r3
   189c4:	4b0a      	ldr	r3, [pc, #40]	; (189f0 <prvTraceNextFreeEventBufferSlot+0x50>)
   189c6:	4798      	blx	r3
		return NULL;
   189c8:	2300      	movs	r3, #0
   189ca:	e00a      	b.n	189e2 <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   189cc:	4b06      	ldr	r3, [pc, #24]	; (189e8 <prvTraceNextFreeEventBufferSlot+0x48>)
   189ce:	681a      	ldr	r2, [r3, #0]
   189d0:	4b05      	ldr	r3, [pc, #20]	; (189e8 <prvTraceNextFreeEventBufferSlot+0x48>)
   189d2:	681b      	ldr	r3, [r3, #0]
   189d4:	69db      	ldr	r3, [r3, #28]
   189d6:	009b      	lsls	r3, r3, #2
   189d8:	21e2      	movs	r1, #226	; 0xe2
   189da:	00c9      	lsls	r1, r1, #3
   189dc:	468c      	mov	ip, r1
   189de:	4463      	add	r3, ip
   189e0:	18d3      	adds	r3, r2, r3
}
   189e2:	0018      	movs	r0, r3
   189e4:	46bd      	mov	sp, r7
   189e6:	bd80      	pop	{r7, pc}
   189e8:	20000c58 	.word	0x20000c58
   189ec:	000373ec 	.word	0x000373ec
   189f0:	00018de9 	.word	0x00018de9

000189f4 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   189f4:	b580      	push	{r7, lr}
   189f6:	b082      	sub	sp, #8
   189f8:	af00      	add	r7, sp, #0
   189fa:	0002      	movs	r2, r0
   189fc:	1dfb      	adds	r3, r7, #7
   189fe:	701a      	strb	r2, [r3, #0]
   18a00:	1dbb      	adds	r3, r7, #6
   18a02:	1c0a      	adds	r2, r1, #0
   18a04:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   18a06:	1dbb      	adds	r3, r7, #6
   18a08:	781b      	ldrb	r3, [r3, #0]
   18a0a:	2b08      	cmp	r3, #8
   18a0c:	d905      	bls.n	18a1a <uiIndexOfObject+0x26>
   18a0e:	4b2a      	ldr	r3, [pc, #168]	; (18ab8 <uiIndexOfObject+0xc4>)
   18a10:	0018      	movs	r0, r3
   18a12:	4b2a      	ldr	r3, [pc, #168]	; (18abc <uiIndexOfObject+0xc8>)
   18a14:	4798      	blx	r3
   18a16:	2300      	movs	r3, #0
   18a18:	e049      	b.n	18aae <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   18a1a:	1dfb      	adds	r3, r7, #7
   18a1c:	781b      	ldrb	r3, [r3, #0]
   18a1e:	2b00      	cmp	r3, #0
   18a20:	d00b      	beq.n	18a3a <uiIndexOfObject+0x46>
   18a22:	4b27      	ldr	r3, [pc, #156]	; (18ac0 <uiIndexOfObject+0xcc>)
   18a24:	681a      	ldr	r2, [r3, #0]
   18a26:	1dbb      	adds	r3, r7, #6
   18a28:	781b      	ldrb	r3, [r3, #0]
   18a2a:	2164      	movs	r1, #100	; 0x64
   18a2c:	18d3      	adds	r3, r2, r3
   18a2e:	185b      	adds	r3, r3, r1
   18a30:	781b      	ldrb	r3, [r3, #0]
   18a32:	1dfa      	adds	r2, r7, #7
   18a34:	7812      	ldrb	r2, [r2, #0]
   18a36:	429a      	cmp	r2, r3
   18a38:	d905      	bls.n	18a46 <uiIndexOfObject+0x52>
   18a3a:	4b22      	ldr	r3, [pc, #136]	; (18ac4 <uiIndexOfObject+0xd0>)
   18a3c:	0018      	movs	r0, r3
   18a3e:	4b1f      	ldr	r3, [pc, #124]	; (18abc <uiIndexOfObject+0xc8>)
   18a40:	4798      	blx	r3
   18a42:	2300      	movs	r3, #0
   18a44:	e033      	b.n	18aae <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   18a46:	1dbb      	adds	r3, r7, #6
   18a48:	781b      	ldrb	r3, [r3, #0]
   18a4a:	2b08      	cmp	r3, #8
   18a4c:	d82a      	bhi.n	18aa4 <uiIndexOfObject+0xb0>
   18a4e:	1dfb      	adds	r3, r7, #7
   18a50:	781b      	ldrb	r3, [r3, #0]
   18a52:	2b00      	cmp	r3, #0
   18a54:	d026      	beq.n	18aa4 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   18a56:	4b1a      	ldr	r3, [pc, #104]	; (18ac0 <uiIndexOfObject+0xcc>)
   18a58:	681a      	ldr	r2, [r3, #0]
   18a5a:	1dbb      	adds	r3, r7, #6
   18a5c:	781b      	ldrb	r3, [r3, #0]
   18a5e:	2164      	movs	r1, #100	; 0x64
   18a60:	18d3      	adds	r3, r2, r3
   18a62:	185b      	adds	r3, r3, r1
   18a64:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   18a66:	1dfa      	adds	r2, r7, #7
   18a68:	7812      	ldrb	r2, [r2, #0]
   18a6a:	429a      	cmp	r2, r3
   18a6c:	d81a      	bhi.n	18aa4 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   18a6e:	4b14      	ldr	r3, [pc, #80]	; (18ac0 <uiIndexOfObject+0xcc>)
   18a70:	681a      	ldr	r2, [r3, #0]
   18a72:	1dbb      	adds	r3, r7, #6
   18a74:	781b      	ldrb	r3, [r3, #0]
   18a76:	3340      	adds	r3, #64	; 0x40
   18a78:	005b      	lsls	r3, r3, #1
   18a7a:	18d3      	adds	r3, r2, r3
   18a7c:	3308      	adds	r3, #8
   18a7e:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   18a80:	4b0f      	ldr	r3, [pc, #60]	; (18ac0 <uiIndexOfObject+0xcc>)
   18a82:	6819      	ldr	r1, [r3, #0]
   18a84:	1dbb      	adds	r3, r7, #6
   18a86:	781b      	ldrb	r3, [r3, #0]
   18a88:	207c      	movs	r0, #124	; 0x7c
   18a8a:	18cb      	adds	r3, r1, r3
   18a8c:	181b      	adds	r3, r3, r0
   18a8e:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   18a90:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   18a92:	1df9      	adds	r1, r7, #7
   18a94:	7809      	ldrb	r1, [r1, #0]
   18a96:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   18a98:	b289      	uxth	r1, r1
   18a9a:	434b      	muls	r3, r1
   18a9c:	b29b      	uxth	r3, r3
   18a9e:	18d3      	adds	r3, r2, r3
   18aa0:	b29b      	uxth	r3, r3
   18aa2:	e004      	b.n	18aae <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   18aa4:	4b08      	ldr	r3, [pc, #32]	; (18ac8 <uiIndexOfObject+0xd4>)
   18aa6:	0018      	movs	r0, r3
   18aa8:	4b04      	ldr	r3, [pc, #16]	; (18abc <uiIndexOfObject+0xc8>)
   18aaa:	4798      	blx	r3
	return 0;
   18aac:	2300      	movs	r3, #0
}
   18aae:	0018      	movs	r0, r3
   18ab0:	46bd      	mov	sp, r7
   18ab2:	b002      	add	sp, #8
   18ab4:	bd80      	pop	{r7, pc}
   18ab6:	46c0      	nop			; (mov r8, r8)
   18ab8:	00037414 	.word	0x00037414
   18abc:	00018de9 	.word	0x00018de9
   18ac0:	20000c58 	.word	0x20000c58
   18ac4:	00037454 	.word	0x00037454
   18ac8:	00037494 	.word	0x00037494

00018acc <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   18acc:	b580      	push	{r7, lr}
   18ace:	b088      	sub	sp, #32
   18ad0:	af00      	add	r7, sp, #0
   18ad2:	0002      	movs	r2, r0
   18ad4:	1dfb      	adds	r3, r7, #7
   18ad6:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   18ad8:	4b5a      	ldr	r3, [pc, #360]	; (18c44 <prvTraceGetObjectHandle+0x178>)
   18ada:	681b      	ldr	r3, [r3, #0]
   18adc:	2b00      	cmp	r3, #0
   18ade:	d105      	bne.n	18aec <prvTraceGetObjectHandle+0x20>
   18ae0:	4b59      	ldr	r3, [pc, #356]	; (18c48 <prvTraceGetObjectHandle+0x17c>)
   18ae2:	0018      	movs	r0, r3
   18ae4:	4b59      	ldr	r3, [pc, #356]	; (18c4c <prvTraceGetObjectHandle+0x180>)
   18ae6:	4798      	blx	r3
   18ae8:	2300      	movs	r3, #0
   18aea:	e0a7      	b.n	18c3c <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   18aec:	1dfb      	adds	r3, r7, #7
   18aee:	781b      	ldrb	r3, [r3, #0]
   18af0:	2b08      	cmp	r3, #8
   18af2:	d905      	bls.n	18b00 <prvTraceGetObjectHandle+0x34>
   18af4:	4b56      	ldr	r3, [pc, #344]	; (18c50 <prvTraceGetObjectHandle+0x184>)
   18af6:	0018      	movs	r0, r3
   18af8:	4b54      	ldr	r3, [pc, #336]	; (18c4c <prvTraceGetObjectHandle+0x180>)
   18afa:	4798      	blx	r3
   18afc:	2300      	movs	r3, #0
   18afe:	e09d      	b.n	18c3c <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18b00:	f3ef 8310 	mrs	r3, PRIMASK
   18b04:	60fb      	str	r3, [r7, #12]
  return(result);
   18b06:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   18b08:	61bb      	str	r3, [r7, #24]
   18b0a:	2301      	movs	r3, #1
   18b0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18b0e:	693b      	ldr	r3, [r7, #16]
   18b10:	f383 8810 	msr	PRIMASK, r3
   18b14:	4b4f      	ldr	r3, [pc, #316]	; (18c54 <prvTraceGetObjectHandle+0x188>)
   18b16:	681b      	ldr	r3, [r3, #0]
   18b18:	1c5a      	adds	r2, r3, #1
   18b1a:	4b4e      	ldr	r3, [pc, #312]	; (18c54 <prvTraceGetObjectHandle+0x188>)
   18b1c:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   18b1e:	1dfb      	adds	r3, r7, #7
   18b20:	781a      	ldrb	r2, [r3, #0]
   18b22:	4b4d      	ldr	r3, [pc, #308]	; (18c58 <prvTraceGetObjectHandle+0x18c>)
   18b24:	0052      	lsls	r2, r2, #1
   18b26:	5ad3      	ldrh	r3, [r2, r3]
   18b28:	001a      	movs	r2, r3
   18b2a:	4b4c      	ldr	r3, [pc, #304]	; (18c5c <prvTraceGetObjectHandle+0x190>)
   18b2c:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   18b2e:	4b4b      	ldr	r3, [pc, #300]	; (18c5c <prvTraceGetObjectHandle+0x190>)
   18b30:	681b      	ldr	r3, [r3, #0]
   18b32:	4a49      	ldr	r2, [pc, #292]	; (18c58 <prvTraceGetObjectHandle+0x18c>)
   18b34:	2148      	movs	r1, #72	; 0x48
   18b36:	18d3      	adds	r3, r2, r3
   18b38:	185b      	adds	r3, r3, r1
   18b3a:	781b      	ldrb	r3, [r3, #0]
   18b3c:	2b00      	cmp	r3, #0
   18b3e:	d117      	bne.n	18b70 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   18b40:	4b46      	ldr	r3, [pc, #280]	; (18c5c <prvTraceGetObjectHandle+0x190>)
   18b42:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   18b44:	4b45      	ldr	r3, [pc, #276]	; (18c5c <prvTraceGetObjectHandle+0x190>)
   18b46:	681b      	ldr	r3, [r3, #0]
   18b48:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   18b4a:	1dfb      	adds	r3, r7, #7
   18b4c:	781b      	ldrb	r3, [r3, #0]
   18b4e:	4842      	ldr	r0, [pc, #264]	; (18c58 <prvTraceGetObjectHandle+0x18c>)
   18b50:	3308      	adds	r3, #8
   18b52:	005b      	lsls	r3, r3, #1
   18b54:	18c3      	adds	r3, r0, r3
   18b56:	3302      	adds	r3, #2
   18b58:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   18b5a:	b2db      	uxtb	r3, r3
   18b5c:	1acb      	subs	r3, r1, r3
   18b5e:	b2db      	uxtb	r3, r3
   18b60:	3301      	adds	r3, #1
   18b62:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   18b64:	4b3c      	ldr	r3, [pc, #240]	; (18c58 <prvTraceGetObjectHandle+0x18c>)
   18b66:	2148      	movs	r1, #72	; 0x48
   18b68:	189b      	adds	r3, r3, r2
   18b6a:	185b      	adds	r3, r3, r1
   18b6c:	1c02      	adds	r2, r0, #0
   18b6e:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   18b70:	4b3a      	ldr	r3, [pc, #232]	; (18c5c <prvTraceGetObjectHandle+0x190>)
   18b72:	681a      	ldr	r2, [r3, #0]
   18b74:	231f      	movs	r3, #31
   18b76:	18fb      	adds	r3, r7, r3
   18b78:	4937      	ldr	r1, [pc, #220]	; (18c58 <prvTraceGetObjectHandle+0x18c>)
   18b7a:	2048      	movs	r0, #72	; 0x48
   18b7c:	188a      	adds	r2, r1, r2
   18b7e:	1812      	adds	r2, r2, r0
   18b80:	7812      	ldrb	r2, [r2, #0]
   18b82:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   18b84:	1dfb      	adds	r3, r7, #7
   18b86:	781a      	ldrb	r2, [r3, #0]
   18b88:	4b33      	ldr	r3, [pc, #204]	; (18c58 <prvTraceGetObjectHandle+0x18c>)
   18b8a:	0052      	lsls	r2, r2, #1
   18b8c:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   18b8e:	1dfb      	adds	r3, r7, #7
   18b90:	781b      	ldrb	r3, [r3, #0]
   18b92:	4931      	ldr	r1, [pc, #196]	; (18c58 <prvTraceGetObjectHandle+0x18c>)
   18b94:	3310      	adds	r3, #16
   18b96:	005b      	lsls	r3, r3, #1
   18b98:	18cb      	adds	r3, r1, r3
   18b9a:	3304      	adds	r3, #4
   18b9c:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   18b9e:	429a      	cmp	r2, r3
   18ba0:	d90d      	bls.n	18bbe <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   18ba2:	1dfb      	adds	r3, r7, #7
   18ba4:	781b      	ldrb	r3, [r3, #0]
   18ba6:	0018      	movs	r0, r3
   18ba8:	4b2d      	ldr	r3, [pc, #180]	; (18c60 <prvTraceGetObjectHandle+0x194>)
   18baa:	4798      	blx	r3
   18bac:	0003      	movs	r3, r0
   18bae:	0018      	movs	r0, r3
   18bb0:	4b26      	ldr	r3, [pc, #152]	; (18c4c <prvTraceGetObjectHandle+0x180>)
   18bb2:	4798      	blx	r3
		handle = 0;
   18bb4:	231f      	movs	r3, #31
   18bb6:	18fb      	adds	r3, r7, r3
   18bb8:	2200      	movs	r2, #0
   18bba:	701a      	strb	r2, [r3, #0]
   18bbc:	e031      	b.n	18c22 <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   18bbe:	1dfb      	adds	r3, r7, #7
   18bc0:	781b      	ldrb	r3, [r3, #0]
   18bc2:	4a25      	ldr	r2, [pc, #148]	; (18c58 <prvTraceGetObjectHandle+0x18c>)
   18bc4:	0059      	lsls	r1, r3, #1
   18bc6:	5a8a      	ldrh	r2, [r1, r2]
   18bc8:	3201      	adds	r2, #1
   18bca:	b291      	uxth	r1, r2
   18bcc:	4a22      	ldr	r2, [pc, #136]	; (18c58 <prvTraceGetObjectHandle+0x18c>)
   18bce:	005b      	lsls	r3, r3, #1
   18bd0:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   18bd2:	1dfb      	adds	r3, r7, #7
   18bd4:	781a      	ldrb	r2, [r3, #0]
   18bd6:	4b20      	ldr	r3, [pc, #128]	; (18c58 <prvTraceGetObjectHandle+0x18c>)
   18bd8:	0052      	lsls	r2, r2, #1
   18bda:	5ad3      	ldrh	r3, [r2, r3]
   18bdc:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   18bde:	1dfb      	adds	r3, r7, #7
   18be0:	781b      	ldrb	r3, [r3, #0]
   18be2:	4a1d      	ldr	r2, [pc, #116]	; (18c58 <prvTraceGetObjectHandle+0x18c>)
   18be4:	3308      	adds	r3, #8
   18be6:	005b      	lsls	r3, r3, #1
   18be8:	18d3      	adds	r3, r2, r3
   18bea:	3302      	adds	r3, #2
   18bec:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   18bee:	1acb      	subs	r3, r1, r3
   18bf0:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   18bf2:	1dfb      	adds	r3, r7, #7
   18bf4:	781b      	ldrb	r3, [r3, #0]
   18bf6:	4a18      	ldr	r2, [pc, #96]	; (18c58 <prvTraceGetObjectHandle+0x18c>)
   18bf8:	3318      	adds	r3, #24
   18bfa:	005b      	lsls	r3, r3, #1
   18bfc:	18d3      	adds	r3, r2, r3
   18bfe:	3306      	adds	r3, #6
   18c00:	881b      	ldrh	r3, [r3, #0]
   18c02:	001a      	movs	r2, r3
		if (hndCount >
   18c04:	697b      	ldr	r3, [r7, #20]
   18c06:	429a      	cmp	r2, r3
   18c08:	da0b      	bge.n	18c22 <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   18c0a:	1dfb      	adds	r3, r7, #7
   18c0c:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   18c0e:	697a      	ldr	r2, [r7, #20]
   18c10:	b2d2      	uxtb	r2, r2
   18c12:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   18c14:	4a10      	ldr	r2, [pc, #64]	; (18c58 <prvTraceGetObjectHandle+0x18c>)
   18c16:	3318      	adds	r3, #24
   18c18:	005b      	lsls	r3, r3, #1
   18c1a:	18d3      	adds	r3, r2, r3
   18c1c:	3306      	adds	r3, #6
   18c1e:	1c0a      	adds	r2, r1, #0
   18c20:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   18c22:	4b0c      	ldr	r3, [pc, #48]	; (18c54 <prvTraceGetObjectHandle+0x188>)
   18c24:	681b      	ldr	r3, [r3, #0]
   18c26:	1e5a      	subs	r2, r3, #1
   18c28:	4b0a      	ldr	r3, [pc, #40]	; (18c54 <prvTraceGetObjectHandle+0x188>)
   18c2a:	601a      	str	r2, [r3, #0]
   18c2c:	69bb      	ldr	r3, [r7, #24]
   18c2e:	60bb      	str	r3, [r7, #8]
   18c30:	68bb      	ldr	r3, [r7, #8]
   18c32:	f383 8810 	msr	PRIMASK, r3

	return handle;
   18c36:	231f      	movs	r3, #31
   18c38:	18fb      	adds	r3, r7, r3
   18c3a:	781b      	ldrb	r3, [r3, #0]
}
   18c3c:	0018      	movs	r0, r3
   18c3e:	46bd      	mov	sp, r7
   18c40:	b008      	add	sp, #32
   18c42:	bd80      	pop	{r7, pc}
   18c44:	20000c58 	.word	0x20000c58
   18c48:	000368f4 	.word	0x000368f4
   18c4c:	00018de9 	.word	0x00018de9
   18c50:	000374d4 	.word	0x000374d4
   18c54:	20000bb0 	.word	0x20000bb0
   18c58:	20000bc8 	.word	0x20000bc8
   18c5c:	20000c5c 	.word	0x20000c5c
   18c60:	00017b09 	.word	0x00017b09

00018c64 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   18c64:	b590      	push	{r4, r7, lr}
   18c66:	b085      	sub	sp, #20
   18c68:	af00      	add	r7, sp, #0
   18c6a:	0002      	movs	r2, r0
   18c6c:	1dfb      	adds	r3, r7, #7
   18c6e:	701a      	strb	r2, [r3, #0]
   18c70:	1dbb      	adds	r3, r7, #6
   18c72:	1c0a      	adds	r2, r1, #0
   18c74:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   18c76:	230e      	movs	r3, #14
   18c78:	18fc      	adds	r4, r7, r3
   18c7a:	1dfb      	adds	r3, r7, #7
   18c7c:	781a      	ldrb	r2, [r3, #0]
   18c7e:	1dbb      	adds	r3, r7, #6
   18c80:	781b      	ldrb	r3, [r3, #0]
   18c82:	0011      	movs	r1, r2
   18c84:	0018      	movs	r0, r3
   18c86:	4b09      	ldr	r3, [pc, #36]	; (18cac <prvMarkObjectAsUsed+0x48>)
   18c88:	4798      	blx	r3
   18c8a:	0003      	movs	r3, r0
   18c8c:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   18c8e:	4b08      	ldr	r3, [pc, #32]	; (18cb0 <prvMarkObjectAsUsed+0x4c>)
   18c90:	681a      	ldr	r2, [r3, #0]
   18c92:	230e      	movs	r3, #14
   18c94:	18fb      	adds	r3, r7, r3
   18c96:	881b      	ldrh	r3, [r3, #0]
   18c98:	219c      	movs	r1, #156	; 0x9c
   18c9a:	18d3      	adds	r3, r2, r3
   18c9c:	185b      	adds	r3, r3, r1
   18c9e:	2201      	movs	r2, #1
   18ca0:	701a      	strb	r2, [r3, #0]
}
   18ca2:	46c0      	nop			; (mov r8, r8)
   18ca4:	46bd      	mov	sp, r7
   18ca6:	b005      	add	sp, #20
   18ca8:	bd90      	pop	{r4, r7, pc}
   18caa:	46c0      	nop			; (mov r8, r8)
   18cac:	000189f5 	.word	0x000189f5
   18cb0:	20000c58 	.word	0x20000c58

00018cb4 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   18cb4:	b580      	push	{r7, lr}
   18cb6:	b086      	sub	sp, #24
   18cb8:	af00      	add	r7, sp, #0
   18cba:	60f8      	str	r0, [r7, #12]
   18cbc:	60b9      	str	r1, [r7, #8]
   18cbe:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   18cc0:	2300      	movs	r3, #0
   18cc2:	617b      	str	r3, [r7, #20]
   18cc4:	e010      	b.n	18ce8 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   18cc6:	68fa      	ldr	r2, [r7, #12]
   18cc8:	697b      	ldr	r3, [r7, #20]
   18cca:	18d3      	adds	r3, r2, r3
   18ccc:	68b9      	ldr	r1, [r7, #8]
   18cce:	697a      	ldr	r2, [r7, #20]
   18cd0:	188a      	adds	r2, r1, r2
   18cd2:	7812      	ldrb	r2, [r2, #0]
   18cd4:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   18cd6:	68ba      	ldr	r2, [r7, #8]
   18cd8:	697b      	ldr	r3, [r7, #20]
   18cda:	18d3      	adds	r3, r2, r3
   18cdc:	781b      	ldrb	r3, [r3, #0]
   18cde:	2b00      	cmp	r3, #0
   18ce0:	d007      	beq.n	18cf2 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   18ce2:	697b      	ldr	r3, [r7, #20]
   18ce4:	3301      	adds	r3, #1
   18ce6:	617b      	str	r3, [r7, #20]
   18ce8:	697a      	ldr	r2, [r7, #20]
   18cea:	687b      	ldr	r3, [r7, #4]
   18cec:	429a      	cmp	r2, r3
   18cee:	d3ea      	bcc.n	18cc6 <prvStrncpy+0x12>
			break;
	}
}
   18cf0:	e000      	b.n	18cf4 <prvStrncpy+0x40>
			break;
   18cf2:	46c0      	nop			; (mov r8, r8)
}
   18cf4:	46c0      	nop			; (mov r8, r8)
   18cf6:	46bd      	mov	sp, r7
   18cf8:	b006      	add	sp, #24
   18cfa:	bd80      	pop	{r7, pc}

00018cfc <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   18cfc:	b580      	push	{r7, lr}
   18cfe:	b082      	sub	sp, #8
   18d00:	af00      	add	r7, sp, #0
   18d02:	603a      	str	r2, [r7, #0]
   18d04:	1dfb      	adds	r3, r7, #7
   18d06:	1c02      	adds	r2, r0, #0
   18d08:	701a      	strb	r2, [r3, #0]
   18d0a:	1dbb      	adds	r3, r7, #6
   18d0c:	1c0a      	adds	r2, r1, #0
   18d0e:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   18d10:	683b      	ldr	r3, [r7, #0]
   18d12:	2b00      	cmp	r3, #0
   18d14:	d104      	bne.n	18d20 <prvTraceSetObjectName+0x24>
   18d16:	4b2a      	ldr	r3, [pc, #168]	; (18dc0 <prvTraceSetObjectName+0xc4>)
   18d18:	0018      	movs	r0, r3
   18d1a:	4b2a      	ldr	r3, [pc, #168]	; (18dc4 <prvTraceSetObjectName+0xc8>)
   18d1c:	4798      	blx	r3
   18d1e:	e04b      	b.n	18db8 <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   18d20:	1dfb      	adds	r3, r7, #7
   18d22:	781b      	ldrb	r3, [r3, #0]
   18d24:	2b08      	cmp	r3, #8
   18d26:	d904      	bls.n	18d32 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   18d28:	4b27      	ldr	r3, [pc, #156]	; (18dc8 <prvTraceSetObjectName+0xcc>)
   18d2a:	0018      	movs	r0, r3
   18d2c:	4b25      	ldr	r3, [pc, #148]	; (18dc4 <prvTraceSetObjectName+0xc8>)
   18d2e:	4798      	blx	r3
		return;
   18d30:	e042      	b.n	18db8 <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   18d32:	1dbb      	adds	r3, r7, #6
   18d34:	781b      	ldrb	r3, [r3, #0]
   18d36:	2b00      	cmp	r3, #0
   18d38:	d104      	bne.n	18d44 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   18d3a:	4b24      	ldr	r3, [pc, #144]	; (18dcc <prvTraceSetObjectName+0xd0>)
   18d3c:	0018      	movs	r0, r3
   18d3e:	4b21      	ldr	r3, [pc, #132]	; (18dc4 <prvTraceSetObjectName+0xc8>)
   18d40:	4798      	blx	r3
		return;
   18d42:	e039      	b.n	18db8 <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   18d44:	4b22      	ldr	r3, [pc, #136]	; (18dd0 <prvTraceSetObjectName+0xd4>)
   18d46:	681a      	ldr	r2, [r3, #0]
   18d48:	1dfb      	adds	r3, r7, #7
   18d4a:	781b      	ldrb	r3, [r3, #0]
   18d4c:	2164      	movs	r1, #100	; 0x64
   18d4e:	18d3      	adds	r3, r2, r3
   18d50:	185b      	adds	r3, r3, r1
   18d52:	781b      	ldrb	r3, [r3, #0]
   18d54:	1dba      	adds	r2, r7, #6
   18d56:	7812      	ldrb	r2, [r2, #0]
   18d58:	429a      	cmp	r2, r3
   18d5a:	d909      	bls.n	18d70 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   18d5c:	1dfb      	adds	r3, r7, #7
   18d5e:	781b      	ldrb	r3, [r3, #0]
   18d60:	0018      	movs	r0, r3
   18d62:	4b1c      	ldr	r3, [pc, #112]	; (18dd4 <prvTraceSetObjectName+0xd8>)
   18d64:	4798      	blx	r3
   18d66:	0003      	movs	r3, r0
   18d68:	0018      	movs	r0, r3
   18d6a:	4b16      	ldr	r3, [pc, #88]	; (18dc4 <prvTraceSetObjectName+0xc8>)
   18d6c:	4798      	blx	r3
   18d6e:	e023      	b.n	18db8 <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   18d70:	1dfb      	adds	r3, r7, #7
   18d72:	781a      	ldrb	r2, [r3, #0]
   18d74:	1dbb      	adds	r3, r7, #6
   18d76:	781b      	ldrb	r3, [r3, #0]
   18d78:	0011      	movs	r1, r2
   18d7a:	0018      	movs	r0, r3
   18d7c:	4b16      	ldr	r3, [pc, #88]	; (18dd8 <prvTraceSetObjectName+0xdc>)
   18d7e:	4798      	blx	r3
   18d80:	0003      	movs	r3, r0
   18d82:	001a      	movs	r2, r3
   18d84:	4b15      	ldr	r3, [pc, #84]	; (18ddc <prvTraceSetObjectName+0xe0>)
   18d86:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   18d88:	4b15      	ldr	r3, [pc, #84]	; (18de0 <prvTraceSetObjectName+0xe4>)
   18d8a:	681b      	ldr	r3, [r3, #0]
   18d8c:	2b00      	cmp	r3, #0
   18d8e:	d113      	bne.n	18db8 <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   18d90:	4b0f      	ldr	r3, [pc, #60]	; (18dd0 <prvTraceSetObjectName+0xd4>)
   18d92:	681a      	ldr	r2, [r3, #0]
   18d94:	4b11      	ldr	r3, [pc, #68]	; (18ddc <prvTraceSetObjectName+0xe0>)
   18d96:	881b      	ldrh	r3, [r3, #0]
   18d98:	3398      	adds	r3, #152	; 0x98
   18d9a:	18d3      	adds	r3, r2, r3
   18d9c:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   18d9e:	4b0c      	ldr	r3, [pc, #48]	; (18dd0 <prvTraceSetObjectName+0xd4>)
   18da0:	681a      	ldr	r2, [r3, #0]
   18da2:	1dfb      	adds	r3, r7, #7
   18da4:	781b      	ldrb	r3, [r3, #0]
   18da6:	2170      	movs	r1, #112	; 0x70
   18da8:	18d3      	adds	r3, r2, r3
   18daa:	185b      	adds	r3, r3, r1
   18dac:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   18dae:	001a      	movs	r2, r3
   18db0:	683b      	ldr	r3, [r7, #0]
   18db2:	0019      	movs	r1, r3
   18db4:	4b0b      	ldr	r3, [pc, #44]	; (18de4 <prvTraceSetObjectName+0xe8>)
   18db6:	4798      	blx	r3
		}
	}
}
   18db8:	46bd      	mov	sp, r7
   18dba:	b002      	add	sp, #8
   18dbc:	bd80      	pop	{r7, pc}
   18dbe:	46c0      	nop			; (mov r8, r8)
   18dc0:	000375d8 	.word	0x000375d8
   18dc4:	00018de9 	.word	0x00018de9
   18dc8:	0003760c 	.word	0x0003760c
   18dcc:	0003763c 	.word	0x0003763c
   18dd0:	20000c58 	.word	0x20000c58
   18dd4:	00017b09 	.word	0x00017b09
   18dd8:	000189f5 	.word	0x000189f5
   18ddc:	20000c60 	.word	0x20000c60
   18de0:	20000bb8 	.word	0x20000bb8
   18de4:	00018cb5 	.word	0x00018cb5

00018de8 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   18de8:	b580      	push	{r7, lr}
   18dea:	b082      	sub	sp, #8
   18dec:	af00      	add	r7, sp, #0
   18dee:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   18df0:	4b11      	ldr	r3, [pc, #68]	; (18e38 <prvTraceError+0x50>)
   18df2:	681b      	ldr	r3, [r3, #0]
   18df4:	2b00      	cmp	r3, #0
   18df6:	d001      	beq.n	18dfc <prvTraceError+0x14>
	{
		vTraceStop();
   18df8:	4b10      	ldr	r3, [pc, #64]	; (18e3c <prvTraceError+0x54>)
   18dfa:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   18dfc:	4b10      	ldr	r3, [pc, #64]	; (18e40 <prvTraceError+0x58>)
   18dfe:	681b      	ldr	r3, [r3, #0]
   18e00:	2b00      	cmp	r3, #0
   18e02:	d115      	bne.n	18e30 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   18e04:	4b0e      	ldr	r3, [pc, #56]	; (18e40 <prvTraceError+0x58>)
   18e06:	687a      	ldr	r2, [r7, #4]
   18e08:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   18e0a:	4b0b      	ldr	r3, [pc, #44]	; (18e38 <prvTraceError+0x50>)
   18e0c:	681b      	ldr	r3, [r3, #0]
   18e0e:	2b00      	cmp	r3, #0
   18e10:	d00e      	beq.n	18e30 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   18e12:	4b09      	ldr	r3, [pc, #36]	; (18e38 <prvTraceError+0x50>)
   18e14:	681b      	ldr	r3, [r3, #0]
   18e16:	4a0b      	ldr	r2, [pc, #44]	; (18e44 <prvTraceError+0x5c>)
   18e18:	1898      	adds	r0, r3, r2
   18e1a:	4b09      	ldr	r3, [pc, #36]	; (18e40 <prvTraceError+0x58>)
   18e1c:	681b      	ldr	r3, [r3, #0]
   18e1e:	2250      	movs	r2, #80	; 0x50
   18e20:	0019      	movs	r1, r3
   18e22:	4b09      	ldr	r3, [pc, #36]	; (18e48 <prvTraceError+0x60>)
   18e24:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   18e26:	4b04      	ldr	r3, [pc, #16]	; (18e38 <prvTraceError+0x50>)
   18e28:	681b      	ldr	r3, [r3, #0]
   18e2a:	4a08      	ldr	r2, [pc, #32]	; (18e4c <prvTraceError+0x64>)
   18e2c:	2101      	movs	r1, #1
   18e2e:	5099      	str	r1, [r3, r2]
		}
	}
}
   18e30:	46c0      	nop			; (mov r8, r8)
   18e32:	46bd      	mov	sp, r7
   18e34:	b002      	add	sp, #8
   18e36:	bd80      	pop	{r7, pc}
   18e38:	20000c58 	.word	0x20000c58
   18e3c:	00017cad 	.word	0x00017cad
   18e40:	20000bb8 	.word	0x20000bb8
   18e44:	000006bc 	.word	0x000006bc
   18e48:	00018cb5 	.word	0x00018cb5
   18e4c:	000006b4 	.word	0x000006b4

00018e50 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   18e50:	b580      	push	{r7, lr}
   18e52:	b086      	sub	sp, #24
   18e54:	af00      	add	r7, sp, #0
   18e56:	0002      	movs	r2, r0
   18e58:	1dfb      	adds	r3, r7, #7
   18e5a:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   18e5c:	2300      	movs	r3, #0
   18e5e:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   18e60:	2300      	movs	r3, #0
   18e62:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   18e64:	1dfb      	adds	r3, r7, #7
   18e66:	781b      	ldrb	r3, [r3, #0]
   18e68:	2b00      	cmp	r3, #0
   18e6a:	d000      	beq.n	18e6e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   18e6c:	e089      	b.n	18f82 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   18e6e:	4b49      	ldr	r3, [pc, #292]	; (18f94 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   18e70:	0018      	movs	r0, r3
   18e72:	4b49      	ldr	r3, [pc, #292]	; (18f98 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   18e74:	4798      	blx	r3
   18e76:	e08a      	b.n	18f8e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   18e78:	4b48      	ldr	r3, [pc, #288]	; (18f9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18e7a:	681b      	ldr	r3, [r3, #0]
   18e7c:	69da      	ldr	r2, [r3, #28]
   18e7e:	697b      	ldr	r3, [r7, #20]
   18e80:	18d3      	adds	r3, r2, r3
   18e82:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   18e84:	4b45      	ldr	r3, [pc, #276]	; (18f9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18e86:	6819      	ldr	r1, [r3, #0]
   18e88:	693b      	ldr	r3, [r7, #16]
   18e8a:	009a      	lsls	r2, r3, #2
   18e8c:	23e2      	movs	r3, #226	; 0xe2
   18e8e:	00db      	lsls	r3, r3, #3
   18e90:	188a      	adds	r2, r1, r2
   18e92:	18d3      	adds	r3, r2, r3
   18e94:	781b      	ldrb	r3, [r3, #0]
   18e96:	2b98      	cmp	r3, #152	; 0x98
   18e98:	d934      	bls.n	18f04 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   18e9a:	4b40      	ldr	r3, [pc, #256]	; (18f9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18e9c:	6819      	ldr	r1, [r3, #0]
   18e9e:	693b      	ldr	r3, [r7, #16]
   18ea0:	009a      	lsls	r2, r3, #2
   18ea2:	23e2      	movs	r3, #226	; 0xe2
   18ea4:	00db      	lsls	r3, r3, #3
   18ea6:	188a      	adds	r2, r1, r2
   18ea8:	18d3      	adds	r3, r2, r3
   18eaa:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   18eac:	2ba7      	cmp	r3, #167	; 0xa7
   18eae:	d829      	bhi.n	18f04 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   18eb0:	4b3a      	ldr	r3, [pc, #232]	; (18f9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18eb2:	6819      	ldr	r1, [r3, #0]
   18eb4:	693b      	ldr	r3, [r7, #16]
   18eb6:	009a      	lsls	r2, r3, #2
   18eb8:	23e2      	movs	r3, #226	; 0xe2
   18eba:	00db      	lsls	r3, r3, #3
   18ebc:	188a      	adds	r2, r1, r2
   18ebe:	18d3      	adds	r3, r2, r3
   18ec0:	781a      	ldrb	r2, [r3, #0]
   18ec2:	230f      	movs	r3, #15
   18ec4:	18fb      	adds	r3, r7, r3
   18ec6:	3268      	adds	r2, #104	; 0x68
   18ec8:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   18eca:	230f      	movs	r3, #15
   18ecc:	18fb      	adds	r3, r7, r3
   18ece:	781a      	ldrb	r2, [r3, #0]
   18ed0:	693b      	ldr	r3, [r7, #16]
   18ed2:	18d2      	adds	r2, r2, r3
   18ed4:	4b31      	ldr	r3, [pc, #196]	; (18f9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18ed6:	681b      	ldr	r3, [r3, #0]
   18ed8:	699b      	ldr	r3, [r3, #24]
   18eda:	429a      	cmp	r2, r3
   18edc:	d24d      	bcs.n	18f7a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   18ede:	4b2f      	ldr	r3, [pc, #188]	; (18f9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18ee0:	681a      	ldr	r2, [r3, #0]
   18ee2:	693b      	ldr	r3, [r7, #16]
   18ee4:	009b      	lsls	r3, r3, #2
   18ee6:	21e2      	movs	r1, #226	; 0xe2
   18ee8:	00c9      	lsls	r1, r1, #3
   18eea:	468c      	mov	ip, r1
   18eec:	4463      	add	r3, ip
   18eee:	18d0      	adds	r0, r2, r3
   18ef0:	230f      	movs	r3, #15
   18ef2:	18fb      	adds	r3, r7, r3
   18ef4:	781b      	ldrb	r3, [r3, #0]
   18ef6:	3301      	adds	r3, #1
   18ef8:	009b      	lsls	r3, r3, #2
   18efa:	001a      	movs	r2, r3
   18efc:	2100      	movs	r1, #0
   18efe:	4b28      	ldr	r3, [pc, #160]	; (18fa0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   18f00:	4798      	blx	r3
		{
   18f02:	e03a      	b.n	18f7a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   18f04:	4b25      	ldr	r3, [pc, #148]	; (18f9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18f06:	6819      	ldr	r1, [r3, #0]
   18f08:	693b      	ldr	r3, [r7, #16]
   18f0a:	009a      	lsls	r2, r3, #2
   18f0c:	23e2      	movs	r3, #226	; 0xe2
   18f0e:	00db      	lsls	r3, r3, #3
   18f10:	188a      	adds	r2, r1, r2
   18f12:	18d3      	adds	r3, r2, r3
   18f14:	781b      	ldrb	r3, [r3, #0]
   18f16:	2b01      	cmp	r3, #1
   18f18:	d130      	bne.n	18f7c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   18f1a:	693b      	ldr	r3, [r7, #16]
   18f1c:	1c5a      	adds	r2, r3, #1
   18f1e:	4b1f      	ldr	r3, [pc, #124]	; (18f9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18f20:	681b      	ldr	r3, [r3, #0]
   18f22:	699b      	ldr	r3, [r3, #24]
   18f24:	429a      	cmp	r2, r3
   18f26:	d20e      	bcs.n	18f46 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   18f28:	4b1c      	ldr	r3, [pc, #112]	; (18f9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18f2a:	681a      	ldr	r2, [r3, #0]
   18f2c:	693b      	ldr	r3, [r7, #16]
   18f2e:	009b      	lsls	r3, r3, #2
   18f30:	21e2      	movs	r1, #226	; 0xe2
   18f32:	00c9      	lsls	r1, r1, #3
   18f34:	468c      	mov	ip, r1
   18f36:	4463      	add	r3, ip
   18f38:	18d3      	adds	r3, r2, r3
   18f3a:	2208      	movs	r2, #8
   18f3c:	2100      	movs	r1, #0
   18f3e:	0018      	movs	r0, r3
   18f40:	4b17      	ldr	r3, [pc, #92]	; (18fa0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   18f42:	4798      	blx	r3
   18f44:	e01a      	b.n	18f7c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   18f46:	4b15      	ldr	r3, [pc, #84]	; (18f9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18f48:	681b      	ldr	r3, [r3, #0]
   18f4a:	22e2      	movs	r2, #226	; 0xe2
   18f4c:	00d2      	lsls	r2, r2, #3
   18f4e:	4694      	mov	ip, r2
   18f50:	4463      	add	r3, ip
   18f52:	2204      	movs	r2, #4
   18f54:	2100      	movs	r1, #0
   18f56:	0018      	movs	r0, r3
   18f58:	4b11      	ldr	r3, [pc, #68]	; (18fa0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   18f5a:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   18f5c:	4b0f      	ldr	r3, [pc, #60]	; (18f9c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18f5e:	681a      	ldr	r2, [r3, #0]
   18f60:	693b      	ldr	r3, [r7, #16]
   18f62:	009b      	lsls	r3, r3, #2
   18f64:	21e2      	movs	r1, #226	; 0xe2
   18f66:	00c9      	lsls	r1, r1, #3
   18f68:	468c      	mov	ip, r1
   18f6a:	4463      	add	r3, ip
   18f6c:	18d3      	adds	r3, r2, r3
   18f6e:	2204      	movs	r2, #4
   18f70:	2100      	movs	r1, #0
   18f72:	0018      	movs	r0, r3
   18f74:	4b0a      	ldr	r3, [pc, #40]	; (18fa0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   18f76:	4798      	blx	r3
   18f78:	e000      	b.n	18f7c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   18f7a:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   18f7c:	697b      	ldr	r3, [r7, #20]
   18f7e:	3301      	adds	r3, #1
   18f80:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   18f82:	1dfb      	adds	r3, r7, #7
   18f84:	781a      	ldrb	r2, [r3, #0]
   18f86:	697b      	ldr	r3, [r7, #20]
   18f88:	429a      	cmp	r2, r3
   18f8a:	d900      	bls.n	18f8e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   18f8c:	e774      	b.n	18e78 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   18f8e:	46bd      	mov	sp, r7
   18f90:	b006      	add	sp, #24
   18f92:	bd80      	pop	{r7, pc}
   18f94:	0003769c 	.word	0x0003769c
   18f98:	00018de9 	.word	0x00018de9
   18f9c:	20000c58 	.word	0x20000c58
   18fa0:	0003431b 	.word	0x0003431b

00018fa4 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   18fa4:	b580      	push	{r7, lr}
   18fa6:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   18fa8:	4b12      	ldr	r3, [pc, #72]	; (18ff4 <prvTraceUpdateCounters+0x50>)
   18faa:	681b      	ldr	r3, [r3, #0]
   18fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18fae:	2b00      	cmp	r3, #0
   18fb0:	d01c      	beq.n	18fec <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   18fb2:	4b10      	ldr	r3, [pc, #64]	; (18ff4 <prvTraceUpdateCounters+0x50>)
   18fb4:	681b      	ldr	r3, [r3, #0]
   18fb6:	695a      	ldr	r2, [r3, #20]
   18fb8:	3201      	adds	r2, #1
   18fba:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   18fbc:	4b0d      	ldr	r3, [pc, #52]	; (18ff4 <prvTraceUpdateCounters+0x50>)
   18fbe:	681b      	ldr	r3, [r3, #0]
   18fc0:	69da      	ldr	r2, [r3, #28]
   18fc2:	3201      	adds	r2, #1
   18fc4:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   18fc6:	4b0b      	ldr	r3, [pc, #44]	; (18ff4 <prvTraceUpdateCounters+0x50>)
   18fc8:	681b      	ldr	r3, [r3, #0]
   18fca:	69da      	ldr	r2, [r3, #28]
   18fcc:	232c      	movs	r3, #44	; 0x2c
   18fce:	33ff      	adds	r3, #255	; 0xff
   18fd0:	429a      	cmp	r2, r3
   18fd2:	d907      	bls.n	18fe4 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   18fd4:	4b07      	ldr	r3, [pc, #28]	; (18ff4 <prvTraceUpdateCounters+0x50>)
   18fd6:	681b      	ldr	r3, [r3, #0]
   18fd8:	2201      	movs	r2, #1
   18fda:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   18fdc:	4b05      	ldr	r3, [pc, #20]	; (18ff4 <prvTraceUpdateCounters+0x50>)
   18fde:	681b      	ldr	r3, [r3, #0]
   18fe0:	2200      	movs	r2, #0
   18fe2:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   18fe4:	2001      	movs	r0, #1
   18fe6:	4b04      	ldr	r3, [pc, #16]	; (18ff8 <prvTraceUpdateCounters+0x54>)
   18fe8:	4798      	blx	r3
   18fea:	e000      	b.n	18fee <prvTraceUpdateCounters+0x4a>
		return;
   18fec:	46c0      	nop			; (mov r8, r8)
#endif
}
   18fee:	46bd      	mov	sp, r7
   18ff0:	bd80      	pop	{r7, pc}
   18ff2:	46c0      	nop			; (mov r8, r8)
   18ff4:	20000c58 	.word	0x20000c58
   18ff8:	00018e51 	.word	0x00018e51

00018ffc <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   18ffc:	b5b0      	push	{r4, r5, r7, lr}
   18ffe:	b086      	sub	sp, #24
   19000:	af00      	add	r7, sp, #0
   19002:	0002      	movs	r2, r0
   19004:	1dbb      	adds	r3, r7, #6
   19006:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   19008:	2300      	movs	r3, #0
   1900a:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   1900c:	2300      	movs	r3, #0
   1900e:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   19010:	2300      	movs	r3, #0
   19012:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   19014:	1dbb      	adds	r3, r7, #6
   19016:	881b      	ldrh	r3, [r3, #0]
   19018:	2bff      	cmp	r3, #255	; 0xff
   1901a:	d00a      	beq.n	19032 <prvTraceGetDTS+0x36>
   1901c:	1dbb      	adds	r3, r7, #6
   1901e:	881b      	ldrh	r3, [r3, #0]
   19020:	4a60      	ldr	r2, [pc, #384]	; (191a4 <prvTraceGetDTS+0x1a8>)
   19022:	4293      	cmp	r3, r2
   19024:	d005      	beq.n	19032 <prvTraceGetDTS+0x36>
   19026:	4b60      	ldr	r3, [pc, #384]	; (191a8 <prvTraceGetDTS+0x1ac>)
   19028:	0018      	movs	r0, r3
   1902a:	4b60      	ldr	r3, [pc, #384]	; (191ac <prvTraceGetDTS+0x1b0>)
   1902c:	4798      	blx	r3
   1902e:	2300      	movs	r3, #0
   19030:	e0b3      	b.n	1919a <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   19032:	4b5f      	ldr	r3, [pc, #380]	; (191b0 <prvTraceGetDTS+0x1b4>)
   19034:	681b      	ldr	r3, [r3, #0]
   19036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19038:	2b00      	cmp	r3, #0
   1903a:	d118      	bne.n	1906e <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   1903c:	4b5d      	ldr	r3, [pc, #372]	; (191b4 <prvTraceGetDTS+0x1b8>)
   1903e:	681b      	ldr	r3, [r3, #0]
   19040:	2b00      	cmp	r3, #0
   19042:	d006      	beq.n	19052 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   19044:	4b5a      	ldr	r3, [pc, #360]	; (191b0 <prvTraceGetDTS+0x1b4>)
   19046:	681b      	ldr	r3, [r3, #0]
   19048:	4a5a      	ldr	r2, [pc, #360]	; (191b4 <prvTraceGetDTS+0x1b8>)
   1904a:	6812      	ldr	r2, [r2, #0]
   1904c:	0892      	lsrs	r2, r2, #2
   1904e:	625a      	str	r2, [r3, #36]	; 0x24
   19050:	e00d      	b.n	1906e <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   19052:	4b59      	ldr	r3, [pc, #356]	; (191b8 <prvTraceGetDTS+0x1bc>)
   19054:	681a      	ldr	r2, [r3, #0]
   19056:	4b59      	ldr	r3, [pc, #356]	; (191bc <prvTraceGetDTS+0x1c0>)
   19058:	681b      	ldr	r3, [r3, #0]
   1905a:	429a      	cmp	r2, r3
   1905c:	d007      	beq.n	1906e <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   1905e:	4b54      	ldr	r3, [pc, #336]	; (191b0 <prvTraceGetDTS+0x1b4>)
   19060:	681c      	ldr	r4, [r3, #0]
   19062:	2000      	movs	r0, #0
   19064:	4b56      	ldr	r3, [pc, #344]	; (191c0 <prvTraceGetDTS+0x1c4>)
   19066:	4798      	blx	r3
   19068:	0003      	movs	r3, r0
   1906a:	089b      	lsrs	r3, r3, #2
   1906c:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   1906e:	230c      	movs	r3, #12
   19070:	18fb      	adds	r3, r7, r3
   19072:	0018      	movs	r0, r3
   19074:	4b53      	ldr	r3, [pc, #332]	; (191c4 <prvTraceGetDTS+0x1c8>)
   19076:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   19078:	68fa      	ldr	r2, [r7, #12]
   1907a:	4b53      	ldr	r3, [pc, #332]	; (191c8 <prvTraceGetDTS+0x1cc>)
   1907c:	681b      	ldr	r3, [r3, #0]
   1907e:	1ad3      	subs	r3, r2, r3
   19080:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   19082:	68fa      	ldr	r2, [r7, #12]
   19084:	4b50      	ldr	r3, [pc, #320]	; (191c8 <prvTraceGetDTS+0x1cc>)
   19086:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   19088:	4b49      	ldr	r3, [pc, #292]	; (191b0 <prvTraceGetDTS+0x1b4>)
   1908a:	681b      	ldr	r3, [r3, #0]
   1908c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1908e:	2b00      	cmp	r3, #0
   19090:	d044      	beq.n	1911c <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   19092:	4b47      	ldr	r3, [pc, #284]	; (191b0 <prvTraceGetDTS+0x1b4>)
   19094:	681b      	ldr	r3, [r3, #0]
   19096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   19098:	693b      	ldr	r3, [r7, #16]
   1909a:	429a      	cmp	r2, r3
   1909c:	d21e      	bcs.n	190dc <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   1909e:	4b44      	ldr	r3, [pc, #272]	; (191b0 <prvTraceGetDTS+0x1b4>)
   190a0:	681c      	ldr	r4, [r3, #0]
   190a2:	4b43      	ldr	r3, [pc, #268]	; (191b0 <prvTraceGetDTS+0x1b4>)
   190a4:	681b      	ldr	r3, [r3, #0]
   190a6:	6add      	ldr	r5, [r3, #44]	; 0x2c
   190a8:	4b41      	ldr	r3, [pc, #260]	; (191b0 <prvTraceGetDTS+0x1b4>)
   190aa:	681b      	ldr	r3, [r3, #0]
   190ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   190ae:	4b47      	ldr	r3, [pc, #284]	; (191cc <prvTraceGetDTS+0x1d0>)
   190b0:	0011      	movs	r1, r2
   190b2:	6938      	ldr	r0, [r7, #16]
   190b4:	4798      	blx	r3
   190b6:	0003      	movs	r3, r0
   190b8:	18eb      	adds	r3, r5, r3
   190ba:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   190bc:	4b3c      	ldr	r3, [pc, #240]	; (191b0 <prvTraceGetDTS+0x1b4>)
   190be:	681c      	ldr	r4, [r3, #0]
   190c0:	4b3b      	ldr	r3, [pc, #236]	; (191b0 <prvTraceGetDTS+0x1b4>)
   190c2:	681b      	ldr	r3, [r3, #0]
   190c4:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   190c6:	4b3a      	ldr	r3, [pc, #232]	; (191b0 <prvTraceGetDTS+0x1b4>)
   190c8:	681b      	ldr	r3, [r3, #0]
   190ca:	6a59      	ldr	r1, [r3, #36]	; 0x24
   190cc:	693a      	ldr	r2, [r7, #16]
   190ce:	4b40      	ldr	r3, [pc, #256]	; (191d0 <prvTraceGetDTS+0x1d4>)
   190d0:	0010      	movs	r0, r2
   190d2:	4798      	blx	r3
   190d4:	000b      	movs	r3, r1
   190d6:	18eb      	adds	r3, r5, r3
   190d8:	62a3      	str	r3, [r4, #40]	; 0x28
   190da:	e007      	b.n	190ec <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   190dc:	4b34      	ldr	r3, [pc, #208]	; (191b0 <prvTraceGetDTS+0x1b4>)
   190de:	681b      	ldr	r3, [r3, #0]
   190e0:	4a33      	ldr	r2, [pc, #204]	; (191b0 <prvTraceGetDTS+0x1b4>)
   190e2:	6812      	ldr	r2, [r2, #0]
   190e4:	6a91      	ldr	r1, [r2, #40]	; 0x28
   190e6:	693a      	ldr	r2, [r7, #16]
   190e8:	188a      	adds	r2, r1, r2
   190ea:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   190ec:	4b30      	ldr	r3, [pc, #192]	; (191b0 <prvTraceGetDTS+0x1b4>)
   190ee:	681b      	ldr	r3, [r3, #0]
   190f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   190f2:	4b2f      	ldr	r3, [pc, #188]	; (191b0 <prvTraceGetDTS+0x1b4>)
   190f4:	681b      	ldr	r3, [r3, #0]
   190f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   190f8:	429a      	cmp	r2, r3
   190fa:	d313      	bcc.n	19124 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   190fc:	4b2c      	ldr	r3, [pc, #176]	; (191b0 <prvTraceGetDTS+0x1b4>)
   190fe:	681b      	ldr	r3, [r3, #0]
   19100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19102:	3201      	adds	r2, #1
   19104:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   19106:	4b2a      	ldr	r3, [pc, #168]	; (191b0 <prvTraceGetDTS+0x1b4>)
   19108:	681b      	ldr	r3, [r3, #0]
   1910a:	4a29      	ldr	r2, [pc, #164]	; (191b0 <prvTraceGetDTS+0x1b4>)
   1910c:	6812      	ldr	r2, [r2, #0]
   1910e:	6a91      	ldr	r1, [r2, #40]	; 0x28
   19110:	4a27      	ldr	r2, [pc, #156]	; (191b0 <prvTraceGetDTS+0x1b4>)
   19112:	6812      	ldr	r2, [r2, #0]
   19114:	6a52      	ldr	r2, [r2, #36]	; 0x24
   19116:	1a8a      	subs	r2, r1, r2
   19118:	629a      	str	r2, [r3, #40]	; 0x28
   1911a:	e003      	b.n	19124 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   1911c:	4b24      	ldr	r3, [pc, #144]	; (191b0 <prvTraceGetDTS+0x1b4>)
   1911e:	681b      	ldr	r3, [r3, #0]
   19120:	68fa      	ldr	r2, [r7, #12]
   19122:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   19124:	1dbb      	adds	r3, r7, #6
   19126:	881a      	ldrh	r2, [r3, #0]
   19128:	693b      	ldr	r3, [r7, #16]
   1912a:	429a      	cmp	r2, r3
   1912c:	d22f      	bcs.n	1918e <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   1912e:	4b29      	ldr	r3, [pc, #164]	; (191d4 <prvTraceGetDTS+0x1d8>)
   19130:	4798      	blx	r3
   19132:	0003      	movs	r3, r0
   19134:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   19136:	697b      	ldr	r3, [r7, #20]
   19138:	2b00      	cmp	r3, #0
   1913a:	d028      	beq.n	1918e <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   1913c:	1dbb      	adds	r3, r7, #6
   1913e:	881b      	ldrh	r3, [r3, #0]
   19140:	4a18      	ldr	r2, [pc, #96]	; (191a4 <prvTraceGetDTS+0x1a8>)
   19142:	4293      	cmp	r3, r2
   19144:	d10b      	bne.n	1915e <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   19146:	697b      	ldr	r3, [r7, #20]
   19148:	22a9      	movs	r2, #169	; 0xa9
   1914a:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   1914c:	693b      	ldr	r3, [r7, #16]
   1914e:	0c1b      	lsrs	r3, r3, #16
   19150:	b29a      	uxth	r2, r3
   19152:	697b      	ldr	r3, [r7, #20]
   19154:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   19156:	697b      	ldr	r3, [r7, #20]
   19158:	2200      	movs	r2, #0
   1915a:	705a      	strb	r2, [r3, #1]
   1915c:	e015      	b.n	1918a <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   1915e:	1dbb      	adds	r3, r7, #6
   19160:	881b      	ldrh	r3, [r3, #0]
   19162:	2bff      	cmp	r3, #255	; 0xff
   19164:	d10d      	bne.n	19182 <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   19166:	697b      	ldr	r3, [r7, #20]
   19168:	22a8      	movs	r2, #168	; 0xa8
   1916a:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   1916c:	693b      	ldr	r3, [r7, #16]
   1916e:	0a1b      	lsrs	r3, r3, #8
   19170:	b29a      	uxth	r2, r3
   19172:	697b      	ldr	r3, [r7, #20]
   19174:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   19176:	693b      	ldr	r3, [r7, #16]
   19178:	0e1b      	lsrs	r3, r3, #24
   1917a:	b2da      	uxtb	r2, r3
   1917c:	697b      	ldr	r3, [r7, #20]
   1917e:	705a      	strb	r2, [r3, #1]
   19180:	e003      	b.n	1918a <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   19182:	4b15      	ldr	r3, [pc, #84]	; (191d8 <prvTraceGetDTS+0x1dc>)
   19184:	0018      	movs	r0, r3
   19186:	4b09      	ldr	r3, [pc, #36]	; (191ac <prvTraceGetDTS+0x1b0>)
   19188:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   1918a:	4b14      	ldr	r3, [pc, #80]	; (191dc <prvTraceGetDTS+0x1e0>)
   1918c:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   1918e:	693b      	ldr	r3, [r7, #16]
   19190:	b29b      	uxth	r3, r3
   19192:	1dba      	adds	r2, r7, #6
   19194:	8812      	ldrh	r2, [r2, #0]
   19196:	4013      	ands	r3, r2
   19198:	b29b      	uxth	r3, r3
}
   1919a:	0018      	movs	r0, r3
   1919c:	46bd      	mov	sp, r7
   1919e:	b006      	add	sp, #24
   191a0:	bdb0      	pop	{r4, r5, r7, pc}
   191a2:	46c0      	nop			; (mov r8, r8)
   191a4:	0000ffff 	.word	0x0000ffff
   191a8:	000376f4 	.word	0x000376f4
   191ac:	00018de9 	.word	0x00018de9
   191b0:	20000c58 	.word	0x20000c58
   191b4:	20000bb4 	.word	0x20000bb4
   191b8:	e000e018 	.word	0xe000e018
   191bc:	2000537c 	.word	0x2000537c
   191c0:	000291a1 	.word	0x000291a1
   191c4:	000191e1 	.word	0x000191e1
   191c8:	20000c64 	.word	0x20000c64
   191cc:	00031e9d 	.word	0x00031e9d
   191d0:	00031fa9 	.word	0x00031fa9
   191d4:	000189a1 	.word	0x000189a1
   191d8:	00037734 	.word	0x00037734
   191dc:	00018fa5 	.word	0x00018fa5

000191e0 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   191e0:	b580      	push	{r7, lr}
   191e2:	b084      	sub	sp, #16
   191e4:	af00      	add	r7, sp, #0
   191e6:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   191e8:	2300      	movs	r3, #0
   191ea:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   191ec:	2300      	movs	r3, #0
   191ee:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   191f0:	4b2d      	ldr	r3, [pc, #180]	; (192a8 <prvTracePortGetTimeStamp+0xc8>)
   191f2:	681b      	ldr	r3, [r3, #0]
   191f4:	2b01      	cmp	r3, #1
   191f6:	d107      	bne.n	19208 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   191f8:	687b      	ldr	r3, [r7, #4]
   191fa:	2b00      	cmp	r3, #0
   191fc:	d04f      	beq.n	1929e <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   191fe:	4b2b      	ldr	r3, [pc, #172]	; (192ac <prvTracePortGetTimeStamp+0xcc>)
   19200:	681a      	ldr	r2, [r3, #0]
   19202:	687b      	ldr	r3, [r7, #4]
   19204:	601a      	str	r2, [r3, #0]
		return;
   19206:	e04a      	b.n	1929e <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   19208:	4b29      	ldr	r3, [pc, #164]	; (192b0 <prvTracePortGetTimeStamp+0xd0>)
   1920a:	681a      	ldr	r2, [r3, #0]
   1920c:	4b29      	ldr	r3, [pc, #164]	; (192b4 <prvTracePortGetTimeStamp+0xd4>)
   1920e:	681b      	ldr	r3, [r3, #0]
   19210:	1ad3      	subs	r3, r2, r3
   19212:	3301      	adds	r3, #1
   19214:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   19216:	4b28      	ldr	r3, [pc, #160]	; (192b8 <prvTracePortGetTimeStamp+0xd8>)
   19218:	681a      	ldr	r2, [r3, #0]
   1921a:	4b28      	ldr	r3, [pc, #160]	; (192bc <prvTracePortGetTimeStamp+0xdc>)
   1921c:	681b      	ldr	r3, [r3, #0]
   1921e:	1ad3      	subs	r3, r2, r3
   19220:	3b01      	subs	r3, #1
   19222:	2b00      	cmp	r3, #0
   19224:	db03      	blt.n	1922e <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   19226:	4b24      	ldr	r3, [pc, #144]	; (192b8 <prvTracePortGetTimeStamp+0xd8>)
   19228:	681b      	ldr	r3, [r3, #0]
   1922a:	60fb      	str	r3, [r7, #12]
   1922c:	e002      	b.n	19234 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   1922e:	4b23      	ldr	r3, [pc, #140]	; (192bc <prvTracePortGetTimeStamp+0xdc>)
   19230:	681b      	ldr	r3, [r3, #0]
   19232:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   19234:	4b20      	ldr	r3, [pc, #128]	; (192b8 <prvTracePortGetTimeStamp+0xd8>)
   19236:	681b      	ldr	r3, [r3, #0]
   19238:	68fa      	ldr	r2, [r7, #12]
   1923a:	429a      	cmp	r2, r3
   1923c:	d107      	bne.n	1924e <prvTracePortGetTimeStamp+0x6e>
   1923e:	4b20      	ldr	r3, [pc, #128]	; (192c0 <prvTracePortGetTimeStamp+0xe0>)
   19240:	681b      	ldr	r3, [r3, #0]
   19242:	68ba      	ldr	r2, [r7, #8]
   19244:	429a      	cmp	r2, r3
   19246:	d202      	bcs.n	1924e <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   19248:	68fb      	ldr	r3, [r7, #12]
   1924a:	3301      	adds	r3, #1
   1924c:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   1924e:	687b      	ldr	r3, [r7, #4]
   19250:	2b00      	cmp	r3, #0
   19252:	d016      	beq.n	19282 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   19254:	4b16      	ldr	r3, [pc, #88]	; (192b0 <prvTracePortGetTimeStamp+0xd0>)
   19256:	681b      	ldr	r3, [r3, #0]
   19258:	3301      	adds	r3, #1
   1925a:	089b      	lsrs	r3, r3, #2
   1925c:	68fa      	ldr	r2, [r7, #12]
   1925e:	435a      	muls	r2, r3
   19260:	4b12      	ldr	r3, [pc, #72]	; (192ac <prvTracePortGetTimeStamp+0xcc>)
   19262:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   19264:	4b12      	ldr	r3, [pc, #72]	; (192b0 <prvTracePortGetTimeStamp+0xd0>)
   19266:	681b      	ldr	r3, [r3, #0]
   19268:	3301      	adds	r3, #1
   1926a:	2203      	movs	r2, #3
   1926c:	4013      	ands	r3, r2
   1926e:	68fa      	ldr	r2, [r7, #12]
   19270:	435a      	muls	r2, r3
   19272:	68bb      	ldr	r3, [r7, #8]
   19274:	18d3      	adds	r3, r2, r3
   19276:	089a      	lsrs	r2, r3, #2
   19278:	4b0c      	ldr	r3, [pc, #48]	; (192ac <prvTracePortGetTimeStamp+0xcc>)
   1927a:	681b      	ldr	r3, [r3, #0]
   1927c:	18d2      	adds	r2, r2, r3
   1927e:	4b0b      	ldr	r3, [pc, #44]	; (192ac <prvTracePortGetTimeStamp+0xcc>)
   19280:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   19282:	4b0d      	ldr	r3, [pc, #52]	; (192b8 <prvTracePortGetTimeStamp+0xd8>)
   19284:	68fa      	ldr	r2, [r7, #12]
   19286:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   19288:	687b      	ldr	r3, [r7, #4]
   1928a:	2b00      	cmp	r3, #0
   1928c:	d003      	beq.n	19296 <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   1928e:	4b07      	ldr	r3, [pc, #28]	; (192ac <prvTracePortGetTimeStamp+0xcc>)
   19290:	681a      	ldr	r2, [r3, #0]
   19292:	687b      	ldr	r3, [r7, #4]
   19294:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   19296:	4b0a      	ldr	r3, [pc, #40]	; (192c0 <prvTracePortGetTimeStamp+0xe0>)
   19298:	68ba      	ldr	r2, [r7, #8]
   1929a:	601a      	str	r2, [r3, #0]
   1929c:	e000      	b.n	192a0 <prvTracePortGetTimeStamp+0xc0>
		return;
   1929e:	46c0      	nop			; (mov r8, r8)
}
   192a0:	46bd      	mov	sp, r7
   192a2:	b004      	add	sp, #16
   192a4:	bd80      	pop	{r7, pc}
   192a6:	46c0      	nop			; (mov r8, r8)
   192a8:	20000ba4 	.word	0x20000ba4
   192ac:	20000ba8 	.word	0x20000ba8
   192b0:	e000e014 	.word	0xe000e014
   192b4:	e000e018 	.word	0xe000e018
   192b8:	20000c68 	.word	0x20000c68
   192bc:	20000ba0 	.word	0x20000ba0
   192c0:	20000c6c 	.word	0x20000c6c

000192c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   192c4:	b580      	push	{r7, lr}
   192c6:	b082      	sub	sp, #8
   192c8:	af00      	add	r7, sp, #0
   192ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   192cc:	687b      	ldr	r3, [r7, #4]
   192ce:	3308      	adds	r3, #8
   192d0:	001a      	movs	r2, r3
   192d2:	687b      	ldr	r3, [r7, #4]
   192d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   192d6:	687b      	ldr	r3, [r7, #4]
   192d8:	2201      	movs	r2, #1
   192da:	4252      	negs	r2, r2
   192dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   192de:	687b      	ldr	r3, [r7, #4]
   192e0:	3308      	adds	r3, #8
   192e2:	001a      	movs	r2, r3
   192e4:	687b      	ldr	r3, [r7, #4]
   192e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   192e8:	687b      	ldr	r3, [r7, #4]
   192ea:	3308      	adds	r3, #8
   192ec:	001a      	movs	r2, r3
   192ee:	687b      	ldr	r3, [r7, #4]
   192f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   192f2:	687b      	ldr	r3, [r7, #4]
   192f4:	2200      	movs	r2, #0
   192f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   192f8:	46c0      	nop			; (mov r8, r8)
   192fa:	46bd      	mov	sp, r7
   192fc:	b002      	add	sp, #8
   192fe:	bd80      	pop	{r7, pc}

00019300 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   19300:	b580      	push	{r7, lr}
   19302:	b082      	sub	sp, #8
   19304:	af00      	add	r7, sp, #0
   19306:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   19308:	687b      	ldr	r3, [r7, #4]
   1930a:	2200      	movs	r2, #0
   1930c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1930e:	46c0      	nop			; (mov r8, r8)
   19310:	46bd      	mov	sp, r7
   19312:	b002      	add	sp, #8
   19314:	bd80      	pop	{r7, pc}

00019316 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   19316:	b580      	push	{r7, lr}
   19318:	b084      	sub	sp, #16
   1931a:	af00      	add	r7, sp, #0
   1931c:	6078      	str	r0, [r7, #4]
   1931e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   19320:	687b      	ldr	r3, [r7, #4]
   19322:	685b      	ldr	r3, [r3, #4]
   19324:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   19326:	683b      	ldr	r3, [r7, #0]
   19328:	68fa      	ldr	r2, [r7, #12]
   1932a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1932c:	68fb      	ldr	r3, [r7, #12]
   1932e:	689a      	ldr	r2, [r3, #8]
   19330:	683b      	ldr	r3, [r7, #0]
   19332:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   19334:	68fb      	ldr	r3, [r7, #12]
   19336:	689b      	ldr	r3, [r3, #8]
   19338:	683a      	ldr	r2, [r7, #0]
   1933a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1933c:	68fb      	ldr	r3, [r7, #12]
   1933e:	683a      	ldr	r2, [r7, #0]
   19340:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   19342:	683b      	ldr	r3, [r7, #0]
   19344:	687a      	ldr	r2, [r7, #4]
   19346:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   19348:	687b      	ldr	r3, [r7, #4]
   1934a:	681b      	ldr	r3, [r3, #0]
   1934c:	1c5a      	adds	r2, r3, #1
   1934e:	687b      	ldr	r3, [r7, #4]
   19350:	601a      	str	r2, [r3, #0]
}
   19352:	46c0      	nop			; (mov r8, r8)
   19354:	46bd      	mov	sp, r7
   19356:	b004      	add	sp, #16
   19358:	bd80      	pop	{r7, pc}

0001935a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1935a:	b580      	push	{r7, lr}
   1935c:	b084      	sub	sp, #16
   1935e:	af00      	add	r7, sp, #0
   19360:	6078      	str	r0, [r7, #4]
   19362:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   19364:	683b      	ldr	r3, [r7, #0]
   19366:	681b      	ldr	r3, [r3, #0]
   19368:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1936a:	68bb      	ldr	r3, [r7, #8]
   1936c:	3301      	adds	r3, #1
   1936e:	d103      	bne.n	19378 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   19370:	687b      	ldr	r3, [r7, #4]
   19372:	691b      	ldr	r3, [r3, #16]
   19374:	60fb      	str	r3, [r7, #12]
   19376:	e00c      	b.n	19392 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19378:	687b      	ldr	r3, [r7, #4]
   1937a:	3308      	adds	r3, #8
   1937c:	60fb      	str	r3, [r7, #12]
   1937e:	e002      	b.n	19386 <vListInsert+0x2c>
   19380:	68fb      	ldr	r3, [r7, #12]
   19382:	685b      	ldr	r3, [r3, #4]
   19384:	60fb      	str	r3, [r7, #12]
   19386:	68fb      	ldr	r3, [r7, #12]
   19388:	685b      	ldr	r3, [r3, #4]
   1938a:	681a      	ldr	r2, [r3, #0]
   1938c:	68bb      	ldr	r3, [r7, #8]
   1938e:	429a      	cmp	r2, r3
   19390:	d9f6      	bls.n	19380 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   19392:	68fb      	ldr	r3, [r7, #12]
   19394:	685a      	ldr	r2, [r3, #4]
   19396:	683b      	ldr	r3, [r7, #0]
   19398:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1939a:	683b      	ldr	r3, [r7, #0]
   1939c:	685b      	ldr	r3, [r3, #4]
   1939e:	683a      	ldr	r2, [r7, #0]
   193a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   193a2:	683b      	ldr	r3, [r7, #0]
   193a4:	68fa      	ldr	r2, [r7, #12]
   193a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   193a8:	68fb      	ldr	r3, [r7, #12]
   193aa:	683a      	ldr	r2, [r7, #0]
   193ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   193ae:	683b      	ldr	r3, [r7, #0]
   193b0:	687a      	ldr	r2, [r7, #4]
   193b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   193b4:	687b      	ldr	r3, [r7, #4]
   193b6:	681b      	ldr	r3, [r3, #0]
   193b8:	1c5a      	adds	r2, r3, #1
   193ba:	687b      	ldr	r3, [r7, #4]
   193bc:	601a      	str	r2, [r3, #0]
}
   193be:	46c0      	nop			; (mov r8, r8)
   193c0:	46bd      	mov	sp, r7
   193c2:	b004      	add	sp, #16
   193c4:	bd80      	pop	{r7, pc}

000193c6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   193c6:	b580      	push	{r7, lr}
   193c8:	b084      	sub	sp, #16
   193ca:	af00      	add	r7, sp, #0
   193cc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   193ce:	687b      	ldr	r3, [r7, #4]
   193d0:	691b      	ldr	r3, [r3, #16]
   193d2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   193d4:	687b      	ldr	r3, [r7, #4]
   193d6:	685b      	ldr	r3, [r3, #4]
   193d8:	687a      	ldr	r2, [r7, #4]
   193da:	6892      	ldr	r2, [r2, #8]
   193dc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   193de:	687b      	ldr	r3, [r7, #4]
   193e0:	689b      	ldr	r3, [r3, #8]
   193e2:	687a      	ldr	r2, [r7, #4]
   193e4:	6852      	ldr	r2, [r2, #4]
   193e6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   193e8:	68fb      	ldr	r3, [r7, #12]
   193ea:	685a      	ldr	r2, [r3, #4]
   193ec:	687b      	ldr	r3, [r7, #4]
   193ee:	429a      	cmp	r2, r3
   193f0:	d103      	bne.n	193fa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   193f2:	687b      	ldr	r3, [r7, #4]
   193f4:	689a      	ldr	r2, [r3, #8]
   193f6:	68fb      	ldr	r3, [r7, #12]
   193f8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   193fa:	687b      	ldr	r3, [r7, #4]
   193fc:	2200      	movs	r2, #0
   193fe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   19400:	68fb      	ldr	r3, [r7, #12]
   19402:	681b      	ldr	r3, [r3, #0]
   19404:	1e5a      	subs	r2, r3, #1
   19406:	68fb      	ldr	r3, [r7, #12]
   19408:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1940a:	68fb      	ldr	r3, [r7, #12]
   1940c:	681b      	ldr	r3, [r3, #0]
}
   1940e:	0018      	movs	r0, r3
   19410:	46bd      	mov	sp, r7
   19412:	b004      	add	sp, #16
   19414:	bd80      	pop	{r7, pc}
	...

00019418 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   19418:	b580      	push	{r7, lr}
   1941a:	b084      	sub	sp, #16
   1941c:	af00      	add	r7, sp, #0
   1941e:	60f8      	str	r0, [r7, #12]
   19420:	60b9      	str	r1, [r7, #8]
   19422:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   19424:	68fb      	ldr	r3, [r7, #12]
   19426:	3b04      	subs	r3, #4
   19428:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1942a:	68fb      	ldr	r3, [r7, #12]
   1942c:	2280      	movs	r2, #128	; 0x80
   1942e:	0452      	lsls	r2, r2, #17
   19430:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   19432:	68fb      	ldr	r3, [r7, #12]
   19434:	3b04      	subs	r3, #4
   19436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   19438:	68ba      	ldr	r2, [r7, #8]
   1943a:	68fb      	ldr	r3, [r7, #12]
   1943c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1943e:	68fb      	ldr	r3, [r7, #12]
   19440:	3b04      	subs	r3, #4
   19442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   19444:	4a08      	ldr	r2, [pc, #32]	; (19468 <pxPortInitialiseStack+0x50>)
   19446:	68fb      	ldr	r3, [r7, #12]
   19448:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1944a:	68fb      	ldr	r3, [r7, #12]
   1944c:	3b14      	subs	r3, #20
   1944e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   19450:	687a      	ldr	r2, [r7, #4]
   19452:	68fb      	ldr	r3, [r7, #12]
   19454:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   19456:	68fb      	ldr	r3, [r7, #12]
   19458:	3b20      	subs	r3, #32
   1945a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1945c:	68fb      	ldr	r3, [r7, #12]
}
   1945e:	0018      	movs	r0, r3
   19460:	46bd      	mov	sp, r7
   19462:	b004      	add	sp, #16
   19464:	bd80      	pop	{r7, pc}
   19466:	46c0      	nop			; (mov r8, r8)
   19468:	0001946d 	.word	0x0001946d

0001946c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1946c:	b580      	push	{r7, lr}
   1946e:	b082      	sub	sp, #8
   19470:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   19472:	2300      	movs	r3, #0
   19474:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   19476:	4b07      	ldr	r3, [pc, #28]	; (19494 <prvTaskExitError+0x28>)
   19478:	681b      	ldr	r3, [r3, #0]
   1947a:	3301      	adds	r3, #1
   1947c:	d001      	beq.n	19482 <prvTaskExitError+0x16>
   1947e:	b672      	cpsid	i
   19480:	e7fe      	b.n	19480 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   19482:	b672      	cpsid	i
	while( ulDummy == 0 )
   19484:	46c0      	nop			; (mov r8, r8)
   19486:	687b      	ldr	r3, [r7, #4]
   19488:	2b00      	cmp	r3, #0
   1948a:	d0fc      	beq.n	19486 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1948c:	46c0      	nop			; (mov r8, r8)
   1948e:	46bd      	mov	sp, r7
   19490:	b002      	add	sp, #8
   19492:	bd80      	pop	{r7, pc}
   19494:	200000fc 	.word	0x200000fc

00019498 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   19498:	b580      	push	{r7, lr}
   1949a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1949c:	46c0      	nop			; (mov r8, r8)
   1949e:	46bd      	mov	sp, r7
   194a0:	bd80      	pop	{r7, pc}
	...

000194b0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   194b0:	4a0b      	ldr	r2, [pc, #44]	; (194e0 <pxCurrentTCBConst2>)
   194b2:	6813      	ldr	r3, [r2, #0]
   194b4:	6818      	ldr	r0, [r3, #0]
   194b6:	3020      	adds	r0, #32
   194b8:	f380 8809 	msr	PSP, r0
   194bc:	2002      	movs	r0, #2
   194be:	f380 8814 	msr	CONTROL, r0
   194c2:	f3bf 8f6f 	isb	sy
   194c6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   194c8:	46ae      	mov	lr, r5
   194ca:	bc08      	pop	{r3}
   194cc:	bc04      	pop	{r2}
   194ce:	b662      	cpsie	i
   194d0:	4718      	bx	r3
   194d2:	46c0      	nop			; (mov r8, r8)
   194d4:	46c0      	nop			; (mov r8, r8)
   194d6:	46c0      	nop			; (mov r8, r8)
   194d8:	46c0      	nop			; (mov r8, r8)
   194da:	46c0      	nop			; (mov r8, r8)
   194dc:	46c0      	nop			; (mov r8, r8)
   194de:	46c0      	nop			; (mov r8, r8)

000194e0 <pxCurrentTCBConst2>:
   194e0:	20003f40 	.word	0x20003f40
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   194e4:	46c0      	nop			; (mov r8, r8)
   194e6:	46c0      	nop			; (mov r8, r8)

000194e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   194e8:	b580      	push	{r7, lr}
   194ea:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   194ec:	4b0e      	ldr	r3, [pc, #56]	; (19528 <xPortStartScheduler+0x40>)
   194ee:	4a0e      	ldr	r2, [pc, #56]	; (19528 <xPortStartScheduler+0x40>)
   194f0:	6812      	ldr	r2, [r2, #0]
   194f2:	21ff      	movs	r1, #255	; 0xff
   194f4:	0409      	lsls	r1, r1, #16
   194f6:	430a      	orrs	r2, r1
   194f8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   194fa:	4b0b      	ldr	r3, [pc, #44]	; (19528 <xPortStartScheduler+0x40>)
   194fc:	4a0a      	ldr	r2, [pc, #40]	; (19528 <xPortStartScheduler+0x40>)
   194fe:	6812      	ldr	r2, [r2, #0]
   19500:	21ff      	movs	r1, #255	; 0xff
   19502:	0609      	lsls	r1, r1, #24
   19504:	430a      	orrs	r2, r1
   19506:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   19508:	4b08      	ldr	r3, [pc, #32]	; (1952c <xPortStartScheduler+0x44>)
   1950a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1950c:	4b08      	ldr	r3, [pc, #32]	; (19530 <xPortStartScheduler+0x48>)
   1950e:	2200      	movs	r2, #0
   19510:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   19512:	4b08      	ldr	r3, [pc, #32]	; (19534 <xPortStartScheduler+0x4c>)
   19514:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   19516:	4b08      	ldr	r3, [pc, #32]	; (19538 <xPortStartScheduler+0x50>)
   19518:	4798      	blx	r3
	prvTaskExitError();
   1951a:	4b08      	ldr	r3, [pc, #32]	; (1953c <xPortStartScheduler+0x54>)
   1951c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1951e:	2300      	movs	r3, #0
}
   19520:	0018      	movs	r0, r3
   19522:	46bd      	mov	sp, r7
   19524:	bd80      	pop	{r7, pc}
   19526:	46c0      	nop			; (mov r8, r8)
   19528:	e000ed20 	.word	0xe000ed20
   1952c:	00019649 	.word	0x00019649
   19530:	200000fc 	.word	0x200000fc
   19534:	000194b1 	.word	0x000194b1
   19538:	0001bba5 	.word	0x0001bba5
   1953c:	0001946d 	.word	0x0001946d

00019540 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   19540:	b580      	push	{r7, lr}
   19542:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   19544:	4b03      	ldr	r3, [pc, #12]	; (19554 <vPortYield+0x14>)
   19546:	2280      	movs	r2, #128	; 0x80
   19548:	0552      	lsls	r2, r2, #21
   1954a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   1954c:	46c0      	nop			; (mov r8, r8)
   1954e:	46bd      	mov	sp, r7
   19550:	bd80      	pop	{r7, pc}
   19552:	46c0      	nop			; (mov r8, r8)
   19554:	e000ed04 	.word	0xe000ed04

00019558 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   19558:	b580      	push	{r7, lr}
   1955a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1955c:	b672      	cpsid	i
    uxCriticalNesting++;
   1955e:	4b06      	ldr	r3, [pc, #24]	; (19578 <vPortEnterCritical+0x20>)
   19560:	681b      	ldr	r3, [r3, #0]
   19562:	1c5a      	adds	r2, r3, #1
   19564:	4b04      	ldr	r3, [pc, #16]	; (19578 <vPortEnterCritical+0x20>)
   19566:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   19568:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1956c:	f3bf 8f6f 	isb	sy
}
   19570:	46c0      	nop			; (mov r8, r8)
   19572:	46bd      	mov	sp, r7
   19574:	bd80      	pop	{r7, pc}
   19576:	46c0      	nop			; (mov r8, r8)
   19578:	200000fc 	.word	0x200000fc

0001957c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1957c:	b580      	push	{r7, lr}
   1957e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   19580:	4b09      	ldr	r3, [pc, #36]	; (195a8 <vPortExitCritical+0x2c>)
   19582:	681b      	ldr	r3, [r3, #0]
   19584:	2b00      	cmp	r3, #0
   19586:	d101      	bne.n	1958c <vPortExitCritical+0x10>
   19588:	b672      	cpsid	i
   1958a:	e7fe      	b.n	1958a <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1958c:	4b06      	ldr	r3, [pc, #24]	; (195a8 <vPortExitCritical+0x2c>)
   1958e:	681b      	ldr	r3, [r3, #0]
   19590:	1e5a      	subs	r2, r3, #1
   19592:	4b05      	ldr	r3, [pc, #20]	; (195a8 <vPortExitCritical+0x2c>)
   19594:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   19596:	4b04      	ldr	r3, [pc, #16]	; (195a8 <vPortExitCritical+0x2c>)
   19598:	681b      	ldr	r3, [r3, #0]
   1959a:	2b00      	cmp	r3, #0
   1959c:	d100      	bne.n	195a0 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1959e:	b662      	cpsie	i
    }
}
   195a0:	46c0      	nop			; (mov r8, r8)
   195a2:	46bd      	mov	sp, r7
   195a4:	bd80      	pop	{r7, pc}
   195a6:	46c0      	nop			; (mov r8, r8)
   195a8:	200000fc 	.word	0x200000fc

000195ac <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   195ac:	f3ef 8010 	mrs	r0, PRIMASK
   195b0:	b672      	cpsid	i
   195b2:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   195b4:	46c0      	nop			; (mov r8, r8)
   195b6:	0018      	movs	r0, r3

000195b8 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   195b8:	f380 8810 	msr	PRIMASK, r0
   195bc:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   195be:	46c0      	nop			; (mov r8, r8)

000195c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   195c0:	f3ef 8009 	mrs	r0, PSP
   195c4:	4b0e      	ldr	r3, [pc, #56]	; (19600 <pxCurrentTCBConst>)
   195c6:	681a      	ldr	r2, [r3, #0]
   195c8:	3820      	subs	r0, #32
   195ca:	6010      	str	r0, [r2, #0]
   195cc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   195ce:	4644      	mov	r4, r8
   195d0:	464d      	mov	r5, r9
   195d2:	4656      	mov	r6, sl
   195d4:	465f      	mov	r7, fp
   195d6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   195d8:	b508      	push	{r3, lr}
   195da:	b672      	cpsid	i
   195dc:	f002 fae2 	bl	1bba4 <vTaskSwitchContext>
   195e0:	b662      	cpsie	i
   195e2:	bc0c      	pop	{r2, r3}
   195e4:	6811      	ldr	r1, [r2, #0]
   195e6:	6808      	ldr	r0, [r1, #0]
   195e8:	3010      	adds	r0, #16
   195ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   195ec:	46a0      	mov	r8, r4
   195ee:	46a9      	mov	r9, r5
   195f0:	46b2      	mov	sl, r6
   195f2:	46bb      	mov	fp, r7
   195f4:	f380 8809 	msr	PSP, r0
   195f8:	3820      	subs	r0, #32
   195fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   195fc:	4718      	bx	r3
   195fe:	46c0      	nop			; (mov r8, r8)

00019600 <pxCurrentTCBConst>:
   19600:	20003f40 	.word	0x20003f40
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   19604:	46c0      	nop			; (mov r8, r8)
   19606:	46c0      	nop			; (mov r8, r8)

00019608 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   19608:	b580      	push	{r7, lr}
   1960a:	b082      	sub	sp, #8
   1960c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1960e:	4b0a      	ldr	r3, [pc, #40]	; (19638 <SysTick_Handler+0x30>)
   19610:	4798      	blx	r3
   19612:	0003      	movs	r3, r0
   19614:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   19616:	4b09      	ldr	r3, [pc, #36]	; (1963c <SysTick_Handler+0x34>)
   19618:	4798      	blx	r3
   1961a:	1e03      	subs	r3, r0, #0
   1961c:	d003      	beq.n	19626 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1961e:	4b08      	ldr	r3, [pc, #32]	; (19640 <SysTick_Handler+0x38>)
   19620:	2280      	movs	r2, #128	; 0x80
   19622:	0552      	lsls	r2, r2, #21
   19624:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   19626:	687b      	ldr	r3, [r7, #4]
   19628:	0018      	movs	r0, r3
   1962a:	4b06      	ldr	r3, [pc, #24]	; (19644 <SysTick_Handler+0x3c>)
   1962c:	4798      	blx	r3
}
   1962e:	46c0      	nop			; (mov r8, r8)
   19630:	46bd      	mov	sp, r7
   19632:	b002      	add	sp, #8
   19634:	bd80      	pop	{r7, pc}
   19636:	46c0      	nop			; (mov r8, r8)
   19638:	000195ad 	.word	0x000195ad
   1963c:	0001b9b5 	.word	0x0001b9b5
   19640:	e000ed04 	.word	0xe000ed04
   19644:	000195b9 	.word	0x000195b9

00019648 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   19648:	b5b0      	push	{r4, r5, r7, lr}
   1964a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1964c:	4b0b      	ldr	r3, [pc, #44]	; (1967c <prvSetupTimerInterrupt+0x34>)
   1964e:	2200      	movs	r2, #0
   19650:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   19652:	4b0b      	ldr	r3, [pc, #44]	; (19680 <prvSetupTimerInterrupt+0x38>)
   19654:	2200      	movs	r2, #0
   19656:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   19658:	4c0a      	ldr	r4, [pc, #40]	; (19684 <prvSetupTimerInterrupt+0x3c>)
   1965a:	2000      	movs	r0, #0
   1965c:	4b0a      	ldr	r3, [pc, #40]	; (19688 <prvSetupTimerInterrupt+0x40>)
   1965e:	4798      	blx	r3
   19660:	4b0a      	ldr	r3, [pc, #40]	; (1968c <prvSetupTimerInterrupt+0x44>)
   19662:	22fa      	movs	r2, #250	; 0xfa
   19664:	0091      	lsls	r1, r2, #2
   19666:	4798      	blx	r3
   19668:	0003      	movs	r3, r0
   1966a:	3b01      	subs	r3, #1
   1966c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1966e:	4b03      	ldr	r3, [pc, #12]	; (1967c <prvSetupTimerInterrupt+0x34>)
   19670:	2207      	movs	r2, #7
   19672:	601a      	str	r2, [r3, #0]
}
   19674:	46c0      	nop			; (mov r8, r8)
   19676:	46bd      	mov	sp, r7
   19678:	bdb0      	pop	{r4, r5, r7, pc}
   1967a:	46c0      	nop			; (mov r8, r8)
   1967c:	e000e010 	.word	0xe000e010
   19680:	e000e018 	.word	0xe000e018
   19684:	e000e014 	.word	0xe000e014
   19688:	000291a1 	.word	0x000291a1
   1968c:	00031e9d 	.word	0x00031e9d

00019690 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   19690:	b580      	push	{r7, lr}
   19692:	b084      	sub	sp, #16
   19694:	af00      	add	r7, sp, #0
   19696:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   19698:	2300      	movs	r3, #0
   1969a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1969c:	687b      	ldr	r3, [r7, #4]
   1969e:	2207      	movs	r2, #7
   196a0:	4013      	ands	r3, r2
   196a2:	d004      	beq.n	196ae <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   196a4:	687b      	ldr	r3, [r7, #4]
   196a6:	2207      	movs	r2, #7
   196a8:	4393      	bics	r3, r2
   196aa:	3308      	adds	r3, #8
   196ac:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   196ae:	4b21      	ldr	r3, [pc, #132]	; (19734 <pvPortMalloc+0xa4>)
   196b0:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   196b2:	4b21      	ldr	r3, [pc, #132]	; (19738 <pvPortMalloc+0xa8>)
   196b4:	681b      	ldr	r3, [r3, #0]
   196b6:	2b00      	cmp	r3, #0
   196b8:	d105      	bne.n	196c6 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   196ba:	4b20      	ldr	r3, [pc, #128]	; (1973c <pvPortMalloc+0xac>)
   196bc:	2207      	movs	r2, #7
   196be:	4393      	bics	r3, r2
   196c0:	001a      	movs	r2, r3
   196c2:	4b1d      	ldr	r3, [pc, #116]	; (19738 <pvPortMalloc+0xa8>)
   196c4:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   196c6:	4b1e      	ldr	r3, [pc, #120]	; (19740 <pvPortMalloc+0xb0>)
   196c8:	681a      	ldr	r2, [r3, #0]
   196ca:	687b      	ldr	r3, [r7, #4]
   196cc:	18d3      	adds	r3, r2, r3
   196ce:	4a1d      	ldr	r2, [pc, #116]	; (19744 <pvPortMalloc+0xb4>)
   196d0:	4293      	cmp	r3, r2
   196d2:	d813      	bhi.n	196fc <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   196d4:	4b1a      	ldr	r3, [pc, #104]	; (19740 <pvPortMalloc+0xb0>)
   196d6:	681a      	ldr	r2, [r3, #0]
   196d8:	687b      	ldr	r3, [r7, #4]
   196da:	18d2      	adds	r2, r2, r3
   196dc:	4b18      	ldr	r3, [pc, #96]	; (19740 <pvPortMalloc+0xb0>)
   196de:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   196e0:	429a      	cmp	r2, r3
   196e2:	d90b      	bls.n	196fc <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   196e4:	4b14      	ldr	r3, [pc, #80]	; (19738 <pvPortMalloc+0xa8>)
   196e6:	681a      	ldr	r2, [r3, #0]
   196e8:	4b15      	ldr	r3, [pc, #84]	; (19740 <pvPortMalloc+0xb0>)
   196ea:	681b      	ldr	r3, [r3, #0]
   196ec:	18d3      	adds	r3, r2, r3
   196ee:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   196f0:	4b13      	ldr	r3, [pc, #76]	; (19740 <pvPortMalloc+0xb0>)
   196f2:	681a      	ldr	r2, [r3, #0]
   196f4:	687b      	ldr	r3, [r7, #4]
   196f6:	18d2      	adds	r2, r2, r3
   196f8:	4b11      	ldr	r3, [pc, #68]	; (19740 <pvPortMalloc+0xb0>)
   196fa:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   196fc:	68fb      	ldr	r3, [r7, #12]
   196fe:	2b00      	cmp	r3, #0
   19700:	d006      	beq.n	19710 <pvPortMalloc+0x80>
   19702:	68fb      	ldr	r3, [r7, #12]
   19704:	687a      	ldr	r2, [r7, #4]
   19706:	0019      	movs	r1, r3
   19708:	2094      	movs	r0, #148	; 0x94
   1970a:	4b0f      	ldr	r3, [pc, #60]	; (19748 <pvPortMalloc+0xb8>)
   1970c:	4798      	blx	r3
   1970e:	e005      	b.n	1971c <pvPortMalloc+0x8c>
   19710:	68fb      	ldr	r3, [r7, #12]
   19712:	687a      	ldr	r2, [r7, #4]
   19714:	0019      	movs	r1, r3
   19716:	20e8      	movs	r0, #232	; 0xe8
   19718:	4b0b      	ldr	r3, [pc, #44]	; (19748 <pvPortMalloc+0xb8>)
   1971a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   1971c:	4b0b      	ldr	r3, [pc, #44]	; (1974c <pvPortMalloc+0xbc>)
   1971e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   19720:	68fb      	ldr	r3, [r7, #12]
   19722:	2b00      	cmp	r3, #0
   19724:	d101      	bne.n	1972a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   19726:	4b0a      	ldr	r3, [pc, #40]	; (19750 <pvPortMalloc+0xc0>)
   19728:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1972a:	68fb      	ldr	r3, [r7, #12]
}
   1972c:	0018      	movs	r0, r3
   1972e:	46bd      	mov	sp, r7
   19730:	b004      	add	sp, #16
   19732:	bd80      	pop	{r7, pc}
   19734:	0001b811 	.word	0x0001b811
   19738:	20003f3c 	.word	0x20003f3c
   1973c:	20000c78 	.word	0x20000c78
   19740:	20003f38 	.word	0x20003f38
   19744:	000032bf 	.word	0x000032bf
   19748:	00017df5 	.word	0x00017df5
   1974c:	0001b829 	.word	0x0001b829
   19750:	00031ded 	.word	0x00031ded

00019754 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   19754:	b580      	push	{r7, lr}
   19756:	b082      	sub	sp, #8
   19758:	af00      	add	r7, sp, #0
   1975a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   1975c:	687b      	ldr	r3, [r7, #4]
   1975e:	2b00      	cmp	r3, #0
   19760:	d001      	beq.n	19766 <vPortFree+0x12>
   19762:	b672      	cpsid	i
   19764:	e7fe      	b.n	19764 <vPortFree+0x10>
}
   19766:	46c0      	nop			; (mov r8, r8)
   19768:	46bd      	mov	sp, r7
   1976a:	b002      	add	sp, #8
   1976c:	bd80      	pop	{r7, pc}
	...

00019770 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   19770:	b580      	push	{r7, lr}
   19772:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   19774:	4b03      	ldr	r3, [pc, #12]	; (19784 <xPortGetFreeHeapSize+0x14>)
   19776:	681b      	ldr	r3, [r3, #0]
   19778:	22cb      	movs	r2, #203	; 0xcb
   1977a:	0192      	lsls	r2, r2, #6
   1977c:	1ad3      	subs	r3, r2, r3
}
   1977e:	0018      	movs	r0, r3
   19780:	46bd      	mov	sp, r7
   19782:	bd80      	pop	{r7, pc}
   19784:	20003f38 	.word	0x20003f38

00019788 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   19788:	b580      	push	{r7, lr}
   1978a:	b084      	sub	sp, #16
   1978c:	af00      	add	r7, sp, #0
   1978e:	6078      	str	r0, [r7, #4]
   19790:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   19792:	687b      	ldr	r3, [r7, #4]
   19794:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   19796:	68fb      	ldr	r3, [r7, #12]
   19798:	2b00      	cmp	r3, #0
   1979a:	d101      	bne.n	197a0 <xQueueGenericReset+0x18>
   1979c:	b672      	cpsid	i
   1979e:	e7fe      	b.n	1979e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   197a0:	4b23      	ldr	r3, [pc, #140]	; (19830 <xQueueGenericReset+0xa8>)
   197a2:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   197a4:	68fb      	ldr	r3, [r7, #12]
   197a6:	681a      	ldr	r2, [r3, #0]
   197a8:	68fb      	ldr	r3, [r7, #12]
   197aa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   197ac:	68fb      	ldr	r3, [r7, #12]
   197ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   197b0:	434b      	muls	r3, r1
   197b2:	18d2      	adds	r2, r2, r3
   197b4:	68fb      	ldr	r3, [r7, #12]
   197b6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   197b8:	68fb      	ldr	r3, [r7, #12]
   197ba:	2200      	movs	r2, #0
   197bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   197be:	68fb      	ldr	r3, [r7, #12]
   197c0:	681a      	ldr	r2, [r3, #0]
   197c2:	68fb      	ldr	r3, [r7, #12]
   197c4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   197c6:	68fb      	ldr	r3, [r7, #12]
   197c8:	681a      	ldr	r2, [r3, #0]
   197ca:	68fb      	ldr	r3, [r7, #12]
   197cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   197ce:	1e59      	subs	r1, r3, #1
   197d0:	68fb      	ldr	r3, [r7, #12]
   197d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   197d4:	434b      	muls	r3, r1
   197d6:	18d2      	adds	r2, r2, r3
   197d8:	68fb      	ldr	r3, [r7, #12]
   197da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   197dc:	68fb      	ldr	r3, [r7, #12]
   197de:	2244      	movs	r2, #68	; 0x44
   197e0:	21ff      	movs	r1, #255	; 0xff
   197e2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   197e4:	68fb      	ldr	r3, [r7, #12]
   197e6:	2245      	movs	r2, #69	; 0x45
   197e8:	21ff      	movs	r1, #255	; 0xff
   197ea:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   197ec:	683b      	ldr	r3, [r7, #0]
   197ee:	2b00      	cmp	r3, #0
   197f0:	d10d      	bne.n	1980e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   197f2:	68fb      	ldr	r3, [r7, #12]
   197f4:	691b      	ldr	r3, [r3, #16]
   197f6:	2b00      	cmp	r3, #0
   197f8:	d013      	beq.n	19822 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   197fa:	68fb      	ldr	r3, [r7, #12]
   197fc:	3310      	adds	r3, #16
   197fe:	0018      	movs	r0, r3
   19800:	4b0c      	ldr	r3, [pc, #48]	; (19834 <xQueueGenericReset+0xac>)
   19802:	4798      	blx	r3
   19804:	1e03      	subs	r3, r0, #0
   19806:	d00c      	beq.n	19822 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   19808:	4b0b      	ldr	r3, [pc, #44]	; (19838 <xQueueGenericReset+0xb0>)
   1980a:	4798      	blx	r3
   1980c:	e009      	b.n	19822 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1980e:	68fb      	ldr	r3, [r7, #12]
   19810:	3310      	adds	r3, #16
   19812:	0018      	movs	r0, r3
   19814:	4b09      	ldr	r3, [pc, #36]	; (1983c <xQueueGenericReset+0xb4>)
   19816:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   19818:	68fb      	ldr	r3, [r7, #12]
   1981a:	3324      	adds	r3, #36	; 0x24
   1981c:	0018      	movs	r0, r3
   1981e:	4b07      	ldr	r3, [pc, #28]	; (1983c <xQueueGenericReset+0xb4>)
   19820:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   19822:	4b07      	ldr	r3, [pc, #28]	; (19840 <xQueueGenericReset+0xb8>)
   19824:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   19826:	2301      	movs	r3, #1
}
   19828:	0018      	movs	r0, r3
   1982a:	46bd      	mov	sp, r7
   1982c:	b004      	add	sp, #16
   1982e:	bd80      	pop	{r7, pc}
   19830:	00019559 	.word	0x00019559
   19834:	0001bde9 	.word	0x0001bde9
   19838:	00019541 	.word	0x00019541
   1983c:	000192c5 	.word	0x000192c5
   19840:	0001957d 	.word	0x0001957d

00019844 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   19844:	b590      	push	{r4, r7, lr}
   19846:	b08b      	sub	sp, #44	; 0x2c
   19848:	af02      	add	r7, sp, #8
   1984a:	60f8      	str	r0, [r7, #12]
   1984c:	60b9      	str	r1, [r7, #8]
   1984e:	1dfb      	adds	r3, r7, #7
   19850:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   19852:	68fb      	ldr	r3, [r7, #12]
   19854:	2b00      	cmp	r3, #0
   19856:	d101      	bne.n	1985c <xQueueGenericCreate+0x18>
   19858:	b672      	cpsid	i
   1985a:	e7fe      	b.n	1985a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1985c:	68bb      	ldr	r3, [r7, #8]
   1985e:	2b00      	cmp	r3, #0
   19860:	d102      	bne.n	19868 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   19862:	2300      	movs	r3, #0
   19864:	61fb      	str	r3, [r7, #28]
   19866:	e003      	b.n	19870 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   19868:	68fb      	ldr	r3, [r7, #12]
   1986a:	68ba      	ldr	r2, [r7, #8]
   1986c:	4353      	muls	r3, r2
   1986e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   19870:	69fb      	ldr	r3, [r7, #28]
   19872:	3354      	adds	r3, #84	; 0x54
   19874:	0018      	movs	r0, r3
   19876:	4b19      	ldr	r3, [pc, #100]	; (198dc <xQueueGenericCreate+0x98>)
   19878:	4798      	blx	r3
   1987a:	0003      	movs	r3, r0
   1987c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1987e:	69bb      	ldr	r3, [r7, #24]
   19880:	2b00      	cmp	r3, #0
   19882:	d00d      	beq.n	198a0 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   19884:	69bb      	ldr	r3, [r7, #24]
   19886:	3354      	adds	r3, #84	; 0x54
   19888:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1988a:	1dfb      	adds	r3, r7, #7
   1988c:	781c      	ldrb	r4, [r3, #0]
   1988e:	697a      	ldr	r2, [r7, #20]
   19890:	68b9      	ldr	r1, [r7, #8]
   19892:	68f8      	ldr	r0, [r7, #12]
   19894:	69bb      	ldr	r3, [r7, #24]
   19896:	9300      	str	r3, [sp, #0]
   19898:	0023      	movs	r3, r4
   1989a:	4c11      	ldr	r4, [pc, #68]	; (198e0 <xQueueGenericCreate+0x9c>)
   1989c:	47a0      	blx	r4
   1989e:	e017      	b.n	198d0 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   198a0:	4b10      	ldr	r3, [pc, #64]	; (198e4 <xQueueGenericCreate+0xa0>)
   198a2:	4798      	blx	r3
   198a4:	0003      	movs	r3, r0
   198a6:	0018      	movs	r0, r3
   198a8:	4b0f      	ldr	r3, [pc, #60]	; (198e8 <xQueueGenericCreate+0xa4>)
   198aa:	4798      	blx	r3
   198ac:	0003      	movs	r3, r0
   198ae:	001a      	movs	r2, r3
   198b0:	4b0e      	ldr	r3, [pc, #56]	; (198ec <xQueueGenericCreate+0xa8>)
   198b2:	881b      	ldrh	r3, [r3, #0]
   198b4:	4013      	ands	r3, r2
   198b6:	b29b      	uxth	r3, r3
   198b8:	2b00      	cmp	r3, #0
   198ba:	d009      	beq.n	198d0 <xQueueGenericCreate+0x8c>
   198bc:	1dfb      	adds	r3, r7, #7
   198be:	781b      	ldrb	r3, [r3, #0]
   198c0:	4a0b      	ldr	r2, [pc, #44]	; (198f0 <xQueueGenericCreate+0xac>)
   198c2:	5cd3      	ldrb	r3, [r2, r3]
   198c4:	3340      	adds	r3, #64	; 0x40
   198c6:	b2db      	uxtb	r3, r3
   198c8:	2100      	movs	r1, #0
   198ca:	0018      	movs	r0, r3
   198cc:	4b09      	ldr	r3, [pc, #36]	; (198f4 <xQueueGenericCreate+0xb0>)
   198ce:	4798      	blx	r3
		}

		return pxNewQueue;
   198d0:	69bb      	ldr	r3, [r7, #24]
	}
   198d2:	0018      	movs	r0, r3
   198d4:	46bd      	mov	sp, r7
   198d6:	b009      	add	sp, #36	; 0x24
   198d8:	bd90      	pop	{r4, r7, pc}
   198da:	46c0      	nop			; (mov r8, r8)
   198dc:	00019691 	.word	0x00019691
   198e0:	000198f9 	.word	0x000198f9
   198e4:	000177e9 	.word	0x000177e9
   198e8:	0001754d 	.word	0x0001754d
   198ec:	200000f8 	.word	0x200000f8
   198f0:	200000ec 	.word	0x200000ec
   198f4:	0001824d 	.word	0x0001824d

000198f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   198f8:	b5b0      	push	{r4, r5, r7, lr}
   198fa:	b084      	sub	sp, #16
   198fc:	af00      	add	r7, sp, #0
   198fe:	60f8      	str	r0, [r7, #12]
   19900:	60b9      	str	r1, [r7, #8]
   19902:	607a      	str	r2, [r7, #4]
   19904:	001a      	movs	r2, r3
   19906:	1cfb      	adds	r3, r7, #3
   19908:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1990a:	68bb      	ldr	r3, [r7, #8]
   1990c:	2b00      	cmp	r3, #0
   1990e:	d103      	bne.n	19918 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   19910:	6a3b      	ldr	r3, [r7, #32]
   19912:	6a3a      	ldr	r2, [r7, #32]
   19914:	601a      	str	r2, [r3, #0]
   19916:	e002      	b.n	1991e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   19918:	6a3b      	ldr	r3, [r7, #32]
   1991a:	687a      	ldr	r2, [r7, #4]
   1991c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1991e:	6a3b      	ldr	r3, [r7, #32]
   19920:	68fa      	ldr	r2, [r7, #12]
   19922:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   19924:	6a3b      	ldr	r3, [r7, #32]
   19926:	68ba      	ldr	r2, [r7, #8]
   19928:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1992a:	6a3b      	ldr	r3, [r7, #32]
   1992c:	2101      	movs	r1, #1
   1992e:	0018      	movs	r0, r3
   19930:	4b41      	ldr	r3, [pc, #260]	; (19a38 <prvInitialiseNewQueue+0x140>)
   19932:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   19934:	6a3b      	ldr	r3, [r7, #32]
   19936:	1cfa      	adds	r2, r7, #3
   19938:	2150      	movs	r1, #80	; 0x50
   1993a:	7812      	ldrb	r2, [r2, #0]
   1993c:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1993e:	6a3b      	ldr	r3, [r7, #32]
   19940:	2200      	movs	r2, #0
   19942:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   19944:	6a3b      	ldr	r3, [r7, #32]
   19946:	0018      	movs	r0, r3
   19948:	4b3c      	ldr	r3, [pc, #240]	; (19a3c <prvInitialiseNewQueue+0x144>)
   1994a:	4798      	blx	r3
   1994c:	0003      	movs	r3, r0
   1994e:	001a      	movs	r2, r3
   19950:	4b3b      	ldr	r3, [pc, #236]	; (19a40 <prvInitialiseNewQueue+0x148>)
   19952:	5c9b      	ldrb	r3, [r3, r2]
   19954:	0018      	movs	r0, r3
   19956:	4b3b      	ldr	r3, [pc, #236]	; (19a44 <prvInitialiseNewQueue+0x14c>)
   19958:	4798      	blx	r3
   1995a:	0003      	movs	r3, r0
   1995c:	b29a      	uxth	r2, r3
   1995e:	6a3b      	ldr	r3, [r7, #32]
   19960:	0011      	movs	r1, r2
   19962:	0018      	movs	r0, r3
   19964:	4b38      	ldr	r3, [pc, #224]	; (19a48 <prvInitialiseNewQueue+0x150>)
   19966:	4798      	blx	r3
   19968:	4b38      	ldr	r3, [pc, #224]	; (19a4c <prvInitialiseNewQueue+0x154>)
   1996a:	881a      	ldrh	r2, [r3, #0]
   1996c:	6a3b      	ldr	r3, [r7, #32]
   1996e:	0011      	movs	r1, r2
   19970:	0018      	movs	r0, r3
   19972:	4b37      	ldr	r3, [pc, #220]	; (19a50 <prvInitialiseNewQueue+0x158>)
   19974:	4798      	blx	r3
   19976:	6a3b      	ldr	r3, [r7, #32]
   19978:	0018      	movs	r0, r3
   1997a:	4b30      	ldr	r3, [pc, #192]	; (19a3c <prvInitialiseNewQueue+0x144>)
   1997c:	4798      	blx	r3
   1997e:	0003      	movs	r3, r0
   19980:	001a      	movs	r2, r3
   19982:	4b2f      	ldr	r3, [pc, #188]	; (19a40 <prvInitialiseNewQueue+0x148>)
   19984:	5c9c      	ldrb	r4, [r3, r2]
   19986:	6a3b      	ldr	r3, [r7, #32]
   19988:	0018      	movs	r0, r3
   1998a:	4b32      	ldr	r3, [pc, #200]	; (19a54 <prvInitialiseNewQueue+0x15c>)
   1998c:	4798      	blx	r3
   1998e:	0003      	movs	r3, r0
   19990:	b2db      	uxtb	r3, r3
   19992:	0019      	movs	r1, r3
   19994:	0020      	movs	r0, r4
   19996:	4b30      	ldr	r3, [pc, #192]	; (19a58 <prvInitialiseNewQueue+0x160>)
   19998:	4798      	blx	r3
   1999a:	4b30      	ldr	r3, [pc, #192]	; (19a5c <prvInitialiseNewQueue+0x164>)
   1999c:	4798      	blx	r3
   1999e:	0003      	movs	r3, r0
   199a0:	0018      	movs	r0, r3
   199a2:	4b2f      	ldr	r3, [pc, #188]	; (19a60 <prvInitialiseNewQueue+0x168>)
   199a4:	4798      	blx	r3
   199a6:	0003      	movs	r3, r0
   199a8:	001a      	movs	r2, r3
   199aa:	4b2e      	ldr	r3, [pc, #184]	; (19a64 <prvInitialiseNewQueue+0x16c>)
   199ac:	881b      	ldrh	r3, [r3, #0]
   199ae:	4013      	ands	r3, r2
   199b0:	b29b      	uxth	r3, r3
   199b2:	2b00      	cmp	r3, #0
   199b4:	d029      	beq.n	19a0a <prvInitialiseNewQueue+0x112>
   199b6:	6a3b      	ldr	r3, [r7, #32]
   199b8:	0018      	movs	r0, r3
   199ba:	4b2b      	ldr	r3, [pc, #172]	; (19a68 <prvInitialiseNewQueue+0x170>)
   199bc:	4798      	blx	r3
   199be:	0003      	movs	r3, r0
   199c0:	001a      	movs	r2, r3
   199c2:	4b28      	ldr	r3, [pc, #160]	; (19a64 <prvInitialiseNewQueue+0x16c>)
   199c4:	881b      	ldrh	r3, [r3, #0]
   199c6:	4013      	ands	r3, r2
   199c8:	b29b      	uxth	r3, r3
   199ca:	2b00      	cmp	r3, #0
   199cc:	d01d      	beq.n	19a0a <prvInitialiseNewQueue+0x112>
   199ce:	6a3b      	ldr	r3, [r7, #32]
   199d0:	0018      	movs	r0, r3
   199d2:	4b1a      	ldr	r3, [pc, #104]	; (19a3c <prvInitialiseNewQueue+0x144>)
   199d4:	4798      	blx	r3
   199d6:	0003      	movs	r3, r0
   199d8:	001a      	movs	r2, r3
   199da:	4b19      	ldr	r3, [pc, #100]	; (19a40 <prvInitialiseNewQueue+0x148>)
   199dc:	5c9b      	ldrb	r3, [r3, r2]
   199de:	3318      	adds	r3, #24
   199e0:	b2db      	uxtb	r3, r3
   199e2:	001d      	movs	r5, r3
   199e4:	6a3b      	ldr	r3, [r7, #32]
   199e6:	0018      	movs	r0, r3
   199e8:	4b14      	ldr	r3, [pc, #80]	; (19a3c <prvInitialiseNewQueue+0x144>)
   199ea:	4798      	blx	r3
   199ec:	0003      	movs	r3, r0
   199ee:	001a      	movs	r2, r3
   199f0:	4b13      	ldr	r3, [pc, #76]	; (19a40 <prvInitialiseNewQueue+0x148>)
   199f2:	5c9c      	ldrb	r4, [r3, r2]
   199f4:	6a3b      	ldr	r3, [r7, #32]
   199f6:	0018      	movs	r0, r3
   199f8:	4b16      	ldr	r3, [pc, #88]	; (19a54 <prvInitialiseNewQueue+0x15c>)
   199fa:	4798      	blx	r3
   199fc:	0003      	movs	r3, r0
   199fe:	b2db      	uxtb	r3, r3
   19a00:	001a      	movs	r2, r3
   19a02:	0021      	movs	r1, r4
   19a04:	0028      	movs	r0, r5
   19a06:	4b19      	ldr	r3, [pc, #100]	; (19a6c <prvInitialiseNewQueue+0x174>)
   19a08:	4798      	blx	r3
   19a0a:	6a3b      	ldr	r3, [r7, #32]
   19a0c:	0018      	movs	r0, r3
   19a0e:	4b0b      	ldr	r3, [pc, #44]	; (19a3c <prvInitialiseNewQueue+0x144>)
   19a10:	4798      	blx	r3
   19a12:	0003      	movs	r3, r0
   19a14:	001a      	movs	r2, r3
   19a16:	4b0a      	ldr	r3, [pc, #40]	; (19a40 <prvInitialiseNewQueue+0x148>)
   19a18:	5c9c      	ldrb	r4, [r3, r2]
   19a1a:	6a3b      	ldr	r3, [r7, #32]
   19a1c:	0018      	movs	r0, r3
   19a1e:	4b0d      	ldr	r3, [pc, #52]	; (19a54 <prvInitialiseNewQueue+0x15c>)
   19a20:	4798      	blx	r3
   19a22:	0003      	movs	r3, r0
   19a24:	b2db      	uxtb	r3, r3
   19a26:	2200      	movs	r2, #0
   19a28:	0019      	movs	r1, r3
   19a2a:	0020      	movs	r0, r4
   19a2c:	4b10      	ldr	r3, [pc, #64]	; (19a70 <prvInitialiseNewQueue+0x178>)
   19a2e:	4798      	blx	r3
}
   19a30:	46c0      	nop			; (mov r8, r8)
   19a32:	46bd      	mov	sp, r7
   19a34:	b004      	add	sp, #16
   19a36:	bdb0      	pop	{r4, r5, r7, pc}
   19a38:	00019789 	.word	0x00019789
   19a3c:	0001750d 	.word	0x0001750d
   19a40:	200000ec 	.word	0x200000ec
   19a44:	00018acd 	.word	0x00018acd
   19a48:	00017631 	.word	0x00017631
   19a4c:	200000fa 	.word	0x200000fa
   19a50:	0001766d 	.word	0x0001766d
   19a54:	000175ed 	.word	0x000175ed
   19a58:	00018c65 	.word	0x00018c65
   19a5c:	000177e9 	.word	0x000177e9
   19a60:	0001754d 	.word	0x0001754d
   19a64:	200000f8 	.word	0x200000f8
   19a68:	0001760d 	.word	0x0001760d
   19a6c:	00017f45 	.word	0x00017f45
   19a70:	000185a1 	.word	0x000185a1

00019a74 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   19a74:	b590      	push	{r4, r7, lr}
   19a76:	b083      	sub	sp, #12
   19a78:	af00      	add	r7, sp, #0
   19a7a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   19a7c:	687b      	ldr	r3, [r7, #4]
   19a7e:	2b00      	cmp	r3, #0
   19a80:	d00e      	beq.n	19aa0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   19a82:	687b      	ldr	r3, [r7, #4]
   19a84:	2200      	movs	r2, #0
   19a86:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   19a88:	687b      	ldr	r3, [r7, #4]
   19a8a:	2200      	movs	r2, #0
   19a8c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   19a8e:	687b      	ldr	r3, [r7, #4]
   19a90:	2200      	movs	r2, #0
   19a92:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   19a94:	6878      	ldr	r0, [r7, #4]
   19a96:	2300      	movs	r3, #0
   19a98:	2200      	movs	r2, #0
   19a9a:	2100      	movs	r1, #0
   19a9c:	4c02      	ldr	r4, [pc, #8]	; (19aa8 <prvInitialiseMutex+0x34>)
   19a9e:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   19aa0:	46c0      	nop			; (mov r8, r8)
   19aa2:	46bd      	mov	sp, r7
   19aa4:	b003      	add	sp, #12
   19aa6:	bd90      	pop	{r4, r7, pc}
   19aa8:	00019aed 	.word	0x00019aed

00019aac <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   19aac:	b580      	push	{r7, lr}
   19aae:	b086      	sub	sp, #24
   19ab0:	af00      	add	r7, sp, #0
   19ab2:	0002      	movs	r2, r0
   19ab4:	1dfb      	adds	r3, r7, #7
   19ab6:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   19ab8:	2301      	movs	r3, #1
   19aba:	617b      	str	r3, [r7, #20]
   19abc:	2300      	movs	r3, #0
   19abe:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   19ac0:	1dfb      	adds	r3, r7, #7
   19ac2:	781a      	ldrb	r2, [r3, #0]
   19ac4:	6939      	ldr	r1, [r7, #16]
   19ac6:	697b      	ldr	r3, [r7, #20]
   19ac8:	0018      	movs	r0, r3
   19aca:	4b06      	ldr	r3, [pc, #24]	; (19ae4 <xQueueCreateMutex+0x38>)
   19acc:	4798      	blx	r3
   19ace:	0003      	movs	r3, r0
   19ad0:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   19ad2:	68fb      	ldr	r3, [r7, #12]
   19ad4:	0018      	movs	r0, r3
   19ad6:	4b04      	ldr	r3, [pc, #16]	; (19ae8 <xQueueCreateMutex+0x3c>)
   19ad8:	4798      	blx	r3

		return pxNewQueue;
   19ada:	68fb      	ldr	r3, [r7, #12]
	}
   19adc:	0018      	movs	r0, r3
   19ade:	46bd      	mov	sp, r7
   19ae0:	b006      	add	sp, #24
   19ae2:	bd80      	pop	{r7, pc}
   19ae4:	00019845 	.word	0x00019845
   19ae8:	00019a75 	.word	0x00019a75

00019aec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   19aec:	b5b0      	push	{r4, r5, r7, lr}
   19aee:	b08a      	sub	sp, #40	; 0x28
   19af0:	af00      	add	r7, sp, #0
   19af2:	60f8      	str	r0, [r7, #12]
   19af4:	60b9      	str	r1, [r7, #8]
   19af6:	607a      	str	r2, [r7, #4]
   19af8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   19afa:	2300      	movs	r3, #0
   19afc:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   19afe:	68fb      	ldr	r3, [r7, #12]
   19b00:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   19b02:	6a3b      	ldr	r3, [r7, #32]
   19b04:	2b00      	cmp	r3, #0
   19b06:	d101      	bne.n	19b0c <xQueueGenericSend+0x20>
   19b08:	b672      	cpsid	i
   19b0a:	e7fe      	b.n	19b0a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   19b0c:	68bb      	ldr	r3, [r7, #8]
   19b0e:	2b00      	cmp	r3, #0
   19b10:	d103      	bne.n	19b1a <xQueueGenericSend+0x2e>
   19b12:	6a3b      	ldr	r3, [r7, #32]
   19b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19b16:	2b00      	cmp	r3, #0
   19b18:	d101      	bne.n	19b1e <xQueueGenericSend+0x32>
   19b1a:	2301      	movs	r3, #1
   19b1c:	e000      	b.n	19b20 <xQueueGenericSend+0x34>
   19b1e:	2300      	movs	r3, #0
   19b20:	2b00      	cmp	r3, #0
   19b22:	d101      	bne.n	19b28 <xQueueGenericSend+0x3c>
   19b24:	b672      	cpsid	i
   19b26:	e7fe      	b.n	19b26 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   19b28:	683b      	ldr	r3, [r7, #0]
   19b2a:	2b02      	cmp	r3, #2
   19b2c:	d103      	bne.n	19b36 <xQueueGenericSend+0x4a>
   19b2e:	6a3b      	ldr	r3, [r7, #32]
   19b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19b32:	2b01      	cmp	r3, #1
   19b34:	d101      	bne.n	19b3a <xQueueGenericSend+0x4e>
   19b36:	2301      	movs	r3, #1
   19b38:	e000      	b.n	19b3c <xQueueGenericSend+0x50>
   19b3a:	2300      	movs	r3, #0
   19b3c:	2b00      	cmp	r3, #0
   19b3e:	d101      	bne.n	19b44 <xQueueGenericSend+0x58>
   19b40:	b672      	cpsid	i
   19b42:	e7fe      	b.n	19b42 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   19b44:	4bbc      	ldr	r3, [pc, #752]	; (19e38 <xQueueGenericSend+0x34c>)
   19b46:	4798      	blx	r3
   19b48:	1e03      	subs	r3, r0, #0
   19b4a:	d102      	bne.n	19b52 <xQueueGenericSend+0x66>
   19b4c:	687b      	ldr	r3, [r7, #4]
   19b4e:	2b00      	cmp	r3, #0
   19b50:	d101      	bne.n	19b56 <xQueueGenericSend+0x6a>
   19b52:	2301      	movs	r3, #1
   19b54:	e000      	b.n	19b58 <xQueueGenericSend+0x6c>
   19b56:	2300      	movs	r3, #0
   19b58:	2b00      	cmp	r3, #0
   19b5a:	d101      	bne.n	19b60 <xQueueGenericSend+0x74>
   19b5c:	b672      	cpsid	i
   19b5e:	e7fe      	b.n	19b5e <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   19b60:	4bb6      	ldr	r3, [pc, #728]	; (19e3c <xQueueGenericSend+0x350>)
   19b62:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   19b64:	6a3b      	ldr	r3, [r7, #32]
   19b66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   19b68:	6a3b      	ldr	r3, [r7, #32]
   19b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19b6c:	429a      	cmp	r2, r3
   19b6e:	d303      	bcc.n	19b78 <xQueueGenericSend+0x8c>
   19b70:	683b      	ldr	r3, [r7, #0]
   19b72:	2b02      	cmp	r3, #2
   19b74:	d000      	beq.n	19b78 <xQueueGenericSend+0x8c>
   19b76:	e08e      	b.n	19c96 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   19b78:	4bb1      	ldr	r3, [pc, #708]	; (19e40 <xQueueGenericSend+0x354>)
   19b7a:	4798      	blx	r3
   19b7c:	0003      	movs	r3, r0
   19b7e:	0018      	movs	r0, r3
   19b80:	4bb0      	ldr	r3, [pc, #704]	; (19e44 <xQueueGenericSend+0x358>)
   19b82:	4798      	blx	r3
   19b84:	0003      	movs	r3, r0
   19b86:	001a      	movs	r2, r3
   19b88:	4baf      	ldr	r3, [pc, #700]	; (19e48 <xQueueGenericSend+0x35c>)
   19b8a:	881b      	ldrh	r3, [r3, #0]
   19b8c:	4013      	ands	r3, r2
   19b8e:	b29b      	uxth	r3, r3
   19b90:	2b00      	cmp	r3, #0
   19b92:	d02e      	beq.n	19bf2 <xQueueGenericSend+0x106>
   19b94:	6a3b      	ldr	r3, [r7, #32]
   19b96:	0018      	movs	r0, r3
   19b98:	4bac      	ldr	r3, [pc, #688]	; (19e4c <xQueueGenericSend+0x360>)
   19b9a:	4798      	blx	r3
   19b9c:	0003      	movs	r3, r0
   19b9e:	001a      	movs	r2, r3
   19ba0:	4ba9      	ldr	r3, [pc, #676]	; (19e48 <xQueueGenericSend+0x35c>)
   19ba2:	881b      	ldrh	r3, [r3, #0]
   19ba4:	4013      	ands	r3, r2
   19ba6:	b29b      	uxth	r3, r3
   19ba8:	2b00      	cmp	r3, #0
   19baa:	d022      	beq.n	19bf2 <xQueueGenericSend+0x106>
   19bac:	683b      	ldr	r3, [r7, #0]
   19bae:	2b00      	cmp	r3, #0
   19bb0:	d10b      	bne.n	19bca <xQueueGenericSend+0xde>
   19bb2:	6a3b      	ldr	r3, [r7, #32]
   19bb4:	0018      	movs	r0, r3
   19bb6:	4ba6      	ldr	r3, [pc, #664]	; (19e50 <xQueueGenericSend+0x364>)
   19bb8:	4798      	blx	r3
   19bba:	0003      	movs	r3, r0
   19bbc:	001a      	movs	r2, r3
   19bbe:	4ba5      	ldr	r3, [pc, #660]	; (19e54 <xQueueGenericSend+0x368>)
   19bc0:	5c9b      	ldrb	r3, [r3, r2]
   19bc2:	3320      	adds	r3, #32
   19bc4:	b2db      	uxtb	r3, r3
   19bc6:	001d      	movs	r5, r3
   19bc8:	e000      	b.n	19bcc <xQueueGenericSend+0xe0>
   19bca:	2525      	movs	r5, #37	; 0x25
   19bcc:	6a3b      	ldr	r3, [r7, #32]
   19bce:	0018      	movs	r0, r3
   19bd0:	4b9f      	ldr	r3, [pc, #636]	; (19e50 <xQueueGenericSend+0x364>)
   19bd2:	4798      	blx	r3
   19bd4:	0003      	movs	r3, r0
   19bd6:	001a      	movs	r2, r3
   19bd8:	4b9e      	ldr	r3, [pc, #632]	; (19e54 <xQueueGenericSend+0x368>)
   19bda:	5c9c      	ldrb	r4, [r3, r2]
   19bdc:	6a3b      	ldr	r3, [r7, #32]
   19bde:	0018      	movs	r0, r3
   19be0:	4b9d      	ldr	r3, [pc, #628]	; (19e58 <xQueueGenericSend+0x36c>)
   19be2:	4798      	blx	r3
   19be4:	0003      	movs	r3, r0
   19be6:	b2db      	uxtb	r3, r3
   19be8:	001a      	movs	r2, r3
   19bea:	0021      	movs	r1, r4
   19bec:	0028      	movs	r0, r5
   19bee:	4b9b      	ldr	r3, [pc, #620]	; (19e5c <xQueueGenericSend+0x370>)
   19bf0:	4798      	blx	r3
   19bf2:	6a3b      	ldr	r3, [r7, #32]
   19bf4:	0018      	movs	r0, r3
   19bf6:	4b96      	ldr	r3, [pc, #600]	; (19e50 <xQueueGenericSend+0x364>)
   19bf8:	4798      	blx	r3
   19bfa:	0003      	movs	r3, r0
   19bfc:	001a      	movs	r2, r3
   19bfe:	4b95      	ldr	r3, [pc, #596]	; (19e54 <xQueueGenericSend+0x368>)
   19c00:	5c9c      	ldrb	r4, [r3, r2]
   19c02:	6a3b      	ldr	r3, [r7, #32]
   19c04:	0018      	movs	r0, r3
   19c06:	4b94      	ldr	r3, [pc, #592]	; (19e58 <xQueueGenericSend+0x36c>)
   19c08:	4798      	blx	r3
   19c0a:	0003      	movs	r3, r0
   19c0c:	b2dd      	uxtb	r5, r3
   19c0e:	6a3b      	ldr	r3, [r7, #32]
   19c10:	0018      	movs	r0, r3
   19c12:	4b8f      	ldr	r3, [pc, #572]	; (19e50 <xQueueGenericSend+0x364>)
   19c14:	4798      	blx	r3
   19c16:	0003      	movs	r3, r0
   19c18:	001a      	movs	r2, r3
   19c1a:	4b8e      	ldr	r3, [pc, #568]	; (19e54 <xQueueGenericSend+0x368>)
   19c1c:	5c9b      	ldrb	r3, [r3, r2]
   19c1e:	2b02      	cmp	r3, #2
   19c20:	d005      	beq.n	19c2e <xQueueGenericSend+0x142>
   19c22:	6a3b      	ldr	r3, [r7, #32]
   19c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19c26:	b2db      	uxtb	r3, r3
   19c28:	3301      	adds	r3, #1
   19c2a:	b2db      	uxtb	r3, r3
   19c2c:	e000      	b.n	19c30 <xQueueGenericSend+0x144>
   19c2e:	2300      	movs	r3, #0
   19c30:	001a      	movs	r2, r3
   19c32:	0029      	movs	r1, r5
   19c34:	0020      	movs	r0, r4
   19c36:	4b8a      	ldr	r3, [pc, #552]	; (19e60 <xQueueGenericSend+0x374>)
   19c38:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   19c3a:	683a      	ldr	r2, [r7, #0]
   19c3c:	68b9      	ldr	r1, [r7, #8]
   19c3e:	6a3b      	ldr	r3, [r7, #32]
   19c40:	0018      	movs	r0, r3
   19c42:	4b88      	ldr	r3, [pc, #544]	; (19e64 <xQueueGenericSend+0x378>)
   19c44:	4798      	blx	r3
   19c46:	0003      	movs	r3, r0
   19c48:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   19c4a:	6a3b      	ldr	r3, [r7, #32]
   19c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   19c4e:	2b00      	cmp	r3, #0
   19c50:	d00a      	beq.n	19c68 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   19c52:	683a      	ldr	r2, [r7, #0]
   19c54:	6a3b      	ldr	r3, [r7, #32]
   19c56:	0011      	movs	r1, r2
   19c58:	0018      	movs	r0, r3
   19c5a:	4b83      	ldr	r3, [pc, #524]	; (19e68 <xQueueGenericSend+0x37c>)
   19c5c:	4798      	blx	r3
   19c5e:	1e03      	subs	r3, r0, #0
   19c60:	d015      	beq.n	19c8e <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   19c62:	4b82      	ldr	r3, [pc, #520]	; (19e6c <xQueueGenericSend+0x380>)
   19c64:	4798      	blx	r3
   19c66:	e012      	b.n	19c8e <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   19c68:	6a3b      	ldr	r3, [r7, #32]
   19c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19c6c:	2b00      	cmp	r3, #0
   19c6e:	d009      	beq.n	19c84 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   19c70:	6a3b      	ldr	r3, [r7, #32]
   19c72:	3324      	adds	r3, #36	; 0x24
   19c74:	0018      	movs	r0, r3
   19c76:	4b7e      	ldr	r3, [pc, #504]	; (19e70 <xQueueGenericSend+0x384>)
   19c78:	4798      	blx	r3
   19c7a:	1e03      	subs	r3, r0, #0
   19c7c:	d007      	beq.n	19c8e <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   19c7e:	4b7b      	ldr	r3, [pc, #492]	; (19e6c <xQueueGenericSend+0x380>)
   19c80:	4798      	blx	r3
   19c82:	e004      	b.n	19c8e <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   19c84:	69fb      	ldr	r3, [r7, #28]
   19c86:	2b00      	cmp	r3, #0
   19c88:	d001      	beq.n	19c8e <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   19c8a:	4b78      	ldr	r3, [pc, #480]	; (19e6c <xQueueGenericSend+0x380>)
   19c8c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   19c8e:	4b79      	ldr	r3, [pc, #484]	; (19e74 <xQueueGenericSend+0x388>)
   19c90:	4798      	blx	r3
				return pdPASS;
   19c92:	2301      	movs	r3, #1
   19c94:	e142      	b.n	19f1c <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   19c96:	687b      	ldr	r3, [r7, #4]
   19c98:	2b00      	cmp	r3, #0
   19c9a:	d140      	bne.n	19d1e <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   19c9c:	4b75      	ldr	r3, [pc, #468]	; (19e74 <xQueueGenericSend+0x388>)
   19c9e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   19ca0:	4b67      	ldr	r3, [pc, #412]	; (19e40 <xQueueGenericSend+0x354>)
   19ca2:	4798      	blx	r3
   19ca4:	0003      	movs	r3, r0
   19ca6:	0018      	movs	r0, r3
   19ca8:	4b66      	ldr	r3, [pc, #408]	; (19e44 <xQueueGenericSend+0x358>)
   19caa:	4798      	blx	r3
   19cac:	0003      	movs	r3, r0
   19cae:	001a      	movs	r2, r3
   19cb0:	4b65      	ldr	r3, [pc, #404]	; (19e48 <xQueueGenericSend+0x35c>)
   19cb2:	881b      	ldrh	r3, [r3, #0]
   19cb4:	4013      	ands	r3, r2
   19cb6:	b29b      	uxth	r3, r3
   19cb8:	2b00      	cmp	r3, #0
   19cba:	d02e      	beq.n	19d1a <xQueueGenericSend+0x22e>
   19cbc:	6a3b      	ldr	r3, [r7, #32]
   19cbe:	0018      	movs	r0, r3
   19cc0:	4b62      	ldr	r3, [pc, #392]	; (19e4c <xQueueGenericSend+0x360>)
   19cc2:	4798      	blx	r3
   19cc4:	0003      	movs	r3, r0
   19cc6:	001a      	movs	r2, r3
   19cc8:	4b5f      	ldr	r3, [pc, #380]	; (19e48 <xQueueGenericSend+0x35c>)
   19cca:	881b      	ldrh	r3, [r3, #0]
   19ccc:	4013      	ands	r3, r2
   19cce:	b29b      	uxth	r3, r3
   19cd0:	2b00      	cmp	r3, #0
   19cd2:	d022      	beq.n	19d1a <xQueueGenericSend+0x22e>
   19cd4:	683b      	ldr	r3, [r7, #0]
   19cd6:	2b00      	cmp	r3, #0
   19cd8:	d10b      	bne.n	19cf2 <xQueueGenericSend+0x206>
   19cda:	6a3b      	ldr	r3, [r7, #32]
   19cdc:	0018      	movs	r0, r3
   19cde:	4b5c      	ldr	r3, [pc, #368]	; (19e50 <xQueueGenericSend+0x364>)
   19ce0:	4798      	blx	r3
   19ce2:	0003      	movs	r3, r0
   19ce4:	001a      	movs	r2, r3
   19ce6:	4b5b      	ldr	r3, [pc, #364]	; (19e54 <xQueueGenericSend+0x368>)
   19ce8:	5c9b      	ldrb	r3, [r3, r2]
   19cea:	3348      	adds	r3, #72	; 0x48
   19cec:	b2db      	uxtb	r3, r3
   19cee:	001d      	movs	r5, r3
   19cf0:	e000      	b.n	19cf4 <xQueueGenericSend+0x208>
   19cf2:	254d      	movs	r5, #77	; 0x4d
   19cf4:	6a3b      	ldr	r3, [r7, #32]
   19cf6:	0018      	movs	r0, r3
   19cf8:	4b55      	ldr	r3, [pc, #340]	; (19e50 <xQueueGenericSend+0x364>)
   19cfa:	4798      	blx	r3
   19cfc:	0003      	movs	r3, r0
   19cfe:	001a      	movs	r2, r3
   19d00:	4b54      	ldr	r3, [pc, #336]	; (19e54 <xQueueGenericSend+0x368>)
   19d02:	5c9c      	ldrb	r4, [r3, r2]
   19d04:	6a3b      	ldr	r3, [r7, #32]
   19d06:	0018      	movs	r0, r3
   19d08:	4b53      	ldr	r3, [pc, #332]	; (19e58 <xQueueGenericSend+0x36c>)
   19d0a:	4798      	blx	r3
   19d0c:	0003      	movs	r3, r0
   19d0e:	b2db      	uxtb	r3, r3
   19d10:	001a      	movs	r2, r3
   19d12:	0021      	movs	r1, r4
   19d14:	0028      	movs	r0, r5
   19d16:	4b51      	ldr	r3, [pc, #324]	; (19e5c <xQueueGenericSend+0x370>)
   19d18:	4798      	blx	r3
					return errQUEUE_FULL;
   19d1a:	2300      	movs	r3, #0
   19d1c:	e0fe      	b.n	19f1c <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   19d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19d20:	2b00      	cmp	r3, #0
   19d22:	d106      	bne.n	19d32 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   19d24:	2314      	movs	r3, #20
   19d26:	18fb      	adds	r3, r7, r3
   19d28:	0018      	movs	r0, r3
   19d2a:	4b53      	ldr	r3, [pc, #332]	; (19e78 <xQueueGenericSend+0x38c>)
   19d2c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   19d2e:	2301      	movs	r3, #1
   19d30:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   19d32:	4b50      	ldr	r3, [pc, #320]	; (19e74 <xQueueGenericSend+0x388>)
   19d34:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   19d36:	4b51      	ldr	r3, [pc, #324]	; (19e7c <xQueueGenericSend+0x390>)
   19d38:	4798      	blx	r3
		prvLockQueue( pxQueue );
   19d3a:	4b40      	ldr	r3, [pc, #256]	; (19e3c <xQueueGenericSend+0x350>)
   19d3c:	4798      	blx	r3
   19d3e:	6a3b      	ldr	r3, [r7, #32]
   19d40:	2244      	movs	r2, #68	; 0x44
   19d42:	5c9b      	ldrb	r3, [r3, r2]
   19d44:	b25b      	sxtb	r3, r3
   19d46:	3301      	adds	r3, #1
   19d48:	d103      	bne.n	19d52 <xQueueGenericSend+0x266>
   19d4a:	6a3b      	ldr	r3, [r7, #32]
   19d4c:	2244      	movs	r2, #68	; 0x44
   19d4e:	2100      	movs	r1, #0
   19d50:	5499      	strb	r1, [r3, r2]
   19d52:	6a3b      	ldr	r3, [r7, #32]
   19d54:	2245      	movs	r2, #69	; 0x45
   19d56:	5c9b      	ldrb	r3, [r3, r2]
   19d58:	b25b      	sxtb	r3, r3
   19d5a:	3301      	adds	r3, #1
   19d5c:	d103      	bne.n	19d66 <xQueueGenericSend+0x27a>
   19d5e:	6a3b      	ldr	r3, [r7, #32]
   19d60:	2245      	movs	r2, #69	; 0x45
   19d62:	2100      	movs	r1, #0
   19d64:	5499      	strb	r1, [r3, r2]
   19d66:	4b43      	ldr	r3, [pc, #268]	; (19e74 <xQueueGenericSend+0x388>)
   19d68:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   19d6a:	1d3a      	adds	r2, r7, #4
   19d6c:	2314      	movs	r3, #20
   19d6e:	18fb      	adds	r3, r7, r3
   19d70:	0011      	movs	r1, r2
   19d72:	0018      	movs	r0, r3
   19d74:	4b42      	ldr	r3, [pc, #264]	; (19e80 <xQueueGenericSend+0x394>)
   19d76:	4798      	blx	r3
   19d78:	1e03      	subs	r3, r0, #0
   19d7a:	d000      	beq.n	19d7e <xQueueGenericSend+0x292>
   19d7c:	e08a      	b.n	19e94 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   19d7e:	6a3b      	ldr	r3, [r7, #32]
   19d80:	0018      	movs	r0, r3
   19d82:	4b40      	ldr	r3, [pc, #256]	; (19e84 <xQueueGenericSend+0x398>)
   19d84:	4798      	blx	r3
   19d86:	1e03      	subs	r3, r0, #0
   19d88:	d04f      	beq.n	19e2a <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   19d8a:	4b2d      	ldr	r3, [pc, #180]	; (19e40 <xQueueGenericSend+0x354>)
   19d8c:	4798      	blx	r3
   19d8e:	0003      	movs	r3, r0
   19d90:	0018      	movs	r0, r3
   19d92:	4b2c      	ldr	r3, [pc, #176]	; (19e44 <xQueueGenericSend+0x358>)
   19d94:	4798      	blx	r3
   19d96:	0003      	movs	r3, r0
   19d98:	001a      	movs	r2, r3
   19d9a:	4b2b      	ldr	r3, [pc, #172]	; (19e48 <xQueueGenericSend+0x35c>)
   19d9c:	881b      	ldrh	r3, [r3, #0]
   19d9e:	4013      	ands	r3, r2
   19da0:	b29b      	uxth	r3, r3
   19da2:	2b00      	cmp	r3, #0
   19da4:	d02e      	beq.n	19e04 <xQueueGenericSend+0x318>
   19da6:	6a3b      	ldr	r3, [r7, #32]
   19da8:	0018      	movs	r0, r3
   19daa:	4b28      	ldr	r3, [pc, #160]	; (19e4c <xQueueGenericSend+0x360>)
   19dac:	4798      	blx	r3
   19dae:	0003      	movs	r3, r0
   19db0:	001a      	movs	r2, r3
   19db2:	4b25      	ldr	r3, [pc, #148]	; (19e48 <xQueueGenericSend+0x35c>)
   19db4:	881b      	ldrh	r3, [r3, #0]
   19db6:	4013      	ands	r3, r2
   19db8:	b29b      	uxth	r3, r3
   19dba:	2b00      	cmp	r3, #0
   19dbc:	d022      	beq.n	19e04 <xQueueGenericSend+0x318>
   19dbe:	683b      	ldr	r3, [r7, #0]
   19dc0:	2b00      	cmp	r3, #0
   19dc2:	d10b      	bne.n	19ddc <xQueueGenericSend+0x2f0>
   19dc4:	6a3b      	ldr	r3, [r7, #32]
   19dc6:	0018      	movs	r0, r3
   19dc8:	4b21      	ldr	r3, [pc, #132]	; (19e50 <xQueueGenericSend+0x364>)
   19dca:	4798      	blx	r3
   19dcc:	0003      	movs	r3, r0
   19dce:	001a      	movs	r2, r3
   19dd0:	4b20      	ldr	r3, [pc, #128]	; (19e54 <xQueueGenericSend+0x368>)
   19dd2:	5c9b      	ldrb	r3, [r3, r2]
   19dd4:	3370      	adds	r3, #112	; 0x70
   19dd6:	b2db      	uxtb	r3, r3
   19dd8:	001d      	movs	r5, r3
   19dda:	e000      	b.n	19dde <xQueueGenericSend+0x2f2>
   19ddc:	2575      	movs	r5, #117	; 0x75
   19dde:	6a3b      	ldr	r3, [r7, #32]
   19de0:	0018      	movs	r0, r3
   19de2:	4b1b      	ldr	r3, [pc, #108]	; (19e50 <xQueueGenericSend+0x364>)
   19de4:	4798      	blx	r3
   19de6:	0003      	movs	r3, r0
   19de8:	001a      	movs	r2, r3
   19dea:	4b1a      	ldr	r3, [pc, #104]	; (19e54 <xQueueGenericSend+0x368>)
   19dec:	5c9c      	ldrb	r4, [r3, r2]
   19dee:	6a3b      	ldr	r3, [r7, #32]
   19df0:	0018      	movs	r0, r3
   19df2:	4b19      	ldr	r3, [pc, #100]	; (19e58 <xQueueGenericSend+0x36c>)
   19df4:	4798      	blx	r3
   19df6:	0003      	movs	r3, r0
   19df8:	b2db      	uxtb	r3, r3
   19dfa:	001a      	movs	r2, r3
   19dfc:	0021      	movs	r1, r4
   19dfe:	0028      	movs	r0, r5
   19e00:	4b16      	ldr	r3, [pc, #88]	; (19e5c <xQueueGenericSend+0x370>)
   19e02:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   19e04:	6a3b      	ldr	r3, [r7, #32]
   19e06:	3310      	adds	r3, #16
   19e08:	687a      	ldr	r2, [r7, #4]
   19e0a:	0011      	movs	r1, r2
   19e0c:	0018      	movs	r0, r3
   19e0e:	4b1e      	ldr	r3, [pc, #120]	; (19e88 <xQueueGenericSend+0x39c>)
   19e10:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   19e12:	6a3b      	ldr	r3, [r7, #32]
   19e14:	0018      	movs	r0, r3
   19e16:	4b1d      	ldr	r3, [pc, #116]	; (19e8c <xQueueGenericSend+0x3a0>)
   19e18:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   19e1a:	4b1d      	ldr	r3, [pc, #116]	; (19e90 <xQueueGenericSend+0x3a4>)
   19e1c:	4798      	blx	r3
   19e1e:	1e03      	subs	r3, r0, #0
   19e20:	d000      	beq.n	19e24 <xQueueGenericSend+0x338>
   19e22:	e69d      	b.n	19b60 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   19e24:	4b11      	ldr	r3, [pc, #68]	; (19e6c <xQueueGenericSend+0x380>)
   19e26:	4798      	blx	r3
   19e28:	e69a      	b.n	19b60 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   19e2a:	6a3b      	ldr	r3, [r7, #32]
   19e2c:	0018      	movs	r0, r3
   19e2e:	4b17      	ldr	r3, [pc, #92]	; (19e8c <xQueueGenericSend+0x3a0>)
   19e30:	4798      	blx	r3
				( void ) xTaskResumeAll();
   19e32:	4b17      	ldr	r3, [pc, #92]	; (19e90 <xQueueGenericSend+0x3a4>)
   19e34:	4798      	blx	r3
   19e36:	e693      	b.n	19b60 <xQueueGenericSend+0x74>
   19e38:	0001c279 	.word	0x0001c279
   19e3c:	00019559 	.word	0x00019559
   19e40:	000177e9 	.word	0x000177e9
   19e44:	0001754d 	.word	0x0001754d
   19e48:	200000f8 	.word	0x200000f8
   19e4c:	0001760d 	.word	0x0001760d
   19e50:	0001750d 	.word	0x0001750d
   19e54:	200000ec 	.word	0x200000ec
   19e58:	000175ed 	.word	0x000175ed
   19e5c:	00017f45 	.word	0x00017f45
   19e60:	000185a1 	.word	0x000185a1
   19e64:	0001ad25 	.word	0x0001ad25
   19e68:	0001b029 	.word	0x0001b029
   19e6c:	00019541 	.word	0x00019541
   19e70:	0001bde9 	.word	0x0001bde9
   19e74:	0001957d 	.word	0x0001957d
   19e78:	0001bf29 	.word	0x0001bf29
   19e7c:	0001b811 	.word	0x0001b811
   19e80:	0001bf51 	.word	0x0001bf51
   19e84:	0001af79 	.word	0x0001af79
   19e88:	0001bcc5 	.word	0x0001bcc5
   19e8c:	0001ae55 	.word	0x0001ae55
   19e90:	0001b829 	.word	0x0001b829
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   19e94:	6a3b      	ldr	r3, [r7, #32]
   19e96:	0018      	movs	r0, r3
   19e98:	4b22      	ldr	r3, [pc, #136]	; (19f24 <xQueueGenericSend+0x438>)
   19e9a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   19e9c:	4b22      	ldr	r3, [pc, #136]	; (19f28 <xQueueGenericSend+0x43c>)
   19e9e:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   19ea0:	4b22      	ldr	r3, [pc, #136]	; (19f2c <xQueueGenericSend+0x440>)
   19ea2:	4798      	blx	r3
   19ea4:	0003      	movs	r3, r0
   19ea6:	0018      	movs	r0, r3
   19ea8:	4b21      	ldr	r3, [pc, #132]	; (19f30 <xQueueGenericSend+0x444>)
   19eaa:	4798      	blx	r3
   19eac:	0003      	movs	r3, r0
   19eae:	001a      	movs	r2, r3
   19eb0:	4b20      	ldr	r3, [pc, #128]	; (19f34 <xQueueGenericSend+0x448>)
   19eb2:	881b      	ldrh	r3, [r3, #0]
   19eb4:	4013      	ands	r3, r2
   19eb6:	b29b      	uxth	r3, r3
   19eb8:	2b00      	cmp	r3, #0
   19eba:	d02e      	beq.n	19f1a <xQueueGenericSend+0x42e>
   19ebc:	6a3b      	ldr	r3, [r7, #32]
   19ebe:	0018      	movs	r0, r3
   19ec0:	4b1d      	ldr	r3, [pc, #116]	; (19f38 <xQueueGenericSend+0x44c>)
   19ec2:	4798      	blx	r3
   19ec4:	0003      	movs	r3, r0
   19ec6:	001a      	movs	r2, r3
   19ec8:	4b1a      	ldr	r3, [pc, #104]	; (19f34 <xQueueGenericSend+0x448>)
   19eca:	881b      	ldrh	r3, [r3, #0]
   19ecc:	4013      	ands	r3, r2
   19ece:	b29b      	uxth	r3, r3
   19ed0:	2b00      	cmp	r3, #0
   19ed2:	d022      	beq.n	19f1a <xQueueGenericSend+0x42e>
   19ed4:	683b      	ldr	r3, [r7, #0]
   19ed6:	2b00      	cmp	r3, #0
   19ed8:	d10b      	bne.n	19ef2 <xQueueGenericSend+0x406>
   19eda:	6a3b      	ldr	r3, [r7, #32]
   19edc:	0018      	movs	r0, r3
   19ede:	4b17      	ldr	r3, [pc, #92]	; (19f3c <xQueueGenericSend+0x450>)
   19ee0:	4798      	blx	r3
   19ee2:	0003      	movs	r3, r0
   19ee4:	001a      	movs	r2, r3
   19ee6:	4b16      	ldr	r3, [pc, #88]	; (19f40 <xQueueGenericSend+0x454>)
   19ee8:	5c9b      	ldrb	r3, [r3, r2]
   19eea:	3348      	adds	r3, #72	; 0x48
   19eec:	b2db      	uxtb	r3, r3
   19eee:	001d      	movs	r5, r3
   19ef0:	e000      	b.n	19ef4 <xQueueGenericSend+0x408>
   19ef2:	254d      	movs	r5, #77	; 0x4d
   19ef4:	6a3b      	ldr	r3, [r7, #32]
   19ef6:	0018      	movs	r0, r3
   19ef8:	4b10      	ldr	r3, [pc, #64]	; (19f3c <xQueueGenericSend+0x450>)
   19efa:	4798      	blx	r3
   19efc:	0003      	movs	r3, r0
   19efe:	001a      	movs	r2, r3
   19f00:	4b0f      	ldr	r3, [pc, #60]	; (19f40 <xQueueGenericSend+0x454>)
   19f02:	5c9c      	ldrb	r4, [r3, r2]
   19f04:	6a3b      	ldr	r3, [r7, #32]
   19f06:	0018      	movs	r0, r3
   19f08:	4b0e      	ldr	r3, [pc, #56]	; (19f44 <xQueueGenericSend+0x458>)
   19f0a:	4798      	blx	r3
   19f0c:	0003      	movs	r3, r0
   19f0e:	b2db      	uxtb	r3, r3
   19f10:	001a      	movs	r2, r3
   19f12:	0021      	movs	r1, r4
   19f14:	0028      	movs	r0, r5
   19f16:	4b0c      	ldr	r3, [pc, #48]	; (19f48 <xQueueGenericSend+0x45c>)
   19f18:	4798      	blx	r3
			return errQUEUE_FULL;
   19f1a:	2300      	movs	r3, #0
		}
	}
}
   19f1c:	0018      	movs	r0, r3
   19f1e:	46bd      	mov	sp, r7
   19f20:	b00a      	add	sp, #40	; 0x28
   19f22:	bdb0      	pop	{r4, r5, r7, pc}
   19f24:	0001ae55 	.word	0x0001ae55
   19f28:	0001b829 	.word	0x0001b829
   19f2c:	000177e9 	.word	0x000177e9
   19f30:	0001754d 	.word	0x0001754d
   19f34:	200000f8 	.word	0x200000f8
   19f38:	0001760d 	.word	0x0001760d
   19f3c:	0001750d 	.word	0x0001750d
   19f40:	200000ec 	.word	0x200000ec
   19f44:	000175ed 	.word	0x000175ed
   19f48:	00017f45 	.word	0x00017f45

00019f4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   19f4c:	b5b0      	push	{r4, r5, r7, lr}
   19f4e:	b088      	sub	sp, #32
   19f50:	af00      	add	r7, sp, #0
   19f52:	60f8      	str	r0, [r7, #12]
   19f54:	60b9      	str	r1, [r7, #8]
   19f56:	607a      	str	r2, [r7, #4]
   19f58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   19f5a:	68fb      	ldr	r3, [r7, #12]
   19f5c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   19f5e:	69bb      	ldr	r3, [r7, #24]
   19f60:	2b00      	cmp	r3, #0
   19f62:	d101      	bne.n	19f68 <xQueueGenericSendFromISR+0x1c>
   19f64:	b672      	cpsid	i
   19f66:	e7fe      	b.n	19f66 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   19f68:	68bb      	ldr	r3, [r7, #8]
   19f6a:	2b00      	cmp	r3, #0
   19f6c:	d103      	bne.n	19f76 <xQueueGenericSendFromISR+0x2a>
   19f6e:	69bb      	ldr	r3, [r7, #24]
   19f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19f72:	2b00      	cmp	r3, #0
   19f74:	d101      	bne.n	19f7a <xQueueGenericSendFromISR+0x2e>
   19f76:	2301      	movs	r3, #1
   19f78:	e000      	b.n	19f7c <xQueueGenericSendFromISR+0x30>
   19f7a:	2300      	movs	r3, #0
   19f7c:	2b00      	cmp	r3, #0
   19f7e:	d101      	bne.n	19f84 <xQueueGenericSendFromISR+0x38>
   19f80:	b672      	cpsid	i
   19f82:	e7fe      	b.n	19f82 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   19f84:	683b      	ldr	r3, [r7, #0]
   19f86:	2b02      	cmp	r3, #2
   19f88:	d103      	bne.n	19f92 <xQueueGenericSendFromISR+0x46>
   19f8a:	69bb      	ldr	r3, [r7, #24]
   19f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19f8e:	2b01      	cmp	r3, #1
   19f90:	d101      	bne.n	19f96 <xQueueGenericSendFromISR+0x4a>
   19f92:	2301      	movs	r3, #1
   19f94:	e000      	b.n	19f98 <xQueueGenericSendFromISR+0x4c>
   19f96:	2300      	movs	r3, #0
   19f98:	2b00      	cmp	r3, #0
   19f9a:	d101      	bne.n	19fa0 <xQueueGenericSendFromISR+0x54>
   19f9c:	b672      	cpsid	i
   19f9e:	e7fe      	b.n	19f9e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   19fa0:	4b68      	ldr	r3, [pc, #416]	; (1a144 <xQueueGenericSendFromISR+0x1f8>)
   19fa2:	4798      	blx	r3
   19fa4:	0003      	movs	r3, r0
   19fa6:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   19fa8:	69bb      	ldr	r3, [r7, #24]
   19faa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   19fac:	69bb      	ldr	r3, [r7, #24]
   19fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19fb0:	429a      	cmp	r2, r3
   19fb2:	d303      	bcc.n	19fbc <xQueueGenericSendFromISR+0x70>
   19fb4:	683b      	ldr	r3, [r7, #0]
   19fb6:	2b02      	cmp	r3, #2
   19fb8:	d000      	beq.n	19fbc <xQueueGenericSendFromISR+0x70>
   19fba:	e088      	b.n	1a0ce <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   19fbc:	2313      	movs	r3, #19
   19fbe:	18fb      	adds	r3, r7, r3
   19fc0:	69ba      	ldr	r2, [r7, #24]
   19fc2:	2145      	movs	r1, #69	; 0x45
   19fc4:	5c52      	ldrb	r2, [r2, r1]
   19fc6:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   19fc8:	69bb      	ldr	r3, [r7, #24]
   19fca:	0018      	movs	r0, r3
   19fcc:	4b5e      	ldr	r3, [pc, #376]	; (1a148 <xQueueGenericSendFromISR+0x1fc>)
   19fce:	4798      	blx	r3
   19fd0:	0003      	movs	r3, r0
   19fd2:	001a      	movs	r2, r3
   19fd4:	4b5d      	ldr	r3, [pc, #372]	; (1a14c <xQueueGenericSendFromISR+0x200>)
   19fd6:	881b      	ldrh	r3, [r3, #0]
   19fd8:	4013      	ands	r3, r2
   19fda:	b29b      	uxth	r3, r3
   19fdc:	2b00      	cmp	r3, #0
   19fde:	d022      	beq.n	1a026 <xQueueGenericSendFromISR+0xda>
   19fe0:	683b      	ldr	r3, [r7, #0]
   19fe2:	2b00      	cmp	r3, #0
   19fe4:	d10b      	bne.n	19ffe <xQueueGenericSendFromISR+0xb2>
   19fe6:	69bb      	ldr	r3, [r7, #24]
   19fe8:	0018      	movs	r0, r3
   19fea:	4b59      	ldr	r3, [pc, #356]	; (1a150 <xQueueGenericSendFromISR+0x204>)
   19fec:	4798      	blx	r3
   19fee:	0003      	movs	r3, r0
   19ff0:	001a      	movs	r2, r3
   19ff2:	4b58      	ldr	r3, [pc, #352]	; (1a154 <xQueueGenericSendFromISR+0x208>)
   19ff4:	5c9b      	ldrb	r3, [r3, r2]
   19ff6:	3330      	adds	r3, #48	; 0x30
   19ff8:	b2db      	uxtb	r3, r3
   19ffa:	001d      	movs	r5, r3
   19ffc:	e000      	b.n	1a000 <xQueueGenericSendFromISR+0xb4>
   19ffe:	2535      	movs	r5, #53	; 0x35
   1a000:	69bb      	ldr	r3, [r7, #24]
   1a002:	0018      	movs	r0, r3
   1a004:	4b52      	ldr	r3, [pc, #328]	; (1a150 <xQueueGenericSendFromISR+0x204>)
   1a006:	4798      	blx	r3
   1a008:	0003      	movs	r3, r0
   1a00a:	001a      	movs	r2, r3
   1a00c:	4b51      	ldr	r3, [pc, #324]	; (1a154 <xQueueGenericSendFromISR+0x208>)
   1a00e:	5c9c      	ldrb	r4, [r3, r2]
   1a010:	69bb      	ldr	r3, [r7, #24]
   1a012:	0018      	movs	r0, r3
   1a014:	4b50      	ldr	r3, [pc, #320]	; (1a158 <xQueueGenericSendFromISR+0x20c>)
   1a016:	4798      	blx	r3
   1a018:	0003      	movs	r3, r0
   1a01a:	b2db      	uxtb	r3, r3
   1a01c:	001a      	movs	r2, r3
   1a01e:	0021      	movs	r1, r4
   1a020:	0028      	movs	r0, r5
   1a022:	4b4e      	ldr	r3, [pc, #312]	; (1a15c <xQueueGenericSendFromISR+0x210>)
   1a024:	4798      	blx	r3
   1a026:	69bb      	ldr	r3, [r7, #24]
   1a028:	0018      	movs	r0, r3
   1a02a:	4b49      	ldr	r3, [pc, #292]	; (1a150 <xQueueGenericSendFromISR+0x204>)
   1a02c:	4798      	blx	r3
   1a02e:	0003      	movs	r3, r0
   1a030:	001a      	movs	r2, r3
   1a032:	4b48      	ldr	r3, [pc, #288]	; (1a154 <xQueueGenericSendFromISR+0x208>)
   1a034:	5c9c      	ldrb	r4, [r3, r2]
   1a036:	69bb      	ldr	r3, [r7, #24]
   1a038:	0018      	movs	r0, r3
   1a03a:	4b47      	ldr	r3, [pc, #284]	; (1a158 <xQueueGenericSendFromISR+0x20c>)
   1a03c:	4798      	blx	r3
   1a03e:	0003      	movs	r3, r0
   1a040:	b2d9      	uxtb	r1, r3
   1a042:	69bb      	ldr	r3, [r7, #24]
   1a044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a046:	b2db      	uxtb	r3, r3
   1a048:	3301      	adds	r3, #1
   1a04a:	b2db      	uxtb	r3, r3
   1a04c:	001a      	movs	r2, r3
   1a04e:	0020      	movs	r0, r4
   1a050:	4b43      	ldr	r3, [pc, #268]	; (1a160 <xQueueGenericSendFromISR+0x214>)
   1a052:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1a054:	683a      	ldr	r2, [r7, #0]
   1a056:	68b9      	ldr	r1, [r7, #8]
   1a058:	69bb      	ldr	r3, [r7, #24]
   1a05a:	0018      	movs	r0, r3
   1a05c:	4b41      	ldr	r3, [pc, #260]	; (1a164 <xQueueGenericSendFromISR+0x218>)
   1a05e:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1a060:	2313      	movs	r3, #19
   1a062:	18fb      	adds	r3, r7, r3
   1a064:	781b      	ldrb	r3, [r3, #0]
   1a066:	b25b      	sxtb	r3, r3
   1a068:	3301      	adds	r3, #1
   1a06a:	d124      	bne.n	1a0b6 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1a06c:	69bb      	ldr	r3, [r7, #24]
   1a06e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1a070:	2b00      	cmp	r3, #0
   1a072:	d00e      	beq.n	1a092 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1a074:	683a      	ldr	r2, [r7, #0]
   1a076:	69bb      	ldr	r3, [r7, #24]
   1a078:	0011      	movs	r1, r2
   1a07a:	0018      	movs	r0, r3
   1a07c:	4b3a      	ldr	r3, [pc, #232]	; (1a168 <xQueueGenericSendFromISR+0x21c>)
   1a07e:	4798      	blx	r3
   1a080:	1e03      	subs	r3, r0, #0
   1a082:	d021      	beq.n	1a0c8 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1a084:	687b      	ldr	r3, [r7, #4]
   1a086:	2b00      	cmp	r3, #0
   1a088:	d01e      	beq.n	1a0c8 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1a08a:	687b      	ldr	r3, [r7, #4]
   1a08c:	2201      	movs	r2, #1
   1a08e:	601a      	str	r2, [r3, #0]
   1a090:	e01a      	b.n	1a0c8 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a092:	69bb      	ldr	r3, [r7, #24]
   1a094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a096:	2b00      	cmp	r3, #0
   1a098:	d016      	beq.n	1a0c8 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a09a:	69bb      	ldr	r3, [r7, #24]
   1a09c:	3324      	adds	r3, #36	; 0x24
   1a09e:	0018      	movs	r0, r3
   1a0a0:	4b32      	ldr	r3, [pc, #200]	; (1a16c <xQueueGenericSendFromISR+0x220>)
   1a0a2:	4798      	blx	r3
   1a0a4:	1e03      	subs	r3, r0, #0
   1a0a6:	d00f      	beq.n	1a0c8 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1a0a8:	687b      	ldr	r3, [r7, #4]
   1a0aa:	2b00      	cmp	r3, #0
   1a0ac:	d00c      	beq.n	1a0c8 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1a0ae:	687b      	ldr	r3, [r7, #4]
   1a0b0:	2201      	movs	r2, #1
   1a0b2:	601a      	str	r2, [r3, #0]
   1a0b4:	e008      	b.n	1a0c8 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1a0b6:	2313      	movs	r3, #19
   1a0b8:	18fb      	adds	r3, r7, r3
   1a0ba:	781b      	ldrb	r3, [r3, #0]
   1a0bc:	3301      	adds	r3, #1
   1a0be:	b2db      	uxtb	r3, r3
   1a0c0:	b259      	sxtb	r1, r3
   1a0c2:	69bb      	ldr	r3, [r7, #24]
   1a0c4:	2245      	movs	r2, #69	; 0x45
   1a0c6:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1a0c8:	2301      	movs	r3, #1
   1a0ca:	61fb      	str	r3, [r7, #28]
		{
   1a0cc:	e030      	b.n	1a130 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1a0ce:	69bb      	ldr	r3, [r7, #24]
   1a0d0:	0018      	movs	r0, r3
   1a0d2:	4b1d      	ldr	r3, [pc, #116]	; (1a148 <xQueueGenericSendFromISR+0x1fc>)
   1a0d4:	4798      	blx	r3
   1a0d6:	0003      	movs	r3, r0
   1a0d8:	001a      	movs	r2, r3
   1a0da:	4b1c      	ldr	r3, [pc, #112]	; (1a14c <xQueueGenericSendFromISR+0x200>)
   1a0dc:	881b      	ldrh	r3, [r3, #0]
   1a0de:	4013      	ands	r3, r2
   1a0e0:	b29b      	uxth	r3, r3
   1a0e2:	2b00      	cmp	r3, #0
   1a0e4:	d022      	beq.n	1a12c <xQueueGenericSendFromISR+0x1e0>
   1a0e6:	683b      	ldr	r3, [r7, #0]
   1a0e8:	2b00      	cmp	r3, #0
   1a0ea:	d10b      	bne.n	1a104 <xQueueGenericSendFromISR+0x1b8>
   1a0ec:	69bb      	ldr	r3, [r7, #24]
   1a0ee:	0018      	movs	r0, r3
   1a0f0:	4b17      	ldr	r3, [pc, #92]	; (1a150 <xQueueGenericSendFromISR+0x204>)
   1a0f2:	4798      	blx	r3
   1a0f4:	0003      	movs	r3, r0
   1a0f6:	001a      	movs	r2, r3
   1a0f8:	4b16      	ldr	r3, [pc, #88]	; (1a154 <xQueueGenericSendFromISR+0x208>)
   1a0fa:	5c9b      	ldrb	r3, [r3, r2]
   1a0fc:	3358      	adds	r3, #88	; 0x58
   1a0fe:	b2db      	uxtb	r3, r3
   1a100:	001d      	movs	r5, r3
   1a102:	e000      	b.n	1a106 <xQueueGenericSendFromISR+0x1ba>
   1a104:	255d      	movs	r5, #93	; 0x5d
   1a106:	69bb      	ldr	r3, [r7, #24]
   1a108:	0018      	movs	r0, r3
   1a10a:	4b11      	ldr	r3, [pc, #68]	; (1a150 <xQueueGenericSendFromISR+0x204>)
   1a10c:	4798      	blx	r3
   1a10e:	0003      	movs	r3, r0
   1a110:	001a      	movs	r2, r3
   1a112:	4b10      	ldr	r3, [pc, #64]	; (1a154 <xQueueGenericSendFromISR+0x208>)
   1a114:	5c9c      	ldrb	r4, [r3, r2]
   1a116:	69bb      	ldr	r3, [r7, #24]
   1a118:	0018      	movs	r0, r3
   1a11a:	4b0f      	ldr	r3, [pc, #60]	; (1a158 <xQueueGenericSendFromISR+0x20c>)
   1a11c:	4798      	blx	r3
   1a11e:	0003      	movs	r3, r0
   1a120:	b2db      	uxtb	r3, r3
   1a122:	001a      	movs	r2, r3
   1a124:	0021      	movs	r1, r4
   1a126:	0028      	movs	r0, r5
   1a128:	4b0c      	ldr	r3, [pc, #48]	; (1a15c <xQueueGenericSendFromISR+0x210>)
   1a12a:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1a12c:	2300      	movs	r3, #0
   1a12e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1a130:	697b      	ldr	r3, [r7, #20]
   1a132:	0018      	movs	r0, r3
   1a134:	4b0e      	ldr	r3, [pc, #56]	; (1a170 <xQueueGenericSendFromISR+0x224>)
   1a136:	4798      	blx	r3

	return xReturn;
   1a138:	69fb      	ldr	r3, [r7, #28]
}
   1a13a:	0018      	movs	r0, r3
   1a13c:	46bd      	mov	sp, r7
   1a13e:	b008      	add	sp, #32
   1a140:	bdb0      	pop	{r4, r5, r7, pc}
   1a142:	46c0      	nop			; (mov r8, r8)
   1a144:	000195ad 	.word	0x000195ad
   1a148:	0001760d 	.word	0x0001760d
   1a14c:	200000f8 	.word	0x200000f8
   1a150:	0001750d 	.word	0x0001750d
   1a154:	200000ec 	.word	0x200000ec
   1a158:	000175ed 	.word	0x000175ed
   1a15c:	00017f45 	.word	0x00017f45
   1a160:	000185a1 	.word	0x000185a1
   1a164:	0001ad25 	.word	0x0001ad25
   1a168:	0001b029 	.word	0x0001b029
   1a16c:	0001bde9 	.word	0x0001bde9
   1a170:	000195b9 	.word	0x000195b9

0001a174 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1a174:	b580      	push	{r7, lr}
   1a176:	b082      	sub	sp, #8
   1a178:	af00      	add	r7, sp, #0
   1a17a:	6078      	str	r0, [r7, #4]
   1a17c:	6039      	str	r1, [r7, #0]
   1a17e:	6839      	ldr	r1, [r7, #0]
   1a180:	687b      	ldr	r3, [r7, #4]
   1a182:	2200      	movs	r2, #0
   1a184:	0018      	movs	r0, r3
   1a186:	4b03      	ldr	r3, [pc, #12]	; (1a194 <xQueueGiveFromISR+0x20>)
   1a188:	4798      	blx	r3
   1a18a:	0003      	movs	r3, r0
   1a18c:	0018      	movs	r0, r3
   1a18e:	46bd      	mov	sp, r7
   1a190:	b002      	add	sp, #8
   1a192:	bd80      	pop	{r7, pc}
   1a194:	0001a199 	.word	0x0001a199

0001a198 <MyWrapper>:
{
   1a198:	b5b0      	push	{r4, r5, r7, lr}
   1a19a:	b08a      	sub	sp, #40	; 0x28
   1a19c:	af00      	add	r7, sp, #0
   1a19e:	60f8      	str	r0, [r7, #12]
   1a1a0:	60b9      	str	r1, [r7, #8]
   1a1a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a1a4:	68fb      	ldr	r3, [r7, #12]
   1a1a6:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1a1a8:	6a3b      	ldr	r3, [r7, #32]
   1a1aa:	2b00      	cmp	r3, #0
   1a1ac:	d101      	bne.n	1a1b2 <MyWrapper+0x1a>
   1a1ae:	b672      	cpsid	i
   1a1b0:	e7fe      	b.n	1a1b0 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1a1b2:	6a3b      	ldr	r3, [r7, #32]
   1a1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a1b6:	2b00      	cmp	r3, #0
   1a1b8:	d001      	beq.n	1a1be <MyWrapper+0x26>
   1a1ba:	b672      	cpsid	i
   1a1bc:	e7fe      	b.n	1a1bc <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1a1be:	6a3b      	ldr	r3, [r7, #32]
   1a1c0:	681b      	ldr	r3, [r3, #0]
   1a1c2:	2b00      	cmp	r3, #0
   1a1c4:	d103      	bne.n	1a1ce <MyWrapper+0x36>
   1a1c6:	6a3b      	ldr	r3, [r7, #32]
   1a1c8:	685b      	ldr	r3, [r3, #4]
   1a1ca:	2b00      	cmp	r3, #0
   1a1cc:	d101      	bne.n	1a1d2 <MyWrapper+0x3a>
   1a1ce:	2301      	movs	r3, #1
   1a1d0:	e000      	b.n	1a1d4 <MyWrapper+0x3c>
   1a1d2:	2300      	movs	r3, #0
   1a1d4:	2b00      	cmp	r3, #0
   1a1d6:	d101      	bne.n	1a1dc <MyWrapper+0x44>
   1a1d8:	b672      	cpsid	i
   1a1da:	e7fe      	b.n	1a1da <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1a1dc:	4b66      	ldr	r3, [pc, #408]	; (1a378 <MyWrapper+0x1e0>)
   1a1de:	4798      	blx	r3
   1a1e0:	0003      	movs	r3, r0
   1a1e2:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1a1e4:	6a3b      	ldr	r3, [r7, #32]
   1a1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a1e8:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1a1ea:	6a3b      	ldr	r3, [r7, #32]
   1a1ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1a1ee:	69bb      	ldr	r3, [r7, #24]
   1a1f0:	429a      	cmp	r2, r3
   1a1f2:	d800      	bhi.n	1a1f6 <MyWrapper+0x5e>
   1a1f4:	e085      	b.n	1a302 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1a1f6:	2317      	movs	r3, #23
   1a1f8:	18fb      	adds	r3, r7, r3
   1a1fa:	6a3a      	ldr	r2, [r7, #32]
   1a1fc:	2145      	movs	r1, #69	; 0x45
   1a1fe:	5c52      	ldrb	r2, [r2, r1]
   1a200:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1a202:	6a3b      	ldr	r3, [r7, #32]
   1a204:	0018      	movs	r0, r3
   1a206:	4b5d      	ldr	r3, [pc, #372]	; (1a37c <MyWrapper+0x1e4>)
   1a208:	4798      	blx	r3
   1a20a:	0003      	movs	r3, r0
   1a20c:	001a      	movs	r2, r3
   1a20e:	4b5c      	ldr	r3, [pc, #368]	; (1a380 <MyWrapper+0x1e8>)
   1a210:	881b      	ldrh	r3, [r3, #0]
   1a212:	4013      	ands	r3, r2
   1a214:	b29b      	uxth	r3, r3
   1a216:	2b00      	cmp	r3, #0
   1a218:	d022      	beq.n	1a260 <MyWrapper+0xc8>
   1a21a:	687b      	ldr	r3, [r7, #4]
   1a21c:	2b00      	cmp	r3, #0
   1a21e:	d10b      	bne.n	1a238 <MyWrapper+0xa0>
   1a220:	6a3b      	ldr	r3, [r7, #32]
   1a222:	0018      	movs	r0, r3
   1a224:	4b57      	ldr	r3, [pc, #348]	; (1a384 <MyWrapper+0x1ec>)
   1a226:	4798      	blx	r3
   1a228:	0003      	movs	r3, r0
   1a22a:	001a      	movs	r2, r3
   1a22c:	4b56      	ldr	r3, [pc, #344]	; (1a388 <MyWrapper+0x1f0>)
   1a22e:	5c9b      	ldrb	r3, [r3, r2]
   1a230:	3330      	adds	r3, #48	; 0x30
   1a232:	b2db      	uxtb	r3, r3
   1a234:	001d      	movs	r5, r3
   1a236:	e000      	b.n	1a23a <MyWrapper+0xa2>
   1a238:	2535      	movs	r5, #53	; 0x35
   1a23a:	6a3b      	ldr	r3, [r7, #32]
   1a23c:	0018      	movs	r0, r3
   1a23e:	4b51      	ldr	r3, [pc, #324]	; (1a384 <MyWrapper+0x1ec>)
   1a240:	4798      	blx	r3
   1a242:	0003      	movs	r3, r0
   1a244:	001a      	movs	r2, r3
   1a246:	4b50      	ldr	r3, [pc, #320]	; (1a388 <MyWrapper+0x1f0>)
   1a248:	5c9c      	ldrb	r4, [r3, r2]
   1a24a:	6a3b      	ldr	r3, [r7, #32]
   1a24c:	0018      	movs	r0, r3
   1a24e:	4b4f      	ldr	r3, [pc, #316]	; (1a38c <MyWrapper+0x1f4>)
   1a250:	4798      	blx	r3
   1a252:	0003      	movs	r3, r0
   1a254:	b2db      	uxtb	r3, r3
   1a256:	001a      	movs	r2, r3
   1a258:	0021      	movs	r1, r4
   1a25a:	0028      	movs	r0, r5
   1a25c:	4b4c      	ldr	r3, [pc, #304]	; (1a390 <MyWrapper+0x1f8>)
   1a25e:	4798      	blx	r3
   1a260:	6a3b      	ldr	r3, [r7, #32]
   1a262:	0018      	movs	r0, r3
   1a264:	4b47      	ldr	r3, [pc, #284]	; (1a384 <MyWrapper+0x1ec>)
   1a266:	4798      	blx	r3
   1a268:	0003      	movs	r3, r0
   1a26a:	001a      	movs	r2, r3
   1a26c:	4b46      	ldr	r3, [pc, #280]	; (1a388 <MyWrapper+0x1f0>)
   1a26e:	5c9c      	ldrb	r4, [r3, r2]
   1a270:	6a3b      	ldr	r3, [r7, #32]
   1a272:	0018      	movs	r0, r3
   1a274:	4b45      	ldr	r3, [pc, #276]	; (1a38c <MyWrapper+0x1f4>)
   1a276:	4798      	blx	r3
   1a278:	0003      	movs	r3, r0
   1a27a:	b2d9      	uxtb	r1, r3
   1a27c:	6a3b      	ldr	r3, [r7, #32]
   1a27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a280:	b2db      	uxtb	r3, r3
   1a282:	3301      	adds	r3, #1
   1a284:	b2db      	uxtb	r3, r3
   1a286:	001a      	movs	r2, r3
   1a288:	0020      	movs	r0, r4
   1a28a:	4b42      	ldr	r3, [pc, #264]	; (1a394 <MyWrapper+0x1fc>)
   1a28c:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1a28e:	69bb      	ldr	r3, [r7, #24]
   1a290:	1c5a      	adds	r2, r3, #1
   1a292:	6a3b      	ldr	r3, [r7, #32]
   1a294:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1a296:	2317      	movs	r3, #23
   1a298:	18fb      	adds	r3, r7, r3
   1a29a:	781b      	ldrb	r3, [r3, #0]
   1a29c:	b25b      	sxtb	r3, r3
   1a29e:	3301      	adds	r3, #1
   1a2a0:	d123      	bne.n	1a2ea <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1a2a2:	6a3b      	ldr	r3, [r7, #32]
   1a2a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1a2a6:	2b00      	cmp	r3, #0
   1a2a8:	d00d      	beq.n	1a2c6 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1a2aa:	6a3b      	ldr	r3, [r7, #32]
   1a2ac:	2100      	movs	r1, #0
   1a2ae:	0018      	movs	r0, r3
   1a2b0:	4b39      	ldr	r3, [pc, #228]	; (1a398 <MyWrapper+0x200>)
   1a2b2:	4798      	blx	r3
   1a2b4:	1e03      	subs	r3, r0, #0
   1a2b6:	d021      	beq.n	1a2fc <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1a2b8:	68bb      	ldr	r3, [r7, #8]
   1a2ba:	2b00      	cmp	r3, #0
   1a2bc:	d01e      	beq.n	1a2fc <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1a2be:	68bb      	ldr	r3, [r7, #8]
   1a2c0:	2201      	movs	r2, #1
   1a2c2:	601a      	str	r2, [r3, #0]
   1a2c4:	e01a      	b.n	1a2fc <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a2c6:	6a3b      	ldr	r3, [r7, #32]
   1a2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a2ca:	2b00      	cmp	r3, #0
   1a2cc:	d016      	beq.n	1a2fc <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a2ce:	6a3b      	ldr	r3, [r7, #32]
   1a2d0:	3324      	adds	r3, #36	; 0x24
   1a2d2:	0018      	movs	r0, r3
   1a2d4:	4b31      	ldr	r3, [pc, #196]	; (1a39c <MyWrapper+0x204>)
   1a2d6:	4798      	blx	r3
   1a2d8:	1e03      	subs	r3, r0, #0
   1a2da:	d00f      	beq.n	1a2fc <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1a2dc:	68bb      	ldr	r3, [r7, #8]
   1a2de:	2b00      	cmp	r3, #0
   1a2e0:	d00c      	beq.n	1a2fc <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1a2e2:	68bb      	ldr	r3, [r7, #8]
   1a2e4:	2201      	movs	r2, #1
   1a2e6:	601a      	str	r2, [r3, #0]
   1a2e8:	e008      	b.n	1a2fc <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1a2ea:	2317      	movs	r3, #23
   1a2ec:	18fb      	adds	r3, r7, r3
   1a2ee:	781b      	ldrb	r3, [r3, #0]
   1a2f0:	3301      	adds	r3, #1
   1a2f2:	b2db      	uxtb	r3, r3
   1a2f4:	b259      	sxtb	r1, r3
   1a2f6:	6a3b      	ldr	r3, [r7, #32]
   1a2f8:	2245      	movs	r2, #69	; 0x45
   1a2fa:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1a2fc:	2301      	movs	r3, #1
   1a2fe:	627b      	str	r3, [r7, #36]	; 0x24
   1a300:	e030      	b.n	1a364 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1a302:	6a3b      	ldr	r3, [r7, #32]
   1a304:	0018      	movs	r0, r3
   1a306:	4b1d      	ldr	r3, [pc, #116]	; (1a37c <MyWrapper+0x1e4>)
   1a308:	4798      	blx	r3
   1a30a:	0003      	movs	r3, r0
   1a30c:	001a      	movs	r2, r3
   1a30e:	4b1c      	ldr	r3, [pc, #112]	; (1a380 <MyWrapper+0x1e8>)
   1a310:	881b      	ldrh	r3, [r3, #0]
   1a312:	4013      	ands	r3, r2
   1a314:	b29b      	uxth	r3, r3
   1a316:	2b00      	cmp	r3, #0
   1a318:	d022      	beq.n	1a360 <MyWrapper+0x1c8>
   1a31a:	687b      	ldr	r3, [r7, #4]
   1a31c:	2b00      	cmp	r3, #0
   1a31e:	d10b      	bne.n	1a338 <MyWrapper+0x1a0>
   1a320:	6a3b      	ldr	r3, [r7, #32]
   1a322:	0018      	movs	r0, r3
   1a324:	4b17      	ldr	r3, [pc, #92]	; (1a384 <MyWrapper+0x1ec>)
   1a326:	4798      	blx	r3
   1a328:	0003      	movs	r3, r0
   1a32a:	001a      	movs	r2, r3
   1a32c:	4b16      	ldr	r3, [pc, #88]	; (1a388 <MyWrapper+0x1f0>)
   1a32e:	5c9b      	ldrb	r3, [r3, r2]
   1a330:	3358      	adds	r3, #88	; 0x58
   1a332:	b2db      	uxtb	r3, r3
   1a334:	001d      	movs	r5, r3
   1a336:	e000      	b.n	1a33a <MyWrapper+0x1a2>
   1a338:	255d      	movs	r5, #93	; 0x5d
   1a33a:	6a3b      	ldr	r3, [r7, #32]
   1a33c:	0018      	movs	r0, r3
   1a33e:	4b11      	ldr	r3, [pc, #68]	; (1a384 <MyWrapper+0x1ec>)
   1a340:	4798      	blx	r3
   1a342:	0003      	movs	r3, r0
   1a344:	001a      	movs	r2, r3
   1a346:	4b10      	ldr	r3, [pc, #64]	; (1a388 <MyWrapper+0x1f0>)
   1a348:	5c9c      	ldrb	r4, [r3, r2]
   1a34a:	6a3b      	ldr	r3, [r7, #32]
   1a34c:	0018      	movs	r0, r3
   1a34e:	4b0f      	ldr	r3, [pc, #60]	; (1a38c <MyWrapper+0x1f4>)
   1a350:	4798      	blx	r3
   1a352:	0003      	movs	r3, r0
   1a354:	b2db      	uxtb	r3, r3
   1a356:	001a      	movs	r2, r3
   1a358:	0021      	movs	r1, r4
   1a35a:	0028      	movs	r0, r5
   1a35c:	4b0c      	ldr	r3, [pc, #48]	; (1a390 <MyWrapper+0x1f8>)
   1a35e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1a360:	2300      	movs	r3, #0
   1a362:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1a364:	69fb      	ldr	r3, [r7, #28]
   1a366:	0018      	movs	r0, r3
   1a368:	4b0d      	ldr	r3, [pc, #52]	; (1a3a0 <MyWrapper+0x208>)
   1a36a:	4798      	blx	r3

	return xReturn;
   1a36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1a36e:	0018      	movs	r0, r3
   1a370:	46bd      	mov	sp, r7
   1a372:	b00a      	add	sp, #40	; 0x28
   1a374:	bdb0      	pop	{r4, r5, r7, pc}
   1a376:	46c0      	nop			; (mov r8, r8)
   1a378:	000195ad 	.word	0x000195ad
   1a37c:	0001760d 	.word	0x0001760d
   1a380:	200000f8 	.word	0x200000f8
   1a384:	0001750d 	.word	0x0001750d
   1a388:	200000ec 	.word	0x200000ec
   1a38c:	000175ed 	.word	0x000175ed
   1a390:	00017f45 	.word	0x00017f45
   1a394:	000185a1 	.word	0x000185a1
   1a398:	0001b029 	.word	0x0001b029
   1a39c:	0001bde9 	.word	0x0001bde9
   1a3a0:	000195b9 	.word	0x000195b9

0001a3a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1a3a4:	b5b0      	push	{r4, r5, r7, lr}
   1a3a6:	b08a      	sub	sp, #40	; 0x28
   1a3a8:	af00      	add	r7, sp, #0
   1a3aa:	60f8      	str	r0, [r7, #12]
   1a3ac:	60b9      	str	r1, [r7, #8]
   1a3ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1a3b0:	2300      	movs	r3, #0
   1a3b2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a3b4:	68fb      	ldr	r3, [r7, #12]
   1a3b6:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1a3b8:	6a3b      	ldr	r3, [r7, #32]
   1a3ba:	2b00      	cmp	r3, #0
   1a3bc:	d101      	bne.n	1a3c2 <xQueueReceive+0x1e>
   1a3be:	b672      	cpsid	i
   1a3c0:	e7fe      	b.n	1a3c0 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1a3c2:	68bb      	ldr	r3, [r7, #8]
   1a3c4:	2b00      	cmp	r3, #0
   1a3c6:	d103      	bne.n	1a3d0 <xQueueReceive+0x2c>
   1a3c8:	6a3b      	ldr	r3, [r7, #32]
   1a3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a3cc:	2b00      	cmp	r3, #0
   1a3ce:	d101      	bne.n	1a3d4 <xQueueReceive+0x30>
   1a3d0:	2301      	movs	r3, #1
   1a3d2:	e000      	b.n	1a3d6 <xQueueReceive+0x32>
   1a3d4:	2300      	movs	r3, #0
   1a3d6:	2b00      	cmp	r3, #0
   1a3d8:	d101      	bne.n	1a3de <xQueueReceive+0x3a>
   1a3da:	b672      	cpsid	i
   1a3dc:	e7fe      	b.n	1a3dc <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1a3de:	4bbf      	ldr	r3, [pc, #764]	; (1a6dc <xQueueReceive+0x338>)
   1a3e0:	4798      	blx	r3
   1a3e2:	1e03      	subs	r3, r0, #0
   1a3e4:	d102      	bne.n	1a3ec <xQueueReceive+0x48>
   1a3e6:	687b      	ldr	r3, [r7, #4]
   1a3e8:	2b00      	cmp	r3, #0
   1a3ea:	d101      	bne.n	1a3f0 <xQueueReceive+0x4c>
   1a3ec:	2301      	movs	r3, #1
   1a3ee:	e000      	b.n	1a3f2 <xQueueReceive+0x4e>
   1a3f0:	2300      	movs	r3, #0
   1a3f2:	2b00      	cmp	r3, #0
   1a3f4:	d101      	bne.n	1a3fa <xQueueReceive+0x56>
   1a3f6:	b672      	cpsid	i
   1a3f8:	e7fe      	b.n	1a3f8 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1a3fa:	4bb9      	ldr	r3, [pc, #740]	; (1a6e0 <xQueueReceive+0x33c>)
   1a3fc:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1a3fe:	6a3b      	ldr	r3, [r7, #32]
   1a400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a402:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1a404:	69fb      	ldr	r3, [r7, #28]
   1a406:	2b00      	cmp	r3, #0
   1a408:	d100      	bne.n	1a40c <xQueueReceive+0x68>
   1a40a:	e07d      	b.n	1a508 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1a40c:	68ba      	ldr	r2, [r7, #8]
   1a40e:	6a3b      	ldr	r3, [r7, #32]
   1a410:	0011      	movs	r1, r2
   1a412:	0018      	movs	r0, r3
   1a414:	4bb3      	ldr	r3, [pc, #716]	; (1a6e4 <xQueueReceive+0x340>)
   1a416:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1a418:	4bb3      	ldr	r3, [pc, #716]	; (1a6e8 <xQueueReceive+0x344>)
   1a41a:	4798      	blx	r3
   1a41c:	0003      	movs	r3, r0
   1a41e:	0018      	movs	r0, r3
   1a420:	4bb2      	ldr	r3, [pc, #712]	; (1a6ec <xQueueReceive+0x348>)
   1a422:	4798      	blx	r3
   1a424:	0003      	movs	r3, r0
   1a426:	001a      	movs	r2, r3
   1a428:	4bb1      	ldr	r3, [pc, #708]	; (1a6f0 <xQueueReceive+0x34c>)
   1a42a:	881b      	ldrh	r3, [r3, #0]
   1a42c:	4013      	ands	r3, r2
   1a42e:	b29b      	uxth	r3, r3
   1a430:	2b00      	cmp	r3, #0
   1a432:	d029      	beq.n	1a488 <xQueueReceive+0xe4>
   1a434:	6a3b      	ldr	r3, [r7, #32]
   1a436:	0018      	movs	r0, r3
   1a438:	4bae      	ldr	r3, [pc, #696]	; (1a6f4 <xQueueReceive+0x350>)
   1a43a:	4798      	blx	r3
   1a43c:	0003      	movs	r3, r0
   1a43e:	001a      	movs	r2, r3
   1a440:	4bab      	ldr	r3, [pc, #684]	; (1a6f0 <xQueueReceive+0x34c>)
   1a442:	881b      	ldrh	r3, [r3, #0]
   1a444:	4013      	ands	r3, r2
   1a446:	b29b      	uxth	r3, r3
   1a448:	2b00      	cmp	r3, #0
   1a44a:	d01d      	beq.n	1a488 <xQueueReceive+0xe4>
   1a44c:	6a3b      	ldr	r3, [r7, #32]
   1a44e:	0018      	movs	r0, r3
   1a450:	4ba9      	ldr	r3, [pc, #676]	; (1a6f8 <xQueueReceive+0x354>)
   1a452:	4798      	blx	r3
   1a454:	0003      	movs	r3, r0
   1a456:	001a      	movs	r2, r3
   1a458:	4ba8      	ldr	r3, [pc, #672]	; (1a6fc <xQueueReceive+0x358>)
   1a45a:	5c9b      	ldrb	r3, [r3, r2]
   1a45c:	3328      	adds	r3, #40	; 0x28
   1a45e:	b2db      	uxtb	r3, r3
   1a460:	001d      	movs	r5, r3
   1a462:	6a3b      	ldr	r3, [r7, #32]
   1a464:	0018      	movs	r0, r3
   1a466:	4ba4      	ldr	r3, [pc, #656]	; (1a6f8 <xQueueReceive+0x354>)
   1a468:	4798      	blx	r3
   1a46a:	0003      	movs	r3, r0
   1a46c:	001a      	movs	r2, r3
   1a46e:	4ba3      	ldr	r3, [pc, #652]	; (1a6fc <xQueueReceive+0x358>)
   1a470:	5c9c      	ldrb	r4, [r3, r2]
   1a472:	6a3b      	ldr	r3, [r7, #32]
   1a474:	0018      	movs	r0, r3
   1a476:	4ba2      	ldr	r3, [pc, #648]	; (1a700 <xQueueReceive+0x35c>)
   1a478:	4798      	blx	r3
   1a47a:	0003      	movs	r3, r0
   1a47c:	b2db      	uxtb	r3, r3
   1a47e:	001a      	movs	r2, r3
   1a480:	0021      	movs	r1, r4
   1a482:	0028      	movs	r0, r5
   1a484:	4b9f      	ldr	r3, [pc, #636]	; (1a704 <xQueueReceive+0x360>)
   1a486:	4798      	blx	r3
   1a488:	6a3b      	ldr	r3, [r7, #32]
   1a48a:	0018      	movs	r0, r3
   1a48c:	4b9a      	ldr	r3, [pc, #616]	; (1a6f8 <xQueueReceive+0x354>)
   1a48e:	4798      	blx	r3
   1a490:	0003      	movs	r3, r0
   1a492:	001a      	movs	r2, r3
   1a494:	4b99      	ldr	r3, [pc, #612]	; (1a6fc <xQueueReceive+0x358>)
   1a496:	5c9c      	ldrb	r4, [r3, r2]
   1a498:	6a3b      	ldr	r3, [r7, #32]
   1a49a:	0018      	movs	r0, r3
   1a49c:	4b98      	ldr	r3, [pc, #608]	; (1a700 <xQueueReceive+0x35c>)
   1a49e:	4798      	blx	r3
   1a4a0:	0003      	movs	r3, r0
   1a4a2:	b2dd      	uxtb	r5, r3
   1a4a4:	6a3b      	ldr	r3, [r7, #32]
   1a4a6:	0018      	movs	r0, r3
   1a4a8:	4b93      	ldr	r3, [pc, #588]	; (1a6f8 <xQueueReceive+0x354>)
   1a4aa:	4798      	blx	r3
   1a4ac:	0003      	movs	r3, r0
   1a4ae:	001a      	movs	r2, r3
   1a4b0:	4b92      	ldr	r3, [pc, #584]	; (1a6fc <xQueueReceive+0x358>)
   1a4b2:	5c9b      	ldrb	r3, [r3, r2]
   1a4b4:	2b02      	cmp	r3, #2
   1a4b6:	d108      	bne.n	1a4ca <xQueueReceive+0x126>
   1a4b8:	4b8b      	ldr	r3, [pc, #556]	; (1a6e8 <xQueueReceive+0x344>)
   1a4ba:	4798      	blx	r3
   1a4bc:	0003      	movs	r3, r0
   1a4be:	0018      	movs	r0, r3
   1a4c0:	4b91      	ldr	r3, [pc, #580]	; (1a708 <xQueueReceive+0x364>)
   1a4c2:	4798      	blx	r3
   1a4c4:	0003      	movs	r3, r0
   1a4c6:	b2db      	uxtb	r3, r3
   1a4c8:	e004      	b.n	1a4d4 <xQueueReceive+0x130>
   1a4ca:	6a3b      	ldr	r3, [r7, #32]
   1a4cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a4ce:	b2db      	uxtb	r3, r3
   1a4d0:	3b01      	subs	r3, #1
   1a4d2:	b2db      	uxtb	r3, r3
   1a4d4:	001a      	movs	r2, r3
   1a4d6:	0029      	movs	r1, r5
   1a4d8:	0020      	movs	r0, r4
   1a4da:	4b8c      	ldr	r3, [pc, #560]	; (1a70c <xQueueReceive+0x368>)
   1a4dc:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1a4de:	69fb      	ldr	r3, [r7, #28]
   1a4e0:	1e5a      	subs	r2, r3, #1
   1a4e2:	6a3b      	ldr	r3, [r7, #32]
   1a4e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a4e6:	6a3b      	ldr	r3, [r7, #32]
   1a4e8:	691b      	ldr	r3, [r3, #16]
   1a4ea:	2b00      	cmp	r3, #0
   1a4ec:	d008      	beq.n	1a500 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a4ee:	6a3b      	ldr	r3, [r7, #32]
   1a4f0:	3310      	adds	r3, #16
   1a4f2:	0018      	movs	r0, r3
   1a4f4:	4b86      	ldr	r3, [pc, #536]	; (1a710 <xQueueReceive+0x36c>)
   1a4f6:	4798      	blx	r3
   1a4f8:	1e03      	subs	r3, r0, #0
   1a4fa:	d001      	beq.n	1a500 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1a4fc:	4b85      	ldr	r3, [pc, #532]	; (1a714 <xQueueReceive+0x370>)
   1a4fe:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1a500:	4b85      	ldr	r3, [pc, #532]	; (1a718 <xQueueReceive+0x374>)
   1a502:	4798      	blx	r3
				return pdPASS;
   1a504:	2301      	movs	r3, #1
   1a506:	e15f      	b.n	1a7c8 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1a508:	687b      	ldr	r3, [r7, #4]
   1a50a:	2b00      	cmp	r3, #0
   1a50c:	d13b      	bne.n	1a586 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1a50e:	4b82      	ldr	r3, [pc, #520]	; (1a718 <xQueueReceive+0x374>)
   1a510:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1a512:	4b75      	ldr	r3, [pc, #468]	; (1a6e8 <xQueueReceive+0x344>)
   1a514:	4798      	blx	r3
   1a516:	0003      	movs	r3, r0
   1a518:	0018      	movs	r0, r3
   1a51a:	4b74      	ldr	r3, [pc, #464]	; (1a6ec <xQueueReceive+0x348>)
   1a51c:	4798      	blx	r3
   1a51e:	0003      	movs	r3, r0
   1a520:	001a      	movs	r2, r3
   1a522:	4b73      	ldr	r3, [pc, #460]	; (1a6f0 <xQueueReceive+0x34c>)
   1a524:	881b      	ldrh	r3, [r3, #0]
   1a526:	4013      	ands	r3, r2
   1a528:	b29b      	uxth	r3, r3
   1a52a:	2b00      	cmp	r3, #0
   1a52c:	d029      	beq.n	1a582 <xQueueReceive+0x1de>
   1a52e:	6a3b      	ldr	r3, [r7, #32]
   1a530:	0018      	movs	r0, r3
   1a532:	4b70      	ldr	r3, [pc, #448]	; (1a6f4 <xQueueReceive+0x350>)
   1a534:	4798      	blx	r3
   1a536:	0003      	movs	r3, r0
   1a538:	001a      	movs	r2, r3
   1a53a:	4b6d      	ldr	r3, [pc, #436]	; (1a6f0 <xQueueReceive+0x34c>)
   1a53c:	881b      	ldrh	r3, [r3, #0]
   1a53e:	4013      	ands	r3, r2
   1a540:	b29b      	uxth	r3, r3
   1a542:	2b00      	cmp	r3, #0
   1a544:	d01d      	beq.n	1a582 <xQueueReceive+0x1de>
   1a546:	6a3b      	ldr	r3, [r7, #32]
   1a548:	0018      	movs	r0, r3
   1a54a:	4b6b      	ldr	r3, [pc, #428]	; (1a6f8 <xQueueReceive+0x354>)
   1a54c:	4798      	blx	r3
   1a54e:	0003      	movs	r3, r0
   1a550:	001a      	movs	r2, r3
   1a552:	4b6a      	ldr	r3, [pc, #424]	; (1a6fc <xQueueReceive+0x358>)
   1a554:	5c9b      	ldrb	r3, [r3, r2]
   1a556:	3350      	adds	r3, #80	; 0x50
   1a558:	b2db      	uxtb	r3, r3
   1a55a:	001d      	movs	r5, r3
   1a55c:	6a3b      	ldr	r3, [r7, #32]
   1a55e:	0018      	movs	r0, r3
   1a560:	4b65      	ldr	r3, [pc, #404]	; (1a6f8 <xQueueReceive+0x354>)
   1a562:	4798      	blx	r3
   1a564:	0003      	movs	r3, r0
   1a566:	001a      	movs	r2, r3
   1a568:	4b64      	ldr	r3, [pc, #400]	; (1a6fc <xQueueReceive+0x358>)
   1a56a:	5c9c      	ldrb	r4, [r3, r2]
   1a56c:	6a3b      	ldr	r3, [r7, #32]
   1a56e:	0018      	movs	r0, r3
   1a570:	4b63      	ldr	r3, [pc, #396]	; (1a700 <xQueueReceive+0x35c>)
   1a572:	4798      	blx	r3
   1a574:	0003      	movs	r3, r0
   1a576:	b2db      	uxtb	r3, r3
   1a578:	001a      	movs	r2, r3
   1a57a:	0021      	movs	r1, r4
   1a57c:	0028      	movs	r0, r5
   1a57e:	4b61      	ldr	r3, [pc, #388]	; (1a704 <xQueueReceive+0x360>)
   1a580:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1a582:	2300      	movs	r3, #0
   1a584:	e120      	b.n	1a7c8 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1a586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a588:	2b00      	cmp	r3, #0
   1a58a:	d106      	bne.n	1a59a <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1a58c:	2314      	movs	r3, #20
   1a58e:	18fb      	adds	r3, r7, r3
   1a590:	0018      	movs	r0, r3
   1a592:	4b62      	ldr	r3, [pc, #392]	; (1a71c <xQueueReceive+0x378>)
   1a594:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1a596:	2301      	movs	r3, #1
   1a598:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1a59a:	4b5f      	ldr	r3, [pc, #380]	; (1a718 <xQueueReceive+0x374>)
   1a59c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1a59e:	4b60      	ldr	r3, [pc, #384]	; (1a720 <xQueueReceive+0x37c>)
   1a5a0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1a5a2:	4b4f      	ldr	r3, [pc, #316]	; (1a6e0 <xQueueReceive+0x33c>)
   1a5a4:	4798      	blx	r3
   1a5a6:	6a3b      	ldr	r3, [r7, #32]
   1a5a8:	2244      	movs	r2, #68	; 0x44
   1a5aa:	5c9b      	ldrb	r3, [r3, r2]
   1a5ac:	b25b      	sxtb	r3, r3
   1a5ae:	3301      	adds	r3, #1
   1a5b0:	d103      	bne.n	1a5ba <xQueueReceive+0x216>
   1a5b2:	6a3b      	ldr	r3, [r7, #32]
   1a5b4:	2244      	movs	r2, #68	; 0x44
   1a5b6:	2100      	movs	r1, #0
   1a5b8:	5499      	strb	r1, [r3, r2]
   1a5ba:	6a3b      	ldr	r3, [r7, #32]
   1a5bc:	2245      	movs	r2, #69	; 0x45
   1a5be:	5c9b      	ldrb	r3, [r3, r2]
   1a5c0:	b25b      	sxtb	r3, r3
   1a5c2:	3301      	adds	r3, #1
   1a5c4:	d103      	bne.n	1a5ce <xQueueReceive+0x22a>
   1a5c6:	6a3b      	ldr	r3, [r7, #32]
   1a5c8:	2245      	movs	r2, #69	; 0x45
   1a5ca:	2100      	movs	r1, #0
   1a5cc:	5499      	strb	r1, [r3, r2]
   1a5ce:	4b52      	ldr	r3, [pc, #328]	; (1a718 <xQueueReceive+0x374>)
   1a5d0:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1a5d2:	1d3a      	adds	r2, r7, #4
   1a5d4:	2314      	movs	r3, #20
   1a5d6:	18fb      	adds	r3, r7, r3
   1a5d8:	0011      	movs	r1, r2
   1a5da:	0018      	movs	r0, r3
   1a5dc:	4b51      	ldr	r3, [pc, #324]	; (1a724 <xQueueReceive+0x380>)
   1a5de:	4798      	blx	r3
   1a5e0:	1e03      	subs	r3, r0, #0
   1a5e2:	d000      	beq.n	1a5e6 <xQueueReceive+0x242>
   1a5e4:	e0aa      	b.n	1a73c <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1a5e6:	6a3b      	ldr	r3, [r7, #32]
   1a5e8:	0018      	movs	r0, r3
   1a5ea:	4b4f      	ldr	r3, [pc, #316]	; (1a728 <xQueueReceive+0x384>)
   1a5ec:	4798      	blx	r3
   1a5ee:	1e03      	subs	r3, r0, #0
   1a5f0:	d06d      	beq.n	1a6ce <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1a5f2:	4b3d      	ldr	r3, [pc, #244]	; (1a6e8 <xQueueReceive+0x344>)
   1a5f4:	4798      	blx	r3
   1a5f6:	0003      	movs	r3, r0
   1a5f8:	0018      	movs	r0, r3
   1a5fa:	4b3c      	ldr	r3, [pc, #240]	; (1a6ec <xQueueReceive+0x348>)
   1a5fc:	4798      	blx	r3
   1a5fe:	0003      	movs	r3, r0
   1a600:	001a      	movs	r2, r3
   1a602:	4b3b      	ldr	r3, [pc, #236]	; (1a6f0 <xQueueReceive+0x34c>)
   1a604:	881b      	ldrh	r3, [r3, #0]
   1a606:	4013      	ands	r3, r2
   1a608:	b29b      	uxth	r3, r3
   1a60a:	2b00      	cmp	r3, #0
   1a60c:	d029      	beq.n	1a662 <xQueueReceive+0x2be>
   1a60e:	6a3b      	ldr	r3, [r7, #32]
   1a610:	0018      	movs	r0, r3
   1a612:	4b38      	ldr	r3, [pc, #224]	; (1a6f4 <xQueueReceive+0x350>)
   1a614:	4798      	blx	r3
   1a616:	0003      	movs	r3, r0
   1a618:	001a      	movs	r2, r3
   1a61a:	4b35      	ldr	r3, [pc, #212]	; (1a6f0 <xQueueReceive+0x34c>)
   1a61c:	881b      	ldrh	r3, [r3, #0]
   1a61e:	4013      	ands	r3, r2
   1a620:	b29b      	uxth	r3, r3
   1a622:	2b00      	cmp	r3, #0
   1a624:	d01d      	beq.n	1a662 <xQueueReceive+0x2be>
   1a626:	6a3b      	ldr	r3, [r7, #32]
   1a628:	0018      	movs	r0, r3
   1a62a:	4b33      	ldr	r3, [pc, #204]	; (1a6f8 <xQueueReceive+0x354>)
   1a62c:	4798      	blx	r3
   1a62e:	0003      	movs	r3, r0
   1a630:	001a      	movs	r2, r3
   1a632:	4b32      	ldr	r3, [pc, #200]	; (1a6fc <xQueueReceive+0x358>)
   1a634:	5c9b      	ldrb	r3, [r3, r2]
   1a636:	3368      	adds	r3, #104	; 0x68
   1a638:	b2db      	uxtb	r3, r3
   1a63a:	001d      	movs	r5, r3
   1a63c:	6a3b      	ldr	r3, [r7, #32]
   1a63e:	0018      	movs	r0, r3
   1a640:	4b2d      	ldr	r3, [pc, #180]	; (1a6f8 <xQueueReceive+0x354>)
   1a642:	4798      	blx	r3
   1a644:	0003      	movs	r3, r0
   1a646:	001a      	movs	r2, r3
   1a648:	4b2c      	ldr	r3, [pc, #176]	; (1a6fc <xQueueReceive+0x358>)
   1a64a:	5c9c      	ldrb	r4, [r3, r2]
   1a64c:	6a3b      	ldr	r3, [r7, #32]
   1a64e:	0018      	movs	r0, r3
   1a650:	4b2b      	ldr	r3, [pc, #172]	; (1a700 <xQueueReceive+0x35c>)
   1a652:	4798      	blx	r3
   1a654:	0003      	movs	r3, r0
   1a656:	b2db      	uxtb	r3, r3
   1a658:	001a      	movs	r2, r3
   1a65a:	0021      	movs	r1, r4
   1a65c:	0028      	movs	r0, r5
   1a65e:	4b29      	ldr	r3, [pc, #164]	; (1a704 <xQueueReceive+0x360>)
   1a660:	4798      	blx	r3
   1a662:	6a3b      	ldr	r3, [r7, #32]
   1a664:	0018      	movs	r0, r3
   1a666:	4b24      	ldr	r3, [pc, #144]	; (1a6f8 <xQueueReceive+0x354>)
   1a668:	4798      	blx	r3
   1a66a:	0003      	movs	r3, r0
   1a66c:	001a      	movs	r2, r3
   1a66e:	4b23      	ldr	r3, [pc, #140]	; (1a6fc <xQueueReceive+0x358>)
   1a670:	5c9b      	ldrb	r3, [r3, r2]
   1a672:	2b02      	cmp	r3, #2
   1a674:	d018      	beq.n	1a6a8 <xQueueReceive+0x304>
   1a676:	4b1c      	ldr	r3, [pc, #112]	; (1a6e8 <xQueueReceive+0x344>)
   1a678:	4798      	blx	r3
   1a67a:	0003      	movs	r3, r0
   1a67c:	0018      	movs	r0, r3
   1a67e:	4b1b      	ldr	r3, [pc, #108]	; (1a6ec <xQueueReceive+0x348>)
   1a680:	4798      	blx	r3
   1a682:	0003      	movs	r3, r0
   1a684:	001a      	movs	r2, r3
   1a686:	4b1a      	ldr	r3, [pc, #104]	; (1a6f0 <xQueueReceive+0x34c>)
   1a688:	881b      	ldrh	r3, [r3, #0]
   1a68a:	4013      	ands	r3, r2
   1a68c:	b29b      	uxth	r3, r3
   1a68e:	2b00      	cmp	r3, #0
   1a690:	d00a      	beq.n	1a6a8 <xQueueReceive+0x304>
   1a692:	4b15      	ldr	r3, [pc, #84]	; (1a6e8 <xQueueReceive+0x344>)
   1a694:	4798      	blx	r3
   1a696:	0003      	movs	r3, r0
   1a698:	0018      	movs	r0, r3
   1a69a:	4b1b      	ldr	r3, [pc, #108]	; (1a708 <xQueueReceive+0x364>)
   1a69c:	4798      	blx	r3
   1a69e:	0003      	movs	r3, r0
   1a6a0:	b2db      	uxtb	r3, r3
   1a6a2:	0018      	movs	r0, r3
   1a6a4:	4b21      	ldr	r3, [pc, #132]	; (1a72c <xQueueReceive+0x388>)
   1a6a6:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1a6a8:	6a3b      	ldr	r3, [r7, #32]
   1a6aa:	3324      	adds	r3, #36	; 0x24
   1a6ac:	687a      	ldr	r2, [r7, #4]
   1a6ae:	0011      	movs	r1, r2
   1a6b0:	0018      	movs	r0, r3
   1a6b2:	4b1f      	ldr	r3, [pc, #124]	; (1a730 <xQueueReceive+0x38c>)
   1a6b4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1a6b6:	6a3b      	ldr	r3, [r7, #32]
   1a6b8:	0018      	movs	r0, r3
   1a6ba:	4b1e      	ldr	r3, [pc, #120]	; (1a734 <xQueueReceive+0x390>)
   1a6bc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1a6be:	4b1e      	ldr	r3, [pc, #120]	; (1a738 <xQueueReceive+0x394>)
   1a6c0:	4798      	blx	r3
   1a6c2:	1e03      	subs	r3, r0, #0
   1a6c4:	d000      	beq.n	1a6c8 <xQueueReceive+0x324>
   1a6c6:	e698      	b.n	1a3fa <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1a6c8:	4b12      	ldr	r3, [pc, #72]	; (1a714 <xQueueReceive+0x370>)
   1a6ca:	4798      	blx	r3
   1a6cc:	e695      	b.n	1a3fa <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1a6ce:	6a3b      	ldr	r3, [r7, #32]
   1a6d0:	0018      	movs	r0, r3
   1a6d2:	4b18      	ldr	r3, [pc, #96]	; (1a734 <xQueueReceive+0x390>)
   1a6d4:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1a6d6:	4b18      	ldr	r3, [pc, #96]	; (1a738 <xQueueReceive+0x394>)
   1a6d8:	4798      	blx	r3
   1a6da:	e68e      	b.n	1a3fa <xQueueReceive+0x56>
   1a6dc:	0001c279 	.word	0x0001c279
   1a6e0:	00019559 	.word	0x00019559
   1a6e4:	0001ae05 	.word	0x0001ae05
   1a6e8:	000177e9 	.word	0x000177e9
   1a6ec:	0001754d 	.word	0x0001754d
   1a6f0:	200000f8 	.word	0x200000f8
   1a6f4:	0001760d 	.word	0x0001760d
   1a6f8:	0001750d 	.word	0x0001750d
   1a6fc:	200000ec 	.word	0x200000ec
   1a700:	000175ed 	.word	0x000175ed
   1a704:	00017f45 	.word	0x00017f45
   1a708:	0001752d 	.word	0x0001752d
   1a70c:	000185a1 	.word	0x000185a1
   1a710:	0001bde9 	.word	0x0001bde9
   1a714:	00019541 	.word	0x00019541
   1a718:	0001957d 	.word	0x0001957d
   1a71c:	0001bf29 	.word	0x0001bf29
   1a720:	0001b811 	.word	0x0001b811
   1a724:	0001bf51 	.word	0x0001bf51
   1a728:	0001af45 	.word	0x0001af45
   1a72c:	000186dd 	.word	0x000186dd
   1a730:	0001bcc5 	.word	0x0001bcc5
   1a734:	0001ae55 	.word	0x0001ae55
   1a738:	0001b829 	.word	0x0001b829
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1a73c:	6a3b      	ldr	r3, [r7, #32]
   1a73e:	0018      	movs	r0, r3
   1a740:	4b23      	ldr	r3, [pc, #140]	; (1a7d0 <xQueueReceive+0x42c>)
   1a742:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1a744:	4b23      	ldr	r3, [pc, #140]	; (1a7d4 <xQueueReceive+0x430>)
   1a746:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1a748:	6a3b      	ldr	r3, [r7, #32]
   1a74a:	0018      	movs	r0, r3
   1a74c:	4b22      	ldr	r3, [pc, #136]	; (1a7d8 <xQueueReceive+0x434>)
   1a74e:	4798      	blx	r3
   1a750:	1e03      	subs	r3, r0, #0
   1a752:	d100      	bne.n	1a756 <xQueueReceive+0x3b2>
   1a754:	e651      	b.n	1a3fa <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1a756:	4b21      	ldr	r3, [pc, #132]	; (1a7dc <xQueueReceive+0x438>)
   1a758:	4798      	blx	r3
   1a75a:	0003      	movs	r3, r0
   1a75c:	0018      	movs	r0, r3
   1a75e:	4b20      	ldr	r3, [pc, #128]	; (1a7e0 <xQueueReceive+0x43c>)
   1a760:	4798      	blx	r3
   1a762:	0003      	movs	r3, r0
   1a764:	001a      	movs	r2, r3
   1a766:	4b1f      	ldr	r3, [pc, #124]	; (1a7e4 <xQueueReceive+0x440>)
   1a768:	881b      	ldrh	r3, [r3, #0]
   1a76a:	4013      	ands	r3, r2
   1a76c:	b29b      	uxth	r3, r3
   1a76e:	2b00      	cmp	r3, #0
   1a770:	d029      	beq.n	1a7c6 <xQueueReceive+0x422>
   1a772:	6a3b      	ldr	r3, [r7, #32]
   1a774:	0018      	movs	r0, r3
   1a776:	4b1c      	ldr	r3, [pc, #112]	; (1a7e8 <xQueueReceive+0x444>)
   1a778:	4798      	blx	r3
   1a77a:	0003      	movs	r3, r0
   1a77c:	001a      	movs	r2, r3
   1a77e:	4b19      	ldr	r3, [pc, #100]	; (1a7e4 <xQueueReceive+0x440>)
   1a780:	881b      	ldrh	r3, [r3, #0]
   1a782:	4013      	ands	r3, r2
   1a784:	b29b      	uxth	r3, r3
   1a786:	2b00      	cmp	r3, #0
   1a788:	d01d      	beq.n	1a7c6 <xQueueReceive+0x422>
   1a78a:	6a3b      	ldr	r3, [r7, #32]
   1a78c:	0018      	movs	r0, r3
   1a78e:	4b17      	ldr	r3, [pc, #92]	; (1a7ec <xQueueReceive+0x448>)
   1a790:	4798      	blx	r3
   1a792:	0003      	movs	r3, r0
   1a794:	001a      	movs	r2, r3
   1a796:	4b16      	ldr	r3, [pc, #88]	; (1a7f0 <xQueueReceive+0x44c>)
   1a798:	5c9b      	ldrb	r3, [r3, r2]
   1a79a:	3350      	adds	r3, #80	; 0x50
   1a79c:	b2db      	uxtb	r3, r3
   1a79e:	001d      	movs	r5, r3
   1a7a0:	6a3b      	ldr	r3, [r7, #32]
   1a7a2:	0018      	movs	r0, r3
   1a7a4:	4b11      	ldr	r3, [pc, #68]	; (1a7ec <xQueueReceive+0x448>)
   1a7a6:	4798      	blx	r3
   1a7a8:	0003      	movs	r3, r0
   1a7aa:	001a      	movs	r2, r3
   1a7ac:	4b10      	ldr	r3, [pc, #64]	; (1a7f0 <xQueueReceive+0x44c>)
   1a7ae:	5c9c      	ldrb	r4, [r3, r2]
   1a7b0:	6a3b      	ldr	r3, [r7, #32]
   1a7b2:	0018      	movs	r0, r3
   1a7b4:	4b0f      	ldr	r3, [pc, #60]	; (1a7f4 <xQueueReceive+0x450>)
   1a7b6:	4798      	blx	r3
   1a7b8:	0003      	movs	r3, r0
   1a7ba:	b2db      	uxtb	r3, r3
   1a7bc:	001a      	movs	r2, r3
   1a7be:	0021      	movs	r1, r4
   1a7c0:	0028      	movs	r0, r5
   1a7c2:	4b0d      	ldr	r3, [pc, #52]	; (1a7f8 <xQueueReceive+0x454>)
   1a7c4:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1a7c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1a7c8:	0018      	movs	r0, r3
   1a7ca:	46bd      	mov	sp, r7
   1a7cc:	b00a      	add	sp, #40	; 0x28
   1a7ce:	bdb0      	pop	{r4, r5, r7, pc}
   1a7d0:	0001ae55 	.word	0x0001ae55
   1a7d4:	0001b829 	.word	0x0001b829
   1a7d8:	0001af45 	.word	0x0001af45
   1a7dc:	000177e9 	.word	0x000177e9
   1a7e0:	0001754d 	.word	0x0001754d
   1a7e4:	200000f8 	.word	0x200000f8
   1a7e8:	0001760d 	.word	0x0001760d
   1a7ec:	0001750d 	.word	0x0001750d
   1a7f0:	200000ec 	.word	0x200000ec
   1a7f4:	000175ed 	.word	0x000175ed
   1a7f8:	00017f45 	.word	0x00017f45

0001a7fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1a7fc:	b5b0      	push	{r4, r5, r7, lr}
   1a7fe:	b08a      	sub	sp, #40	; 0x28
   1a800:	af00      	add	r7, sp, #0
   1a802:	6078      	str	r0, [r7, #4]
   1a804:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1a806:	2300      	movs	r3, #0
   1a808:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a80a:	687b      	ldr	r3, [r7, #4]
   1a80c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1a80e:	2300      	movs	r3, #0
   1a810:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1a812:	69fb      	ldr	r3, [r7, #28]
   1a814:	2b00      	cmp	r3, #0
   1a816:	d101      	bne.n	1a81c <xQueueSemaphoreTake+0x20>
   1a818:	b672      	cpsid	i
   1a81a:	e7fe      	b.n	1a81a <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1a81c:	69fb      	ldr	r3, [r7, #28]
   1a81e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a820:	2b00      	cmp	r3, #0
   1a822:	d001      	beq.n	1a828 <xQueueSemaphoreTake+0x2c>
   1a824:	b672      	cpsid	i
   1a826:	e7fe      	b.n	1a826 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1a828:	4bcb      	ldr	r3, [pc, #812]	; (1ab58 <xQueueSemaphoreTake+0x35c>)
   1a82a:	4798      	blx	r3
   1a82c:	1e03      	subs	r3, r0, #0
   1a82e:	d102      	bne.n	1a836 <xQueueSemaphoreTake+0x3a>
   1a830:	683b      	ldr	r3, [r7, #0]
   1a832:	2b00      	cmp	r3, #0
   1a834:	d101      	bne.n	1a83a <xQueueSemaphoreTake+0x3e>
   1a836:	2301      	movs	r3, #1
   1a838:	e000      	b.n	1a83c <xQueueSemaphoreTake+0x40>
   1a83a:	2300      	movs	r3, #0
   1a83c:	2b00      	cmp	r3, #0
   1a83e:	d101      	bne.n	1a844 <xQueueSemaphoreTake+0x48>
   1a840:	b672      	cpsid	i
   1a842:	e7fe      	b.n	1a842 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1a844:	4bc5      	ldr	r3, [pc, #788]	; (1ab5c <xQueueSemaphoreTake+0x360>)
   1a846:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1a848:	69fb      	ldr	r3, [r7, #28]
   1a84a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a84c:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1a84e:	69bb      	ldr	r3, [r7, #24]
   1a850:	2b00      	cmp	r3, #0
   1a852:	d100      	bne.n	1a856 <xQueueSemaphoreTake+0x5a>
   1a854:	e080      	b.n	1a958 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1a856:	4bc2      	ldr	r3, [pc, #776]	; (1ab60 <xQueueSemaphoreTake+0x364>)
   1a858:	4798      	blx	r3
   1a85a:	0003      	movs	r3, r0
   1a85c:	0018      	movs	r0, r3
   1a85e:	4bc1      	ldr	r3, [pc, #772]	; (1ab64 <xQueueSemaphoreTake+0x368>)
   1a860:	4798      	blx	r3
   1a862:	0003      	movs	r3, r0
   1a864:	001a      	movs	r2, r3
   1a866:	4bc0      	ldr	r3, [pc, #768]	; (1ab68 <xQueueSemaphoreTake+0x36c>)
   1a868:	881b      	ldrh	r3, [r3, #0]
   1a86a:	4013      	ands	r3, r2
   1a86c:	b29b      	uxth	r3, r3
   1a86e:	2b00      	cmp	r3, #0
   1a870:	d029      	beq.n	1a8c6 <xQueueSemaphoreTake+0xca>
   1a872:	69fb      	ldr	r3, [r7, #28]
   1a874:	0018      	movs	r0, r3
   1a876:	4bbd      	ldr	r3, [pc, #756]	; (1ab6c <xQueueSemaphoreTake+0x370>)
   1a878:	4798      	blx	r3
   1a87a:	0003      	movs	r3, r0
   1a87c:	001a      	movs	r2, r3
   1a87e:	4bba      	ldr	r3, [pc, #744]	; (1ab68 <xQueueSemaphoreTake+0x36c>)
   1a880:	881b      	ldrh	r3, [r3, #0]
   1a882:	4013      	ands	r3, r2
   1a884:	b29b      	uxth	r3, r3
   1a886:	2b00      	cmp	r3, #0
   1a888:	d01d      	beq.n	1a8c6 <xQueueSemaphoreTake+0xca>
   1a88a:	69fb      	ldr	r3, [r7, #28]
   1a88c:	0018      	movs	r0, r3
   1a88e:	4bb8      	ldr	r3, [pc, #736]	; (1ab70 <xQueueSemaphoreTake+0x374>)
   1a890:	4798      	blx	r3
   1a892:	0003      	movs	r3, r0
   1a894:	001a      	movs	r2, r3
   1a896:	4bb7      	ldr	r3, [pc, #732]	; (1ab74 <xQueueSemaphoreTake+0x378>)
   1a898:	5c9b      	ldrb	r3, [r3, r2]
   1a89a:	3328      	adds	r3, #40	; 0x28
   1a89c:	b2db      	uxtb	r3, r3
   1a89e:	001d      	movs	r5, r3
   1a8a0:	69fb      	ldr	r3, [r7, #28]
   1a8a2:	0018      	movs	r0, r3
   1a8a4:	4bb2      	ldr	r3, [pc, #712]	; (1ab70 <xQueueSemaphoreTake+0x374>)
   1a8a6:	4798      	blx	r3
   1a8a8:	0003      	movs	r3, r0
   1a8aa:	001a      	movs	r2, r3
   1a8ac:	4bb1      	ldr	r3, [pc, #708]	; (1ab74 <xQueueSemaphoreTake+0x378>)
   1a8ae:	5c9c      	ldrb	r4, [r3, r2]
   1a8b0:	69fb      	ldr	r3, [r7, #28]
   1a8b2:	0018      	movs	r0, r3
   1a8b4:	4bb0      	ldr	r3, [pc, #704]	; (1ab78 <xQueueSemaphoreTake+0x37c>)
   1a8b6:	4798      	blx	r3
   1a8b8:	0003      	movs	r3, r0
   1a8ba:	b2db      	uxtb	r3, r3
   1a8bc:	001a      	movs	r2, r3
   1a8be:	0021      	movs	r1, r4
   1a8c0:	0028      	movs	r0, r5
   1a8c2:	4bae      	ldr	r3, [pc, #696]	; (1ab7c <xQueueSemaphoreTake+0x380>)
   1a8c4:	4798      	blx	r3
   1a8c6:	69fb      	ldr	r3, [r7, #28]
   1a8c8:	0018      	movs	r0, r3
   1a8ca:	4ba9      	ldr	r3, [pc, #676]	; (1ab70 <xQueueSemaphoreTake+0x374>)
   1a8cc:	4798      	blx	r3
   1a8ce:	0003      	movs	r3, r0
   1a8d0:	001a      	movs	r2, r3
   1a8d2:	4ba8      	ldr	r3, [pc, #672]	; (1ab74 <xQueueSemaphoreTake+0x378>)
   1a8d4:	5c9c      	ldrb	r4, [r3, r2]
   1a8d6:	69fb      	ldr	r3, [r7, #28]
   1a8d8:	0018      	movs	r0, r3
   1a8da:	4ba7      	ldr	r3, [pc, #668]	; (1ab78 <xQueueSemaphoreTake+0x37c>)
   1a8dc:	4798      	blx	r3
   1a8de:	0003      	movs	r3, r0
   1a8e0:	b2dd      	uxtb	r5, r3
   1a8e2:	69fb      	ldr	r3, [r7, #28]
   1a8e4:	0018      	movs	r0, r3
   1a8e6:	4ba2      	ldr	r3, [pc, #648]	; (1ab70 <xQueueSemaphoreTake+0x374>)
   1a8e8:	4798      	blx	r3
   1a8ea:	0003      	movs	r3, r0
   1a8ec:	001a      	movs	r2, r3
   1a8ee:	4ba1      	ldr	r3, [pc, #644]	; (1ab74 <xQueueSemaphoreTake+0x378>)
   1a8f0:	5c9b      	ldrb	r3, [r3, r2]
   1a8f2:	2b02      	cmp	r3, #2
   1a8f4:	d108      	bne.n	1a908 <xQueueSemaphoreTake+0x10c>
   1a8f6:	4b9a      	ldr	r3, [pc, #616]	; (1ab60 <xQueueSemaphoreTake+0x364>)
   1a8f8:	4798      	blx	r3
   1a8fa:	0003      	movs	r3, r0
   1a8fc:	0018      	movs	r0, r3
   1a8fe:	4ba0      	ldr	r3, [pc, #640]	; (1ab80 <xQueueSemaphoreTake+0x384>)
   1a900:	4798      	blx	r3
   1a902:	0003      	movs	r3, r0
   1a904:	b2db      	uxtb	r3, r3
   1a906:	e004      	b.n	1a912 <xQueueSemaphoreTake+0x116>
   1a908:	69fb      	ldr	r3, [r7, #28]
   1a90a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a90c:	b2db      	uxtb	r3, r3
   1a90e:	3b01      	subs	r3, #1
   1a910:	b2db      	uxtb	r3, r3
   1a912:	001a      	movs	r2, r3
   1a914:	0029      	movs	r1, r5
   1a916:	0020      	movs	r0, r4
   1a918:	4b9a      	ldr	r3, [pc, #616]	; (1ab84 <xQueueSemaphoreTake+0x388>)
   1a91a:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1a91c:	69bb      	ldr	r3, [r7, #24]
   1a91e:	1e5a      	subs	r2, r3, #1
   1a920:	69fb      	ldr	r3, [r7, #28]
   1a922:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1a924:	69fb      	ldr	r3, [r7, #28]
   1a926:	681b      	ldr	r3, [r3, #0]
   1a928:	2b00      	cmp	r3, #0
   1a92a:	d104      	bne.n	1a936 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1a92c:	4b96      	ldr	r3, [pc, #600]	; (1ab88 <xQueueSemaphoreTake+0x38c>)
   1a92e:	4798      	blx	r3
   1a930:	0002      	movs	r2, r0
   1a932:	69fb      	ldr	r3, [r7, #28]
   1a934:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a936:	69fb      	ldr	r3, [r7, #28]
   1a938:	691b      	ldr	r3, [r3, #16]
   1a93a:	2b00      	cmp	r3, #0
   1a93c:	d008      	beq.n	1a950 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a93e:	69fb      	ldr	r3, [r7, #28]
   1a940:	3310      	adds	r3, #16
   1a942:	0018      	movs	r0, r3
   1a944:	4b91      	ldr	r3, [pc, #580]	; (1ab8c <xQueueSemaphoreTake+0x390>)
   1a946:	4798      	blx	r3
   1a948:	1e03      	subs	r3, r0, #0
   1a94a:	d001      	beq.n	1a950 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1a94c:	4b90      	ldr	r3, [pc, #576]	; (1ab90 <xQueueSemaphoreTake+0x394>)
   1a94e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1a950:	4b90      	ldr	r3, [pc, #576]	; (1ab94 <xQueueSemaphoreTake+0x398>)
   1a952:	4798      	blx	r3
				return pdPASS;
   1a954:	2301      	movs	r3, #1
   1a956:	e18b      	b.n	1ac70 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1a958:	683b      	ldr	r3, [r7, #0]
   1a95a:	2b00      	cmp	r3, #0
   1a95c:	d140      	bne.n	1a9e0 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1a95e:	6a3b      	ldr	r3, [r7, #32]
   1a960:	2b00      	cmp	r3, #0
   1a962:	d001      	beq.n	1a968 <xQueueSemaphoreTake+0x16c>
   1a964:	b672      	cpsid	i
   1a966:	e7fe      	b.n	1a966 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1a968:	4b8a      	ldr	r3, [pc, #552]	; (1ab94 <xQueueSemaphoreTake+0x398>)
   1a96a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1a96c:	4b7c      	ldr	r3, [pc, #496]	; (1ab60 <xQueueSemaphoreTake+0x364>)
   1a96e:	4798      	blx	r3
   1a970:	0003      	movs	r3, r0
   1a972:	0018      	movs	r0, r3
   1a974:	4b7b      	ldr	r3, [pc, #492]	; (1ab64 <xQueueSemaphoreTake+0x368>)
   1a976:	4798      	blx	r3
   1a978:	0003      	movs	r3, r0
   1a97a:	001a      	movs	r2, r3
   1a97c:	4b7a      	ldr	r3, [pc, #488]	; (1ab68 <xQueueSemaphoreTake+0x36c>)
   1a97e:	881b      	ldrh	r3, [r3, #0]
   1a980:	4013      	ands	r3, r2
   1a982:	b29b      	uxth	r3, r3
   1a984:	2b00      	cmp	r3, #0
   1a986:	d029      	beq.n	1a9dc <xQueueSemaphoreTake+0x1e0>
   1a988:	69fb      	ldr	r3, [r7, #28]
   1a98a:	0018      	movs	r0, r3
   1a98c:	4b77      	ldr	r3, [pc, #476]	; (1ab6c <xQueueSemaphoreTake+0x370>)
   1a98e:	4798      	blx	r3
   1a990:	0003      	movs	r3, r0
   1a992:	001a      	movs	r2, r3
   1a994:	4b74      	ldr	r3, [pc, #464]	; (1ab68 <xQueueSemaphoreTake+0x36c>)
   1a996:	881b      	ldrh	r3, [r3, #0]
   1a998:	4013      	ands	r3, r2
   1a99a:	b29b      	uxth	r3, r3
   1a99c:	2b00      	cmp	r3, #0
   1a99e:	d01d      	beq.n	1a9dc <xQueueSemaphoreTake+0x1e0>
   1a9a0:	69fb      	ldr	r3, [r7, #28]
   1a9a2:	0018      	movs	r0, r3
   1a9a4:	4b72      	ldr	r3, [pc, #456]	; (1ab70 <xQueueSemaphoreTake+0x374>)
   1a9a6:	4798      	blx	r3
   1a9a8:	0003      	movs	r3, r0
   1a9aa:	001a      	movs	r2, r3
   1a9ac:	4b71      	ldr	r3, [pc, #452]	; (1ab74 <xQueueSemaphoreTake+0x378>)
   1a9ae:	5c9b      	ldrb	r3, [r3, r2]
   1a9b0:	3350      	adds	r3, #80	; 0x50
   1a9b2:	b2db      	uxtb	r3, r3
   1a9b4:	001d      	movs	r5, r3
   1a9b6:	69fb      	ldr	r3, [r7, #28]
   1a9b8:	0018      	movs	r0, r3
   1a9ba:	4b6d      	ldr	r3, [pc, #436]	; (1ab70 <xQueueSemaphoreTake+0x374>)
   1a9bc:	4798      	blx	r3
   1a9be:	0003      	movs	r3, r0
   1a9c0:	001a      	movs	r2, r3
   1a9c2:	4b6c      	ldr	r3, [pc, #432]	; (1ab74 <xQueueSemaphoreTake+0x378>)
   1a9c4:	5c9c      	ldrb	r4, [r3, r2]
   1a9c6:	69fb      	ldr	r3, [r7, #28]
   1a9c8:	0018      	movs	r0, r3
   1a9ca:	4b6b      	ldr	r3, [pc, #428]	; (1ab78 <xQueueSemaphoreTake+0x37c>)
   1a9cc:	4798      	blx	r3
   1a9ce:	0003      	movs	r3, r0
   1a9d0:	b2db      	uxtb	r3, r3
   1a9d2:	001a      	movs	r2, r3
   1a9d4:	0021      	movs	r1, r4
   1a9d6:	0028      	movs	r0, r5
   1a9d8:	4b68      	ldr	r3, [pc, #416]	; (1ab7c <xQueueSemaphoreTake+0x380>)
   1a9da:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1a9dc:	2300      	movs	r3, #0
   1a9de:	e147      	b.n	1ac70 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1a9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a9e2:	2b00      	cmp	r3, #0
   1a9e4:	d106      	bne.n	1a9f4 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1a9e6:	230c      	movs	r3, #12
   1a9e8:	18fb      	adds	r3, r7, r3
   1a9ea:	0018      	movs	r0, r3
   1a9ec:	4b6a      	ldr	r3, [pc, #424]	; (1ab98 <xQueueSemaphoreTake+0x39c>)
   1a9ee:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1a9f0:	2301      	movs	r3, #1
   1a9f2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1a9f4:	4b67      	ldr	r3, [pc, #412]	; (1ab94 <xQueueSemaphoreTake+0x398>)
   1a9f6:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1a9f8:	4b68      	ldr	r3, [pc, #416]	; (1ab9c <xQueueSemaphoreTake+0x3a0>)
   1a9fa:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1a9fc:	4b57      	ldr	r3, [pc, #348]	; (1ab5c <xQueueSemaphoreTake+0x360>)
   1a9fe:	4798      	blx	r3
   1aa00:	69fb      	ldr	r3, [r7, #28]
   1aa02:	2244      	movs	r2, #68	; 0x44
   1aa04:	5c9b      	ldrb	r3, [r3, r2]
   1aa06:	b25b      	sxtb	r3, r3
   1aa08:	3301      	adds	r3, #1
   1aa0a:	d103      	bne.n	1aa14 <xQueueSemaphoreTake+0x218>
   1aa0c:	69fb      	ldr	r3, [r7, #28]
   1aa0e:	2244      	movs	r2, #68	; 0x44
   1aa10:	2100      	movs	r1, #0
   1aa12:	5499      	strb	r1, [r3, r2]
   1aa14:	69fb      	ldr	r3, [r7, #28]
   1aa16:	2245      	movs	r2, #69	; 0x45
   1aa18:	5c9b      	ldrb	r3, [r3, r2]
   1aa1a:	b25b      	sxtb	r3, r3
   1aa1c:	3301      	adds	r3, #1
   1aa1e:	d103      	bne.n	1aa28 <xQueueSemaphoreTake+0x22c>
   1aa20:	69fb      	ldr	r3, [r7, #28]
   1aa22:	2245      	movs	r2, #69	; 0x45
   1aa24:	2100      	movs	r1, #0
   1aa26:	5499      	strb	r1, [r3, r2]
   1aa28:	4b5a      	ldr	r3, [pc, #360]	; (1ab94 <xQueueSemaphoreTake+0x398>)
   1aa2a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1aa2c:	003a      	movs	r2, r7
   1aa2e:	230c      	movs	r3, #12
   1aa30:	18fb      	adds	r3, r7, r3
   1aa32:	0011      	movs	r1, r2
   1aa34:	0018      	movs	r0, r3
   1aa36:	4b5a      	ldr	r3, [pc, #360]	; (1aba0 <xQueueSemaphoreTake+0x3a4>)
   1aa38:	4798      	blx	r3
   1aa3a:	1e03      	subs	r3, r0, #0
   1aa3c:	d000      	beq.n	1aa40 <xQueueSemaphoreTake+0x244>
   1aa3e:	e0bd      	b.n	1abbc <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1aa40:	69fb      	ldr	r3, [r7, #28]
   1aa42:	0018      	movs	r0, r3
   1aa44:	4b57      	ldr	r3, [pc, #348]	; (1aba4 <xQueueSemaphoreTake+0x3a8>)
   1aa46:	4798      	blx	r3
   1aa48:	1e03      	subs	r3, r0, #0
   1aa4a:	d100      	bne.n	1aa4e <xQueueSemaphoreTake+0x252>
   1aa4c:	e07c      	b.n	1ab48 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1aa4e:	4b44      	ldr	r3, [pc, #272]	; (1ab60 <xQueueSemaphoreTake+0x364>)
   1aa50:	4798      	blx	r3
   1aa52:	0003      	movs	r3, r0
   1aa54:	0018      	movs	r0, r3
   1aa56:	4b43      	ldr	r3, [pc, #268]	; (1ab64 <xQueueSemaphoreTake+0x368>)
   1aa58:	4798      	blx	r3
   1aa5a:	0003      	movs	r3, r0
   1aa5c:	001a      	movs	r2, r3
   1aa5e:	4b42      	ldr	r3, [pc, #264]	; (1ab68 <xQueueSemaphoreTake+0x36c>)
   1aa60:	881b      	ldrh	r3, [r3, #0]
   1aa62:	4013      	ands	r3, r2
   1aa64:	b29b      	uxth	r3, r3
   1aa66:	2b00      	cmp	r3, #0
   1aa68:	d029      	beq.n	1aabe <xQueueSemaphoreTake+0x2c2>
   1aa6a:	69fb      	ldr	r3, [r7, #28]
   1aa6c:	0018      	movs	r0, r3
   1aa6e:	4b3f      	ldr	r3, [pc, #252]	; (1ab6c <xQueueSemaphoreTake+0x370>)
   1aa70:	4798      	blx	r3
   1aa72:	0003      	movs	r3, r0
   1aa74:	001a      	movs	r2, r3
   1aa76:	4b3c      	ldr	r3, [pc, #240]	; (1ab68 <xQueueSemaphoreTake+0x36c>)
   1aa78:	881b      	ldrh	r3, [r3, #0]
   1aa7a:	4013      	ands	r3, r2
   1aa7c:	b29b      	uxth	r3, r3
   1aa7e:	2b00      	cmp	r3, #0
   1aa80:	d01d      	beq.n	1aabe <xQueueSemaphoreTake+0x2c2>
   1aa82:	69fb      	ldr	r3, [r7, #28]
   1aa84:	0018      	movs	r0, r3
   1aa86:	4b3a      	ldr	r3, [pc, #232]	; (1ab70 <xQueueSemaphoreTake+0x374>)
   1aa88:	4798      	blx	r3
   1aa8a:	0003      	movs	r3, r0
   1aa8c:	001a      	movs	r2, r3
   1aa8e:	4b39      	ldr	r3, [pc, #228]	; (1ab74 <xQueueSemaphoreTake+0x378>)
   1aa90:	5c9b      	ldrb	r3, [r3, r2]
   1aa92:	3368      	adds	r3, #104	; 0x68
   1aa94:	b2db      	uxtb	r3, r3
   1aa96:	001d      	movs	r5, r3
   1aa98:	69fb      	ldr	r3, [r7, #28]
   1aa9a:	0018      	movs	r0, r3
   1aa9c:	4b34      	ldr	r3, [pc, #208]	; (1ab70 <xQueueSemaphoreTake+0x374>)
   1aa9e:	4798      	blx	r3
   1aaa0:	0003      	movs	r3, r0
   1aaa2:	001a      	movs	r2, r3
   1aaa4:	4b33      	ldr	r3, [pc, #204]	; (1ab74 <xQueueSemaphoreTake+0x378>)
   1aaa6:	5c9c      	ldrb	r4, [r3, r2]
   1aaa8:	69fb      	ldr	r3, [r7, #28]
   1aaaa:	0018      	movs	r0, r3
   1aaac:	4b32      	ldr	r3, [pc, #200]	; (1ab78 <xQueueSemaphoreTake+0x37c>)
   1aaae:	4798      	blx	r3
   1aab0:	0003      	movs	r3, r0
   1aab2:	b2db      	uxtb	r3, r3
   1aab4:	001a      	movs	r2, r3
   1aab6:	0021      	movs	r1, r4
   1aab8:	0028      	movs	r0, r5
   1aaba:	4b30      	ldr	r3, [pc, #192]	; (1ab7c <xQueueSemaphoreTake+0x380>)
   1aabc:	4798      	blx	r3
   1aabe:	69fb      	ldr	r3, [r7, #28]
   1aac0:	0018      	movs	r0, r3
   1aac2:	4b2b      	ldr	r3, [pc, #172]	; (1ab70 <xQueueSemaphoreTake+0x374>)
   1aac4:	4798      	blx	r3
   1aac6:	0003      	movs	r3, r0
   1aac8:	001a      	movs	r2, r3
   1aaca:	4b2a      	ldr	r3, [pc, #168]	; (1ab74 <xQueueSemaphoreTake+0x378>)
   1aacc:	5c9b      	ldrb	r3, [r3, r2]
   1aace:	2b02      	cmp	r3, #2
   1aad0:	d018      	beq.n	1ab04 <xQueueSemaphoreTake+0x308>
   1aad2:	4b23      	ldr	r3, [pc, #140]	; (1ab60 <xQueueSemaphoreTake+0x364>)
   1aad4:	4798      	blx	r3
   1aad6:	0003      	movs	r3, r0
   1aad8:	0018      	movs	r0, r3
   1aada:	4b22      	ldr	r3, [pc, #136]	; (1ab64 <xQueueSemaphoreTake+0x368>)
   1aadc:	4798      	blx	r3
   1aade:	0003      	movs	r3, r0
   1aae0:	001a      	movs	r2, r3
   1aae2:	4b21      	ldr	r3, [pc, #132]	; (1ab68 <xQueueSemaphoreTake+0x36c>)
   1aae4:	881b      	ldrh	r3, [r3, #0]
   1aae6:	4013      	ands	r3, r2
   1aae8:	b29b      	uxth	r3, r3
   1aaea:	2b00      	cmp	r3, #0
   1aaec:	d00a      	beq.n	1ab04 <xQueueSemaphoreTake+0x308>
   1aaee:	4b1c      	ldr	r3, [pc, #112]	; (1ab60 <xQueueSemaphoreTake+0x364>)
   1aaf0:	4798      	blx	r3
   1aaf2:	0003      	movs	r3, r0
   1aaf4:	0018      	movs	r0, r3
   1aaf6:	4b22      	ldr	r3, [pc, #136]	; (1ab80 <xQueueSemaphoreTake+0x384>)
   1aaf8:	4798      	blx	r3
   1aafa:	0003      	movs	r3, r0
   1aafc:	b2db      	uxtb	r3, r3
   1aafe:	0018      	movs	r0, r3
   1ab00:	4b29      	ldr	r3, [pc, #164]	; (1aba8 <xQueueSemaphoreTake+0x3ac>)
   1ab02:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1ab04:	69fb      	ldr	r3, [r7, #28]
   1ab06:	681b      	ldr	r3, [r3, #0]
   1ab08:	2b00      	cmp	r3, #0
   1ab0a:	d10a      	bne.n	1ab22 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1ab0c:	4b13      	ldr	r3, [pc, #76]	; (1ab5c <xQueueSemaphoreTake+0x360>)
   1ab0e:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1ab10:	69fb      	ldr	r3, [r7, #28]
   1ab12:	685b      	ldr	r3, [r3, #4]
   1ab14:	0018      	movs	r0, r3
   1ab16:	4b25      	ldr	r3, [pc, #148]	; (1abac <xQueueSemaphoreTake+0x3b0>)
   1ab18:	4798      	blx	r3
   1ab1a:	0003      	movs	r3, r0
   1ab1c:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1ab1e:	4b1d      	ldr	r3, [pc, #116]	; (1ab94 <xQueueSemaphoreTake+0x398>)
   1ab20:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1ab22:	69fb      	ldr	r3, [r7, #28]
   1ab24:	3324      	adds	r3, #36	; 0x24
   1ab26:	683a      	ldr	r2, [r7, #0]
   1ab28:	0011      	movs	r1, r2
   1ab2a:	0018      	movs	r0, r3
   1ab2c:	4b20      	ldr	r3, [pc, #128]	; (1abb0 <xQueueSemaphoreTake+0x3b4>)
   1ab2e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1ab30:	69fb      	ldr	r3, [r7, #28]
   1ab32:	0018      	movs	r0, r3
   1ab34:	4b1f      	ldr	r3, [pc, #124]	; (1abb4 <xQueueSemaphoreTake+0x3b8>)
   1ab36:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1ab38:	4b1f      	ldr	r3, [pc, #124]	; (1abb8 <xQueueSemaphoreTake+0x3bc>)
   1ab3a:	4798      	blx	r3
   1ab3c:	1e03      	subs	r3, r0, #0
   1ab3e:	d000      	beq.n	1ab42 <xQueueSemaphoreTake+0x346>
   1ab40:	e680      	b.n	1a844 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1ab42:	4b13      	ldr	r3, [pc, #76]	; (1ab90 <xQueueSemaphoreTake+0x394>)
   1ab44:	4798      	blx	r3
   1ab46:	e67d      	b.n	1a844 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1ab48:	69fb      	ldr	r3, [r7, #28]
   1ab4a:	0018      	movs	r0, r3
   1ab4c:	4b19      	ldr	r3, [pc, #100]	; (1abb4 <xQueueSemaphoreTake+0x3b8>)
   1ab4e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1ab50:	4b19      	ldr	r3, [pc, #100]	; (1abb8 <xQueueSemaphoreTake+0x3bc>)
   1ab52:	4798      	blx	r3
   1ab54:	e676      	b.n	1a844 <xQueueSemaphoreTake+0x48>
   1ab56:	46c0      	nop			; (mov r8, r8)
   1ab58:	0001c279 	.word	0x0001c279
   1ab5c:	00019559 	.word	0x00019559
   1ab60:	000177e9 	.word	0x000177e9
   1ab64:	0001754d 	.word	0x0001754d
   1ab68:	200000f8 	.word	0x200000f8
   1ab6c:	0001760d 	.word	0x0001760d
   1ab70:	0001750d 	.word	0x0001750d
   1ab74:	200000ec 	.word	0x200000ec
   1ab78:	000175ed 	.word	0x000175ed
   1ab7c:	00017f45 	.word	0x00017f45
   1ab80:	0001752d 	.word	0x0001752d
   1ab84:	000185a1 	.word	0x000185a1
   1ab88:	0001c745 	.word	0x0001c745
   1ab8c:	0001bde9 	.word	0x0001bde9
   1ab90:	00019541 	.word	0x00019541
   1ab94:	0001957d 	.word	0x0001957d
   1ab98:	0001bf29 	.word	0x0001bf29
   1ab9c:	0001b811 	.word	0x0001b811
   1aba0:	0001bf51 	.word	0x0001bf51
   1aba4:	0001af45 	.word	0x0001af45
   1aba8:	000186dd 	.word	0x000186dd
   1abac:	0001c2b1 	.word	0x0001c2b1
   1abb0:	0001bcc5 	.word	0x0001bcc5
   1abb4:	0001ae55 	.word	0x0001ae55
   1abb8:	0001b829 	.word	0x0001b829
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1abbc:	69fb      	ldr	r3, [r7, #28]
   1abbe:	0018      	movs	r0, r3
   1abc0:	4b2d      	ldr	r3, [pc, #180]	; (1ac78 <xQueueSemaphoreTake+0x47c>)
   1abc2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1abc4:	4b2d      	ldr	r3, [pc, #180]	; (1ac7c <xQueueSemaphoreTake+0x480>)
   1abc6:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1abc8:	69fb      	ldr	r3, [r7, #28]
   1abca:	0018      	movs	r0, r3
   1abcc:	4b2c      	ldr	r3, [pc, #176]	; (1ac80 <xQueueSemaphoreTake+0x484>)
   1abce:	4798      	blx	r3
   1abd0:	1e03      	subs	r3, r0, #0
   1abd2:	d100      	bne.n	1abd6 <xQueueSemaphoreTake+0x3da>
   1abd4:	e636      	b.n	1a844 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1abd6:	6a3b      	ldr	r3, [r7, #32]
   1abd8:	2b00      	cmp	r3, #0
   1abda:	d010      	beq.n	1abfe <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1abdc:	4b29      	ldr	r3, [pc, #164]	; (1ac84 <xQueueSemaphoreTake+0x488>)
   1abde:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1abe0:	69fb      	ldr	r3, [r7, #28]
   1abe2:	0018      	movs	r0, r3
   1abe4:	4b28      	ldr	r3, [pc, #160]	; (1ac88 <xQueueSemaphoreTake+0x48c>)
   1abe6:	4798      	blx	r3
   1abe8:	0003      	movs	r3, r0
   1abea:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1abec:	69fb      	ldr	r3, [r7, #28]
   1abee:	685b      	ldr	r3, [r3, #4]
   1abf0:	697a      	ldr	r2, [r7, #20]
   1abf2:	0011      	movs	r1, r2
   1abf4:	0018      	movs	r0, r3
   1abf6:	4b25      	ldr	r3, [pc, #148]	; (1ac8c <xQueueSemaphoreTake+0x490>)
   1abf8:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1abfa:	4b25      	ldr	r3, [pc, #148]	; (1ac90 <xQueueSemaphoreTake+0x494>)
   1abfc:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1abfe:	4b25      	ldr	r3, [pc, #148]	; (1ac94 <xQueueSemaphoreTake+0x498>)
   1ac00:	4798      	blx	r3
   1ac02:	0003      	movs	r3, r0
   1ac04:	0018      	movs	r0, r3
   1ac06:	4b24      	ldr	r3, [pc, #144]	; (1ac98 <xQueueSemaphoreTake+0x49c>)
   1ac08:	4798      	blx	r3
   1ac0a:	0003      	movs	r3, r0
   1ac0c:	001a      	movs	r2, r3
   1ac0e:	4b23      	ldr	r3, [pc, #140]	; (1ac9c <xQueueSemaphoreTake+0x4a0>)
   1ac10:	881b      	ldrh	r3, [r3, #0]
   1ac12:	4013      	ands	r3, r2
   1ac14:	b29b      	uxth	r3, r3
   1ac16:	2b00      	cmp	r3, #0
   1ac18:	d029      	beq.n	1ac6e <xQueueSemaphoreTake+0x472>
   1ac1a:	69fb      	ldr	r3, [r7, #28]
   1ac1c:	0018      	movs	r0, r3
   1ac1e:	4b20      	ldr	r3, [pc, #128]	; (1aca0 <xQueueSemaphoreTake+0x4a4>)
   1ac20:	4798      	blx	r3
   1ac22:	0003      	movs	r3, r0
   1ac24:	001a      	movs	r2, r3
   1ac26:	4b1d      	ldr	r3, [pc, #116]	; (1ac9c <xQueueSemaphoreTake+0x4a0>)
   1ac28:	881b      	ldrh	r3, [r3, #0]
   1ac2a:	4013      	ands	r3, r2
   1ac2c:	b29b      	uxth	r3, r3
   1ac2e:	2b00      	cmp	r3, #0
   1ac30:	d01d      	beq.n	1ac6e <xQueueSemaphoreTake+0x472>
   1ac32:	69fb      	ldr	r3, [r7, #28]
   1ac34:	0018      	movs	r0, r3
   1ac36:	4b1b      	ldr	r3, [pc, #108]	; (1aca4 <xQueueSemaphoreTake+0x4a8>)
   1ac38:	4798      	blx	r3
   1ac3a:	0003      	movs	r3, r0
   1ac3c:	001a      	movs	r2, r3
   1ac3e:	4b1a      	ldr	r3, [pc, #104]	; (1aca8 <xQueueSemaphoreTake+0x4ac>)
   1ac40:	5c9b      	ldrb	r3, [r3, r2]
   1ac42:	3350      	adds	r3, #80	; 0x50
   1ac44:	b2db      	uxtb	r3, r3
   1ac46:	001d      	movs	r5, r3
   1ac48:	69fb      	ldr	r3, [r7, #28]
   1ac4a:	0018      	movs	r0, r3
   1ac4c:	4b15      	ldr	r3, [pc, #84]	; (1aca4 <xQueueSemaphoreTake+0x4a8>)
   1ac4e:	4798      	blx	r3
   1ac50:	0003      	movs	r3, r0
   1ac52:	001a      	movs	r2, r3
   1ac54:	4b14      	ldr	r3, [pc, #80]	; (1aca8 <xQueueSemaphoreTake+0x4ac>)
   1ac56:	5c9c      	ldrb	r4, [r3, r2]
   1ac58:	69fb      	ldr	r3, [r7, #28]
   1ac5a:	0018      	movs	r0, r3
   1ac5c:	4b13      	ldr	r3, [pc, #76]	; (1acac <xQueueSemaphoreTake+0x4b0>)
   1ac5e:	4798      	blx	r3
   1ac60:	0003      	movs	r3, r0
   1ac62:	b2db      	uxtb	r3, r3
   1ac64:	001a      	movs	r2, r3
   1ac66:	0021      	movs	r1, r4
   1ac68:	0028      	movs	r0, r5
   1ac6a:	4b11      	ldr	r3, [pc, #68]	; (1acb0 <xQueueSemaphoreTake+0x4b4>)
   1ac6c:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1ac6e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1ac70:	0018      	movs	r0, r3
   1ac72:	46bd      	mov	sp, r7
   1ac74:	b00a      	add	sp, #40	; 0x28
   1ac76:	bdb0      	pop	{r4, r5, r7, pc}
   1ac78:	0001ae55 	.word	0x0001ae55
   1ac7c:	0001b829 	.word	0x0001b829
   1ac80:	0001af45 	.word	0x0001af45
   1ac84:	00019559 	.word	0x00019559
   1ac88:	0001acf7 	.word	0x0001acf7
   1ac8c:	0001c5a9 	.word	0x0001c5a9
   1ac90:	0001957d 	.word	0x0001957d
   1ac94:	000177e9 	.word	0x000177e9
   1ac98:	0001754d 	.word	0x0001754d
   1ac9c:	200000f8 	.word	0x200000f8
   1aca0:	0001760d 	.word	0x0001760d
   1aca4:	0001750d 	.word	0x0001750d
   1aca8:	200000ec 	.word	0x200000ec
   1acac:	000175ed 	.word	0x000175ed
   1acb0:	00017f45 	.word	0x00017f45

0001acb4 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1acb4:	b580      	push	{r7, lr}
   1acb6:	b082      	sub	sp, #8
   1acb8:	af00      	add	r7, sp, #0
   1acba:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1acbc:	687b      	ldr	r3, [r7, #4]
   1acbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1acc0:	0018      	movs	r0, r3
   1acc2:	46bd      	mov	sp, r7
   1acc4:	b002      	add	sp, #8
   1acc6:	bd80      	pop	{r7, pc}

0001acc8 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1acc8:	b580      	push	{r7, lr}
   1acca:	b082      	sub	sp, #8
   1accc:	af00      	add	r7, sp, #0
   1acce:	6078      	str	r0, [r7, #4]
   1acd0:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1acd2:	687b      	ldr	r3, [r7, #4]
   1acd4:	683a      	ldr	r2, [r7, #0]
   1acd6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1acd8:	46c0      	nop			; (mov r8, r8)
   1acda:	46bd      	mov	sp, r7
   1acdc:	b002      	add	sp, #8
   1acde:	bd80      	pop	{r7, pc}

0001ace0 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1ace0:	b580      	push	{r7, lr}
   1ace2:	b082      	sub	sp, #8
   1ace4:	af00      	add	r7, sp, #0
   1ace6:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1ace8:	687b      	ldr	r3, [r7, #4]
   1acea:	2250      	movs	r2, #80	; 0x50
   1acec:	5c9b      	ldrb	r3, [r3, r2]
	}
   1acee:	0018      	movs	r0, r3
   1acf0:	46bd      	mov	sp, r7
   1acf2:	b002      	add	sp, #8
   1acf4:	bd80      	pop	{r7, pc}

0001acf6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1acf6:	b580      	push	{r7, lr}
   1acf8:	b084      	sub	sp, #16
   1acfa:	af00      	add	r7, sp, #0
   1acfc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1acfe:	687b      	ldr	r3, [r7, #4]
   1ad00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ad02:	2b00      	cmp	r3, #0
   1ad04:	d006      	beq.n	1ad14 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1ad06:	687b      	ldr	r3, [r7, #4]
   1ad08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ad0a:	681b      	ldr	r3, [r3, #0]
   1ad0c:	2205      	movs	r2, #5
   1ad0e:	1ad3      	subs	r3, r2, r3
   1ad10:	60fb      	str	r3, [r7, #12]
   1ad12:	e001      	b.n	1ad18 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1ad14:	2300      	movs	r3, #0
   1ad16:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1ad18:	68fb      	ldr	r3, [r7, #12]
	}
   1ad1a:	0018      	movs	r0, r3
   1ad1c:	46bd      	mov	sp, r7
   1ad1e:	b004      	add	sp, #16
   1ad20:	bd80      	pop	{r7, pc}
	...

0001ad24 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1ad24:	b580      	push	{r7, lr}
   1ad26:	b086      	sub	sp, #24
   1ad28:	af00      	add	r7, sp, #0
   1ad2a:	60f8      	str	r0, [r7, #12]
   1ad2c:	60b9      	str	r1, [r7, #8]
   1ad2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1ad30:	2300      	movs	r3, #0
   1ad32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1ad34:	68fb      	ldr	r3, [r7, #12]
   1ad36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ad38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1ad3a:	68fb      	ldr	r3, [r7, #12]
   1ad3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ad3e:	2b00      	cmp	r3, #0
   1ad40:	d10e      	bne.n	1ad60 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1ad42:	68fb      	ldr	r3, [r7, #12]
   1ad44:	681b      	ldr	r3, [r3, #0]
   1ad46:	2b00      	cmp	r3, #0
   1ad48:	d14e      	bne.n	1ade8 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1ad4a:	68fb      	ldr	r3, [r7, #12]
   1ad4c:	685b      	ldr	r3, [r3, #4]
   1ad4e:	0018      	movs	r0, r3
   1ad50:	4b2a      	ldr	r3, [pc, #168]	; (1adfc <prvCopyDataToQueue+0xd8>)
   1ad52:	4798      	blx	r3
   1ad54:	0003      	movs	r3, r0
   1ad56:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1ad58:	68fb      	ldr	r3, [r7, #12]
   1ad5a:	2200      	movs	r2, #0
   1ad5c:	605a      	str	r2, [r3, #4]
   1ad5e:	e043      	b.n	1ade8 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1ad60:	687b      	ldr	r3, [r7, #4]
   1ad62:	2b00      	cmp	r3, #0
   1ad64:	d119      	bne.n	1ad9a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1ad66:	68fb      	ldr	r3, [r7, #12]
   1ad68:	6898      	ldr	r0, [r3, #8]
   1ad6a:	68fb      	ldr	r3, [r7, #12]
   1ad6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1ad6e:	68bb      	ldr	r3, [r7, #8]
   1ad70:	0019      	movs	r1, r3
   1ad72:	4b23      	ldr	r3, [pc, #140]	; (1ae00 <prvCopyDataToQueue+0xdc>)
   1ad74:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1ad76:	68fb      	ldr	r3, [r7, #12]
   1ad78:	689a      	ldr	r2, [r3, #8]
   1ad7a:	68fb      	ldr	r3, [r7, #12]
   1ad7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ad7e:	18d2      	adds	r2, r2, r3
   1ad80:	68fb      	ldr	r3, [r7, #12]
   1ad82:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1ad84:	68fb      	ldr	r3, [r7, #12]
   1ad86:	689a      	ldr	r2, [r3, #8]
   1ad88:	68fb      	ldr	r3, [r7, #12]
   1ad8a:	685b      	ldr	r3, [r3, #4]
   1ad8c:	429a      	cmp	r2, r3
   1ad8e:	d32b      	bcc.n	1ade8 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1ad90:	68fb      	ldr	r3, [r7, #12]
   1ad92:	681a      	ldr	r2, [r3, #0]
   1ad94:	68fb      	ldr	r3, [r7, #12]
   1ad96:	609a      	str	r2, [r3, #8]
   1ad98:	e026      	b.n	1ade8 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ad9a:	68fb      	ldr	r3, [r7, #12]
   1ad9c:	68d8      	ldr	r0, [r3, #12]
   1ad9e:	68fb      	ldr	r3, [r7, #12]
   1ada0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1ada2:	68bb      	ldr	r3, [r7, #8]
   1ada4:	0019      	movs	r1, r3
   1ada6:	4b16      	ldr	r3, [pc, #88]	; (1ae00 <prvCopyDataToQueue+0xdc>)
   1ada8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1adaa:	68fb      	ldr	r3, [r7, #12]
   1adac:	68da      	ldr	r2, [r3, #12]
   1adae:	68fb      	ldr	r3, [r7, #12]
   1adb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1adb2:	425b      	negs	r3, r3
   1adb4:	18d2      	adds	r2, r2, r3
   1adb6:	68fb      	ldr	r3, [r7, #12]
   1adb8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1adba:	68fb      	ldr	r3, [r7, #12]
   1adbc:	68da      	ldr	r2, [r3, #12]
   1adbe:	68fb      	ldr	r3, [r7, #12]
   1adc0:	681b      	ldr	r3, [r3, #0]
   1adc2:	429a      	cmp	r2, r3
   1adc4:	d207      	bcs.n	1add6 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1adc6:	68fb      	ldr	r3, [r7, #12]
   1adc8:	685a      	ldr	r2, [r3, #4]
   1adca:	68fb      	ldr	r3, [r7, #12]
   1adcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1adce:	425b      	negs	r3, r3
   1add0:	18d2      	adds	r2, r2, r3
   1add2:	68fb      	ldr	r3, [r7, #12]
   1add4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1add6:	687b      	ldr	r3, [r7, #4]
   1add8:	2b02      	cmp	r3, #2
   1adda:	d105      	bne.n	1ade8 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1addc:	693b      	ldr	r3, [r7, #16]
   1adde:	2b00      	cmp	r3, #0
   1ade0:	d002      	beq.n	1ade8 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1ade2:	693b      	ldr	r3, [r7, #16]
   1ade4:	3b01      	subs	r3, #1
   1ade6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1ade8:	693b      	ldr	r3, [r7, #16]
   1adea:	1c5a      	adds	r2, r3, #1
   1adec:	68fb      	ldr	r3, [r7, #12]
   1adee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1adf0:	697b      	ldr	r3, [r7, #20]
}
   1adf2:	0018      	movs	r0, r3
   1adf4:	46bd      	mov	sp, r7
   1adf6:	b006      	add	sp, #24
   1adf8:	bd80      	pop	{r7, pc}
   1adfa:	46c0      	nop			; (mov r8, r8)
   1adfc:	0001c441 	.word	0x0001c441
   1ae00:	000342e5 	.word	0x000342e5

0001ae04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1ae04:	b580      	push	{r7, lr}
   1ae06:	b082      	sub	sp, #8
   1ae08:	af00      	add	r7, sp, #0
   1ae0a:	6078      	str	r0, [r7, #4]
   1ae0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1ae0e:	687b      	ldr	r3, [r7, #4]
   1ae10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ae12:	2b00      	cmp	r3, #0
   1ae14:	d018      	beq.n	1ae48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1ae16:	687b      	ldr	r3, [r7, #4]
   1ae18:	68da      	ldr	r2, [r3, #12]
   1ae1a:	687b      	ldr	r3, [r7, #4]
   1ae1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ae1e:	18d2      	adds	r2, r2, r3
   1ae20:	687b      	ldr	r3, [r7, #4]
   1ae22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1ae24:	687b      	ldr	r3, [r7, #4]
   1ae26:	68da      	ldr	r2, [r3, #12]
   1ae28:	687b      	ldr	r3, [r7, #4]
   1ae2a:	685b      	ldr	r3, [r3, #4]
   1ae2c:	429a      	cmp	r2, r3
   1ae2e:	d303      	bcc.n	1ae38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1ae30:	687b      	ldr	r3, [r7, #4]
   1ae32:	681a      	ldr	r2, [r3, #0]
   1ae34:	687b      	ldr	r3, [r7, #4]
   1ae36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1ae38:	687b      	ldr	r3, [r7, #4]
   1ae3a:	68d9      	ldr	r1, [r3, #12]
   1ae3c:	687b      	ldr	r3, [r7, #4]
   1ae3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1ae40:	683b      	ldr	r3, [r7, #0]
   1ae42:	0018      	movs	r0, r3
   1ae44:	4b02      	ldr	r3, [pc, #8]	; (1ae50 <prvCopyDataFromQueue+0x4c>)
   1ae46:	4798      	blx	r3
	}
}
   1ae48:	46c0      	nop			; (mov r8, r8)
   1ae4a:	46bd      	mov	sp, r7
   1ae4c:	b002      	add	sp, #8
   1ae4e:	bd80      	pop	{r7, pc}
   1ae50:	000342e5 	.word	0x000342e5

0001ae54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1ae54:	b580      	push	{r7, lr}
   1ae56:	b084      	sub	sp, #16
   1ae58:	af00      	add	r7, sp, #0
   1ae5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1ae5c:	4b34      	ldr	r3, [pc, #208]	; (1af30 <prvUnlockQueue+0xdc>)
   1ae5e:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1ae60:	230f      	movs	r3, #15
   1ae62:	18fb      	adds	r3, r7, r3
   1ae64:	687a      	ldr	r2, [r7, #4]
   1ae66:	2145      	movs	r1, #69	; 0x45
   1ae68:	5c52      	ldrb	r2, [r2, r1]
   1ae6a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1ae6c:	e022      	b.n	1aeb4 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1ae6e:	687b      	ldr	r3, [r7, #4]
   1ae70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ae72:	2b00      	cmp	r3, #0
   1ae74:	d009      	beq.n	1ae8a <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1ae76:	687b      	ldr	r3, [r7, #4]
   1ae78:	2100      	movs	r1, #0
   1ae7a:	0018      	movs	r0, r3
   1ae7c:	4b2d      	ldr	r3, [pc, #180]	; (1af34 <prvUnlockQueue+0xe0>)
   1ae7e:	4798      	blx	r3
   1ae80:	1e03      	subs	r3, r0, #0
   1ae82:	d00f      	beq.n	1aea4 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1ae84:	4b2c      	ldr	r3, [pc, #176]	; (1af38 <prvUnlockQueue+0xe4>)
   1ae86:	4798      	blx	r3
   1ae88:	e00c      	b.n	1aea4 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1ae8a:	687b      	ldr	r3, [r7, #4]
   1ae8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ae8e:	2b00      	cmp	r3, #0
   1ae90:	d017      	beq.n	1aec2 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1ae92:	687b      	ldr	r3, [r7, #4]
   1ae94:	3324      	adds	r3, #36	; 0x24
   1ae96:	0018      	movs	r0, r3
   1ae98:	4b28      	ldr	r3, [pc, #160]	; (1af3c <prvUnlockQueue+0xe8>)
   1ae9a:	4798      	blx	r3
   1ae9c:	1e03      	subs	r3, r0, #0
   1ae9e:	d001      	beq.n	1aea4 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1aea0:	4b25      	ldr	r3, [pc, #148]	; (1af38 <prvUnlockQueue+0xe4>)
   1aea2:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1aea4:	230f      	movs	r3, #15
   1aea6:	18fb      	adds	r3, r7, r3
   1aea8:	781b      	ldrb	r3, [r3, #0]
   1aeaa:	3b01      	subs	r3, #1
   1aeac:	b2da      	uxtb	r2, r3
   1aeae:	230f      	movs	r3, #15
   1aeb0:	18fb      	adds	r3, r7, r3
   1aeb2:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1aeb4:	230f      	movs	r3, #15
   1aeb6:	18fb      	adds	r3, r7, r3
   1aeb8:	781b      	ldrb	r3, [r3, #0]
   1aeba:	b25b      	sxtb	r3, r3
   1aebc:	2b00      	cmp	r3, #0
   1aebe:	dcd6      	bgt.n	1ae6e <prvUnlockQueue+0x1a>
   1aec0:	e000      	b.n	1aec4 <prvUnlockQueue+0x70>
						break;
   1aec2:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1aec4:	687b      	ldr	r3, [r7, #4]
   1aec6:	2245      	movs	r2, #69	; 0x45
   1aec8:	21ff      	movs	r1, #255	; 0xff
   1aeca:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1aecc:	4b1c      	ldr	r3, [pc, #112]	; (1af40 <prvUnlockQueue+0xec>)
   1aece:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1aed0:	4b17      	ldr	r3, [pc, #92]	; (1af30 <prvUnlockQueue+0xdc>)
   1aed2:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1aed4:	230e      	movs	r3, #14
   1aed6:	18fb      	adds	r3, r7, r3
   1aed8:	687a      	ldr	r2, [r7, #4]
   1aeda:	2144      	movs	r1, #68	; 0x44
   1aedc:	5c52      	ldrb	r2, [r2, r1]
   1aede:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1aee0:	e014      	b.n	1af0c <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1aee2:	687b      	ldr	r3, [r7, #4]
   1aee4:	691b      	ldr	r3, [r3, #16]
   1aee6:	2b00      	cmp	r3, #0
   1aee8:	d017      	beq.n	1af1a <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1aeea:	687b      	ldr	r3, [r7, #4]
   1aeec:	3310      	adds	r3, #16
   1aeee:	0018      	movs	r0, r3
   1aef0:	4b12      	ldr	r3, [pc, #72]	; (1af3c <prvUnlockQueue+0xe8>)
   1aef2:	4798      	blx	r3
   1aef4:	1e03      	subs	r3, r0, #0
   1aef6:	d001      	beq.n	1aefc <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1aef8:	4b0f      	ldr	r3, [pc, #60]	; (1af38 <prvUnlockQueue+0xe4>)
   1aefa:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1aefc:	230e      	movs	r3, #14
   1aefe:	18fb      	adds	r3, r7, r3
   1af00:	781b      	ldrb	r3, [r3, #0]
   1af02:	3b01      	subs	r3, #1
   1af04:	b2da      	uxtb	r2, r3
   1af06:	230e      	movs	r3, #14
   1af08:	18fb      	adds	r3, r7, r3
   1af0a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1af0c:	230e      	movs	r3, #14
   1af0e:	18fb      	adds	r3, r7, r3
   1af10:	781b      	ldrb	r3, [r3, #0]
   1af12:	b25b      	sxtb	r3, r3
   1af14:	2b00      	cmp	r3, #0
   1af16:	dce4      	bgt.n	1aee2 <prvUnlockQueue+0x8e>
   1af18:	e000      	b.n	1af1c <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1af1a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1af1c:	687b      	ldr	r3, [r7, #4]
   1af1e:	2244      	movs	r2, #68	; 0x44
   1af20:	21ff      	movs	r1, #255	; 0xff
   1af22:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1af24:	4b06      	ldr	r3, [pc, #24]	; (1af40 <prvUnlockQueue+0xec>)
   1af26:	4798      	blx	r3
}
   1af28:	46c0      	nop			; (mov r8, r8)
   1af2a:	46bd      	mov	sp, r7
   1af2c:	b004      	add	sp, #16
   1af2e:	bd80      	pop	{r7, pc}
   1af30:	00019559 	.word	0x00019559
   1af34:	0001b029 	.word	0x0001b029
   1af38:	0001bffd 	.word	0x0001bffd
   1af3c:	0001bde9 	.word	0x0001bde9
   1af40:	0001957d 	.word	0x0001957d

0001af44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1af44:	b580      	push	{r7, lr}
   1af46:	b084      	sub	sp, #16
   1af48:	af00      	add	r7, sp, #0
   1af4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1af4c:	4b08      	ldr	r3, [pc, #32]	; (1af70 <prvIsQueueEmpty+0x2c>)
   1af4e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1af50:	687b      	ldr	r3, [r7, #4]
   1af52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1af54:	2b00      	cmp	r3, #0
   1af56:	d102      	bne.n	1af5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1af58:	2301      	movs	r3, #1
   1af5a:	60fb      	str	r3, [r7, #12]
   1af5c:	e001      	b.n	1af62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1af5e:	2300      	movs	r3, #0
   1af60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1af62:	4b04      	ldr	r3, [pc, #16]	; (1af74 <prvIsQueueEmpty+0x30>)
   1af64:	4798      	blx	r3

	return xReturn;
   1af66:	68fb      	ldr	r3, [r7, #12]
}
   1af68:	0018      	movs	r0, r3
   1af6a:	46bd      	mov	sp, r7
   1af6c:	b004      	add	sp, #16
   1af6e:	bd80      	pop	{r7, pc}
   1af70:	00019559 	.word	0x00019559
   1af74:	0001957d 	.word	0x0001957d

0001af78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1af78:	b580      	push	{r7, lr}
   1af7a:	b084      	sub	sp, #16
   1af7c:	af00      	add	r7, sp, #0
   1af7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1af80:	4b09      	ldr	r3, [pc, #36]	; (1afa8 <prvIsQueueFull+0x30>)
   1af82:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1af84:	687b      	ldr	r3, [r7, #4]
   1af86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1af88:	687b      	ldr	r3, [r7, #4]
   1af8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1af8c:	429a      	cmp	r2, r3
   1af8e:	d102      	bne.n	1af96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1af90:	2301      	movs	r3, #1
   1af92:	60fb      	str	r3, [r7, #12]
   1af94:	e001      	b.n	1af9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1af96:	2300      	movs	r3, #0
   1af98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1af9a:	4b04      	ldr	r3, [pc, #16]	; (1afac <prvIsQueueFull+0x34>)
   1af9c:	4798      	blx	r3

	return xReturn;
   1af9e:	68fb      	ldr	r3, [r7, #12]
}
   1afa0:	0018      	movs	r0, r3
   1afa2:	46bd      	mov	sp, r7
   1afa4:	b004      	add	sp, #16
   1afa6:	bd80      	pop	{r7, pc}
   1afa8:	00019559 	.word	0x00019559
   1afac:	0001957d 	.word	0x0001957d

0001afb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1afb0:	b580      	push	{r7, lr}
   1afb2:	b086      	sub	sp, #24
   1afb4:	af00      	add	r7, sp, #0
   1afb6:	60f8      	str	r0, [r7, #12]
   1afb8:	60b9      	str	r1, [r7, #8]
   1afba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1afbc:	68fb      	ldr	r3, [r7, #12]
   1afbe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1afc0:	4b15      	ldr	r3, [pc, #84]	; (1b018 <vQueueWaitForMessageRestricted+0x68>)
   1afc2:	4798      	blx	r3
   1afc4:	697b      	ldr	r3, [r7, #20]
   1afc6:	2244      	movs	r2, #68	; 0x44
   1afc8:	5c9b      	ldrb	r3, [r3, r2]
   1afca:	b25b      	sxtb	r3, r3
   1afcc:	3301      	adds	r3, #1
   1afce:	d103      	bne.n	1afd8 <vQueueWaitForMessageRestricted+0x28>
   1afd0:	697b      	ldr	r3, [r7, #20]
   1afd2:	2244      	movs	r2, #68	; 0x44
   1afd4:	2100      	movs	r1, #0
   1afd6:	5499      	strb	r1, [r3, r2]
   1afd8:	697b      	ldr	r3, [r7, #20]
   1afda:	2245      	movs	r2, #69	; 0x45
   1afdc:	5c9b      	ldrb	r3, [r3, r2]
   1afde:	b25b      	sxtb	r3, r3
   1afe0:	3301      	adds	r3, #1
   1afe2:	d103      	bne.n	1afec <vQueueWaitForMessageRestricted+0x3c>
   1afe4:	697b      	ldr	r3, [r7, #20]
   1afe6:	2245      	movs	r2, #69	; 0x45
   1afe8:	2100      	movs	r1, #0
   1afea:	5499      	strb	r1, [r3, r2]
   1afec:	4b0b      	ldr	r3, [pc, #44]	; (1b01c <vQueueWaitForMessageRestricted+0x6c>)
   1afee:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1aff0:	697b      	ldr	r3, [r7, #20]
   1aff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1aff4:	2b00      	cmp	r3, #0
   1aff6:	d106      	bne.n	1b006 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1aff8:	697b      	ldr	r3, [r7, #20]
   1affa:	3324      	adds	r3, #36	; 0x24
   1affc:	687a      	ldr	r2, [r7, #4]
   1affe:	68b9      	ldr	r1, [r7, #8]
   1b000:	0018      	movs	r0, r3
   1b002:	4b07      	ldr	r3, [pc, #28]	; (1b020 <vQueueWaitForMessageRestricted+0x70>)
   1b004:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1b006:	697b      	ldr	r3, [r7, #20]
   1b008:	0018      	movs	r0, r3
   1b00a:	4b06      	ldr	r3, [pc, #24]	; (1b024 <vQueueWaitForMessageRestricted+0x74>)
   1b00c:	4798      	blx	r3
	}
   1b00e:	46c0      	nop			; (mov r8, r8)
   1b010:	46bd      	mov	sp, r7
   1b012:	b006      	add	sp, #24
   1b014:	bd80      	pop	{r7, pc}
   1b016:	46c0      	nop			; (mov r8, r8)
   1b018:	00019559 	.word	0x00019559
   1b01c:	0001957d 	.word	0x0001957d
   1b020:	0001bd09 	.word	0x0001bd09
   1b024:	0001ae55 	.word	0x0001ae55

0001b028 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1b028:	b5b0      	push	{r4, r5, r7, lr}
   1b02a:	b086      	sub	sp, #24
   1b02c:	af00      	add	r7, sp, #0
   1b02e:	6078      	str	r0, [r7, #4]
   1b030:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1b032:	687b      	ldr	r3, [r7, #4]
   1b034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b036:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1b038:	2300      	movs	r3, #0
   1b03a:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1b03c:	693b      	ldr	r3, [r7, #16]
   1b03e:	2b00      	cmp	r3, #0
   1b040:	d101      	bne.n	1b046 <prvNotifyQueueSetContainer+0x1e>
   1b042:	b672      	cpsid	i
   1b044:	e7fe      	b.n	1b044 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1b046:	693b      	ldr	r3, [r7, #16]
   1b048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b04a:	693b      	ldr	r3, [r7, #16]
   1b04c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b04e:	429a      	cmp	r2, r3
   1b050:	d301      	bcc.n	1b056 <prvNotifyQueueSetContainer+0x2e>
   1b052:	b672      	cpsid	i
   1b054:	e7fe      	b.n	1b054 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1b056:	693b      	ldr	r3, [r7, #16]
   1b058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b05a:	693b      	ldr	r3, [r7, #16]
   1b05c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b05e:	429a      	cmp	r2, r3
   1b060:	d300      	bcc.n	1b064 <prvNotifyQueueSetContainer+0x3c>
   1b062:	e08b      	b.n	1b17c <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1b064:	230f      	movs	r3, #15
   1b066:	18fb      	adds	r3, r7, r3
   1b068:	693a      	ldr	r2, [r7, #16]
   1b06a:	2145      	movs	r1, #69	; 0x45
   1b06c:	5c52      	ldrb	r2, [r2, r1]
   1b06e:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1b070:	4b45      	ldr	r3, [pc, #276]	; (1b188 <prvNotifyQueueSetContainer+0x160>)
   1b072:	4798      	blx	r3
   1b074:	0003      	movs	r3, r0
   1b076:	0018      	movs	r0, r3
   1b078:	4b44      	ldr	r3, [pc, #272]	; (1b18c <prvNotifyQueueSetContainer+0x164>)
   1b07a:	4798      	blx	r3
   1b07c:	0003      	movs	r3, r0
   1b07e:	001a      	movs	r2, r3
   1b080:	4b43      	ldr	r3, [pc, #268]	; (1b190 <prvNotifyQueueSetContainer+0x168>)
   1b082:	881b      	ldrh	r3, [r3, #0]
   1b084:	4013      	ands	r3, r2
   1b086:	b29b      	uxth	r3, r3
   1b088:	2b00      	cmp	r3, #0
   1b08a:	d02e      	beq.n	1b0ea <prvNotifyQueueSetContainer+0xc2>
   1b08c:	693b      	ldr	r3, [r7, #16]
   1b08e:	0018      	movs	r0, r3
   1b090:	4b40      	ldr	r3, [pc, #256]	; (1b194 <prvNotifyQueueSetContainer+0x16c>)
   1b092:	4798      	blx	r3
   1b094:	0003      	movs	r3, r0
   1b096:	001a      	movs	r2, r3
   1b098:	4b3d      	ldr	r3, [pc, #244]	; (1b190 <prvNotifyQueueSetContainer+0x168>)
   1b09a:	881b      	ldrh	r3, [r3, #0]
   1b09c:	4013      	ands	r3, r2
   1b09e:	b29b      	uxth	r3, r3
   1b0a0:	2b00      	cmp	r3, #0
   1b0a2:	d022      	beq.n	1b0ea <prvNotifyQueueSetContainer+0xc2>
   1b0a4:	683b      	ldr	r3, [r7, #0]
   1b0a6:	2b00      	cmp	r3, #0
   1b0a8:	d10b      	bne.n	1b0c2 <prvNotifyQueueSetContainer+0x9a>
   1b0aa:	693b      	ldr	r3, [r7, #16]
   1b0ac:	0018      	movs	r0, r3
   1b0ae:	4b3a      	ldr	r3, [pc, #232]	; (1b198 <prvNotifyQueueSetContainer+0x170>)
   1b0b0:	4798      	blx	r3
   1b0b2:	0003      	movs	r3, r0
   1b0b4:	001a      	movs	r2, r3
   1b0b6:	4b39      	ldr	r3, [pc, #228]	; (1b19c <prvNotifyQueueSetContainer+0x174>)
   1b0b8:	5c9b      	ldrb	r3, [r3, r2]
   1b0ba:	3320      	adds	r3, #32
   1b0bc:	b2db      	uxtb	r3, r3
   1b0be:	001d      	movs	r5, r3
   1b0c0:	e000      	b.n	1b0c4 <prvNotifyQueueSetContainer+0x9c>
   1b0c2:	2525      	movs	r5, #37	; 0x25
   1b0c4:	693b      	ldr	r3, [r7, #16]
   1b0c6:	0018      	movs	r0, r3
   1b0c8:	4b33      	ldr	r3, [pc, #204]	; (1b198 <prvNotifyQueueSetContainer+0x170>)
   1b0ca:	4798      	blx	r3
   1b0cc:	0003      	movs	r3, r0
   1b0ce:	001a      	movs	r2, r3
   1b0d0:	4b32      	ldr	r3, [pc, #200]	; (1b19c <prvNotifyQueueSetContainer+0x174>)
   1b0d2:	5c9c      	ldrb	r4, [r3, r2]
   1b0d4:	693b      	ldr	r3, [r7, #16]
   1b0d6:	0018      	movs	r0, r3
   1b0d8:	4b31      	ldr	r3, [pc, #196]	; (1b1a0 <prvNotifyQueueSetContainer+0x178>)
   1b0da:	4798      	blx	r3
   1b0dc:	0003      	movs	r3, r0
   1b0de:	b2db      	uxtb	r3, r3
   1b0e0:	001a      	movs	r2, r3
   1b0e2:	0021      	movs	r1, r4
   1b0e4:	0028      	movs	r0, r5
   1b0e6:	4b2f      	ldr	r3, [pc, #188]	; (1b1a4 <prvNotifyQueueSetContainer+0x17c>)
   1b0e8:	4798      	blx	r3
   1b0ea:	693b      	ldr	r3, [r7, #16]
   1b0ec:	0018      	movs	r0, r3
   1b0ee:	4b2a      	ldr	r3, [pc, #168]	; (1b198 <prvNotifyQueueSetContainer+0x170>)
   1b0f0:	4798      	blx	r3
   1b0f2:	0003      	movs	r3, r0
   1b0f4:	001a      	movs	r2, r3
   1b0f6:	4b29      	ldr	r3, [pc, #164]	; (1b19c <prvNotifyQueueSetContainer+0x174>)
   1b0f8:	5c9c      	ldrb	r4, [r3, r2]
   1b0fa:	693b      	ldr	r3, [r7, #16]
   1b0fc:	0018      	movs	r0, r3
   1b0fe:	4b28      	ldr	r3, [pc, #160]	; (1b1a0 <prvNotifyQueueSetContainer+0x178>)
   1b100:	4798      	blx	r3
   1b102:	0003      	movs	r3, r0
   1b104:	b2dd      	uxtb	r5, r3
   1b106:	693b      	ldr	r3, [r7, #16]
   1b108:	0018      	movs	r0, r3
   1b10a:	4b23      	ldr	r3, [pc, #140]	; (1b198 <prvNotifyQueueSetContainer+0x170>)
   1b10c:	4798      	blx	r3
   1b10e:	0003      	movs	r3, r0
   1b110:	001a      	movs	r2, r3
   1b112:	4b22      	ldr	r3, [pc, #136]	; (1b19c <prvNotifyQueueSetContainer+0x174>)
   1b114:	5c9b      	ldrb	r3, [r3, r2]
   1b116:	2b02      	cmp	r3, #2
   1b118:	d005      	beq.n	1b126 <prvNotifyQueueSetContainer+0xfe>
   1b11a:	693b      	ldr	r3, [r7, #16]
   1b11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b11e:	b2db      	uxtb	r3, r3
   1b120:	3301      	adds	r3, #1
   1b122:	b2db      	uxtb	r3, r3
   1b124:	e000      	b.n	1b128 <prvNotifyQueueSetContainer+0x100>
   1b126:	2300      	movs	r3, #0
   1b128:	001a      	movs	r2, r3
   1b12a:	0029      	movs	r1, r5
   1b12c:	0020      	movs	r0, r4
   1b12e:	4b1e      	ldr	r3, [pc, #120]	; (1b1a8 <prvNotifyQueueSetContainer+0x180>)
   1b130:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1b132:	683a      	ldr	r2, [r7, #0]
   1b134:	1d39      	adds	r1, r7, #4
   1b136:	693b      	ldr	r3, [r7, #16]
   1b138:	0018      	movs	r0, r3
   1b13a:	4b1c      	ldr	r3, [pc, #112]	; (1b1ac <prvNotifyQueueSetContainer+0x184>)
   1b13c:	4798      	blx	r3
   1b13e:	0003      	movs	r3, r0
   1b140:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1b142:	230f      	movs	r3, #15
   1b144:	18fb      	adds	r3, r7, r3
   1b146:	781b      	ldrb	r3, [r3, #0]
   1b148:	b25b      	sxtb	r3, r3
   1b14a:	3301      	adds	r3, #1
   1b14c:	d10d      	bne.n	1b16a <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1b14e:	693b      	ldr	r3, [r7, #16]
   1b150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b152:	2b00      	cmp	r3, #0
   1b154:	d012      	beq.n	1b17c <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1b156:	693b      	ldr	r3, [r7, #16]
   1b158:	3324      	adds	r3, #36	; 0x24
   1b15a:	0018      	movs	r0, r3
   1b15c:	4b14      	ldr	r3, [pc, #80]	; (1b1b0 <prvNotifyQueueSetContainer+0x188>)
   1b15e:	4798      	blx	r3
   1b160:	1e03      	subs	r3, r0, #0
   1b162:	d00b      	beq.n	1b17c <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1b164:	2301      	movs	r3, #1
   1b166:	617b      	str	r3, [r7, #20]
   1b168:	e008      	b.n	1b17c <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1b16a:	230f      	movs	r3, #15
   1b16c:	18fb      	adds	r3, r7, r3
   1b16e:	781b      	ldrb	r3, [r3, #0]
   1b170:	3301      	adds	r3, #1
   1b172:	b2db      	uxtb	r3, r3
   1b174:	b259      	sxtb	r1, r3
   1b176:	693b      	ldr	r3, [r7, #16]
   1b178:	2245      	movs	r2, #69	; 0x45
   1b17a:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1b17c:	697b      	ldr	r3, [r7, #20]
	}
   1b17e:	0018      	movs	r0, r3
   1b180:	46bd      	mov	sp, r7
   1b182:	b006      	add	sp, #24
   1b184:	bdb0      	pop	{r4, r5, r7, pc}
   1b186:	46c0      	nop			; (mov r8, r8)
   1b188:	000177e9 	.word	0x000177e9
   1b18c:	0001754d 	.word	0x0001754d
   1b190:	200000f8 	.word	0x200000f8
   1b194:	0001760d 	.word	0x0001760d
   1b198:	0001750d 	.word	0x0001750d
   1b19c:	200000ec 	.word	0x200000ec
   1b1a0:	000175ed 	.word	0x000175ed
   1b1a4:	00017f45 	.word	0x00017f45
   1b1a8:	000185a1 	.word	0x000185a1
   1b1ac:	0001ad25 	.word	0x0001ad25
   1b1b0:	0001bde9 	.word	0x0001bde9

0001b1b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1b1b4:	b590      	push	{r4, r7, lr}
   1b1b6:	b08d      	sub	sp, #52	; 0x34
   1b1b8:	af04      	add	r7, sp, #16
   1b1ba:	60f8      	str	r0, [r7, #12]
   1b1bc:	60b9      	str	r1, [r7, #8]
   1b1be:	603b      	str	r3, [r7, #0]
   1b1c0:	1dbb      	adds	r3, r7, #6
   1b1c2:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b1c4:	1dbb      	adds	r3, r7, #6
   1b1c6:	881b      	ldrh	r3, [r3, #0]
   1b1c8:	009b      	lsls	r3, r3, #2
   1b1ca:	0018      	movs	r0, r3
   1b1cc:	4b1d      	ldr	r3, [pc, #116]	; (1b244 <xTaskCreate+0x90>)
   1b1ce:	4798      	blx	r3
   1b1d0:	0003      	movs	r3, r0
   1b1d2:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1b1d4:	697b      	ldr	r3, [r7, #20]
   1b1d6:	2b00      	cmp	r3, #0
   1b1d8:	d010      	beq.n	1b1fc <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1b1da:	2054      	movs	r0, #84	; 0x54
   1b1dc:	4b19      	ldr	r3, [pc, #100]	; (1b244 <xTaskCreate+0x90>)
   1b1de:	4798      	blx	r3
   1b1e0:	0003      	movs	r3, r0
   1b1e2:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1b1e4:	69fb      	ldr	r3, [r7, #28]
   1b1e6:	2b00      	cmp	r3, #0
   1b1e8:	d003      	beq.n	1b1f2 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1b1ea:	69fb      	ldr	r3, [r7, #28]
   1b1ec:	697a      	ldr	r2, [r7, #20]
   1b1ee:	631a      	str	r2, [r3, #48]	; 0x30
   1b1f0:	e006      	b.n	1b200 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1b1f2:	697b      	ldr	r3, [r7, #20]
   1b1f4:	0018      	movs	r0, r3
   1b1f6:	4b14      	ldr	r3, [pc, #80]	; (1b248 <xTaskCreate+0x94>)
   1b1f8:	4798      	blx	r3
   1b1fa:	e001      	b.n	1b200 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1b1fc:	2300      	movs	r3, #0
   1b1fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1b200:	69fb      	ldr	r3, [r7, #28]
   1b202:	2b00      	cmp	r3, #0
   1b204:	d016      	beq.n	1b234 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1b206:	1dbb      	adds	r3, r7, #6
   1b208:	881a      	ldrh	r2, [r3, #0]
   1b20a:	683c      	ldr	r4, [r7, #0]
   1b20c:	68b9      	ldr	r1, [r7, #8]
   1b20e:	68f8      	ldr	r0, [r7, #12]
   1b210:	2300      	movs	r3, #0
   1b212:	9303      	str	r3, [sp, #12]
   1b214:	69fb      	ldr	r3, [r7, #28]
   1b216:	9302      	str	r3, [sp, #8]
   1b218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b21a:	9301      	str	r3, [sp, #4]
   1b21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b21e:	9300      	str	r3, [sp, #0]
   1b220:	0023      	movs	r3, r4
   1b222:	4c0a      	ldr	r4, [pc, #40]	; (1b24c <xTaskCreate+0x98>)
   1b224:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1b226:	69fb      	ldr	r3, [r7, #28]
   1b228:	0018      	movs	r0, r3
   1b22a:	4b09      	ldr	r3, [pc, #36]	; (1b250 <xTaskCreate+0x9c>)
   1b22c:	4798      	blx	r3
			xReturn = pdPASS;
   1b22e:	2301      	movs	r3, #1
   1b230:	61bb      	str	r3, [r7, #24]
   1b232:	e002      	b.n	1b23a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1b234:	2301      	movs	r3, #1
   1b236:	425b      	negs	r3, r3
   1b238:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1b23a:	69bb      	ldr	r3, [r7, #24]
	}
   1b23c:	0018      	movs	r0, r3
   1b23e:	46bd      	mov	sp, r7
   1b240:	b009      	add	sp, #36	; 0x24
   1b242:	bd90      	pop	{r4, r7, pc}
   1b244:	00019691 	.word	0x00019691
   1b248:	00019755 	.word	0x00019755
   1b24c:	0001b255 	.word	0x0001b255
   1b250:	0001b365 	.word	0x0001b365

0001b254 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1b254:	b580      	push	{r7, lr}
   1b256:	b086      	sub	sp, #24
   1b258:	af00      	add	r7, sp, #0
   1b25a:	60f8      	str	r0, [r7, #12]
   1b25c:	60b9      	str	r1, [r7, #8]
   1b25e:	607a      	str	r2, [r7, #4]
   1b260:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1b262:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b264:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1b266:	687b      	ldr	r3, [r7, #4]
   1b268:	009b      	lsls	r3, r3, #2
   1b26a:	001a      	movs	r2, r3
   1b26c:	21a5      	movs	r1, #165	; 0xa5
   1b26e:	4b39      	ldr	r3, [pc, #228]	; (1b354 <prvInitialiseNewTask+0x100>)
   1b270:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1b272:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1b276:	687b      	ldr	r3, [r7, #4]
   1b278:	4937      	ldr	r1, [pc, #220]	; (1b358 <prvInitialiseNewTask+0x104>)
   1b27a:	468c      	mov	ip, r1
   1b27c:	4463      	add	r3, ip
   1b27e:	009b      	lsls	r3, r3, #2
   1b280:	18d3      	adds	r3, r2, r3
   1b282:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1b284:	693b      	ldr	r3, [r7, #16]
   1b286:	2207      	movs	r2, #7
   1b288:	4393      	bics	r3, r2
   1b28a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1b28c:	693b      	ldr	r3, [r7, #16]
   1b28e:	2207      	movs	r2, #7
   1b290:	4013      	ands	r3, r2
   1b292:	d001      	beq.n	1b298 <prvInitialiseNewTask+0x44>
   1b294:	b672      	cpsid	i
   1b296:	e7fe      	b.n	1b296 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1b298:	2300      	movs	r3, #0
   1b29a:	617b      	str	r3, [r7, #20]
   1b29c:	e013      	b.n	1b2c6 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1b29e:	68ba      	ldr	r2, [r7, #8]
   1b2a0:	697b      	ldr	r3, [r7, #20]
   1b2a2:	18d3      	adds	r3, r2, r3
   1b2a4:	7818      	ldrb	r0, [r3, #0]
   1b2a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b2a8:	2134      	movs	r1, #52	; 0x34
   1b2aa:	697b      	ldr	r3, [r7, #20]
   1b2ac:	18d3      	adds	r3, r2, r3
   1b2ae:	185b      	adds	r3, r3, r1
   1b2b0:	1c02      	adds	r2, r0, #0
   1b2b2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1b2b4:	68ba      	ldr	r2, [r7, #8]
   1b2b6:	697b      	ldr	r3, [r7, #20]
   1b2b8:	18d3      	adds	r3, r2, r3
   1b2ba:	781b      	ldrb	r3, [r3, #0]
   1b2bc:	2b00      	cmp	r3, #0
   1b2be:	d006      	beq.n	1b2ce <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1b2c0:	697b      	ldr	r3, [r7, #20]
   1b2c2:	3301      	adds	r3, #1
   1b2c4:	617b      	str	r3, [r7, #20]
   1b2c6:	697b      	ldr	r3, [r7, #20]
   1b2c8:	2b07      	cmp	r3, #7
   1b2ca:	d9e8      	bls.n	1b29e <prvInitialiseNewTask+0x4a>
   1b2cc:	e000      	b.n	1b2d0 <prvInitialiseNewTask+0x7c>
		{
			break;
   1b2ce:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1b2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b2d2:	223b      	movs	r2, #59	; 0x3b
   1b2d4:	2100      	movs	r1, #0
   1b2d6:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1b2d8:	6a3b      	ldr	r3, [r7, #32]
   1b2da:	2b04      	cmp	r3, #4
   1b2dc:	d901      	bls.n	1b2e2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1b2de:	2304      	movs	r3, #4
   1b2e0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1b2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b2e4:	6a3a      	ldr	r2, [r7, #32]
   1b2e6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1b2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b2ea:	6a3a      	ldr	r2, [r7, #32]
   1b2ec:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1b2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b2f0:	2200      	movs	r2, #0
   1b2f2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1b2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b2f6:	3304      	adds	r3, #4
   1b2f8:	0018      	movs	r0, r3
   1b2fa:	4b18      	ldr	r3, [pc, #96]	; (1b35c <prvInitialiseNewTask+0x108>)
   1b2fc:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1b2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b300:	3318      	adds	r3, #24
   1b302:	0018      	movs	r0, r3
   1b304:	4b15      	ldr	r3, [pc, #84]	; (1b35c <prvInitialiseNewTask+0x108>)
   1b306:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1b308:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b30a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b30c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b30e:	6a3b      	ldr	r3, [r7, #32]
   1b310:	2205      	movs	r2, #5
   1b312:	1ad2      	subs	r2, r2, r3
   1b314:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b316:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1b318:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b31a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b31c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1b31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b320:	2200      	movs	r2, #0
   1b322:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1b324:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b326:	2250      	movs	r2, #80	; 0x50
   1b328:	2100      	movs	r1, #0
   1b32a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1b32c:	683a      	ldr	r2, [r7, #0]
   1b32e:	68f9      	ldr	r1, [r7, #12]
   1b330:	693b      	ldr	r3, [r7, #16]
   1b332:	0018      	movs	r0, r3
   1b334:	4b0a      	ldr	r3, [pc, #40]	; (1b360 <prvInitialiseNewTask+0x10c>)
   1b336:	4798      	blx	r3
   1b338:	0002      	movs	r2, r0
   1b33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b33c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1b33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b340:	2b00      	cmp	r3, #0
   1b342:	d002      	beq.n	1b34a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1b344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b346:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b348:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1b34a:	46c0      	nop			; (mov r8, r8)
   1b34c:	46bd      	mov	sp, r7
   1b34e:	b006      	add	sp, #24
   1b350:	bd80      	pop	{r7, pc}
   1b352:	46c0      	nop			; (mov r8, r8)
   1b354:	0003431b 	.word	0x0003431b
   1b358:	3fffffff 	.word	0x3fffffff
   1b35c:	00019301 	.word	0x00019301
   1b360:	00019419 	.word	0x00019419

0001b364 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1b364:	b580      	push	{r7, lr}
   1b366:	b082      	sub	sp, #8
   1b368:	af00      	add	r7, sp, #0
   1b36a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1b36c:	4b60      	ldr	r3, [pc, #384]	; (1b4f0 <prvAddNewTaskToReadyList+0x18c>)
   1b36e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1b370:	4b60      	ldr	r3, [pc, #384]	; (1b4f4 <prvAddNewTaskToReadyList+0x190>)
   1b372:	681b      	ldr	r3, [r3, #0]
   1b374:	1c5a      	adds	r2, r3, #1
   1b376:	4b5f      	ldr	r3, [pc, #380]	; (1b4f4 <prvAddNewTaskToReadyList+0x190>)
   1b378:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1b37a:	4b5f      	ldr	r3, [pc, #380]	; (1b4f8 <prvAddNewTaskToReadyList+0x194>)
   1b37c:	681b      	ldr	r3, [r3, #0]
   1b37e:	2b00      	cmp	r3, #0
   1b380:	d109      	bne.n	1b396 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1b382:	4b5d      	ldr	r3, [pc, #372]	; (1b4f8 <prvAddNewTaskToReadyList+0x194>)
   1b384:	687a      	ldr	r2, [r7, #4]
   1b386:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1b388:	4b5a      	ldr	r3, [pc, #360]	; (1b4f4 <prvAddNewTaskToReadyList+0x190>)
   1b38a:	681b      	ldr	r3, [r3, #0]
   1b38c:	2b01      	cmp	r3, #1
   1b38e:	d110      	bne.n	1b3b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1b390:	4b5a      	ldr	r3, [pc, #360]	; (1b4fc <prvAddNewTaskToReadyList+0x198>)
   1b392:	4798      	blx	r3
   1b394:	e00d      	b.n	1b3b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1b396:	4b5a      	ldr	r3, [pc, #360]	; (1b500 <prvAddNewTaskToReadyList+0x19c>)
   1b398:	681b      	ldr	r3, [r3, #0]
   1b39a:	2b00      	cmp	r3, #0
   1b39c:	d109      	bne.n	1b3b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1b39e:	4b56      	ldr	r3, [pc, #344]	; (1b4f8 <prvAddNewTaskToReadyList+0x194>)
   1b3a0:	681b      	ldr	r3, [r3, #0]
   1b3a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b3a4:	687b      	ldr	r3, [r7, #4]
   1b3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b3a8:	429a      	cmp	r2, r3
   1b3aa:	d802      	bhi.n	1b3b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1b3ac:	4b52      	ldr	r3, [pc, #328]	; (1b4f8 <prvAddNewTaskToReadyList+0x194>)
   1b3ae:	687a      	ldr	r2, [r7, #4]
   1b3b0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1b3b2:	4b54      	ldr	r3, [pc, #336]	; (1b504 <prvAddNewTaskToReadyList+0x1a0>)
   1b3b4:	681b      	ldr	r3, [r3, #0]
   1b3b6:	1c5a      	adds	r2, r3, #1
   1b3b8:	4b52      	ldr	r3, [pc, #328]	; (1b504 <prvAddNewTaskToReadyList+0x1a0>)
   1b3ba:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1b3bc:	4b51      	ldr	r3, [pc, #324]	; (1b504 <prvAddNewTaskToReadyList+0x1a0>)
   1b3be:	681a      	ldr	r2, [r3, #0]
   1b3c0:	687b      	ldr	r3, [r7, #4]
   1b3c2:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1b3c4:	687b      	ldr	r3, [r7, #4]
   1b3c6:	2b00      	cmp	r3, #0
   1b3c8:	d052      	beq.n	1b470 <prvAddNewTaskToReadyList+0x10c>
   1b3ca:	2003      	movs	r0, #3
   1b3cc:	4b4e      	ldr	r3, [pc, #312]	; (1b508 <prvAddNewTaskToReadyList+0x1a4>)
   1b3ce:	4798      	blx	r3
   1b3d0:	0003      	movs	r3, r0
   1b3d2:	b29a      	uxth	r2, r3
   1b3d4:	687b      	ldr	r3, [r7, #4]
   1b3d6:	0011      	movs	r1, r2
   1b3d8:	0018      	movs	r0, r3
   1b3da:	4b4c      	ldr	r3, [pc, #304]	; (1b50c <prvAddNewTaskToReadyList+0x1a8>)
   1b3dc:	4798      	blx	r3
   1b3de:	4b4c      	ldr	r3, [pc, #304]	; (1b510 <prvAddNewTaskToReadyList+0x1ac>)
   1b3e0:	881a      	ldrh	r2, [r3, #0]
   1b3e2:	687b      	ldr	r3, [r7, #4]
   1b3e4:	0011      	movs	r1, r2
   1b3e6:	0018      	movs	r0, r3
   1b3e8:	4b4a      	ldr	r3, [pc, #296]	; (1b514 <prvAddNewTaskToReadyList+0x1b0>)
   1b3ea:	4798      	blx	r3
   1b3ec:	687b      	ldr	r3, [r7, #4]
   1b3ee:	0018      	movs	r0, r3
   1b3f0:	4b49      	ldr	r3, [pc, #292]	; (1b518 <prvAddNewTaskToReadyList+0x1b4>)
   1b3f2:	4798      	blx	r3
   1b3f4:	0003      	movs	r3, r0
   1b3f6:	b2d9      	uxtb	r1, r3
   1b3f8:	687b      	ldr	r3, [r7, #4]
   1b3fa:	3334      	adds	r3, #52	; 0x34
   1b3fc:	001a      	movs	r2, r3
   1b3fe:	2003      	movs	r0, #3
   1b400:	4b46      	ldr	r3, [pc, #280]	; (1b51c <prvAddNewTaskToReadyList+0x1b8>)
   1b402:	4798      	blx	r3
   1b404:	687b      	ldr	r3, [r7, #4]
   1b406:	0018      	movs	r0, r3
   1b408:	4b43      	ldr	r3, [pc, #268]	; (1b518 <prvAddNewTaskToReadyList+0x1b4>)
   1b40a:	4798      	blx	r3
   1b40c:	0003      	movs	r3, r0
   1b40e:	b2d9      	uxtb	r1, r3
   1b410:	687b      	ldr	r3, [r7, #4]
   1b412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b414:	b2db      	uxtb	r3, r3
   1b416:	001a      	movs	r2, r3
   1b418:	2003      	movs	r0, #3
   1b41a:	4b41      	ldr	r3, [pc, #260]	; (1b520 <prvAddNewTaskToReadyList+0x1bc>)
   1b41c:	4798      	blx	r3
   1b41e:	4b41      	ldr	r3, [pc, #260]	; (1b524 <prvAddNewTaskToReadyList+0x1c0>)
   1b420:	4798      	blx	r3
   1b422:	0003      	movs	r3, r0
   1b424:	0018      	movs	r0, r3
   1b426:	4b40      	ldr	r3, [pc, #256]	; (1b528 <prvAddNewTaskToReadyList+0x1c4>)
   1b428:	4798      	blx	r3
   1b42a:	0003      	movs	r3, r0
   1b42c:	001a      	movs	r2, r3
   1b42e:	4b3f      	ldr	r3, [pc, #252]	; (1b52c <prvAddNewTaskToReadyList+0x1c8>)
   1b430:	881b      	ldrh	r3, [r3, #0]
   1b432:	4013      	ands	r3, r2
   1b434:	b29b      	uxth	r3, r3
   1b436:	2b00      	cmp	r3, #0
   1b438:	d016      	beq.n	1b468 <prvAddNewTaskToReadyList+0x104>
   1b43a:	687b      	ldr	r3, [r7, #4]
   1b43c:	0018      	movs	r0, r3
   1b43e:	4b3a      	ldr	r3, [pc, #232]	; (1b528 <prvAddNewTaskToReadyList+0x1c4>)
   1b440:	4798      	blx	r3
   1b442:	0003      	movs	r3, r0
   1b444:	001a      	movs	r2, r3
   1b446:	4b39      	ldr	r3, [pc, #228]	; (1b52c <prvAddNewTaskToReadyList+0x1c8>)
   1b448:	881b      	ldrh	r3, [r3, #0]
   1b44a:	4013      	ands	r3, r2
   1b44c:	b29b      	uxth	r3, r3
   1b44e:	2b00      	cmp	r3, #0
   1b450:	d00a      	beq.n	1b468 <prvAddNewTaskToReadyList+0x104>
   1b452:	687b      	ldr	r3, [r7, #4]
   1b454:	0018      	movs	r0, r3
   1b456:	4b30      	ldr	r3, [pc, #192]	; (1b518 <prvAddNewTaskToReadyList+0x1b4>)
   1b458:	4798      	blx	r3
   1b45a:	0003      	movs	r3, r0
   1b45c:	b2db      	uxtb	r3, r3
   1b45e:	001a      	movs	r2, r3
   1b460:	2103      	movs	r1, #3
   1b462:	201b      	movs	r0, #27
   1b464:	4b32      	ldr	r3, [pc, #200]	; (1b530 <prvAddNewTaskToReadyList+0x1cc>)
   1b466:	4798      	blx	r3
   1b468:	687b      	ldr	r3, [r7, #4]
   1b46a:	0018      	movs	r0, r3
   1b46c:	4b31      	ldr	r3, [pc, #196]	; (1b534 <prvAddNewTaskToReadyList+0x1d0>)
   1b46e:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1b470:	687b      	ldr	r3, [r7, #4]
   1b472:	0018      	movs	r0, r3
   1b474:	4b2c      	ldr	r3, [pc, #176]	; (1b528 <prvAddNewTaskToReadyList+0x1c4>)
   1b476:	4798      	blx	r3
   1b478:	0003      	movs	r3, r0
   1b47a:	001a      	movs	r2, r3
   1b47c:	4b2b      	ldr	r3, [pc, #172]	; (1b52c <prvAddNewTaskToReadyList+0x1c8>)
   1b47e:	881b      	ldrh	r3, [r3, #0]
   1b480:	4013      	ands	r3, r2
   1b482:	b29b      	uxth	r3, r3
   1b484:	2b00      	cmp	r3, #0
   1b486:	d008      	beq.n	1b49a <prvAddNewTaskToReadyList+0x136>
   1b488:	687b      	ldr	r3, [r7, #4]
   1b48a:	0018      	movs	r0, r3
   1b48c:	4b22      	ldr	r3, [pc, #136]	; (1b518 <prvAddNewTaskToReadyList+0x1b4>)
   1b48e:	4798      	blx	r3
   1b490:	0003      	movs	r3, r0
   1b492:	b2db      	uxtb	r3, r3
   1b494:	0018      	movs	r0, r3
   1b496:	4b28      	ldr	r3, [pc, #160]	; (1b538 <prvAddNewTaskToReadyList+0x1d4>)
   1b498:	4798      	blx	r3
   1b49a:	687b      	ldr	r3, [r7, #4]
   1b49c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b49e:	4b27      	ldr	r3, [pc, #156]	; (1b53c <prvAddNewTaskToReadyList+0x1d8>)
   1b4a0:	681b      	ldr	r3, [r3, #0]
   1b4a2:	429a      	cmp	r2, r3
   1b4a4:	d903      	bls.n	1b4ae <prvAddNewTaskToReadyList+0x14a>
   1b4a6:	687b      	ldr	r3, [r7, #4]
   1b4a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b4aa:	4b24      	ldr	r3, [pc, #144]	; (1b53c <prvAddNewTaskToReadyList+0x1d8>)
   1b4ac:	601a      	str	r2, [r3, #0]
   1b4ae:	687b      	ldr	r3, [r7, #4]
   1b4b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b4b2:	0013      	movs	r3, r2
   1b4b4:	009b      	lsls	r3, r3, #2
   1b4b6:	189b      	adds	r3, r3, r2
   1b4b8:	009b      	lsls	r3, r3, #2
   1b4ba:	4a21      	ldr	r2, [pc, #132]	; (1b540 <prvAddNewTaskToReadyList+0x1dc>)
   1b4bc:	189a      	adds	r2, r3, r2
   1b4be:	687b      	ldr	r3, [r7, #4]
   1b4c0:	3304      	adds	r3, #4
   1b4c2:	0019      	movs	r1, r3
   1b4c4:	0010      	movs	r0, r2
   1b4c6:	4b1f      	ldr	r3, [pc, #124]	; (1b544 <prvAddNewTaskToReadyList+0x1e0>)
   1b4c8:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1b4ca:	4b1f      	ldr	r3, [pc, #124]	; (1b548 <prvAddNewTaskToReadyList+0x1e4>)
   1b4cc:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1b4ce:	4b0c      	ldr	r3, [pc, #48]	; (1b500 <prvAddNewTaskToReadyList+0x19c>)
   1b4d0:	681b      	ldr	r3, [r3, #0]
   1b4d2:	2b00      	cmp	r3, #0
   1b4d4:	d008      	beq.n	1b4e8 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1b4d6:	4b08      	ldr	r3, [pc, #32]	; (1b4f8 <prvAddNewTaskToReadyList+0x194>)
   1b4d8:	681b      	ldr	r3, [r3, #0]
   1b4da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b4dc:	687b      	ldr	r3, [r7, #4]
   1b4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b4e0:	429a      	cmp	r2, r3
   1b4e2:	d201      	bcs.n	1b4e8 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1b4e4:	4b19      	ldr	r3, [pc, #100]	; (1b54c <prvAddNewTaskToReadyList+0x1e8>)
   1b4e6:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1b4e8:	46c0      	nop			; (mov r8, r8)
   1b4ea:	46bd      	mov	sp, r7
   1b4ec:	b002      	add	sp, #8
   1b4ee:	bd80      	pop	{r7, pc}
   1b4f0:	00019559 	.word	0x00019559
   1b4f4:	20004018 	.word	0x20004018
   1b4f8:	20003f40 	.word	0x20003f40
   1b4fc:	0001c085 	.word	0x0001c085
   1b500:	20004024 	.word	0x20004024
   1b504:	20004034 	.word	0x20004034
   1b508:	00018acd 	.word	0x00018acd
   1b50c:	00017571 	.word	0x00017571
   1b510:	200000fa 	.word	0x200000fa
   1b514:	000175ad 	.word	0x000175ad
   1b518:	0001752d 	.word	0x0001752d
   1b51c:	00018cfd 	.word	0x00018cfd
   1b520:	00018461 	.word	0x00018461
   1b524:	000177e9 	.word	0x000177e9
   1b528:	0001754d 	.word	0x0001754d
   1b52c:	200000f8 	.word	0x200000f8
   1b530:	00017f45 	.word	0x00017f45
   1b534:	000176ad 	.word	0x000176ad
   1b538:	00017cfd 	.word	0x00017cfd
   1b53c:	20004020 	.word	0x20004020
   1b540:	20003f44 	.word	0x20003f44
   1b544:	00019317 	.word	0x00019317
   1b548:	0001957d 	.word	0x0001957d
   1b54c:	00019541 	.word	0x00019541

0001b550 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1b550:	b580      	push	{r7, lr}
   1b552:	b084      	sub	sp, #16
   1b554:	af00      	add	r7, sp, #0
   1b556:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1b558:	2300      	movs	r3, #0
   1b55a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1b55c:	687b      	ldr	r3, [r7, #4]
   1b55e:	2b00      	cmp	r3, #0
   1b560:	d045      	beq.n	1b5ee <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1b562:	4b27      	ldr	r3, [pc, #156]	; (1b600 <vTaskDelay+0xb0>)
   1b564:	681b      	ldr	r3, [r3, #0]
   1b566:	2b00      	cmp	r3, #0
   1b568:	d001      	beq.n	1b56e <vTaskDelay+0x1e>
   1b56a:	b672      	cpsid	i
   1b56c:	e7fe      	b.n	1b56c <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1b56e:	4b25      	ldr	r3, [pc, #148]	; (1b604 <vTaskDelay+0xb4>)
   1b570:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1b572:	4b25      	ldr	r3, [pc, #148]	; (1b608 <vTaskDelay+0xb8>)
   1b574:	681b      	ldr	r3, [r3, #0]
   1b576:	0018      	movs	r0, r3
   1b578:	4b24      	ldr	r3, [pc, #144]	; (1b60c <vTaskDelay+0xbc>)
   1b57a:	4798      	blx	r3
   1b57c:	0003      	movs	r3, r0
   1b57e:	001a      	movs	r2, r3
   1b580:	4b23      	ldr	r3, [pc, #140]	; (1b610 <vTaskDelay+0xc0>)
   1b582:	881b      	ldrh	r3, [r3, #0]
   1b584:	4013      	ands	r3, r2
   1b586:	b29b      	uxth	r3, r3
   1b588:	2b00      	cmp	r3, #0
   1b58a:	d00e      	beq.n	1b5aa <vTaskDelay+0x5a>
   1b58c:	687b      	ldr	r3, [r7, #4]
   1b58e:	0019      	movs	r1, r3
   1b590:	2089      	movs	r0, #137	; 0x89
   1b592:	4b20      	ldr	r3, [pc, #128]	; (1b614 <vTaskDelay+0xc4>)
   1b594:	4798      	blx	r3
   1b596:	4b1c      	ldr	r3, [pc, #112]	; (1b608 <vTaskDelay+0xb8>)
   1b598:	681b      	ldr	r3, [r3, #0]
   1b59a:	0018      	movs	r0, r3
   1b59c:	4b1e      	ldr	r3, [pc, #120]	; (1b618 <vTaskDelay+0xc8>)
   1b59e:	4798      	blx	r3
   1b5a0:	0003      	movs	r3, r0
   1b5a2:	b2db      	uxtb	r3, r3
   1b5a4:	0018      	movs	r0, r3
   1b5a6:	4b1d      	ldr	r3, [pc, #116]	; (1b61c <vTaskDelay+0xcc>)
   1b5a8:	4798      	blx	r3
   1b5aa:	4b1d      	ldr	r3, [pc, #116]	; (1b620 <vTaskDelay+0xd0>)
   1b5ac:	4798      	blx	r3
   1b5ae:	0003      	movs	r3, r0
   1b5b0:	0018      	movs	r0, r3
   1b5b2:	4b16      	ldr	r3, [pc, #88]	; (1b60c <vTaskDelay+0xbc>)
   1b5b4:	4798      	blx	r3
   1b5b6:	0003      	movs	r3, r0
   1b5b8:	001a      	movs	r2, r3
   1b5ba:	4b15      	ldr	r3, [pc, #84]	; (1b610 <vTaskDelay+0xc0>)
   1b5bc:	881b      	ldrh	r3, [r3, #0]
   1b5be:	4013      	ands	r3, r2
   1b5c0:	b29b      	uxth	r3, r3
   1b5c2:	2b00      	cmp	r3, #0
   1b5c4:	d00a      	beq.n	1b5dc <vTaskDelay+0x8c>
   1b5c6:	4b16      	ldr	r3, [pc, #88]	; (1b620 <vTaskDelay+0xd0>)
   1b5c8:	4798      	blx	r3
   1b5ca:	0003      	movs	r3, r0
   1b5cc:	0018      	movs	r0, r3
   1b5ce:	4b12      	ldr	r3, [pc, #72]	; (1b618 <vTaskDelay+0xc8>)
   1b5d0:	4798      	blx	r3
   1b5d2:	0003      	movs	r3, r0
   1b5d4:	b2db      	uxtb	r3, r3
   1b5d6:	0018      	movs	r0, r3
   1b5d8:	4b10      	ldr	r3, [pc, #64]	; (1b61c <vTaskDelay+0xcc>)
   1b5da:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1b5dc:	687b      	ldr	r3, [r7, #4]
   1b5de:	2100      	movs	r1, #0
   1b5e0:	0018      	movs	r0, r3
   1b5e2:	4b10      	ldr	r3, [pc, #64]	; (1b624 <vTaskDelay+0xd4>)
   1b5e4:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1b5e6:	4b10      	ldr	r3, [pc, #64]	; (1b628 <vTaskDelay+0xd8>)
   1b5e8:	4798      	blx	r3
   1b5ea:	0003      	movs	r3, r0
   1b5ec:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1b5ee:	68fb      	ldr	r3, [r7, #12]
   1b5f0:	2b00      	cmp	r3, #0
   1b5f2:	d101      	bne.n	1b5f8 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1b5f4:	4b0d      	ldr	r3, [pc, #52]	; (1b62c <vTaskDelay+0xdc>)
   1b5f6:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1b5f8:	46c0      	nop			; (mov r8, r8)
   1b5fa:	46bd      	mov	sp, r7
   1b5fc:	b004      	add	sp, #16
   1b5fe:	bd80      	pop	{r7, pc}
   1b600:	20004040 	.word	0x20004040
   1b604:	0001b811 	.word	0x0001b811
   1b608:	20003f40 	.word	0x20003f40
   1b60c:	0001754d 	.word	0x0001754d
   1b610:	200000f8 	.word	0x200000f8
   1b614:	0001824d 	.word	0x0001824d
   1b618:	0001752d 	.word	0x0001752d
   1b61c:	000186dd 	.word	0x000186dd
   1b620:	000177e9 	.word	0x000177e9
   1b624:	0001c769 	.word	0x0001c769
   1b628:	0001b829 	.word	0x0001b829
   1b62c:	00019541 	.word	0x00019541

0001b630 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1b630:	b580      	push	{r7, lr}
   1b632:	b084      	sub	sp, #16
   1b634:	af00      	add	r7, sp, #0
   1b636:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1b638:	4b42      	ldr	r3, [pc, #264]	; (1b744 <vTaskSuspend+0x114>)
   1b63a:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1b63c:	687b      	ldr	r3, [r7, #4]
   1b63e:	2b00      	cmp	r3, #0
   1b640:	d102      	bne.n	1b648 <vTaskSuspend+0x18>
   1b642:	4b41      	ldr	r3, [pc, #260]	; (1b748 <vTaskSuspend+0x118>)
   1b644:	681b      	ldr	r3, [r3, #0]
   1b646:	e000      	b.n	1b64a <vTaskSuspend+0x1a>
   1b648:	687b      	ldr	r3, [r7, #4]
   1b64a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1b64c:	4b3f      	ldr	r3, [pc, #252]	; (1b74c <vTaskSuspend+0x11c>)
   1b64e:	4798      	blx	r3
   1b650:	0003      	movs	r3, r0
   1b652:	0018      	movs	r0, r3
   1b654:	4b3e      	ldr	r3, [pc, #248]	; (1b750 <vTaskSuspend+0x120>)
   1b656:	4798      	blx	r3
   1b658:	0003      	movs	r3, r0
   1b65a:	001a      	movs	r2, r3
   1b65c:	4b3d      	ldr	r3, [pc, #244]	; (1b754 <vTaskSuspend+0x124>)
   1b65e:	881b      	ldrh	r3, [r3, #0]
   1b660:	4013      	ands	r3, r2
   1b662:	b29b      	uxth	r3, r3
   1b664:	2b00      	cmp	r3, #0
   1b666:	d016      	beq.n	1b696 <vTaskSuspend+0x66>
   1b668:	68fb      	ldr	r3, [r7, #12]
   1b66a:	0018      	movs	r0, r3
   1b66c:	4b38      	ldr	r3, [pc, #224]	; (1b750 <vTaskSuspend+0x120>)
   1b66e:	4798      	blx	r3
   1b670:	0003      	movs	r3, r0
   1b672:	001a      	movs	r2, r3
   1b674:	4b37      	ldr	r3, [pc, #220]	; (1b754 <vTaskSuspend+0x124>)
   1b676:	881b      	ldrh	r3, [r3, #0]
   1b678:	4013      	ands	r3, r2
   1b67a:	b29b      	uxth	r3, r3
   1b67c:	2b00      	cmp	r3, #0
   1b67e:	d00a      	beq.n	1b696 <vTaskSuspend+0x66>
   1b680:	68fb      	ldr	r3, [r7, #12]
   1b682:	0018      	movs	r0, r3
   1b684:	4b34      	ldr	r3, [pc, #208]	; (1b758 <vTaskSuspend+0x128>)
   1b686:	4798      	blx	r3
   1b688:	0003      	movs	r3, r0
   1b68a:	b2db      	uxtb	r3, r3
   1b68c:	001a      	movs	r2, r3
   1b68e:	2103      	movs	r1, #3
   1b690:	208a      	movs	r0, #138	; 0x8a
   1b692:	4b32      	ldr	r3, [pc, #200]	; (1b75c <vTaskSuspend+0x12c>)
   1b694:	4798      	blx	r3
   1b696:	68fb      	ldr	r3, [r7, #12]
   1b698:	0018      	movs	r0, r3
   1b69a:	4b2f      	ldr	r3, [pc, #188]	; (1b758 <vTaskSuspend+0x128>)
   1b69c:	4798      	blx	r3
   1b69e:	0003      	movs	r3, r0
   1b6a0:	b2db      	uxtb	r3, r3
   1b6a2:	0018      	movs	r0, r3
   1b6a4:	4b2e      	ldr	r3, [pc, #184]	; (1b760 <vTaskSuspend+0x130>)
   1b6a6:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1b6a8:	68fb      	ldr	r3, [r7, #12]
   1b6aa:	3304      	adds	r3, #4
   1b6ac:	0018      	movs	r0, r3
   1b6ae:	4b2d      	ldr	r3, [pc, #180]	; (1b764 <vTaskSuspend+0x134>)
   1b6b0:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1b6b2:	68fb      	ldr	r3, [r7, #12]
   1b6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b6b6:	2b00      	cmp	r3, #0
   1b6b8:	d004      	beq.n	1b6c4 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1b6ba:	68fb      	ldr	r3, [r7, #12]
   1b6bc:	3318      	adds	r3, #24
   1b6be:	0018      	movs	r0, r3
   1b6c0:	4b28      	ldr	r3, [pc, #160]	; (1b764 <vTaskSuspend+0x134>)
   1b6c2:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1b6c4:	68fb      	ldr	r3, [r7, #12]
   1b6c6:	1d1a      	adds	r2, r3, #4
   1b6c8:	4b27      	ldr	r3, [pc, #156]	; (1b768 <vTaskSuspend+0x138>)
   1b6ca:	0011      	movs	r1, r2
   1b6cc:	0018      	movs	r0, r3
   1b6ce:	4b27      	ldr	r3, [pc, #156]	; (1b76c <vTaskSuspend+0x13c>)
   1b6d0:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1b6d2:	68fb      	ldr	r3, [r7, #12]
   1b6d4:	2250      	movs	r2, #80	; 0x50
   1b6d6:	5c9b      	ldrb	r3, [r3, r2]
   1b6d8:	b2db      	uxtb	r3, r3
   1b6da:	2b01      	cmp	r3, #1
   1b6dc:	d103      	bne.n	1b6e6 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1b6de:	68fb      	ldr	r3, [r7, #12]
   1b6e0:	2250      	movs	r2, #80	; 0x50
   1b6e2:	2100      	movs	r1, #0
   1b6e4:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1b6e6:	4b22      	ldr	r3, [pc, #136]	; (1b770 <vTaskSuspend+0x140>)
   1b6e8:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1b6ea:	4b22      	ldr	r3, [pc, #136]	; (1b774 <vTaskSuspend+0x144>)
   1b6ec:	681b      	ldr	r3, [r3, #0]
   1b6ee:	2b00      	cmp	r3, #0
   1b6f0:	d005      	beq.n	1b6fe <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1b6f2:	4b14      	ldr	r3, [pc, #80]	; (1b744 <vTaskSuspend+0x114>)
   1b6f4:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1b6f6:	4b20      	ldr	r3, [pc, #128]	; (1b778 <vTaskSuspend+0x148>)
   1b6f8:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1b6fa:	4b1d      	ldr	r3, [pc, #116]	; (1b770 <vTaskSuspend+0x140>)
   1b6fc:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1b6fe:	4b12      	ldr	r3, [pc, #72]	; (1b748 <vTaskSuspend+0x118>)
   1b700:	681b      	ldr	r3, [r3, #0]
   1b702:	68fa      	ldr	r2, [r7, #12]
   1b704:	429a      	cmp	r2, r3
   1b706:	d118      	bne.n	1b73a <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1b708:	4b1a      	ldr	r3, [pc, #104]	; (1b774 <vTaskSuspend+0x144>)
   1b70a:	681b      	ldr	r3, [r3, #0]
   1b70c:	2b00      	cmp	r3, #0
   1b70e:	d008      	beq.n	1b722 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1b710:	4b1a      	ldr	r3, [pc, #104]	; (1b77c <vTaskSuspend+0x14c>)
   1b712:	681b      	ldr	r3, [r3, #0]
   1b714:	2b00      	cmp	r3, #0
   1b716:	d001      	beq.n	1b71c <vTaskSuspend+0xec>
   1b718:	b672      	cpsid	i
   1b71a:	e7fe      	b.n	1b71a <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1b71c:	4b18      	ldr	r3, [pc, #96]	; (1b780 <vTaskSuspend+0x150>)
   1b71e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1b720:	e00b      	b.n	1b73a <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1b722:	4b11      	ldr	r3, [pc, #68]	; (1b768 <vTaskSuspend+0x138>)
   1b724:	681a      	ldr	r2, [r3, #0]
   1b726:	4b17      	ldr	r3, [pc, #92]	; (1b784 <vTaskSuspend+0x154>)
   1b728:	681b      	ldr	r3, [r3, #0]
   1b72a:	429a      	cmp	r2, r3
   1b72c:	d103      	bne.n	1b736 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1b72e:	4b06      	ldr	r3, [pc, #24]	; (1b748 <vTaskSuspend+0x118>)
   1b730:	2200      	movs	r2, #0
   1b732:	601a      	str	r2, [r3, #0]
	}
   1b734:	e001      	b.n	1b73a <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1b736:	4b14      	ldr	r3, [pc, #80]	; (1b788 <vTaskSuspend+0x158>)
   1b738:	4798      	blx	r3
	}
   1b73a:	46c0      	nop			; (mov r8, r8)
   1b73c:	46bd      	mov	sp, r7
   1b73e:	b004      	add	sp, #16
   1b740:	bd80      	pop	{r7, pc}
   1b742:	46c0      	nop			; (mov r8, r8)
   1b744:	00019559 	.word	0x00019559
   1b748:	20003f40 	.word	0x20003f40
   1b74c:	000177e9 	.word	0x000177e9
   1b750:	0001754d 	.word	0x0001754d
   1b754:	200000f8 	.word	0x200000f8
   1b758:	0001752d 	.word	0x0001752d
   1b75c:	00017f45 	.word	0x00017f45
   1b760:	000186dd 	.word	0x000186dd
   1b764:	000193c7 	.word	0x000193c7
   1b768:	20004004 	.word	0x20004004
   1b76c:	00019317 	.word	0x00019317
   1b770:	0001957d 	.word	0x0001957d
   1b774:	20004024 	.word	0x20004024
   1b778:	0001c215 	.word	0x0001c215
   1b77c:	20004040 	.word	0x20004040
   1b780:	00019541 	.word	0x00019541
   1b784:	20004018 	.word	0x20004018
   1b788:	0001bba5 	.word	0x0001bba5

0001b78c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1b78c:	b590      	push	{r4, r7, lr}
   1b78e:	b085      	sub	sp, #20
   1b790:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1b792:	4916      	ldr	r1, [pc, #88]	; (1b7ec <vTaskStartScheduler+0x60>)
   1b794:	4816      	ldr	r0, [pc, #88]	; (1b7f0 <vTaskStartScheduler+0x64>)
   1b796:	4b17      	ldr	r3, [pc, #92]	; (1b7f4 <vTaskStartScheduler+0x68>)
   1b798:	9301      	str	r3, [sp, #4]
   1b79a:	2300      	movs	r3, #0
   1b79c:	9300      	str	r3, [sp, #0]
   1b79e:	2300      	movs	r3, #0
   1b7a0:	2296      	movs	r2, #150	; 0x96
   1b7a2:	4c15      	ldr	r4, [pc, #84]	; (1b7f8 <vTaskStartScheduler+0x6c>)
   1b7a4:	47a0      	blx	r4
   1b7a6:	0003      	movs	r3, r0
   1b7a8:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1b7aa:	687b      	ldr	r3, [r7, #4]
   1b7ac:	2b01      	cmp	r3, #1
   1b7ae:	d103      	bne.n	1b7b8 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1b7b0:	4b12      	ldr	r3, [pc, #72]	; (1b7fc <vTaskStartScheduler+0x70>)
   1b7b2:	4798      	blx	r3
   1b7b4:	0003      	movs	r3, r0
   1b7b6:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1b7b8:	687b      	ldr	r3, [r7, #4]
   1b7ba:	2b01      	cmp	r3, #1
   1b7bc:	d10d      	bne.n	1b7da <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1b7be:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1b7c0:	4b0f      	ldr	r3, [pc, #60]	; (1b800 <vTaskStartScheduler+0x74>)
   1b7c2:	2201      	movs	r2, #1
   1b7c4:	4252      	negs	r2, r2
   1b7c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1b7c8:	4b0e      	ldr	r3, [pc, #56]	; (1b804 <vTaskStartScheduler+0x78>)
   1b7ca:	2201      	movs	r2, #1
   1b7cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1b7ce:	4b0e      	ldr	r3, [pc, #56]	; (1b808 <vTaskStartScheduler+0x7c>)
   1b7d0:	2200      	movs	r2, #0
   1b7d2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1b7d4:	4b0d      	ldr	r3, [pc, #52]	; (1b80c <vTaskStartScheduler+0x80>)
   1b7d6:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1b7d8:	e004      	b.n	1b7e4 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1b7da:	687b      	ldr	r3, [r7, #4]
   1b7dc:	3301      	adds	r3, #1
   1b7de:	d101      	bne.n	1b7e4 <vTaskStartScheduler+0x58>
   1b7e0:	b672      	cpsid	i
   1b7e2:	e7fe      	b.n	1b7e2 <vTaskStartScheduler+0x56>
}
   1b7e4:	46c0      	nop			; (mov r8, r8)
   1b7e6:	46bd      	mov	sp, r7
   1b7e8:	b003      	add	sp, #12
   1b7ea:	bd90      	pop	{r4, r7, pc}
   1b7ec:	00037920 	.word	0x00037920
   1b7f0:	0001c05d 	.word	0x0001c05d
   1b7f4:	2000403c 	.word	0x2000403c
   1b7f8:	0001b1b5 	.word	0x0001b1b5
   1b7fc:	0001c81d 	.word	0x0001c81d
   1b800:	20004038 	.word	0x20004038
   1b804:	20004024 	.word	0x20004024
   1b808:	2000401c 	.word	0x2000401c
   1b80c:	000194e9 	.word	0x000194e9

0001b810 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1b810:	b580      	push	{r7, lr}
   1b812:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1b814:	4b03      	ldr	r3, [pc, #12]	; (1b824 <vTaskSuspendAll+0x14>)
   1b816:	681b      	ldr	r3, [r3, #0]
   1b818:	1c5a      	adds	r2, r3, #1
   1b81a:	4b02      	ldr	r3, [pc, #8]	; (1b824 <vTaskSuspendAll+0x14>)
   1b81c:	601a      	str	r2, [r3, #0]
}
   1b81e:	46c0      	nop			; (mov r8, r8)
   1b820:	46bd      	mov	sp, r7
   1b822:	bd80      	pop	{r7, pc}
   1b824:	20004040 	.word	0x20004040

0001b828 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1b828:	b580      	push	{r7, lr}
   1b82a:	b084      	sub	sp, #16
   1b82c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1b82e:	2300      	movs	r3, #0
   1b830:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1b832:	2300      	movs	r3, #0
   1b834:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1b836:	4b45      	ldr	r3, [pc, #276]	; (1b94c <xTaskResumeAll+0x124>)
   1b838:	681b      	ldr	r3, [r3, #0]
   1b83a:	2b00      	cmp	r3, #0
   1b83c:	d101      	bne.n	1b842 <xTaskResumeAll+0x1a>
   1b83e:	b672      	cpsid	i
   1b840:	e7fe      	b.n	1b840 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1b842:	4b43      	ldr	r3, [pc, #268]	; (1b950 <xTaskResumeAll+0x128>)
   1b844:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1b846:	4b41      	ldr	r3, [pc, #260]	; (1b94c <xTaskResumeAll+0x124>)
   1b848:	681b      	ldr	r3, [r3, #0]
   1b84a:	1e5a      	subs	r2, r3, #1
   1b84c:	4b3f      	ldr	r3, [pc, #252]	; (1b94c <xTaskResumeAll+0x124>)
   1b84e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1b850:	4b3e      	ldr	r3, [pc, #248]	; (1b94c <xTaskResumeAll+0x124>)
   1b852:	681b      	ldr	r3, [r3, #0]
   1b854:	2b00      	cmp	r3, #0
   1b856:	d000      	beq.n	1b85a <xTaskResumeAll+0x32>
   1b858:	e071      	b.n	1b93e <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1b85a:	4b3e      	ldr	r3, [pc, #248]	; (1b954 <xTaskResumeAll+0x12c>)
   1b85c:	681b      	ldr	r3, [r3, #0]
   1b85e:	2b00      	cmp	r3, #0
   1b860:	d100      	bne.n	1b864 <xTaskResumeAll+0x3c>
   1b862:	e06c      	b.n	1b93e <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1b864:	e044      	b.n	1b8f0 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1b866:	4b3c      	ldr	r3, [pc, #240]	; (1b958 <xTaskResumeAll+0x130>)
   1b868:	68db      	ldr	r3, [r3, #12]
   1b86a:	68db      	ldr	r3, [r3, #12]
   1b86c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1b86e:	68fb      	ldr	r3, [r7, #12]
   1b870:	3318      	adds	r3, #24
   1b872:	0018      	movs	r0, r3
   1b874:	4b39      	ldr	r3, [pc, #228]	; (1b95c <xTaskResumeAll+0x134>)
   1b876:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1b878:	68fb      	ldr	r3, [r7, #12]
   1b87a:	3304      	adds	r3, #4
   1b87c:	0018      	movs	r0, r3
   1b87e:	4b37      	ldr	r3, [pc, #220]	; (1b95c <xTaskResumeAll+0x134>)
   1b880:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1b882:	68fb      	ldr	r3, [r7, #12]
   1b884:	0018      	movs	r0, r3
   1b886:	4b36      	ldr	r3, [pc, #216]	; (1b960 <xTaskResumeAll+0x138>)
   1b888:	4798      	blx	r3
   1b88a:	0003      	movs	r3, r0
   1b88c:	001a      	movs	r2, r3
   1b88e:	4b35      	ldr	r3, [pc, #212]	; (1b964 <xTaskResumeAll+0x13c>)
   1b890:	881b      	ldrh	r3, [r3, #0]
   1b892:	4013      	ands	r3, r2
   1b894:	b29b      	uxth	r3, r3
   1b896:	2b00      	cmp	r3, #0
   1b898:	d008      	beq.n	1b8ac <xTaskResumeAll+0x84>
   1b89a:	68fb      	ldr	r3, [r7, #12]
   1b89c:	0018      	movs	r0, r3
   1b89e:	4b32      	ldr	r3, [pc, #200]	; (1b968 <xTaskResumeAll+0x140>)
   1b8a0:	4798      	blx	r3
   1b8a2:	0003      	movs	r3, r0
   1b8a4:	b2db      	uxtb	r3, r3
   1b8a6:	0018      	movs	r0, r3
   1b8a8:	4b30      	ldr	r3, [pc, #192]	; (1b96c <xTaskResumeAll+0x144>)
   1b8aa:	4798      	blx	r3
   1b8ac:	68fb      	ldr	r3, [r7, #12]
   1b8ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b8b0:	4b2f      	ldr	r3, [pc, #188]	; (1b970 <xTaskResumeAll+0x148>)
   1b8b2:	681b      	ldr	r3, [r3, #0]
   1b8b4:	429a      	cmp	r2, r3
   1b8b6:	d903      	bls.n	1b8c0 <xTaskResumeAll+0x98>
   1b8b8:	68fb      	ldr	r3, [r7, #12]
   1b8ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b8bc:	4b2c      	ldr	r3, [pc, #176]	; (1b970 <xTaskResumeAll+0x148>)
   1b8be:	601a      	str	r2, [r3, #0]
   1b8c0:	68fb      	ldr	r3, [r7, #12]
   1b8c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b8c4:	0013      	movs	r3, r2
   1b8c6:	009b      	lsls	r3, r3, #2
   1b8c8:	189b      	adds	r3, r3, r2
   1b8ca:	009b      	lsls	r3, r3, #2
   1b8cc:	4a29      	ldr	r2, [pc, #164]	; (1b974 <xTaskResumeAll+0x14c>)
   1b8ce:	189a      	adds	r2, r3, r2
   1b8d0:	68fb      	ldr	r3, [r7, #12]
   1b8d2:	3304      	adds	r3, #4
   1b8d4:	0019      	movs	r1, r3
   1b8d6:	0010      	movs	r0, r2
   1b8d8:	4b27      	ldr	r3, [pc, #156]	; (1b978 <xTaskResumeAll+0x150>)
   1b8da:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1b8dc:	68fb      	ldr	r3, [r7, #12]
   1b8de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b8e0:	4b26      	ldr	r3, [pc, #152]	; (1b97c <xTaskResumeAll+0x154>)
   1b8e2:	681b      	ldr	r3, [r3, #0]
   1b8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b8e6:	429a      	cmp	r2, r3
   1b8e8:	d302      	bcc.n	1b8f0 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1b8ea:	4b25      	ldr	r3, [pc, #148]	; (1b980 <xTaskResumeAll+0x158>)
   1b8ec:	2201      	movs	r2, #1
   1b8ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1b8f0:	4b19      	ldr	r3, [pc, #100]	; (1b958 <xTaskResumeAll+0x130>)
   1b8f2:	681b      	ldr	r3, [r3, #0]
   1b8f4:	2b00      	cmp	r3, #0
   1b8f6:	d1b6      	bne.n	1b866 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1b8f8:	68fb      	ldr	r3, [r7, #12]
   1b8fa:	2b00      	cmp	r3, #0
   1b8fc:	d001      	beq.n	1b902 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1b8fe:	4b21      	ldr	r3, [pc, #132]	; (1b984 <xTaskResumeAll+0x15c>)
   1b900:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1b902:	4b21      	ldr	r3, [pc, #132]	; (1b988 <xTaskResumeAll+0x160>)
   1b904:	681b      	ldr	r3, [r3, #0]
   1b906:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1b908:	687b      	ldr	r3, [r7, #4]
   1b90a:	2b00      	cmp	r3, #0
   1b90c:	d00f      	beq.n	1b92e <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1b90e:	4b1f      	ldr	r3, [pc, #124]	; (1b98c <xTaskResumeAll+0x164>)
   1b910:	4798      	blx	r3
   1b912:	1e03      	subs	r3, r0, #0
   1b914:	d002      	beq.n	1b91c <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1b916:	4b1a      	ldr	r3, [pc, #104]	; (1b980 <xTaskResumeAll+0x158>)
   1b918:	2201      	movs	r2, #1
   1b91a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1b91c:	687b      	ldr	r3, [r7, #4]
   1b91e:	3b01      	subs	r3, #1
   1b920:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1b922:	687b      	ldr	r3, [r7, #4]
   1b924:	2b00      	cmp	r3, #0
   1b926:	d1f2      	bne.n	1b90e <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1b928:	4b17      	ldr	r3, [pc, #92]	; (1b988 <xTaskResumeAll+0x160>)
   1b92a:	2200      	movs	r2, #0
   1b92c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1b92e:	4b14      	ldr	r3, [pc, #80]	; (1b980 <xTaskResumeAll+0x158>)
   1b930:	681b      	ldr	r3, [r3, #0]
   1b932:	2b00      	cmp	r3, #0
   1b934:	d003      	beq.n	1b93e <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1b936:	2301      	movs	r3, #1
   1b938:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1b93a:	4b15      	ldr	r3, [pc, #84]	; (1b990 <xTaskResumeAll+0x168>)
   1b93c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1b93e:	4b15      	ldr	r3, [pc, #84]	; (1b994 <xTaskResumeAll+0x16c>)
   1b940:	4798      	blx	r3

	return xAlreadyYielded;
   1b942:	68bb      	ldr	r3, [r7, #8]
}
   1b944:	0018      	movs	r0, r3
   1b946:	46bd      	mov	sp, r7
   1b948:	b004      	add	sp, #16
   1b94a:	bd80      	pop	{r7, pc}
   1b94c:	20004040 	.word	0x20004040
   1b950:	00019559 	.word	0x00019559
   1b954:	20004018 	.word	0x20004018
   1b958:	20003fd8 	.word	0x20003fd8
   1b95c:	000193c7 	.word	0x000193c7
   1b960:	0001754d 	.word	0x0001754d
   1b964:	200000f8 	.word	0x200000f8
   1b968:	0001752d 	.word	0x0001752d
   1b96c:	00017cfd 	.word	0x00017cfd
   1b970:	20004020 	.word	0x20004020
   1b974:	20003f44 	.word	0x20003f44
   1b978:	00019317 	.word	0x00019317
   1b97c:	20003f40 	.word	0x20003f40
   1b980:	2000402c 	.word	0x2000402c
   1b984:	0001c215 	.word	0x0001c215
   1b988:	20004028 	.word	0x20004028
   1b98c:	0001b9b5 	.word	0x0001b9b5
   1b990:	00019541 	.word	0x00019541
   1b994:	0001957d 	.word	0x0001957d

0001b998 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1b998:	b580      	push	{r7, lr}
   1b99a:	b082      	sub	sp, #8
   1b99c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1b99e:	4b04      	ldr	r3, [pc, #16]	; (1b9b0 <xTaskGetTickCount+0x18>)
   1b9a0:	681b      	ldr	r3, [r3, #0]
   1b9a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1b9a4:	687b      	ldr	r3, [r7, #4]
}
   1b9a6:	0018      	movs	r0, r3
   1b9a8:	46bd      	mov	sp, r7
   1b9aa:	b002      	add	sp, #8
   1b9ac:	bd80      	pop	{r7, pc}
   1b9ae:	46c0      	nop			; (mov r8, r8)
   1b9b0:	2000401c 	.word	0x2000401c

0001b9b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1b9b4:	b580      	push	{r7, lr}
   1b9b6:	b086      	sub	sp, #24
   1b9b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1b9ba:	2300      	movs	r3, #0
   1b9bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1b9be:	4b64      	ldr	r3, [pc, #400]	; (1bb50 <xTaskIncrementTick+0x19c>)
   1b9c0:	681b      	ldr	r3, [r3, #0]
   1b9c2:	2b01      	cmp	r3, #1
   1b9c4:	d003      	beq.n	1b9ce <xTaskIncrementTick+0x1a>
   1b9c6:	4b63      	ldr	r3, [pc, #396]	; (1bb54 <xTaskIncrementTick+0x1a0>)
   1b9c8:	681b      	ldr	r3, [r3, #0]
   1b9ca:	2b00      	cmp	r3, #0
   1b9cc:	d107      	bne.n	1b9de <xTaskIncrementTick+0x2a>
   1b9ce:	4b62      	ldr	r3, [pc, #392]	; (1bb58 <xTaskIncrementTick+0x1a4>)
   1b9d0:	681b      	ldr	r3, [r3, #0]
   1b9d2:	1c5a      	adds	r2, r3, #1
   1b9d4:	4b60      	ldr	r3, [pc, #384]	; (1bb58 <xTaskIncrementTick+0x1a4>)
   1b9d6:	601a      	str	r2, [r3, #0]
   1b9d8:	2000      	movs	r0, #0
   1b9da:	4b60      	ldr	r3, [pc, #384]	; (1bb5c <xTaskIncrementTick+0x1a8>)
   1b9dc:	4798      	blx	r3
   1b9de:	4b5c      	ldr	r3, [pc, #368]	; (1bb50 <xTaskIncrementTick+0x19c>)
   1b9e0:	681b      	ldr	r3, [r3, #0]
   1b9e2:	2b00      	cmp	r3, #0
   1b9e4:	d106      	bne.n	1b9f4 <xTaskIncrementTick+0x40>
   1b9e6:	4b5e      	ldr	r3, [pc, #376]	; (1bb60 <xTaskIncrementTick+0x1ac>)
   1b9e8:	681b      	ldr	r3, [r3, #0]
   1b9ea:	3301      	adds	r3, #1
   1b9ec:	0019      	movs	r1, r3
   1b9ee:	2003      	movs	r0, #3
   1b9f0:	4b5c      	ldr	r3, [pc, #368]	; (1bb64 <xTaskIncrementTick+0x1b0>)
   1b9f2:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1b9f4:	4b56      	ldr	r3, [pc, #344]	; (1bb50 <xTaskIncrementTick+0x19c>)
   1b9f6:	681b      	ldr	r3, [r3, #0]
   1b9f8:	2b00      	cmp	r3, #0
   1b9fa:	d000      	beq.n	1b9fe <xTaskIncrementTick+0x4a>
   1b9fc:	e098      	b.n	1bb30 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1b9fe:	4b58      	ldr	r3, [pc, #352]	; (1bb60 <xTaskIncrementTick+0x1ac>)
   1ba00:	681b      	ldr	r3, [r3, #0]
   1ba02:	3301      	adds	r3, #1
   1ba04:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1ba06:	4b56      	ldr	r3, [pc, #344]	; (1bb60 <xTaskIncrementTick+0x1ac>)
   1ba08:	693a      	ldr	r2, [r7, #16]
   1ba0a:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1ba0c:	693b      	ldr	r3, [r7, #16]
   1ba0e:	2b00      	cmp	r3, #0
   1ba10:	d117      	bne.n	1ba42 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1ba12:	4b55      	ldr	r3, [pc, #340]	; (1bb68 <xTaskIncrementTick+0x1b4>)
   1ba14:	681b      	ldr	r3, [r3, #0]
   1ba16:	681b      	ldr	r3, [r3, #0]
   1ba18:	2b00      	cmp	r3, #0
   1ba1a:	d001      	beq.n	1ba20 <xTaskIncrementTick+0x6c>
   1ba1c:	b672      	cpsid	i
   1ba1e:	e7fe      	b.n	1ba1e <xTaskIncrementTick+0x6a>
   1ba20:	4b51      	ldr	r3, [pc, #324]	; (1bb68 <xTaskIncrementTick+0x1b4>)
   1ba22:	681b      	ldr	r3, [r3, #0]
   1ba24:	60fb      	str	r3, [r7, #12]
   1ba26:	4b51      	ldr	r3, [pc, #324]	; (1bb6c <xTaskIncrementTick+0x1b8>)
   1ba28:	681a      	ldr	r2, [r3, #0]
   1ba2a:	4b4f      	ldr	r3, [pc, #316]	; (1bb68 <xTaskIncrementTick+0x1b4>)
   1ba2c:	601a      	str	r2, [r3, #0]
   1ba2e:	4b4f      	ldr	r3, [pc, #316]	; (1bb6c <xTaskIncrementTick+0x1b8>)
   1ba30:	68fa      	ldr	r2, [r7, #12]
   1ba32:	601a      	str	r2, [r3, #0]
   1ba34:	4b4e      	ldr	r3, [pc, #312]	; (1bb70 <xTaskIncrementTick+0x1bc>)
   1ba36:	681b      	ldr	r3, [r3, #0]
   1ba38:	1c5a      	adds	r2, r3, #1
   1ba3a:	4b4d      	ldr	r3, [pc, #308]	; (1bb70 <xTaskIncrementTick+0x1bc>)
   1ba3c:	601a      	str	r2, [r3, #0]
   1ba3e:	4b4d      	ldr	r3, [pc, #308]	; (1bb74 <xTaskIncrementTick+0x1c0>)
   1ba40:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1ba42:	4b4d      	ldr	r3, [pc, #308]	; (1bb78 <xTaskIncrementTick+0x1c4>)
   1ba44:	681b      	ldr	r3, [r3, #0]
   1ba46:	693a      	ldr	r2, [r7, #16]
   1ba48:	429a      	cmp	r2, r3
   1ba4a:	d363      	bcc.n	1bb14 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1ba4c:	4b46      	ldr	r3, [pc, #280]	; (1bb68 <xTaskIncrementTick+0x1b4>)
   1ba4e:	681b      	ldr	r3, [r3, #0]
   1ba50:	681b      	ldr	r3, [r3, #0]
   1ba52:	2b00      	cmp	r3, #0
   1ba54:	d101      	bne.n	1ba5a <xTaskIncrementTick+0xa6>
   1ba56:	2301      	movs	r3, #1
   1ba58:	e000      	b.n	1ba5c <xTaskIncrementTick+0xa8>
   1ba5a:	2300      	movs	r3, #0
   1ba5c:	2b00      	cmp	r3, #0
   1ba5e:	d004      	beq.n	1ba6a <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ba60:	4b45      	ldr	r3, [pc, #276]	; (1bb78 <xTaskIncrementTick+0x1c4>)
   1ba62:	2201      	movs	r2, #1
   1ba64:	4252      	negs	r2, r2
   1ba66:	601a      	str	r2, [r3, #0]
					break;
   1ba68:	e054      	b.n	1bb14 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1ba6a:	4b3f      	ldr	r3, [pc, #252]	; (1bb68 <xTaskIncrementTick+0x1b4>)
   1ba6c:	681b      	ldr	r3, [r3, #0]
   1ba6e:	68db      	ldr	r3, [r3, #12]
   1ba70:	68db      	ldr	r3, [r3, #12]
   1ba72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1ba74:	68bb      	ldr	r3, [r7, #8]
   1ba76:	685b      	ldr	r3, [r3, #4]
   1ba78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1ba7a:	693a      	ldr	r2, [r7, #16]
   1ba7c:	687b      	ldr	r3, [r7, #4]
   1ba7e:	429a      	cmp	r2, r3
   1ba80:	d203      	bcs.n	1ba8a <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1ba82:	4b3d      	ldr	r3, [pc, #244]	; (1bb78 <xTaskIncrementTick+0x1c4>)
   1ba84:	687a      	ldr	r2, [r7, #4]
   1ba86:	601a      	str	r2, [r3, #0]
						break;
   1ba88:	e044      	b.n	1bb14 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1ba8a:	68bb      	ldr	r3, [r7, #8]
   1ba8c:	3304      	adds	r3, #4
   1ba8e:	0018      	movs	r0, r3
   1ba90:	4b3a      	ldr	r3, [pc, #232]	; (1bb7c <xTaskIncrementTick+0x1c8>)
   1ba92:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1ba94:	68bb      	ldr	r3, [r7, #8]
   1ba96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ba98:	2b00      	cmp	r3, #0
   1ba9a:	d004      	beq.n	1baa6 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1ba9c:	68bb      	ldr	r3, [r7, #8]
   1ba9e:	3318      	adds	r3, #24
   1baa0:	0018      	movs	r0, r3
   1baa2:	4b36      	ldr	r3, [pc, #216]	; (1bb7c <xTaskIncrementTick+0x1c8>)
   1baa4:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1baa6:	68bb      	ldr	r3, [r7, #8]
   1baa8:	0018      	movs	r0, r3
   1baaa:	4b35      	ldr	r3, [pc, #212]	; (1bb80 <xTaskIncrementTick+0x1cc>)
   1baac:	4798      	blx	r3
   1baae:	0003      	movs	r3, r0
   1bab0:	001a      	movs	r2, r3
   1bab2:	4b34      	ldr	r3, [pc, #208]	; (1bb84 <xTaskIncrementTick+0x1d0>)
   1bab4:	881b      	ldrh	r3, [r3, #0]
   1bab6:	4013      	ands	r3, r2
   1bab8:	b29b      	uxth	r3, r3
   1baba:	2b00      	cmp	r3, #0
   1babc:	d008      	beq.n	1bad0 <xTaskIncrementTick+0x11c>
   1babe:	68bb      	ldr	r3, [r7, #8]
   1bac0:	0018      	movs	r0, r3
   1bac2:	4b31      	ldr	r3, [pc, #196]	; (1bb88 <xTaskIncrementTick+0x1d4>)
   1bac4:	4798      	blx	r3
   1bac6:	0003      	movs	r3, r0
   1bac8:	b2db      	uxtb	r3, r3
   1baca:	0018      	movs	r0, r3
   1bacc:	4b2f      	ldr	r3, [pc, #188]	; (1bb8c <xTaskIncrementTick+0x1d8>)
   1bace:	4798      	blx	r3
   1bad0:	68bb      	ldr	r3, [r7, #8]
   1bad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bad4:	4b2e      	ldr	r3, [pc, #184]	; (1bb90 <xTaskIncrementTick+0x1dc>)
   1bad6:	681b      	ldr	r3, [r3, #0]
   1bad8:	429a      	cmp	r2, r3
   1bada:	d903      	bls.n	1bae4 <xTaskIncrementTick+0x130>
   1badc:	68bb      	ldr	r3, [r7, #8]
   1bade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bae0:	4b2b      	ldr	r3, [pc, #172]	; (1bb90 <xTaskIncrementTick+0x1dc>)
   1bae2:	601a      	str	r2, [r3, #0]
   1bae4:	68bb      	ldr	r3, [r7, #8]
   1bae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bae8:	0013      	movs	r3, r2
   1baea:	009b      	lsls	r3, r3, #2
   1baec:	189b      	adds	r3, r3, r2
   1baee:	009b      	lsls	r3, r3, #2
   1baf0:	4a28      	ldr	r2, [pc, #160]	; (1bb94 <xTaskIncrementTick+0x1e0>)
   1baf2:	189a      	adds	r2, r3, r2
   1baf4:	68bb      	ldr	r3, [r7, #8]
   1baf6:	3304      	adds	r3, #4
   1baf8:	0019      	movs	r1, r3
   1bafa:	0010      	movs	r0, r2
   1bafc:	4b26      	ldr	r3, [pc, #152]	; (1bb98 <xTaskIncrementTick+0x1e4>)
   1bafe:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1bb00:	68bb      	ldr	r3, [r7, #8]
   1bb02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bb04:	4b25      	ldr	r3, [pc, #148]	; (1bb9c <xTaskIncrementTick+0x1e8>)
   1bb06:	681b      	ldr	r3, [r3, #0]
   1bb08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bb0a:	429a      	cmp	r2, r3
   1bb0c:	d39e      	bcc.n	1ba4c <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1bb0e:	2301      	movs	r3, #1
   1bb10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1bb12:	e79b      	b.n	1ba4c <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1bb14:	4b21      	ldr	r3, [pc, #132]	; (1bb9c <xTaskIncrementTick+0x1e8>)
   1bb16:	681b      	ldr	r3, [r3, #0]
   1bb18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bb1a:	491e      	ldr	r1, [pc, #120]	; (1bb94 <xTaskIncrementTick+0x1e0>)
   1bb1c:	0013      	movs	r3, r2
   1bb1e:	009b      	lsls	r3, r3, #2
   1bb20:	189b      	adds	r3, r3, r2
   1bb22:	009b      	lsls	r3, r3, #2
   1bb24:	585b      	ldr	r3, [r3, r1]
   1bb26:	2b01      	cmp	r3, #1
   1bb28:	d907      	bls.n	1bb3a <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1bb2a:	2301      	movs	r3, #1
   1bb2c:	617b      	str	r3, [r7, #20]
   1bb2e:	e004      	b.n	1bb3a <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1bb30:	4b08      	ldr	r3, [pc, #32]	; (1bb54 <xTaskIncrementTick+0x1a0>)
   1bb32:	681b      	ldr	r3, [r3, #0]
   1bb34:	1c5a      	adds	r2, r3, #1
   1bb36:	4b07      	ldr	r3, [pc, #28]	; (1bb54 <xTaskIncrementTick+0x1a0>)
   1bb38:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1bb3a:	4b19      	ldr	r3, [pc, #100]	; (1bba0 <xTaskIncrementTick+0x1ec>)
   1bb3c:	681b      	ldr	r3, [r3, #0]
   1bb3e:	2b00      	cmp	r3, #0
   1bb40:	d001      	beq.n	1bb46 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1bb42:	2301      	movs	r3, #1
   1bb44:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1bb46:	697b      	ldr	r3, [r7, #20]
}
   1bb48:	0018      	movs	r0, r3
   1bb4a:	46bd      	mov	sp, r7
   1bb4c:	b006      	add	sp, #24
   1bb4e:	bd80      	pop	{r7, pc}
   1bb50:	20004040 	.word	0x20004040
   1bb54:	20004028 	.word	0x20004028
   1bb58:	20000ba0 	.word	0x20000ba0
   1bb5c:	000191e1 	.word	0x000191e1
   1bb60:	2000401c 	.word	0x2000401c
   1bb64:	0001824d 	.word	0x0001824d
   1bb68:	20003fd0 	.word	0x20003fd0
   1bb6c:	20003fd4 	.word	0x20003fd4
   1bb70:	20004030 	.word	0x20004030
   1bb74:	0001c215 	.word	0x0001c215
   1bb78:	20004038 	.word	0x20004038
   1bb7c:	000193c7 	.word	0x000193c7
   1bb80:	0001754d 	.word	0x0001754d
   1bb84:	200000f8 	.word	0x200000f8
   1bb88:	0001752d 	.word	0x0001752d
   1bb8c:	00017cfd 	.word	0x00017cfd
   1bb90:	20004020 	.word	0x20004020
   1bb94:	20003f44 	.word	0x20003f44
   1bb98:	00019317 	.word	0x00019317
   1bb9c:	20003f40 	.word	0x20003f40
   1bba0:	2000402c 	.word	0x2000402c

0001bba4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1bba4:	b580      	push	{r7, lr}
   1bba6:	b082      	sub	sp, #8
   1bba8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1bbaa:	4b3a      	ldr	r3, [pc, #232]	; (1bc94 <vTaskSwitchContext+0xf0>)
   1bbac:	681b      	ldr	r3, [r3, #0]
   1bbae:	2b00      	cmp	r3, #0
   1bbb0:	d003      	beq.n	1bbba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1bbb2:	4b39      	ldr	r3, [pc, #228]	; (1bc98 <vTaskSwitchContext+0xf4>)
   1bbb4:	2201      	movs	r2, #1
   1bbb6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1bbb8:	e067      	b.n	1bc8a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1bbba:	4b37      	ldr	r3, [pc, #220]	; (1bc98 <vTaskSwitchContext+0xf4>)
   1bbbc:	2200      	movs	r2, #0
   1bbbe:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1bbc0:	4b36      	ldr	r3, [pc, #216]	; (1bc9c <vTaskSwitchContext+0xf8>)
   1bbc2:	681b      	ldr	r3, [r3, #0]
   1bbc4:	681a      	ldr	r2, [r3, #0]
   1bbc6:	4b35      	ldr	r3, [pc, #212]	; (1bc9c <vTaskSwitchContext+0xf8>)
   1bbc8:	681b      	ldr	r3, [r3, #0]
   1bbca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1bbcc:	429a      	cmp	r2, r3
   1bbce:	d808      	bhi.n	1bbe2 <vTaskSwitchContext+0x3e>
   1bbd0:	4b32      	ldr	r3, [pc, #200]	; (1bc9c <vTaskSwitchContext+0xf8>)
   1bbd2:	681a      	ldr	r2, [r3, #0]
   1bbd4:	4b31      	ldr	r3, [pc, #196]	; (1bc9c <vTaskSwitchContext+0xf8>)
   1bbd6:	681b      	ldr	r3, [r3, #0]
   1bbd8:	3334      	adds	r3, #52	; 0x34
   1bbda:	0019      	movs	r1, r3
   1bbdc:	0010      	movs	r0, r2
   1bbde:	4b30      	ldr	r3, [pc, #192]	; (1bca0 <vTaskSwitchContext+0xfc>)
   1bbe0:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1bbe2:	4b30      	ldr	r3, [pc, #192]	; (1bca4 <vTaskSwitchContext+0x100>)
   1bbe4:	681b      	ldr	r3, [r3, #0]
   1bbe6:	607b      	str	r3, [r7, #4]
   1bbe8:	e007      	b.n	1bbfa <vTaskSwitchContext+0x56>
   1bbea:	687b      	ldr	r3, [r7, #4]
   1bbec:	2b00      	cmp	r3, #0
   1bbee:	d101      	bne.n	1bbf4 <vTaskSwitchContext+0x50>
   1bbf0:	b672      	cpsid	i
   1bbf2:	e7fe      	b.n	1bbf2 <vTaskSwitchContext+0x4e>
   1bbf4:	687b      	ldr	r3, [r7, #4]
   1bbf6:	3b01      	subs	r3, #1
   1bbf8:	607b      	str	r3, [r7, #4]
   1bbfa:	492b      	ldr	r1, [pc, #172]	; (1bca8 <vTaskSwitchContext+0x104>)
   1bbfc:	687a      	ldr	r2, [r7, #4]
   1bbfe:	0013      	movs	r3, r2
   1bc00:	009b      	lsls	r3, r3, #2
   1bc02:	189b      	adds	r3, r3, r2
   1bc04:	009b      	lsls	r3, r3, #2
   1bc06:	585b      	ldr	r3, [r3, r1]
   1bc08:	2b00      	cmp	r3, #0
   1bc0a:	d0ee      	beq.n	1bbea <vTaskSwitchContext+0x46>
   1bc0c:	687a      	ldr	r2, [r7, #4]
   1bc0e:	0013      	movs	r3, r2
   1bc10:	009b      	lsls	r3, r3, #2
   1bc12:	189b      	adds	r3, r3, r2
   1bc14:	009b      	lsls	r3, r3, #2
   1bc16:	4a24      	ldr	r2, [pc, #144]	; (1bca8 <vTaskSwitchContext+0x104>)
   1bc18:	189b      	adds	r3, r3, r2
   1bc1a:	603b      	str	r3, [r7, #0]
   1bc1c:	683b      	ldr	r3, [r7, #0]
   1bc1e:	685b      	ldr	r3, [r3, #4]
   1bc20:	685a      	ldr	r2, [r3, #4]
   1bc22:	683b      	ldr	r3, [r7, #0]
   1bc24:	605a      	str	r2, [r3, #4]
   1bc26:	683b      	ldr	r3, [r7, #0]
   1bc28:	685a      	ldr	r2, [r3, #4]
   1bc2a:	683b      	ldr	r3, [r7, #0]
   1bc2c:	3308      	adds	r3, #8
   1bc2e:	429a      	cmp	r2, r3
   1bc30:	d104      	bne.n	1bc3c <vTaskSwitchContext+0x98>
   1bc32:	683b      	ldr	r3, [r7, #0]
   1bc34:	685b      	ldr	r3, [r3, #4]
   1bc36:	685a      	ldr	r2, [r3, #4]
   1bc38:	683b      	ldr	r3, [r7, #0]
   1bc3a:	605a      	str	r2, [r3, #4]
   1bc3c:	683b      	ldr	r3, [r7, #0]
   1bc3e:	685b      	ldr	r3, [r3, #4]
   1bc40:	68da      	ldr	r2, [r3, #12]
   1bc42:	4b16      	ldr	r3, [pc, #88]	; (1bc9c <vTaskSwitchContext+0xf8>)
   1bc44:	601a      	str	r2, [r3, #0]
   1bc46:	4b17      	ldr	r3, [pc, #92]	; (1bca4 <vTaskSwitchContext+0x100>)
   1bc48:	687a      	ldr	r2, [r7, #4]
   1bc4a:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1bc4c:	4b17      	ldr	r3, [pc, #92]	; (1bcac <vTaskSwitchContext+0x108>)
   1bc4e:	2201      	movs	r2, #1
   1bc50:	601a      	str	r2, [r3, #0]
   1bc52:	4b17      	ldr	r3, [pc, #92]	; (1bcb0 <vTaskSwitchContext+0x10c>)
   1bc54:	4798      	blx	r3
   1bc56:	0003      	movs	r3, r0
   1bc58:	0018      	movs	r0, r3
   1bc5a:	4b16      	ldr	r3, [pc, #88]	; (1bcb4 <vTaskSwitchContext+0x110>)
   1bc5c:	4798      	blx	r3
   1bc5e:	0003      	movs	r3, r0
   1bc60:	001a      	movs	r2, r3
   1bc62:	4b15      	ldr	r3, [pc, #84]	; (1bcb8 <vTaskSwitchContext+0x114>)
   1bc64:	881b      	ldrh	r3, [r3, #0]
   1bc66:	4013      	ands	r3, r2
   1bc68:	b29b      	uxth	r3, r3
   1bc6a:	2b00      	cmp	r3, #0
   1bc6c:	d00a      	beq.n	1bc84 <vTaskSwitchContext+0xe0>
   1bc6e:	4b10      	ldr	r3, [pc, #64]	; (1bcb0 <vTaskSwitchContext+0x10c>)
   1bc70:	4798      	blx	r3
   1bc72:	0003      	movs	r3, r0
   1bc74:	0018      	movs	r0, r3
   1bc76:	4b11      	ldr	r3, [pc, #68]	; (1bcbc <vTaskSwitchContext+0x118>)
   1bc78:	4798      	blx	r3
   1bc7a:	0003      	movs	r3, r0
   1bc7c:	b2db      	uxtb	r3, r3
   1bc7e:	0018      	movs	r0, r3
   1bc80:	4b0f      	ldr	r3, [pc, #60]	; (1bcc0 <vTaskSwitchContext+0x11c>)
   1bc82:	4798      	blx	r3
   1bc84:	4b09      	ldr	r3, [pc, #36]	; (1bcac <vTaskSwitchContext+0x108>)
   1bc86:	2202      	movs	r2, #2
   1bc88:	601a      	str	r2, [r3, #0]
}
   1bc8a:	46c0      	nop			; (mov r8, r8)
   1bc8c:	46bd      	mov	sp, r7
   1bc8e:	b002      	add	sp, #8
   1bc90:	bd80      	pop	{r7, pc}
   1bc92:	46c0      	nop			; (mov r8, r8)
   1bc94:	20004040 	.word	0x20004040
   1bc98:	2000402c 	.word	0x2000402c
   1bc9c:	20003f40 	.word	0x20003f40
   1bca0:	00031e05 	.word	0x00031e05
   1bca4:	20004020 	.word	0x20004020
   1bca8:	20003f44 	.word	0x20003f44
   1bcac:	20000bac 	.word	0x20000bac
   1bcb0:	000177e9 	.word	0x000177e9
   1bcb4:	0001754d 	.word	0x0001754d
   1bcb8:	200000f8 	.word	0x200000f8
   1bcbc:	0001752d 	.word	0x0001752d
   1bcc0:	00018349 	.word	0x00018349

0001bcc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1bcc4:	b580      	push	{r7, lr}
   1bcc6:	b082      	sub	sp, #8
   1bcc8:	af00      	add	r7, sp, #0
   1bcca:	6078      	str	r0, [r7, #4]
   1bccc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1bcce:	687b      	ldr	r3, [r7, #4]
   1bcd0:	2b00      	cmp	r3, #0
   1bcd2:	d101      	bne.n	1bcd8 <vTaskPlaceOnEventList+0x14>
   1bcd4:	b672      	cpsid	i
   1bcd6:	e7fe      	b.n	1bcd6 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1bcd8:	4b08      	ldr	r3, [pc, #32]	; (1bcfc <vTaskPlaceOnEventList+0x38>)
   1bcda:	681b      	ldr	r3, [r3, #0]
   1bcdc:	3318      	adds	r3, #24
   1bcde:	001a      	movs	r2, r3
   1bce0:	687b      	ldr	r3, [r7, #4]
   1bce2:	0011      	movs	r1, r2
   1bce4:	0018      	movs	r0, r3
   1bce6:	4b06      	ldr	r3, [pc, #24]	; (1bd00 <vTaskPlaceOnEventList+0x3c>)
   1bce8:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1bcea:	683b      	ldr	r3, [r7, #0]
   1bcec:	2101      	movs	r1, #1
   1bcee:	0018      	movs	r0, r3
   1bcf0:	4b04      	ldr	r3, [pc, #16]	; (1bd04 <vTaskPlaceOnEventList+0x40>)
   1bcf2:	4798      	blx	r3
}
   1bcf4:	46c0      	nop			; (mov r8, r8)
   1bcf6:	46bd      	mov	sp, r7
   1bcf8:	b002      	add	sp, #8
   1bcfa:	bd80      	pop	{r7, pc}
   1bcfc:	20003f40 	.word	0x20003f40
   1bd00:	0001935b 	.word	0x0001935b
   1bd04:	0001c769 	.word	0x0001c769

0001bd08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1bd08:	b580      	push	{r7, lr}
   1bd0a:	b084      	sub	sp, #16
   1bd0c:	af00      	add	r7, sp, #0
   1bd0e:	60f8      	str	r0, [r7, #12]
   1bd10:	60b9      	str	r1, [r7, #8]
   1bd12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1bd14:	68fb      	ldr	r3, [r7, #12]
   1bd16:	2b00      	cmp	r3, #0
   1bd18:	d101      	bne.n	1bd1e <vTaskPlaceOnEventListRestricted+0x16>
   1bd1a:	b672      	cpsid	i
   1bd1c:	e7fe      	b.n	1bd1c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1bd1e:	4b28      	ldr	r3, [pc, #160]	; (1bdc0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1bd20:	681b      	ldr	r3, [r3, #0]
   1bd22:	3318      	adds	r3, #24
   1bd24:	001a      	movs	r2, r3
   1bd26:	68fb      	ldr	r3, [r7, #12]
   1bd28:	0011      	movs	r1, r2
   1bd2a:	0018      	movs	r0, r3
   1bd2c:	4b25      	ldr	r3, [pc, #148]	; (1bdc4 <vTaskPlaceOnEventListRestricted+0xbc>)
   1bd2e:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1bd30:	687b      	ldr	r3, [r7, #4]
   1bd32:	2b00      	cmp	r3, #0
   1bd34:	d002      	beq.n	1bd3c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1bd36:	2301      	movs	r3, #1
   1bd38:	425b      	negs	r3, r3
   1bd3a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1bd3c:	4b20      	ldr	r3, [pc, #128]	; (1bdc0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1bd3e:	681b      	ldr	r3, [r3, #0]
   1bd40:	0018      	movs	r0, r3
   1bd42:	4b21      	ldr	r3, [pc, #132]	; (1bdc8 <vTaskPlaceOnEventListRestricted+0xc0>)
   1bd44:	4798      	blx	r3
   1bd46:	0003      	movs	r3, r0
   1bd48:	001a      	movs	r2, r3
   1bd4a:	4b20      	ldr	r3, [pc, #128]	; (1bdcc <vTaskPlaceOnEventListRestricted+0xc4>)
   1bd4c:	881b      	ldrh	r3, [r3, #0]
   1bd4e:	4013      	ands	r3, r2
   1bd50:	b29b      	uxth	r3, r3
   1bd52:	2b00      	cmp	r3, #0
   1bd54:	d011      	beq.n	1bd7a <vTaskPlaceOnEventListRestricted+0x72>
   1bd56:	4b1e      	ldr	r3, [pc, #120]	; (1bdd0 <vTaskPlaceOnEventListRestricted+0xc8>)
   1bd58:	681a      	ldr	r2, [r3, #0]
   1bd5a:	68bb      	ldr	r3, [r7, #8]
   1bd5c:	18d3      	adds	r3, r2, r3
   1bd5e:	0019      	movs	r1, r3
   1bd60:	2088      	movs	r0, #136	; 0x88
   1bd62:	4b1c      	ldr	r3, [pc, #112]	; (1bdd4 <vTaskPlaceOnEventListRestricted+0xcc>)
   1bd64:	4798      	blx	r3
   1bd66:	4b16      	ldr	r3, [pc, #88]	; (1bdc0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1bd68:	681b      	ldr	r3, [r3, #0]
   1bd6a:	0018      	movs	r0, r3
   1bd6c:	4b1a      	ldr	r3, [pc, #104]	; (1bdd8 <vTaskPlaceOnEventListRestricted+0xd0>)
   1bd6e:	4798      	blx	r3
   1bd70:	0003      	movs	r3, r0
   1bd72:	b2db      	uxtb	r3, r3
   1bd74:	0018      	movs	r0, r3
   1bd76:	4b19      	ldr	r3, [pc, #100]	; (1bddc <vTaskPlaceOnEventListRestricted+0xd4>)
   1bd78:	4798      	blx	r3
   1bd7a:	4b19      	ldr	r3, [pc, #100]	; (1bde0 <vTaskPlaceOnEventListRestricted+0xd8>)
   1bd7c:	4798      	blx	r3
   1bd7e:	0003      	movs	r3, r0
   1bd80:	0018      	movs	r0, r3
   1bd82:	4b11      	ldr	r3, [pc, #68]	; (1bdc8 <vTaskPlaceOnEventListRestricted+0xc0>)
   1bd84:	4798      	blx	r3
   1bd86:	0003      	movs	r3, r0
   1bd88:	001a      	movs	r2, r3
   1bd8a:	4b10      	ldr	r3, [pc, #64]	; (1bdcc <vTaskPlaceOnEventListRestricted+0xc4>)
   1bd8c:	881b      	ldrh	r3, [r3, #0]
   1bd8e:	4013      	ands	r3, r2
   1bd90:	b29b      	uxth	r3, r3
   1bd92:	2b00      	cmp	r3, #0
   1bd94:	d00a      	beq.n	1bdac <vTaskPlaceOnEventListRestricted+0xa4>
   1bd96:	4b12      	ldr	r3, [pc, #72]	; (1bde0 <vTaskPlaceOnEventListRestricted+0xd8>)
   1bd98:	4798      	blx	r3
   1bd9a:	0003      	movs	r3, r0
   1bd9c:	0018      	movs	r0, r3
   1bd9e:	4b0e      	ldr	r3, [pc, #56]	; (1bdd8 <vTaskPlaceOnEventListRestricted+0xd0>)
   1bda0:	4798      	blx	r3
   1bda2:	0003      	movs	r3, r0
   1bda4:	b2db      	uxtb	r3, r3
   1bda6:	0018      	movs	r0, r3
   1bda8:	4b0c      	ldr	r3, [pc, #48]	; (1bddc <vTaskPlaceOnEventListRestricted+0xd4>)
   1bdaa:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1bdac:	687a      	ldr	r2, [r7, #4]
   1bdae:	68bb      	ldr	r3, [r7, #8]
   1bdb0:	0011      	movs	r1, r2
   1bdb2:	0018      	movs	r0, r3
   1bdb4:	4b0b      	ldr	r3, [pc, #44]	; (1bde4 <vTaskPlaceOnEventListRestricted+0xdc>)
   1bdb6:	4798      	blx	r3
	}
   1bdb8:	46c0      	nop			; (mov r8, r8)
   1bdba:	46bd      	mov	sp, r7
   1bdbc:	b004      	add	sp, #16
   1bdbe:	bd80      	pop	{r7, pc}
   1bdc0:	20003f40 	.word	0x20003f40
   1bdc4:	00019317 	.word	0x00019317
   1bdc8:	0001754d 	.word	0x0001754d
   1bdcc:	200000f8 	.word	0x200000f8
   1bdd0:	2000401c 	.word	0x2000401c
   1bdd4:	0001824d 	.word	0x0001824d
   1bdd8:	0001752d 	.word	0x0001752d
   1bddc:	000186dd 	.word	0x000186dd
   1bde0:	000177e9 	.word	0x000177e9
   1bde4:	0001c769 	.word	0x0001c769

0001bde8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1bde8:	b580      	push	{r7, lr}
   1bdea:	b084      	sub	sp, #16
   1bdec:	af00      	add	r7, sp, #0
   1bdee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1bdf0:	687b      	ldr	r3, [r7, #4]
   1bdf2:	68db      	ldr	r3, [r3, #12]
   1bdf4:	68db      	ldr	r3, [r3, #12]
   1bdf6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1bdf8:	68bb      	ldr	r3, [r7, #8]
   1bdfa:	2b00      	cmp	r3, #0
   1bdfc:	d101      	bne.n	1be02 <xTaskRemoveFromEventList+0x1a>
   1bdfe:	b672      	cpsid	i
   1be00:	e7fe      	b.n	1be00 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1be02:	68bb      	ldr	r3, [r7, #8]
   1be04:	3318      	adds	r3, #24
   1be06:	0018      	movs	r0, r3
   1be08:	4b2a      	ldr	r3, [pc, #168]	; (1beb4 <xTaskRemoveFromEventList+0xcc>)
   1be0a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1be0c:	4b2a      	ldr	r3, [pc, #168]	; (1beb8 <xTaskRemoveFromEventList+0xd0>)
   1be0e:	681b      	ldr	r3, [r3, #0]
   1be10:	2b00      	cmp	r3, #0
   1be12:	d132      	bne.n	1be7a <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1be14:	68bb      	ldr	r3, [r7, #8]
   1be16:	3304      	adds	r3, #4
   1be18:	0018      	movs	r0, r3
   1be1a:	4b26      	ldr	r3, [pc, #152]	; (1beb4 <xTaskRemoveFromEventList+0xcc>)
   1be1c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1be1e:	68bb      	ldr	r3, [r7, #8]
   1be20:	0018      	movs	r0, r3
   1be22:	4b26      	ldr	r3, [pc, #152]	; (1bebc <xTaskRemoveFromEventList+0xd4>)
   1be24:	4798      	blx	r3
   1be26:	0003      	movs	r3, r0
   1be28:	001a      	movs	r2, r3
   1be2a:	4b25      	ldr	r3, [pc, #148]	; (1bec0 <xTaskRemoveFromEventList+0xd8>)
   1be2c:	881b      	ldrh	r3, [r3, #0]
   1be2e:	4013      	ands	r3, r2
   1be30:	b29b      	uxth	r3, r3
   1be32:	2b00      	cmp	r3, #0
   1be34:	d008      	beq.n	1be48 <xTaskRemoveFromEventList+0x60>
   1be36:	68bb      	ldr	r3, [r7, #8]
   1be38:	0018      	movs	r0, r3
   1be3a:	4b22      	ldr	r3, [pc, #136]	; (1bec4 <xTaskRemoveFromEventList+0xdc>)
   1be3c:	4798      	blx	r3
   1be3e:	0003      	movs	r3, r0
   1be40:	b2db      	uxtb	r3, r3
   1be42:	0018      	movs	r0, r3
   1be44:	4b20      	ldr	r3, [pc, #128]	; (1bec8 <xTaskRemoveFromEventList+0xe0>)
   1be46:	4798      	blx	r3
   1be48:	68bb      	ldr	r3, [r7, #8]
   1be4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1be4c:	4b1f      	ldr	r3, [pc, #124]	; (1becc <xTaskRemoveFromEventList+0xe4>)
   1be4e:	681b      	ldr	r3, [r3, #0]
   1be50:	429a      	cmp	r2, r3
   1be52:	d903      	bls.n	1be5c <xTaskRemoveFromEventList+0x74>
   1be54:	68bb      	ldr	r3, [r7, #8]
   1be56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1be58:	4b1c      	ldr	r3, [pc, #112]	; (1becc <xTaskRemoveFromEventList+0xe4>)
   1be5a:	601a      	str	r2, [r3, #0]
   1be5c:	68bb      	ldr	r3, [r7, #8]
   1be5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1be60:	0013      	movs	r3, r2
   1be62:	009b      	lsls	r3, r3, #2
   1be64:	189b      	adds	r3, r3, r2
   1be66:	009b      	lsls	r3, r3, #2
   1be68:	4a19      	ldr	r2, [pc, #100]	; (1bed0 <xTaskRemoveFromEventList+0xe8>)
   1be6a:	189a      	adds	r2, r3, r2
   1be6c:	68bb      	ldr	r3, [r7, #8]
   1be6e:	3304      	adds	r3, #4
   1be70:	0019      	movs	r1, r3
   1be72:	0010      	movs	r0, r2
   1be74:	4b17      	ldr	r3, [pc, #92]	; (1bed4 <xTaskRemoveFromEventList+0xec>)
   1be76:	4798      	blx	r3
   1be78:	e007      	b.n	1be8a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1be7a:	68bb      	ldr	r3, [r7, #8]
   1be7c:	3318      	adds	r3, #24
   1be7e:	001a      	movs	r2, r3
   1be80:	4b15      	ldr	r3, [pc, #84]	; (1bed8 <xTaskRemoveFromEventList+0xf0>)
   1be82:	0011      	movs	r1, r2
   1be84:	0018      	movs	r0, r3
   1be86:	4b13      	ldr	r3, [pc, #76]	; (1bed4 <xTaskRemoveFromEventList+0xec>)
   1be88:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1be8a:	68bb      	ldr	r3, [r7, #8]
   1be8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1be8e:	4b13      	ldr	r3, [pc, #76]	; (1bedc <xTaskRemoveFromEventList+0xf4>)
   1be90:	681b      	ldr	r3, [r3, #0]
   1be92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1be94:	429a      	cmp	r2, r3
   1be96:	d905      	bls.n	1bea4 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1be98:	2301      	movs	r3, #1
   1be9a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1be9c:	4b10      	ldr	r3, [pc, #64]	; (1bee0 <xTaskRemoveFromEventList+0xf8>)
   1be9e:	2201      	movs	r2, #1
   1bea0:	601a      	str	r2, [r3, #0]
   1bea2:	e001      	b.n	1bea8 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1bea4:	2300      	movs	r3, #0
   1bea6:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1bea8:	68fb      	ldr	r3, [r7, #12]
}
   1beaa:	0018      	movs	r0, r3
   1beac:	46bd      	mov	sp, r7
   1beae:	b004      	add	sp, #16
   1beb0:	bd80      	pop	{r7, pc}
   1beb2:	46c0      	nop			; (mov r8, r8)
   1beb4:	000193c7 	.word	0x000193c7
   1beb8:	20004040 	.word	0x20004040
   1bebc:	0001754d 	.word	0x0001754d
   1bec0:	200000f8 	.word	0x200000f8
   1bec4:	0001752d 	.word	0x0001752d
   1bec8:	00017cfd 	.word	0x00017cfd
   1becc:	20004020 	.word	0x20004020
   1bed0:	20003f44 	.word	0x20003f44
   1bed4:	00019317 	.word	0x00019317
   1bed8:	20003fd8 	.word	0x20003fd8
   1bedc:	20003f40 	.word	0x20003f40
   1bee0:	2000402c 	.word	0x2000402c

0001bee4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1bee4:	b580      	push	{r7, lr}
   1bee6:	b082      	sub	sp, #8
   1bee8:	af00      	add	r7, sp, #0
   1beea:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1beec:	687b      	ldr	r3, [r7, #4]
   1beee:	2b00      	cmp	r3, #0
   1bef0:	d101      	bne.n	1bef6 <vTaskSetTimeOutState+0x12>
   1bef2:	b672      	cpsid	i
   1bef4:	e7fe      	b.n	1bef4 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1bef6:	4b08      	ldr	r3, [pc, #32]	; (1bf18 <vTaskSetTimeOutState+0x34>)
   1bef8:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1befa:	4b08      	ldr	r3, [pc, #32]	; (1bf1c <vTaskSetTimeOutState+0x38>)
   1befc:	681a      	ldr	r2, [r3, #0]
   1befe:	687b      	ldr	r3, [r7, #4]
   1bf00:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1bf02:	4b07      	ldr	r3, [pc, #28]	; (1bf20 <vTaskSetTimeOutState+0x3c>)
   1bf04:	681a      	ldr	r2, [r3, #0]
   1bf06:	687b      	ldr	r3, [r7, #4]
   1bf08:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1bf0a:	4b06      	ldr	r3, [pc, #24]	; (1bf24 <vTaskSetTimeOutState+0x40>)
   1bf0c:	4798      	blx	r3
}
   1bf0e:	46c0      	nop			; (mov r8, r8)
   1bf10:	46bd      	mov	sp, r7
   1bf12:	b002      	add	sp, #8
   1bf14:	bd80      	pop	{r7, pc}
   1bf16:	46c0      	nop			; (mov r8, r8)
   1bf18:	00019559 	.word	0x00019559
   1bf1c:	20004030 	.word	0x20004030
   1bf20:	2000401c 	.word	0x2000401c
   1bf24:	0001957d 	.word	0x0001957d

0001bf28 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1bf28:	b580      	push	{r7, lr}
   1bf2a:	b082      	sub	sp, #8
   1bf2c:	af00      	add	r7, sp, #0
   1bf2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1bf30:	4b05      	ldr	r3, [pc, #20]	; (1bf48 <vTaskInternalSetTimeOutState+0x20>)
   1bf32:	681a      	ldr	r2, [r3, #0]
   1bf34:	687b      	ldr	r3, [r7, #4]
   1bf36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1bf38:	4b04      	ldr	r3, [pc, #16]	; (1bf4c <vTaskInternalSetTimeOutState+0x24>)
   1bf3a:	681a      	ldr	r2, [r3, #0]
   1bf3c:	687b      	ldr	r3, [r7, #4]
   1bf3e:	605a      	str	r2, [r3, #4]
}
   1bf40:	46c0      	nop			; (mov r8, r8)
   1bf42:	46bd      	mov	sp, r7
   1bf44:	b002      	add	sp, #8
   1bf46:	bd80      	pop	{r7, pc}
   1bf48:	20004030 	.word	0x20004030
   1bf4c:	2000401c 	.word	0x2000401c

0001bf50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1bf50:	b580      	push	{r7, lr}
   1bf52:	b086      	sub	sp, #24
   1bf54:	af00      	add	r7, sp, #0
   1bf56:	6078      	str	r0, [r7, #4]
   1bf58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1bf5a:	687b      	ldr	r3, [r7, #4]
   1bf5c:	2b00      	cmp	r3, #0
   1bf5e:	d101      	bne.n	1bf64 <xTaskCheckForTimeOut+0x14>
   1bf60:	b672      	cpsid	i
   1bf62:	e7fe      	b.n	1bf62 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1bf64:	683b      	ldr	r3, [r7, #0]
   1bf66:	2b00      	cmp	r3, #0
   1bf68:	d101      	bne.n	1bf6e <xTaskCheckForTimeOut+0x1e>
   1bf6a:	b672      	cpsid	i
   1bf6c:	e7fe      	b.n	1bf6c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1bf6e:	4b1e      	ldr	r3, [pc, #120]	; (1bfe8 <xTaskCheckForTimeOut+0x98>)
   1bf70:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1bf72:	4b1e      	ldr	r3, [pc, #120]	; (1bfec <xTaskCheckForTimeOut+0x9c>)
   1bf74:	681b      	ldr	r3, [r3, #0]
   1bf76:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1bf78:	687b      	ldr	r3, [r7, #4]
   1bf7a:	685b      	ldr	r3, [r3, #4]
   1bf7c:	693a      	ldr	r2, [r7, #16]
   1bf7e:	1ad3      	subs	r3, r2, r3
   1bf80:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1bf82:	683b      	ldr	r3, [r7, #0]
   1bf84:	681b      	ldr	r3, [r3, #0]
   1bf86:	3301      	adds	r3, #1
   1bf88:	d102      	bne.n	1bf90 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1bf8a:	2300      	movs	r3, #0
   1bf8c:	617b      	str	r3, [r7, #20]
   1bf8e:	e024      	b.n	1bfda <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1bf90:	687b      	ldr	r3, [r7, #4]
   1bf92:	681a      	ldr	r2, [r3, #0]
   1bf94:	4b16      	ldr	r3, [pc, #88]	; (1bff0 <xTaskCheckForTimeOut+0xa0>)
   1bf96:	681b      	ldr	r3, [r3, #0]
   1bf98:	429a      	cmp	r2, r3
   1bf9a:	d007      	beq.n	1bfac <xTaskCheckForTimeOut+0x5c>
   1bf9c:	687b      	ldr	r3, [r7, #4]
   1bf9e:	685a      	ldr	r2, [r3, #4]
   1bfa0:	693b      	ldr	r3, [r7, #16]
   1bfa2:	429a      	cmp	r2, r3
   1bfa4:	d802      	bhi.n	1bfac <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1bfa6:	2301      	movs	r3, #1
   1bfa8:	617b      	str	r3, [r7, #20]
   1bfaa:	e016      	b.n	1bfda <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1bfac:	683b      	ldr	r3, [r7, #0]
   1bfae:	681a      	ldr	r2, [r3, #0]
   1bfb0:	68fb      	ldr	r3, [r7, #12]
   1bfb2:	429a      	cmp	r2, r3
   1bfb4:	d90c      	bls.n	1bfd0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1bfb6:	683b      	ldr	r3, [r7, #0]
   1bfb8:	681a      	ldr	r2, [r3, #0]
   1bfba:	68fb      	ldr	r3, [r7, #12]
   1bfbc:	1ad2      	subs	r2, r2, r3
   1bfbe:	683b      	ldr	r3, [r7, #0]
   1bfc0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1bfc2:	687b      	ldr	r3, [r7, #4]
   1bfc4:	0018      	movs	r0, r3
   1bfc6:	4b0b      	ldr	r3, [pc, #44]	; (1bff4 <xTaskCheckForTimeOut+0xa4>)
   1bfc8:	4798      	blx	r3
			xReturn = pdFALSE;
   1bfca:	2300      	movs	r3, #0
   1bfcc:	617b      	str	r3, [r7, #20]
   1bfce:	e004      	b.n	1bfda <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1bfd0:	683b      	ldr	r3, [r7, #0]
   1bfd2:	2200      	movs	r2, #0
   1bfd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1bfd6:	2301      	movs	r3, #1
   1bfd8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1bfda:	4b07      	ldr	r3, [pc, #28]	; (1bff8 <xTaskCheckForTimeOut+0xa8>)
   1bfdc:	4798      	blx	r3

	return xReturn;
   1bfde:	697b      	ldr	r3, [r7, #20]
}
   1bfe0:	0018      	movs	r0, r3
   1bfe2:	46bd      	mov	sp, r7
   1bfe4:	b006      	add	sp, #24
   1bfe6:	bd80      	pop	{r7, pc}
   1bfe8:	00019559 	.word	0x00019559
   1bfec:	2000401c 	.word	0x2000401c
   1bff0:	20004030 	.word	0x20004030
   1bff4:	0001bf29 	.word	0x0001bf29
   1bff8:	0001957d 	.word	0x0001957d

0001bffc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1bffc:	b580      	push	{r7, lr}
   1bffe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1c000:	4b02      	ldr	r3, [pc, #8]	; (1c00c <vTaskMissedYield+0x10>)
   1c002:	2201      	movs	r2, #1
   1c004:	601a      	str	r2, [r3, #0]
}
   1c006:	46c0      	nop			; (mov r8, r8)
   1c008:	46bd      	mov	sp, r7
   1c00a:	bd80      	pop	{r7, pc}
   1c00c:	2000402c 	.word	0x2000402c

0001c010 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1c010:	b580      	push	{r7, lr}
   1c012:	b084      	sub	sp, #16
   1c014:	af00      	add	r7, sp, #0
   1c016:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1c018:	687b      	ldr	r3, [r7, #4]
   1c01a:	2b00      	cmp	r3, #0
   1c01c:	d005      	beq.n	1c02a <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1c01e:	687b      	ldr	r3, [r7, #4]
   1c020:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1c022:	68bb      	ldr	r3, [r7, #8]
   1c024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c026:	60fb      	str	r3, [r7, #12]
   1c028:	e001      	b.n	1c02e <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1c02a:	2300      	movs	r3, #0
   1c02c:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1c02e:	68fb      	ldr	r3, [r7, #12]
	}
   1c030:	0018      	movs	r0, r3
   1c032:	46bd      	mov	sp, r7
   1c034:	b004      	add	sp, #16
   1c036:	bd80      	pop	{r7, pc}

0001c038 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1c038:	b580      	push	{r7, lr}
   1c03a:	b084      	sub	sp, #16
   1c03c:	af00      	add	r7, sp, #0
   1c03e:	6078      	str	r0, [r7, #4]
   1c040:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1c042:	687b      	ldr	r3, [r7, #4]
   1c044:	2b00      	cmp	r3, #0
   1c046:	d004      	beq.n	1c052 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1c048:	687b      	ldr	r3, [r7, #4]
   1c04a:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1c04c:	68fb      	ldr	r3, [r7, #12]
   1c04e:	683a      	ldr	r2, [r7, #0]
   1c050:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1c052:	46c0      	nop			; (mov r8, r8)
   1c054:	46bd      	mov	sp, r7
   1c056:	b004      	add	sp, #16
   1c058:	bd80      	pop	{r7, pc}
	...

0001c05c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1c05c:	b580      	push	{r7, lr}
   1c05e:	b082      	sub	sp, #8
   1c060:	af00      	add	r7, sp, #0
   1c062:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1c064:	4b04      	ldr	r3, [pc, #16]	; (1c078 <prvIdleTask+0x1c>)
   1c066:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1c068:	4b04      	ldr	r3, [pc, #16]	; (1c07c <prvIdleTask+0x20>)
   1c06a:	681b      	ldr	r3, [r3, #0]
   1c06c:	2b01      	cmp	r3, #1
   1c06e:	d9f9      	bls.n	1c064 <prvIdleTask+0x8>
			{
				taskYIELD();
   1c070:	4b03      	ldr	r3, [pc, #12]	; (1c080 <prvIdleTask+0x24>)
   1c072:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1c074:	e7f6      	b.n	1c064 <prvIdleTask+0x8>
   1c076:	46c0      	nop			; (mov r8, r8)
   1c078:	0001c111 	.word	0x0001c111
   1c07c:	20003f44 	.word	0x20003f44
   1c080:	00019541 	.word	0x00019541

0001c084 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1c084:	b580      	push	{r7, lr}
   1c086:	b082      	sub	sp, #8
   1c088:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1c08a:	2300      	movs	r3, #0
   1c08c:	607b      	str	r3, [r7, #4]
   1c08e:	e00c      	b.n	1c0aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1c090:	687a      	ldr	r2, [r7, #4]
   1c092:	0013      	movs	r3, r2
   1c094:	009b      	lsls	r3, r3, #2
   1c096:	189b      	adds	r3, r3, r2
   1c098:	009b      	lsls	r3, r3, #2
   1c09a:	4a14      	ldr	r2, [pc, #80]	; (1c0ec <prvInitialiseTaskLists+0x68>)
   1c09c:	189b      	adds	r3, r3, r2
   1c09e:	0018      	movs	r0, r3
   1c0a0:	4b13      	ldr	r3, [pc, #76]	; (1c0f0 <prvInitialiseTaskLists+0x6c>)
   1c0a2:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1c0a4:	687b      	ldr	r3, [r7, #4]
   1c0a6:	3301      	adds	r3, #1
   1c0a8:	607b      	str	r3, [r7, #4]
   1c0aa:	687b      	ldr	r3, [r7, #4]
   1c0ac:	2b04      	cmp	r3, #4
   1c0ae:	d9ef      	bls.n	1c090 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1c0b0:	4b10      	ldr	r3, [pc, #64]	; (1c0f4 <prvInitialiseTaskLists+0x70>)
   1c0b2:	0018      	movs	r0, r3
   1c0b4:	4b0e      	ldr	r3, [pc, #56]	; (1c0f0 <prvInitialiseTaskLists+0x6c>)
   1c0b6:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1c0b8:	4b0f      	ldr	r3, [pc, #60]	; (1c0f8 <prvInitialiseTaskLists+0x74>)
   1c0ba:	0018      	movs	r0, r3
   1c0bc:	4b0c      	ldr	r3, [pc, #48]	; (1c0f0 <prvInitialiseTaskLists+0x6c>)
   1c0be:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1c0c0:	4b0e      	ldr	r3, [pc, #56]	; (1c0fc <prvInitialiseTaskLists+0x78>)
   1c0c2:	0018      	movs	r0, r3
   1c0c4:	4b0a      	ldr	r3, [pc, #40]	; (1c0f0 <prvInitialiseTaskLists+0x6c>)
   1c0c6:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1c0c8:	4b0d      	ldr	r3, [pc, #52]	; (1c100 <prvInitialiseTaskLists+0x7c>)
   1c0ca:	0018      	movs	r0, r3
   1c0cc:	4b08      	ldr	r3, [pc, #32]	; (1c0f0 <prvInitialiseTaskLists+0x6c>)
   1c0ce:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1c0d0:	4b0c      	ldr	r3, [pc, #48]	; (1c104 <prvInitialiseTaskLists+0x80>)
   1c0d2:	0018      	movs	r0, r3
   1c0d4:	4b06      	ldr	r3, [pc, #24]	; (1c0f0 <prvInitialiseTaskLists+0x6c>)
   1c0d6:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1c0d8:	4b0b      	ldr	r3, [pc, #44]	; (1c108 <prvInitialiseTaskLists+0x84>)
   1c0da:	4a06      	ldr	r2, [pc, #24]	; (1c0f4 <prvInitialiseTaskLists+0x70>)
   1c0dc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1c0de:	4b0b      	ldr	r3, [pc, #44]	; (1c10c <prvInitialiseTaskLists+0x88>)
   1c0e0:	4a05      	ldr	r2, [pc, #20]	; (1c0f8 <prvInitialiseTaskLists+0x74>)
   1c0e2:	601a      	str	r2, [r3, #0]
}
   1c0e4:	46c0      	nop			; (mov r8, r8)
   1c0e6:	46bd      	mov	sp, r7
   1c0e8:	b002      	add	sp, #8
   1c0ea:	bd80      	pop	{r7, pc}
   1c0ec:	20003f44 	.word	0x20003f44
   1c0f0:	000192c5 	.word	0x000192c5
   1c0f4:	20003fa8 	.word	0x20003fa8
   1c0f8:	20003fbc 	.word	0x20003fbc
   1c0fc:	20003fd8 	.word	0x20003fd8
   1c100:	20003fec 	.word	0x20003fec
   1c104:	20004004 	.word	0x20004004
   1c108:	20003fd0 	.word	0x20003fd0
   1c10c:	20003fd4 	.word	0x20003fd4

0001c110 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1c110:	b580      	push	{r7, lr}
   1c112:	b082      	sub	sp, #8
   1c114:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1c116:	e01a      	b.n	1c14e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1c118:	4b11      	ldr	r3, [pc, #68]	; (1c160 <prvCheckTasksWaitingTermination+0x50>)
   1c11a:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1c11c:	4b11      	ldr	r3, [pc, #68]	; (1c164 <prvCheckTasksWaitingTermination+0x54>)
   1c11e:	68db      	ldr	r3, [r3, #12]
   1c120:	68db      	ldr	r3, [r3, #12]
   1c122:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1c124:	687b      	ldr	r3, [r7, #4]
   1c126:	3304      	adds	r3, #4
   1c128:	0018      	movs	r0, r3
   1c12a:	4b0f      	ldr	r3, [pc, #60]	; (1c168 <prvCheckTasksWaitingTermination+0x58>)
   1c12c:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1c12e:	4b0f      	ldr	r3, [pc, #60]	; (1c16c <prvCheckTasksWaitingTermination+0x5c>)
   1c130:	681b      	ldr	r3, [r3, #0]
   1c132:	1e5a      	subs	r2, r3, #1
   1c134:	4b0d      	ldr	r3, [pc, #52]	; (1c16c <prvCheckTasksWaitingTermination+0x5c>)
   1c136:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1c138:	4b0d      	ldr	r3, [pc, #52]	; (1c170 <prvCheckTasksWaitingTermination+0x60>)
   1c13a:	681b      	ldr	r3, [r3, #0]
   1c13c:	1e5a      	subs	r2, r3, #1
   1c13e:	4b0c      	ldr	r3, [pc, #48]	; (1c170 <prvCheckTasksWaitingTermination+0x60>)
   1c140:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1c142:	4b0c      	ldr	r3, [pc, #48]	; (1c174 <prvCheckTasksWaitingTermination+0x64>)
   1c144:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1c146:	687b      	ldr	r3, [r7, #4]
   1c148:	0018      	movs	r0, r3
   1c14a:	4b0b      	ldr	r3, [pc, #44]	; (1c178 <prvCheckTasksWaitingTermination+0x68>)
   1c14c:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1c14e:	4b08      	ldr	r3, [pc, #32]	; (1c170 <prvCheckTasksWaitingTermination+0x60>)
   1c150:	681b      	ldr	r3, [r3, #0]
   1c152:	2b00      	cmp	r3, #0
   1c154:	d1e0      	bne.n	1c118 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1c156:	46c0      	nop			; (mov r8, r8)
   1c158:	46bd      	mov	sp, r7
   1c15a:	b002      	add	sp, #8
   1c15c:	bd80      	pop	{r7, pc}
   1c15e:	46c0      	nop			; (mov r8, r8)
   1c160:	00019559 	.word	0x00019559
   1c164:	20003fec 	.word	0x20003fec
   1c168:	000193c7 	.word	0x000193c7
   1c16c:	20004018 	.word	0x20004018
   1c170:	20004000 	.word	0x20004000
   1c174:	0001957d 	.word	0x0001957d
   1c178:	0001c1ed 	.word	0x0001c1ed

0001c17c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1c17c:	b580      	push	{r7, lr}
   1c17e:	b084      	sub	sp, #16
   1c180:	af00      	add	r7, sp, #0
   1c182:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1c184:	2300      	movs	r3, #0
   1c186:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1c188:	e005      	b.n	1c196 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1c18a:	687b      	ldr	r3, [r7, #4]
   1c18c:	3301      	adds	r3, #1
   1c18e:	607b      	str	r3, [r7, #4]
			ulCount++;
   1c190:	68fb      	ldr	r3, [r7, #12]
   1c192:	3301      	adds	r3, #1
   1c194:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1c196:	687b      	ldr	r3, [r7, #4]
   1c198:	781b      	ldrb	r3, [r3, #0]
   1c19a:	2ba5      	cmp	r3, #165	; 0xa5
   1c19c:	d0f5      	beq.n	1c18a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1c19e:	68fb      	ldr	r3, [r7, #12]
   1c1a0:	089b      	lsrs	r3, r3, #2
   1c1a2:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1c1a4:	68fb      	ldr	r3, [r7, #12]
   1c1a6:	b29b      	uxth	r3, r3
	}
   1c1a8:	0018      	movs	r0, r3
   1c1aa:	46bd      	mov	sp, r7
   1c1ac:	b004      	add	sp, #16
   1c1ae:	bd80      	pop	{r7, pc}

0001c1b0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1c1b0:	b580      	push	{r7, lr}
   1c1b2:	b086      	sub	sp, #24
   1c1b4:	af00      	add	r7, sp, #0
   1c1b6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1c1b8:	687b      	ldr	r3, [r7, #4]
   1c1ba:	2b00      	cmp	r3, #0
   1c1bc:	d102      	bne.n	1c1c4 <uxTaskGetStackHighWaterMark+0x14>
   1c1be:	4b09      	ldr	r3, [pc, #36]	; (1c1e4 <uxTaskGetStackHighWaterMark+0x34>)
   1c1c0:	681b      	ldr	r3, [r3, #0]
   1c1c2:	e000      	b.n	1c1c6 <uxTaskGetStackHighWaterMark+0x16>
   1c1c4:	687b      	ldr	r3, [r7, #4]
   1c1c6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1c1c8:	697b      	ldr	r3, [r7, #20]
   1c1ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c1cc:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1c1ce:	693b      	ldr	r3, [r7, #16]
   1c1d0:	0018      	movs	r0, r3
   1c1d2:	4b05      	ldr	r3, [pc, #20]	; (1c1e8 <uxTaskGetStackHighWaterMark+0x38>)
   1c1d4:	4798      	blx	r3
   1c1d6:	0003      	movs	r3, r0
   1c1d8:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1c1da:	68fb      	ldr	r3, [r7, #12]
	}
   1c1dc:	0018      	movs	r0, r3
   1c1de:	46bd      	mov	sp, r7
   1c1e0:	b006      	add	sp, #24
   1c1e2:	bd80      	pop	{r7, pc}
   1c1e4:	20003f40 	.word	0x20003f40
   1c1e8:	0001c17d 	.word	0x0001c17d

0001c1ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1c1ec:	b580      	push	{r7, lr}
   1c1ee:	b082      	sub	sp, #8
   1c1f0:	af00      	add	r7, sp, #0
   1c1f2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1c1f4:	687b      	ldr	r3, [r7, #4]
   1c1f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c1f8:	0018      	movs	r0, r3
   1c1fa:	4b05      	ldr	r3, [pc, #20]	; (1c210 <prvDeleteTCB+0x24>)
   1c1fc:	4798      	blx	r3
			vPortFree( pxTCB );
   1c1fe:	687b      	ldr	r3, [r7, #4]
   1c200:	0018      	movs	r0, r3
   1c202:	4b03      	ldr	r3, [pc, #12]	; (1c210 <prvDeleteTCB+0x24>)
   1c204:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1c206:	46c0      	nop			; (mov r8, r8)
   1c208:	46bd      	mov	sp, r7
   1c20a:	b002      	add	sp, #8
   1c20c:	bd80      	pop	{r7, pc}
   1c20e:	46c0      	nop			; (mov r8, r8)
   1c210:	00019755 	.word	0x00019755

0001c214 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1c214:	b580      	push	{r7, lr}
   1c216:	b082      	sub	sp, #8
   1c218:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1c21a:	4b0e      	ldr	r3, [pc, #56]	; (1c254 <prvResetNextTaskUnblockTime+0x40>)
   1c21c:	681b      	ldr	r3, [r3, #0]
   1c21e:	681b      	ldr	r3, [r3, #0]
   1c220:	2b00      	cmp	r3, #0
   1c222:	d101      	bne.n	1c228 <prvResetNextTaskUnblockTime+0x14>
   1c224:	2301      	movs	r3, #1
   1c226:	e000      	b.n	1c22a <prvResetNextTaskUnblockTime+0x16>
   1c228:	2300      	movs	r3, #0
   1c22a:	2b00      	cmp	r3, #0
   1c22c:	d004      	beq.n	1c238 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1c22e:	4b0a      	ldr	r3, [pc, #40]	; (1c258 <prvResetNextTaskUnblockTime+0x44>)
   1c230:	2201      	movs	r2, #1
   1c232:	4252      	negs	r2, r2
   1c234:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1c236:	e008      	b.n	1c24a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1c238:	4b06      	ldr	r3, [pc, #24]	; (1c254 <prvResetNextTaskUnblockTime+0x40>)
   1c23a:	681b      	ldr	r3, [r3, #0]
   1c23c:	68db      	ldr	r3, [r3, #12]
   1c23e:	68db      	ldr	r3, [r3, #12]
   1c240:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1c242:	687b      	ldr	r3, [r7, #4]
   1c244:	685a      	ldr	r2, [r3, #4]
   1c246:	4b04      	ldr	r3, [pc, #16]	; (1c258 <prvResetNextTaskUnblockTime+0x44>)
   1c248:	601a      	str	r2, [r3, #0]
}
   1c24a:	46c0      	nop			; (mov r8, r8)
   1c24c:	46bd      	mov	sp, r7
   1c24e:	b002      	add	sp, #8
   1c250:	bd80      	pop	{r7, pc}
   1c252:	46c0      	nop			; (mov r8, r8)
   1c254:	20003fd0 	.word	0x20003fd0
   1c258:	20004038 	.word	0x20004038

0001c25c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1c25c:	b580      	push	{r7, lr}
   1c25e:	b082      	sub	sp, #8
   1c260:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1c262:	4b04      	ldr	r3, [pc, #16]	; (1c274 <xTaskGetCurrentTaskHandle+0x18>)
   1c264:	681b      	ldr	r3, [r3, #0]
   1c266:	607b      	str	r3, [r7, #4]

		return xReturn;
   1c268:	687b      	ldr	r3, [r7, #4]
	}
   1c26a:	0018      	movs	r0, r3
   1c26c:	46bd      	mov	sp, r7
   1c26e:	b002      	add	sp, #8
   1c270:	bd80      	pop	{r7, pc}
   1c272:	46c0      	nop			; (mov r8, r8)
   1c274:	20003f40 	.word	0x20003f40

0001c278 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1c278:	b580      	push	{r7, lr}
   1c27a:	b082      	sub	sp, #8
   1c27c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1c27e:	4b0a      	ldr	r3, [pc, #40]	; (1c2a8 <xTaskGetSchedulerState+0x30>)
   1c280:	681b      	ldr	r3, [r3, #0]
   1c282:	2b00      	cmp	r3, #0
   1c284:	d102      	bne.n	1c28c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1c286:	2301      	movs	r3, #1
   1c288:	607b      	str	r3, [r7, #4]
   1c28a:	e008      	b.n	1c29e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c28c:	4b07      	ldr	r3, [pc, #28]	; (1c2ac <xTaskGetSchedulerState+0x34>)
   1c28e:	681b      	ldr	r3, [r3, #0]
   1c290:	2b00      	cmp	r3, #0
   1c292:	d102      	bne.n	1c29a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1c294:	2302      	movs	r3, #2
   1c296:	607b      	str	r3, [r7, #4]
   1c298:	e001      	b.n	1c29e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1c29a:	2300      	movs	r3, #0
   1c29c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1c29e:	687b      	ldr	r3, [r7, #4]
	}
   1c2a0:	0018      	movs	r0, r3
   1c2a2:	46bd      	mov	sp, r7
   1c2a4:	b002      	add	sp, #8
   1c2a6:	bd80      	pop	{r7, pc}
   1c2a8:	20004024 	.word	0x20004024
   1c2ac:	20004040 	.word	0x20004040

0001c2b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1c2b0:	b590      	push	{r4, r7, lr}
   1c2b2:	b085      	sub	sp, #20
   1c2b4:	af00      	add	r7, sp, #0
   1c2b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1c2b8:	687b      	ldr	r3, [r7, #4]
   1c2ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1c2bc:	2300      	movs	r3, #0
   1c2be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1c2c0:	687b      	ldr	r3, [r7, #4]
   1c2c2:	2b00      	cmp	r3, #0
   1c2c4:	d100      	bne.n	1c2c8 <xTaskPriorityInherit+0x18>
   1c2c6:	e09d      	b.n	1c404 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1c2c8:	68bb      	ldr	r3, [r7, #8]
   1c2ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c2cc:	4b50      	ldr	r3, [pc, #320]	; (1c410 <xTaskPriorityInherit+0x160>)
   1c2ce:	681b      	ldr	r3, [r3, #0]
   1c2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c2d2:	429a      	cmp	r2, r3
   1c2d4:	d300      	bcc.n	1c2d8 <xTaskPriorityInherit+0x28>
   1c2d6:	e08c      	b.n	1c3f2 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1c2d8:	68bb      	ldr	r3, [r7, #8]
   1c2da:	699b      	ldr	r3, [r3, #24]
   1c2dc:	2b00      	cmp	r3, #0
   1c2de:	db06      	blt.n	1c2ee <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c2e0:	4b4b      	ldr	r3, [pc, #300]	; (1c410 <xTaskPriorityInherit+0x160>)
   1c2e2:	681b      	ldr	r3, [r3, #0]
   1c2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c2e6:	2205      	movs	r2, #5
   1c2e8:	1ad2      	subs	r2, r2, r3
   1c2ea:	68bb      	ldr	r3, [r7, #8]
   1c2ec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1c2ee:	68bb      	ldr	r3, [r7, #8]
   1c2f0:	6959      	ldr	r1, [r3, #20]
   1c2f2:	68bb      	ldr	r3, [r7, #8]
   1c2f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c2f6:	0013      	movs	r3, r2
   1c2f8:	009b      	lsls	r3, r3, #2
   1c2fa:	189b      	adds	r3, r3, r2
   1c2fc:	009b      	lsls	r3, r3, #2
   1c2fe:	4a45      	ldr	r2, [pc, #276]	; (1c414 <xTaskPriorityInherit+0x164>)
   1c300:	189b      	adds	r3, r3, r2
   1c302:	4299      	cmp	r1, r3
   1c304:	d101      	bne.n	1c30a <xTaskPriorityInherit+0x5a>
   1c306:	2301      	movs	r3, #1
   1c308:	e000      	b.n	1c30c <xTaskPriorityInherit+0x5c>
   1c30a:	2300      	movs	r3, #0
   1c30c:	2b00      	cmp	r3, #0
   1c30e:	d037      	beq.n	1c380 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c310:	68bb      	ldr	r3, [r7, #8]
   1c312:	3304      	adds	r3, #4
   1c314:	0018      	movs	r0, r3
   1c316:	4b40      	ldr	r3, [pc, #256]	; (1c418 <xTaskPriorityInherit+0x168>)
   1c318:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1c31a:	4b3d      	ldr	r3, [pc, #244]	; (1c410 <xTaskPriorityInherit+0x160>)
   1c31c:	681b      	ldr	r3, [r3, #0]
   1c31e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c320:	68bb      	ldr	r3, [r7, #8]
   1c322:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1c324:	68bb      	ldr	r3, [r7, #8]
   1c326:	0018      	movs	r0, r3
   1c328:	4b3c      	ldr	r3, [pc, #240]	; (1c41c <xTaskPriorityInherit+0x16c>)
   1c32a:	4798      	blx	r3
   1c32c:	0003      	movs	r3, r0
   1c32e:	001a      	movs	r2, r3
   1c330:	4b3b      	ldr	r3, [pc, #236]	; (1c420 <xTaskPriorityInherit+0x170>)
   1c332:	881b      	ldrh	r3, [r3, #0]
   1c334:	4013      	ands	r3, r2
   1c336:	b29b      	uxth	r3, r3
   1c338:	2b00      	cmp	r3, #0
   1c33a:	d008      	beq.n	1c34e <xTaskPriorityInherit+0x9e>
   1c33c:	68bb      	ldr	r3, [r7, #8]
   1c33e:	0018      	movs	r0, r3
   1c340:	4b38      	ldr	r3, [pc, #224]	; (1c424 <xTaskPriorityInherit+0x174>)
   1c342:	4798      	blx	r3
   1c344:	0003      	movs	r3, r0
   1c346:	b2db      	uxtb	r3, r3
   1c348:	0018      	movs	r0, r3
   1c34a:	4b37      	ldr	r3, [pc, #220]	; (1c428 <xTaskPriorityInherit+0x178>)
   1c34c:	4798      	blx	r3
   1c34e:	68bb      	ldr	r3, [r7, #8]
   1c350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c352:	4b36      	ldr	r3, [pc, #216]	; (1c42c <xTaskPriorityInherit+0x17c>)
   1c354:	681b      	ldr	r3, [r3, #0]
   1c356:	429a      	cmp	r2, r3
   1c358:	d903      	bls.n	1c362 <xTaskPriorityInherit+0xb2>
   1c35a:	68bb      	ldr	r3, [r7, #8]
   1c35c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c35e:	4b33      	ldr	r3, [pc, #204]	; (1c42c <xTaskPriorityInherit+0x17c>)
   1c360:	601a      	str	r2, [r3, #0]
   1c362:	68bb      	ldr	r3, [r7, #8]
   1c364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c366:	0013      	movs	r3, r2
   1c368:	009b      	lsls	r3, r3, #2
   1c36a:	189b      	adds	r3, r3, r2
   1c36c:	009b      	lsls	r3, r3, #2
   1c36e:	4a29      	ldr	r2, [pc, #164]	; (1c414 <xTaskPriorityInherit+0x164>)
   1c370:	189a      	adds	r2, r3, r2
   1c372:	68bb      	ldr	r3, [r7, #8]
   1c374:	3304      	adds	r3, #4
   1c376:	0019      	movs	r1, r3
   1c378:	0010      	movs	r0, r2
   1c37a:	4b2d      	ldr	r3, [pc, #180]	; (1c430 <xTaskPriorityInherit+0x180>)
   1c37c:	4798      	blx	r3
   1c37e:	e004      	b.n	1c38a <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1c380:	4b23      	ldr	r3, [pc, #140]	; (1c410 <xTaskPriorityInherit+0x160>)
   1c382:	681b      	ldr	r3, [r3, #0]
   1c384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c386:	68bb      	ldr	r3, [r7, #8]
   1c388:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1c38a:	68bb      	ldr	r3, [r7, #8]
   1c38c:	0018      	movs	r0, r3
   1c38e:	4b23      	ldr	r3, [pc, #140]	; (1c41c <xTaskPriorityInherit+0x16c>)
   1c390:	4798      	blx	r3
   1c392:	0003      	movs	r3, r0
   1c394:	001a      	movs	r2, r3
   1c396:	4b22      	ldr	r3, [pc, #136]	; (1c420 <xTaskPriorityInherit+0x170>)
   1c398:	881b      	ldrh	r3, [r3, #0]
   1c39a:	4013      	ands	r3, r2
   1c39c:	b29b      	uxth	r3, r3
   1c39e:	2b00      	cmp	r3, #0
   1c3a0:	d024      	beq.n	1c3ec <xTaskPriorityInherit+0x13c>
   1c3a2:	68bb      	ldr	r3, [r7, #8]
   1c3a4:	0018      	movs	r0, r3
   1c3a6:	4b1f      	ldr	r3, [pc, #124]	; (1c424 <xTaskPriorityInherit+0x174>)
   1c3a8:	4798      	blx	r3
   1c3aa:	0003      	movs	r3, r0
   1c3ac:	b2db      	uxtb	r3, r3
   1c3ae:	001c      	movs	r4, r3
   1c3b0:	68bb      	ldr	r3, [r7, #8]
   1c3b2:	0018      	movs	r0, r3
   1c3b4:	4b1b      	ldr	r3, [pc, #108]	; (1c424 <xTaskPriorityInherit+0x174>)
   1c3b6:	4798      	blx	r3
   1c3b8:	0003      	movs	r3, r0
   1c3ba:	b2db      	uxtb	r3, r3
   1c3bc:	0019      	movs	r1, r3
   1c3be:	2003      	movs	r0, #3
   1c3c0:	4b1c      	ldr	r3, [pc, #112]	; (1c434 <xTaskPriorityInherit+0x184>)
   1c3c2:	4798      	blx	r3
   1c3c4:	0003      	movs	r3, r0
   1c3c6:	0022      	movs	r2, r4
   1c3c8:	2103      	movs	r1, #3
   1c3ca:	208e      	movs	r0, #142	; 0x8e
   1c3cc:	4c1a      	ldr	r4, [pc, #104]	; (1c438 <xTaskPriorityInherit+0x188>)
   1c3ce:	47a0      	blx	r4
   1c3d0:	68bb      	ldr	r3, [r7, #8]
   1c3d2:	0018      	movs	r0, r3
   1c3d4:	4b13      	ldr	r3, [pc, #76]	; (1c424 <xTaskPriorityInherit+0x174>)
   1c3d6:	4798      	blx	r3
   1c3d8:	0003      	movs	r3, r0
   1c3da:	b2d9      	uxtb	r1, r3
   1c3dc:	4b0c      	ldr	r3, [pc, #48]	; (1c410 <xTaskPriorityInherit+0x160>)
   1c3de:	681b      	ldr	r3, [r3, #0]
   1c3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c3e2:	b2db      	uxtb	r3, r3
   1c3e4:	001a      	movs	r2, r3
   1c3e6:	2003      	movs	r0, #3
   1c3e8:	4b14      	ldr	r3, [pc, #80]	; (1c43c <xTaskPriorityInherit+0x18c>)
   1c3ea:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1c3ec:	2301      	movs	r3, #1
   1c3ee:	60fb      	str	r3, [r7, #12]
   1c3f0:	e008      	b.n	1c404 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1c3f2:	68bb      	ldr	r3, [r7, #8]
   1c3f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1c3f6:	4b06      	ldr	r3, [pc, #24]	; (1c410 <xTaskPriorityInherit+0x160>)
   1c3f8:	681b      	ldr	r3, [r3, #0]
   1c3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c3fc:	429a      	cmp	r2, r3
   1c3fe:	d201      	bcs.n	1c404 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1c400:	2301      	movs	r3, #1
   1c402:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1c404:	68fb      	ldr	r3, [r7, #12]
	}
   1c406:	0018      	movs	r0, r3
   1c408:	46bd      	mov	sp, r7
   1c40a:	b005      	add	sp, #20
   1c40c:	bd90      	pop	{r4, r7, pc}
   1c40e:	46c0      	nop			; (mov r8, r8)
   1c410:	20003f40 	.word	0x20003f40
   1c414:	20003f44 	.word	0x20003f44
   1c418:	000193c7 	.word	0x000193c7
   1c41c:	0001754d 	.word	0x0001754d
   1c420:	200000f8 	.word	0x200000f8
   1c424:	0001752d 	.word	0x0001752d
   1c428:	00017cfd 	.word	0x00017cfd
   1c42c:	20004020 	.word	0x20004020
   1c430:	00019317 	.word	0x00019317
   1c434:	00018505 	.word	0x00018505
   1c438:	00018075 	.word	0x00018075
   1c43c:	00018461 	.word	0x00018461

0001c440 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1c440:	b590      	push	{r4, r7, lr}
   1c442:	b085      	sub	sp, #20
   1c444:	af00      	add	r7, sp, #0
   1c446:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1c448:	687b      	ldr	r3, [r7, #4]
   1c44a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1c44c:	2300      	movs	r3, #0
   1c44e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1c450:	687b      	ldr	r3, [r7, #4]
   1c452:	2b00      	cmp	r3, #0
   1c454:	d100      	bne.n	1c458 <xTaskPriorityDisinherit+0x18>
   1c456:	e089      	b.n	1c56c <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1c458:	4b47      	ldr	r3, [pc, #284]	; (1c578 <xTaskPriorityDisinherit+0x138>)
   1c45a:	681b      	ldr	r3, [r3, #0]
   1c45c:	68ba      	ldr	r2, [r7, #8]
   1c45e:	429a      	cmp	r2, r3
   1c460:	d001      	beq.n	1c466 <xTaskPriorityDisinherit+0x26>
   1c462:	b672      	cpsid	i
   1c464:	e7fe      	b.n	1c464 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1c466:	68bb      	ldr	r3, [r7, #8]
   1c468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c46a:	2b00      	cmp	r3, #0
   1c46c:	d101      	bne.n	1c472 <xTaskPriorityDisinherit+0x32>
   1c46e:	b672      	cpsid	i
   1c470:	e7fe      	b.n	1c470 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1c472:	68bb      	ldr	r3, [r7, #8]
   1c474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c476:	1e5a      	subs	r2, r3, #1
   1c478:	68bb      	ldr	r3, [r7, #8]
   1c47a:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1c47c:	68bb      	ldr	r3, [r7, #8]
   1c47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c480:	68bb      	ldr	r3, [r7, #8]
   1c482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c484:	429a      	cmp	r2, r3
   1c486:	d071      	beq.n	1c56c <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1c488:	68bb      	ldr	r3, [r7, #8]
   1c48a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c48c:	2b00      	cmp	r3, #0
   1c48e:	d16d      	bne.n	1c56c <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c490:	68bb      	ldr	r3, [r7, #8]
   1c492:	3304      	adds	r3, #4
   1c494:	0018      	movs	r0, r3
   1c496:	4b39      	ldr	r3, [pc, #228]	; (1c57c <xTaskPriorityDisinherit+0x13c>)
   1c498:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1c49a:	68bb      	ldr	r3, [r7, #8]
   1c49c:	0018      	movs	r0, r3
   1c49e:	4b38      	ldr	r3, [pc, #224]	; (1c580 <xTaskPriorityDisinherit+0x140>)
   1c4a0:	4798      	blx	r3
   1c4a2:	0003      	movs	r3, r0
   1c4a4:	001a      	movs	r2, r3
   1c4a6:	4b37      	ldr	r3, [pc, #220]	; (1c584 <xTaskPriorityDisinherit+0x144>)
   1c4a8:	881b      	ldrh	r3, [r3, #0]
   1c4aa:	4013      	ands	r3, r2
   1c4ac:	b29b      	uxth	r3, r3
   1c4ae:	2b00      	cmp	r3, #0
   1c4b0:	d023      	beq.n	1c4fa <xTaskPriorityDisinherit+0xba>
   1c4b2:	68bb      	ldr	r3, [r7, #8]
   1c4b4:	0018      	movs	r0, r3
   1c4b6:	4b34      	ldr	r3, [pc, #208]	; (1c588 <xTaskPriorityDisinherit+0x148>)
   1c4b8:	4798      	blx	r3
   1c4ba:	0003      	movs	r3, r0
   1c4bc:	b2db      	uxtb	r3, r3
   1c4be:	001c      	movs	r4, r3
   1c4c0:	68bb      	ldr	r3, [r7, #8]
   1c4c2:	0018      	movs	r0, r3
   1c4c4:	4b30      	ldr	r3, [pc, #192]	; (1c588 <xTaskPriorityDisinherit+0x148>)
   1c4c6:	4798      	blx	r3
   1c4c8:	0003      	movs	r3, r0
   1c4ca:	b2db      	uxtb	r3, r3
   1c4cc:	0019      	movs	r1, r3
   1c4ce:	2003      	movs	r0, #3
   1c4d0:	4b2e      	ldr	r3, [pc, #184]	; (1c58c <xTaskPriorityDisinherit+0x14c>)
   1c4d2:	4798      	blx	r3
   1c4d4:	0003      	movs	r3, r0
   1c4d6:	0022      	movs	r2, r4
   1c4d8:	2103      	movs	r1, #3
   1c4da:	208f      	movs	r0, #143	; 0x8f
   1c4dc:	4c2c      	ldr	r4, [pc, #176]	; (1c590 <xTaskPriorityDisinherit+0x150>)
   1c4de:	47a0      	blx	r4
   1c4e0:	68bb      	ldr	r3, [r7, #8]
   1c4e2:	0018      	movs	r0, r3
   1c4e4:	4b28      	ldr	r3, [pc, #160]	; (1c588 <xTaskPriorityDisinherit+0x148>)
   1c4e6:	4798      	blx	r3
   1c4e8:	0003      	movs	r3, r0
   1c4ea:	b2d9      	uxtb	r1, r3
   1c4ec:	68bb      	ldr	r3, [r7, #8]
   1c4ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c4f0:	b2db      	uxtb	r3, r3
   1c4f2:	001a      	movs	r2, r3
   1c4f4:	2003      	movs	r0, #3
   1c4f6:	4b27      	ldr	r3, [pc, #156]	; (1c594 <xTaskPriorityDisinherit+0x154>)
   1c4f8:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1c4fa:	68bb      	ldr	r3, [r7, #8]
   1c4fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1c4fe:	68bb      	ldr	r3, [r7, #8]
   1c500:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c502:	68bb      	ldr	r3, [r7, #8]
   1c504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c506:	2205      	movs	r2, #5
   1c508:	1ad2      	subs	r2, r2, r3
   1c50a:	68bb      	ldr	r3, [r7, #8]
   1c50c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1c50e:	68bb      	ldr	r3, [r7, #8]
   1c510:	0018      	movs	r0, r3
   1c512:	4b1b      	ldr	r3, [pc, #108]	; (1c580 <xTaskPriorityDisinherit+0x140>)
   1c514:	4798      	blx	r3
   1c516:	0003      	movs	r3, r0
   1c518:	001a      	movs	r2, r3
   1c51a:	4b1a      	ldr	r3, [pc, #104]	; (1c584 <xTaskPriorityDisinherit+0x144>)
   1c51c:	881b      	ldrh	r3, [r3, #0]
   1c51e:	4013      	ands	r3, r2
   1c520:	b29b      	uxth	r3, r3
   1c522:	2b00      	cmp	r3, #0
   1c524:	d008      	beq.n	1c538 <xTaskPriorityDisinherit+0xf8>
   1c526:	68bb      	ldr	r3, [r7, #8]
   1c528:	0018      	movs	r0, r3
   1c52a:	4b17      	ldr	r3, [pc, #92]	; (1c588 <xTaskPriorityDisinherit+0x148>)
   1c52c:	4798      	blx	r3
   1c52e:	0003      	movs	r3, r0
   1c530:	b2db      	uxtb	r3, r3
   1c532:	0018      	movs	r0, r3
   1c534:	4b18      	ldr	r3, [pc, #96]	; (1c598 <xTaskPriorityDisinherit+0x158>)
   1c536:	4798      	blx	r3
   1c538:	68bb      	ldr	r3, [r7, #8]
   1c53a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c53c:	4b17      	ldr	r3, [pc, #92]	; (1c59c <xTaskPriorityDisinherit+0x15c>)
   1c53e:	681b      	ldr	r3, [r3, #0]
   1c540:	429a      	cmp	r2, r3
   1c542:	d903      	bls.n	1c54c <xTaskPriorityDisinherit+0x10c>
   1c544:	68bb      	ldr	r3, [r7, #8]
   1c546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c548:	4b14      	ldr	r3, [pc, #80]	; (1c59c <xTaskPriorityDisinherit+0x15c>)
   1c54a:	601a      	str	r2, [r3, #0]
   1c54c:	68bb      	ldr	r3, [r7, #8]
   1c54e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c550:	0013      	movs	r3, r2
   1c552:	009b      	lsls	r3, r3, #2
   1c554:	189b      	adds	r3, r3, r2
   1c556:	009b      	lsls	r3, r3, #2
   1c558:	4a11      	ldr	r2, [pc, #68]	; (1c5a0 <xTaskPriorityDisinherit+0x160>)
   1c55a:	189a      	adds	r2, r3, r2
   1c55c:	68bb      	ldr	r3, [r7, #8]
   1c55e:	3304      	adds	r3, #4
   1c560:	0019      	movs	r1, r3
   1c562:	0010      	movs	r0, r2
   1c564:	4b0f      	ldr	r3, [pc, #60]	; (1c5a4 <xTaskPriorityDisinherit+0x164>)
   1c566:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1c568:	2301      	movs	r3, #1
   1c56a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1c56c:	68fb      	ldr	r3, [r7, #12]
	}
   1c56e:	0018      	movs	r0, r3
   1c570:	46bd      	mov	sp, r7
   1c572:	b005      	add	sp, #20
   1c574:	bd90      	pop	{r4, r7, pc}
   1c576:	46c0      	nop			; (mov r8, r8)
   1c578:	20003f40 	.word	0x20003f40
   1c57c:	000193c7 	.word	0x000193c7
   1c580:	0001754d 	.word	0x0001754d
   1c584:	200000f8 	.word	0x200000f8
   1c588:	0001752d 	.word	0x0001752d
   1c58c:	00018505 	.word	0x00018505
   1c590:	00018075 	.word	0x00018075
   1c594:	00018461 	.word	0x00018461
   1c598:	00017cfd 	.word	0x00017cfd
   1c59c:	20004020 	.word	0x20004020
   1c5a0:	20003f44 	.word	0x20003f44
   1c5a4:	00019317 	.word	0x00019317

0001c5a8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1c5a8:	b590      	push	{r4, r7, lr}
   1c5aa:	b087      	sub	sp, #28
   1c5ac:	af00      	add	r7, sp, #0
   1c5ae:	6078      	str	r0, [r7, #4]
   1c5b0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1c5b2:	687b      	ldr	r3, [r7, #4]
   1c5b4:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1c5b6:	2301      	movs	r3, #1
   1c5b8:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1c5ba:	687b      	ldr	r3, [r7, #4]
   1c5bc:	2b00      	cmp	r3, #0
   1c5be:	d100      	bne.n	1c5c2 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1c5c0:	e0a4      	b.n	1c70c <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1c5c2:	693b      	ldr	r3, [r7, #16]
   1c5c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c5c6:	2b00      	cmp	r3, #0
   1c5c8:	d101      	bne.n	1c5ce <vTaskPriorityDisinheritAfterTimeout+0x26>
   1c5ca:	b672      	cpsid	i
   1c5cc:	e7fe      	b.n	1c5cc <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1c5ce:	693b      	ldr	r3, [r7, #16]
   1c5d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1c5d2:	683b      	ldr	r3, [r7, #0]
   1c5d4:	429a      	cmp	r2, r3
   1c5d6:	d202      	bcs.n	1c5de <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1c5d8:	683b      	ldr	r3, [r7, #0]
   1c5da:	617b      	str	r3, [r7, #20]
   1c5dc:	e002      	b.n	1c5e4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1c5de:	693b      	ldr	r3, [r7, #16]
   1c5e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c5e2:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1c5e4:	693b      	ldr	r3, [r7, #16]
   1c5e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c5e8:	697b      	ldr	r3, [r7, #20]
   1c5ea:	429a      	cmp	r2, r3
   1c5ec:	d100      	bne.n	1c5f0 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1c5ee:	e08d      	b.n	1c70c <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1c5f0:	693b      	ldr	r3, [r7, #16]
   1c5f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1c5f4:	68fb      	ldr	r3, [r7, #12]
   1c5f6:	429a      	cmp	r2, r3
   1c5f8:	d000      	beq.n	1c5fc <vTaskPriorityDisinheritAfterTimeout+0x54>
   1c5fa:	e087      	b.n	1c70c <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1c5fc:	4b45      	ldr	r3, [pc, #276]	; (1c714 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1c5fe:	681b      	ldr	r3, [r3, #0]
   1c600:	693a      	ldr	r2, [r7, #16]
   1c602:	429a      	cmp	r2, r3
   1c604:	d101      	bne.n	1c60a <vTaskPriorityDisinheritAfterTimeout+0x62>
   1c606:	b672      	cpsid	i
   1c608:	e7fe      	b.n	1c608 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1c60a:	693b      	ldr	r3, [r7, #16]
   1c60c:	0018      	movs	r0, r3
   1c60e:	4b42      	ldr	r3, [pc, #264]	; (1c718 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1c610:	4798      	blx	r3
   1c612:	0003      	movs	r3, r0
   1c614:	001a      	movs	r2, r3
   1c616:	4b41      	ldr	r3, [pc, #260]	; (1c71c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1c618:	881b      	ldrh	r3, [r3, #0]
   1c61a:	4013      	ands	r3, r2
   1c61c:	b29b      	uxth	r3, r3
   1c61e:	2b00      	cmp	r3, #0
   1c620:	d023      	beq.n	1c66a <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1c622:	693b      	ldr	r3, [r7, #16]
   1c624:	0018      	movs	r0, r3
   1c626:	4b3e      	ldr	r3, [pc, #248]	; (1c720 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1c628:	4798      	blx	r3
   1c62a:	0003      	movs	r3, r0
   1c62c:	b2db      	uxtb	r3, r3
   1c62e:	001c      	movs	r4, r3
   1c630:	693b      	ldr	r3, [r7, #16]
   1c632:	0018      	movs	r0, r3
   1c634:	4b3a      	ldr	r3, [pc, #232]	; (1c720 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1c636:	4798      	blx	r3
   1c638:	0003      	movs	r3, r0
   1c63a:	b2db      	uxtb	r3, r3
   1c63c:	0019      	movs	r1, r3
   1c63e:	2003      	movs	r0, #3
   1c640:	4b38      	ldr	r3, [pc, #224]	; (1c724 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1c642:	4798      	blx	r3
   1c644:	0003      	movs	r3, r0
   1c646:	0022      	movs	r2, r4
   1c648:	2103      	movs	r1, #3
   1c64a:	208f      	movs	r0, #143	; 0x8f
   1c64c:	4c36      	ldr	r4, [pc, #216]	; (1c728 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1c64e:	47a0      	blx	r4
   1c650:	693b      	ldr	r3, [r7, #16]
   1c652:	0018      	movs	r0, r3
   1c654:	4b32      	ldr	r3, [pc, #200]	; (1c720 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1c656:	4798      	blx	r3
   1c658:	0003      	movs	r3, r0
   1c65a:	b2d9      	uxtb	r1, r3
   1c65c:	693b      	ldr	r3, [r7, #16]
   1c65e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c660:	b2db      	uxtb	r3, r3
   1c662:	001a      	movs	r2, r3
   1c664:	2003      	movs	r0, #3
   1c666:	4b31      	ldr	r3, [pc, #196]	; (1c72c <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1c668:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1c66a:	693b      	ldr	r3, [r7, #16]
   1c66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c66e:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1c670:	693b      	ldr	r3, [r7, #16]
   1c672:	697a      	ldr	r2, [r7, #20]
   1c674:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1c676:	693b      	ldr	r3, [r7, #16]
   1c678:	699b      	ldr	r3, [r3, #24]
   1c67a:	2b00      	cmp	r3, #0
   1c67c:	db04      	blt.n	1c688 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c67e:	697b      	ldr	r3, [r7, #20]
   1c680:	2205      	movs	r2, #5
   1c682:	1ad2      	subs	r2, r2, r3
   1c684:	693b      	ldr	r3, [r7, #16]
   1c686:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1c688:	693b      	ldr	r3, [r7, #16]
   1c68a:	6959      	ldr	r1, [r3, #20]
   1c68c:	68ba      	ldr	r2, [r7, #8]
   1c68e:	0013      	movs	r3, r2
   1c690:	009b      	lsls	r3, r3, #2
   1c692:	189b      	adds	r3, r3, r2
   1c694:	009b      	lsls	r3, r3, #2
   1c696:	4a26      	ldr	r2, [pc, #152]	; (1c730 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1c698:	189b      	adds	r3, r3, r2
   1c69a:	4299      	cmp	r1, r3
   1c69c:	d101      	bne.n	1c6a2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1c69e:	2301      	movs	r3, #1
   1c6a0:	e000      	b.n	1c6a4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1c6a2:	2300      	movs	r3, #0
   1c6a4:	2b00      	cmp	r3, #0
   1c6a6:	d031      	beq.n	1c70c <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c6a8:	693b      	ldr	r3, [r7, #16]
   1c6aa:	3304      	adds	r3, #4
   1c6ac:	0018      	movs	r0, r3
   1c6ae:	4b21      	ldr	r3, [pc, #132]	; (1c734 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1c6b0:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1c6b2:	693b      	ldr	r3, [r7, #16]
   1c6b4:	0018      	movs	r0, r3
   1c6b6:	4b18      	ldr	r3, [pc, #96]	; (1c718 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1c6b8:	4798      	blx	r3
   1c6ba:	0003      	movs	r3, r0
   1c6bc:	001a      	movs	r2, r3
   1c6be:	4b17      	ldr	r3, [pc, #92]	; (1c71c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1c6c0:	881b      	ldrh	r3, [r3, #0]
   1c6c2:	4013      	ands	r3, r2
   1c6c4:	b29b      	uxth	r3, r3
   1c6c6:	2b00      	cmp	r3, #0
   1c6c8:	d008      	beq.n	1c6dc <vTaskPriorityDisinheritAfterTimeout+0x134>
   1c6ca:	693b      	ldr	r3, [r7, #16]
   1c6cc:	0018      	movs	r0, r3
   1c6ce:	4b14      	ldr	r3, [pc, #80]	; (1c720 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1c6d0:	4798      	blx	r3
   1c6d2:	0003      	movs	r3, r0
   1c6d4:	b2db      	uxtb	r3, r3
   1c6d6:	0018      	movs	r0, r3
   1c6d8:	4b17      	ldr	r3, [pc, #92]	; (1c738 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1c6da:	4798      	blx	r3
   1c6dc:	693b      	ldr	r3, [r7, #16]
   1c6de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c6e0:	4b16      	ldr	r3, [pc, #88]	; (1c73c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1c6e2:	681b      	ldr	r3, [r3, #0]
   1c6e4:	429a      	cmp	r2, r3
   1c6e6:	d903      	bls.n	1c6f0 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1c6e8:	693b      	ldr	r3, [r7, #16]
   1c6ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c6ec:	4b13      	ldr	r3, [pc, #76]	; (1c73c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1c6ee:	601a      	str	r2, [r3, #0]
   1c6f0:	693b      	ldr	r3, [r7, #16]
   1c6f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c6f4:	0013      	movs	r3, r2
   1c6f6:	009b      	lsls	r3, r3, #2
   1c6f8:	189b      	adds	r3, r3, r2
   1c6fa:	009b      	lsls	r3, r3, #2
   1c6fc:	4a0c      	ldr	r2, [pc, #48]	; (1c730 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1c6fe:	189a      	adds	r2, r3, r2
   1c700:	693b      	ldr	r3, [r7, #16]
   1c702:	3304      	adds	r3, #4
   1c704:	0019      	movs	r1, r3
   1c706:	0010      	movs	r0, r2
   1c708:	4b0d      	ldr	r3, [pc, #52]	; (1c740 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1c70a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1c70c:	46c0      	nop			; (mov r8, r8)
   1c70e:	46bd      	mov	sp, r7
   1c710:	b007      	add	sp, #28
   1c712:	bd90      	pop	{r4, r7, pc}
   1c714:	20003f40 	.word	0x20003f40
   1c718:	0001754d 	.word	0x0001754d
   1c71c:	200000f8 	.word	0x200000f8
   1c720:	0001752d 	.word	0x0001752d
   1c724:	00018505 	.word	0x00018505
   1c728:	00018075 	.word	0x00018075
   1c72c:	00018461 	.word	0x00018461
   1c730:	20003f44 	.word	0x20003f44
   1c734:	000193c7 	.word	0x000193c7
   1c738:	00017cfd 	.word	0x00017cfd
   1c73c:	20004020 	.word	0x20004020
   1c740:	00019317 	.word	0x00019317

0001c744 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1c744:	b580      	push	{r7, lr}
   1c746:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1c748:	4b06      	ldr	r3, [pc, #24]	; (1c764 <pvTaskIncrementMutexHeldCount+0x20>)
   1c74a:	681b      	ldr	r3, [r3, #0]
   1c74c:	2b00      	cmp	r3, #0
   1c74e:	d004      	beq.n	1c75a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1c750:	4b04      	ldr	r3, [pc, #16]	; (1c764 <pvTaskIncrementMutexHeldCount+0x20>)
   1c752:	681b      	ldr	r3, [r3, #0]
   1c754:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1c756:	3201      	adds	r2, #1
   1c758:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1c75a:	4b02      	ldr	r3, [pc, #8]	; (1c764 <pvTaskIncrementMutexHeldCount+0x20>)
   1c75c:	681b      	ldr	r3, [r3, #0]
	}
   1c75e:	0018      	movs	r0, r3
   1c760:	46bd      	mov	sp, r7
   1c762:	bd80      	pop	{r7, pc}
   1c764:	20003f40 	.word	0x20003f40

0001c768 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1c768:	b580      	push	{r7, lr}
   1c76a:	b084      	sub	sp, #16
   1c76c:	af00      	add	r7, sp, #0
   1c76e:	6078      	str	r0, [r7, #4]
   1c770:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1c772:	4b21      	ldr	r3, [pc, #132]	; (1c7f8 <prvAddCurrentTaskToDelayedList+0x90>)
   1c774:	681b      	ldr	r3, [r3, #0]
   1c776:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c778:	4b20      	ldr	r3, [pc, #128]	; (1c7fc <prvAddCurrentTaskToDelayedList+0x94>)
   1c77a:	681b      	ldr	r3, [r3, #0]
   1c77c:	3304      	adds	r3, #4
   1c77e:	0018      	movs	r0, r3
   1c780:	4b1f      	ldr	r3, [pc, #124]	; (1c800 <prvAddCurrentTaskToDelayedList+0x98>)
   1c782:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1c784:	687b      	ldr	r3, [r7, #4]
   1c786:	3301      	adds	r3, #1
   1c788:	d10b      	bne.n	1c7a2 <prvAddCurrentTaskToDelayedList+0x3a>
   1c78a:	683b      	ldr	r3, [r7, #0]
   1c78c:	2b00      	cmp	r3, #0
   1c78e:	d008      	beq.n	1c7a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1c790:	4b1a      	ldr	r3, [pc, #104]	; (1c7fc <prvAddCurrentTaskToDelayedList+0x94>)
   1c792:	681b      	ldr	r3, [r3, #0]
   1c794:	1d1a      	adds	r2, r3, #4
   1c796:	4b1b      	ldr	r3, [pc, #108]	; (1c804 <prvAddCurrentTaskToDelayedList+0x9c>)
   1c798:	0011      	movs	r1, r2
   1c79a:	0018      	movs	r0, r3
   1c79c:	4b1a      	ldr	r3, [pc, #104]	; (1c808 <prvAddCurrentTaskToDelayedList+0xa0>)
   1c79e:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1c7a0:	e026      	b.n	1c7f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1c7a2:	68fa      	ldr	r2, [r7, #12]
   1c7a4:	687b      	ldr	r3, [r7, #4]
   1c7a6:	18d3      	adds	r3, r2, r3
   1c7a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1c7aa:	4b14      	ldr	r3, [pc, #80]	; (1c7fc <prvAddCurrentTaskToDelayedList+0x94>)
   1c7ac:	681b      	ldr	r3, [r3, #0]
   1c7ae:	68ba      	ldr	r2, [r7, #8]
   1c7b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1c7b2:	68ba      	ldr	r2, [r7, #8]
   1c7b4:	68fb      	ldr	r3, [r7, #12]
   1c7b6:	429a      	cmp	r2, r3
   1c7b8:	d209      	bcs.n	1c7ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1c7ba:	4b14      	ldr	r3, [pc, #80]	; (1c80c <prvAddCurrentTaskToDelayedList+0xa4>)
   1c7bc:	681a      	ldr	r2, [r3, #0]
   1c7be:	4b0f      	ldr	r3, [pc, #60]	; (1c7fc <prvAddCurrentTaskToDelayedList+0x94>)
   1c7c0:	681b      	ldr	r3, [r3, #0]
   1c7c2:	3304      	adds	r3, #4
   1c7c4:	0019      	movs	r1, r3
   1c7c6:	0010      	movs	r0, r2
   1c7c8:	4b11      	ldr	r3, [pc, #68]	; (1c810 <prvAddCurrentTaskToDelayedList+0xa8>)
   1c7ca:	4798      	blx	r3
}
   1c7cc:	e010      	b.n	1c7f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1c7ce:	4b11      	ldr	r3, [pc, #68]	; (1c814 <prvAddCurrentTaskToDelayedList+0xac>)
   1c7d0:	681a      	ldr	r2, [r3, #0]
   1c7d2:	4b0a      	ldr	r3, [pc, #40]	; (1c7fc <prvAddCurrentTaskToDelayedList+0x94>)
   1c7d4:	681b      	ldr	r3, [r3, #0]
   1c7d6:	3304      	adds	r3, #4
   1c7d8:	0019      	movs	r1, r3
   1c7da:	0010      	movs	r0, r2
   1c7dc:	4b0c      	ldr	r3, [pc, #48]	; (1c810 <prvAddCurrentTaskToDelayedList+0xa8>)
   1c7de:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1c7e0:	4b0d      	ldr	r3, [pc, #52]	; (1c818 <prvAddCurrentTaskToDelayedList+0xb0>)
   1c7e2:	681b      	ldr	r3, [r3, #0]
   1c7e4:	68ba      	ldr	r2, [r7, #8]
   1c7e6:	429a      	cmp	r2, r3
   1c7e8:	d202      	bcs.n	1c7f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1c7ea:	4b0b      	ldr	r3, [pc, #44]	; (1c818 <prvAddCurrentTaskToDelayedList+0xb0>)
   1c7ec:	68ba      	ldr	r2, [r7, #8]
   1c7ee:	601a      	str	r2, [r3, #0]
}
   1c7f0:	46c0      	nop			; (mov r8, r8)
   1c7f2:	46bd      	mov	sp, r7
   1c7f4:	b004      	add	sp, #16
   1c7f6:	bd80      	pop	{r7, pc}
   1c7f8:	2000401c 	.word	0x2000401c
   1c7fc:	20003f40 	.word	0x20003f40
   1c800:	000193c7 	.word	0x000193c7
   1c804:	20004004 	.word	0x20004004
   1c808:	00019317 	.word	0x00019317
   1c80c:	20003fd4 	.word	0x20003fd4
   1c810:	0001935b 	.word	0x0001935b
   1c814:	20003fd0 	.word	0x20003fd0
   1c818:	20004038 	.word	0x20004038

0001c81c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1c81c:	b590      	push	{r4, r7, lr}
   1c81e:	b085      	sub	sp, #20
   1c820:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1c822:	2300      	movs	r3, #0
   1c824:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1c826:	4b0e      	ldr	r3, [pc, #56]	; (1c860 <xTimerCreateTimerTask+0x44>)
   1c828:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1c82a:	4b0e      	ldr	r3, [pc, #56]	; (1c864 <xTimerCreateTimerTask+0x48>)
   1c82c:	681b      	ldr	r3, [r3, #0]
   1c82e:	2b00      	cmp	r3, #0
   1c830:	d00b      	beq.n	1c84a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1c832:	490d      	ldr	r1, [pc, #52]	; (1c868 <xTimerCreateTimerTask+0x4c>)
   1c834:	480d      	ldr	r0, [pc, #52]	; (1c86c <xTimerCreateTimerTask+0x50>)
   1c836:	4b0e      	ldr	r3, [pc, #56]	; (1c870 <xTimerCreateTimerTask+0x54>)
   1c838:	9301      	str	r3, [sp, #4]
   1c83a:	2302      	movs	r3, #2
   1c83c:	9300      	str	r3, [sp, #0]
   1c83e:	2300      	movs	r3, #0
   1c840:	2280      	movs	r2, #128	; 0x80
   1c842:	4c0c      	ldr	r4, [pc, #48]	; (1c874 <xTimerCreateTimerTask+0x58>)
   1c844:	47a0      	blx	r4
   1c846:	0003      	movs	r3, r0
   1c848:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1c84a:	687b      	ldr	r3, [r7, #4]
   1c84c:	2b00      	cmp	r3, #0
   1c84e:	d101      	bne.n	1c854 <xTimerCreateTimerTask+0x38>
   1c850:	b672      	cpsid	i
   1c852:	e7fe      	b.n	1c852 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1c854:	687b      	ldr	r3, [r7, #4]
}
   1c856:	0018      	movs	r0, r3
   1c858:	46bd      	mov	sp, r7
   1c85a:	b003      	add	sp, #12
   1c85c:	bd90      	pop	{r4, r7, pc}
   1c85e:	46c0      	nop			; (mov r8, r8)
   1c860:	0001cd65 	.word	0x0001cd65
   1c864:	20004074 	.word	0x20004074
   1c868:	00037928 	.word	0x00037928
   1c86c:	0001c99d 	.word	0x0001c99d
   1c870:	20004078 	.word	0x20004078
   1c874:	0001b1b5 	.word	0x0001b1b5

0001c878 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1c878:	b590      	push	{r4, r7, lr}
   1c87a:	b089      	sub	sp, #36	; 0x24
   1c87c:	af00      	add	r7, sp, #0
   1c87e:	60f8      	str	r0, [r7, #12]
   1c880:	60b9      	str	r1, [r7, #8]
   1c882:	607a      	str	r2, [r7, #4]
   1c884:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1c886:	2300      	movs	r3, #0
   1c888:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1c88a:	68fb      	ldr	r3, [r7, #12]
   1c88c:	2b00      	cmp	r3, #0
   1c88e:	d101      	bne.n	1c894 <xTimerGenericCommand+0x1c>
   1c890:	b672      	cpsid	i
   1c892:	e7fe      	b.n	1c892 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1c894:	4b1e      	ldr	r3, [pc, #120]	; (1c910 <xTimerGenericCommand+0x98>)
   1c896:	681b      	ldr	r3, [r3, #0]
   1c898:	2b00      	cmp	r3, #0
   1c89a:	d033      	beq.n	1c904 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1c89c:	2310      	movs	r3, #16
   1c89e:	18fb      	adds	r3, r7, r3
   1c8a0:	68ba      	ldr	r2, [r7, #8]
   1c8a2:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1c8a4:	2310      	movs	r3, #16
   1c8a6:	18fb      	adds	r3, r7, r3
   1c8a8:	687a      	ldr	r2, [r7, #4]
   1c8aa:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1c8ac:	2310      	movs	r3, #16
   1c8ae:	18fb      	adds	r3, r7, r3
   1c8b0:	68fa      	ldr	r2, [r7, #12]
   1c8b2:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1c8b4:	68bb      	ldr	r3, [r7, #8]
   1c8b6:	2b05      	cmp	r3, #5
   1c8b8:	dc1a      	bgt.n	1c8f0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1c8ba:	4b16      	ldr	r3, [pc, #88]	; (1c914 <xTimerGenericCommand+0x9c>)
   1c8bc:	4798      	blx	r3
   1c8be:	0003      	movs	r3, r0
   1c8c0:	2b02      	cmp	r3, #2
   1c8c2:	d10a      	bne.n	1c8da <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1c8c4:	4b12      	ldr	r3, [pc, #72]	; (1c910 <xTimerGenericCommand+0x98>)
   1c8c6:	6818      	ldr	r0, [r3, #0]
   1c8c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1c8ca:	2310      	movs	r3, #16
   1c8cc:	18f9      	adds	r1, r7, r3
   1c8ce:	2300      	movs	r3, #0
   1c8d0:	4c11      	ldr	r4, [pc, #68]	; (1c918 <xTimerGenericCommand+0xa0>)
   1c8d2:	47a0      	blx	r4
   1c8d4:	0003      	movs	r3, r0
   1c8d6:	61fb      	str	r3, [r7, #28]
   1c8d8:	e014      	b.n	1c904 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1c8da:	4b0d      	ldr	r3, [pc, #52]	; (1c910 <xTimerGenericCommand+0x98>)
   1c8dc:	6818      	ldr	r0, [r3, #0]
   1c8de:	2310      	movs	r3, #16
   1c8e0:	18f9      	adds	r1, r7, r3
   1c8e2:	2300      	movs	r3, #0
   1c8e4:	2200      	movs	r2, #0
   1c8e6:	4c0c      	ldr	r4, [pc, #48]	; (1c918 <xTimerGenericCommand+0xa0>)
   1c8e8:	47a0      	blx	r4
   1c8ea:	0003      	movs	r3, r0
   1c8ec:	61fb      	str	r3, [r7, #28]
   1c8ee:	e009      	b.n	1c904 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1c8f0:	4b07      	ldr	r3, [pc, #28]	; (1c910 <xTimerGenericCommand+0x98>)
   1c8f2:	6818      	ldr	r0, [r3, #0]
   1c8f4:	683a      	ldr	r2, [r7, #0]
   1c8f6:	2310      	movs	r3, #16
   1c8f8:	18f9      	adds	r1, r7, r3
   1c8fa:	2300      	movs	r3, #0
   1c8fc:	4c07      	ldr	r4, [pc, #28]	; (1c91c <xTimerGenericCommand+0xa4>)
   1c8fe:	47a0      	blx	r4
   1c900:	0003      	movs	r3, r0
   1c902:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1c904:	69fb      	ldr	r3, [r7, #28]
}
   1c906:	0018      	movs	r0, r3
   1c908:	46bd      	mov	sp, r7
   1c90a:	b009      	add	sp, #36	; 0x24
   1c90c:	bd90      	pop	{r4, r7, pc}
   1c90e:	46c0      	nop			; (mov r8, r8)
   1c910:	20004074 	.word	0x20004074
   1c914:	0001c279 	.word	0x0001c279
   1c918:	00019aed 	.word	0x00019aed
   1c91c:	00019f4d 	.word	0x00019f4d

0001c920 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1c920:	b590      	push	{r4, r7, lr}
   1c922:	b087      	sub	sp, #28
   1c924:	af02      	add	r7, sp, #8
   1c926:	6078      	str	r0, [r7, #4]
   1c928:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1c92a:	4b18      	ldr	r3, [pc, #96]	; (1c98c <prvProcessExpiredTimer+0x6c>)
   1c92c:	681b      	ldr	r3, [r3, #0]
   1c92e:	68db      	ldr	r3, [r3, #12]
   1c930:	68db      	ldr	r3, [r3, #12]
   1c932:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1c934:	68fb      	ldr	r3, [r7, #12]
   1c936:	3304      	adds	r3, #4
   1c938:	0018      	movs	r0, r3
   1c93a:	4b15      	ldr	r3, [pc, #84]	; (1c990 <prvProcessExpiredTimer+0x70>)
   1c93c:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1c93e:	68fb      	ldr	r3, [r7, #12]
   1c940:	69db      	ldr	r3, [r3, #28]
   1c942:	2b01      	cmp	r3, #1
   1c944:	d119      	bne.n	1c97a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1c946:	68fb      	ldr	r3, [r7, #12]
   1c948:	699a      	ldr	r2, [r3, #24]
   1c94a:	687b      	ldr	r3, [r7, #4]
   1c94c:	18d1      	adds	r1, r2, r3
   1c94e:	687b      	ldr	r3, [r7, #4]
   1c950:	683a      	ldr	r2, [r7, #0]
   1c952:	68f8      	ldr	r0, [r7, #12]
   1c954:	4c0f      	ldr	r4, [pc, #60]	; (1c994 <prvProcessExpiredTimer+0x74>)
   1c956:	47a0      	blx	r4
   1c958:	1e03      	subs	r3, r0, #0
   1c95a:	d00e      	beq.n	1c97a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1c95c:	687a      	ldr	r2, [r7, #4]
   1c95e:	68f8      	ldr	r0, [r7, #12]
   1c960:	2300      	movs	r3, #0
   1c962:	9300      	str	r3, [sp, #0]
   1c964:	2300      	movs	r3, #0
   1c966:	2100      	movs	r1, #0
   1c968:	4c0b      	ldr	r4, [pc, #44]	; (1c998 <prvProcessExpiredTimer+0x78>)
   1c96a:	47a0      	blx	r4
   1c96c:	0003      	movs	r3, r0
   1c96e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1c970:	68bb      	ldr	r3, [r7, #8]
   1c972:	2b00      	cmp	r3, #0
   1c974:	d101      	bne.n	1c97a <prvProcessExpiredTimer+0x5a>
   1c976:	b672      	cpsid	i
   1c978:	e7fe      	b.n	1c978 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1c97a:	68fb      	ldr	r3, [r7, #12]
   1c97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c97e:	68fa      	ldr	r2, [r7, #12]
   1c980:	0010      	movs	r0, r2
   1c982:	4798      	blx	r3
}
   1c984:	46c0      	nop			; (mov r8, r8)
   1c986:	46bd      	mov	sp, r7
   1c988:	b005      	add	sp, #20
   1c98a:	bd90      	pop	{r4, r7, pc}
   1c98c:	2000406c 	.word	0x2000406c
   1c990:	000193c7 	.word	0x000193c7
   1c994:	0001cb05 	.word	0x0001cb05
   1c998:	0001c879 	.word	0x0001c879

0001c99c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1c99c:	b580      	push	{r7, lr}
   1c99e:	b084      	sub	sp, #16
   1c9a0:	af00      	add	r7, sp, #0
   1c9a2:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1c9a4:	4b08      	ldr	r3, [pc, #32]	; (1c9c8 <prvTimerTask+0x2c>)
   1c9a6:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1c9a8:	2308      	movs	r3, #8
   1c9aa:	18fb      	adds	r3, r7, r3
   1c9ac:	0018      	movs	r0, r3
   1c9ae:	4b07      	ldr	r3, [pc, #28]	; (1c9cc <prvTimerTask+0x30>)
   1c9b0:	4798      	blx	r3
   1c9b2:	0003      	movs	r3, r0
   1c9b4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1c9b6:	68ba      	ldr	r2, [r7, #8]
   1c9b8:	68fb      	ldr	r3, [r7, #12]
   1c9ba:	0011      	movs	r1, r2
   1c9bc:	0018      	movs	r0, r3
   1c9be:	4b04      	ldr	r3, [pc, #16]	; (1c9d0 <prvTimerTask+0x34>)
   1c9c0:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1c9c2:	4b04      	ldr	r3, [pc, #16]	; (1c9d4 <prvTimerTask+0x38>)
   1c9c4:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1c9c6:	e7ef      	b.n	1c9a8 <prvTimerTask+0xc>
   1c9c8:	00031c55 	.word	0x00031c55
   1c9cc:	0001ca7d 	.word	0x0001ca7d
   1c9d0:	0001c9d9 	.word	0x0001c9d9
   1c9d4:	0001cb8d 	.word	0x0001cb8d

0001c9d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1c9d8:	b580      	push	{r7, lr}
   1c9da:	b084      	sub	sp, #16
   1c9dc:	af00      	add	r7, sp, #0
   1c9de:	6078      	str	r0, [r7, #4]
   1c9e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1c9e2:	4b1e      	ldr	r3, [pc, #120]	; (1ca5c <prvProcessTimerOrBlockTask+0x84>)
   1c9e4:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1c9e6:	2308      	movs	r3, #8
   1c9e8:	18fb      	adds	r3, r7, r3
   1c9ea:	0018      	movs	r0, r3
   1c9ec:	4b1c      	ldr	r3, [pc, #112]	; (1ca60 <prvProcessTimerOrBlockTask+0x88>)
   1c9ee:	4798      	blx	r3
   1c9f0:	0003      	movs	r3, r0
   1c9f2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1c9f4:	68bb      	ldr	r3, [r7, #8]
   1c9f6:	2b00      	cmp	r3, #0
   1c9f8:	d129      	bne.n	1ca4e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1c9fa:	683b      	ldr	r3, [r7, #0]
   1c9fc:	2b00      	cmp	r3, #0
   1c9fe:	d10c      	bne.n	1ca1a <prvProcessTimerOrBlockTask+0x42>
   1ca00:	687a      	ldr	r2, [r7, #4]
   1ca02:	68fb      	ldr	r3, [r7, #12]
   1ca04:	429a      	cmp	r2, r3
   1ca06:	d808      	bhi.n	1ca1a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1ca08:	4b16      	ldr	r3, [pc, #88]	; (1ca64 <prvProcessTimerOrBlockTask+0x8c>)
   1ca0a:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1ca0c:	68fa      	ldr	r2, [r7, #12]
   1ca0e:	687b      	ldr	r3, [r7, #4]
   1ca10:	0011      	movs	r1, r2
   1ca12:	0018      	movs	r0, r3
   1ca14:	4b14      	ldr	r3, [pc, #80]	; (1ca68 <prvProcessTimerOrBlockTask+0x90>)
   1ca16:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1ca18:	e01b      	b.n	1ca52 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1ca1a:	683b      	ldr	r3, [r7, #0]
   1ca1c:	2b00      	cmp	r3, #0
   1ca1e:	d006      	beq.n	1ca2e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1ca20:	4b12      	ldr	r3, [pc, #72]	; (1ca6c <prvProcessTimerOrBlockTask+0x94>)
   1ca22:	681b      	ldr	r3, [r3, #0]
   1ca24:	681b      	ldr	r3, [r3, #0]
   1ca26:	425a      	negs	r2, r3
   1ca28:	4153      	adcs	r3, r2
   1ca2a:	b2db      	uxtb	r3, r3
   1ca2c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1ca2e:	4b10      	ldr	r3, [pc, #64]	; (1ca70 <prvProcessTimerOrBlockTask+0x98>)
   1ca30:	6818      	ldr	r0, [r3, #0]
   1ca32:	687a      	ldr	r2, [r7, #4]
   1ca34:	68fb      	ldr	r3, [r7, #12]
   1ca36:	1ad3      	subs	r3, r2, r3
   1ca38:	683a      	ldr	r2, [r7, #0]
   1ca3a:	0019      	movs	r1, r3
   1ca3c:	4b0d      	ldr	r3, [pc, #52]	; (1ca74 <prvProcessTimerOrBlockTask+0x9c>)
   1ca3e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1ca40:	4b08      	ldr	r3, [pc, #32]	; (1ca64 <prvProcessTimerOrBlockTask+0x8c>)
   1ca42:	4798      	blx	r3
   1ca44:	1e03      	subs	r3, r0, #0
   1ca46:	d104      	bne.n	1ca52 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1ca48:	4b0b      	ldr	r3, [pc, #44]	; (1ca78 <prvProcessTimerOrBlockTask+0xa0>)
   1ca4a:	4798      	blx	r3
}
   1ca4c:	e001      	b.n	1ca52 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1ca4e:	4b05      	ldr	r3, [pc, #20]	; (1ca64 <prvProcessTimerOrBlockTask+0x8c>)
   1ca50:	4798      	blx	r3
}
   1ca52:	46c0      	nop			; (mov r8, r8)
   1ca54:	46bd      	mov	sp, r7
   1ca56:	b004      	add	sp, #16
   1ca58:	bd80      	pop	{r7, pc}
   1ca5a:	46c0      	nop			; (mov r8, r8)
   1ca5c:	0001b811 	.word	0x0001b811
   1ca60:	0001cabd 	.word	0x0001cabd
   1ca64:	0001b829 	.word	0x0001b829
   1ca68:	0001c921 	.word	0x0001c921
   1ca6c:	20004070 	.word	0x20004070
   1ca70:	20004074 	.word	0x20004074
   1ca74:	0001afb1 	.word	0x0001afb1
   1ca78:	00019541 	.word	0x00019541

0001ca7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1ca7c:	b580      	push	{r7, lr}
   1ca7e:	b084      	sub	sp, #16
   1ca80:	af00      	add	r7, sp, #0
   1ca82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1ca84:	4b0c      	ldr	r3, [pc, #48]	; (1cab8 <prvGetNextExpireTime+0x3c>)
   1ca86:	681b      	ldr	r3, [r3, #0]
   1ca88:	681b      	ldr	r3, [r3, #0]
   1ca8a:	425a      	negs	r2, r3
   1ca8c:	4153      	adcs	r3, r2
   1ca8e:	b2db      	uxtb	r3, r3
   1ca90:	001a      	movs	r2, r3
   1ca92:	687b      	ldr	r3, [r7, #4]
   1ca94:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1ca96:	687b      	ldr	r3, [r7, #4]
   1ca98:	681b      	ldr	r3, [r3, #0]
   1ca9a:	2b00      	cmp	r3, #0
   1ca9c:	d105      	bne.n	1caaa <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1ca9e:	4b06      	ldr	r3, [pc, #24]	; (1cab8 <prvGetNextExpireTime+0x3c>)
   1caa0:	681b      	ldr	r3, [r3, #0]
   1caa2:	68db      	ldr	r3, [r3, #12]
   1caa4:	681b      	ldr	r3, [r3, #0]
   1caa6:	60fb      	str	r3, [r7, #12]
   1caa8:	e001      	b.n	1caae <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1caaa:	2300      	movs	r3, #0
   1caac:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1caae:	68fb      	ldr	r3, [r7, #12]
}
   1cab0:	0018      	movs	r0, r3
   1cab2:	46bd      	mov	sp, r7
   1cab4:	b004      	add	sp, #16
   1cab6:	bd80      	pop	{r7, pc}
   1cab8:	2000406c 	.word	0x2000406c

0001cabc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1cabc:	b580      	push	{r7, lr}
   1cabe:	b084      	sub	sp, #16
   1cac0:	af00      	add	r7, sp, #0
   1cac2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1cac4:	4b0c      	ldr	r3, [pc, #48]	; (1caf8 <prvSampleTimeNow+0x3c>)
   1cac6:	4798      	blx	r3
   1cac8:	0003      	movs	r3, r0
   1caca:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1cacc:	4b0b      	ldr	r3, [pc, #44]	; (1cafc <prvSampleTimeNow+0x40>)
   1cace:	681b      	ldr	r3, [r3, #0]
   1cad0:	68fa      	ldr	r2, [r7, #12]
   1cad2:	429a      	cmp	r2, r3
   1cad4:	d205      	bcs.n	1cae2 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1cad6:	4b0a      	ldr	r3, [pc, #40]	; (1cb00 <prvSampleTimeNow+0x44>)
   1cad8:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1cada:	687b      	ldr	r3, [r7, #4]
   1cadc:	2201      	movs	r2, #1
   1cade:	601a      	str	r2, [r3, #0]
   1cae0:	e002      	b.n	1cae8 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1cae2:	687b      	ldr	r3, [r7, #4]
   1cae4:	2200      	movs	r2, #0
   1cae6:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1cae8:	4b04      	ldr	r3, [pc, #16]	; (1cafc <prvSampleTimeNow+0x40>)
   1caea:	68fa      	ldr	r2, [r7, #12]
   1caec:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1caee:	68fb      	ldr	r3, [r7, #12]
}
   1caf0:	0018      	movs	r0, r3
   1caf2:	46bd      	mov	sp, r7
   1caf4:	b004      	add	sp, #16
   1caf6:	bd80      	pop	{r7, pc}
   1caf8:	0001b999 	.word	0x0001b999
   1cafc:	2000407c 	.word	0x2000407c
   1cb00:	0001cca5 	.word	0x0001cca5

0001cb04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1cb04:	b580      	push	{r7, lr}
   1cb06:	b086      	sub	sp, #24
   1cb08:	af00      	add	r7, sp, #0
   1cb0a:	60f8      	str	r0, [r7, #12]
   1cb0c:	60b9      	str	r1, [r7, #8]
   1cb0e:	607a      	str	r2, [r7, #4]
   1cb10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1cb12:	2300      	movs	r3, #0
   1cb14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1cb16:	68fb      	ldr	r3, [r7, #12]
   1cb18:	68ba      	ldr	r2, [r7, #8]
   1cb1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1cb1c:	68fb      	ldr	r3, [r7, #12]
   1cb1e:	68fa      	ldr	r2, [r7, #12]
   1cb20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1cb22:	68ba      	ldr	r2, [r7, #8]
   1cb24:	687b      	ldr	r3, [r7, #4]
   1cb26:	429a      	cmp	r2, r3
   1cb28:	d812      	bhi.n	1cb50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1cb2a:	687a      	ldr	r2, [r7, #4]
   1cb2c:	683b      	ldr	r3, [r7, #0]
   1cb2e:	1ad2      	subs	r2, r2, r3
   1cb30:	68fb      	ldr	r3, [r7, #12]
   1cb32:	699b      	ldr	r3, [r3, #24]
   1cb34:	429a      	cmp	r2, r3
   1cb36:	d302      	bcc.n	1cb3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1cb38:	2301      	movs	r3, #1
   1cb3a:	617b      	str	r3, [r7, #20]
   1cb3c:	e01b      	b.n	1cb76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1cb3e:	4b10      	ldr	r3, [pc, #64]	; (1cb80 <prvInsertTimerInActiveList+0x7c>)
   1cb40:	681a      	ldr	r2, [r3, #0]
   1cb42:	68fb      	ldr	r3, [r7, #12]
   1cb44:	3304      	adds	r3, #4
   1cb46:	0019      	movs	r1, r3
   1cb48:	0010      	movs	r0, r2
   1cb4a:	4b0e      	ldr	r3, [pc, #56]	; (1cb84 <prvInsertTimerInActiveList+0x80>)
   1cb4c:	4798      	blx	r3
   1cb4e:	e012      	b.n	1cb76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1cb50:	687a      	ldr	r2, [r7, #4]
   1cb52:	683b      	ldr	r3, [r7, #0]
   1cb54:	429a      	cmp	r2, r3
   1cb56:	d206      	bcs.n	1cb66 <prvInsertTimerInActiveList+0x62>
   1cb58:	68ba      	ldr	r2, [r7, #8]
   1cb5a:	683b      	ldr	r3, [r7, #0]
   1cb5c:	429a      	cmp	r2, r3
   1cb5e:	d302      	bcc.n	1cb66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1cb60:	2301      	movs	r3, #1
   1cb62:	617b      	str	r3, [r7, #20]
   1cb64:	e007      	b.n	1cb76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1cb66:	4b08      	ldr	r3, [pc, #32]	; (1cb88 <prvInsertTimerInActiveList+0x84>)
   1cb68:	681a      	ldr	r2, [r3, #0]
   1cb6a:	68fb      	ldr	r3, [r7, #12]
   1cb6c:	3304      	adds	r3, #4
   1cb6e:	0019      	movs	r1, r3
   1cb70:	0010      	movs	r0, r2
   1cb72:	4b04      	ldr	r3, [pc, #16]	; (1cb84 <prvInsertTimerInActiveList+0x80>)
   1cb74:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1cb76:	697b      	ldr	r3, [r7, #20]
}
   1cb78:	0018      	movs	r0, r3
   1cb7a:	46bd      	mov	sp, r7
   1cb7c:	b006      	add	sp, #24
   1cb7e:	bd80      	pop	{r7, pc}
   1cb80:	20004070 	.word	0x20004070
   1cb84:	0001935b 	.word	0x0001935b
   1cb88:	2000406c 	.word	0x2000406c

0001cb8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1cb8c:	b590      	push	{r4, r7, lr}
   1cb8e:	b08b      	sub	sp, #44	; 0x2c
   1cb90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1cb92:	e068      	b.n	1cc66 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1cb94:	2308      	movs	r3, #8
   1cb96:	18fb      	adds	r3, r7, r3
   1cb98:	681b      	ldr	r3, [r3, #0]
   1cb9a:	2b00      	cmp	r3, #0
   1cb9c:	db63      	blt.n	1cc66 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1cb9e:	2308      	movs	r3, #8
   1cba0:	18fb      	adds	r3, r7, r3
   1cba2:	689b      	ldr	r3, [r3, #8]
   1cba4:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1cba6:	69fb      	ldr	r3, [r7, #28]
   1cba8:	695b      	ldr	r3, [r3, #20]
   1cbaa:	2b00      	cmp	r3, #0
   1cbac:	d004      	beq.n	1cbb8 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1cbae:	69fb      	ldr	r3, [r7, #28]
   1cbb0:	3304      	adds	r3, #4
   1cbb2:	0018      	movs	r0, r3
   1cbb4:	4b33      	ldr	r3, [pc, #204]	; (1cc84 <prvProcessReceivedCommands+0xf8>)
   1cbb6:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1cbb8:	1d3b      	adds	r3, r7, #4
   1cbba:	0018      	movs	r0, r3
   1cbbc:	4b32      	ldr	r3, [pc, #200]	; (1cc88 <prvProcessReceivedCommands+0xfc>)
   1cbbe:	4798      	blx	r3
   1cbc0:	0003      	movs	r3, r0
   1cbc2:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1cbc4:	2308      	movs	r3, #8
   1cbc6:	18fb      	adds	r3, r7, r3
   1cbc8:	681b      	ldr	r3, [r3, #0]
   1cbca:	2b09      	cmp	r3, #9
   1cbcc:	d84a      	bhi.n	1cc64 <prvProcessReceivedCommands+0xd8>
   1cbce:	009a      	lsls	r2, r3, #2
   1cbd0:	4b2e      	ldr	r3, [pc, #184]	; (1cc8c <prvProcessReceivedCommands+0x100>)
   1cbd2:	18d3      	adds	r3, r2, r3
   1cbd4:	681b      	ldr	r3, [r3, #0]
   1cbd6:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1cbd8:	2308      	movs	r3, #8
   1cbda:	18fb      	adds	r3, r7, r3
   1cbdc:	685a      	ldr	r2, [r3, #4]
   1cbde:	69fb      	ldr	r3, [r7, #28]
   1cbe0:	699b      	ldr	r3, [r3, #24]
   1cbe2:	18d1      	adds	r1, r2, r3
   1cbe4:	2308      	movs	r3, #8
   1cbe6:	18fb      	adds	r3, r7, r3
   1cbe8:	685b      	ldr	r3, [r3, #4]
   1cbea:	69ba      	ldr	r2, [r7, #24]
   1cbec:	69f8      	ldr	r0, [r7, #28]
   1cbee:	4c28      	ldr	r4, [pc, #160]	; (1cc90 <prvProcessReceivedCommands+0x104>)
   1cbf0:	47a0      	blx	r4
   1cbf2:	1e03      	subs	r3, r0, #0
   1cbf4:	d037      	beq.n	1cc66 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1cbf6:	69fb      	ldr	r3, [r7, #28]
   1cbf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1cbfa:	69fa      	ldr	r2, [r7, #28]
   1cbfc:	0010      	movs	r0, r2
   1cbfe:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1cc00:	69fb      	ldr	r3, [r7, #28]
   1cc02:	69db      	ldr	r3, [r3, #28]
   1cc04:	2b01      	cmp	r3, #1
   1cc06:	d12e      	bne.n	1cc66 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1cc08:	2308      	movs	r3, #8
   1cc0a:	18fb      	adds	r3, r7, r3
   1cc0c:	685a      	ldr	r2, [r3, #4]
   1cc0e:	69fb      	ldr	r3, [r7, #28]
   1cc10:	699b      	ldr	r3, [r3, #24]
   1cc12:	18d2      	adds	r2, r2, r3
   1cc14:	69f8      	ldr	r0, [r7, #28]
   1cc16:	2300      	movs	r3, #0
   1cc18:	9300      	str	r3, [sp, #0]
   1cc1a:	2300      	movs	r3, #0
   1cc1c:	2100      	movs	r1, #0
   1cc1e:	4c1d      	ldr	r4, [pc, #116]	; (1cc94 <prvProcessReceivedCommands+0x108>)
   1cc20:	47a0      	blx	r4
   1cc22:	0003      	movs	r3, r0
   1cc24:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1cc26:	697b      	ldr	r3, [r7, #20]
   1cc28:	2b00      	cmp	r3, #0
   1cc2a:	d11c      	bne.n	1cc66 <prvProcessReceivedCommands+0xda>
   1cc2c:	b672      	cpsid	i
   1cc2e:	e7fe      	b.n	1cc2e <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1cc30:	2308      	movs	r3, #8
   1cc32:	18fb      	adds	r3, r7, r3
   1cc34:	685a      	ldr	r2, [r3, #4]
   1cc36:	69fb      	ldr	r3, [r7, #28]
   1cc38:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1cc3a:	69fb      	ldr	r3, [r7, #28]
   1cc3c:	699b      	ldr	r3, [r3, #24]
   1cc3e:	2b00      	cmp	r3, #0
   1cc40:	d101      	bne.n	1cc46 <prvProcessReceivedCommands+0xba>
   1cc42:	b672      	cpsid	i
   1cc44:	e7fe      	b.n	1cc44 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1cc46:	69fb      	ldr	r3, [r7, #28]
   1cc48:	699a      	ldr	r2, [r3, #24]
   1cc4a:	69bb      	ldr	r3, [r7, #24]
   1cc4c:	18d1      	adds	r1, r2, r3
   1cc4e:	69bb      	ldr	r3, [r7, #24]
   1cc50:	69ba      	ldr	r2, [r7, #24]
   1cc52:	69f8      	ldr	r0, [r7, #28]
   1cc54:	4c0e      	ldr	r4, [pc, #56]	; (1cc90 <prvProcessReceivedCommands+0x104>)
   1cc56:	47a0      	blx	r4
					break;
   1cc58:	e005      	b.n	1cc66 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1cc5a:	69fb      	ldr	r3, [r7, #28]
   1cc5c:	0018      	movs	r0, r3
   1cc5e:	4b0e      	ldr	r3, [pc, #56]	; (1cc98 <prvProcessReceivedCommands+0x10c>)
   1cc60:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1cc62:	e000      	b.n	1cc66 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1cc64:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1cc66:	4b0d      	ldr	r3, [pc, #52]	; (1cc9c <prvProcessReceivedCommands+0x110>)
   1cc68:	681b      	ldr	r3, [r3, #0]
   1cc6a:	2208      	movs	r2, #8
   1cc6c:	18b9      	adds	r1, r7, r2
   1cc6e:	2200      	movs	r2, #0
   1cc70:	0018      	movs	r0, r3
   1cc72:	4b0b      	ldr	r3, [pc, #44]	; (1cca0 <prvProcessReceivedCommands+0x114>)
   1cc74:	4798      	blx	r3
   1cc76:	1e03      	subs	r3, r0, #0
   1cc78:	d18c      	bne.n	1cb94 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1cc7a:	46c0      	nop			; (mov r8, r8)
   1cc7c:	46bd      	mov	sp, r7
   1cc7e:	b009      	add	sp, #36	; 0x24
   1cc80:	bd90      	pop	{r4, r7, pc}
   1cc82:	46c0      	nop			; (mov r8, r8)
   1cc84:	000193c7 	.word	0x000193c7
   1cc88:	0001cabd 	.word	0x0001cabd
   1cc8c:	00037930 	.word	0x00037930
   1cc90:	0001cb05 	.word	0x0001cb05
   1cc94:	0001c879 	.word	0x0001c879
   1cc98:	00019755 	.word	0x00019755
   1cc9c:	20004074 	.word	0x20004074
   1cca0:	0001a3a5 	.word	0x0001a3a5

0001cca4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1cca4:	b590      	push	{r4, r7, lr}
   1cca6:	b089      	sub	sp, #36	; 0x24
   1cca8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1ccaa:	e03e      	b.n	1cd2a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1ccac:	4b28      	ldr	r3, [pc, #160]	; (1cd50 <prvSwitchTimerLists+0xac>)
   1ccae:	681b      	ldr	r3, [r3, #0]
   1ccb0:	68db      	ldr	r3, [r3, #12]
   1ccb2:	681b      	ldr	r3, [r3, #0]
   1ccb4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1ccb6:	4b26      	ldr	r3, [pc, #152]	; (1cd50 <prvSwitchTimerLists+0xac>)
   1ccb8:	681b      	ldr	r3, [r3, #0]
   1ccba:	68db      	ldr	r3, [r3, #12]
   1ccbc:	68db      	ldr	r3, [r3, #12]
   1ccbe:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1ccc0:	693b      	ldr	r3, [r7, #16]
   1ccc2:	3304      	adds	r3, #4
   1ccc4:	0018      	movs	r0, r3
   1ccc6:	4b23      	ldr	r3, [pc, #140]	; (1cd54 <prvSwitchTimerLists+0xb0>)
   1ccc8:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1ccca:	693b      	ldr	r3, [r7, #16]
   1cccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ccce:	693a      	ldr	r2, [r7, #16]
   1ccd0:	0010      	movs	r0, r2
   1ccd2:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1ccd4:	693b      	ldr	r3, [r7, #16]
   1ccd6:	69db      	ldr	r3, [r3, #28]
   1ccd8:	2b01      	cmp	r3, #1
   1ccda:	d126      	bne.n	1cd2a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1ccdc:	693b      	ldr	r3, [r7, #16]
   1ccde:	699a      	ldr	r2, [r3, #24]
   1cce0:	697b      	ldr	r3, [r7, #20]
   1cce2:	18d3      	adds	r3, r2, r3
   1cce4:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1cce6:	68fa      	ldr	r2, [r7, #12]
   1cce8:	697b      	ldr	r3, [r7, #20]
   1ccea:	429a      	cmp	r2, r3
   1ccec:	d90e      	bls.n	1cd0c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1ccee:	693b      	ldr	r3, [r7, #16]
   1ccf0:	68fa      	ldr	r2, [r7, #12]
   1ccf2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1ccf4:	693b      	ldr	r3, [r7, #16]
   1ccf6:	693a      	ldr	r2, [r7, #16]
   1ccf8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1ccfa:	4b15      	ldr	r3, [pc, #84]	; (1cd50 <prvSwitchTimerLists+0xac>)
   1ccfc:	681a      	ldr	r2, [r3, #0]
   1ccfe:	693b      	ldr	r3, [r7, #16]
   1cd00:	3304      	adds	r3, #4
   1cd02:	0019      	movs	r1, r3
   1cd04:	0010      	movs	r0, r2
   1cd06:	4b14      	ldr	r3, [pc, #80]	; (1cd58 <prvSwitchTimerLists+0xb4>)
   1cd08:	4798      	blx	r3
   1cd0a:	e00e      	b.n	1cd2a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1cd0c:	697a      	ldr	r2, [r7, #20]
   1cd0e:	6938      	ldr	r0, [r7, #16]
   1cd10:	2300      	movs	r3, #0
   1cd12:	9300      	str	r3, [sp, #0]
   1cd14:	2300      	movs	r3, #0
   1cd16:	2100      	movs	r1, #0
   1cd18:	4c10      	ldr	r4, [pc, #64]	; (1cd5c <prvSwitchTimerLists+0xb8>)
   1cd1a:	47a0      	blx	r4
   1cd1c:	0003      	movs	r3, r0
   1cd1e:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1cd20:	68bb      	ldr	r3, [r7, #8]
   1cd22:	2b00      	cmp	r3, #0
   1cd24:	d101      	bne.n	1cd2a <prvSwitchTimerLists+0x86>
   1cd26:	b672      	cpsid	i
   1cd28:	e7fe      	b.n	1cd28 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1cd2a:	4b09      	ldr	r3, [pc, #36]	; (1cd50 <prvSwitchTimerLists+0xac>)
   1cd2c:	681b      	ldr	r3, [r3, #0]
   1cd2e:	681b      	ldr	r3, [r3, #0]
   1cd30:	2b00      	cmp	r3, #0
   1cd32:	d1bb      	bne.n	1ccac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1cd34:	4b06      	ldr	r3, [pc, #24]	; (1cd50 <prvSwitchTimerLists+0xac>)
   1cd36:	681b      	ldr	r3, [r3, #0]
   1cd38:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1cd3a:	4b09      	ldr	r3, [pc, #36]	; (1cd60 <prvSwitchTimerLists+0xbc>)
   1cd3c:	681a      	ldr	r2, [r3, #0]
   1cd3e:	4b04      	ldr	r3, [pc, #16]	; (1cd50 <prvSwitchTimerLists+0xac>)
   1cd40:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1cd42:	4b07      	ldr	r3, [pc, #28]	; (1cd60 <prvSwitchTimerLists+0xbc>)
   1cd44:	687a      	ldr	r2, [r7, #4]
   1cd46:	601a      	str	r2, [r3, #0]
}
   1cd48:	46c0      	nop			; (mov r8, r8)
   1cd4a:	46bd      	mov	sp, r7
   1cd4c:	b007      	add	sp, #28
   1cd4e:	bd90      	pop	{r4, r7, pc}
   1cd50:	2000406c 	.word	0x2000406c
   1cd54:	000193c7 	.word	0x000193c7
   1cd58:	0001935b 	.word	0x0001935b
   1cd5c:	0001c879 	.word	0x0001c879
   1cd60:	20004070 	.word	0x20004070

0001cd64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1cd64:	b580      	push	{r7, lr}
   1cd66:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1cd68:	4b10      	ldr	r3, [pc, #64]	; (1cdac <prvCheckForValidListAndQueue+0x48>)
   1cd6a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1cd6c:	4b10      	ldr	r3, [pc, #64]	; (1cdb0 <prvCheckForValidListAndQueue+0x4c>)
   1cd6e:	681b      	ldr	r3, [r3, #0]
   1cd70:	2b00      	cmp	r3, #0
   1cd72:	d115      	bne.n	1cda0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1cd74:	4b0f      	ldr	r3, [pc, #60]	; (1cdb4 <prvCheckForValidListAndQueue+0x50>)
   1cd76:	0018      	movs	r0, r3
   1cd78:	4b0f      	ldr	r3, [pc, #60]	; (1cdb8 <prvCheckForValidListAndQueue+0x54>)
   1cd7a:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1cd7c:	4b0f      	ldr	r3, [pc, #60]	; (1cdbc <prvCheckForValidListAndQueue+0x58>)
   1cd7e:	0018      	movs	r0, r3
   1cd80:	4b0d      	ldr	r3, [pc, #52]	; (1cdb8 <prvCheckForValidListAndQueue+0x54>)
   1cd82:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1cd84:	4b0e      	ldr	r3, [pc, #56]	; (1cdc0 <prvCheckForValidListAndQueue+0x5c>)
   1cd86:	4a0b      	ldr	r2, [pc, #44]	; (1cdb4 <prvCheckForValidListAndQueue+0x50>)
   1cd88:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1cd8a:	4b0e      	ldr	r3, [pc, #56]	; (1cdc4 <prvCheckForValidListAndQueue+0x60>)
   1cd8c:	4a0b      	ldr	r2, [pc, #44]	; (1cdbc <prvCheckForValidListAndQueue+0x58>)
   1cd8e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1cd90:	2200      	movs	r2, #0
   1cd92:	210c      	movs	r1, #12
   1cd94:	2005      	movs	r0, #5
   1cd96:	4b0c      	ldr	r3, [pc, #48]	; (1cdc8 <prvCheckForValidListAndQueue+0x64>)
   1cd98:	4798      	blx	r3
   1cd9a:	0002      	movs	r2, r0
   1cd9c:	4b04      	ldr	r3, [pc, #16]	; (1cdb0 <prvCheckForValidListAndQueue+0x4c>)
   1cd9e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1cda0:	4b0a      	ldr	r3, [pc, #40]	; (1cdcc <prvCheckForValidListAndQueue+0x68>)
   1cda2:	4798      	blx	r3
}
   1cda4:	46c0      	nop			; (mov r8, r8)
   1cda6:	46bd      	mov	sp, r7
   1cda8:	bd80      	pop	{r7, pc}
   1cdaa:	46c0      	nop			; (mov r8, r8)
   1cdac:	00019559 	.word	0x00019559
   1cdb0:	20004074 	.word	0x20004074
   1cdb4:	20004044 	.word	0x20004044
   1cdb8:	000192c5 	.word	0x000192c5
   1cdbc:	20004058 	.word	0x20004058
   1cdc0:	2000406c 	.word	0x2000406c
   1cdc4:	20004070 	.word	0x20004070
   1cdc8:	00019845 	.word	0x00019845
   1cdcc:	0001957d 	.word	0x0001957d

0001cdd0 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1cdd0:	b580      	push	{r7, lr}
   1cdd2:	b082      	sub	sp, #8
   1cdd4:	af00      	add	r7, sp, #0
   1cdd6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1cdd8:	687b      	ldr	r3, [r7, #4]
   1cdda:	7c1b      	ldrb	r3, [r3, #16]
   1cddc:	2b00      	cmp	r3, #0
   1cdde:	d00b      	beq.n	1cdf8 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1cde0:	687b      	ldr	r3, [r7, #4]
   1cde2:	689b      	ldr	r3, [r3, #8]
   1cde4:	1c5a      	adds	r2, r3, #1
   1cde6:	687b      	ldr	r3, [r7, #4]
   1cde8:	68d9      	ldr	r1, [r3, #12]
   1cdea:	4b10      	ldr	r3, [pc, #64]	; (1ce2c <advance_pointer+0x5c>)
   1cdec:	0010      	movs	r0, r2
   1cdee:	4798      	blx	r3
   1cdf0:	000b      	movs	r3, r1
   1cdf2:	001a      	movs	r2, r3
   1cdf4:	687b      	ldr	r3, [r7, #4]
   1cdf6:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1cdf8:	687b      	ldr	r3, [r7, #4]
   1cdfa:	685b      	ldr	r3, [r3, #4]
   1cdfc:	1c5a      	adds	r2, r3, #1
   1cdfe:	687b      	ldr	r3, [r7, #4]
   1ce00:	68d9      	ldr	r1, [r3, #12]
   1ce02:	4b0a      	ldr	r3, [pc, #40]	; (1ce2c <advance_pointer+0x5c>)
   1ce04:	0010      	movs	r0, r2
   1ce06:	4798      	blx	r3
   1ce08:	000b      	movs	r3, r1
   1ce0a:	001a      	movs	r2, r3
   1ce0c:	687b      	ldr	r3, [r7, #4]
   1ce0e:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1ce10:	687b      	ldr	r3, [r7, #4]
   1ce12:	685a      	ldr	r2, [r3, #4]
   1ce14:	687b      	ldr	r3, [r7, #4]
   1ce16:	689b      	ldr	r3, [r3, #8]
   1ce18:	1ad3      	subs	r3, r2, r3
   1ce1a:	425a      	negs	r2, r3
   1ce1c:	4153      	adcs	r3, r2
   1ce1e:	b2da      	uxtb	r2, r3
   1ce20:	687b      	ldr	r3, [r7, #4]
   1ce22:	741a      	strb	r2, [r3, #16]
 }
   1ce24:	46c0      	nop			; (mov r8, r8)
   1ce26:	46bd      	mov	sp, r7
   1ce28:	b002      	add	sp, #8
   1ce2a:	bd80      	pop	{r7, pc}
   1ce2c:	00031fa9 	.word	0x00031fa9

0001ce30 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1ce30:	b580      	push	{r7, lr}
   1ce32:	b082      	sub	sp, #8
   1ce34:	af00      	add	r7, sp, #0
   1ce36:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1ce38:	687b      	ldr	r3, [r7, #4]
   1ce3a:	2200      	movs	r2, #0
   1ce3c:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1ce3e:	687b      	ldr	r3, [r7, #4]
   1ce40:	689b      	ldr	r3, [r3, #8]
   1ce42:	1c5a      	adds	r2, r3, #1
   1ce44:	687b      	ldr	r3, [r7, #4]
   1ce46:	68d9      	ldr	r1, [r3, #12]
   1ce48:	4b05      	ldr	r3, [pc, #20]	; (1ce60 <retreat_pointer+0x30>)
   1ce4a:	0010      	movs	r0, r2
   1ce4c:	4798      	blx	r3
   1ce4e:	000b      	movs	r3, r1
   1ce50:	001a      	movs	r2, r3
   1ce52:	687b      	ldr	r3, [r7, #4]
   1ce54:	609a      	str	r2, [r3, #8]
 }
   1ce56:	46c0      	nop			; (mov r8, r8)
   1ce58:	46bd      	mov	sp, r7
   1ce5a:	b002      	add	sp, #8
   1ce5c:	bd80      	pop	{r7, pc}
   1ce5e:	46c0      	nop			; (mov r8, r8)
   1ce60:	00031fa9 	.word	0x00031fa9

0001ce64 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1ce64:	b580      	push	{r7, lr}
   1ce66:	b084      	sub	sp, #16
   1ce68:	af00      	add	r7, sp, #0
   1ce6a:	6078      	str	r0, [r7, #4]
   1ce6c:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1ce6e:	2014      	movs	r0, #20
   1ce70:	4b09      	ldr	r3, [pc, #36]	; (1ce98 <circular_buf_init+0x34>)
   1ce72:	4798      	blx	r3
   1ce74:	0003      	movs	r3, r0
   1ce76:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1ce78:	68fb      	ldr	r3, [r7, #12]
   1ce7a:	687a      	ldr	r2, [r7, #4]
   1ce7c:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1ce7e:	68fb      	ldr	r3, [r7, #12]
   1ce80:	683a      	ldr	r2, [r7, #0]
   1ce82:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1ce84:	68fb      	ldr	r3, [r7, #12]
   1ce86:	0018      	movs	r0, r3
   1ce88:	4b04      	ldr	r3, [pc, #16]	; (1ce9c <circular_buf_init+0x38>)
   1ce8a:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1ce8c:	68fb      	ldr	r3, [r7, #12]
 }
   1ce8e:	0018      	movs	r0, r3
   1ce90:	46bd      	mov	sp, r7
   1ce92:	b004      	add	sp, #16
   1ce94:	bd80      	pop	{r7, pc}
   1ce96:	46c0      	nop			; (mov r8, r8)
   1ce98:	000342bd 	.word	0x000342bd
   1ce9c:	0001cea1 	.word	0x0001cea1

0001cea0 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1cea0:	b580      	push	{r7, lr}
   1cea2:	b082      	sub	sp, #8
   1cea4:	af00      	add	r7, sp, #0
   1cea6:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1cea8:	687b      	ldr	r3, [r7, #4]
   1ceaa:	2200      	movs	r2, #0
   1ceac:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1ceae:	687b      	ldr	r3, [r7, #4]
   1ceb0:	2200      	movs	r2, #0
   1ceb2:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1ceb4:	687b      	ldr	r3, [r7, #4]
   1ceb6:	2200      	movs	r2, #0
   1ceb8:	741a      	strb	r2, [r3, #16]
 }
   1ceba:	46c0      	nop			; (mov r8, r8)
   1cebc:	46bd      	mov	sp, r7
   1cebe:	b002      	add	sp, #8
   1cec0:	bd80      	pop	{r7, pc}
	...

0001cec4 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1cec4:	b580      	push	{r7, lr}
   1cec6:	b082      	sub	sp, #8
   1cec8:	af00      	add	r7, sp, #0
   1ceca:	6078      	str	r0, [r7, #4]
   1cecc:	000a      	movs	r2, r1
   1cece:	1cfb      	adds	r3, r7, #3
   1ced0:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1ced2:	687b      	ldr	r3, [r7, #4]
   1ced4:	681a      	ldr	r2, [r3, #0]
   1ced6:	687b      	ldr	r3, [r7, #4]
   1ced8:	685b      	ldr	r3, [r3, #4]
   1ceda:	18d3      	adds	r3, r2, r3
   1cedc:	1cfa      	adds	r2, r7, #3
   1cede:	7812      	ldrb	r2, [r2, #0]
   1cee0:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1cee2:	687b      	ldr	r3, [r7, #4]
   1cee4:	0018      	movs	r0, r3
   1cee6:	4b03      	ldr	r3, [pc, #12]	; (1cef4 <circular_buf_put+0x30>)
   1cee8:	4798      	blx	r3
 }
   1ceea:	46c0      	nop			; (mov r8, r8)
   1ceec:	46bd      	mov	sp, r7
   1ceee:	b002      	add	sp, #8
   1cef0:	bd80      	pop	{r7, pc}
   1cef2:	46c0      	nop			; (mov r8, r8)
   1cef4:	0001cdd1 	.word	0x0001cdd1

0001cef8 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1cef8:	b580      	push	{r7, lr}
   1cefa:	b084      	sub	sp, #16
   1cefc:	af00      	add	r7, sp, #0
   1cefe:	6078      	str	r0, [r7, #4]
   1cf00:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1cf02:	2301      	movs	r3, #1
   1cf04:	425b      	negs	r3, r3
   1cf06:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1cf08:	687b      	ldr	r3, [r7, #4]
   1cf0a:	0018      	movs	r0, r3
   1cf0c:	4b0d      	ldr	r3, [pc, #52]	; (1cf44 <circular_buf_get+0x4c>)
   1cf0e:	4798      	blx	r3
   1cf10:	0003      	movs	r3, r0
   1cf12:	001a      	movs	r2, r3
   1cf14:	2301      	movs	r3, #1
   1cf16:	4053      	eors	r3, r2
   1cf18:	b2db      	uxtb	r3, r3
   1cf1a:	2b00      	cmp	r3, #0
   1cf1c:	d00d      	beq.n	1cf3a <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1cf1e:	687b      	ldr	r3, [r7, #4]
   1cf20:	681a      	ldr	r2, [r3, #0]
   1cf22:	687b      	ldr	r3, [r7, #4]
   1cf24:	689b      	ldr	r3, [r3, #8]
   1cf26:	18d3      	adds	r3, r2, r3
   1cf28:	781a      	ldrb	r2, [r3, #0]
   1cf2a:	683b      	ldr	r3, [r7, #0]
   1cf2c:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1cf2e:	687b      	ldr	r3, [r7, #4]
   1cf30:	0018      	movs	r0, r3
   1cf32:	4b05      	ldr	r3, [pc, #20]	; (1cf48 <circular_buf_get+0x50>)
   1cf34:	4798      	blx	r3

		 r = 0;
   1cf36:	2300      	movs	r3, #0
   1cf38:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1cf3a:	68fb      	ldr	r3, [r7, #12]
 }
   1cf3c:	0018      	movs	r0, r3
   1cf3e:	46bd      	mov	sp, r7
   1cf40:	b004      	add	sp, #16
   1cf42:	bd80      	pop	{r7, pc}
   1cf44:	0001cf4d 	.word	0x0001cf4d
   1cf48:	0001ce31 	.word	0x0001ce31

0001cf4c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1cf4c:	b580      	push	{r7, lr}
   1cf4e:	b082      	sub	sp, #8
   1cf50:	af00      	add	r7, sp, #0
   1cf52:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1cf54:	687b      	ldr	r3, [r7, #4]
   1cf56:	7c1b      	ldrb	r3, [r3, #16]
   1cf58:	2201      	movs	r2, #1
   1cf5a:	4053      	eors	r3, r2
   1cf5c:	b2db      	uxtb	r3, r3
   1cf5e:	2b00      	cmp	r3, #0
   1cf60:	d007      	beq.n	1cf72 <circular_buf_empty+0x26>
   1cf62:	687b      	ldr	r3, [r7, #4]
   1cf64:	685a      	ldr	r2, [r3, #4]
   1cf66:	687b      	ldr	r3, [r7, #4]
   1cf68:	689b      	ldr	r3, [r3, #8]
   1cf6a:	429a      	cmp	r2, r3
   1cf6c:	d101      	bne.n	1cf72 <circular_buf_empty+0x26>
   1cf6e:	2301      	movs	r3, #1
   1cf70:	e000      	b.n	1cf74 <circular_buf_empty+0x28>
   1cf72:	2300      	movs	r3, #0
   1cf74:	1c1a      	adds	r2, r3, #0
   1cf76:	2301      	movs	r3, #1
   1cf78:	4013      	ands	r3, r2
   1cf7a:	b2db      	uxtb	r3, r3
 }
   1cf7c:	0018      	movs	r0, r3
   1cf7e:	46bd      	mov	sp, r7
   1cf80:	b002      	add	sp, #8
   1cf82:	bd80      	pop	{r7, pc}

0001cf84 <system_interrupt_enable>:
{
   1cf84:	b580      	push	{r7, lr}
   1cf86:	b082      	sub	sp, #8
   1cf88:	af00      	add	r7, sp, #0
   1cf8a:	0002      	movs	r2, r0
   1cf8c:	1dfb      	adds	r3, r7, #7
   1cf8e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1cf90:	4b06      	ldr	r3, [pc, #24]	; (1cfac <system_interrupt_enable+0x28>)
   1cf92:	1dfa      	adds	r2, r7, #7
   1cf94:	7812      	ldrb	r2, [r2, #0]
   1cf96:	0011      	movs	r1, r2
   1cf98:	221f      	movs	r2, #31
   1cf9a:	400a      	ands	r2, r1
   1cf9c:	2101      	movs	r1, #1
   1cf9e:	4091      	lsls	r1, r2
   1cfa0:	000a      	movs	r2, r1
   1cfa2:	601a      	str	r2, [r3, #0]
}
   1cfa4:	46c0      	nop			; (mov r8, r8)
   1cfa6:	46bd      	mov	sp, r7
   1cfa8:	b002      	add	sp, #8
   1cfaa:	bd80      	pop	{r7, pc}
   1cfac:	e000e100 	.word	0xe000e100

0001cfb0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1cfb0:	b580      	push	{r7, lr}
   1cfb2:	b084      	sub	sp, #16
   1cfb4:	af00      	add	r7, sp, #0
   1cfb6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1cfb8:	687b      	ldr	r3, [r7, #4]
   1cfba:	681b      	ldr	r3, [r3, #0]
   1cfbc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1cfbe:	68fb      	ldr	r3, [r7, #12]
   1cfc0:	69db      	ldr	r3, [r3, #28]
   1cfc2:	1e5a      	subs	r2, r3, #1
   1cfc4:	4193      	sbcs	r3, r2
   1cfc6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1cfc8:	0018      	movs	r0, r3
   1cfca:	46bd      	mov	sp, r7
   1cfcc:	b004      	add	sp, #16
   1cfce:	bd80      	pop	{r7, pc}

0001cfd0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1cfd0:	b580      	push	{r7, lr}
   1cfd2:	b082      	sub	sp, #8
   1cfd4:	af00      	add	r7, sp, #0
   1cfd6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1cfd8:	46c0      	nop			; (mov r8, r8)
   1cfda:	687b      	ldr	r3, [r7, #4]
   1cfdc:	0018      	movs	r0, r3
   1cfde:	4b04      	ldr	r3, [pc, #16]	; (1cff0 <_usart_wait_for_sync+0x20>)
   1cfe0:	4798      	blx	r3
   1cfe2:	1e03      	subs	r3, r0, #0
   1cfe4:	d1f9      	bne.n	1cfda <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1cfe6:	46c0      	nop			; (mov r8, r8)
   1cfe8:	46bd      	mov	sp, r7
   1cfea:	b002      	add	sp, #8
   1cfec:	bd80      	pop	{r7, pc}
   1cfee:	46c0      	nop			; (mov r8, r8)
   1cff0:	0001cfb1 	.word	0x0001cfb1

0001cff4 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1cff4:	b580      	push	{r7, lr}
   1cff6:	b082      	sub	sp, #8
   1cff8:	af00      	add	r7, sp, #0
   1cffa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1cffc:	687b      	ldr	r3, [r7, #4]
   1cffe:	2280      	movs	r2, #128	; 0x80
   1d000:	05d2      	lsls	r2, r2, #23
   1d002:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1d004:	687b      	ldr	r3, [r7, #4]
   1d006:	2200      	movs	r2, #0
   1d008:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1d00a:	687b      	ldr	r3, [r7, #4]
   1d00c:	22ff      	movs	r2, #255	; 0xff
   1d00e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1d010:	687b      	ldr	r3, [r7, #4]
   1d012:	2200      	movs	r2, #0
   1d014:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1d016:	687b      	ldr	r3, [r7, #4]
   1d018:	2200      	movs	r2, #0
   1d01a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1d01c:	687b      	ldr	r3, [r7, #4]
   1d01e:	2296      	movs	r2, #150	; 0x96
   1d020:	0192      	lsls	r2, r2, #6
   1d022:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1d024:	687b      	ldr	r3, [r7, #4]
   1d026:	2224      	movs	r2, #36	; 0x24
   1d028:	2101      	movs	r1, #1
   1d02a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1d02c:	687b      	ldr	r3, [r7, #4]
   1d02e:	2225      	movs	r2, #37	; 0x25
   1d030:	2101      	movs	r1, #1
   1d032:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1d034:	687b      	ldr	r3, [r7, #4]
   1d036:	2226      	movs	r2, #38	; 0x26
   1d038:	2100      	movs	r1, #0
   1d03a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1d03c:	687b      	ldr	r3, [r7, #4]
   1d03e:	2227      	movs	r2, #39	; 0x27
   1d040:	2100      	movs	r1, #0
   1d042:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1d044:	687b      	ldr	r3, [r7, #4]
   1d046:	2200      	movs	r2, #0
   1d048:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1d04a:	687b      	ldr	r3, [r7, #4]
   1d04c:	2288      	movs	r2, #136	; 0x88
   1d04e:	0352      	lsls	r2, r2, #13
   1d050:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1d052:	687b      	ldr	r3, [r7, #4]
   1d054:	222c      	movs	r2, #44	; 0x2c
   1d056:	2100      	movs	r1, #0
   1d058:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1d05a:	687b      	ldr	r3, [r7, #4]
   1d05c:	222d      	movs	r2, #45	; 0x2d
   1d05e:	2100      	movs	r1, #0
   1d060:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1d062:	687b      	ldr	r3, [r7, #4]
   1d064:	2200      	movs	r2, #0
   1d066:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1d068:	687b      	ldr	r3, [r7, #4]
   1d06a:	2200      	movs	r2, #0
   1d06c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1d06e:	687b      	ldr	r3, [r7, #4]
   1d070:	2200      	movs	r2, #0
   1d072:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1d074:	687b      	ldr	r3, [r7, #4]
   1d076:	2200      	movs	r2, #0
   1d078:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1d07a:	687b      	ldr	r3, [r7, #4]
   1d07c:	2200      	movs	r2, #0
   1d07e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1d080:	687b      	ldr	r3, [r7, #4]
   1d082:	2200      	movs	r2, #0
   1d084:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1d086:	687b      	ldr	r3, [r7, #4]
   1d088:	2200      	movs	r2, #0
   1d08a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1d08c:	687b      	ldr	r3, [r7, #4]
   1d08e:	2200      	movs	r2, #0
   1d090:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1d092:	687b      	ldr	r3, [r7, #4]
   1d094:	2200      	movs	r2, #0
   1d096:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1d098:	687b      	ldr	r3, [r7, #4]
   1d09a:	2200      	movs	r2, #0
   1d09c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1d09e:	687b      	ldr	r3, [r7, #4]
   1d0a0:	2213      	movs	r2, #19
   1d0a2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1d0a4:	687b      	ldr	r3, [r7, #4]
   1d0a6:	2200      	movs	r2, #0
   1d0a8:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1d0aa:	46c0      	nop			; (mov r8, r8)
   1d0ac:	46bd      	mov	sp, r7
   1d0ae:	b002      	add	sp, #8
   1d0b0:	bd80      	pop	{r7, pc}
	...

0001d0b4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1d0b4:	b580      	push	{r7, lr}
   1d0b6:	b084      	sub	sp, #16
   1d0b8:	af00      	add	r7, sp, #0
   1d0ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1d0bc:	687b      	ldr	r3, [r7, #4]
   1d0be:	681b      	ldr	r3, [r3, #0]
   1d0c0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1d0c2:	687b      	ldr	r3, [r7, #4]
   1d0c4:	681b      	ldr	r3, [r3, #0]
   1d0c6:	0018      	movs	r0, r3
   1d0c8:	4b09      	ldr	r3, [pc, #36]	; (1d0f0 <usart_enable+0x3c>)
   1d0ca:	4798      	blx	r3
   1d0cc:	0003      	movs	r3, r0
   1d0ce:	0018      	movs	r0, r3
   1d0d0:	4b08      	ldr	r3, [pc, #32]	; (1d0f4 <usart_enable+0x40>)
   1d0d2:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1d0d4:	687b      	ldr	r3, [r7, #4]
   1d0d6:	0018      	movs	r0, r3
   1d0d8:	4b07      	ldr	r3, [pc, #28]	; (1d0f8 <usart_enable+0x44>)
   1d0da:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1d0dc:	68fb      	ldr	r3, [r7, #12]
   1d0de:	681b      	ldr	r3, [r3, #0]
   1d0e0:	2202      	movs	r2, #2
   1d0e2:	431a      	orrs	r2, r3
   1d0e4:	68fb      	ldr	r3, [r7, #12]
   1d0e6:	601a      	str	r2, [r3, #0]
}
   1d0e8:	46c0      	nop			; (mov r8, r8)
   1d0ea:	46bd      	mov	sp, r7
   1d0ec:	b004      	add	sp, #16
   1d0ee:	bd80      	pop	{r7, pc}
   1d0f0:	00026ab9 	.word	0x00026ab9
   1d0f4:	0001cf85 	.word	0x0001cf85
   1d0f8:	0001cfd1 	.word	0x0001cfd1

0001d0fc <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1d0fc:	b580      	push	{r7, lr}
   1d0fe:	b082      	sub	sp, #8
   1d100:	af00      	add	r7, sp, #0
   1d102:	6078      	str	r0, [r7, #4]
   1d104:	000a      	movs	r2, r1
   1d106:	1cfb      	adds	r3, r7, #3
   1d108:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1d10a:	687b      	ldr	r3, [r7, #4]
   1d10c:	2231      	movs	r2, #49	; 0x31
   1d10e:	5c9b      	ldrb	r3, [r3, r2]
   1d110:	b25a      	sxtb	r2, r3
   1d112:	1cfb      	adds	r3, r7, #3
   1d114:	781b      	ldrb	r3, [r3, #0]
   1d116:	2101      	movs	r1, #1
   1d118:	4099      	lsls	r1, r3
   1d11a:	000b      	movs	r3, r1
   1d11c:	b25b      	sxtb	r3, r3
   1d11e:	4313      	orrs	r3, r2
   1d120:	b25b      	sxtb	r3, r3
   1d122:	b2d9      	uxtb	r1, r3
   1d124:	687b      	ldr	r3, [r7, #4]
   1d126:	2231      	movs	r2, #49	; 0x31
   1d128:	5499      	strb	r1, [r3, r2]

}
   1d12a:	46c0      	nop			; (mov r8, r8)
   1d12c:	46bd      	mov	sp, r7
   1d12e:	b002      	add	sp, #8
   1d130:	bd80      	pop	{r7, pc}
	...

0001d134 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1d134:	b580      	push	{r7, lr}
   1d136:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1d138:	2380      	movs	r3, #128	; 0x80
   1d13a:	009a      	lsls	r2, r3, #2
   1d13c:	4b0f      	ldr	r3, [pc, #60]	; (1d17c <InitializeSerialConsole+0x48>)
   1d13e:	0011      	movs	r1, r2
   1d140:	0018      	movs	r0, r3
   1d142:	4b0f      	ldr	r3, [pc, #60]	; (1d180 <InitializeSerialConsole+0x4c>)
   1d144:	4798      	blx	r3
   1d146:	0002      	movs	r2, r0
   1d148:	4b0e      	ldr	r3, [pc, #56]	; (1d184 <InitializeSerialConsole+0x50>)
   1d14a:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1d14c:	2380      	movs	r3, #128	; 0x80
   1d14e:	009a      	lsls	r2, r3, #2
   1d150:	4b0d      	ldr	r3, [pc, #52]	; (1d188 <InitializeSerialConsole+0x54>)
   1d152:	0011      	movs	r1, r2
   1d154:	0018      	movs	r0, r3
   1d156:	4b0a      	ldr	r3, [pc, #40]	; (1d180 <InitializeSerialConsole+0x4c>)
   1d158:	4798      	blx	r3
   1d15a:	0002      	movs	r2, r0
   1d15c:	4b0b      	ldr	r3, [pc, #44]	; (1d18c <InitializeSerialConsole+0x58>)
   1d15e:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1d160:	4b0b      	ldr	r3, [pc, #44]	; (1d190 <InitializeSerialConsole+0x5c>)
   1d162:	4798      	blx	r3
    configure_usart_callbacks();
   1d164:	4b0b      	ldr	r3, [pc, #44]	; (1d194 <InitializeSerialConsole+0x60>)
   1d166:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1d168:	490b      	ldr	r1, [pc, #44]	; (1d198 <InitializeSerialConsole+0x64>)
   1d16a:	4b0c      	ldr	r3, [pc, #48]	; (1d19c <InitializeSerialConsole+0x68>)
   1d16c:	2201      	movs	r2, #1
   1d16e:	0018      	movs	r0, r3
   1d170:	4b0b      	ldr	r3, [pc, #44]	; (1d1a0 <InitializeSerialConsole+0x6c>)
   1d172:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1d174:	46c0      	nop			; (mov r8, r8)
   1d176:	46bd      	mov	sp, r7
   1d178:	bd80      	pop	{r7, pc}
   1d17a:	46c0      	nop			; (mov r8, r8)
   1d17c:	2000563c 	.word	0x2000563c
   1d180:	0001ce65 	.word	0x0001ce65
   1d184:	20005434 	.word	0x20005434
   1d188:	2000543c 	.word	0x2000543c
   1d18c:	20005840 	.word	0x20005840
   1d190:	0001d309 	.word	0x0001d309
   1d194:	0001d381 	.word	0x0001d381
   1d198:	20005438 	.word	0x20005438
   1d19c:	20005400 	.word	0x20005400
   1d1a0:	00028361 	.word	0x00028361

0001d1a4 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1d1a4:	b580      	push	{r7, lr}
   1d1a6:	b084      	sub	sp, #16
   1d1a8:	af00      	add	r7, sp, #0
   1d1aa:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1d1ac:	4b1a      	ldr	r3, [pc, #104]	; (1d218 <SerialConsoleWriteString+0x74>)
   1d1ae:	4798      	blx	r3
    if (string != NULL) {
   1d1b0:	687b      	ldr	r3, [r7, #4]
   1d1b2:	2b00      	cmp	r3, #0
   1d1b4:	d02a      	beq.n	1d20c <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1d1b6:	2300      	movs	r3, #0
   1d1b8:	60fb      	str	r3, [r7, #12]
   1d1ba:	e00b      	b.n	1d1d4 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1d1bc:	4b17      	ldr	r3, [pc, #92]	; (1d21c <SerialConsoleWriteString+0x78>)
   1d1be:	6818      	ldr	r0, [r3, #0]
   1d1c0:	687a      	ldr	r2, [r7, #4]
   1d1c2:	68fb      	ldr	r3, [r7, #12]
   1d1c4:	18d3      	adds	r3, r2, r3
   1d1c6:	781b      	ldrb	r3, [r3, #0]
   1d1c8:	0019      	movs	r1, r3
   1d1ca:	4b15      	ldr	r3, [pc, #84]	; (1d220 <SerialConsoleWriteString+0x7c>)
   1d1cc:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1d1ce:	68fb      	ldr	r3, [r7, #12]
   1d1d0:	3301      	adds	r3, #1
   1d1d2:	60fb      	str	r3, [r7, #12]
   1d1d4:	687b      	ldr	r3, [r7, #4]
   1d1d6:	0018      	movs	r0, r3
   1d1d8:	4b12      	ldr	r3, [pc, #72]	; (1d224 <SerialConsoleWriteString+0x80>)
   1d1da:	4798      	blx	r3
   1d1dc:	0002      	movs	r2, r0
   1d1de:	68fb      	ldr	r3, [r7, #12]
   1d1e0:	429a      	cmp	r2, r3
   1d1e2:	d8eb      	bhi.n	1d1bc <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1d1e4:	4b10      	ldr	r3, [pc, #64]	; (1d228 <SerialConsoleWriteString+0x84>)
   1d1e6:	2101      	movs	r1, #1
   1d1e8:	0018      	movs	r0, r3
   1d1ea:	4b10      	ldr	r3, [pc, #64]	; (1d22c <SerialConsoleWriteString+0x88>)
   1d1ec:	4798      	blx	r3
   1d1ee:	1e03      	subs	r3, r0, #0
   1d1f0:	d10c      	bne.n	1d20c <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1d1f2:	4b0a      	ldr	r3, [pc, #40]	; (1d21c <SerialConsoleWriteString+0x78>)
   1d1f4:	681b      	ldr	r3, [r3, #0]
   1d1f6:	4a0e      	ldr	r2, [pc, #56]	; (1d230 <SerialConsoleWriteString+0x8c>)
   1d1f8:	0011      	movs	r1, r2
   1d1fa:	0018      	movs	r0, r3
   1d1fc:	4b0d      	ldr	r3, [pc, #52]	; (1d234 <SerialConsoleWriteString+0x90>)
   1d1fe:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1d200:	490b      	ldr	r1, [pc, #44]	; (1d230 <SerialConsoleWriteString+0x8c>)
   1d202:	4b09      	ldr	r3, [pc, #36]	; (1d228 <SerialConsoleWriteString+0x84>)
   1d204:	2201      	movs	r2, #1
   1d206:	0018      	movs	r0, r3
   1d208:	4b0b      	ldr	r3, [pc, #44]	; (1d238 <SerialConsoleWriteString+0x94>)
   1d20a:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1d20c:	4b0b      	ldr	r3, [pc, #44]	; (1d23c <SerialConsoleWriteString+0x98>)
   1d20e:	4798      	blx	r3
}
   1d210:	46c0      	nop			; (mov r8, r8)
   1d212:	46bd      	mov	sp, r7
   1d214:	b004      	add	sp, #16
   1d216:	bd80      	pop	{r7, pc}
   1d218:	0001b811 	.word	0x0001b811
   1d21c:	20005840 	.word	0x20005840
   1d220:	0001cec5 	.word	0x0001cec5
   1d224:	000346d3 	.word	0x000346d3
   1d228:	20005400 	.word	0x20005400
   1d22c:	000283a9 	.word	0x000283a9
   1d230:	2000583c 	.word	0x2000583c
   1d234:	0001cef9 	.word	0x0001cef9
   1d238:	00028319 	.word	0x00028319
   1d23c:	0001b829 	.word	0x0001b829

0001d240 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1d240:	b580      	push	{r7, lr}
   1d242:	b084      	sub	sp, #16
   1d244:	af00      	add	r7, sp, #0
   1d246:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1d248:	4b08      	ldr	r3, [pc, #32]	; (1d26c <SerialConsoleReadCharacter+0x2c>)
   1d24a:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1d24c:	4b08      	ldr	r3, [pc, #32]	; (1d270 <SerialConsoleReadCharacter+0x30>)
   1d24e:	681b      	ldr	r3, [r3, #0]
   1d250:	687a      	ldr	r2, [r7, #4]
   1d252:	0011      	movs	r1, r2
   1d254:	0018      	movs	r0, r3
   1d256:	4b07      	ldr	r3, [pc, #28]	; (1d274 <SerialConsoleReadCharacter+0x34>)
   1d258:	4798      	blx	r3
   1d25a:	0003      	movs	r3, r0
   1d25c:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1d25e:	4b06      	ldr	r3, [pc, #24]	; (1d278 <SerialConsoleReadCharacter+0x38>)
   1d260:	4798      	blx	r3
    return a;
   1d262:	68fb      	ldr	r3, [r7, #12]
}
   1d264:	0018      	movs	r0, r3
   1d266:	46bd      	mov	sp, r7
   1d268:	b004      	add	sp, #16
   1d26a:	bd80      	pop	{r7, pc}
   1d26c:	0001b811 	.word	0x0001b811
   1d270:	20005434 	.word	0x20005434
   1d274:	0001cef9 	.word	0x0001cef9
   1d278:	0001b829 	.word	0x0001b829

0001d27c <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1d27c:	b580      	push	{r7, lr}
   1d27e:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1d280:	4b02      	ldr	r3, [pc, #8]	; (1d28c <getLogLevel+0x10>)
   1d282:	781b      	ldrb	r3, [r3, #0]
}
   1d284:	0018      	movs	r0, r3
   1d286:	46bd      	mov	sp, r7
   1d288:	bd80      	pop	{r7, pc}
   1d28a:	46c0      	nop			; (mov r8, r8)
   1d28c:	20004080 	.word	0x20004080

0001d290 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1d290:	b40e      	push	{r1, r2, r3}
   1d292:	b590      	push	{r4, r7, lr}
   1d294:	b084      	sub	sp, #16
   1d296:	af00      	add	r7, sp, #0
   1d298:	0002      	movs	r2, r0
   1d29a:	1dfb      	adds	r3, r7, #7
   1d29c:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1d29e:	4b0e      	ldr	r3, [pc, #56]	; (1d2d8 <LogMessage+0x48>)
   1d2a0:	4798      	blx	r3
   1d2a2:	0003      	movs	r3, r0
   1d2a4:	001a      	movs	r2, r3
   1d2a6:	1dfb      	adds	r3, r7, #7
   1d2a8:	781b      	ldrb	r3, [r3, #0]
   1d2aa:	4293      	cmp	r3, r2
   1d2ac:	d30c      	bcc.n	1d2c8 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1d2ae:	2320      	movs	r3, #32
   1d2b0:	18fb      	adds	r3, r7, r3
   1d2b2:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1d2b4:	68fb      	ldr	r3, [r7, #12]
   1d2b6:	69fa      	ldr	r2, [r7, #28]
   1d2b8:	4808      	ldr	r0, [pc, #32]	; (1d2dc <LogMessage+0x4c>)
   1d2ba:	217f      	movs	r1, #127	; 0x7f
   1d2bc:	4c08      	ldr	r4, [pc, #32]	; (1d2e0 <LogMessage+0x50>)
   1d2be:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1d2c0:	4b06      	ldr	r3, [pc, #24]	; (1d2dc <LogMessage+0x4c>)
   1d2c2:	0018      	movs	r0, r3
   1d2c4:	4b07      	ldr	r3, [pc, #28]	; (1d2e4 <LogMessage+0x54>)
   1d2c6:	4798      	blx	r3
        va_end(ap);
    }
};
   1d2c8:	46c0      	nop			; (mov r8, r8)
   1d2ca:	46bd      	mov	sp, r7
   1d2cc:	b004      	add	sp, #16
   1d2ce:	bc90      	pop	{r4, r7}
   1d2d0:	bc08      	pop	{r3}
   1d2d2:	b003      	add	sp, #12
   1d2d4:	4718      	bx	r3
   1d2d6:	46c0      	nop			; (mov r8, r8)
   1d2d8:	0001d27d 	.word	0x0001d27d
   1d2dc:	20005380 	.word	0x20005380
   1d2e0:	0003490d 	.word	0x0003490d
   1d2e4:	0001d1a5 	.word	0x0001d1a5

0001d2e8 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   1d2e8:	b40f      	push	{r0, r1, r2, r3}
   1d2ea:	b580      	push	{r7, lr}
   1d2ec:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   1d2ee:	68bb      	ldr	r3, [r7, #8]
   1d2f0:	0019      	movs	r1, r3
   1d2f2:	2001      	movs	r0, #1
   1d2f4:	4b03      	ldr	r3, [pc, #12]	; (1d304 <LogMessageDebug+0x1c>)
   1d2f6:	4798      	blx	r3
};
   1d2f8:	46c0      	nop			; (mov r8, r8)
   1d2fa:	46bd      	mov	sp, r7
   1d2fc:	bc80      	pop	{r7}
   1d2fe:	bc08      	pop	{r3}
   1d300:	b004      	add	sp, #16
   1d302:	4718      	bx	r3
   1d304:	0001d291 	.word	0x0001d291

0001d308 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1d308:	b580      	push	{r7, lr}
   1d30a:	b090      	sub	sp, #64	; 0x40
   1d30c:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1d30e:	003b      	movs	r3, r7
   1d310:	0018      	movs	r0, r3
   1d312:	4b14      	ldr	r3, [pc, #80]	; (1d364 <configure_usart+0x5c>)
   1d314:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1d316:	003b      	movs	r3, r7
   1d318:	22e1      	movs	r2, #225	; 0xe1
   1d31a:	0252      	lsls	r2, r2, #9
   1d31c:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1d31e:	003b      	movs	r3, r7
   1d320:	22c4      	movs	r2, #196	; 0xc4
   1d322:	0392      	lsls	r2, r2, #14
   1d324:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1d326:	003b      	movs	r3, r7
   1d328:	2201      	movs	r2, #1
   1d32a:	4252      	negs	r2, r2
   1d32c:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1d32e:	003b      	movs	r3, r7
   1d330:	2201      	movs	r2, #1
   1d332:	4252      	negs	r2, r2
   1d334:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1d336:	003b      	movs	r3, r7
   1d338:	4a0b      	ldr	r2, [pc, #44]	; (1d368 <configure_usart+0x60>)
   1d33a:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1d33c:	003b      	movs	r3, r7
   1d33e:	4a0b      	ldr	r2, [pc, #44]	; (1d36c <configure_usart+0x64>)
   1d340:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1d342:	46c0      	nop			; (mov r8, r8)
   1d344:	003a      	movs	r2, r7
   1d346:	490a      	ldr	r1, [pc, #40]	; (1d370 <configure_usart+0x68>)
   1d348:	4b0a      	ldr	r3, [pc, #40]	; (1d374 <configure_usart+0x6c>)
   1d34a:	0018      	movs	r0, r3
   1d34c:	4b0a      	ldr	r3, [pc, #40]	; (1d378 <configure_usart+0x70>)
   1d34e:	4798      	blx	r3
   1d350:	1e03      	subs	r3, r0, #0
   1d352:	d1f7      	bne.n	1d344 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1d354:	4b07      	ldr	r3, [pc, #28]	; (1d374 <configure_usart+0x6c>)
   1d356:	0018      	movs	r0, r3
   1d358:	4b08      	ldr	r3, [pc, #32]	; (1d37c <configure_usart+0x74>)
   1d35a:	4798      	blx	r3
}
   1d35c:	46c0      	nop			; (mov r8, r8)
   1d35e:	46bd      	mov	sp, r7
   1d360:	b010      	add	sp, #64	; 0x40
   1d362:	bd80      	pop	{r7, pc}
   1d364:	0001cff5 	.word	0x0001cff5
   1d368:	002a0003 	.word	0x002a0003
   1d36c:	002b0003 	.word	0x002b0003
   1d370:	42001800 	.word	0x42001800
   1d374:	20005400 	.word	0x20005400
   1d378:	00027f1d 	.word	0x00027f1d
   1d37c:	0001d0b5 	.word	0x0001d0b5

0001d380 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1d380:	b580      	push	{r7, lr}
   1d382:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1d384:	490c      	ldr	r1, [pc, #48]	; (1d3b8 <configure_usart_callbacks+0x38>)
   1d386:	4b0d      	ldr	r3, [pc, #52]	; (1d3bc <configure_usart_callbacks+0x3c>)
   1d388:	2200      	movs	r2, #0
   1d38a:	0018      	movs	r0, r3
   1d38c:	4b0c      	ldr	r3, [pc, #48]	; (1d3c0 <configure_usart_callbacks+0x40>)
   1d38e:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1d390:	490c      	ldr	r1, [pc, #48]	; (1d3c4 <configure_usart_callbacks+0x44>)
   1d392:	4b0a      	ldr	r3, [pc, #40]	; (1d3bc <configure_usart_callbacks+0x3c>)
   1d394:	2201      	movs	r2, #1
   1d396:	0018      	movs	r0, r3
   1d398:	4b09      	ldr	r3, [pc, #36]	; (1d3c0 <configure_usart_callbacks+0x40>)
   1d39a:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1d39c:	4b07      	ldr	r3, [pc, #28]	; (1d3bc <configure_usart_callbacks+0x3c>)
   1d39e:	2100      	movs	r1, #0
   1d3a0:	0018      	movs	r0, r3
   1d3a2:	4b09      	ldr	r3, [pc, #36]	; (1d3c8 <configure_usart_callbacks+0x48>)
   1d3a4:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1d3a6:	4b05      	ldr	r3, [pc, #20]	; (1d3bc <configure_usart_callbacks+0x3c>)
   1d3a8:	2101      	movs	r1, #1
   1d3aa:	0018      	movs	r0, r3
   1d3ac:	4b06      	ldr	r3, [pc, #24]	; (1d3c8 <configure_usart_callbacks+0x48>)
   1d3ae:	4798      	blx	r3
}
   1d3b0:	46c0      	nop			; (mov r8, r8)
   1d3b2:	46bd      	mov	sp, r7
   1d3b4:	bd80      	pop	{r7, pc}
   1d3b6:	46c0      	nop			; (mov r8, r8)
   1d3b8:	0001d415 	.word	0x0001d415
   1d3bc:	20005400 	.word	0x20005400
   1d3c0:	000282d1 	.word	0x000282d1
   1d3c4:	0001d3cd 	.word	0x0001d3cd
   1d3c8:	0001d0fd 	.word	0x0001d0fd

0001d3cc <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1d3cc:	b580      	push	{r7, lr}
   1d3ce:	b082      	sub	sp, #8
   1d3d0:	af00      	add	r7, sp, #0
   1d3d2:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1d3d4:	4b09      	ldr	r3, [pc, #36]	; (1d3fc <usart_read_callback+0x30>)
   1d3d6:	681a      	ldr	r2, [r3, #0]
   1d3d8:	4b09      	ldr	r3, [pc, #36]	; (1d400 <usart_read_callback+0x34>)
   1d3da:	781b      	ldrb	r3, [r3, #0]
   1d3dc:	0019      	movs	r1, r3
   1d3de:	0010      	movs	r0, r2
   1d3e0:	4b08      	ldr	r3, [pc, #32]	; (1d404 <usart_read_callback+0x38>)
   1d3e2:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1d3e4:	4906      	ldr	r1, [pc, #24]	; (1d400 <usart_read_callback+0x34>)
   1d3e6:	4b08      	ldr	r3, [pc, #32]	; (1d408 <usart_read_callback+0x3c>)
   1d3e8:	2201      	movs	r2, #1
   1d3ea:	0018      	movs	r0, r3
   1d3ec:	4b07      	ldr	r3, [pc, #28]	; (1d40c <usart_read_callback+0x40>)
   1d3ee:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1d3f0:	4b07      	ldr	r3, [pc, #28]	; (1d410 <usart_read_callback+0x44>)
   1d3f2:	4798      	blx	r3
}
   1d3f4:	46c0      	nop			; (mov r8, r8)
   1d3f6:	46bd      	mov	sp, r7
   1d3f8:	b002      	add	sp, #8
   1d3fa:	bd80      	pop	{r7, pc}
   1d3fc:	20005434 	.word	0x20005434
   1d400:	20005438 	.word	0x20005438
   1d404:	0001cec5 	.word	0x0001cec5
   1d408:	20005400 	.word	0x20005400
   1d40c:	00028361 	.word	0x00028361
   1d410:	00013ad1 	.word	0x00013ad1

0001d414 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1d414:	b580      	push	{r7, lr}
   1d416:	b082      	sub	sp, #8
   1d418:	af00      	add	r7, sp, #0
   1d41a:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1d41c:	4b09      	ldr	r3, [pc, #36]	; (1d444 <usart_write_callback+0x30>)
   1d41e:	681b      	ldr	r3, [r3, #0]
   1d420:	4a09      	ldr	r2, [pc, #36]	; (1d448 <usart_write_callback+0x34>)
   1d422:	0011      	movs	r1, r2
   1d424:	0018      	movs	r0, r3
   1d426:	4b09      	ldr	r3, [pc, #36]	; (1d44c <usart_write_callback+0x38>)
   1d428:	4798      	blx	r3
   1d42a:	0003      	movs	r3, r0
   1d42c:	3301      	adds	r3, #1
   1d42e:	d005      	beq.n	1d43c <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1d430:	4905      	ldr	r1, [pc, #20]	; (1d448 <usart_write_callback+0x34>)
   1d432:	4b07      	ldr	r3, [pc, #28]	; (1d450 <usart_write_callback+0x3c>)
   1d434:	2201      	movs	r2, #1
   1d436:	0018      	movs	r0, r3
   1d438:	4b06      	ldr	r3, [pc, #24]	; (1d454 <usart_write_callback+0x40>)
   1d43a:	4798      	blx	r3
    }
}
   1d43c:	46c0      	nop			; (mov r8, r8)
   1d43e:	46bd      	mov	sp, r7
   1d440:	b002      	add	sp, #8
   1d442:	bd80      	pop	{r7, pc}
   1d444:	20005840 	.word	0x20005840
   1d448:	2000583c 	.word	0x2000583c
   1d44c:	0001cef9 	.word	0x0001cef9
   1d450:	20005400 	.word	0x20005400
   1d454:	00028319 	.word	0x00028319

0001d458 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1d458:	b590      	push	{r4, r7, lr}
   1d45a:	b087      	sub	sp, #28
   1d45c:	af00      	add	r7, sp, #0
   1d45e:	60f8      	str	r0, [r7, #12]
   1d460:	000c      	movs	r4, r1
   1d462:	0010      	movs	r0, r2
   1d464:	0019      	movs	r1, r3
   1d466:	230a      	movs	r3, #10
   1d468:	18fb      	adds	r3, r7, r3
   1d46a:	1c22      	adds	r2, r4, #0
   1d46c:	801a      	strh	r2, [r3, #0]
   1d46e:	2308      	movs	r3, #8
   1d470:	18fb      	adds	r3, r7, r3
   1d472:	1c02      	adds	r2, r0, #0
   1d474:	801a      	strh	r2, [r3, #0]
   1d476:	1dfb      	adds	r3, r7, #7
   1d478:	1c0a      	adds	r2, r1, #0
   1d47a:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1d47c:	230a      	movs	r3, #10
   1d47e:	18fb      	adds	r3, r7, r3
   1d480:	881a      	ldrh	r2, [r3, #0]
   1d482:	2308      	movs	r3, #8
   1d484:	18fb      	adds	r3, r7, r3
   1d486:	881b      	ldrh	r3, [r3, #0]
   1d488:	1ad3      	subs	r3, r2, r3
   1d48a:	3307      	adds	r3, #7
   1d48c:	2b00      	cmp	r3, #0
   1d48e:	da00      	bge.n	1d492 <SDMMC_UNSTUFF_BITS+0x3a>
   1d490:	3307      	adds	r3, #7
   1d492:	10db      	asrs	r3, r3, #3
   1d494:	3b01      	subs	r3, #1
   1d496:	68fa      	ldr	r2, [r7, #12]
   1d498:	18d3      	adds	r3, r2, r3
   1d49a:	781b      	ldrb	r3, [r3, #0]
   1d49c:	0019      	movs	r1, r3
   1d49e:	2308      	movs	r3, #8
   1d4a0:	18fb      	adds	r3, r7, r3
   1d4a2:	881b      	ldrh	r3, [r3, #0]
   1d4a4:	2207      	movs	r2, #7
   1d4a6:	4013      	ands	r3, r2
   1d4a8:	4119      	asrs	r1, r3
   1d4aa:	000b      	movs	r3, r1
   1d4ac:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1d4ae:	2308      	movs	r3, #8
   1d4b0:	18fb      	adds	r3, r7, r3
   1d4b2:	881b      	ldrh	r3, [r3, #0]
   1d4b4:	2207      	movs	r2, #7
   1d4b6:	401a      	ands	r2, r3
   1d4b8:	1dfb      	adds	r3, r7, #7
   1d4ba:	781b      	ldrb	r3, [r3, #0]
   1d4bc:	18d3      	adds	r3, r2, r3
   1d4be:	2b08      	cmp	r3, #8
   1d4c0:	dd1c      	ble.n	1d4fc <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1d4c2:	230a      	movs	r3, #10
   1d4c4:	18fb      	adds	r3, r7, r3
   1d4c6:	881a      	ldrh	r2, [r3, #0]
   1d4c8:	2308      	movs	r3, #8
   1d4ca:	18fb      	adds	r3, r7, r3
   1d4cc:	881b      	ldrh	r3, [r3, #0]
   1d4ce:	1ad3      	subs	r3, r2, r3
   1d4d0:	3307      	adds	r3, #7
   1d4d2:	2b00      	cmp	r3, #0
   1d4d4:	da00      	bge.n	1d4d8 <SDMMC_UNSTUFF_BITS+0x80>
   1d4d6:	3307      	adds	r3, #7
   1d4d8:	10db      	asrs	r3, r3, #3
   1d4da:	3b02      	subs	r3, #2
   1d4dc:	68fa      	ldr	r2, [r7, #12]
   1d4de:	18d3      	adds	r3, r2, r3
   1d4e0:	781b      	ldrb	r3, [r3, #0]
   1d4e2:	0019      	movs	r1, r3
   1d4e4:	2308      	movs	r3, #8
   1d4e6:	18fb      	adds	r3, r7, r3
   1d4e8:	881b      	ldrh	r3, [r3, #0]
   1d4ea:	2207      	movs	r2, #7
   1d4ec:	4013      	ands	r3, r2
   1d4ee:	2208      	movs	r2, #8
   1d4f0:	1ad3      	subs	r3, r2, r3
   1d4f2:	4099      	lsls	r1, r3
   1d4f4:	000b      	movs	r3, r1
   1d4f6:	697a      	ldr	r2, [r7, #20]
   1d4f8:	4313      	orrs	r3, r2
   1d4fa:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1d4fc:	2308      	movs	r3, #8
   1d4fe:	18fb      	adds	r3, r7, r3
   1d500:	881b      	ldrh	r3, [r3, #0]
   1d502:	2207      	movs	r2, #7
   1d504:	401a      	ands	r2, r3
   1d506:	1dfb      	adds	r3, r7, #7
   1d508:	781b      	ldrb	r3, [r3, #0]
   1d50a:	18d3      	adds	r3, r2, r3
   1d50c:	2b10      	cmp	r3, #16
   1d50e:	dd1c      	ble.n	1d54a <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1d510:	230a      	movs	r3, #10
   1d512:	18fb      	adds	r3, r7, r3
   1d514:	881a      	ldrh	r2, [r3, #0]
   1d516:	2308      	movs	r3, #8
   1d518:	18fb      	adds	r3, r7, r3
   1d51a:	881b      	ldrh	r3, [r3, #0]
   1d51c:	1ad3      	subs	r3, r2, r3
   1d51e:	3307      	adds	r3, #7
   1d520:	2b00      	cmp	r3, #0
   1d522:	da00      	bge.n	1d526 <SDMMC_UNSTUFF_BITS+0xce>
   1d524:	3307      	adds	r3, #7
   1d526:	10db      	asrs	r3, r3, #3
   1d528:	3b03      	subs	r3, #3
   1d52a:	68fa      	ldr	r2, [r7, #12]
   1d52c:	18d3      	adds	r3, r2, r3
   1d52e:	781b      	ldrb	r3, [r3, #0]
   1d530:	0019      	movs	r1, r3
   1d532:	2308      	movs	r3, #8
   1d534:	18fb      	adds	r3, r7, r3
   1d536:	881b      	ldrh	r3, [r3, #0]
   1d538:	2207      	movs	r2, #7
   1d53a:	4013      	ands	r3, r2
   1d53c:	2210      	movs	r2, #16
   1d53e:	1ad3      	subs	r3, r2, r3
   1d540:	4099      	lsls	r1, r3
   1d542:	000b      	movs	r3, r1
   1d544:	697a      	ldr	r2, [r7, #20]
   1d546:	4313      	orrs	r3, r2
   1d548:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1d54a:	2308      	movs	r3, #8
   1d54c:	18fb      	adds	r3, r7, r3
   1d54e:	881b      	ldrh	r3, [r3, #0]
   1d550:	2207      	movs	r2, #7
   1d552:	401a      	ands	r2, r3
   1d554:	1dfb      	adds	r3, r7, #7
   1d556:	781b      	ldrb	r3, [r3, #0]
   1d558:	18d3      	adds	r3, r2, r3
   1d55a:	2b10      	cmp	r3, #16
   1d55c:	dd1c      	ble.n	1d598 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1d55e:	230a      	movs	r3, #10
   1d560:	18fb      	adds	r3, r7, r3
   1d562:	881a      	ldrh	r2, [r3, #0]
   1d564:	2308      	movs	r3, #8
   1d566:	18fb      	adds	r3, r7, r3
   1d568:	881b      	ldrh	r3, [r3, #0]
   1d56a:	1ad3      	subs	r3, r2, r3
   1d56c:	3307      	adds	r3, #7
   1d56e:	2b00      	cmp	r3, #0
   1d570:	da00      	bge.n	1d574 <SDMMC_UNSTUFF_BITS+0x11c>
   1d572:	3307      	adds	r3, #7
   1d574:	10db      	asrs	r3, r3, #3
   1d576:	3b03      	subs	r3, #3
   1d578:	68fa      	ldr	r2, [r7, #12]
   1d57a:	18d3      	adds	r3, r2, r3
   1d57c:	781b      	ldrb	r3, [r3, #0]
   1d57e:	0019      	movs	r1, r3
   1d580:	2308      	movs	r3, #8
   1d582:	18fb      	adds	r3, r7, r3
   1d584:	881b      	ldrh	r3, [r3, #0]
   1d586:	2207      	movs	r2, #7
   1d588:	4013      	ands	r3, r2
   1d58a:	2210      	movs	r2, #16
   1d58c:	1ad3      	subs	r3, r2, r3
   1d58e:	4099      	lsls	r1, r3
   1d590:	000b      	movs	r3, r1
   1d592:	697a      	ldr	r2, [r7, #20]
   1d594:	4313      	orrs	r3, r2
   1d596:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1d598:	1dfb      	adds	r3, r7, #7
   1d59a:	781b      	ldrb	r3, [r3, #0]
   1d59c:	2201      	movs	r2, #1
   1d59e:	409a      	lsls	r2, r3
   1d5a0:	0013      	movs	r3, r2
   1d5a2:	1e5a      	subs	r2, r3, #1
   1d5a4:	697b      	ldr	r3, [r7, #20]
   1d5a6:	4013      	ands	r3, r2
   1d5a8:	617b      	str	r3, [r7, #20]
	return value;
   1d5aa:	697b      	ldr	r3, [r7, #20]
}
   1d5ac:	0018      	movs	r0, r3
   1d5ae:	46bd      	mov	sp, r7
   1d5b0:	b007      	add	sp, #28
   1d5b2:	bd90      	pop	{r4, r7, pc}

0001d5b4 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1d5b4:	b580      	push	{r7, lr}
   1d5b6:	b082      	sub	sp, #8
   1d5b8:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1d5ba:	4b23      	ldr	r3, [pc, #140]	; (1d648 <mmc_spi_op_cond+0x94>)
   1d5bc:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1d5be:	4b23      	ldr	r3, [pc, #140]	; (1d64c <mmc_spi_op_cond+0x98>)
   1d5c0:	2100      	movs	r1, #0
   1d5c2:	0018      	movs	r0, r3
   1d5c4:	4b22      	ldr	r3, [pc, #136]	; (1d650 <mmc_spi_op_cond+0x9c>)
   1d5c6:	4798      	blx	r3
   1d5c8:	0003      	movs	r3, r0
   1d5ca:	001a      	movs	r2, r3
   1d5cc:	2301      	movs	r3, #1
   1d5ce:	4053      	eors	r3, r2
   1d5d0:	b2db      	uxtb	r3, r3
   1d5d2:	2b00      	cmp	r3, #0
   1d5d4:	d001      	beq.n	1d5da <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1d5d6:	2300      	movs	r3, #0
   1d5d8:	e031      	b.n	1d63e <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1d5da:	4b1e      	ldr	r3, [pc, #120]	; (1d654 <mmc_spi_op_cond+0xa0>)
   1d5dc:	4798      	blx	r3
   1d5de:	0003      	movs	r3, r0
   1d5e0:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1d5e2:	683b      	ldr	r3, [r7, #0]
   1d5e4:	2201      	movs	r2, #1
   1d5e6:	4013      	ands	r3, r2
   1d5e8:	d006      	beq.n	1d5f8 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1d5ea:	687b      	ldr	r3, [r7, #4]
   1d5ec:	1e5a      	subs	r2, r3, #1
   1d5ee:	607a      	str	r2, [r7, #4]
   1d5f0:	2b00      	cmp	r3, #0
   1d5f2:	d1e4      	bne.n	1d5be <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1d5f4:	2300      	movs	r3, #0
   1d5f6:	e022      	b.n	1d63e <mmc_spi_op_cond+0x8a>
			break;
   1d5f8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1d5fa:	4b17      	ldr	r3, [pc, #92]	; (1d658 <mmc_spi_op_cond+0xa4>)
   1d5fc:	2100      	movs	r1, #0
   1d5fe:	0018      	movs	r0, r3
   1d600:	4b13      	ldr	r3, [pc, #76]	; (1d650 <mmc_spi_op_cond+0x9c>)
   1d602:	4798      	blx	r3
   1d604:	0003      	movs	r3, r0
   1d606:	001a      	movs	r2, r3
   1d608:	2301      	movs	r3, #1
   1d60a:	4053      	eors	r3, r2
   1d60c:	b2db      	uxtb	r3, r3
   1d60e:	2b00      	cmp	r3, #0
   1d610:	d001      	beq.n	1d616 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1d612:	2300      	movs	r3, #0
   1d614:	e013      	b.n	1d63e <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1d616:	4b0f      	ldr	r3, [pc, #60]	; (1d654 <mmc_spi_op_cond+0xa0>)
   1d618:	4798      	blx	r3
   1d61a:	0002      	movs	r2, r0
   1d61c:	23c0      	movs	r3, #192	; 0xc0
   1d61e:	05db      	lsls	r3, r3, #23
   1d620:	401a      	ands	r2, r3
   1d622:	2380      	movs	r3, #128	; 0x80
   1d624:	05db      	lsls	r3, r3, #23
   1d626:	429a      	cmp	r2, r3
   1d628:	d108      	bne.n	1d63c <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1d62a:	4b0c      	ldr	r3, [pc, #48]	; (1d65c <mmc_spi_op_cond+0xa8>)
   1d62c:	681a      	ldr	r2, [r3, #0]
   1d62e:	4b0b      	ldr	r3, [pc, #44]	; (1d65c <mmc_spi_op_cond+0xa8>)
   1d630:	681b      	ldr	r3, [r3, #0]
   1d632:	7adb      	ldrb	r3, [r3, #11]
   1d634:	2108      	movs	r1, #8
   1d636:	430b      	orrs	r3, r1
   1d638:	b2db      	uxtb	r3, r3
   1d63a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1d63c:	2301      	movs	r3, #1
}
   1d63e:	0018      	movs	r0, r3
   1d640:	46bd      	mov	sp, r7
   1d642:	b002      	add	sp, #8
   1d644:	bd80      	pop	{r7, pc}
   1d646:	46c0      	nop			; (mov r8, r8)
   1d648:	00001bee 	.word	0x00001bee
   1d64c:	00001101 	.word	0x00001101
   1d650:	0001f031 	.word	0x0001f031
   1d654:	0001f271 	.word	0x0001f271
   1d658:	0000053a 	.word	0x0000053a
   1d65c:	200040a8 	.word	0x200040a8

0001d660 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1d660:	b580      	push	{r7, lr}
   1d662:	b086      	sub	sp, #24
   1d664:	af00      	add	r7, sp, #0
   1d666:	0002      	movs	r2, r0
   1d668:	1dfb      	adds	r3, r7, #7
   1d66a:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1d66c:	4b2e      	ldr	r3, [pc, #184]	; (1d728 <sd_spi_op_cond+0xc8>)
   1d66e:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1d670:	4b2e      	ldr	r3, [pc, #184]	; (1d72c <sd_spi_op_cond+0xcc>)
   1d672:	2100      	movs	r1, #0
   1d674:	0018      	movs	r0, r3
   1d676:	4b2e      	ldr	r3, [pc, #184]	; (1d730 <sd_spi_op_cond+0xd0>)
   1d678:	4798      	blx	r3
   1d67a:	0003      	movs	r3, r0
   1d67c:	001a      	movs	r2, r3
   1d67e:	2301      	movs	r3, #1
   1d680:	4053      	eors	r3, r2
   1d682:	b2db      	uxtb	r3, r3
   1d684:	2b00      	cmp	r3, #0
   1d686:	d001      	beq.n	1d68c <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1d688:	2300      	movs	r3, #0
   1d68a:	e048      	b.n	1d71e <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1d68c:	2300      	movs	r3, #0
   1d68e:	617b      	str	r3, [r7, #20]
		if (v2) {
   1d690:	1dfb      	adds	r3, r7, #7
   1d692:	781b      	ldrb	r3, [r3, #0]
   1d694:	2b00      	cmp	r3, #0
   1d696:	d004      	beq.n	1d6a2 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1d698:	697b      	ldr	r3, [r7, #20]
   1d69a:	2280      	movs	r2, #128	; 0x80
   1d69c:	05d2      	lsls	r2, r2, #23
   1d69e:	4313      	orrs	r3, r2
   1d6a0:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1d6a2:	697b      	ldr	r3, [r7, #20]
   1d6a4:	4a23      	ldr	r2, [pc, #140]	; (1d734 <sd_spi_op_cond+0xd4>)
   1d6a6:	0019      	movs	r1, r3
   1d6a8:	0010      	movs	r0, r2
   1d6aa:	4b21      	ldr	r3, [pc, #132]	; (1d730 <sd_spi_op_cond+0xd0>)
   1d6ac:	4798      	blx	r3
   1d6ae:	0003      	movs	r3, r0
   1d6b0:	001a      	movs	r2, r3
   1d6b2:	2301      	movs	r3, #1
   1d6b4:	4053      	eors	r3, r2
   1d6b6:	b2db      	uxtb	r3, r3
   1d6b8:	2b00      	cmp	r3, #0
   1d6ba:	d001      	beq.n	1d6c0 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1d6bc:	2300      	movs	r3, #0
   1d6be:	e02e      	b.n	1d71e <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1d6c0:	4b1d      	ldr	r3, [pc, #116]	; (1d738 <sd_spi_op_cond+0xd8>)
   1d6c2:	4798      	blx	r3
   1d6c4:	0003      	movs	r3, r0
   1d6c6:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1d6c8:	68fb      	ldr	r3, [r7, #12]
   1d6ca:	2201      	movs	r2, #1
   1d6cc:	4013      	ands	r3, r2
   1d6ce:	d006      	beq.n	1d6de <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1d6d0:	693b      	ldr	r3, [r7, #16]
   1d6d2:	1e5a      	subs	r2, r3, #1
   1d6d4:	613a      	str	r2, [r7, #16]
   1d6d6:	2b00      	cmp	r3, #0
   1d6d8:	d1ca      	bne.n	1d670 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1d6da:	2300      	movs	r3, #0
   1d6dc:	e01f      	b.n	1d71e <sd_spi_op_cond+0xbe>
			break;
   1d6de:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1d6e0:	4b16      	ldr	r3, [pc, #88]	; (1d73c <sd_spi_op_cond+0xdc>)
   1d6e2:	2100      	movs	r1, #0
   1d6e4:	0018      	movs	r0, r3
   1d6e6:	4b12      	ldr	r3, [pc, #72]	; (1d730 <sd_spi_op_cond+0xd0>)
   1d6e8:	4798      	blx	r3
   1d6ea:	0003      	movs	r3, r0
   1d6ec:	001a      	movs	r2, r3
   1d6ee:	2301      	movs	r3, #1
   1d6f0:	4053      	eors	r3, r2
   1d6f2:	b2db      	uxtb	r3, r3
   1d6f4:	2b00      	cmp	r3, #0
   1d6f6:	d001      	beq.n	1d6fc <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1d6f8:	2300      	movs	r3, #0
   1d6fa:	e010      	b.n	1d71e <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1d6fc:	4b0e      	ldr	r3, [pc, #56]	; (1d738 <sd_spi_op_cond+0xd8>)
   1d6fe:	4798      	blx	r3
   1d700:	0002      	movs	r2, r0
   1d702:	2380      	movs	r3, #128	; 0x80
   1d704:	05db      	lsls	r3, r3, #23
   1d706:	4013      	ands	r3, r2
   1d708:	d008      	beq.n	1d71c <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1d70a:	4b0d      	ldr	r3, [pc, #52]	; (1d740 <sd_spi_op_cond+0xe0>)
   1d70c:	681a      	ldr	r2, [r3, #0]
   1d70e:	4b0c      	ldr	r3, [pc, #48]	; (1d740 <sd_spi_op_cond+0xe0>)
   1d710:	681b      	ldr	r3, [r3, #0]
   1d712:	7adb      	ldrb	r3, [r3, #11]
   1d714:	2108      	movs	r1, #8
   1d716:	430b      	orrs	r3, r1
   1d718:	b2db      	uxtb	r3, r3
   1d71a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1d71c:	2301      	movs	r3, #1
}
   1d71e:	0018      	movs	r0, r3
   1d720:	46bd      	mov	sp, r7
   1d722:	b006      	add	sp, #24
   1d724:	bd80      	pop	{r7, pc}
   1d726:	46c0      	nop			; (mov r8, r8)
   1d728:	00001bee 	.word	0x00001bee
   1d72c:	00001137 	.word	0x00001137
   1d730:	0001f031 	.word	0x0001f031
   1d734:	00001129 	.word	0x00001129
   1d738:	0001f271 	.word	0x0001f271
   1d73c:	0000053a 	.word	0x0000053a
   1d740:	200040a8 	.word	0x200040a8

0001d744 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1d744:	b580      	push	{r7, lr}
   1d746:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1d748:	2301      	movs	r3, #1
}
   1d74a:	0018      	movs	r0, r3
   1d74c:	46bd      	mov	sp, r7
   1d74e:	bd80      	pop	{r7, pc}

0001d750 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1d750:	b580      	push	{r7, lr}
   1d752:	b084      	sub	sp, #16
   1d754:	af00      	add	r7, sp, #0
   1d756:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1d758:	687b      	ldr	r3, [r7, #4]
   1d75a:	2200      	movs	r2, #0
   1d75c:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1d75e:	23d5      	movs	r3, #213	; 0xd5
   1d760:	005b      	lsls	r3, r3, #1
   1d762:	4a14      	ldr	r2, [pc, #80]	; (1d7b4 <sd_cmd8+0x64>)
   1d764:	0019      	movs	r1, r3
   1d766:	0010      	movs	r0, r2
   1d768:	4b13      	ldr	r3, [pc, #76]	; (1d7b8 <sd_cmd8+0x68>)
   1d76a:	4798      	blx	r3
   1d76c:	0003      	movs	r3, r0
   1d76e:	001a      	movs	r2, r3
   1d770:	2301      	movs	r3, #1
   1d772:	4053      	eors	r3, r2
   1d774:	b2db      	uxtb	r3, r3
   1d776:	2b00      	cmp	r3, #0
   1d778:	d001      	beq.n	1d77e <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1d77a:	2301      	movs	r3, #1
   1d77c:	e015      	b.n	1d7aa <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1d77e:	4b0f      	ldr	r3, [pc, #60]	; (1d7bc <sd_cmd8+0x6c>)
   1d780:	4798      	blx	r3
   1d782:	0003      	movs	r3, r0
   1d784:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1d786:	68fb      	ldr	r3, [r7, #12]
   1d788:	3301      	adds	r3, #1
   1d78a:	d101      	bne.n	1d790 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1d78c:	2301      	movs	r3, #1
   1d78e:	e00c      	b.n	1d7aa <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1d790:	68fb      	ldr	r3, [r7, #12]
   1d792:	051b      	lsls	r3, r3, #20
   1d794:	0d1a      	lsrs	r2, r3, #20
   1d796:	23d5      	movs	r3, #213	; 0xd5
   1d798:	005b      	lsls	r3, r3, #1
   1d79a:	429a      	cmp	r2, r3
   1d79c:	d001      	beq.n	1d7a2 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1d79e:	2300      	movs	r3, #0
   1d7a0:	e003      	b.n	1d7aa <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1d7a2:	687b      	ldr	r3, [r7, #4]
   1d7a4:	2201      	movs	r2, #1
   1d7a6:	701a      	strb	r2, [r3, #0]
	return true;
   1d7a8:	2301      	movs	r3, #1
}
   1d7aa:	0018      	movs	r0, r3
   1d7ac:	46bd      	mov	sp, r7
   1d7ae:	b004      	add	sp, #16
   1d7b0:	bd80      	pop	{r7, pc}
   1d7b2:	46c0      	nop			; (mov r8, r8)
   1d7b4:	00005508 	.word	0x00005508
   1d7b8:	0001f031 	.word	0x0001f031
   1d7bc:	0001f271 	.word	0x0001f271

0001d7c0 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1d7c0:	b590      	push	{r4, r7, lr}
   1d7c2:	b089      	sub	sp, #36	; 0x24
   1d7c4:	af02      	add	r7, sp, #8
   1d7c6:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1d7c8:	2380      	movs	r3, #128	; 0x80
   1d7ca:	009a      	lsls	r2, r3, #2
   1d7cc:	4841      	ldr	r0, [pc, #260]	; (1d8d4 <mmc_cmd8+0x114>)
   1d7ce:	2300      	movs	r3, #0
   1d7d0:	9300      	str	r3, [sp, #0]
   1d7d2:	2301      	movs	r3, #1
   1d7d4:	2100      	movs	r1, #0
   1d7d6:	4c40      	ldr	r4, [pc, #256]	; (1d8d8 <mmc_cmd8+0x118>)
   1d7d8:	47a0      	blx	r4
   1d7da:	0003      	movs	r3, r0
   1d7dc:	001a      	movs	r2, r3
   1d7de:	2301      	movs	r3, #1
   1d7e0:	4053      	eors	r3, r2
   1d7e2:	b2db      	uxtb	r3, r3
   1d7e4:	2b00      	cmp	r3, #0
   1d7e6:	d001      	beq.n	1d7ec <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1d7e8:	2300      	movs	r3, #0
   1d7ea:	e06e      	b.n	1d8ca <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1d7ec:	2316      	movs	r3, #22
   1d7ee:	18fb      	adds	r3, r7, r3
   1d7f0:	2200      	movs	r2, #0
   1d7f2:	801a      	strh	r2, [r3, #0]
   1d7f4:	e014      	b.n	1d820 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1d7f6:	2310      	movs	r3, #16
   1d7f8:	18fb      	adds	r3, r7, r3
   1d7fa:	0018      	movs	r0, r3
   1d7fc:	4b37      	ldr	r3, [pc, #220]	; (1d8dc <mmc_cmd8+0x11c>)
   1d7fe:	4798      	blx	r3
   1d800:	0003      	movs	r3, r0
   1d802:	001a      	movs	r2, r3
   1d804:	2301      	movs	r3, #1
   1d806:	4053      	eors	r3, r2
   1d808:	b2db      	uxtb	r3, r3
   1d80a:	2b00      	cmp	r3, #0
   1d80c:	d001      	beq.n	1d812 <mmc_cmd8+0x52>
			return false;
   1d80e:	2300      	movs	r3, #0
   1d810:	e05b      	b.n	1d8ca <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1d812:	2316      	movs	r3, #22
   1d814:	18fb      	adds	r3, r7, r3
   1d816:	881a      	ldrh	r2, [r3, #0]
   1d818:	2316      	movs	r3, #22
   1d81a:	18fb      	adds	r3, r7, r3
   1d81c:	3201      	adds	r2, #1
   1d81e:	801a      	strh	r2, [r3, #0]
   1d820:	2316      	movs	r3, #22
   1d822:	18fb      	adds	r3, r7, r3
   1d824:	881b      	ldrh	r3, [r3, #0]
   1d826:	2b31      	cmp	r3, #49	; 0x31
   1d828:	d9e5      	bls.n	1d7f6 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1d82a:	693b      	ldr	r3, [r7, #16]
   1d82c:	b2db      	uxtb	r3, r3
   1d82e:	2202      	movs	r2, #2
   1d830:	4013      	ands	r3, r2
   1d832:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1d834:	687b      	ldr	r3, [r7, #4]
   1d836:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1d838:	4b29      	ldr	r3, [pc, #164]	; (1d8e0 <mmc_cmd8+0x120>)
   1d83a:	681b      	ldr	r3, [r3, #0]
   1d83c:	330e      	adds	r3, #14
   1d83e:	0018      	movs	r0, r3
   1d840:	230c      	movs	r3, #12
   1d842:	223e      	movs	r2, #62	; 0x3e
   1d844:	2180      	movs	r1, #128	; 0x80
   1d846:	4c27      	ldr	r4, [pc, #156]	; (1d8e4 <mmc_cmd8+0x124>)
   1d848:	47a0      	blx	r4
   1d84a:	0002      	movs	r2, r0
   1d84c:	4b26      	ldr	r3, [pc, #152]	; (1d8e8 <mmc_cmd8+0x128>)
   1d84e:	429a      	cmp	r2, r3
   1d850:	d135      	bne.n	1d8be <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1d852:	e014      	b.n	1d87e <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1d854:	230c      	movs	r3, #12
   1d856:	18fb      	adds	r3, r7, r3
   1d858:	0018      	movs	r0, r3
   1d85a:	4b20      	ldr	r3, [pc, #128]	; (1d8dc <mmc_cmd8+0x11c>)
   1d85c:	4798      	blx	r3
   1d85e:	0003      	movs	r3, r0
   1d860:	001a      	movs	r2, r3
   1d862:	2301      	movs	r3, #1
   1d864:	4053      	eors	r3, r2
   1d866:	b2db      	uxtb	r3, r3
   1d868:	2b00      	cmp	r3, #0
   1d86a:	d001      	beq.n	1d870 <mmc_cmd8+0xb0>
				return false;
   1d86c:	2300      	movs	r3, #0
   1d86e:	e02c      	b.n	1d8ca <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1d870:	2316      	movs	r3, #22
   1d872:	18fb      	adds	r3, r7, r3
   1d874:	881a      	ldrh	r2, [r3, #0]
   1d876:	2316      	movs	r3, #22
   1d878:	18fb      	adds	r3, r7, r3
   1d87a:	3201      	adds	r2, #1
   1d87c:	801a      	strh	r2, [r3, #0]
   1d87e:	2316      	movs	r3, #22
   1d880:	18fb      	adds	r3, r7, r3
   1d882:	881b      	ldrh	r3, [r3, #0]
   1d884:	2b35      	cmp	r3, #53	; 0x35
   1d886:	d9e5      	bls.n	1d854 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1d888:	4b15      	ldr	r3, [pc, #84]	; (1d8e0 <mmc_cmd8+0x120>)
   1d88a:	681b      	ldr	r3, [r3, #0]
   1d88c:	68fa      	ldr	r2, [r7, #12]
   1d88e:	0852      	lsrs	r2, r2, #1
   1d890:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1d892:	e014      	b.n	1d8be <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1d894:	230c      	movs	r3, #12
   1d896:	18fb      	adds	r3, r7, r3
   1d898:	0018      	movs	r0, r3
   1d89a:	4b10      	ldr	r3, [pc, #64]	; (1d8dc <mmc_cmd8+0x11c>)
   1d89c:	4798      	blx	r3
   1d89e:	0003      	movs	r3, r0
   1d8a0:	001a      	movs	r2, r3
   1d8a2:	2301      	movs	r3, #1
   1d8a4:	4053      	eors	r3, r2
   1d8a6:	b2db      	uxtb	r3, r3
   1d8a8:	2b00      	cmp	r3, #0
   1d8aa:	d001      	beq.n	1d8b0 <mmc_cmd8+0xf0>
			return false;
   1d8ac:	2300      	movs	r3, #0
   1d8ae:	e00c      	b.n	1d8ca <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1d8b0:	2316      	movs	r3, #22
   1d8b2:	18fb      	adds	r3, r7, r3
   1d8b4:	881a      	ldrh	r2, [r3, #0]
   1d8b6:	2316      	movs	r3, #22
   1d8b8:	18fb      	adds	r3, r7, r3
   1d8ba:	3201      	adds	r2, #1
   1d8bc:	801a      	strh	r2, [r3, #0]
   1d8be:	2316      	movs	r3, #22
   1d8c0:	18fb      	adds	r3, r7, r3
   1d8c2:	881b      	ldrh	r3, [r3, #0]
   1d8c4:	2b7f      	cmp	r3, #127	; 0x7f
   1d8c6:	d9e5      	bls.n	1d894 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1d8c8:	2301      	movs	r3, #1
}
   1d8ca:	0018      	movs	r0, r3
   1d8cc:	46bd      	mov	sp, r7
   1d8ce:	b007      	add	sp, #28
   1d8d0:	bd90      	pop	{r4, r7, pc}
   1d8d2:	46c0      	nop			; (mov r8, r8)
   1d8d4:	00081108 	.word	0x00081108
   1d8d8:	0001f059 	.word	0x0001f059
   1d8dc:	0001f285 	.word	0x0001f285
   1d8e0:	200040a8 	.word	0x200040a8
   1d8e4:	0001d459 	.word	0x0001d459
   1d8e8:	00000fff 	.word	0x00000fff

0001d8ec <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1d8ec:	b590      	push	{r4, r7, lr}
   1d8ee:	b083      	sub	sp, #12
   1d8f0:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1d8f2:	4b15      	ldr	r3, [pc, #84]	; (1d948 <sd_mmc_cmd9_spi+0x5c>)
   1d8f4:	681b      	ldr	r3, [r3, #0]
   1d8f6:	891b      	ldrh	r3, [r3, #8]
   1d8f8:	0419      	lsls	r1, r3, #16
   1d8fa:	4814      	ldr	r0, [pc, #80]	; (1d94c <sd_mmc_cmd9_spi+0x60>)
   1d8fc:	2301      	movs	r3, #1
   1d8fe:	9300      	str	r3, [sp, #0]
   1d900:	2301      	movs	r3, #1
   1d902:	2210      	movs	r2, #16
   1d904:	4c12      	ldr	r4, [pc, #72]	; (1d950 <sd_mmc_cmd9_spi+0x64>)
   1d906:	47a0      	blx	r4
   1d908:	0003      	movs	r3, r0
   1d90a:	001a      	movs	r2, r3
   1d90c:	2301      	movs	r3, #1
   1d90e:	4053      	eors	r3, r2
   1d910:	b2db      	uxtb	r3, r3
   1d912:	2b00      	cmp	r3, #0
   1d914:	d001      	beq.n	1d91a <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1d916:	2300      	movs	r3, #0
   1d918:	e012      	b.n	1d940 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1d91a:	4b0b      	ldr	r3, [pc, #44]	; (1d948 <sd_mmc_cmd9_spi+0x5c>)
   1d91c:	681b      	ldr	r3, [r3, #0]
   1d91e:	330e      	adds	r3, #14
   1d920:	2101      	movs	r1, #1
   1d922:	0018      	movs	r0, r3
   1d924:	4b0b      	ldr	r3, [pc, #44]	; (1d954 <sd_mmc_cmd9_spi+0x68>)
   1d926:	4798      	blx	r3
   1d928:	0003      	movs	r3, r0
   1d92a:	001a      	movs	r2, r3
   1d92c:	2301      	movs	r3, #1
   1d92e:	4053      	eors	r3, r2
   1d930:	b2db      	uxtb	r3, r3
   1d932:	2b00      	cmp	r3, #0
   1d934:	d001      	beq.n	1d93a <sd_mmc_cmd9_spi+0x4e>
		return false;
   1d936:	2300      	movs	r3, #0
   1d938:	e002      	b.n	1d940 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1d93a:	4b07      	ldr	r3, [pc, #28]	; (1d958 <sd_mmc_cmd9_spi+0x6c>)
   1d93c:	4798      	blx	r3
   1d93e:	0003      	movs	r3, r0
}
   1d940:	0018      	movs	r0, r3
   1d942:	46bd      	mov	sp, r7
   1d944:	b001      	add	sp, #4
   1d946:	bd90      	pop	{r4, r7, pc}
   1d948:	200040a8 	.word	0x200040a8
   1d94c:	00081109 	.word	0x00081109
   1d950:	0001f059 	.word	0x0001f059
   1d954:	0001f329 	.word	0x0001f329
   1d958:	0001f3cd 	.word	0x0001f3cd

0001d95c <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1d95c:	b5b0      	push	{r4, r5, r7, lr}
   1d95e:	b084      	sub	sp, #16
   1d960:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1d962:	4b45      	ldr	r3, [pc, #276]	; (1da78 <mmc_decode_csd+0x11c>)
   1d964:	681b      	ldr	r3, [r3, #0]
   1d966:	330e      	adds	r3, #14
   1d968:	0018      	movs	r0, r3
   1d96a:	2304      	movs	r3, #4
   1d96c:	227a      	movs	r2, #122	; 0x7a
   1d96e:	2180      	movs	r1, #128	; 0x80
   1d970:	4c42      	ldr	r4, [pc, #264]	; (1da7c <mmc_decode_csd+0x120>)
   1d972:	47a0      	blx	r4
   1d974:	0003      	movs	r3, r0
   1d976:	2b02      	cmp	r3, #2
   1d978:	d011      	beq.n	1d99e <mmc_decode_csd+0x42>
   1d97a:	d802      	bhi.n	1d982 <mmc_decode_csd+0x26>
   1d97c:	2b01      	cmp	r3, #1
   1d97e:	d009      	beq.n	1d994 <mmc_decode_csd+0x38>
   1d980:	e003      	b.n	1d98a <mmc_decode_csd+0x2e>
   1d982:	2b03      	cmp	r3, #3
   1d984:	d010      	beq.n	1d9a8 <mmc_decode_csd+0x4c>
   1d986:	2b04      	cmp	r3, #4
   1d988:	d013      	beq.n	1d9b2 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1d98a:	4b3b      	ldr	r3, [pc, #236]	; (1da78 <mmc_decode_csd+0x11c>)
   1d98c:	681b      	ldr	r3, [r3, #0]
   1d98e:	2212      	movs	r2, #18
   1d990:	731a      	strb	r2, [r3, #12]
		break;
   1d992:	e013      	b.n	1d9bc <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1d994:	4b38      	ldr	r3, [pc, #224]	; (1da78 <mmc_decode_csd+0x11c>)
   1d996:	681b      	ldr	r3, [r3, #0]
   1d998:	2214      	movs	r2, #20
   1d99a:	731a      	strb	r2, [r3, #12]
		break;
   1d99c:	e00e      	b.n	1d9bc <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1d99e:	4b36      	ldr	r3, [pc, #216]	; (1da78 <mmc_decode_csd+0x11c>)
   1d9a0:	681b      	ldr	r3, [r3, #0]
   1d9a2:	2222      	movs	r2, #34	; 0x22
   1d9a4:	731a      	strb	r2, [r3, #12]
		break;
   1d9a6:	e009      	b.n	1d9bc <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1d9a8:	4b33      	ldr	r3, [pc, #204]	; (1da78 <mmc_decode_csd+0x11c>)
   1d9aa:	681b      	ldr	r3, [r3, #0]
   1d9ac:	2230      	movs	r2, #48	; 0x30
   1d9ae:	731a      	strb	r2, [r3, #12]
		break;
   1d9b0:	e004      	b.n	1d9bc <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1d9b2:	4b31      	ldr	r3, [pc, #196]	; (1da78 <mmc_decode_csd+0x11c>)
   1d9b4:	681b      	ldr	r3, [r3, #0]
   1d9b6:	2240      	movs	r2, #64	; 0x40
   1d9b8:	731a      	strb	r2, [r3, #12]
		break;
   1d9ba:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1d9bc:	4b2e      	ldr	r3, [pc, #184]	; (1da78 <mmc_decode_csd+0x11c>)
   1d9be:	681b      	ldr	r3, [r3, #0]
   1d9c0:	330e      	adds	r3, #14
   1d9c2:	0018      	movs	r0, r3
   1d9c4:	2308      	movs	r3, #8
   1d9c6:	2260      	movs	r2, #96	; 0x60
   1d9c8:	2180      	movs	r1, #128	; 0x80
   1d9ca:	4c2c      	ldr	r4, [pc, #176]	; (1da7c <mmc_decode_csd+0x120>)
   1d9cc:	47a0      	blx	r4
   1d9ce:	0003      	movs	r3, r0
   1d9d0:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1d9d2:	68fb      	ldr	r3, [r7, #12]
   1d9d4:	2207      	movs	r2, #7
   1d9d6:	401a      	ands	r2, r3
   1d9d8:	4b29      	ldr	r3, [pc, #164]	; (1da80 <mmc_decode_csd+0x124>)
   1d9da:	0092      	lsls	r2, r2, #2
   1d9dc:	58d3      	ldr	r3, [r2, r3]
   1d9de:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1d9e0:	68fb      	ldr	r3, [r7, #12]
   1d9e2:	08db      	lsrs	r3, r3, #3
   1d9e4:	220f      	movs	r2, #15
   1d9e6:	401a      	ands	r2, r3
   1d9e8:	4b26      	ldr	r3, [pc, #152]	; (1da84 <mmc_decode_csd+0x128>)
   1d9ea:	0092      	lsls	r2, r2, #2
   1d9ec:	58d3      	ldr	r3, [r2, r3]
   1d9ee:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1d9f0:	4b21      	ldr	r3, [pc, #132]	; (1da78 <mmc_decode_csd+0x11c>)
   1d9f2:	681b      	ldr	r3, [r3, #0]
   1d9f4:	68ba      	ldr	r2, [r7, #8]
   1d9f6:	6879      	ldr	r1, [r7, #4]
   1d9f8:	434a      	muls	r2, r1
   1d9fa:	21fa      	movs	r1, #250	; 0xfa
   1d9fc:	0089      	lsls	r1, r1, #2
   1d9fe:	434a      	muls	r2, r1
   1da00:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1da02:	4b1d      	ldr	r3, [pc, #116]	; (1da78 <mmc_decode_csd+0x11c>)
   1da04:	681b      	ldr	r3, [r3, #0]
   1da06:	330e      	adds	r3, #14
   1da08:	0018      	movs	r0, r3
   1da0a:	230c      	movs	r3, #12
   1da0c:	223e      	movs	r2, #62	; 0x3e
   1da0e:	2180      	movs	r1, #128	; 0x80
   1da10:	4c1a      	ldr	r4, [pc, #104]	; (1da7c <mmc_decode_csd+0x120>)
   1da12:	47a0      	blx	r4
   1da14:	0002      	movs	r2, r0
   1da16:	4b1c      	ldr	r3, [pc, #112]	; (1da88 <mmc_decode_csd+0x12c>)
   1da18:	429a      	cmp	r2, r3
   1da1a:	d028      	beq.n	1da6e <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1da1c:	4b16      	ldr	r3, [pc, #88]	; (1da78 <mmc_decode_csd+0x11c>)
   1da1e:	681b      	ldr	r3, [r3, #0]
   1da20:	330e      	adds	r3, #14
   1da22:	0018      	movs	r0, r3
   1da24:	230c      	movs	r3, #12
   1da26:	223e      	movs	r2, #62	; 0x3e
   1da28:	2180      	movs	r1, #128	; 0x80
   1da2a:	4c14      	ldr	r4, [pc, #80]	; (1da7c <mmc_decode_csd+0x120>)
   1da2c:	47a0      	blx	r4
   1da2e:	0003      	movs	r3, r0
   1da30:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1da32:	4b11      	ldr	r3, [pc, #68]	; (1da78 <mmc_decode_csd+0x11c>)
   1da34:	681b      	ldr	r3, [r3, #0]
   1da36:	330e      	adds	r3, #14
   1da38:	0018      	movs	r0, r3
   1da3a:	2303      	movs	r3, #3
   1da3c:	222f      	movs	r2, #47	; 0x2f
   1da3e:	2180      	movs	r1, #128	; 0x80
   1da40:	4d0e      	ldr	r5, [pc, #56]	; (1da7c <mmc_decode_csd+0x120>)
   1da42:	47a8      	blx	r5
   1da44:	0003      	movs	r3, r0
   1da46:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1da48:	409c      	lsls	r4, r3
   1da4a:	0023      	movs	r3, r4
   1da4c:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1da4e:	4b0a      	ldr	r3, [pc, #40]	; (1da78 <mmc_decode_csd+0x11c>)
   1da50:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1da52:	4b09      	ldr	r3, [pc, #36]	; (1da78 <mmc_decode_csd+0x11c>)
   1da54:	681b      	ldr	r3, [r3, #0]
   1da56:	330e      	adds	r3, #14
   1da58:	0018      	movs	r0, r3
   1da5a:	2304      	movs	r3, #4
   1da5c:	2250      	movs	r2, #80	; 0x50
   1da5e:	2180      	movs	r1, #128	; 0x80
   1da60:	4d06      	ldr	r5, [pc, #24]	; (1da7c <mmc_decode_csd+0x120>)
   1da62:	47a8      	blx	r5
   1da64:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1da66:	683b      	ldr	r3, [r7, #0]
   1da68:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1da6a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1da6c:	6063      	str	r3, [r4, #4]
	}
}
   1da6e:	46c0      	nop			; (mov r8, r8)
   1da70:	46bd      	mov	sp, r7
   1da72:	b004      	add	sp, #16
   1da74:	bdb0      	pop	{r4, r5, r7, pc}
   1da76:	46c0      	nop			; (mov r8, r8)
   1da78:	200040a8 	.word	0x200040a8
   1da7c:	0001d459 	.word	0x0001d459
   1da80:	00037958 	.word	0x00037958
   1da84:	000379b4 	.word	0x000379b4
   1da88:	00000fff 	.word	0x00000fff

0001da8c <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1da8c:	b5b0      	push	{r4, r5, r7, lr}
   1da8e:	b084      	sub	sp, #16
   1da90:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1da92:	4b35      	ldr	r3, [pc, #212]	; (1db68 <sd_decode_csd+0xdc>)
   1da94:	681b      	ldr	r3, [r3, #0]
   1da96:	330e      	adds	r3, #14
   1da98:	0018      	movs	r0, r3
   1da9a:	2308      	movs	r3, #8
   1da9c:	2260      	movs	r2, #96	; 0x60
   1da9e:	2180      	movs	r1, #128	; 0x80
   1daa0:	4c32      	ldr	r4, [pc, #200]	; (1db6c <sd_decode_csd+0xe0>)
   1daa2:	47a0      	blx	r4
   1daa4:	0003      	movs	r3, r0
   1daa6:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1daa8:	68fb      	ldr	r3, [r7, #12]
   1daaa:	2207      	movs	r2, #7
   1daac:	401a      	ands	r2, r3
   1daae:	4b30      	ldr	r3, [pc, #192]	; (1db70 <sd_decode_csd+0xe4>)
   1dab0:	0092      	lsls	r2, r2, #2
   1dab2:	58d3      	ldr	r3, [r2, r3]
   1dab4:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1dab6:	68fb      	ldr	r3, [r7, #12]
   1dab8:	08db      	lsrs	r3, r3, #3
   1daba:	220f      	movs	r2, #15
   1dabc:	401a      	ands	r2, r3
   1dabe:	4b2d      	ldr	r3, [pc, #180]	; (1db74 <sd_decode_csd+0xe8>)
   1dac0:	0092      	lsls	r2, r2, #2
   1dac2:	58d3      	ldr	r3, [r2, r3]
   1dac4:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1dac6:	4b28      	ldr	r3, [pc, #160]	; (1db68 <sd_decode_csd+0xdc>)
   1dac8:	681b      	ldr	r3, [r3, #0]
   1daca:	68ba      	ldr	r2, [r7, #8]
   1dacc:	6879      	ldr	r1, [r7, #4]
   1dace:	434a      	muls	r2, r1
   1dad0:	21fa      	movs	r1, #250	; 0xfa
   1dad2:	0089      	lsls	r1, r1, #2
   1dad4:	434a      	muls	r2, r1
   1dad6:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1dad8:	4b23      	ldr	r3, [pc, #140]	; (1db68 <sd_decode_csd+0xdc>)
   1dada:	681b      	ldr	r3, [r3, #0]
   1dadc:	330e      	adds	r3, #14
   1dade:	0018      	movs	r0, r3
   1dae0:	2302      	movs	r3, #2
   1dae2:	227e      	movs	r2, #126	; 0x7e
   1dae4:	2180      	movs	r1, #128	; 0x80
   1dae6:	4c21      	ldr	r4, [pc, #132]	; (1db6c <sd_decode_csd+0xe0>)
   1dae8:	47a0      	blx	r4
   1daea:	1e03      	subs	r3, r0, #0
   1daec:	d00f      	beq.n	1db0e <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1daee:	4b1e      	ldr	r3, [pc, #120]	; (1db68 <sd_decode_csd+0xdc>)
   1daf0:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1daf2:	4b1d      	ldr	r3, [pc, #116]	; (1db68 <sd_decode_csd+0xdc>)
   1daf4:	681b      	ldr	r3, [r3, #0]
   1daf6:	330e      	adds	r3, #14
   1daf8:	0018      	movs	r0, r3
   1dafa:	2316      	movs	r3, #22
   1dafc:	2230      	movs	r2, #48	; 0x30
   1dafe:	2180      	movs	r1, #128	; 0x80
   1db00:	4d1a      	ldr	r5, [pc, #104]	; (1db6c <sd_decode_csd+0xe0>)
   1db02:	47a8      	blx	r5
   1db04:	0003      	movs	r3, r0
				* 512;
   1db06:	3301      	adds	r3, #1
   1db08:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1db0a:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1db0c:	e028      	b.n	1db60 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1db0e:	4b16      	ldr	r3, [pc, #88]	; (1db68 <sd_decode_csd+0xdc>)
   1db10:	681b      	ldr	r3, [r3, #0]
   1db12:	330e      	adds	r3, #14
   1db14:	0018      	movs	r0, r3
   1db16:	230c      	movs	r3, #12
   1db18:	223e      	movs	r2, #62	; 0x3e
   1db1a:	2180      	movs	r1, #128	; 0x80
   1db1c:	4c13      	ldr	r4, [pc, #76]	; (1db6c <sd_decode_csd+0xe0>)
   1db1e:	47a0      	blx	r4
   1db20:	0003      	movs	r3, r0
   1db22:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1db24:	4b10      	ldr	r3, [pc, #64]	; (1db68 <sd_decode_csd+0xdc>)
   1db26:	681b      	ldr	r3, [r3, #0]
   1db28:	330e      	adds	r3, #14
   1db2a:	0018      	movs	r0, r3
   1db2c:	2303      	movs	r3, #3
   1db2e:	222f      	movs	r2, #47	; 0x2f
   1db30:	2180      	movs	r1, #128	; 0x80
   1db32:	4d0e      	ldr	r5, [pc, #56]	; (1db6c <sd_decode_csd+0xe0>)
   1db34:	47a8      	blx	r5
   1db36:	0003      	movs	r3, r0
   1db38:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1db3a:	409c      	lsls	r4, r3
   1db3c:	0023      	movs	r3, r4
   1db3e:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1db40:	4b09      	ldr	r3, [pc, #36]	; (1db68 <sd_decode_csd+0xdc>)
   1db42:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1db44:	4b08      	ldr	r3, [pc, #32]	; (1db68 <sd_decode_csd+0xdc>)
   1db46:	681b      	ldr	r3, [r3, #0]
   1db48:	330e      	adds	r3, #14
   1db4a:	0018      	movs	r0, r3
   1db4c:	2304      	movs	r3, #4
   1db4e:	2250      	movs	r2, #80	; 0x50
   1db50:	2180      	movs	r1, #128	; 0x80
   1db52:	4d06      	ldr	r5, [pc, #24]	; (1db6c <sd_decode_csd+0xe0>)
   1db54:	47a8      	blx	r5
   1db56:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1db58:	683b      	ldr	r3, [r7, #0]
   1db5a:	4093      	lsls	r3, r2
				/ 1024;
   1db5c:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1db5e:	6063      	str	r3, [r4, #4]
}
   1db60:	46c0      	nop			; (mov r8, r8)
   1db62:	46bd      	mov	sp, r7
   1db64:	b004      	add	sp, #16
   1db66:	bdb0      	pop	{r4, r5, r7, pc}
   1db68:	200040a8 	.word	0x200040a8
   1db6c:	0001d459 	.word	0x0001d459
   1db70:	00037958 	.word	0x00037958
   1db74:	00037974 	.word	0x00037974

0001db78 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1db78:	b580      	push	{r7, lr}
   1db7a:	b082      	sub	sp, #8
   1db7c:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1db7e:	4b11      	ldr	r3, [pc, #68]	; (1dbc4 <sd_mmc_cmd13+0x4c>)
   1db80:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1db82:	4b11      	ldr	r3, [pc, #68]	; (1dbc8 <sd_mmc_cmd13+0x50>)
   1db84:	2100      	movs	r1, #0
   1db86:	0018      	movs	r0, r3
   1db88:	4b10      	ldr	r3, [pc, #64]	; (1dbcc <sd_mmc_cmd13+0x54>)
   1db8a:	4798      	blx	r3
   1db8c:	0003      	movs	r3, r0
   1db8e:	001a      	movs	r2, r3
   1db90:	2301      	movs	r3, #1
   1db92:	4053      	eors	r3, r2
   1db94:	b2db      	uxtb	r3, r3
   1db96:	2b00      	cmp	r3, #0
   1db98:	d001      	beq.n	1db9e <sd_mmc_cmd13+0x26>
				return false;
   1db9a:	2300      	movs	r3, #0
   1db9c:	e00e      	b.n	1dbbc <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1db9e:	4b0c      	ldr	r3, [pc, #48]	; (1dbd0 <sd_mmc_cmd13+0x58>)
   1dba0:	4798      	blx	r3
   1dba2:	0002      	movs	r2, r0
   1dba4:	23ff      	movs	r3, #255	; 0xff
   1dba6:	4013      	ands	r3, r2
   1dba8:	d006      	beq.n	1dbb8 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1dbaa:	687b      	ldr	r3, [r7, #4]
   1dbac:	1e5a      	subs	r2, r3, #1
   1dbae:	607a      	str	r2, [r7, #4]
   1dbb0:	2b00      	cmp	r3, #0
   1dbb2:	d1e6      	bne.n	1db82 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1dbb4:	2300      	movs	r3, #0
   1dbb6:	e001      	b.n	1dbbc <sd_mmc_cmd13+0x44>
				break;
   1dbb8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1dbba:	2301      	movs	r3, #1
}
   1dbbc:	0018      	movs	r0, r3
   1dbbe:	46bd      	mov	sp, r7
   1dbc0:	b002      	add	sp, #8
   1dbc2:	bd80      	pop	{r7, pc}
   1dbc4:	00030d40 	.word	0x00030d40
   1dbc8:	00001b0d 	.word	0x00001b0d
   1dbcc:	0001f031 	.word	0x0001f031
   1dbd0:	0001f271 	.word	0x0001f271

0001dbd4 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1dbd4:	b590      	push	{r4, r7, lr}
   1dbd6:	b085      	sub	sp, #20
   1dbd8:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1dbda:	4b38      	ldr	r3, [pc, #224]	; (1dcbc <sd_acmd51+0xe8>)
   1dbdc:	681b      	ldr	r3, [r3, #0]
   1dbde:	891b      	ldrh	r3, [r3, #8]
   1dbe0:	041b      	lsls	r3, r3, #16
   1dbe2:	4a37      	ldr	r2, [pc, #220]	; (1dcc0 <sd_acmd51+0xec>)
   1dbe4:	0019      	movs	r1, r3
   1dbe6:	0010      	movs	r0, r2
   1dbe8:	4b36      	ldr	r3, [pc, #216]	; (1dcc4 <sd_acmd51+0xf0>)
   1dbea:	4798      	blx	r3
   1dbec:	0003      	movs	r3, r0
   1dbee:	001a      	movs	r2, r3
   1dbf0:	2301      	movs	r3, #1
   1dbf2:	4053      	eors	r3, r2
   1dbf4:	b2db      	uxtb	r3, r3
   1dbf6:	2b00      	cmp	r3, #0
   1dbf8:	d001      	beq.n	1dbfe <sd_acmd51+0x2a>
		return false;
   1dbfa:	2300      	movs	r3, #0
   1dbfc:	e059      	b.n	1dcb2 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1dbfe:	4832      	ldr	r0, [pc, #200]	; (1dcc8 <sd_acmd51+0xf4>)
   1dc00:	2301      	movs	r3, #1
   1dc02:	9300      	str	r3, [sp, #0]
   1dc04:	2301      	movs	r3, #1
   1dc06:	2208      	movs	r2, #8
   1dc08:	2100      	movs	r1, #0
   1dc0a:	4c30      	ldr	r4, [pc, #192]	; (1dccc <sd_acmd51+0xf8>)
   1dc0c:	47a0      	blx	r4
   1dc0e:	0003      	movs	r3, r0
   1dc10:	001a      	movs	r2, r3
   1dc12:	2301      	movs	r3, #1
   1dc14:	4053      	eors	r3, r2
   1dc16:	b2db      	uxtb	r3, r3
   1dc18:	2b00      	cmp	r3, #0
   1dc1a:	d001      	beq.n	1dc20 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1dc1c:	2300      	movs	r3, #0
   1dc1e:	e048      	b.n	1dcb2 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1dc20:	003b      	movs	r3, r7
   1dc22:	2101      	movs	r1, #1
   1dc24:	0018      	movs	r0, r3
   1dc26:	4b2a      	ldr	r3, [pc, #168]	; (1dcd0 <sd_acmd51+0xfc>)
   1dc28:	4798      	blx	r3
   1dc2a:	0003      	movs	r3, r0
   1dc2c:	001a      	movs	r2, r3
   1dc2e:	2301      	movs	r3, #1
   1dc30:	4053      	eors	r3, r2
   1dc32:	b2db      	uxtb	r3, r3
   1dc34:	2b00      	cmp	r3, #0
   1dc36:	d001      	beq.n	1dc3c <sd_acmd51+0x68>
		return false;
   1dc38:	2300      	movs	r3, #0
   1dc3a:	e03a      	b.n	1dcb2 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1dc3c:	4b25      	ldr	r3, [pc, #148]	; (1dcd4 <sd_acmd51+0x100>)
   1dc3e:	4798      	blx	r3
   1dc40:	0003      	movs	r3, r0
   1dc42:	001a      	movs	r2, r3
   1dc44:	2301      	movs	r3, #1
   1dc46:	4053      	eors	r3, r2
   1dc48:	b2db      	uxtb	r3, r3
   1dc4a:	2b00      	cmp	r3, #0
   1dc4c:	d001      	beq.n	1dc52 <sd_acmd51+0x7e>
		return false;
   1dc4e:	2300      	movs	r3, #0
   1dc50:	e02f      	b.n	1dcb2 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1dc52:	0038      	movs	r0, r7
   1dc54:	2304      	movs	r3, #4
   1dc56:	2238      	movs	r2, #56	; 0x38
   1dc58:	2140      	movs	r1, #64	; 0x40
   1dc5a:	4c1f      	ldr	r4, [pc, #124]	; (1dcd8 <sd_acmd51+0x104>)
   1dc5c:	47a0      	blx	r4
   1dc5e:	0003      	movs	r3, r0
   1dc60:	2b01      	cmp	r3, #1
   1dc62:	d008      	beq.n	1dc76 <sd_acmd51+0xa2>
   1dc64:	d302      	bcc.n	1dc6c <sd_acmd51+0x98>
   1dc66:	2b02      	cmp	r3, #2
   1dc68:	d00a      	beq.n	1dc80 <sd_acmd51+0xac>
   1dc6a:	e01c      	b.n	1dca6 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1dc6c:	4b13      	ldr	r3, [pc, #76]	; (1dcbc <sd_acmd51+0xe8>)
   1dc6e:	681b      	ldr	r3, [r3, #0]
   1dc70:	2210      	movs	r2, #16
   1dc72:	731a      	strb	r2, [r3, #12]
		break;
   1dc74:	e01c      	b.n	1dcb0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1dc76:	4b11      	ldr	r3, [pc, #68]	; (1dcbc <sd_acmd51+0xe8>)
   1dc78:	681b      	ldr	r3, [r3, #0]
   1dc7a:	221a      	movs	r2, #26
   1dc7c:	731a      	strb	r2, [r3, #12]
		break;
   1dc7e:	e017      	b.n	1dcb0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1dc80:	0038      	movs	r0, r7
   1dc82:	2301      	movs	r3, #1
   1dc84:	222f      	movs	r2, #47	; 0x2f
   1dc86:	2140      	movs	r1, #64	; 0x40
   1dc88:	4c13      	ldr	r4, [pc, #76]	; (1dcd8 <sd_acmd51+0x104>)
   1dc8a:	47a0      	blx	r4
   1dc8c:	0003      	movs	r3, r0
   1dc8e:	2b01      	cmp	r3, #1
   1dc90:	d104      	bne.n	1dc9c <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1dc92:	4b0a      	ldr	r3, [pc, #40]	; (1dcbc <sd_acmd51+0xe8>)
   1dc94:	681b      	ldr	r3, [r3, #0]
   1dc96:	2230      	movs	r2, #48	; 0x30
   1dc98:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1dc9a:	e009      	b.n	1dcb0 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1dc9c:	4b07      	ldr	r3, [pc, #28]	; (1dcbc <sd_acmd51+0xe8>)
   1dc9e:	681b      	ldr	r3, [r3, #0]
   1dca0:	2220      	movs	r2, #32
   1dca2:	731a      	strb	r2, [r3, #12]
		break;
   1dca4:	e004      	b.n	1dcb0 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1dca6:	4b05      	ldr	r3, [pc, #20]	; (1dcbc <sd_acmd51+0xe8>)
   1dca8:	681b      	ldr	r3, [r3, #0]
   1dcaa:	2210      	movs	r2, #16
   1dcac:	731a      	strb	r2, [r3, #12]
		break;
   1dcae:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1dcb0:	2301      	movs	r3, #1
}
   1dcb2:	0018      	movs	r0, r3
   1dcb4:	46bd      	mov	sp, r7
   1dcb6:	b003      	add	sp, #12
   1dcb8:	bd90      	pop	{r4, r7, pc}
   1dcba:	46c0      	nop			; (mov r8, r8)
   1dcbc:	200040a8 	.word	0x200040a8
   1dcc0:	00001137 	.word	0x00001137
   1dcc4:	0001f031 	.word	0x0001f031
   1dcc8:	00081133 	.word	0x00081133
   1dccc:	0001f059 	.word	0x0001f059
   1dcd0:	0001f329 	.word	0x0001f329
   1dcd4:	0001f3cd 	.word	0x0001f3cd
   1dcd8:	0001d459 	.word	0x0001d459

0001dcdc <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1dcdc:	b580      	push	{r7, lr}
   1dcde:	b082      	sub	sp, #8
   1dce0:	af00      	add	r7, sp, #0
   1dce2:	0002      	movs	r2, r0
   1dce4:	1dfb      	adds	r3, r7, #7
   1dce6:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1dce8:	1dfb      	adds	r3, r7, #7
   1dcea:	781b      	ldrb	r3, [r3, #0]
   1dcec:	2b00      	cmp	r3, #0
   1dcee:	d001      	beq.n	1dcf4 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1dcf0:	2304      	movs	r3, #4
   1dcf2:	e047      	b.n	1dd84 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1dcf4:	1dfb      	adds	r3, r7, #7
   1dcf6:	781b      	ldrb	r3, [r3, #0]
   1dcf8:	4a24      	ldr	r2, [pc, #144]	; (1dd8c <sd_mmc_select_slot+0xb0>)
   1dcfa:	015b      	lsls	r3, r3, #5
   1dcfc:	18d3      	adds	r3, r2, r3
   1dcfe:	330a      	adds	r3, #10
   1dd00:	781b      	ldrb	r3, [r3, #0]
   1dd02:	2b04      	cmp	r3, #4
   1dd04:	d008      	beq.n	1dd18 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1dd06:	1dfb      	adds	r3, r7, #7
   1dd08:	781b      	ldrb	r3, [r3, #0]
   1dd0a:	4a20      	ldr	r2, [pc, #128]	; (1dd8c <sd_mmc_select_slot+0xb0>)
   1dd0c:	015b      	lsls	r3, r3, #5
   1dd0e:	18d3      	adds	r3, r2, r3
   1dd10:	330a      	adds	r3, #10
   1dd12:	781b      	ldrb	r3, [r3, #0]
   1dd14:	2b03      	cmp	r3, #3
   1dd16:	d11d      	bne.n	1dd54 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1dd18:	1dfb      	adds	r3, r7, #7
   1dd1a:	781b      	ldrb	r3, [r3, #0]
   1dd1c:	4a1b      	ldr	r2, [pc, #108]	; (1dd8c <sd_mmc_select_slot+0xb0>)
   1dd1e:	015b      	lsls	r3, r3, #5
   1dd20:	18d3      	adds	r3, r2, r3
   1dd22:	330a      	adds	r3, #10
   1dd24:	2202      	movs	r2, #2
   1dd26:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1dd28:	1dfb      	adds	r3, r7, #7
   1dd2a:	781a      	ldrb	r2, [r3, #0]
   1dd2c:	4b17      	ldr	r3, [pc, #92]	; (1dd8c <sd_mmc_select_slot+0xb0>)
   1dd2e:	0152      	lsls	r2, r2, #5
   1dd30:	4917      	ldr	r1, [pc, #92]	; (1dd90 <sd_mmc_select_slot+0xb4>)
   1dd32:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1dd34:	1dfb      	adds	r3, r7, #7
   1dd36:	781b      	ldrb	r3, [r3, #0]
   1dd38:	4a14      	ldr	r2, [pc, #80]	; (1dd8c <sd_mmc_select_slot+0xb0>)
   1dd3a:	015b      	lsls	r3, r3, #5
   1dd3c:	18d3      	adds	r3, r2, r3
   1dd3e:	330d      	adds	r3, #13
   1dd40:	2201      	movs	r2, #1
   1dd42:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1dd44:	1dfb      	adds	r3, r7, #7
   1dd46:	781b      	ldrb	r3, [r3, #0]
   1dd48:	4a10      	ldr	r2, [pc, #64]	; (1dd8c <sd_mmc_select_slot+0xb0>)
   1dd4a:	015b      	lsls	r3, r3, #5
   1dd4c:	18d3      	adds	r3, r2, r3
   1dd4e:	331e      	adds	r3, #30
   1dd50:	2200      	movs	r2, #0
   1dd52:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1dd54:	4b0f      	ldr	r3, [pc, #60]	; (1dd94 <sd_mmc_select_slot+0xb8>)
   1dd56:	1dfa      	adds	r2, r7, #7
   1dd58:	7812      	ldrb	r2, [r2, #0]
   1dd5a:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1dd5c:	1dfb      	adds	r3, r7, #7
   1dd5e:	781b      	ldrb	r3, [r3, #0]
   1dd60:	015a      	lsls	r2, r3, #5
   1dd62:	4b0a      	ldr	r3, [pc, #40]	; (1dd8c <sd_mmc_select_slot+0xb0>)
   1dd64:	18d2      	adds	r2, r2, r3
   1dd66:	4b0c      	ldr	r3, [pc, #48]	; (1dd98 <sd_mmc_select_slot+0xbc>)
   1dd68:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1dd6a:	4b0c      	ldr	r3, [pc, #48]	; (1dd9c <sd_mmc_select_slot+0xc0>)
   1dd6c:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1dd6e:	1dfb      	adds	r3, r7, #7
   1dd70:	781b      	ldrb	r3, [r3, #0]
   1dd72:	4a06      	ldr	r2, [pc, #24]	; (1dd8c <sd_mmc_select_slot+0xb0>)
   1dd74:	015b      	lsls	r3, r3, #5
   1dd76:	18d3      	adds	r3, r2, r3
   1dd78:	330a      	adds	r3, #10
   1dd7a:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1dd7c:	3b02      	subs	r3, #2
   1dd7e:	425a      	negs	r2, r3
   1dd80:	4153      	adcs	r3, r2
   1dd82:	b2db      	uxtb	r3, r3
}
   1dd84:	0018      	movs	r0, r3
   1dd86:	46bd      	mov	sp, r7
   1dd88:	b002      	add	sp, #8
   1dd8a:	bd80      	pop	{r7, pc}
   1dd8c:	20004084 	.word	0x20004084
   1dd90:	00061a80 	.word	0x00061a80
   1dd94:	200040a4 	.word	0x200040a4
   1dd98:	200040a8 	.word	0x200040a8
   1dd9c:	0001dda1 	.word	0x0001dda1

0001dda0 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1dda0:	b5b0      	push	{r4, r5, r7, lr}
   1dda2:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1dda4:	4b09      	ldr	r3, [pc, #36]	; (1ddcc <sd_mmc_configure_slot+0x2c>)
   1dda6:	7818      	ldrb	r0, [r3, #0]
   1dda8:	4b09      	ldr	r3, [pc, #36]	; (1ddd0 <sd_mmc_configure_slot+0x30>)
   1ddaa:	681b      	ldr	r3, [r3, #0]
   1ddac:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1ddae:	4b08      	ldr	r3, [pc, #32]	; (1ddd0 <sd_mmc_configure_slot+0x30>)
   1ddb0:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1ddb2:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1ddb4:	4b06      	ldr	r3, [pc, #24]	; (1ddd0 <sd_mmc_configure_slot+0x30>)
   1ddb6:	681b      	ldr	r3, [r3, #0]
   1ddb8:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1ddba:	1e5c      	subs	r4, r3, #1
   1ddbc:	41a3      	sbcs	r3, r4
   1ddbe:	b2db      	uxtb	r3, r3
   1ddc0:	4c04      	ldr	r4, [pc, #16]	; (1ddd4 <sd_mmc_configure_slot+0x34>)
   1ddc2:	47a0      	blx	r4
}
   1ddc4:	46c0      	nop			; (mov r8, r8)
   1ddc6:	46bd      	mov	sp, r7
   1ddc8:	bdb0      	pop	{r4, r5, r7, pc}
   1ddca:	46c0      	nop			; (mov r8, r8)
   1ddcc:	200040a4 	.word	0x200040a4
   1ddd0:	200040a8 	.word	0x200040a8
   1ddd4:	0001ef19 	.word	0x0001ef19

0001ddd8 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1ddd8:	b580      	push	{r7, lr}
   1ddda:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1dddc:	4b05      	ldr	r3, [pc, #20]	; (1ddf4 <sd_mmc_deselect_slot+0x1c>)
   1ddde:	781b      	ldrb	r3, [r3, #0]
   1dde0:	2b00      	cmp	r3, #0
   1dde2:	d104      	bne.n	1ddee <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1dde4:	4b03      	ldr	r3, [pc, #12]	; (1ddf4 <sd_mmc_deselect_slot+0x1c>)
   1dde6:	781b      	ldrb	r3, [r3, #0]
   1dde8:	0018      	movs	r0, r3
   1ddea:	4b03      	ldr	r3, [pc, #12]	; (1ddf8 <sd_mmc_deselect_slot+0x20>)
   1ddec:	4798      	blx	r3
	}
}
   1ddee:	46c0      	nop			; (mov r8, r8)
   1ddf0:	46bd      	mov	sp, r7
   1ddf2:	bd80      	pop	{r7, pc}
   1ddf4:	200040a4 	.word	0x200040a4
   1ddf8:	0001efa1 	.word	0x0001efa1

0001ddfc <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1ddfc:	b580      	push	{r7, lr}
   1ddfe:	b082      	sub	sp, #8
   1de00:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1de02:	1dfb      	adds	r3, r7, #7
   1de04:	2200      	movs	r2, #0
   1de06:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1de08:	4b59      	ldr	r3, [pc, #356]	; (1df70 <sd_mmc_spi_card_init+0x174>)
   1de0a:	681b      	ldr	r3, [r3, #0]
   1de0c:	2201      	movs	r2, #1
   1de0e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1de10:	4b57      	ldr	r3, [pc, #348]	; (1df70 <sd_mmc_spi_card_init+0x174>)
   1de12:	681b      	ldr	r3, [r3, #0]
   1de14:	2200      	movs	r2, #0
   1de16:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1de18:	4b55      	ldr	r3, [pc, #340]	; (1df70 <sd_mmc_spi_card_init+0x174>)
   1de1a:	681b      	ldr	r3, [r3, #0]
   1de1c:	2200      	movs	r2, #0
   1de1e:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1de20:	4b54      	ldr	r3, [pc, #336]	; (1df74 <sd_mmc_spi_card_init+0x178>)
   1de22:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1de24:	2388      	movs	r3, #136	; 0x88
   1de26:	015b      	lsls	r3, r3, #5
   1de28:	2100      	movs	r1, #0
   1de2a:	0018      	movs	r0, r3
   1de2c:	4b52      	ldr	r3, [pc, #328]	; (1df78 <sd_mmc_spi_card_init+0x17c>)
   1de2e:	4798      	blx	r3
   1de30:	0003      	movs	r3, r0
   1de32:	001a      	movs	r2, r3
   1de34:	2301      	movs	r3, #1
   1de36:	4053      	eors	r3, r2
   1de38:	b2db      	uxtb	r3, r3
   1de3a:	2b00      	cmp	r3, #0
   1de3c:	d001      	beq.n	1de42 <sd_mmc_spi_card_init+0x46>
		return false;
   1de3e:	2300      	movs	r3, #0
   1de40:	e092      	b.n	1df68 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1de42:	1dfb      	adds	r3, r7, #7
   1de44:	0018      	movs	r0, r3
   1de46:	4b4d      	ldr	r3, [pc, #308]	; (1df7c <sd_mmc_spi_card_init+0x180>)
   1de48:	4798      	blx	r3
   1de4a:	0003      	movs	r3, r0
   1de4c:	001a      	movs	r2, r3
   1de4e:	2301      	movs	r3, #1
   1de50:	4053      	eors	r3, r2
   1de52:	b2db      	uxtb	r3, r3
   1de54:	2b00      	cmp	r3, #0
   1de56:	d001      	beq.n	1de5c <sd_mmc_spi_card_init+0x60>
		return false;
   1de58:	2300      	movs	r3, #0
   1de5a:	e085      	b.n	1df68 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1de5c:	4b48      	ldr	r3, [pc, #288]	; (1df80 <sd_mmc_spi_card_init+0x184>)
   1de5e:	4798      	blx	r3
   1de60:	0003      	movs	r3, r0
   1de62:	001a      	movs	r2, r3
   1de64:	2301      	movs	r3, #1
   1de66:	4053      	eors	r3, r2
   1de68:	b2db      	uxtb	r3, r3
   1de6a:	2b00      	cmp	r3, #0
   1de6c:	d001      	beq.n	1de72 <sd_mmc_spi_card_init+0x76>
		return false;
   1de6e:	2300      	movs	r3, #0
   1de70:	e07a      	b.n	1df68 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1de72:	4b3f      	ldr	r3, [pc, #252]	; (1df70 <sd_mmc_spi_card_init+0x174>)
   1de74:	681b      	ldr	r3, [r3, #0]
   1de76:	7adb      	ldrb	r3, [r3, #11]
   1de78:	001a      	movs	r2, r3
   1de7a:	2301      	movs	r3, #1
   1de7c:	4013      	ands	r3, r2
   1de7e:	d021      	beq.n	1dec4 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1de80:	1dfb      	adds	r3, r7, #7
   1de82:	781b      	ldrb	r3, [r3, #0]
   1de84:	0018      	movs	r0, r3
   1de86:	4b3f      	ldr	r3, [pc, #252]	; (1df84 <sd_mmc_spi_card_init+0x188>)
   1de88:	4798      	blx	r3
   1de8a:	0003      	movs	r3, r0
   1de8c:	001a      	movs	r2, r3
   1de8e:	2301      	movs	r3, #1
   1de90:	4053      	eors	r3, r2
   1de92:	b2db      	uxtb	r3, r3
   1de94:	2b00      	cmp	r3, #0
   1de96:	d007      	beq.n	1dea8 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1de98:	4b35      	ldr	r3, [pc, #212]	; (1df70 <sd_mmc_spi_card_init+0x174>)
   1de9a:	681b      	ldr	r3, [r3, #0]
   1de9c:	2202      	movs	r2, #2
   1de9e:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1dea0:	4b39      	ldr	r3, [pc, #228]	; (1df88 <sd_mmc_spi_card_init+0x18c>)
   1dea2:	4798      	blx	r3
   1dea4:	0003      	movs	r3, r0
   1dea6:	e05f      	b.n	1df68 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1dea8:	4b38      	ldr	r3, [pc, #224]	; (1df8c <sd_mmc_spi_card_init+0x190>)
   1deaa:	2100      	movs	r1, #0
   1deac:	0018      	movs	r0, r3
   1deae:	4b32      	ldr	r3, [pc, #200]	; (1df78 <sd_mmc_spi_card_init+0x17c>)
   1deb0:	4798      	blx	r3
   1deb2:	0003      	movs	r3, r0
   1deb4:	001a      	movs	r2, r3
   1deb6:	2301      	movs	r3, #1
   1deb8:	4053      	eors	r3, r2
   1deba:	b2db      	uxtb	r3, r3
   1debc:	2b00      	cmp	r3, #0
   1debe:	d001      	beq.n	1dec4 <sd_mmc_spi_card_init+0xc8>
			return false;
   1dec0:	2300      	movs	r3, #0
   1dec2:	e051      	b.n	1df68 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1dec4:	4b2a      	ldr	r3, [pc, #168]	; (1df70 <sd_mmc_spi_card_init+0x174>)
   1dec6:	681b      	ldr	r3, [r3, #0]
   1dec8:	7adb      	ldrb	r3, [r3, #11]
   1deca:	001a      	movs	r2, r3
   1decc:	2301      	movs	r3, #1
   1dece:	4013      	ands	r3, r2
   1ded0:	d017      	beq.n	1df02 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1ded2:	4b2f      	ldr	r3, [pc, #188]	; (1df90 <sd_mmc_spi_card_init+0x194>)
   1ded4:	4798      	blx	r3
   1ded6:	0003      	movs	r3, r0
   1ded8:	001a      	movs	r2, r3
   1deda:	2301      	movs	r3, #1
   1dedc:	4053      	eors	r3, r2
   1dede:	b2db      	uxtb	r3, r3
   1dee0:	2b00      	cmp	r3, #0
   1dee2:	d001      	beq.n	1dee8 <sd_mmc_spi_card_init+0xec>
			return false;
   1dee4:	2300      	movs	r3, #0
   1dee6:	e03f      	b.n	1df68 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1dee8:	4b2a      	ldr	r3, [pc, #168]	; (1df94 <sd_mmc_spi_card_init+0x198>)
   1deea:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1deec:	4b2a      	ldr	r3, [pc, #168]	; (1df98 <sd_mmc_spi_card_init+0x19c>)
   1deee:	4798      	blx	r3
   1def0:	0003      	movs	r3, r0
   1def2:	001a      	movs	r2, r3
   1def4:	2301      	movs	r3, #1
   1def6:	4053      	eors	r3, r2
   1def8:	b2db      	uxtb	r3, r3
   1defa:	2b00      	cmp	r3, #0
   1defc:	d001      	beq.n	1df02 <sd_mmc_spi_card_init+0x106>
			return false;
   1defe:	2300      	movs	r3, #0
   1df00:	e032      	b.n	1df68 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1df02:	4b1b      	ldr	r3, [pc, #108]	; (1df70 <sd_mmc_spi_card_init+0x174>)
   1df04:	681b      	ldr	r3, [r3, #0]
   1df06:	7adb      	ldrb	r3, [r3, #11]
   1df08:	001a      	movs	r2, r3
   1df0a:	2301      	movs	r3, #1
   1df0c:	4013      	ands	r3, r2
   1df0e:	d016      	beq.n	1df3e <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1df10:	4b17      	ldr	r3, [pc, #92]	; (1df70 <sd_mmc_spi_card_init+0x174>)
   1df12:	681b      	ldr	r3, [r3, #0]
   1df14:	7adb      	ldrb	r3, [r3, #11]
   1df16:	001a      	movs	r2, r3
   1df18:	2308      	movs	r3, #8
   1df1a:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1df1c:	d10f      	bne.n	1df3e <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1df1e:	2380      	movs	r3, #128	; 0x80
   1df20:	009b      	lsls	r3, r3, #2
   1df22:	4a1e      	ldr	r2, [pc, #120]	; (1df9c <sd_mmc_spi_card_init+0x1a0>)
   1df24:	0019      	movs	r1, r3
   1df26:	0010      	movs	r0, r2
   1df28:	4b13      	ldr	r3, [pc, #76]	; (1df78 <sd_mmc_spi_card_init+0x17c>)
   1df2a:	4798      	blx	r3
   1df2c:	0003      	movs	r3, r0
   1df2e:	001a      	movs	r2, r3
   1df30:	2301      	movs	r3, #1
   1df32:	4053      	eors	r3, r2
   1df34:	b2db      	uxtb	r3, r3
   1df36:	2b00      	cmp	r3, #0
   1df38:	d001      	beq.n	1df3e <sd_mmc_spi_card_init+0x142>
			return false;
   1df3a:	2300      	movs	r3, #0
   1df3c:	e014      	b.n	1df68 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1df3e:	4b0c      	ldr	r3, [pc, #48]	; (1df70 <sd_mmc_spi_card_init+0x174>)
   1df40:	681b      	ldr	r3, [r3, #0]
   1df42:	7adb      	ldrb	r3, [r3, #11]
   1df44:	001a      	movs	r2, r3
   1df46:	2301      	movs	r3, #1
   1df48:	4013      	ands	r3, r2
   1df4a:	d00a      	beq.n	1df62 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1df4c:	4b14      	ldr	r3, [pc, #80]	; (1dfa0 <sd_mmc_spi_card_init+0x1a4>)
   1df4e:	4798      	blx	r3
   1df50:	0003      	movs	r3, r0
   1df52:	001a      	movs	r2, r3
   1df54:	2301      	movs	r3, #1
   1df56:	4053      	eors	r3, r2
   1df58:	b2db      	uxtb	r3, r3
   1df5a:	2b00      	cmp	r3, #0
   1df5c:	d001      	beq.n	1df62 <sd_mmc_spi_card_init+0x166>
			return false;
   1df5e:	2300      	movs	r3, #0
   1df60:	e002      	b.n	1df68 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1df62:	4b10      	ldr	r3, [pc, #64]	; (1dfa4 <sd_mmc_spi_card_init+0x1a8>)
   1df64:	4798      	blx	r3
	return true;
   1df66:	2301      	movs	r3, #1
}
   1df68:	0018      	movs	r0, r3
   1df6a:	46bd      	mov	sp, r7
   1df6c:	b002      	add	sp, #8
   1df6e:	bd80      	pop	{r7, pc}
   1df70:	200040a8 	.word	0x200040a8
   1df74:	0001efe5 	.word	0x0001efe5
   1df78:	0001f031 	.word	0x0001f031
   1df7c:	0001d751 	.word	0x0001d751
   1df80:	0001d745 	.word	0x0001d745
   1df84:	0001d661 	.word	0x0001d661
   1df88:	0001dfa9 	.word	0x0001dfa9
   1df8c:	0000113b 	.word	0x0000113b
   1df90:	0001d8ed 	.word	0x0001d8ed
   1df94:	0001da8d 	.word	0x0001da8d
   1df98:	0001dbd5 	.word	0x0001dbd5
   1df9c:	00001110 	.word	0x00001110
   1dfa0:	0001db79 	.word	0x0001db79
   1dfa4:	0001dda1 	.word	0x0001dda1

0001dfa8 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1dfa8:	b580      	push	{r7, lr}
   1dfaa:	b082      	sub	sp, #8
   1dfac:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1dfae:	2388      	movs	r3, #136	; 0x88
   1dfb0:	015b      	lsls	r3, r3, #5
   1dfb2:	2100      	movs	r1, #0
   1dfb4:	0018      	movs	r0, r3
   1dfb6:	4b32      	ldr	r3, [pc, #200]	; (1e080 <sd_mmc_spi_install_mmc+0xd8>)
   1dfb8:	4798      	blx	r3
   1dfba:	0003      	movs	r3, r0
   1dfbc:	001a      	movs	r2, r3
   1dfbe:	2301      	movs	r3, #1
   1dfc0:	4053      	eors	r3, r2
   1dfc2:	b2db      	uxtb	r3, r3
   1dfc4:	2b00      	cmp	r3, #0
   1dfc6:	d001      	beq.n	1dfcc <sd_mmc_spi_install_mmc+0x24>
		return false;
   1dfc8:	2300      	movs	r3, #0
   1dfca:	e055      	b.n	1e078 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1dfcc:	4b2d      	ldr	r3, [pc, #180]	; (1e084 <sd_mmc_spi_install_mmc+0xdc>)
   1dfce:	4798      	blx	r3
   1dfd0:	0003      	movs	r3, r0
   1dfd2:	001a      	movs	r2, r3
   1dfd4:	2301      	movs	r3, #1
   1dfd6:	4053      	eors	r3, r2
   1dfd8:	b2db      	uxtb	r3, r3
   1dfda:	2b00      	cmp	r3, #0
   1dfdc:	d001      	beq.n	1dfe2 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1dfde:	2300      	movs	r3, #0
   1dfe0:	e04a      	b.n	1e078 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1dfe2:	4b29      	ldr	r3, [pc, #164]	; (1e088 <sd_mmc_spi_install_mmc+0xe0>)
   1dfe4:	2100      	movs	r1, #0
   1dfe6:	0018      	movs	r0, r3
   1dfe8:	4b25      	ldr	r3, [pc, #148]	; (1e080 <sd_mmc_spi_install_mmc+0xd8>)
   1dfea:	4798      	blx	r3
   1dfec:	0003      	movs	r3, r0
   1dfee:	001a      	movs	r2, r3
   1dff0:	2301      	movs	r3, #1
   1dff2:	4053      	eors	r3, r2
   1dff4:	b2db      	uxtb	r3, r3
   1dff6:	2b00      	cmp	r3, #0
   1dff8:	d001      	beq.n	1dffe <sd_mmc_spi_install_mmc+0x56>
		return false;
   1dffa:	2300      	movs	r3, #0
   1dffc:	e03c      	b.n	1e078 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1dffe:	4b23      	ldr	r3, [pc, #140]	; (1e08c <sd_mmc_spi_install_mmc+0xe4>)
   1e000:	4798      	blx	r3
   1e002:	0003      	movs	r3, r0
   1e004:	001a      	movs	r2, r3
   1e006:	2301      	movs	r3, #1
   1e008:	4053      	eors	r3, r2
   1e00a:	b2db      	uxtb	r3, r3
   1e00c:	2b00      	cmp	r3, #0
   1e00e:	d001      	beq.n	1e014 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1e010:	2300      	movs	r3, #0
   1e012:	e031      	b.n	1e078 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1e014:	4b1e      	ldr	r3, [pc, #120]	; (1e090 <sd_mmc_spi_install_mmc+0xe8>)
   1e016:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1e018:	4b1e      	ldr	r3, [pc, #120]	; (1e094 <sd_mmc_spi_install_mmc+0xec>)
   1e01a:	681b      	ldr	r3, [r3, #0]
   1e01c:	7b1b      	ldrb	r3, [r3, #12]
   1e01e:	2b3f      	cmp	r3, #63	; 0x3f
   1e020:	d90c      	bls.n	1e03c <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1e022:	1dfb      	adds	r3, r7, #7
   1e024:	0018      	movs	r0, r3
   1e026:	4b1c      	ldr	r3, [pc, #112]	; (1e098 <sd_mmc_spi_install_mmc+0xf0>)
   1e028:	4798      	blx	r3
   1e02a:	0003      	movs	r3, r0
   1e02c:	001a      	movs	r2, r3
   1e02e:	2301      	movs	r3, #1
   1e030:	4053      	eors	r3, r2
   1e032:	b2db      	uxtb	r3, r3
   1e034:	2b00      	cmp	r3, #0
   1e036:	d001      	beq.n	1e03c <sd_mmc_spi_install_mmc+0x94>
			return false;
   1e038:	2300      	movs	r3, #0
   1e03a:	e01d      	b.n	1e078 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1e03c:	2380      	movs	r3, #128	; 0x80
   1e03e:	009b      	lsls	r3, r3, #2
   1e040:	4a16      	ldr	r2, [pc, #88]	; (1e09c <sd_mmc_spi_install_mmc+0xf4>)
   1e042:	0019      	movs	r1, r3
   1e044:	0010      	movs	r0, r2
   1e046:	4b0e      	ldr	r3, [pc, #56]	; (1e080 <sd_mmc_spi_install_mmc+0xd8>)
   1e048:	4798      	blx	r3
   1e04a:	0003      	movs	r3, r0
   1e04c:	001a      	movs	r2, r3
   1e04e:	2301      	movs	r3, #1
   1e050:	4053      	eors	r3, r2
   1e052:	b2db      	uxtb	r3, r3
   1e054:	2b00      	cmp	r3, #0
   1e056:	d001      	beq.n	1e05c <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1e058:	2300      	movs	r3, #0
   1e05a:	e00d      	b.n	1e078 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1e05c:	4b10      	ldr	r3, [pc, #64]	; (1e0a0 <sd_mmc_spi_install_mmc+0xf8>)
   1e05e:	4798      	blx	r3
   1e060:	0003      	movs	r3, r0
   1e062:	001a      	movs	r2, r3
   1e064:	2301      	movs	r3, #1
   1e066:	4053      	eors	r3, r2
   1e068:	b2db      	uxtb	r3, r3
   1e06a:	2b00      	cmp	r3, #0
   1e06c:	d001      	beq.n	1e072 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1e06e:	2300      	movs	r3, #0
   1e070:	e002      	b.n	1e078 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1e072:	4b0c      	ldr	r3, [pc, #48]	; (1e0a4 <sd_mmc_spi_install_mmc+0xfc>)
   1e074:	4798      	blx	r3
	return true;
   1e076:	2301      	movs	r3, #1
}
   1e078:	0018      	movs	r0, r3
   1e07a:	46bd      	mov	sp, r7
   1e07c:	b002      	add	sp, #8
   1e07e:	bd80      	pop	{r7, pc}
   1e080:	0001f031 	.word	0x0001f031
   1e084:	0001d5b5 	.word	0x0001d5b5
   1e088:	0000113b 	.word	0x0000113b
   1e08c:	0001d8ed 	.word	0x0001d8ed
   1e090:	0001d95d 	.word	0x0001d95d
   1e094:	200040a8 	.word	0x200040a8
   1e098:	0001d7c1 	.word	0x0001d7c1
   1e09c:	00001110 	.word	0x00001110
   1e0a0:	0001db79 	.word	0x0001db79
   1e0a4:	0001dda1 	.word	0x0001dda1

0001e0a8 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1e0a8:	b580      	push	{r7, lr}
   1e0aa:	b082      	sub	sp, #8
   1e0ac:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1e0ae:	1dfb      	adds	r3, r7, #7
   1e0b0:	2200      	movs	r2, #0
   1e0b2:	701a      	strb	r2, [r3, #0]
   1e0b4:	e00c      	b.n	1e0d0 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1e0b6:	1dfb      	adds	r3, r7, #7
   1e0b8:	781b      	ldrb	r3, [r3, #0]
   1e0ba:	4a0c      	ldr	r2, [pc, #48]	; (1e0ec <sd_mmc_init+0x44>)
   1e0bc:	015b      	lsls	r3, r3, #5
   1e0be:	18d3      	adds	r3, r2, r3
   1e0c0:	330a      	adds	r3, #10
   1e0c2:	2204      	movs	r2, #4
   1e0c4:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1e0c6:	1dfb      	adds	r3, r7, #7
   1e0c8:	781a      	ldrb	r2, [r3, #0]
   1e0ca:	1dfb      	adds	r3, r7, #7
   1e0cc:	3201      	adds	r2, #1
   1e0ce:	701a      	strb	r2, [r3, #0]
   1e0d0:	1dfb      	adds	r3, r7, #7
   1e0d2:	781b      	ldrb	r3, [r3, #0]
   1e0d4:	2b00      	cmp	r3, #0
   1e0d6:	d0ee      	beq.n	1e0b6 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1e0d8:	4b05      	ldr	r3, [pc, #20]	; (1e0f0 <sd_mmc_init+0x48>)
   1e0da:	22ff      	movs	r2, #255	; 0xff
   1e0dc:	701a      	strb	r2, [r3, #0]
	driver_init();
   1e0de:	4b05      	ldr	r3, [pc, #20]	; (1e0f4 <sd_mmc_init+0x4c>)
   1e0e0:	4798      	blx	r3
}
   1e0e2:	46c0      	nop			; (mov r8, r8)
   1e0e4:	46bd      	mov	sp, r7
   1e0e6:	b002      	add	sp, #8
   1e0e8:	bd80      	pop	{r7, pc}
   1e0ea:	46c0      	nop			; (mov r8, r8)
   1e0ec:	20004084 	.word	0x20004084
   1e0f0:	200040a4 	.word	0x200040a4
   1e0f4:	0001ee51 	.word	0x0001ee51

0001e0f8 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1e0f8:	b590      	push	{r4, r7, lr}
   1e0fa:	b085      	sub	sp, #20
   1e0fc:	af00      	add	r7, sp, #0
   1e0fe:	0002      	movs	r2, r0
   1e100:	1dfb      	adds	r3, r7, #7
   1e102:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1e104:	230f      	movs	r3, #15
   1e106:	18fc      	adds	r4, r7, r3
   1e108:	1dfb      	adds	r3, r7, #7
   1e10a:	781b      	ldrb	r3, [r3, #0]
   1e10c:	0018      	movs	r0, r3
   1e10e:	4b13      	ldr	r3, [pc, #76]	; (1e15c <sd_mmc_check+0x64>)
   1e110:	4798      	blx	r3
   1e112:	0003      	movs	r3, r0
   1e114:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1e116:	230f      	movs	r3, #15
   1e118:	18fb      	adds	r3, r7, r3
   1e11a:	781b      	ldrb	r3, [r3, #0]
   1e11c:	2b01      	cmp	r3, #1
   1e11e:	d005      	beq.n	1e12c <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1e120:	4b0f      	ldr	r3, [pc, #60]	; (1e160 <sd_mmc_check+0x68>)
   1e122:	4798      	blx	r3
		return sd_mmc_err;
   1e124:	230f      	movs	r3, #15
   1e126:	18fb      	adds	r3, r7, r3
   1e128:	781b      	ldrb	r3, [r3, #0]
   1e12a:	e012      	b.n	1e152 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1e12c:	4b0d      	ldr	r3, [pc, #52]	; (1e164 <sd_mmc_check+0x6c>)
   1e12e:	4798      	blx	r3
   1e130:	1e03      	subs	r3, r0, #0
   1e132:	d007      	beq.n	1e144 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1e134:	4b0c      	ldr	r3, [pc, #48]	; (1e168 <sd_mmc_check+0x70>)
   1e136:	681b      	ldr	r3, [r3, #0]
   1e138:	2200      	movs	r2, #0
   1e13a:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1e13c:	4b08      	ldr	r3, [pc, #32]	; (1e160 <sd_mmc_check+0x68>)
   1e13e:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1e140:	2301      	movs	r3, #1
   1e142:	e006      	b.n	1e152 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1e144:	4b08      	ldr	r3, [pc, #32]	; (1e168 <sd_mmc_check+0x70>)
   1e146:	681b      	ldr	r3, [r3, #0]
   1e148:	2203      	movs	r2, #3
   1e14a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1e14c:	4b04      	ldr	r3, [pc, #16]	; (1e160 <sd_mmc_check+0x68>)
   1e14e:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1e150:	2303      	movs	r3, #3
}
   1e152:	0018      	movs	r0, r3
   1e154:	46bd      	mov	sp, r7
   1e156:	b005      	add	sp, #20
   1e158:	bd90      	pop	{r4, r7, pc}
   1e15a:	46c0      	nop			; (mov r8, r8)
   1e15c:	0001dcdd 	.word	0x0001dcdd
   1e160:	0001ddd9 	.word	0x0001ddd9
   1e164:	0001ddfd 	.word	0x0001ddfd
   1e168:	200040a8 	.word	0x200040a8

0001e16c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1e16c:	b580      	push	{r7, lr}
   1e16e:	b082      	sub	sp, #8
   1e170:	af00      	add	r7, sp, #0
   1e172:	0002      	movs	r2, r0
   1e174:	1dfb      	adds	r3, r7, #7
   1e176:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1e178:	1dfb      	adds	r3, r7, #7
   1e17a:	781b      	ldrb	r3, [r3, #0]
   1e17c:	0018      	movs	r0, r3
   1e17e:	4b07      	ldr	r3, [pc, #28]	; (1e19c <sd_mmc_get_type+0x30>)
   1e180:	4798      	blx	r3
   1e182:	1e03      	subs	r3, r0, #0
   1e184:	d001      	beq.n	1e18a <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1e186:	2300      	movs	r3, #0
   1e188:	e004      	b.n	1e194 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1e18a:	4b05      	ldr	r3, [pc, #20]	; (1e1a0 <sd_mmc_get_type+0x34>)
   1e18c:	4798      	blx	r3
	return sd_mmc_card->type;
   1e18e:	4b05      	ldr	r3, [pc, #20]	; (1e1a4 <sd_mmc_get_type+0x38>)
   1e190:	681b      	ldr	r3, [r3, #0]
   1e192:	7adb      	ldrb	r3, [r3, #11]
}
   1e194:	0018      	movs	r0, r3
   1e196:	46bd      	mov	sp, r7
   1e198:	b002      	add	sp, #8
   1e19a:	bd80      	pop	{r7, pc}
   1e19c:	0001dcdd 	.word	0x0001dcdd
   1e1a0:	0001ddd9 	.word	0x0001ddd9
   1e1a4:	200040a8 	.word	0x200040a8

0001e1a8 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1e1a8:	b580      	push	{r7, lr}
   1e1aa:	b082      	sub	sp, #8
   1e1ac:	af00      	add	r7, sp, #0
   1e1ae:	0002      	movs	r2, r0
   1e1b0:	1dfb      	adds	r3, r7, #7
   1e1b2:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1e1b4:	1dfb      	adds	r3, r7, #7
   1e1b6:	781b      	ldrb	r3, [r3, #0]
   1e1b8:	0018      	movs	r0, r3
   1e1ba:	4b07      	ldr	r3, [pc, #28]	; (1e1d8 <sd_mmc_get_capacity+0x30>)
   1e1bc:	4798      	blx	r3
   1e1be:	1e03      	subs	r3, r0, #0
   1e1c0:	d001      	beq.n	1e1c6 <sd_mmc_get_capacity+0x1e>
		return 0;
   1e1c2:	2300      	movs	r3, #0
   1e1c4:	e004      	b.n	1e1d0 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1e1c6:	4b05      	ldr	r3, [pc, #20]	; (1e1dc <sd_mmc_get_capacity+0x34>)
   1e1c8:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1e1ca:	4b05      	ldr	r3, [pc, #20]	; (1e1e0 <sd_mmc_get_capacity+0x38>)
   1e1cc:	681b      	ldr	r3, [r3, #0]
   1e1ce:	685b      	ldr	r3, [r3, #4]
}
   1e1d0:	0018      	movs	r0, r3
   1e1d2:	46bd      	mov	sp, r7
   1e1d4:	b002      	add	sp, #8
   1e1d6:	bd80      	pop	{r7, pc}
   1e1d8:	0001dcdd 	.word	0x0001dcdd
   1e1dc:	0001ddd9 	.word	0x0001ddd9
   1e1e0:	200040a8 	.word	0x200040a8

0001e1e4 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1e1e4:	b580      	push	{r7, lr}
   1e1e6:	b082      	sub	sp, #8
   1e1e8:	af00      	add	r7, sp, #0
   1e1ea:	0002      	movs	r2, r0
   1e1ec:	1dfb      	adds	r3, r7, #7
   1e1ee:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1e1f0:	2300      	movs	r3, #0
}
   1e1f2:	0018      	movs	r0, r3
   1e1f4:	46bd      	mov	sp, r7
   1e1f6:	b002      	add	sp, #8
   1e1f8:	bd80      	pop	{r7, pc}
	...

0001e1fc <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1e1fc:	b590      	push	{r4, r7, lr}
   1e1fe:	b089      	sub	sp, #36	; 0x24
   1e200:	af02      	add	r7, sp, #8
   1e202:	6039      	str	r1, [r7, #0]
   1e204:	0011      	movs	r1, r2
   1e206:	1dfb      	adds	r3, r7, #7
   1e208:	1c02      	adds	r2, r0, #0
   1e20a:	701a      	strb	r2, [r3, #0]
   1e20c:	1d3b      	adds	r3, r7, #4
   1e20e:	1c0a      	adds	r2, r1, #0
   1e210:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1e212:	230f      	movs	r3, #15
   1e214:	18fc      	adds	r4, r7, r3
   1e216:	1dfb      	adds	r3, r7, #7
   1e218:	781b      	ldrb	r3, [r3, #0]
   1e21a:	0018      	movs	r0, r3
   1e21c:	4b29      	ldr	r3, [pc, #164]	; (1e2c4 <sd_mmc_init_read_blocks+0xc8>)
   1e21e:	4798      	blx	r3
   1e220:	0003      	movs	r3, r0
   1e222:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1e224:	230f      	movs	r3, #15
   1e226:	18fb      	adds	r3, r7, r3
   1e228:	781b      	ldrb	r3, [r3, #0]
   1e22a:	2b00      	cmp	r3, #0
   1e22c:	d003      	beq.n	1e236 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1e22e:	230f      	movs	r3, #15
   1e230:	18fb      	adds	r3, r7, r3
   1e232:	781b      	ldrb	r3, [r3, #0]
   1e234:	e041      	b.n	1e2ba <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1e236:	4b24      	ldr	r3, [pc, #144]	; (1e2c8 <sd_mmc_init_read_blocks+0xcc>)
   1e238:	4798      	blx	r3
   1e23a:	0003      	movs	r3, r0
   1e23c:	001a      	movs	r2, r3
   1e23e:	2301      	movs	r3, #1
   1e240:	4053      	eors	r3, r2
   1e242:	b2db      	uxtb	r3, r3
   1e244:	2b00      	cmp	r3, #0
   1e246:	d003      	beq.n	1e250 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1e248:	4b20      	ldr	r3, [pc, #128]	; (1e2cc <sd_mmc_init_read_blocks+0xd0>)
   1e24a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1e24c:	2305      	movs	r3, #5
   1e24e:	e034      	b.n	1e2ba <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1e250:	1d3b      	adds	r3, r7, #4
   1e252:	881b      	ldrh	r3, [r3, #0]
   1e254:	2b01      	cmp	r3, #1
   1e256:	d902      	bls.n	1e25e <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1e258:	4b1d      	ldr	r3, [pc, #116]	; (1e2d0 <sd_mmc_init_read_blocks+0xd4>)
   1e25a:	617b      	str	r3, [r7, #20]
   1e25c:	e001      	b.n	1e262 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1e25e:	4b1d      	ldr	r3, [pc, #116]	; (1e2d4 <sd_mmc_init_read_blocks+0xd8>)
   1e260:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1e262:	4b1d      	ldr	r3, [pc, #116]	; (1e2d8 <sd_mmc_init_read_blocks+0xdc>)
   1e264:	681b      	ldr	r3, [r3, #0]
   1e266:	7adb      	ldrb	r3, [r3, #11]
   1e268:	001a      	movs	r2, r3
   1e26a:	2308      	movs	r3, #8
   1e26c:	4013      	ands	r3, r2
   1e26e:	d002      	beq.n	1e276 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1e270:	683b      	ldr	r3, [r7, #0]
   1e272:	613b      	str	r3, [r7, #16]
   1e274:	e002      	b.n	1e27c <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1e276:	683b      	ldr	r3, [r7, #0]
   1e278:	025b      	lsls	r3, r3, #9
   1e27a:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1e27c:	1d3b      	adds	r3, r7, #4
   1e27e:	881c      	ldrh	r4, [r3, #0]
   1e280:	2380      	movs	r3, #128	; 0x80
   1e282:	009a      	lsls	r2, r3, #2
   1e284:	6939      	ldr	r1, [r7, #16]
   1e286:	6978      	ldr	r0, [r7, #20]
   1e288:	2301      	movs	r3, #1
   1e28a:	9300      	str	r3, [sp, #0]
   1e28c:	0023      	movs	r3, r4
   1e28e:	4c13      	ldr	r4, [pc, #76]	; (1e2dc <sd_mmc_init_read_blocks+0xe0>)
   1e290:	47a0      	blx	r4
   1e292:	0003      	movs	r3, r0
   1e294:	001a      	movs	r2, r3
   1e296:	2301      	movs	r3, #1
   1e298:	4053      	eors	r3, r2
   1e29a:	b2db      	uxtb	r3, r3
   1e29c:	2b00      	cmp	r3, #0
   1e29e:	d003      	beq.n	1e2a8 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1e2a0:	4b0a      	ldr	r3, [pc, #40]	; (1e2cc <sd_mmc_init_read_blocks+0xd0>)
   1e2a2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1e2a4:	2305      	movs	r3, #5
   1e2a6:	e008      	b.n	1e2ba <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1e2a8:	4b0d      	ldr	r3, [pc, #52]	; (1e2e0 <sd_mmc_init_read_blocks+0xe4>)
   1e2aa:	1d3a      	adds	r2, r7, #4
   1e2ac:	8812      	ldrh	r2, [r2, #0]
   1e2ae:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1e2b0:	4b0c      	ldr	r3, [pc, #48]	; (1e2e4 <sd_mmc_init_read_blocks+0xe8>)
   1e2b2:	1d3a      	adds	r2, r7, #4
   1e2b4:	8812      	ldrh	r2, [r2, #0]
   1e2b6:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1e2b8:	2300      	movs	r3, #0
}
   1e2ba:	0018      	movs	r0, r3
   1e2bc:	46bd      	mov	sp, r7
   1e2be:	b007      	add	sp, #28
   1e2c0:	bd90      	pop	{r4, r7, pc}
   1e2c2:	46c0      	nop			; (mov r8, r8)
   1e2c4:	0001dcdd 	.word	0x0001dcdd
   1e2c8:	0001db79 	.word	0x0001db79
   1e2cc:	0001ddd9 	.word	0x0001ddd9
   1e2d0:	00101112 	.word	0x00101112
   1e2d4:	00081111 	.word	0x00081111
   1e2d8:	200040a8 	.word	0x200040a8
   1e2dc:	0001f059 	.word	0x0001f059
   1e2e0:	200040ae 	.word	0x200040ae
   1e2e4:	200040ac 	.word	0x200040ac

0001e2e8 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1e2e8:	b580      	push	{r7, lr}
   1e2ea:	b082      	sub	sp, #8
   1e2ec:	af00      	add	r7, sp, #0
   1e2ee:	6078      	str	r0, [r7, #4]
   1e2f0:	000a      	movs	r2, r1
   1e2f2:	1cbb      	adds	r3, r7, #2
   1e2f4:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1e2f6:	1cbb      	adds	r3, r7, #2
   1e2f8:	881a      	ldrh	r2, [r3, #0]
   1e2fa:	687b      	ldr	r3, [r7, #4]
   1e2fc:	0011      	movs	r1, r2
   1e2fe:	0018      	movs	r0, r3
   1e300:	4b0d      	ldr	r3, [pc, #52]	; (1e338 <sd_mmc_start_read_blocks+0x50>)
   1e302:	4798      	blx	r3
   1e304:	0003      	movs	r3, r0
   1e306:	001a      	movs	r2, r3
   1e308:	2301      	movs	r3, #1
   1e30a:	4053      	eors	r3, r2
   1e30c:	b2db      	uxtb	r3, r3
   1e30e:	2b00      	cmp	r3, #0
   1e310:	d004      	beq.n	1e31c <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1e312:	4b0a      	ldr	r3, [pc, #40]	; (1e33c <sd_mmc_start_read_blocks+0x54>)
   1e314:	2200      	movs	r2, #0
   1e316:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1e318:	2305      	movs	r3, #5
   1e31a:	e008      	b.n	1e32e <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1e31c:	4b07      	ldr	r3, [pc, #28]	; (1e33c <sd_mmc_start_read_blocks+0x54>)
   1e31e:	881a      	ldrh	r2, [r3, #0]
   1e320:	1cbb      	adds	r3, r7, #2
   1e322:	881b      	ldrh	r3, [r3, #0]
   1e324:	1ad3      	subs	r3, r2, r3
   1e326:	b29a      	uxth	r2, r3
   1e328:	4b04      	ldr	r3, [pc, #16]	; (1e33c <sd_mmc_start_read_blocks+0x54>)
   1e32a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1e32c:	2300      	movs	r3, #0
}
   1e32e:	0018      	movs	r0, r3
   1e330:	46bd      	mov	sp, r7
   1e332:	b002      	add	sp, #8
   1e334:	bd80      	pop	{r7, pc}
   1e336:	46c0      	nop			; (mov r8, r8)
   1e338:	0001f329 	.word	0x0001f329
   1e33c:	200040ae 	.word	0x200040ae

0001e340 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1e340:	b580      	push	{r7, lr}
   1e342:	b082      	sub	sp, #8
   1e344:	af00      	add	r7, sp, #0
   1e346:	0002      	movs	r2, r0
   1e348:	1dfb      	adds	r3, r7, #7
   1e34a:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1e34c:	4b1c      	ldr	r3, [pc, #112]	; (1e3c0 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1e34e:	4798      	blx	r3
   1e350:	0003      	movs	r3, r0
   1e352:	001a      	movs	r2, r3
   1e354:	2301      	movs	r3, #1
   1e356:	4053      	eors	r3, r2
   1e358:	b2db      	uxtb	r3, r3
   1e35a:	2b00      	cmp	r3, #0
   1e35c:	d001      	beq.n	1e362 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1e35e:	2305      	movs	r3, #5
   1e360:	e029      	b.n	1e3b6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1e362:	1dfb      	adds	r3, r7, #7
   1e364:	781b      	ldrb	r3, [r3, #0]
   1e366:	2b00      	cmp	r3, #0
   1e368:	d003      	beq.n	1e372 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1e36a:	4b16      	ldr	r3, [pc, #88]	; (1e3c4 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1e36c:	2200      	movs	r2, #0
   1e36e:	801a      	strh	r2, [r3, #0]
   1e370:	e005      	b.n	1e37e <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1e372:	4b14      	ldr	r3, [pc, #80]	; (1e3c4 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1e374:	881b      	ldrh	r3, [r3, #0]
   1e376:	2b00      	cmp	r3, #0
   1e378:	d001      	beq.n	1e37e <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1e37a:	2300      	movs	r3, #0
   1e37c:	e01b      	b.n	1e3b6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1e37e:	4b12      	ldr	r3, [pc, #72]	; (1e3c8 <sd_mmc_wait_end_of_read_blocks+0x88>)
   1e380:	881b      	ldrh	r3, [r3, #0]
   1e382:	2b01      	cmp	r3, #1
   1e384:	d103      	bne.n	1e38e <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1e386:	4b11      	ldr	r3, [pc, #68]	; (1e3cc <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1e388:	4798      	blx	r3
		return SD_MMC_OK;
   1e38a:	2300      	movs	r3, #0
   1e38c:	e013      	b.n	1e3b6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1e38e:	4b10      	ldr	r3, [pc, #64]	; (1e3d0 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1e390:	2100      	movs	r1, #0
   1e392:	0018      	movs	r0, r3
   1e394:	4b0f      	ldr	r3, [pc, #60]	; (1e3d4 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1e396:	4798      	blx	r3
   1e398:	0003      	movs	r3, r0
   1e39a:	001a      	movs	r2, r3
   1e39c:	2301      	movs	r3, #1
   1e39e:	4053      	eors	r3, r2
   1e3a0:	b2db      	uxtb	r3, r3
   1e3a2:	2b00      	cmp	r3, #0
   1e3a4:	d004      	beq.n	1e3b0 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1e3a6:	4b0a      	ldr	r3, [pc, #40]	; (1e3d0 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1e3a8:	2100      	movs	r1, #0
   1e3aa:	0018      	movs	r0, r3
   1e3ac:	4b09      	ldr	r3, [pc, #36]	; (1e3d4 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1e3ae:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1e3b0:	4b06      	ldr	r3, [pc, #24]	; (1e3cc <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1e3b2:	4798      	blx	r3
	return SD_MMC_OK;
   1e3b4:	2300      	movs	r3, #0
}
   1e3b6:	0018      	movs	r0, r3
   1e3b8:	46bd      	mov	sp, r7
   1e3ba:	b002      	add	sp, #8
   1e3bc:	bd80      	pop	{r7, pc}
   1e3be:	46c0      	nop			; (mov r8, r8)
   1e3c0:	0001f3cd 	.word	0x0001f3cd
   1e3c4:	200040ae 	.word	0x200040ae
   1e3c8:	200040ac 	.word	0x200040ac
   1e3cc:	0001ddd9 	.word	0x0001ddd9
   1e3d0:	0000310c 	.word	0x0000310c
   1e3d4:	0001f031 	.word	0x0001f031

0001e3d8 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1e3d8:	b590      	push	{r4, r7, lr}
   1e3da:	b089      	sub	sp, #36	; 0x24
   1e3dc:	af02      	add	r7, sp, #8
   1e3de:	6039      	str	r1, [r7, #0]
   1e3e0:	0011      	movs	r1, r2
   1e3e2:	1dfb      	adds	r3, r7, #7
   1e3e4:	1c02      	adds	r2, r0, #0
   1e3e6:	701a      	strb	r2, [r3, #0]
   1e3e8:	1d3b      	adds	r3, r7, #4
   1e3ea:	1c0a      	adds	r2, r1, #0
   1e3ec:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1e3ee:	230f      	movs	r3, #15
   1e3f0:	18fc      	adds	r4, r7, r3
   1e3f2:	1dfb      	adds	r3, r7, #7
   1e3f4:	781b      	ldrb	r3, [r3, #0]
   1e3f6:	0018      	movs	r0, r3
   1e3f8:	4b28      	ldr	r3, [pc, #160]	; (1e49c <sd_mmc_init_write_blocks+0xc4>)
   1e3fa:	4798      	blx	r3
   1e3fc:	0003      	movs	r3, r0
   1e3fe:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1e400:	230f      	movs	r3, #15
   1e402:	18fb      	adds	r3, r7, r3
   1e404:	781b      	ldrb	r3, [r3, #0]
   1e406:	2b00      	cmp	r3, #0
   1e408:	d003      	beq.n	1e412 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1e40a:	230f      	movs	r3, #15
   1e40c:	18fb      	adds	r3, r7, r3
   1e40e:	781b      	ldrb	r3, [r3, #0]
   1e410:	e03f      	b.n	1e492 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1e412:	1dfb      	adds	r3, r7, #7
   1e414:	781b      	ldrb	r3, [r3, #0]
   1e416:	0018      	movs	r0, r3
   1e418:	4b21      	ldr	r3, [pc, #132]	; (1e4a0 <sd_mmc_init_write_blocks+0xc8>)
   1e41a:	4798      	blx	r3
   1e41c:	1e03      	subs	r3, r0, #0
   1e41e:	d003      	beq.n	1e428 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1e420:	4b20      	ldr	r3, [pc, #128]	; (1e4a4 <sd_mmc_init_write_blocks+0xcc>)
   1e422:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1e424:	2307      	movs	r3, #7
   1e426:	e034      	b.n	1e492 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1e428:	1d3b      	adds	r3, r7, #4
   1e42a:	881b      	ldrh	r3, [r3, #0]
   1e42c:	2b01      	cmp	r3, #1
   1e42e:	d902      	bls.n	1e436 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1e430:	4b1d      	ldr	r3, [pc, #116]	; (1e4a8 <sd_mmc_init_write_blocks+0xd0>)
   1e432:	617b      	str	r3, [r7, #20]
   1e434:	e001      	b.n	1e43a <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1e436:	4b1d      	ldr	r3, [pc, #116]	; (1e4ac <sd_mmc_init_write_blocks+0xd4>)
   1e438:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1e43a:	4b1d      	ldr	r3, [pc, #116]	; (1e4b0 <sd_mmc_init_write_blocks+0xd8>)
   1e43c:	681b      	ldr	r3, [r3, #0]
   1e43e:	7adb      	ldrb	r3, [r3, #11]
   1e440:	001a      	movs	r2, r3
   1e442:	2308      	movs	r3, #8
   1e444:	4013      	ands	r3, r2
   1e446:	d002      	beq.n	1e44e <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1e448:	683b      	ldr	r3, [r7, #0]
   1e44a:	613b      	str	r3, [r7, #16]
   1e44c:	e002      	b.n	1e454 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1e44e:	683b      	ldr	r3, [r7, #0]
   1e450:	025b      	lsls	r3, r3, #9
   1e452:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1e454:	1d3b      	adds	r3, r7, #4
   1e456:	881c      	ldrh	r4, [r3, #0]
   1e458:	2380      	movs	r3, #128	; 0x80
   1e45a:	009a      	lsls	r2, r3, #2
   1e45c:	6939      	ldr	r1, [r7, #16]
   1e45e:	6978      	ldr	r0, [r7, #20]
   1e460:	2301      	movs	r3, #1
   1e462:	9300      	str	r3, [sp, #0]
   1e464:	0023      	movs	r3, r4
   1e466:	4c13      	ldr	r4, [pc, #76]	; (1e4b4 <sd_mmc_init_write_blocks+0xdc>)
   1e468:	47a0      	blx	r4
   1e46a:	0003      	movs	r3, r0
   1e46c:	001a      	movs	r2, r3
   1e46e:	2301      	movs	r3, #1
   1e470:	4053      	eors	r3, r2
   1e472:	b2db      	uxtb	r3, r3
   1e474:	2b00      	cmp	r3, #0
   1e476:	d003      	beq.n	1e480 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1e478:	4b0a      	ldr	r3, [pc, #40]	; (1e4a4 <sd_mmc_init_write_blocks+0xcc>)
   1e47a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1e47c:	2305      	movs	r3, #5
   1e47e:	e008      	b.n	1e492 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1e480:	4b0d      	ldr	r3, [pc, #52]	; (1e4b8 <sd_mmc_init_write_blocks+0xe0>)
   1e482:	1d3a      	adds	r2, r7, #4
   1e484:	8812      	ldrh	r2, [r2, #0]
   1e486:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1e488:	4b0c      	ldr	r3, [pc, #48]	; (1e4bc <sd_mmc_init_write_blocks+0xe4>)
   1e48a:	1d3a      	adds	r2, r7, #4
   1e48c:	8812      	ldrh	r2, [r2, #0]
   1e48e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1e490:	2300      	movs	r3, #0
}
   1e492:	0018      	movs	r0, r3
   1e494:	46bd      	mov	sp, r7
   1e496:	b007      	add	sp, #28
   1e498:	bd90      	pop	{r4, r7, pc}
   1e49a:	46c0      	nop			; (mov r8, r8)
   1e49c:	0001dcdd 	.word	0x0001dcdd
   1e4a0:	0001e1e5 	.word	0x0001e1e5
   1e4a4:	0001ddd9 	.word	0x0001ddd9
   1e4a8:	00109119 	.word	0x00109119
   1e4ac:	00089118 	.word	0x00089118
   1e4b0:	200040a8 	.word	0x200040a8
   1e4b4:	0001f059 	.word	0x0001f059
   1e4b8:	200040ae 	.word	0x200040ae
   1e4bc:	200040ac 	.word	0x200040ac

0001e4c0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1e4c0:	b580      	push	{r7, lr}
   1e4c2:	b082      	sub	sp, #8
   1e4c4:	af00      	add	r7, sp, #0
   1e4c6:	6078      	str	r0, [r7, #4]
   1e4c8:	000a      	movs	r2, r1
   1e4ca:	1cbb      	adds	r3, r7, #2
   1e4cc:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1e4ce:	1cbb      	adds	r3, r7, #2
   1e4d0:	881a      	ldrh	r2, [r3, #0]
   1e4d2:	687b      	ldr	r3, [r7, #4]
   1e4d4:	0011      	movs	r1, r2
   1e4d6:	0018      	movs	r0, r3
   1e4d8:	4b0d      	ldr	r3, [pc, #52]	; (1e510 <sd_mmc_start_write_blocks+0x50>)
   1e4da:	4798      	blx	r3
   1e4dc:	0003      	movs	r3, r0
   1e4de:	001a      	movs	r2, r3
   1e4e0:	2301      	movs	r3, #1
   1e4e2:	4053      	eors	r3, r2
   1e4e4:	b2db      	uxtb	r3, r3
   1e4e6:	2b00      	cmp	r3, #0
   1e4e8:	d004      	beq.n	1e4f4 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1e4ea:	4b0a      	ldr	r3, [pc, #40]	; (1e514 <sd_mmc_start_write_blocks+0x54>)
   1e4ec:	2200      	movs	r2, #0
   1e4ee:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1e4f0:	2305      	movs	r3, #5
   1e4f2:	e008      	b.n	1e506 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1e4f4:	4b07      	ldr	r3, [pc, #28]	; (1e514 <sd_mmc_start_write_blocks+0x54>)
   1e4f6:	881a      	ldrh	r2, [r3, #0]
   1e4f8:	1cbb      	adds	r3, r7, #2
   1e4fa:	881b      	ldrh	r3, [r3, #0]
   1e4fc:	1ad3      	subs	r3, r2, r3
   1e4fe:	b29a      	uxth	r2, r3
   1e500:	4b04      	ldr	r3, [pc, #16]	; (1e514 <sd_mmc_start_write_blocks+0x54>)
   1e502:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1e504:	2300      	movs	r3, #0
}
   1e506:	0018      	movs	r0, r3
   1e508:	46bd      	mov	sp, r7
   1e50a:	b002      	add	sp, #8
   1e50c:	bd80      	pop	{r7, pc}
   1e50e:	46c0      	nop			; (mov r8, r8)
   1e510:	0001f3d9 	.word	0x0001f3d9
   1e514:	200040ae 	.word	0x200040ae

0001e518 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1e518:	b580      	push	{r7, lr}
   1e51a:	b082      	sub	sp, #8
   1e51c:	af00      	add	r7, sp, #0
   1e51e:	0002      	movs	r2, r0
   1e520:	1dfb      	adds	r3, r7, #7
   1e522:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1e524:	4b13      	ldr	r3, [pc, #76]	; (1e574 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1e526:	4798      	blx	r3
   1e528:	0003      	movs	r3, r0
   1e52a:	001a      	movs	r2, r3
   1e52c:	2301      	movs	r3, #1
   1e52e:	4053      	eors	r3, r2
   1e530:	b2db      	uxtb	r3, r3
   1e532:	2b00      	cmp	r3, #0
   1e534:	d001      	beq.n	1e53a <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1e536:	2305      	movs	r3, #5
   1e538:	e018      	b.n	1e56c <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1e53a:	1dfb      	adds	r3, r7, #7
   1e53c:	781b      	ldrb	r3, [r3, #0]
   1e53e:	2b00      	cmp	r3, #0
   1e540:	d003      	beq.n	1e54a <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1e542:	4b0d      	ldr	r3, [pc, #52]	; (1e578 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1e544:	2200      	movs	r2, #0
   1e546:	801a      	strh	r2, [r3, #0]
   1e548:	e005      	b.n	1e556 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1e54a:	4b0b      	ldr	r3, [pc, #44]	; (1e578 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1e54c:	881b      	ldrh	r3, [r3, #0]
   1e54e:	2b00      	cmp	r3, #0
   1e550:	d001      	beq.n	1e556 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1e552:	2300      	movs	r3, #0
   1e554:	e00a      	b.n	1e56c <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1e556:	4b09      	ldr	r3, [pc, #36]	; (1e57c <sd_mmc_wait_end_of_write_blocks+0x64>)
   1e558:	881b      	ldrh	r3, [r3, #0]
   1e55a:	2b01      	cmp	r3, #1
   1e55c:	d103      	bne.n	1e566 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1e55e:	4b08      	ldr	r3, [pc, #32]	; (1e580 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1e560:	4798      	blx	r3
		return SD_MMC_OK;
   1e562:	2300      	movs	r3, #0
   1e564:	e002      	b.n	1e56c <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1e566:	4b06      	ldr	r3, [pc, #24]	; (1e580 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1e568:	4798      	blx	r3
	return SD_MMC_OK;
   1e56a:	2300      	movs	r3, #0
}
   1e56c:	0018      	movs	r0, r3
   1e56e:	46bd      	mov	sp, r7
   1e570:	b002      	add	sp, #8
   1e572:	bd80      	pop	{r7, pc}
   1e574:	0001f499 	.word	0x0001f499
   1e578:	200040ae 	.word	0x200040ae
   1e57c:	200040ac 	.word	0x200040ac
   1e580:	0001ddd9 	.word	0x0001ddd9

0001e584 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1e584:	b580      	push	{r7, lr}
   1e586:	b082      	sub	sp, #8
   1e588:	af00      	add	r7, sp, #0
   1e58a:	0002      	movs	r2, r0
   1e58c:	1dfb      	adds	r3, r7, #7
   1e58e:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1e590:	1dfb      	adds	r3, r7, #7
   1e592:	781b      	ldrb	r3, [r3, #0]
   1e594:	0018      	movs	r0, r3
   1e596:	4b16      	ldr	r3, [pc, #88]	; (1e5f0 <sd_mmc_test_unit_ready+0x6c>)
   1e598:	4798      	blx	r3
   1e59a:	0003      	movs	r3, r0
   1e59c:	2b01      	cmp	r3, #1
   1e59e:	d019      	beq.n	1e5d4 <sd_mmc_test_unit_ready+0x50>
   1e5a0:	2b02      	cmp	r3, #2
   1e5a2:	d019      	beq.n	1e5d8 <sd_mmc_test_unit_ready+0x54>
   1e5a4:	2b00      	cmp	r3, #0
   1e5a6:	d11e      	bne.n	1e5e6 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1e5a8:	1dfb      	adds	r3, r7, #7
   1e5aa:	781b      	ldrb	r3, [r3, #0]
   1e5ac:	4a11      	ldr	r2, [pc, #68]	; (1e5f4 <sd_mmc_test_unit_ready+0x70>)
   1e5ae:	5cd3      	ldrb	r3, [r2, r3]
   1e5b0:	2b00      	cmp	r3, #0
   1e5b2:	d001      	beq.n	1e5b8 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1e5b4:	2302      	movs	r3, #2
   1e5b6:	e017      	b.n	1e5e8 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1e5b8:	1dfb      	adds	r3, r7, #7
   1e5ba:	781b      	ldrb	r3, [r3, #0]
   1e5bc:	0018      	movs	r0, r3
   1e5be:	4b0e      	ldr	r3, [pc, #56]	; (1e5f8 <sd_mmc_test_unit_ready+0x74>)
   1e5c0:	4798      	blx	r3
   1e5c2:	0003      	movs	r3, r0
   1e5c4:	001a      	movs	r2, r3
   1e5c6:	2303      	movs	r3, #3
   1e5c8:	4013      	ands	r3, r2
   1e5ca:	d001      	beq.n	1e5d0 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1e5cc:	2300      	movs	r3, #0
   1e5ce:	e00b      	b.n	1e5e8 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1e5d0:	2302      	movs	r3, #2
   1e5d2:	e009      	b.n	1e5e8 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1e5d4:	2303      	movs	r3, #3
   1e5d6:	e007      	b.n	1e5e8 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1e5d8:	1dfb      	adds	r3, r7, #7
   1e5da:	781b      	ldrb	r3, [r3, #0]
   1e5dc:	4a05      	ldr	r2, [pc, #20]	; (1e5f4 <sd_mmc_test_unit_ready+0x70>)
   1e5de:	2100      	movs	r1, #0
   1e5e0:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1e5e2:	2302      	movs	r3, #2
   1e5e4:	e000      	b.n	1e5e8 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1e5e6:	2301      	movs	r3, #1
	}
}
   1e5e8:	0018      	movs	r0, r3
   1e5ea:	46bd      	mov	sp, r7
   1e5ec:	b002      	add	sp, #8
   1e5ee:	bd80      	pop	{r7, pc}
   1e5f0:	0001e0f9 	.word	0x0001e0f9
   1e5f4:	200040b0 	.word	0x200040b0
   1e5f8:	0001e16d 	.word	0x0001e16d

0001e5fc <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1e5fc:	b580      	push	{r7, lr}
   1e5fe:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1e600:	2000      	movs	r0, #0
   1e602:	4b03      	ldr	r3, [pc, #12]	; (1e610 <sd_mmc_test_unit_ready_0+0x14>)
   1e604:	4798      	blx	r3
   1e606:	0003      	movs	r3, r0
}
   1e608:	0018      	movs	r0, r3
   1e60a:	46bd      	mov	sp, r7
   1e60c:	bd80      	pop	{r7, pc}
   1e60e:	46c0      	nop			; (mov r8, r8)
   1e610:	0001e585 	.word	0x0001e585

0001e614 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1e614:	b580      	push	{r7, lr}
   1e616:	b082      	sub	sp, #8
   1e618:	af00      	add	r7, sp, #0
   1e61a:	0002      	movs	r2, r0
   1e61c:	6039      	str	r1, [r7, #0]
   1e61e:	1dfb      	adds	r3, r7, #7
   1e620:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1e622:	1dfb      	adds	r3, r7, #7
   1e624:	781b      	ldrb	r3, [r3, #0]
   1e626:	0018      	movs	r0, r3
   1e628:	4b08      	ldr	r3, [pc, #32]	; (1e64c <sd_mmc_read_capacity+0x38>)
   1e62a:	4798      	blx	r3
   1e62c:	0003      	movs	r3, r0
   1e62e:	005b      	lsls	r3, r3, #1
   1e630:	1e5a      	subs	r2, r3, #1
   1e632:	683b      	ldr	r3, [r7, #0]
   1e634:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1e636:	1dfb      	adds	r3, r7, #7
   1e638:	781b      	ldrb	r3, [r3, #0]
   1e63a:	0018      	movs	r0, r3
   1e63c:	4b04      	ldr	r3, [pc, #16]	; (1e650 <sd_mmc_read_capacity+0x3c>)
   1e63e:	4798      	blx	r3
   1e640:	0003      	movs	r3, r0
}
   1e642:	0018      	movs	r0, r3
   1e644:	46bd      	mov	sp, r7
   1e646:	b002      	add	sp, #8
   1e648:	bd80      	pop	{r7, pc}
   1e64a:	46c0      	nop			; (mov r8, r8)
   1e64c:	0001e1a9 	.word	0x0001e1a9
   1e650:	0001e585 	.word	0x0001e585

0001e654 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1e654:	b580      	push	{r7, lr}
   1e656:	b082      	sub	sp, #8
   1e658:	af00      	add	r7, sp, #0
   1e65a:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1e65c:	687b      	ldr	r3, [r7, #4]
   1e65e:	0019      	movs	r1, r3
   1e660:	2000      	movs	r0, #0
   1e662:	4b03      	ldr	r3, [pc, #12]	; (1e670 <sd_mmc_read_capacity_0+0x1c>)
   1e664:	4798      	blx	r3
   1e666:	0003      	movs	r3, r0
}
   1e668:	0018      	movs	r0, r3
   1e66a:	46bd      	mov	sp, r7
   1e66c:	b002      	add	sp, #8
   1e66e:	bd80      	pop	{r7, pc}
   1e670:	0001e615 	.word	0x0001e615

0001e674 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1e674:	b580      	push	{r7, lr}
   1e676:	b082      	sub	sp, #8
   1e678:	af00      	add	r7, sp, #0
   1e67a:	0002      	movs	r2, r0
   1e67c:	1dfb      	adds	r3, r7, #7
   1e67e:	701a      	strb	r2, [r3, #0]
   1e680:	1dbb      	adds	r3, r7, #6
   1e682:	1c0a      	adds	r2, r1, #0
   1e684:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1e686:	1dfb      	adds	r3, r7, #7
   1e688:	781b      	ldrb	r3, [r3, #0]
   1e68a:	4a04      	ldr	r2, [pc, #16]	; (1e69c <sd_mmc_unload+0x28>)
   1e68c:	1db9      	adds	r1, r7, #6
   1e68e:	7809      	ldrb	r1, [r1, #0]
   1e690:	54d1      	strb	r1, [r2, r3]
	return true;
   1e692:	2301      	movs	r3, #1
}
   1e694:	0018      	movs	r0, r3
   1e696:	46bd      	mov	sp, r7
   1e698:	b002      	add	sp, #8
   1e69a:	bd80      	pop	{r7, pc}
   1e69c:	200040b0 	.word	0x200040b0

0001e6a0 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1e6a0:	b580      	push	{r7, lr}
   1e6a2:	b082      	sub	sp, #8
   1e6a4:	af00      	add	r7, sp, #0
   1e6a6:	0002      	movs	r2, r0
   1e6a8:	1dfb      	adds	r3, r7, #7
   1e6aa:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1e6ac:	1dfb      	adds	r3, r7, #7
   1e6ae:	781b      	ldrb	r3, [r3, #0]
   1e6b0:	0019      	movs	r1, r3
   1e6b2:	2000      	movs	r0, #0
   1e6b4:	4b03      	ldr	r3, [pc, #12]	; (1e6c4 <sd_mmc_unload_0+0x24>)
   1e6b6:	4798      	blx	r3
   1e6b8:	0003      	movs	r3, r0
}
   1e6ba:	0018      	movs	r0, r3
   1e6bc:	46bd      	mov	sp, r7
   1e6be:	b002      	add	sp, #8
   1e6c0:	bd80      	pop	{r7, pc}
   1e6c2:	46c0      	nop			; (mov r8, r8)
   1e6c4:	0001e675 	.word	0x0001e675

0001e6c8 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1e6c8:	b580      	push	{r7, lr}
   1e6ca:	b082      	sub	sp, #8
   1e6cc:	af00      	add	r7, sp, #0
   1e6ce:	0002      	movs	r2, r0
   1e6d0:	1dfb      	adds	r3, r7, #7
   1e6d2:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1e6d4:	1dfb      	adds	r3, r7, #7
   1e6d6:	781b      	ldrb	r3, [r3, #0]
   1e6d8:	0018      	movs	r0, r3
   1e6da:	4b03      	ldr	r3, [pc, #12]	; (1e6e8 <sd_mmc_wr_protect+0x20>)
   1e6dc:	4798      	blx	r3
   1e6de:	0003      	movs	r3, r0
}
   1e6e0:	0018      	movs	r0, r3
   1e6e2:	46bd      	mov	sp, r7
   1e6e4:	b002      	add	sp, #8
   1e6e6:	bd80      	pop	{r7, pc}
   1e6e8:	0001e1e5 	.word	0x0001e1e5

0001e6ec <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1e6ec:	b580      	push	{r7, lr}
   1e6ee:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1e6f0:	2000      	movs	r0, #0
   1e6f2:	4b03      	ldr	r3, [pc, #12]	; (1e700 <sd_mmc_wr_protect_0+0x14>)
   1e6f4:	4798      	blx	r3
   1e6f6:	0003      	movs	r3, r0
}
   1e6f8:	0018      	movs	r0, r3
   1e6fa:	46bd      	mov	sp, r7
   1e6fc:	bd80      	pop	{r7, pc}
   1e6fe:	46c0      	nop			; (mov r8, r8)
   1e700:	0001e6c9 	.word	0x0001e6c9

0001e704 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1e704:	b580      	push	{r7, lr}
   1e706:	b082      	sub	sp, #8
   1e708:	af00      	add	r7, sp, #0
   1e70a:	0002      	movs	r2, r0
   1e70c:	1dfb      	adds	r3, r7, #7
   1e70e:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1e710:	2301      	movs	r3, #1
}
   1e712:	0018      	movs	r0, r3
   1e714:	46bd      	mov	sp, r7
   1e716:	b002      	add	sp, #8
   1e718:	bd80      	pop	{r7, pc}
	...

0001e71c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1e71c:	b580      	push	{r7, lr}
   1e71e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   1e720:	2000      	movs	r0, #0
   1e722:	4b03      	ldr	r3, [pc, #12]	; (1e730 <sd_mmc_removal_0+0x14>)
   1e724:	4798      	blx	r3
   1e726:	0003      	movs	r3, r0
}
   1e728:	0018      	movs	r0, r3
   1e72a:	46bd      	mov	sp, r7
   1e72c:	bd80      	pop	{r7, pc}
   1e72e:	46c0      	nop			; (mov r8, r8)
   1e730:	0001e705 	.word	0x0001e705

0001e734 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1e734:	b580      	push	{r7, lr}
   1e736:	b084      	sub	sp, #16
   1e738:	af00      	add	r7, sp, #0
   1e73a:	60b9      	str	r1, [r7, #8]
   1e73c:	607a      	str	r2, [r7, #4]
   1e73e:	230f      	movs	r3, #15
   1e740:	18fb      	adds	r3, r7, r3
   1e742:	1c02      	adds	r2, r0, #0
   1e744:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1e746:	68b9      	ldr	r1, [r7, #8]
   1e748:	230f      	movs	r3, #15
   1e74a:	18fb      	adds	r3, r7, r3
   1e74c:	781b      	ldrb	r3, [r3, #0]
   1e74e:	2201      	movs	r2, #1
   1e750:	0018      	movs	r0, r3
   1e752:	4b10      	ldr	r3, [pc, #64]	; (1e794 <sd_mmc_mem_2_ram+0x60>)
   1e754:	4798      	blx	r3
   1e756:	1e03      	subs	r3, r0, #0
   1e758:	d005      	beq.n	1e766 <sd_mmc_mem_2_ram+0x32>
   1e75a:	2b02      	cmp	r3, #2
   1e75c:	d101      	bne.n	1e762 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1e75e:	2302      	movs	r3, #2
   1e760:	e013      	b.n	1e78a <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   1e762:	2301      	movs	r3, #1
   1e764:	e011      	b.n	1e78a <sd_mmc_mem_2_ram+0x56>
		break;
   1e766:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1e768:	687b      	ldr	r3, [r7, #4]
   1e76a:	2101      	movs	r1, #1
   1e76c:	0018      	movs	r0, r3
   1e76e:	4b0a      	ldr	r3, [pc, #40]	; (1e798 <sd_mmc_mem_2_ram+0x64>)
   1e770:	4798      	blx	r3
   1e772:	1e03      	subs	r3, r0, #0
   1e774:	d001      	beq.n	1e77a <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   1e776:	2301      	movs	r3, #1
   1e778:	e007      	b.n	1e78a <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1e77a:	2000      	movs	r0, #0
   1e77c:	4b07      	ldr	r3, [pc, #28]	; (1e79c <sd_mmc_mem_2_ram+0x68>)
   1e77e:	4798      	blx	r3
   1e780:	1e03      	subs	r3, r0, #0
   1e782:	d001      	beq.n	1e788 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   1e784:	2301      	movs	r3, #1
   1e786:	e000      	b.n	1e78a <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   1e788:	2300      	movs	r3, #0
}
   1e78a:	0018      	movs	r0, r3
   1e78c:	46bd      	mov	sp, r7
   1e78e:	b004      	add	sp, #16
   1e790:	bd80      	pop	{r7, pc}
   1e792:	46c0      	nop			; (mov r8, r8)
   1e794:	0001e1fd 	.word	0x0001e1fd
   1e798:	0001e2e9 	.word	0x0001e2e9
   1e79c:	0001e341 	.word	0x0001e341

0001e7a0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1e7a0:	b580      	push	{r7, lr}
   1e7a2:	b082      	sub	sp, #8
   1e7a4:	af00      	add	r7, sp, #0
   1e7a6:	6078      	str	r0, [r7, #4]
   1e7a8:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   1e7aa:	683a      	ldr	r2, [r7, #0]
   1e7ac:	687b      	ldr	r3, [r7, #4]
   1e7ae:	0019      	movs	r1, r3
   1e7b0:	2000      	movs	r0, #0
   1e7b2:	4b03      	ldr	r3, [pc, #12]	; (1e7c0 <sd_mmc_mem_2_ram_0+0x20>)
   1e7b4:	4798      	blx	r3
   1e7b6:	0003      	movs	r3, r0
}
   1e7b8:	0018      	movs	r0, r3
   1e7ba:	46bd      	mov	sp, r7
   1e7bc:	b002      	add	sp, #8
   1e7be:	bd80      	pop	{r7, pc}
   1e7c0:	0001e735 	.word	0x0001e735

0001e7c4 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1e7c4:	b580      	push	{r7, lr}
   1e7c6:	b084      	sub	sp, #16
   1e7c8:	af00      	add	r7, sp, #0
   1e7ca:	60b9      	str	r1, [r7, #8]
   1e7cc:	607a      	str	r2, [r7, #4]
   1e7ce:	230f      	movs	r3, #15
   1e7d0:	18fb      	adds	r3, r7, r3
   1e7d2:	1c02      	adds	r2, r0, #0
   1e7d4:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1e7d6:	68b9      	ldr	r1, [r7, #8]
   1e7d8:	230f      	movs	r3, #15
   1e7da:	18fb      	adds	r3, r7, r3
   1e7dc:	781b      	ldrb	r3, [r3, #0]
   1e7de:	2201      	movs	r2, #1
   1e7e0:	0018      	movs	r0, r3
   1e7e2:	4b10      	ldr	r3, [pc, #64]	; (1e824 <sd_mmc_ram_2_mem+0x60>)
   1e7e4:	4798      	blx	r3
   1e7e6:	1e03      	subs	r3, r0, #0
   1e7e8:	d005      	beq.n	1e7f6 <sd_mmc_ram_2_mem+0x32>
   1e7ea:	2b02      	cmp	r3, #2
   1e7ec:	d101      	bne.n	1e7f2 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1e7ee:	2302      	movs	r3, #2
   1e7f0:	e013      	b.n	1e81a <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   1e7f2:	2301      	movs	r3, #1
   1e7f4:	e011      	b.n	1e81a <sd_mmc_ram_2_mem+0x56>
		break;
   1e7f6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1e7f8:	687b      	ldr	r3, [r7, #4]
   1e7fa:	2101      	movs	r1, #1
   1e7fc:	0018      	movs	r0, r3
   1e7fe:	4b0a      	ldr	r3, [pc, #40]	; (1e828 <sd_mmc_ram_2_mem+0x64>)
   1e800:	4798      	blx	r3
   1e802:	1e03      	subs	r3, r0, #0
   1e804:	d001      	beq.n	1e80a <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   1e806:	2301      	movs	r3, #1
   1e808:	e007      	b.n	1e81a <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1e80a:	2000      	movs	r0, #0
   1e80c:	4b07      	ldr	r3, [pc, #28]	; (1e82c <sd_mmc_ram_2_mem+0x68>)
   1e80e:	4798      	blx	r3
   1e810:	1e03      	subs	r3, r0, #0
   1e812:	d001      	beq.n	1e818 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   1e814:	2301      	movs	r3, #1
   1e816:	e000      	b.n	1e81a <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   1e818:	2300      	movs	r3, #0
}
   1e81a:	0018      	movs	r0, r3
   1e81c:	46bd      	mov	sp, r7
   1e81e:	b004      	add	sp, #16
   1e820:	bd80      	pop	{r7, pc}
   1e822:	46c0      	nop			; (mov r8, r8)
   1e824:	0001e3d9 	.word	0x0001e3d9
   1e828:	0001e4c1 	.word	0x0001e4c1
   1e82c:	0001e519 	.word	0x0001e519

0001e830 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1e830:	b580      	push	{r7, lr}
   1e832:	b082      	sub	sp, #8
   1e834:	af00      	add	r7, sp, #0
   1e836:	6078      	str	r0, [r7, #4]
   1e838:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   1e83a:	683a      	ldr	r2, [r7, #0]
   1e83c:	687b      	ldr	r3, [r7, #4]
   1e83e:	0019      	movs	r1, r3
   1e840:	2000      	movs	r0, #0
   1e842:	4b03      	ldr	r3, [pc, #12]	; (1e850 <sd_mmc_ram_2_mem_0+0x20>)
   1e844:	4798      	blx	r3
   1e846:	0003      	movs	r3, r0
}
   1e848:	0018      	movs	r0, r3
   1e84a:	46bd      	mov	sp, r7
   1e84c:	b002      	add	sp, #8
   1e84e:	bd80      	pop	{r7, pc}
   1e850:	0001e7c5 	.word	0x0001e7c5

0001e854 <system_pinmux_get_group_from_gpio_pin>:
{
   1e854:	b580      	push	{r7, lr}
   1e856:	b084      	sub	sp, #16
   1e858:	af00      	add	r7, sp, #0
   1e85a:	0002      	movs	r2, r0
   1e85c:	1dfb      	adds	r3, r7, #7
   1e85e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1e860:	230f      	movs	r3, #15
   1e862:	18fb      	adds	r3, r7, r3
   1e864:	1dfa      	adds	r2, r7, #7
   1e866:	7812      	ldrb	r2, [r2, #0]
   1e868:	09d2      	lsrs	r2, r2, #7
   1e86a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1e86c:	230e      	movs	r3, #14
   1e86e:	18fb      	adds	r3, r7, r3
   1e870:	1dfa      	adds	r2, r7, #7
   1e872:	7812      	ldrb	r2, [r2, #0]
   1e874:	0952      	lsrs	r2, r2, #5
   1e876:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1e878:	4b0d      	ldr	r3, [pc, #52]	; (1e8b0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1e87a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1e87c:	230f      	movs	r3, #15
   1e87e:	18fb      	adds	r3, r7, r3
   1e880:	781b      	ldrb	r3, [r3, #0]
   1e882:	2b00      	cmp	r3, #0
   1e884:	d10f      	bne.n	1e8a6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1e886:	230f      	movs	r3, #15
   1e888:	18fb      	adds	r3, r7, r3
   1e88a:	781b      	ldrb	r3, [r3, #0]
   1e88c:	009b      	lsls	r3, r3, #2
   1e88e:	2210      	movs	r2, #16
   1e890:	4694      	mov	ip, r2
   1e892:	44bc      	add	ip, r7
   1e894:	4463      	add	r3, ip
   1e896:	3b08      	subs	r3, #8
   1e898:	681a      	ldr	r2, [r3, #0]
   1e89a:	230e      	movs	r3, #14
   1e89c:	18fb      	adds	r3, r7, r3
   1e89e:	781b      	ldrb	r3, [r3, #0]
   1e8a0:	01db      	lsls	r3, r3, #7
   1e8a2:	18d3      	adds	r3, r2, r3
   1e8a4:	e000      	b.n	1e8a8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1e8a6:	2300      	movs	r3, #0
}
   1e8a8:	0018      	movs	r0, r3
   1e8aa:	46bd      	mov	sp, r7
   1e8ac:	b004      	add	sp, #16
   1e8ae:	bd80      	pop	{r7, pc}
   1e8b0:	41004400 	.word	0x41004400

0001e8b4 <system_interrupt_enable>:
{
   1e8b4:	b580      	push	{r7, lr}
   1e8b6:	b082      	sub	sp, #8
   1e8b8:	af00      	add	r7, sp, #0
   1e8ba:	0002      	movs	r2, r0
   1e8bc:	1dfb      	adds	r3, r7, #7
   1e8be:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e8c0:	4b06      	ldr	r3, [pc, #24]	; (1e8dc <system_interrupt_enable+0x28>)
   1e8c2:	1dfa      	adds	r2, r7, #7
   1e8c4:	7812      	ldrb	r2, [r2, #0]
   1e8c6:	0011      	movs	r1, r2
   1e8c8:	221f      	movs	r2, #31
   1e8ca:	400a      	ands	r2, r1
   1e8cc:	2101      	movs	r1, #1
   1e8ce:	4091      	lsls	r1, r2
   1e8d0:	000a      	movs	r2, r1
   1e8d2:	601a      	str	r2, [r3, #0]
}
   1e8d4:	46c0      	nop			; (mov r8, r8)
   1e8d6:	46bd      	mov	sp, r7
   1e8d8:	b002      	add	sp, #8
   1e8da:	bd80      	pop	{r7, pc}
   1e8dc:	e000e100 	.word	0xe000e100

0001e8e0 <port_get_group_from_gpio_pin>:
{
   1e8e0:	b580      	push	{r7, lr}
   1e8e2:	b082      	sub	sp, #8
   1e8e4:	af00      	add	r7, sp, #0
   1e8e6:	0002      	movs	r2, r0
   1e8e8:	1dfb      	adds	r3, r7, #7
   1e8ea:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1e8ec:	1dfb      	adds	r3, r7, #7
   1e8ee:	781b      	ldrb	r3, [r3, #0]
   1e8f0:	0018      	movs	r0, r3
   1e8f2:	4b03      	ldr	r3, [pc, #12]	; (1e900 <port_get_group_from_gpio_pin+0x20>)
   1e8f4:	4798      	blx	r3
   1e8f6:	0003      	movs	r3, r0
}
   1e8f8:	0018      	movs	r0, r3
   1e8fa:	46bd      	mov	sp, r7
   1e8fc:	b002      	add	sp, #8
   1e8fe:	bd80      	pop	{r7, pc}
   1e900:	0001e855 	.word	0x0001e855

0001e904 <port_get_config_defaults>:
{
   1e904:	b580      	push	{r7, lr}
   1e906:	b082      	sub	sp, #8
   1e908:	af00      	add	r7, sp, #0
   1e90a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1e90c:	687b      	ldr	r3, [r7, #4]
   1e90e:	2200      	movs	r2, #0
   1e910:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1e912:	687b      	ldr	r3, [r7, #4]
   1e914:	2201      	movs	r2, #1
   1e916:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1e918:	687b      	ldr	r3, [r7, #4]
   1e91a:	2200      	movs	r2, #0
   1e91c:	709a      	strb	r2, [r3, #2]
}
   1e91e:	46c0      	nop			; (mov r8, r8)
   1e920:	46bd      	mov	sp, r7
   1e922:	b002      	add	sp, #8
   1e924:	bd80      	pop	{r7, pc}
	...

0001e928 <port_pin_set_output_level>:
{
   1e928:	b580      	push	{r7, lr}
   1e92a:	b084      	sub	sp, #16
   1e92c:	af00      	add	r7, sp, #0
   1e92e:	0002      	movs	r2, r0
   1e930:	1dfb      	adds	r3, r7, #7
   1e932:	701a      	strb	r2, [r3, #0]
   1e934:	1dbb      	adds	r3, r7, #6
   1e936:	1c0a      	adds	r2, r1, #0
   1e938:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1e93a:	1dfb      	adds	r3, r7, #7
   1e93c:	781b      	ldrb	r3, [r3, #0]
   1e93e:	0018      	movs	r0, r3
   1e940:	4b0d      	ldr	r3, [pc, #52]	; (1e978 <port_pin_set_output_level+0x50>)
   1e942:	4798      	blx	r3
   1e944:	0003      	movs	r3, r0
   1e946:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1e948:	1dfb      	adds	r3, r7, #7
   1e94a:	781b      	ldrb	r3, [r3, #0]
   1e94c:	221f      	movs	r2, #31
   1e94e:	4013      	ands	r3, r2
   1e950:	2201      	movs	r2, #1
   1e952:	409a      	lsls	r2, r3
   1e954:	0013      	movs	r3, r2
   1e956:	60bb      	str	r3, [r7, #8]
	if (level) {
   1e958:	1dbb      	adds	r3, r7, #6
   1e95a:	781b      	ldrb	r3, [r3, #0]
   1e95c:	2b00      	cmp	r3, #0
   1e95e:	d003      	beq.n	1e968 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1e960:	68fb      	ldr	r3, [r7, #12]
   1e962:	68ba      	ldr	r2, [r7, #8]
   1e964:	619a      	str	r2, [r3, #24]
}
   1e966:	e002      	b.n	1e96e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1e968:	68fb      	ldr	r3, [r7, #12]
   1e96a:	68ba      	ldr	r2, [r7, #8]
   1e96c:	615a      	str	r2, [r3, #20]
}
   1e96e:	46c0      	nop			; (mov r8, r8)
   1e970:	46bd      	mov	sp, r7
   1e972:	b004      	add	sp, #16
   1e974:	bd80      	pop	{r7, pc}
   1e976:	46c0      	nop			; (mov r8, r8)
   1e978:	0001e8e1 	.word	0x0001e8e1

0001e97c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   1e97c:	b580      	push	{r7, lr}
   1e97e:	b084      	sub	sp, #16
   1e980:	af00      	add	r7, sp, #0
   1e982:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1e984:	687b      	ldr	r3, [r7, #4]
   1e986:	681b      	ldr	r3, [r3, #0]
   1e988:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   1e98a:	68fb      	ldr	r3, [r7, #12]
   1e98c:	69db      	ldr	r3, [r3, #28]
   1e98e:	1e5a      	subs	r2, r3, #1
   1e990:	4193      	sbcs	r3, r2
   1e992:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   1e994:	0018      	movs	r0, r3
   1e996:	46bd      	mov	sp, r7
   1e998:	b004      	add	sp, #16
   1e99a:	bd80      	pop	{r7, pc}

0001e99c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   1e99c:	b580      	push	{r7, lr}
   1e99e:	b082      	sub	sp, #8
   1e9a0:	af00      	add	r7, sp, #0
   1e9a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   1e9a4:	687b      	ldr	r3, [r7, #4]
   1e9a6:	2201      	movs	r2, #1
   1e9a8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1e9aa:	687b      	ldr	r3, [r7, #4]
   1e9ac:	2200      	movs	r2, #0
   1e9ae:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1e9b0:	687b      	ldr	r3, [r7, #4]
   1e9b2:	2200      	movs	r2, #0
   1e9b4:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1e9b6:	687b      	ldr	r3, [r7, #4]
   1e9b8:	22c0      	movs	r2, #192	; 0xc0
   1e9ba:	0392      	lsls	r2, r2, #14
   1e9bc:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1e9be:	687b      	ldr	r3, [r7, #4]
   1e9c0:	2200      	movs	r2, #0
   1e9c2:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1e9c4:	687b      	ldr	r3, [r7, #4]
   1e9c6:	2200      	movs	r2, #0
   1e9c8:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1e9ca:	687b      	ldr	r3, [r7, #4]
   1e9cc:	2201      	movs	r2, #1
   1e9ce:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   1e9d0:	687b      	ldr	r3, [r7, #4]
   1e9d2:	2201      	movs	r2, #1
   1e9d4:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   1e9d6:	687b      	ldr	r3, [r7, #4]
   1e9d8:	2200      	movs	r2, #0
   1e9da:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   1e9dc:	687b      	ldr	r3, [r7, #4]
   1e9de:	2224      	movs	r2, #36	; 0x24
   1e9e0:	2100      	movs	r1, #0
   1e9e2:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1e9e4:	687b      	ldr	r3, [r7, #4]
   1e9e6:	3318      	adds	r3, #24
   1e9e8:	220c      	movs	r2, #12
   1e9ea:	2100      	movs	r1, #0
   1e9ec:	0018      	movs	r0, r3
   1e9ee:	4b0a      	ldr	r3, [pc, #40]	; (1ea18 <spi_get_config_defaults+0x7c>)
   1e9f0:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   1e9f2:	687b      	ldr	r3, [r7, #4]
   1e9f4:	4a09      	ldr	r2, [pc, #36]	; (1ea1c <spi_get_config_defaults+0x80>)
   1e9f6:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1e9f8:	687b      	ldr	r3, [r7, #4]
   1e9fa:	2200      	movs	r2, #0
   1e9fc:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1e9fe:	687b      	ldr	r3, [r7, #4]
   1ea00:	2200      	movs	r2, #0
   1ea02:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1ea04:	687b      	ldr	r3, [r7, #4]
   1ea06:	2200      	movs	r2, #0
   1ea08:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1ea0a:	687b      	ldr	r3, [r7, #4]
   1ea0c:	2200      	movs	r2, #0
   1ea0e:	635a      	str	r2, [r3, #52]	; 0x34

};
   1ea10:	46c0      	nop			; (mov r8, r8)
   1ea12:	46bd      	mov	sp, r7
   1ea14:	b002      	add	sp, #8
   1ea16:	bd80      	pop	{r7, pc}
   1ea18:	0003431b 	.word	0x0003431b
   1ea1c:	000186a0 	.word	0x000186a0

0001ea20 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   1ea20:	b580      	push	{r7, lr}
   1ea22:	b082      	sub	sp, #8
   1ea24:	af00      	add	r7, sp, #0
   1ea26:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   1ea28:	687b      	ldr	r3, [r7, #4]
   1ea2a:	220a      	movs	r2, #10
   1ea2c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1ea2e:	687b      	ldr	r3, [r7, #4]
   1ea30:	2200      	movs	r2, #0
   1ea32:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1ea34:	687b      	ldr	r3, [r7, #4]
   1ea36:	2200      	movs	r2, #0
   1ea38:	709a      	strb	r2, [r3, #2]
}
   1ea3a:	46c0      	nop			; (mov r8, r8)
   1ea3c:	46bd      	mov	sp, r7
   1ea3e:	b002      	add	sp, #8
   1ea40:	bd80      	pop	{r7, pc}
	...

0001ea44 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   1ea44:	b580      	push	{r7, lr}
   1ea46:	b084      	sub	sp, #16
   1ea48:	af00      	add	r7, sp, #0
   1ea4a:	6078      	str	r0, [r7, #4]
   1ea4c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   1ea4e:	683b      	ldr	r3, [r7, #0]
   1ea50:	781a      	ldrb	r2, [r3, #0]
   1ea52:	687b      	ldr	r3, [r7, #4]
   1ea54:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1ea56:	683b      	ldr	r3, [r7, #0]
   1ea58:	785a      	ldrb	r2, [r3, #1]
   1ea5a:	687b      	ldr	r3, [r7, #4]
   1ea5c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1ea5e:	683b      	ldr	r3, [r7, #0]
   1ea60:	789a      	ldrb	r2, [r3, #2]
   1ea62:	687b      	ldr	r3, [r7, #4]
   1ea64:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1ea66:	230c      	movs	r3, #12
   1ea68:	18fb      	adds	r3, r7, r3
   1ea6a:	0018      	movs	r0, r3
   1ea6c:	4b0b      	ldr	r3, [pc, #44]	; (1ea9c <spi_attach_slave+0x58>)
   1ea6e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1ea70:	230c      	movs	r3, #12
   1ea72:	18fb      	adds	r3, r7, r3
   1ea74:	2201      	movs	r2, #1
   1ea76:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1ea78:	687b      	ldr	r3, [r7, #4]
   1ea7a:	781b      	ldrb	r3, [r3, #0]
   1ea7c:	220c      	movs	r2, #12
   1ea7e:	18ba      	adds	r2, r7, r2
   1ea80:	0011      	movs	r1, r2
   1ea82:	0018      	movs	r0, r3
   1ea84:	4b06      	ldr	r3, [pc, #24]	; (1eaa0 <spi_attach_slave+0x5c>)
   1ea86:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1ea88:	687b      	ldr	r3, [r7, #4]
   1ea8a:	781b      	ldrb	r3, [r3, #0]
   1ea8c:	2101      	movs	r1, #1
   1ea8e:	0018      	movs	r0, r3
   1ea90:	4b04      	ldr	r3, [pc, #16]	; (1eaa4 <spi_attach_slave+0x60>)
   1ea92:	4798      	blx	r3
}
   1ea94:	46c0      	nop			; (mov r8, r8)
   1ea96:	46bd      	mov	sp, r7
   1ea98:	b004      	add	sp, #16
   1ea9a:	bd80      	pop	{r7, pc}
   1ea9c:	0001e905 	.word	0x0001e905
   1eaa0:	00025de9 	.word	0x00025de9
   1eaa4:	0001e929 	.word	0x0001e929

0001eaa8 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   1eaa8:	b580      	push	{r7, lr}
   1eaaa:	b084      	sub	sp, #16
   1eaac:	af00      	add	r7, sp, #0
   1eaae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1eab0:	687b      	ldr	r3, [r7, #4]
   1eab2:	681b      	ldr	r3, [r3, #0]
   1eab4:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1eab6:	687b      	ldr	r3, [r7, #4]
   1eab8:	681b      	ldr	r3, [r3, #0]
   1eaba:	0018      	movs	r0, r3
   1eabc:	4b0b      	ldr	r3, [pc, #44]	; (1eaec <spi_enable+0x44>)
   1eabe:	4798      	blx	r3
   1eac0:	0003      	movs	r3, r0
   1eac2:	0018      	movs	r0, r3
   1eac4:	4b0a      	ldr	r3, [pc, #40]	; (1eaf0 <spi_enable+0x48>)
   1eac6:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1eac8:	46c0      	nop			; (mov r8, r8)
   1eaca:	687b      	ldr	r3, [r7, #4]
   1eacc:	0018      	movs	r0, r3
   1eace:	4b09      	ldr	r3, [pc, #36]	; (1eaf4 <spi_enable+0x4c>)
   1ead0:	4798      	blx	r3
   1ead2:	1e03      	subs	r3, r0, #0
   1ead4:	d1f9      	bne.n	1eaca <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1ead6:	68fb      	ldr	r3, [r7, #12]
   1ead8:	681b      	ldr	r3, [r3, #0]
   1eada:	2202      	movs	r2, #2
   1eadc:	431a      	orrs	r2, r3
   1eade:	68fb      	ldr	r3, [r7, #12]
   1eae0:	601a      	str	r2, [r3, #0]
}
   1eae2:	46c0      	nop			; (mov r8, r8)
   1eae4:	46bd      	mov	sp, r7
   1eae6:	b004      	add	sp, #16
   1eae8:	bd80      	pop	{r7, pc}
   1eaea:	46c0      	nop			; (mov r8, r8)
   1eaec:	00026ab9 	.word	0x00026ab9
   1eaf0:	0001e8b5 	.word	0x0001e8b5
   1eaf4:	0001e97d 	.word	0x0001e97d

0001eaf8 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   1eaf8:	b580      	push	{r7, lr}
   1eafa:	b084      	sub	sp, #16
   1eafc:	af00      	add	r7, sp, #0
   1eafe:	6078      	str	r0, [r7, #4]
   1eb00:	000a      	movs	r2, r1
   1eb02:	1cfb      	adds	r3, r7, #3
   1eb04:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   1eb06:	230f      	movs	r3, #15
   1eb08:	18fb      	adds	r3, r7, r3
   1eb0a:	2200      	movs	r2, #0
   1eb0c:	701a      	strb	r2, [r3, #0]
	while (size--) {
   1eb0e:	e038      	b.n	1eb82 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   1eb10:	687b      	ldr	r3, [r7, #4]
   1eb12:	1c5a      	adds	r2, r3, #1
   1eb14:	607a      	str	r2, [r7, #4]
   1eb16:	220e      	movs	r2, #14
   1eb18:	18ba      	adds	r2, r7, r2
   1eb1a:	781b      	ldrb	r3, [r3, #0]
   1eb1c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1eb1e:	230d      	movs	r3, #13
   1eb20:	18fb      	adds	r3, r7, r3
   1eb22:	2200      	movs	r2, #0
   1eb24:	701a      	strb	r2, [r3, #0]
   1eb26:	e027      	b.n	1eb78 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   1eb28:	230f      	movs	r3, #15
   1eb2a:	18fa      	adds	r2, r7, r3
   1eb2c:	230f      	movs	r3, #15
   1eb2e:	18fb      	adds	r3, r7, r3
   1eb30:	781b      	ldrb	r3, [r3, #0]
   1eb32:	18db      	adds	r3, r3, r3
   1eb34:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   1eb36:	230e      	movs	r3, #14
   1eb38:	18fa      	adds	r2, r7, r3
   1eb3a:	230f      	movs	r3, #15
   1eb3c:	18fb      	adds	r3, r7, r3
   1eb3e:	7812      	ldrb	r2, [r2, #0]
   1eb40:	781b      	ldrb	r3, [r3, #0]
   1eb42:	4053      	eors	r3, r2
   1eb44:	b2db      	uxtb	r3, r3
   1eb46:	b25b      	sxtb	r3, r3
   1eb48:	2b00      	cmp	r3, #0
   1eb4a:	da07      	bge.n	1eb5c <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   1eb4c:	230f      	movs	r3, #15
   1eb4e:	18fb      	adds	r3, r7, r3
   1eb50:	220f      	movs	r2, #15
   1eb52:	18ba      	adds	r2, r7, r2
   1eb54:	7812      	ldrb	r2, [r2, #0]
   1eb56:	2109      	movs	r1, #9
   1eb58:	404a      	eors	r2, r1
   1eb5a:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   1eb5c:	230e      	movs	r3, #14
   1eb5e:	18fa      	adds	r2, r7, r3
   1eb60:	230e      	movs	r3, #14
   1eb62:	18fb      	adds	r3, r7, r3
   1eb64:	781b      	ldrb	r3, [r3, #0]
   1eb66:	18db      	adds	r3, r3, r3
   1eb68:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1eb6a:	230d      	movs	r3, #13
   1eb6c:	18fb      	adds	r3, r7, r3
   1eb6e:	781a      	ldrb	r2, [r3, #0]
   1eb70:	230d      	movs	r3, #13
   1eb72:	18fb      	adds	r3, r7, r3
   1eb74:	3201      	adds	r2, #1
   1eb76:	701a      	strb	r2, [r3, #0]
   1eb78:	230d      	movs	r3, #13
   1eb7a:	18fb      	adds	r3, r7, r3
   1eb7c:	781b      	ldrb	r3, [r3, #0]
   1eb7e:	2b07      	cmp	r3, #7
   1eb80:	d9d2      	bls.n	1eb28 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   1eb82:	1cfb      	adds	r3, r7, #3
   1eb84:	781b      	ldrb	r3, [r3, #0]
   1eb86:	1cfa      	adds	r2, r7, #3
   1eb88:	1e59      	subs	r1, r3, #1
   1eb8a:	7011      	strb	r1, [r2, #0]
   1eb8c:	2b00      	cmp	r3, #0
   1eb8e:	d1bf      	bne.n	1eb10 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   1eb90:	230f      	movs	r3, #15
   1eb92:	18fb      	adds	r3, r7, r3
   1eb94:	781b      	ldrb	r3, [r3, #0]
   1eb96:	005b      	lsls	r3, r3, #1
   1eb98:	b25b      	sxtb	r3, r3
   1eb9a:	2201      	movs	r2, #1
   1eb9c:	4313      	orrs	r3, r2
   1eb9e:	b25a      	sxtb	r2, r3
   1eba0:	230f      	movs	r3, #15
   1eba2:	18fb      	adds	r3, r7, r3
   1eba4:	701a      	strb	r2, [r3, #0]
	return crc;
   1eba6:	230f      	movs	r3, #15
   1eba8:	18fb      	adds	r3, r7, r3
   1ebaa:	781b      	ldrb	r3, [r3, #0]
}
   1ebac:	0018      	movs	r0, r3
   1ebae:	46bd      	mov	sp, r7
   1ebb0:	b004      	add	sp, #16
   1ebb2:	bd80      	pop	{r7, pc}

0001ebb4 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   1ebb4:	b590      	push	{r4, r7, lr}
   1ebb6:	b083      	sub	sp, #12
   1ebb8:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   1ebba:	1c7b      	adds	r3, r7, #1
   1ebbc:	22ff      	movs	r2, #255	; 0xff
   1ebbe:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   1ebc0:	1cbb      	adds	r3, r7, #2
   1ebc2:	22ff      	movs	r2, #255	; 0xff
   1ebc4:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1ebc6:	1cbb      	adds	r3, r7, #2
   1ebc8:	881b      	ldrh	r3, [r3, #0]
   1ebca:	1c79      	adds	r1, r7, #1
   1ebcc:	4811      	ldr	r0, [pc, #68]	; (1ec14 <sd_mmc_spi_wait_busy+0x60>)
   1ebce:	2201      	movs	r2, #1
   1ebd0:	4c11      	ldr	r4, [pc, #68]	; (1ec18 <sd_mmc_spi_wait_busy+0x64>)
   1ebd2:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   1ebd4:	4b11      	ldr	r3, [pc, #68]	; (1ec1c <sd_mmc_spi_wait_busy+0x68>)
   1ebd6:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1ebd8:	1cbb      	adds	r3, r7, #2
   1ebda:	881b      	ldrh	r3, [r3, #0]
   1ebdc:	1c79      	adds	r1, r7, #1
   1ebde:	480d      	ldr	r0, [pc, #52]	; (1ec14 <sd_mmc_spi_wait_busy+0x60>)
   1ebe0:	2201      	movs	r2, #1
   1ebe2:	4c0d      	ldr	r4, [pc, #52]	; (1ec18 <sd_mmc_spi_wait_busy+0x64>)
   1ebe4:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1ebe6:	1cbb      	adds	r3, r7, #2
   1ebe8:	881b      	ldrh	r3, [r3, #0]
   1ebea:	1c79      	adds	r1, r7, #1
   1ebec:	4809      	ldr	r0, [pc, #36]	; (1ec14 <sd_mmc_spi_wait_busy+0x60>)
   1ebee:	2201      	movs	r2, #1
   1ebf0:	4c09      	ldr	r4, [pc, #36]	; (1ec18 <sd_mmc_spi_wait_busy+0x64>)
   1ebf2:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   1ebf4:	687b      	ldr	r3, [r7, #4]
   1ebf6:	1e5a      	subs	r2, r3, #1
   1ebf8:	607a      	str	r2, [r7, #4]
   1ebfa:	2b00      	cmp	r3, #0
   1ebfc:	d101      	bne.n	1ec02 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   1ebfe:	2300      	movs	r3, #0
   1ec00:	e004      	b.n	1ec0c <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   1ec02:	1c7b      	adds	r3, r7, #1
   1ec04:	781b      	ldrb	r3, [r3, #0]
   1ec06:	2bff      	cmp	r3, #255	; 0xff
   1ec08:	d1ed      	bne.n	1ebe6 <sd_mmc_spi_wait_busy+0x32>
	return true;
   1ec0a:	2301      	movs	r3, #1
}
   1ec0c:	0018      	movs	r0, r3
   1ec0e:	46bd      	mov	sp, r7
   1ec10:	b003      	add	sp, #12
   1ec12:	bd90      	pop	{r4, r7, pc}
   1ec14:	200040b4 	.word	0x200040b4
   1ec18:	000273f9 	.word	0x000273f9
   1ec1c:	00030d40 	.word	0x00030d40

0001ec20 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   1ec20:	b590      	push	{r4, r7, lr}
   1ec22:	b083      	sub	sp, #12
   1ec24:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   1ec26:	1cbb      	adds	r3, r7, #2
   1ec28:	22ff      	movs	r2, #255	; 0xff
   1ec2a:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   1ec2c:	1c7b      	adds	r3, r7, #1
   1ec2e:	2200      	movs	r2, #0
   1ec30:	701a      	strb	r2, [r3, #0]
	i = 500000;
   1ec32:	4b18      	ldr	r3, [pc, #96]	; (1ec94 <sd_mmc_spi_start_read_block+0x74>)
   1ec34:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   1ec36:	687b      	ldr	r3, [r7, #4]
   1ec38:	1e5a      	subs	r2, r3, #1
   1ec3a:	607a      	str	r2, [r7, #4]
   1ec3c:	2b00      	cmp	r3, #0
   1ec3e:	d104      	bne.n	1ec4a <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   1ec40:	4b15      	ldr	r3, [pc, #84]	; (1ec98 <sd_mmc_spi_start_read_block+0x78>)
   1ec42:	2204      	movs	r2, #4
   1ec44:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   1ec46:	2300      	movs	r3, #0
   1ec48:	e020      	b.n	1ec8c <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   1ec4a:	1cbb      	adds	r3, r7, #2
   1ec4c:	881b      	ldrh	r3, [r3, #0]
   1ec4e:	1c79      	adds	r1, r7, #1
   1ec50:	4812      	ldr	r0, [pc, #72]	; (1ec9c <sd_mmc_spi_start_read_block+0x7c>)
   1ec52:	2201      	movs	r2, #1
   1ec54:	4c12      	ldr	r4, [pc, #72]	; (1eca0 <sd_mmc_spi_start_read_block+0x80>)
   1ec56:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   1ec58:	1c7b      	adds	r3, r7, #1
   1ec5a:	781b      	ldrb	r3, [r3, #0]
   1ec5c:	001a      	movs	r2, r3
   1ec5e:	23f0      	movs	r3, #240	; 0xf0
   1ec60:	4013      	ands	r3, r2
   1ec62:	d10e      	bne.n	1ec82 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   1ec64:	1c7b      	adds	r3, r7, #1
   1ec66:	781b      	ldrb	r3, [r3, #0]
   1ec68:	001a      	movs	r2, r3
   1ec6a:	2307      	movs	r3, #7
   1ec6c:	4013      	ands	r3, r2
   1ec6e:	d003      	beq.n	1ec78 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   1ec70:	4b09      	ldr	r3, [pc, #36]	; (1ec98 <sd_mmc_spi_start_read_block+0x78>)
   1ec72:	2207      	movs	r2, #7
   1ec74:	701a      	strb	r2, [r3, #0]
   1ec76:	e002      	b.n	1ec7e <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   1ec78:	4b07      	ldr	r3, [pc, #28]	; (1ec98 <sd_mmc_spi_start_read_block+0x78>)
   1ec7a:	220b      	movs	r2, #11
   1ec7c:	701a      	strb	r2, [r3, #0]
			}
			return false;
   1ec7e:	2300      	movs	r3, #0
   1ec80:	e004      	b.n	1ec8c <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   1ec82:	1c7b      	adds	r3, r7, #1
   1ec84:	781b      	ldrb	r3, [r3, #0]
   1ec86:	2bfe      	cmp	r3, #254	; 0xfe
   1ec88:	d1d5      	bne.n	1ec36 <sd_mmc_spi_start_read_block+0x16>

	return true;
   1ec8a:	2301      	movs	r3, #1
}
   1ec8c:	0018      	movs	r0, r3
   1ec8e:	46bd      	mov	sp, r7
   1ec90:	b003      	add	sp, #12
   1ec92:	bd90      	pop	{r4, r7, pc}
   1ec94:	0007a120 	.word	0x0007a120
   1ec98:	200040f7 	.word	0x200040f7
   1ec9c:	200040b4 	.word	0x200040b4
   1eca0:	000273f9 	.word	0x000273f9

0001eca4 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   1eca4:	b590      	push	{r4, r7, lr}
   1eca6:	b083      	sub	sp, #12
   1eca8:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   1ecaa:	1dbb      	adds	r3, r7, #6
   1ecac:	22ff      	movs	r2, #255	; 0xff
   1ecae:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   1ecb0:	1dbb      	adds	r3, r7, #6
   1ecb2:	881b      	ldrh	r3, [r3, #0]
   1ecb4:	1d39      	adds	r1, r7, #4
   1ecb6:	4804      	ldr	r0, [pc, #16]	; (1ecc8 <sd_mmc_spi_stop_read_block+0x24>)
   1ecb8:	2202      	movs	r2, #2
   1ecba:	4c04      	ldr	r4, [pc, #16]	; (1eccc <sd_mmc_spi_stop_read_block+0x28>)
   1ecbc:	47a0      	blx	r4
			dummy);
}
   1ecbe:	46c0      	nop			; (mov r8, r8)
   1ecc0:	46bd      	mov	sp, r7
   1ecc2:	b003      	add	sp, #12
   1ecc4:	bd90      	pop	{r4, r7, pc}
   1ecc6:	46c0      	nop			; (mov r8, r8)
   1ecc8:	200040b4 	.word	0x200040b4
   1eccc:	000273f9 	.word	0x000273f9

0001ecd0 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   1ecd0:	b580      	push	{r7, lr}
   1ecd2:	b082      	sub	sp, #8
   1ecd4:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   1ecd6:	1dfb      	adds	r3, r7, #7
   1ecd8:	22ff      	movs	r2, #255	; 0xff
   1ecda:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   1ecdc:	1df9      	adds	r1, r7, #7
   1ecde:	4b0d      	ldr	r3, [pc, #52]	; (1ed14 <sd_mmc_spi_start_write_block+0x44>)
   1ece0:	2201      	movs	r2, #1
   1ece2:	0018      	movs	r0, r3
   1ece4:	4b0c      	ldr	r3, [pc, #48]	; (1ed18 <sd_mmc_spi_start_write_block+0x48>)
   1ece6:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   1ece8:	4b0c      	ldr	r3, [pc, #48]	; (1ed1c <sd_mmc_spi_start_write_block+0x4c>)
   1ecea:	881b      	ldrh	r3, [r3, #0]
   1ecec:	2b01      	cmp	r3, #1
   1ecee:	d103      	bne.n	1ecf8 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   1ecf0:	1dbb      	adds	r3, r7, #6
   1ecf2:	22fe      	movs	r2, #254	; 0xfe
   1ecf4:	701a      	strb	r2, [r3, #0]
   1ecf6:	e002      	b.n	1ecfe <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   1ecf8:	1dbb      	adds	r3, r7, #6
   1ecfa:	22fc      	movs	r2, #252	; 0xfc
   1ecfc:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   1ecfe:	1db9      	adds	r1, r7, #6
   1ed00:	4b04      	ldr	r3, [pc, #16]	; (1ed14 <sd_mmc_spi_start_write_block+0x44>)
   1ed02:	2201      	movs	r2, #1
   1ed04:	0018      	movs	r0, r3
   1ed06:	4b04      	ldr	r3, [pc, #16]	; (1ed18 <sd_mmc_spi_start_write_block+0x48>)
   1ed08:	4798      	blx	r3
}
   1ed0a:	46c0      	nop			; (mov r8, r8)
   1ed0c:	46bd      	mov	sp, r7
   1ed0e:	b002      	add	sp, #8
   1ed10:	bd80      	pop	{r7, pc}
   1ed12:	46c0      	nop			; (mov r8, r8)
   1ed14:	200040b4 	.word	0x200040b4
   1ed18:	0002761d 	.word	0x0002761d
   1ed1c:	20004102 	.word	0x20004102

0001ed20 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   1ed20:	b590      	push	{r4, r7, lr}
   1ed22:	b083      	sub	sp, #12
   1ed24:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   1ed26:	1dbb      	adds	r3, r7, #6
   1ed28:	22ff      	movs	r2, #255	; 0xff
   1ed2a:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   1ed2c:	1cbb      	adds	r3, r7, #2
   1ed2e:	2201      	movs	r2, #1
   1ed30:	4252      	negs	r2, r2
   1ed32:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   1ed34:	1cb9      	adds	r1, r7, #2
   1ed36:	4b1b      	ldr	r3, [pc, #108]	; (1eda4 <sd_mmc_spi_stop_write_block+0x84>)
   1ed38:	2202      	movs	r2, #2
   1ed3a:	0018      	movs	r0, r3
   1ed3c:	4b1a      	ldr	r3, [pc, #104]	; (1eda8 <sd_mmc_spi_stop_write_block+0x88>)
   1ed3e:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   1ed40:	1dbb      	adds	r3, r7, #6
   1ed42:	881b      	ldrh	r3, [r3, #0]
   1ed44:	1d79      	adds	r1, r7, #5
   1ed46:	4817      	ldr	r0, [pc, #92]	; (1eda4 <sd_mmc_spi_stop_write_block+0x84>)
   1ed48:	2201      	movs	r2, #1
   1ed4a:	4c18      	ldr	r4, [pc, #96]	; (1edac <sd_mmc_spi_stop_write_block+0x8c>)
   1ed4c:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   1ed4e:	1d7b      	adds	r3, r7, #5
   1ed50:	781b      	ldrb	r3, [r3, #0]
   1ed52:	001a      	movs	r2, r3
   1ed54:	2310      	movs	r3, #16
   1ed56:	4013      	ands	r3, r2
   1ed58:	d105      	bne.n	1ed66 <sd_mmc_spi_stop_write_block+0x46>
   1ed5a:	1d7b      	adds	r3, r7, #5
   1ed5c:	781b      	ldrb	r3, [r3, #0]
   1ed5e:	001a      	movs	r2, r3
   1ed60:	2301      	movs	r3, #1
   1ed62:	4013      	ands	r3, r2
   1ed64:	d104      	bne.n	1ed70 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1ed66:	4b12      	ldr	r3, [pc, #72]	; (1edb0 <sd_mmc_spi_stop_write_block+0x90>)
   1ed68:	2201      	movs	r2, #1
   1ed6a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   1ed6c:	2300      	movs	r3, #0
   1ed6e:	e014      	b.n	1ed9a <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   1ed70:	1d7b      	adds	r3, r7, #5
   1ed72:	781b      	ldrb	r3, [r3, #0]
   1ed74:	001a      	movs	r2, r3
   1ed76:	231e      	movs	r3, #30
   1ed78:	4013      	ands	r3, r2
   1ed7a:	2b04      	cmp	r3, #4
   1ed7c:	d00b      	beq.n	1ed96 <sd_mmc_spi_stop_write_block+0x76>
   1ed7e:	2b0a      	cmp	r3, #10
   1ed80:	d104      	bne.n	1ed8c <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   1ed82:	4b0b      	ldr	r3, [pc, #44]	; (1edb0 <sd_mmc_spi_stop_write_block+0x90>)
   1ed84:	2208      	movs	r2, #8
   1ed86:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1ed88:	2300      	movs	r3, #0
   1ed8a:	e006      	b.n	1ed9a <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   1ed8c:	4b08      	ldr	r3, [pc, #32]	; (1edb0 <sd_mmc_spi_stop_write_block+0x90>)
   1ed8e:	220a      	movs	r2, #10
   1ed90:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1ed92:	2300      	movs	r3, #0
   1ed94:	e001      	b.n	1ed9a <sd_mmc_spi_stop_write_block+0x7a>
		break;
   1ed96:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1ed98:	2301      	movs	r3, #1
}
   1ed9a:	0018      	movs	r0, r3
   1ed9c:	46bd      	mov	sp, r7
   1ed9e:	b003      	add	sp, #12
   1eda0:	bd90      	pop	{r4, r7, pc}
   1eda2:	46c0      	nop			; (mov r8, r8)
   1eda4:	200040b4 	.word	0x200040b4
   1eda8:	0002761d 	.word	0x0002761d
   1edac:	000273f9 	.word	0x000273f9
   1edb0:	200040f7 	.word	0x200040f7

0001edb4 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   1edb4:	b590      	push	{r4, r7, lr}
   1edb6:	b083      	sub	sp, #12
   1edb8:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   1edba:	4b1d      	ldr	r3, [pc, #116]	; (1ee30 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1edbc:	881b      	ldrh	r3, [r3, #0]
   1edbe:	2b01      	cmp	r3, #1
   1edc0:	d101      	bne.n	1edc6 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   1edc2:	2301      	movs	r3, #1
   1edc4:	e030      	b.n	1ee28 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   1edc6:	4b1a      	ldr	r3, [pc, #104]	; (1ee30 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1edc8:	881b      	ldrh	r3, [r3, #0]
   1edca:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   1edcc:	4b19      	ldr	r3, [pc, #100]	; (1ee34 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   1edce:	681a      	ldr	r2, [r3, #0]
   1edd0:	4b19      	ldr	r3, [pc, #100]	; (1ee38 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   1edd2:	881b      	ldrh	r3, [r3, #0]
   1edd4:	0019      	movs	r1, r3
   1edd6:	4b19      	ldr	r3, [pc, #100]	; (1ee3c <sd_mmc_spi_stop_multiwrite_block+0x88>)
   1edd8:	0010      	movs	r0, r2
   1edda:	4798      	blx	r3
   1eddc:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   1edde:	429c      	cmp	r4, r3
   1ede0:	d901      	bls.n	1ede6 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   1ede2:	2301      	movs	r3, #1
   1ede4:	e020      	b.n	1ee28 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   1ede6:	1dfb      	adds	r3, r7, #7
   1ede8:	22ff      	movs	r2, #255	; 0xff
   1edea:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1edec:	1df9      	adds	r1, r7, #7
   1edee:	4b14      	ldr	r3, [pc, #80]	; (1ee40 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1edf0:	2201      	movs	r2, #1
   1edf2:	0018      	movs	r0, r3
   1edf4:	4b13      	ldr	r3, [pc, #76]	; (1ee44 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1edf6:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   1edf8:	1dfb      	adds	r3, r7, #7
   1edfa:	22fd      	movs	r2, #253	; 0xfd
   1edfc:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1edfe:	1df9      	adds	r1, r7, #7
   1ee00:	4b0f      	ldr	r3, [pc, #60]	; (1ee40 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1ee02:	2201      	movs	r2, #1
   1ee04:	0018      	movs	r0, r3
   1ee06:	4b0f      	ldr	r3, [pc, #60]	; (1ee44 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1ee08:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   1ee0a:	4b0f      	ldr	r3, [pc, #60]	; (1ee48 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   1ee0c:	4798      	blx	r3
   1ee0e:	0003      	movs	r3, r0
   1ee10:	001a      	movs	r2, r3
   1ee12:	2301      	movs	r3, #1
   1ee14:	4053      	eors	r3, r2
   1ee16:	b2db      	uxtb	r3, r3
   1ee18:	2b00      	cmp	r3, #0
   1ee1a:	d004      	beq.n	1ee26 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1ee1c:	4b0b      	ldr	r3, [pc, #44]	; (1ee4c <sd_mmc_spi_stop_multiwrite_block+0x98>)
   1ee1e:	2205      	movs	r2, #5
   1ee20:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   1ee22:	2300      	movs	r3, #0
   1ee24:	e000      	b.n	1ee28 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   1ee26:	2301      	movs	r3, #1
}
   1ee28:	0018      	movs	r0, r3
   1ee2a:	46bd      	mov	sp, r7
   1ee2c:	b003      	add	sp, #12
   1ee2e:	bd90      	pop	{r4, r7, pc}
   1ee30:	20004102 	.word	0x20004102
   1ee34:	200040fc 	.word	0x200040fc
   1ee38:	20004100 	.word	0x20004100
   1ee3c:	00031e9d 	.word	0x00031e9d
   1ee40:	200040b4 	.word	0x200040b4
   1ee44:	0002761d 	.word	0x0002761d
   1ee48:	0001ebb5 	.word	0x0001ebb5
   1ee4c:	200040f7 	.word	0x200040f7

0001ee50 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   1ee50:	b580      	push	{r7, lr}
   1ee52:	b090      	sub	sp, #64	; 0x40
   1ee54:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1ee56:	4b1f      	ldr	r3, [pc, #124]	; (1eed4 <sd_mmc_spi_init+0x84>)
   1ee58:	2200      	movs	r2, #0
   1ee5a:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1ee5c:	233c      	movs	r3, #60	; 0x3c
   1ee5e:	18fb      	adds	r3, r7, r3
   1ee60:	0018      	movs	r0, r3
   1ee62:	4b1d      	ldr	r3, [pc, #116]	; (1eed8 <sd_mmc_spi_init+0x88>)
   1ee64:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   1ee66:	1d3b      	adds	r3, r7, #4
   1ee68:	0018      	movs	r0, r3
   1ee6a:	4b1c      	ldr	r3, [pc, #112]	; (1eedc <sd_mmc_spi_init+0x8c>)
   1ee6c:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   1ee6e:	1d3b      	adds	r3, r7, #4
   1ee70:	2280      	movs	r2, #128	; 0x80
   1ee72:	0252      	lsls	r2, r2, #9
   1ee74:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   1ee76:	1d3b      	adds	r3, r7, #4
   1ee78:	4a19      	ldr	r2, [pc, #100]	; (1eee0 <sd_mmc_spi_init+0x90>)
   1ee7a:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   1ee7c:	1d3b      	adds	r3, r7, #4
   1ee7e:	4a19      	ldr	r2, [pc, #100]	; (1eee4 <sd_mmc_spi_init+0x94>)
   1ee80:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   1ee82:	1d3b      	adds	r3, r7, #4
   1ee84:	4a18      	ldr	r2, [pc, #96]	; (1eee8 <sd_mmc_spi_init+0x98>)
   1ee86:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   1ee88:	1d3b      	adds	r3, r7, #4
   1ee8a:	4a18      	ldr	r2, [pc, #96]	; (1eeec <sd_mmc_spi_init+0x9c>)
   1ee8c:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   1ee8e:	1d3b      	adds	r3, r7, #4
   1ee90:	2224      	movs	r2, #36	; 0x24
   1ee92:	2100      	movs	r1, #0
   1ee94:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   1ee96:	1d3b      	adds	r3, r7, #4
   1ee98:	4a15      	ldr	r2, [pc, #84]	; (1eef0 <sd_mmc_spi_init+0xa0>)
   1ee9a:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   1ee9c:	1d3a      	adds	r2, r7, #4
   1ee9e:	4915      	ldr	r1, [pc, #84]	; (1eef4 <sd_mmc_spi_init+0xa4>)
   1eea0:	4b15      	ldr	r3, [pc, #84]	; (1eef8 <sd_mmc_spi_init+0xa8>)
   1eea2:	0018      	movs	r0, r3
   1eea4:	4b15      	ldr	r3, [pc, #84]	; (1eefc <sd_mmc_spi_init+0xac>)
   1eea6:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   1eea8:	4b13      	ldr	r3, [pc, #76]	; (1eef8 <sd_mmc_spi_init+0xa8>)
   1eeaa:	0018      	movs	r0, r3
   1eeac:	4b14      	ldr	r3, [pc, #80]	; (1ef00 <sd_mmc_spi_init+0xb0>)
   1eeae:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   1eeb0:	4b14      	ldr	r3, [pc, #80]	; (1ef04 <sd_mmc_spi_init+0xb4>)
   1eeb2:	0018      	movs	r0, r3
   1eeb4:	4b14      	ldr	r3, [pc, #80]	; (1ef08 <sd_mmc_spi_init+0xb8>)
   1eeb6:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   1eeb8:	4b14      	ldr	r3, [pc, #80]	; (1ef0c <sd_mmc_spi_init+0xbc>)
   1eeba:	781a      	ldrb	r2, [r3, #0]
   1eebc:	4b11      	ldr	r3, [pc, #68]	; (1ef04 <sd_mmc_spi_init+0xb4>)
   1eebe:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   1eec0:	4a10      	ldr	r2, [pc, #64]	; (1ef04 <sd_mmc_spi_init+0xb4>)
   1eec2:	4b13      	ldr	r3, [pc, #76]	; (1ef10 <sd_mmc_spi_init+0xc0>)
   1eec4:	0011      	movs	r1, r2
   1eec6:	0018      	movs	r0, r3
   1eec8:	4b12      	ldr	r3, [pc, #72]	; (1ef14 <sd_mmc_spi_init+0xc4>)
   1eeca:	4798      	blx	r3
}
   1eecc:	46c0      	nop			; (mov r8, r8)
   1eece:	46bd      	mov	sp, r7
   1eed0:	b010      	add	sp, #64	; 0x40
   1eed2:	bd80      	pop	{r7, pc}
   1eed4:	200040f7 	.word	0x200040f7
   1eed8:	0001e905 	.word	0x0001e905
   1eedc:	0001e99d 	.word	0x0001e99d
   1eee0:	00100002 	.word	0x00100002
   1eee4:	00110002 	.word	0x00110002
   1eee8:	00120002 	.word	0x00120002
   1eeec:	00130002 	.word	0x00130002
   1eef0:	00061a80 	.word	0x00061a80
   1eef4:	42000c00 	.word	0x42000c00
   1eef8:	200040b4 	.word	0x200040b4
   1eefc:	00027269 	.word	0x00027269
   1ef00:	0001eaa9 	.word	0x0001eaa9
   1ef04:	200040f4 	.word	0x200040f4
   1ef08:	0001ea21 	.word	0x0001ea21
   1ef0c:	20000100 	.word	0x20000100
   1ef10:	200040f0 	.word	0x200040f0
   1ef14:	0001ea45 	.word	0x0001ea45

0001ef18 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   1ef18:	b590      	push	{r4, r7, lr}
   1ef1a:	b083      	sub	sp, #12
   1ef1c:	af00      	add	r7, sp, #0
   1ef1e:	0004      	movs	r4, r0
   1ef20:	6039      	str	r1, [r7, #0]
   1ef22:	0010      	movs	r0, r2
   1ef24:	0019      	movs	r1, r3
   1ef26:	1dfb      	adds	r3, r7, #7
   1ef28:	1c22      	adds	r2, r4, #0
   1ef2a:	701a      	strb	r2, [r3, #0]
   1ef2c:	1dbb      	adds	r3, r7, #6
   1ef2e:	1c02      	adds	r2, r0, #0
   1ef30:	701a      	strb	r2, [r3, #0]
   1ef32:	1d7b      	adds	r3, r7, #5
   1ef34:	1c0a      	adds	r2, r1, #0
   1ef36:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1ef38:	4b13      	ldr	r3, [pc, #76]	; (1ef88 <sd_mmc_spi_select_device+0x70>)
   1ef3a:	2200      	movs	r2, #0
   1ef3c:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   1ef3e:	683b      	ldr	r3, [r7, #0]
   1ef40:	4a12      	ldr	r2, [pc, #72]	; (1ef8c <sd_mmc_spi_select_device+0x74>)
   1ef42:	4293      	cmp	r3, r2
   1ef44:	d907      	bls.n	1ef56 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   1ef46:	4b11      	ldr	r3, [pc, #68]	; (1ef8c <sd_mmc_spi_select_device+0x74>)
   1ef48:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1ef4a:	e004      	b.n	1ef56 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   1ef4c:	683b      	ldr	r3, [r7, #0]
   1ef4e:	08db      	lsrs	r3, r3, #3
   1ef50:	683a      	ldr	r2, [r7, #0]
   1ef52:	1ad3      	subs	r3, r2, r3
   1ef54:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1ef56:	683a      	ldr	r2, [r7, #0]
   1ef58:	4b0d      	ldr	r3, [pc, #52]	; (1ef90 <sd_mmc_spi_select_device+0x78>)
   1ef5a:	0011      	movs	r1, r2
   1ef5c:	0018      	movs	r0, r3
   1ef5e:	4b0d      	ldr	r3, [pc, #52]	; (1ef94 <sd_mmc_spi_select_device+0x7c>)
   1ef60:	4798      	blx	r3
   1ef62:	0003      	movs	r3, r0
   1ef64:	2b17      	cmp	r3, #23
   1ef66:	d0f1      	beq.n	1ef4c <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   1ef68:	1dfb      	adds	r3, r7, #7
   1ef6a:	781a      	ldrb	r2, [r3, #0]
   1ef6c:	0013      	movs	r3, r2
   1ef6e:	005b      	lsls	r3, r3, #1
   1ef70:	189b      	adds	r3, r3, r2
   1ef72:	4a09      	ldr	r2, [pc, #36]	; (1ef98 <sd_mmc_spi_select_device+0x80>)
   1ef74:	1899      	adds	r1, r3, r2
   1ef76:	4b06      	ldr	r3, [pc, #24]	; (1ef90 <sd_mmc_spi_select_device+0x78>)
   1ef78:	2201      	movs	r2, #1
   1ef7a:	0018      	movs	r0, r3
   1ef7c:	4b07      	ldr	r3, [pc, #28]	; (1ef9c <sd_mmc_spi_select_device+0x84>)
   1ef7e:	4798      	blx	r3
}
   1ef80:	46c0      	nop			; (mov r8, r8)
   1ef82:	46bd      	mov	sp, r7
   1ef84:	b003      	add	sp, #12
   1ef86:	bd90      	pop	{r4, r7, pc}
   1ef88:	200040f7 	.word	0x200040f7
   1ef8c:	00989680 	.word	0x00989680
   1ef90:	200040b4 	.word	0x200040b4
   1ef94:	00026f91 	.word	0x00026f91
   1ef98:	200040f0 	.word	0x200040f0
   1ef9c:	0002752d 	.word	0x0002752d

0001efa0 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   1efa0:	b580      	push	{r7, lr}
   1efa2:	b082      	sub	sp, #8
   1efa4:	af00      	add	r7, sp, #0
   1efa6:	0002      	movs	r2, r0
   1efa8:	1dfb      	adds	r3, r7, #7
   1efaa:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1efac:	4b09      	ldr	r3, [pc, #36]	; (1efd4 <sd_mmc_spi_deselect_device+0x34>)
   1efae:	2200      	movs	r2, #0
   1efb0:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   1efb2:	1dfb      	adds	r3, r7, #7
   1efb4:	781a      	ldrb	r2, [r3, #0]
   1efb6:	0013      	movs	r3, r2
   1efb8:	005b      	lsls	r3, r3, #1
   1efba:	189b      	adds	r3, r3, r2
   1efbc:	4a06      	ldr	r2, [pc, #24]	; (1efd8 <sd_mmc_spi_deselect_device+0x38>)
   1efbe:	1899      	adds	r1, r3, r2
   1efc0:	4b06      	ldr	r3, [pc, #24]	; (1efdc <sd_mmc_spi_deselect_device+0x3c>)
   1efc2:	2200      	movs	r2, #0
   1efc4:	0018      	movs	r0, r3
   1efc6:	4b06      	ldr	r3, [pc, #24]	; (1efe0 <sd_mmc_spi_deselect_device+0x40>)
   1efc8:	4798      	blx	r3
}
   1efca:	46c0      	nop			; (mov r8, r8)
   1efcc:	46bd      	mov	sp, r7
   1efce:	b002      	add	sp, #8
   1efd0:	bd80      	pop	{r7, pc}
   1efd2:	46c0      	nop			; (mov r8, r8)
   1efd4:	200040f7 	.word	0x200040f7
   1efd8:	200040f0 	.word	0x200040f0
   1efdc:	200040b4 	.word	0x200040b4
   1efe0:	0002752d 	.word	0x0002752d

0001efe4 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   1efe4:	b580      	push	{r7, lr}
   1efe6:	b082      	sub	sp, #8
   1efe8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   1efea:	1dbb      	adds	r3, r7, #6
   1efec:	22ff      	movs	r2, #255	; 0xff
   1efee:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1eff0:	4b0c      	ldr	r3, [pc, #48]	; (1f024 <sd_mmc_spi_send_clock+0x40>)
   1eff2:	2200      	movs	r2, #0
   1eff4:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   1eff6:	1dfb      	adds	r3, r7, #7
   1eff8:	2200      	movs	r2, #0
   1effa:	701a      	strb	r2, [r3, #0]
   1effc:	e00a      	b.n	1f014 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   1effe:	1db9      	adds	r1, r7, #6
   1f000:	4b09      	ldr	r3, [pc, #36]	; (1f028 <sd_mmc_spi_send_clock+0x44>)
   1f002:	2201      	movs	r2, #1
   1f004:	0018      	movs	r0, r3
   1f006:	4b09      	ldr	r3, [pc, #36]	; (1f02c <sd_mmc_spi_send_clock+0x48>)
   1f008:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   1f00a:	1dfb      	adds	r3, r7, #7
   1f00c:	781a      	ldrb	r2, [r3, #0]
   1f00e:	1dfb      	adds	r3, r7, #7
   1f010:	3201      	adds	r2, #1
   1f012:	701a      	strb	r2, [r3, #0]
   1f014:	1dfb      	adds	r3, r7, #7
   1f016:	781b      	ldrb	r3, [r3, #0]
   1f018:	2b09      	cmp	r3, #9
   1f01a:	d9f0      	bls.n	1effe <sd_mmc_spi_send_clock+0x1a>
	}
}
   1f01c:	46c0      	nop			; (mov r8, r8)
   1f01e:	46bd      	mov	sp, r7
   1f020:	b002      	add	sp, #8
   1f022:	bd80      	pop	{r7, pc}
   1f024:	200040f7 	.word	0x200040f7
   1f028:	200040b4 	.word	0x200040b4
   1f02c:	0002761d 	.word	0x0002761d

0001f030 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   1f030:	b590      	push	{r4, r7, lr}
   1f032:	b085      	sub	sp, #20
   1f034:	af02      	add	r7, sp, #8
   1f036:	6078      	str	r0, [r7, #4]
   1f038:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   1f03a:	6839      	ldr	r1, [r7, #0]
   1f03c:	6878      	ldr	r0, [r7, #4]
   1f03e:	2300      	movs	r3, #0
   1f040:	9300      	str	r3, [sp, #0]
   1f042:	2300      	movs	r3, #0
   1f044:	2200      	movs	r2, #0
   1f046:	4c03      	ldr	r4, [pc, #12]	; (1f054 <sd_mmc_spi_send_cmd+0x24>)
   1f048:	47a0      	blx	r4
   1f04a:	0003      	movs	r3, r0
}
   1f04c:	0018      	movs	r0, r3
   1f04e:	46bd      	mov	sp, r7
   1f050:	b003      	add	sp, #12
   1f052:	bd90      	pop	{r4, r7, pc}
   1f054:	0001f059 	.word	0x0001f059

0001f058 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   1f058:	b590      	push	{r4, r7, lr}
   1f05a:	b089      	sub	sp, #36	; 0x24
   1f05c:	af00      	add	r7, sp, #0
   1f05e:	60f8      	str	r0, [r7, #12]
   1f060:	60b9      	str	r1, [r7, #8]
   1f062:	0019      	movs	r1, r3
   1f064:	1dbb      	adds	r3, r7, #6
   1f066:	801a      	strh	r2, [r3, #0]
   1f068:	1d3b      	adds	r3, r7, #4
   1f06a:	1c0a      	adds	r2, r1, #0
   1f06c:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   1f06e:	231b      	movs	r3, #27
   1f070:	18fb      	adds	r3, r7, r3
   1f072:	22ff      	movs	r2, #255	; 0xff
   1f074:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   1f076:	231c      	movs	r3, #28
   1f078:	18fb      	adds	r3, r7, r3
   1f07a:	22ff      	movs	r2, #255	; 0xff
   1f07c:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f07e:	4b72      	ldr	r3, [pc, #456]	; (1f248 <sd_mmc_spi_adtc_start+0x1f0>)
   1f080:	2200      	movs	r2, #0
   1f082:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   1f084:	68fb      	ldr	r3, [r7, #12]
   1f086:	b2db      	uxtb	r3, r3
   1f088:	223f      	movs	r2, #63	; 0x3f
   1f08a:	4013      	ands	r3, r2
   1f08c:	b2db      	uxtb	r3, r3
   1f08e:	2240      	movs	r2, #64	; 0x40
   1f090:	4313      	orrs	r3, r2
   1f092:	b2da      	uxtb	r2, r3
   1f094:	2314      	movs	r3, #20
   1f096:	18fb      	adds	r3, r7, r3
   1f098:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   1f09a:	68bb      	ldr	r3, [r7, #8]
   1f09c:	0e1b      	lsrs	r3, r3, #24
   1f09e:	b2da      	uxtb	r2, r3
   1f0a0:	2314      	movs	r3, #20
   1f0a2:	18fb      	adds	r3, r7, r3
   1f0a4:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   1f0a6:	68bb      	ldr	r3, [r7, #8]
   1f0a8:	0c1b      	lsrs	r3, r3, #16
   1f0aa:	b2da      	uxtb	r2, r3
   1f0ac:	2314      	movs	r3, #20
   1f0ae:	18fb      	adds	r3, r7, r3
   1f0b0:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   1f0b2:	68bb      	ldr	r3, [r7, #8]
   1f0b4:	0a1b      	lsrs	r3, r3, #8
   1f0b6:	b2da      	uxtb	r2, r3
   1f0b8:	2314      	movs	r3, #20
   1f0ba:	18fb      	adds	r3, r7, r3
   1f0bc:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   1f0be:	68bb      	ldr	r3, [r7, #8]
   1f0c0:	b2da      	uxtb	r2, r3
   1f0c2:	2314      	movs	r3, #20
   1f0c4:	18fb      	adds	r3, r7, r3
   1f0c6:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   1f0c8:	2314      	movs	r3, #20
   1f0ca:	18fb      	adds	r3, r7, r3
   1f0cc:	2105      	movs	r1, #5
   1f0ce:	0018      	movs	r0, r3
   1f0d0:	4b5e      	ldr	r3, [pc, #376]	; (1f24c <sd_mmc_spi_adtc_start+0x1f4>)
   1f0d2:	4798      	blx	r3
   1f0d4:	0003      	movs	r3, r0
   1f0d6:	001a      	movs	r2, r3
   1f0d8:	2314      	movs	r3, #20
   1f0da:	18fb      	adds	r3, r7, r3
   1f0dc:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   1f0de:	231b      	movs	r3, #27
   1f0e0:	18f9      	adds	r1, r7, r3
   1f0e2:	4b5b      	ldr	r3, [pc, #364]	; (1f250 <sd_mmc_spi_adtc_start+0x1f8>)
   1f0e4:	2201      	movs	r2, #1
   1f0e6:	0018      	movs	r0, r3
   1f0e8:	4b5a      	ldr	r3, [pc, #360]	; (1f254 <sd_mmc_spi_adtc_start+0x1fc>)
   1f0ea:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   1f0ec:	2314      	movs	r3, #20
   1f0ee:	18f9      	adds	r1, r7, r3
   1f0f0:	4b57      	ldr	r3, [pc, #348]	; (1f250 <sd_mmc_spi_adtc_start+0x1f8>)
   1f0f2:	2206      	movs	r2, #6
   1f0f4:	0018      	movs	r0, r3
   1f0f6:	4b57      	ldr	r3, [pc, #348]	; (1f254 <sd_mmc_spi_adtc_start+0x1fc>)
   1f0f8:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   1f0fa:	2313      	movs	r3, #19
   1f0fc:	18fb      	adds	r3, r7, r3
   1f0fe:	22ff      	movs	r2, #255	; 0xff
   1f100:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1f102:	231c      	movs	r3, #28
   1f104:	18fb      	adds	r3, r7, r3
   1f106:	881b      	ldrh	r3, [r3, #0]
   1f108:	2213      	movs	r2, #19
   1f10a:	18b9      	adds	r1, r7, r2
   1f10c:	4850      	ldr	r0, [pc, #320]	; (1f250 <sd_mmc_spi_adtc_start+0x1f8>)
   1f10e:	2201      	movs	r2, #1
   1f110:	4c51      	ldr	r4, [pc, #324]	; (1f258 <sd_mmc_spi_adtc_start+0x200>)
   1f112:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   1f114:	231f      	movs	r3, #31
   1f116:	18fb      	adds	r3, r7, r3
   1f118:	2207      	movs	r2, #7
   1f11a:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1f11c:	231c      	movs	r3, #28
   1f11e:	18fb      	adds	r3, r7, r3
   1f120:	881b      	ldrh	r3, [r3, #0]
   1f122:	2213      	movs	r2, #19
   1f124:	18b9      	adds	r1, r7, r2
   1f126:	484a      	ldr	r0, [pc, #296]	; (1f250 <sd_mmc_spi_adtc_start+0x1f8>)
   1f128:	2201      	movs	r2, #1
   1f12a:	4c4b      	ldr	r4, [pc, #300]	; (1f258 <sd_mmc_spi_adtc_start+0x200>)
   1f12c:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   1f12e:	2313      	movs	r3, #19
   1f130:	18fb      	adds	r3, r7, r3
   1f132:	781b      	ldrb	r3, [r3, #0]
   1f134:	b25b      	sxtb	r3, r3
   1f136:	2b00      	cmp	r3, #0
   1f138:	da10      	bge.n	1f15c <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   1f13a:	231f      	movs	r3, #31
   1f13c:	18fb      	adds	r3, r7, r3
   1f13e:	221f      	movs	r2, #31
   1f140:	18ba      	adds	r2, r7, r2
   1f142:	7812      	ldrb	r2, [r2, #0]
   1f144:	3a01      	subs	r2, #1
   1f146:	701a      	strb	r2, [r3, #0]
   1f148:	231f      	movs	r3, #31
   1f14a:	18fb      	adds	r3, r7, r3
   1f14c:	781b      	ldrb	r3, [r3, #0]
   1f14e:	2b00      	cmp	r3, #0
   1f150:	d1e4      	bne.n	1f11c <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   1f152:	4b3d      	ldr	r3, [pc, #244]	; (1f248 <sd_mmc_spi_adtc_start+0x1f0>)
   1f154:	2202      	movs	r2, #2
   1f156:	701a      	strb	r2, [r3, #0]
			return false;
   1f158:	2300      	movs	r3, #0
   1f15a:	e070      	b.n	1f23e <sd_mmc_spi_adtc_start+0x1e6>
			break;
   1f15c:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   1f15e:	2313      	movs	r3, #19
   1f160:	18fb      	adds	r3, r7, r3
   1f162:	781b      	ldrb	r3, [r3, #0]
   1f164:	001a      	movs	r2, r3
   1f166:	4b3d      	ldr	r3, [pc, #244]	; (1f25c <sd_mmc_spi_adtc_start+0x204>)
   1f168:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   1f16a:	2313      	movs	r3, #19
   1f16c:	18fb      	adds	r3, r7, r3
   1f16e:	781b      	ldrb	r3, [r3, #0]
   1f170:	001a      	movs	r2, r3
   1f172:	2308      	movs	r3, #8
   1f174:	4013      	ands	r3, r2
   1f176:	d004      	beq.n	1f182 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   1f178:	4b33      	ldr	r3, [pc, #204]	; (1f248 <sd_mmc_spi_adtc_start+0x1f0>)
   1f17a:	2206      	movs	r2, #6
   1f17c:	701a      	strb	r2, [r3, #0]
		return false;
   1f17e:	2300      	movs	r3, #0
   1f180:	e05d      	b.n	1f23e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   1f182:	2313      	movs	r3, #19
   1f184:	18fb      	adds	r3, r7, r3
   1f186:	781b      	ldrb	r3, [r3, #0]
   1f188:	001a      	movs	r2, r3
   1f18a:	2304      	movs	r3, #4
   1f18c:	4013      	ands	r3, r2
   1f18e:	d004      	beq.n	1f19a <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   1f190:	4b2d      	ldr	r3, [pc, #180]	; (1f248 <sd_mmc_spi_adtc_start+0x1f0>)
   1f192:	2209      	movs	r2, #9
   1f194:	701a      	strb	r2, [r3, #0]
		return false;
   1f196:	2300      	movs	r3, #0
   1f198:	e051      	b.n	1f23e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   1f19a:	2313      	movs	r3, #19
   1f19c:	18fb      	adds	r3, r7, r3
   1f19e:	781b      	ldrb	r3, [r3, #0]
   1f1a0:	001a      	movs	r2, r3
   1f1a2:	2301      	movs	r3, #1
   1f1a4:	439a      	bics	r2, r3
   1f1a6:	1e13      	subs	r3, r2, #0
   1f1a8:	d004      	beq.n	1f1b4 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1f1aa:	4b27      	ldr	r3, [pc, #156]	; (1f248 <sd_mmc_spi_adtc_start+0x1f0>)
   1f1ac:	2201      	movs	r2, #1
   1f1ae:	701a      	strb	r2, [r3, #0]
		return false;
   1f1b0:	2300      	movs	r3, #0
   1f1b2:	e044      	b.n	1f23e <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   1f1b4:	68fa      	ldr	r2, [r7, #12]
   1f1b6:	2380      	movs	r3, #128	; 0x80
   1f1b8:	019b      	lsls	r3, r3, #6
   1f1ba:	4013      	ands	r3, r2
   1f1bc:	d00d      	beq.n	1f1da <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   1f1be:	4b28      	ldr	r3, [pc, #160]	; (1f260 <sd_mmc_spi_adtc_start+0x208>)
   1f1c0:	4798      	blx	r3
   1f1c2:	0003      	movs	r3, r0
   1f1c4:	001a      	movs	r2, r3
   1f1c6:	2301      	movs	r3, #1
   1f1c8:	4053      	eors	r3, r2
   1f1ca:	b2db      	uxtb	r3, r3
   1f1cc:	2b00      	cmp	r3, #0
   1f1ce:	d004      	beq.n	1f1da <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   1f1d0:	4b1d      	ldr	r3, [pc, #116]	; (1f248 <sd_mmc_spi_adtc_start+0x1f0>)
   1f1d2:	2203      	movs	r2, #3
   1f1d4:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   1f1d6:	2300      	movs	r3, #0
   1f1d8:	e031      	b.n	1f23e <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   1f1da:	68fa      	ldr	r2, [r7, #12]
   1f1dc:	2380      	movs	r3, #128	; 0x80
   1f1de:	009b      	lsls	r3, r3, #2
   1f1e0:	4013      	ands	r3, r2
   1f1e2:	d00e      	beq.n	1f202 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   1f1e4:	4b1d      	ldr	r3, [pc, #116]	; (1f25c <sd_mmc_spi_adtc_start+0x204>)
   1f1e6:	2200      	movs	r2, #0
   1f1e8:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   1f1ea:	231c      	movs	r3, #28
   1f1ec:	18fb      	adds	r3, r7, r3
   1f1ee:	881b      	ldrh	r3, [r3, #0]
   1f1f0:	491a      	ldr	r1, [pc, #104]	; (1f25c <sd_mmc_spi_adtc_start+0x204>)
   1f1f2:	4817      	ldr	r0, [pc, #92]	; (1f250 <sd_mmc_spi_adtc_start+0x1f8>)
   1f1f4:	2201      	movs	r2, #1
   1f1f6:	4c18      	ldr	r4, [pc, #96]	; (1f258 <sd_mmc_spi_adtc_start+0x200>)
   1f1f8:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   1f1fa:	4b18      	ldr	r3, [pc, #96]	; (1f25c <sd_mmc_spi_adtc_start+0x204>)
   1f1fc:	681a      	ldr	r2, [r3, #0]
   1f1fe:	4b17      	ldr	r3, [pc, #92]	; (1f25c <sd_mmc_spi_adtc_start+0x204>)
   1f200:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   1f202:	68fa      	ldr	r2, [r7, #12]
   1f204:	2380      	movs	r3, #128	; 0x80
   1f206:	00db      	lsls	r3, r3, #3
   1f208:	4013      	ands	r3, r2
   1f20a:	d00c      	beq.n	1f226 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   1f20c:	231c      	movs	r3, #28
   1f20e:	18fb      	adds	r3, r7, r3
   1f210:	881b      	ldrh	r3, [r3, #0]
   1f212:	4912      	ldr	r1, [pc, #72]	; (1f25c <sd_mmc_spi_adtc_start+0x204>)
   1f214:	480e      	ldr	r0, [pc, #56]	; (1f250 <sd_mmc_spi_adtc_start+0x1f8>)
   1f216:	2204      	movs	r2, #4
   1f218:	4c0f      	ldr	r4, [pc, #60]	; (1f258 <sd_mmc_spi_adtc_start+0x200>)
   1f21a:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   1f21c:	4b0f      	ldr	r3, [pc, #60]	; (1f25c <sd_mmc_spi_adtc_start+0x204>)
   1f21e:	681b      	ldr	r3, [r3, #0]
   1f220:	ba1a      	rev	r2, r3
   1f222:	4b0e      	ldr	r3, [pc, #56]	; (1f25c <sd_mmc_spi_adtc_start+0x204>)
   1f224:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   1f226:	4b0f      	ldr	r3, [pc, #60]	; (1f264 <sd_mmc_spi_adtc_start+0x20c>)
   1f228:	1dba      	adds	r2, r7, #6
   1f22a:	8812      	ldrh	r2, [r2, #0]
   1f22c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   1f22e:	4b0e      	ldr	r3, [pc, #56]	; (1f268 <sd_mmc_spi_adtc_start+0x210>)
   1f230:	1d3a      	adds	r2, r7, #4
   1f232:	8812      	ldrh	r2, [r2, #0]
   1f234:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   1f236:	4b0d      	ldr	r3, [pc, #52]	; (1f26c <sd_mmc_spi_adtc_start+0x214>)
   1f238:	2200      	movs	r2, #0
   1f23a:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   1f23c:	2301      	movs	r3, #1
}
   1f23e:	0018      	movs	r0, r3
   1f240:	46bd      	mov	sp, r7
   1f242:	b009      	add	sp, #36	; 0x24
   1f244:	bd90      	pop	{r4, r7, pc}
   1f246:	46c0      	nop			; (mov r8, r8)
   1f248:	200040f7 	.word	0x200040f7
   1f24c:	0001eaf9 	.word	0x0001eaf9
   1f250:	200040b4 	.word	0x200040b4
   1f254:	0002761d 	.word	0x0002761d
   1f258:	000273f9 	.word	0x000273f9
   1f25c:	200040f8 	.word	0x200040f8
   1f260:	0001ebb5 	.word	0x0001ebb5
   1f264:	20004100 	.word	0x20004100
   1f268:	20004102 	.word	0x20004102
   1f26c:	200040fc 	.word	0x200040fc

0001f270 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   1f270:	b580      	push	{r7, lr}
   1f272:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   1f274:	4b02      	ldr	r3, [pc, #8]	; (1f280 <sd_mmc_spi_get_response+0x10>)
   1f276:	681b      	ldr	r3, [r3, #0]
}
   1f278:	0018      	movs	r0, r3
   1f27a:	46bd      	mov	sp, r7
   1f27c:	bd80      	pop	{r7, pc}
   1f27e:	46c0      	nop			; (mov r8, r8)
   1f280:	200040f8 	.word	0x200040f8

0001f284 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   1f284:	b590      	push	{r4, r7, lr}
   1f286:	b085      	sub	sp, #20
   1f288:	af00      	add	r7, sp, #0
   1f28a:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   1f28c:	230e      	movs	r3, #14
   1f28e:	18fb      	adds	r3, r7, r3
   1f290:	22ff      	movs	r2, #255	; 0xff
   1f292:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f294:	4b1c      	ldr	r3, [pc, #112]	; (1f308 <sd_mmc_spi_read_word+0x84>)
   1f296:	2200      	movs	r2, #0
   1f298:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1f29a:	4b1c      	ldr	r3, [pc, #112]	; (1f30c <sd_mmc_spi_read_word+0x88>)
   1f29c:	681a      	ldr	r2, [r3, #0]
   1f29e:	4b1c      	ldr	r3, [pc, #112]	; (1f310 <sd_mmc_spi_read_word+0x8c>)
   1f2a0:	881b      	ldrh	r3, [r3, #0]
   1f2a2:	0019      	movs	r1, r3
   1f2a4:	4b1b      	ldr	r3, [pc, #108]	; (1f314 <sd_mmc_spi_read_word+0x90>)
   1f2a6:	0010      	movs	r0, r2
   1f2a8:	4798      	blx	r3
   1f2aa:	1e0b      	subs	r3, r1, #0
   1f2ac:	d10a      	bne.n	1f2c4 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   1f2ae:	4b1a      	ldr	r3, [pc, #104]	; (1f318 <sd_mmc_spi_read_word+0x94>)
   1f2b0:	4798      	blx	r3
   1f2b2:	0003      	movs	r3, r0
   1f2b4:	001a      	movs	r2, r3
   1f2b6:	2301      	movs	r3, #1
   1f2b8:	4053      	eors	r3, r2
   1f2ba:	b2db      	uxtb	r3, r3
   1f2bc:	2b00      	cmp	r3, #0
   1f2be:	d001      	beq.n	1f2c4 <sd_mmc_spi_read_word+0x40>
			return false;
   1f2c0:	2300      	movs	r3, #0
   1f2c2:	e01d      	b.n	1f300 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   1f2c4:	230e      	movs	r3, #14
   1f2c6:	18fb      	adds	r3, r7, r3
   1f2c8:	881b      	ldrh	r3, [r3, #0]
   1f2ca:	1d39      	adds	r1, r7, #4
   1f2cc:	4813      	ldr	r0, [pc, #76]	; (1f31c <sd_mmc_spi_read_word+0x98>)
   1f2ce:	2204      	movs	r2, #4
   1f2d0:	4c13      	ldr	r4, [pc, #76]	; (1f320 <sd_mmc_spi_read_word+0x9c>)
   1f2d2:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   1f2d4:	687b      	ldr	r3, [r7, #4]
   1f2d6:	687a      	ldr	r2, [r7, #4]
   1f2d8:	6812      	ldr	r2, [r2, #0]
   1f2da:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   1f2dc:	4b0b      	ldr	r3, [pc, #44]	; (1f30c <sd_mmc_spi_read_word+0x88>)
   1f2de:	681b      	ldr	r3, [r3, #0]
   1f2e0:	1d1a      	adds	r2, r3, #4
   1f2e2:	4b0a      	ldr	r3, [pc, #40]	; (1f30c <sd_mmc_spi_read_word+0x88>)
   1f2e4:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1f2e6:	4b09      	ldr	r3, [pc, #36]	; (1f30c <sd_mmc_spi_read_word+0x88>)
   1f2e8:	681a      	ldr	r2, [r3, #0]
   1f2ea:	4b09      	ldr	r3, [pc, #36]	; (1f310 <sd_mmc_spi_read_word+0x8c>)
   1f2ec:	881b      	ldrh	r3, [r3, #0]
   1f2ee:	0019      	movs	r1, r3
   1f2f0:	4b08      	ldr	r3, [pc, #32]	; (1f314 <sd_mmc_spi_read_word+0x90>)
   1f2f2:	0010      	movs	r0, r2
   1f2f4:	4798      	blx	r3
   1f2f6:	1e0b      	subs	r3, r1, #0
   1f2f8:	d101      	bne.n	1f2fe <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   1f2fa:	4b0a      	ldr	r3, [pc, #40]	; (1f324 <sd_mmc_spi_read_word+0xa0>)
   1f2fc:	4798      	blx	r3
	}
	return true;
   1f2fe:	2301      	movs	r3, #1
}
   1f300:	0018      	movs	r0, r3
   1f302:	46bd      	mov	sp, r7
   1f304:	b005      	add	sp, #20
   1f306:	bd90      	pop	{r4, r7, pc}
   1f308:	200040f7 	.word	0x200040f7
   1f30c:	200040fc 	.word	0x200040fc
   1f310:	20004100 	.word	0x20004100
   1f314:	00031fa9 	.word	0x00031fa9
   1f318:	0001ec21 	.word	0x0001ec21
   1f31c:	200040b4 	.word	0x200040b4
   1f320:	000273f9 	.word	0x000273f9
   1f324:	0001eca5 	.word	0x0001eca5

0001f328 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   1f328:	b590      	push	{r4, r7, lr}
   1f32a:	b085      	sub	sp, #20
   1f32c:	af00      	add	r7, sp, #0
   1f32e:	6078      	str	r0, [r7, #4]
   1f330:	000a      	movs	r2, r1
   1f332:	1cbb      	adds	r3, r7, #2
   1f334:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   1f336:	230a      	movs	r3, #10
   1f338:	18fb      	adds	r3, r7, r3
   1f33a:	22ff      	movs	r2, #255	; 0xff
   1f33c:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f33e:	4b1c      	ldr	r3, [pc, #112]	; (1f3b0 <sd_mmc_spi_start_read_blocks+0x88>)
   1f340:	2200      	movs	r2, #0
   1f342:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1f344:	2300      	movs	r3, #0
   1f346:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1f348:	e025      	b.n	1f396 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   1f34a:	4b1a      	ldr	r3, [pc, #104]	; (1f3b4 <sd_mmc_spi_start_read_blocks+0x8c>)
   1f34c:	4798      	blx	r3
   1f34e:	0003      	movs	r3, r0
   1f350:	001a      	movs	r2, r3
   1f352:	2301      	movs	r3, #1
   1f354:	4053      	eors	r3, r2
   1f356:	b2db      	uxtb	r3, r3
   1f358:	2b00      	cmp	r3, #0
   1f35a:	d001      	beq.n	1f360 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   1f35c:	2300      	movs	r3, #0
   1f35e:	e022      	b.n	1f3a6 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   1f360:	687a      	ldr	r2, [r7, #4]
   1f362:	68fb      	ldr	r3, [r7, #12]
   1f364:	18d1      	adds	r1, r2, r3
   1f366:	4b14      	ldr	r3, [pc, #80]	; (1f3b8 <sd_mmc_spi_start_read_blocks+0x90>)
   1f368:	881a      	ldrh	r2, [r3, #0]
   1f36a:	230a      	movs	r3, #10
   1f36c:	18fb      	adds	r3, r7, r3
   1f36e:	881b      	ldrh	r3, [r3, #0]
   1f370:	4812      	ldr	r0, [pc, #72]	; (1f3bc <sd_mmc_spi_start_read_blocks+0x94>)
   1f372:	4c13      	ldr	r4, [pc, #76]	; (1f3c0 <sd_mmc_spi_start_read_blocks+0x98>)
   1f374:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   1f376:	4b10      	ldr	r3, [pc, #64]	; (1f3b8 <sd_mmc_spi_start_read_blocks+0x90>)
   1f378:	881b      	ldrh	r3, [r3, #0]
   1f37a:	001a      	movs	r2, r3
   1f37c:	68fb      	ldr	r3, [r7, #12]
   1f37e:	189b      	adds	r3, r3, r2
   1f380:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1f382:	4b0d      	ldr	r3, [pc, #52]	; (1f3b8 <sd_mmc_spi_start_read_blocks+0x90>)
   1f384:	881b      	ldrh	r3, [r3, #0]
   1f386:	001a      	movs	r2, r3
   1f388:	4b0e      	ldr	r3, [pc, #56]	; (1f3c4 <sd_mmc_spi_start_read_blocks+0x9c>)
   1f38a:	681b      	ldr	r3, [r3, #0]
   1f38c:	18d2      	adds	r2, r2, r3
   1f38e:	4b0d      	ldr	r3, [pc, #52]	; (1f3c4 <sd_mmc_spi_start_read_blocks+0x9c>)
   1f390:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   1f392:	4b0d      	ldr	r3, [pc, #52]	; (1f3c8 <sd_mmc_spi_start_read_blocks+0xa0>)
   1f394:	4798      	blx	r3
	while (nb_block--) {
   1f396:	1cbb      	adds	r3, r7, #2
   1f398:	881b      	ldrh	r3, [r3, #0]
   1f39a:	1cba      	adds	r2, r7, #2
   1f39c:	1e59      	subs	r1, r3, #1
   1f39e:	8011      	strh	r1, [r2, #0]
   1f3a0:	2b00      	cmp	r3, #0
   1f3a2:	d1d2      	bne.n	1f34a <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   1f3a4:	2301      	movs	r3, #1
}
   1f3a6:	0018      	movs	r0, r3
   1f3a8:	46bd      	mov	sp, r7
   1f3aa:	b005      	add	sp, #20
   1f3ac:	bd90      	pop	{r4, r7, pc}
   1f3ae:	46c0      	nop			; (mov r8, r8)
   1f3b0:	200040f7 	.word	0x200040f7
   1f3b4:	0001ec21 	.word	0x0001ec21
   1f3b8:	20004100 	.word	0x20004100
   1f3bc:	200040b4 	.word	0x200040b4
   1f3c0:	000273f9 	.word	0x000273f9
   1f3c4:	200040fc 	.word	0x200040fc
   1f3c8:	0001eca5 	.word	0x0001eca5

0001f3cc <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   1f3cc:	b580      	push	{r7, lr}
   1f3ce:	af00      	add	r7, sp, #0
	return true;
   1f3d0:	2301      	movs	r3, #1
}
   1f3d2:	0018      	movs	r0, r3
   1f3d4:	46bd      	mov	sp, r7
   1f3d6:	bd80      	pop	{r7, pc}

0001f3d8 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   1f3d8:	b580      	push	{r7, lr}
   1f3da:	b084      	sub	sp, #16
   1f3dc:	af00      	add	r7, sp, #0
   1f3de:	6078      	str	r0, [r7, #4]
   1f3e0:	000a      	movs	r2, r1
   1f3e2:	1cbb      	adds	r3, r7, #2
   1f3e4:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f3e6:	4b24      	ldr	r3, [pc, #144]	; (1f478 <sd_mmc_spi_start_write_blocks+0xa0>)
   1f3e8:	2200      	movs	r2, #0
   1f3ea:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1f3ec:	2300      	movs	r3, #0
   1f3ee:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1f3f0:	e035      	b.n	1f45e <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   1f3f2:	4b22      	ldr	r3, [pc, #136]	; (1f47c <sd_mmc_spi_start_write_blocks+0xa4>)
   1f3f4:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   1f3f6:	687a      	ldr	r2, [r7, #4]
   1f3f8:	68fb      	ldr	r3, [r7, #12]
   1f3fa:	18d1      	adds	r1, r2, r3
   1f3fc:	4b20      	ldr	r3, [pc, #128]	; (1f480 <sd_mmc_spi_start_write_blocks+0xa8>)
   1f3fe:	881a      	ldrh	r2, [r3, #0]
   1f400:	4b20      	ldr	r3, [pc, #128]	; (1f484 <sd_mmc_spi_start_write_blocks+0xac>)
   1f402:	0018      	movs	r0, r3
   1f404:	4b20      	ldr	r3, [pc, #128]	; (1f488 <sd_mmc_spi_start_write_blocks+0xb0>)
   1f406:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   1f408:	4b1d      	ldr	r3, [pc, #116]	; (1f480 <sd_mmc_spi_start_write_blocks+0xa8>)
   1f40a:	881b      	ldrh	r3, [r3, #0]
   1f40c:	001a      	movs	r2, r3
   1f40e:	68fb      	ldr	r3, [r7, #12]
   1f410:	189b      	adds	r3, r3, r2
   1f412:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1f414:	4b1a      	ldr	r3, [pc, #104]	; (1f480 <sd_mmc_spi_start_write_blocks+0xa8>)
   1f416:	881b      	ldrh	r3, [r3, #0]
   1f418:	001a      	movs	r2, r3
   1f41a:	4b1c      	ldr	r3, [pc, #112]	; (1f48c <sd_mmc_spi_start_write_blocks+0xb4>)
   1f41c:	681b      	ldr	r3, [r3, #0]
   1f41e:	18d2      	adds	r2, r2, r3
   1f420:	4b1a      	ldr	r3, [pc, #104]	; (1f48c <sd_mmc_spi_start_write_blocks+0xb4>)
   1f422:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   1f424:	4b1a      	ldr	r3, [pc, #104]	; (1f490 <sd_mmc_spi_start_write_blocks+0xb8>)
   1f426:	4798      	blx	r3
   1f428:	0003      	movs	r3, r0
   1f42a:	001a      	movs	r2, r3
   1f42c:	2301      	movs	r3, #1
   1f42e:	4053      	eors	r3, r2
   1f430:	b2db      	uxtb	r3, r3
   1f432:	2b00      	cmp	r3, #0
   1f434:	d001      	beq.n	1f43a <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   1f436:	2300      	movs	r3, #0
   1f438:	e019      	b.n	1f46e <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   1f43a:	1cbb      	adds	r3, r7, #2
   1f43c:	881b      	ldrh	r3, [r3, #0]
   1f43e:	2b00      	cmp	r3, #0
   1f440:	d00d      	beq.n	1f45e <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   1f442:	4b14      	ldr	r3, [pc, #80]	; (1f494 <sd_mmc_spi_start_write_blocks+0xbc>)
   1f444:	4798      	blx	r3
   1f446:	0003      	movs	r3, r0
   1f448:	001a      	movs	r2, r3
   1f44a:	2301      	movs	r3, #1
   1f44c:	4053      	eors	r3, r2
   1f44e:	b2db      	uxtb	r3, r3
   1f450:	2b00      	cmp	r3, #0
   1f452:	d004      	beq.n	1f45e <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1f454:	4b08      	ldr	r3, [pc, #32]	; (1f478 <sd_mmc_spi_start_write_blocks+0xa0>)
   1f456:	2205      	movs	r2, #5
   1f458:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   1f45a:	2300      	movs	r3, #0
   1f45c:	e007      	b.n	1f46e <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   1f45e:	1cbb      	adds	r3, r7, #2
   1f460:	881b      	ldrh	r3, [r3, #0]
   1f462:	1cba      	adds	r2, r7, #2
   1f464:	1e59      	subs	r1, r3, #1
   1f466:	8011      	strh	r1, [r2, #0]
   1f468:	2b00      	cmp	r3, #0
   1f46a:	d1c2      	bne.n	1f3f2 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   1f46c:	2301      	movs	r3, #1
}
   1f46e:	0018      	movs	r0, r3
   1f470:	46bd      	mov	sp, r7
   1f472:	b004      	add	sp, #16
   1f474:	bd80      	pop	{r7, pc}
   1f476:	46c0      	nop			; (mov r8, r8)
   1f478:	200040f7 	.word	0x200040f7
   1f47c:	0001ecd1 	.word	0x0001ecd1
   1f480:	20004100 	.word	0x20004100
   1f484:	200040b4 	.word	0x200040b4
   1f488:	0002761d 	.word	0x0002761d
   1f48c:	200040fc 	.word	0x200040fc
   1f490:	0001ed21 	.word	0x0001ed21
   1f494:	0001ebb5 	.word	0x0001ebb5

0001f498 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   1f498:	b580      	push	{r7, lr}
   1f49a:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   1f49c:	4b09      	ldr	r3, [pc, #36]	; (1f4c4 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   1f49e:	4798      	blx	r3
   1f4a0:	0003      	movs	r3, r0
   1f4a2:	001a      	movs	r2, r3
   1f4a4:	2301      	movs	r3, #1
   1f4a6:	4053      	eors	r3, r2
   1f4a8:	b2db      	uxtb	r3, r3
   1f4aa:	2b00      	cmp	r3, #0
   1f4ac:	d004      	beq.n	1f4b8 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1f4ae:	4b06      	ldr	r3, [pc, #24]	; (1f4c8 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   1f4b0:	2205      	movs	r2, #5
   1f4b2:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   1f4b4:	2300      	movs	r3, #0
   1f4b6:	e002      	b.n	1f4be <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   1f4b8:	4b04      	ldr	r3, [pc, #16]	; (1f4cc <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   1f4ba:	4798      	blx	r3
   1f4bc:	0003      	movs	r3, r0
}
   1f4be:	0018      	movs	r0, r3
   1f4c0:	46bd      	mov	sp, r7
   1f4c2:	bd80      	pop	{r7, pc}
   1f4c4:	0001ebb5 	.word	0x0001ebb5
   1f4c8:	200040f7 	.word	0x200040f7
   1f4cc:	0001edb5 	.word	0x0001edb5

0001f4d0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   1f4d0:	b580      	push	{r7, lr}
   1f4d2:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   1f4d4:	2000      	movs	r0, #0
   1f4d6:	4b0f      	ldr	r3, [pc, #60]	; (1f514 <delay_init+0x44>)
   1f4d8:	4798      	blx	r3
   1f4da:	0002      	movs	r2, r0
   1f4dc:	4b0e      	ldr	r3, [pc, #56]	; (1f518 <delay_init+0x48>)
   1f4de:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   1f4e0:	4b0d      	ldr	r3, [pc, #52]	; (1f518 <delay_init+0x48>)
   1f4e2:	6818      	ldr	r0, [r3, #0]
   1f4e4:	4b0d      	ldr	r3, [pc, #52]	; (1f51c <delay_init+0x4c>)
   1f4e6:	22fa      	movs	r2, #250	; 0xfa
   1f4e8:	0091      	lsls	r1, r2, #2
   1f4ea:	4798      	blx	r3
   1f4ec:	0003      	movs	r3, r0
   1f4ee:	001a      	movs	r2, r3
   1f4f0:	4b09      	ldr	r3, [pc, #36]	; (1f518 <delay_init+0x48>)
   1f4f2:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   1f4f4:	4b08      	ldr	r3, [pc, #32]	; (1f518 <delay_init+0x48>)
   1f4f6:	6818      	ldr	r0, [r3, #0]
   1f4f8:	4b08      	ldr	r3, [pc, #32]	; (1f51c <delay_init+0x4c>)
   1f4fa:	22fa      	movs	r2, #250	; 0xfa
   1f4fc:	0091      	lsls	r1, r2, #2
   1f4fe:	4798      	blx	r3
   1f500:	0003      	movs	r3, r0
   1f502:	001a      	movs	r2, r3
   1f504:	4b06      	ldr	r3, [pc, #24]	; (1f520 <delay_init+0x50>)
   1f506:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   1f508:	4b06      	ldr	r3, [pc, #24]	; (1f524 <delay_init+0x54>)
   1f50a:	2205      	movs	r2, #5
   1f50c:	601a      	str	r2, [r3, #0]
}
   1f50e:	46c0      	nop			; (mov r8, r8)
   1f510:	46bd      	mov	sp, r7
   1f512:	bd80      	pop	{r7, pc}
   1f514:	000291a1 	.word	0x000291a1
   1f518:	20000104 	.word	0x20000104
   1f51c:	00031e9d 	.word	0x00031e9d
   1f520:	20000108 	.word	0x20000108
   1f524:	e000e010 	.word	0xe000e010

0001f528 <system_pinmux_get_group_from_gpio_pin>:
{
   1f528:	b580      	push	{r7, lr}
   1f52a:	b084      	sub	sp, #16
   1f52c:	af00      	add	r7, sp, #0
   1f52e:	0002      	movs	r2, r0
   1f530:	1dfb      	adds	r3, r7, #7
   1f532:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1f534:	230f      	movs	r3, #15
   1f536:	18fb      	adds	r3, r7, r3
   1f538:	1dfa      	adds	r2, r7, #7
   1f53a:	7812      	ldrb	r2, [r2, #0]
   1f53c:	09d2      	lsrs	r2, r2, #7
   1f53e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1f540:	230e      	movs	r3, #14
   1f542:	18fb      	adds	r3, r7, r3
   1f544:	1dfa      	adds	r2, r7, #7
   1f546:	7812      	ldrb	r2, [r2, #0]
   1f548:	0952      	lsrs	r2, r2, #5
   1f54a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1f54c:	4b0d      	ldr	r3, [pc, #52]	; (1f584 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1f54e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1f550:	230f      	movs	r3, #15
   1f552:	18fb      	adds	r3, r7, r3
   1f554:	781b      	ldrb	r3, [r3, #0]
   1f556:	2b00      	cmp	r3, #0
   1f558:	d10f      	bne.n	1f57a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1f55a:	230f      	movs	r3, #15
   1f55c:	18fb      	adds	r3, r7, r3
   1f55e:	781b      	ldrb	r3, [r3, #0]
   1f560:	009b      	lsls	r3, r3, #2
   1f562:	2210      	movs	r2, #16
   1f564:	4694      	mov	ip, r2
   1f566:	44bc      	add	ip, r7
   1f568:	4463      	add	r3, ip
   1f56a:	3b08      	subs	r3, #8
   1f56c:	681a      	ldr	r2, [r3, #0]
   1f56e:	230e      	movs	r3, #14
   1f570:	18fb      	adds	r3, r7, r3
   1f572:	781b      	ldrb	r3, [r3, #0]
   1f574:	01db      	lsls	r3, r3, #7
   1f576:	18d3      	adds	r3, r2, r3
   1f578:	e000      	b.n	1f57c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1f57a:	2300      	movs	r3, #0
}
   1f57c:	0018      	movs	r0, r3
   1f57e:	46bd      	mov	sp, r7
   1f580:	b004      	add	sp, #16
   1f582:	bd80      	pop	{r7, pc}
   1f584:	41004400 	.word	0x41004400

0001f588 <system_interrupt_enable_global>:
{
   1f588:	b580      	push	{r7, lr}
   1f58a:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   1f58c:	4b04      	ldr	r3, [pc, #16]	; (1f5a0 <system_interrupt_enable_global+0x18>)
   1f58e:	2201      	movs	r2, #1
   1f590:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   1f592:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1f596:	b662      	cpsie	i
}
   1f598:	46c0      	nop			; (mov r8, r8)
   1f59a:	46bd      	mov	sp, r7
   1f59c:	bd80      	pop	{r7, pc}
   1f59e:	46c0      	nop			; (mov r8, r8)
   1f5a0:	2000010e 	.word	0x2000010e

0001f5a4 <port_get_group_from_gpio_pin>:
{
   1f5a4:	b580      	push	{r7, lr}
   1f5a6:	b082      	sub	sp, #8
   1f5a8:	af00      	add	r7, sp, #0
   1f5aa:	0002      	movs	r2, r0
   1f5ac:	1dfb      	adds	r3, r7, #7
   1f5ae:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1f5b0:	1dfb      	adds	r3, r7, #7
   1f5b2:	781b      	ldrb	r3, [r3, #0]
   1f5b4:	0018      	movs	r0, r3
   1f5b6:	4b03      	ldr	r3, [pc, #12]	; (1f5c4 <port_get_group_from_gpio_pin+0x20>)
   1f5b8:	4798      	blx	r3
   1f5ba:	0003      	movs	r3, r0
}
   1f5bc:	0018      	movs	r0, r3
   1f5be:	46bd      	mov	sp, r7
   1f5c0:	b002      	add	sp, #8
   1f5c2:	bd80      	pop	{r7, pc}
   1f5c4:	0001f529 	.word	0x0001f529

0001f5c8 <port_get_config_defaults>:
{
   1f5c8:	b580      	push	{r7, lr}
   1f5ca:	b082      	sub	sp, #8
   1f5cc:	af00      	add	r7, sp, #0
   1f5ce:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1f5d0:	687b      	ldr	r3, [r7, #4]
   1f5d2:	2200      	movs	r2, #0
   1f5d4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1f5d6:	687b      	ldr	r3, [r7, #4]
   1f5d8:	2201      	movs	r2, #1
   1f5da:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1f5dc:	687b      	ldr	r3, [r7, #4]
   1f5de:	2200      	movs	r2, #0
   1f5e0:	709a      	strb	r2, [r3, #2]
}
   1f5e2:	46c0      	nop			; (mov r8, r8)
   1f5e4:	46bd      	mov	sp, r7
   1f5e6:	b002      	add	sp, #8
   1f5e8:	bd80      	pop	{r7, pc}
	...

0001f5ec <port_pin_set_output_level>:
{
   1f5ec:	b580      	push	{r7, lr}
   1f5ee:	b084      	sub	sp, #16
   1f5f0:	af00      	add	r7, sp, #0
   1f5f2:	0002      	movs	r2, r0
   1f5f4:	1dfb      	adds	r3, r7, #7
   1f5f6:	701a      	strb	r2, [r3, #0]
   1f5f8:	1dbb      	adds	r3, r7, #6
   1f5fa:	1c0a      	adds	r2, r1, #0
   1f5fc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1f5fe:	1dfb      	adds	r3, r7, #7
   1f600:	781b      	ldrb	r3, [r3, #0]
   1f602:	0018      	movs	r0, r3
   1f604:	4b0d      	ldr	r3, [pc, #52]	; (1f63c <port_pin_set_output_level+0x50>)
   1f606:	4798      	blx	r3
   1f608:	0003      	movs	r3, r0
   1f60a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1f60c:	1dfb      	adds	r3, r7, #7
   1f60e:	781b      	ldrb	r3, [r3, #0]
   1f610:	221f      	movs	r2, #31
   1f612:	4013      	ands	r3, r2
   1f614:	2201      	movs	r2, #1
   1f616:	409a      	lsls	r2, r3
   1f618:	0013      	movs	r3, r2
   1f61a:	60bb      	str	r3, [r7, #8]
	if (level) {
   1f61c:	1dbb      	adds	r3, r7, #6
   1f61e:	781b      	ldrb	r3, [r3, #0]
   1f620:	2b00      	cmp	r3, #0
   1f622:	d003      	beq.n	1f62c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1f624:	68fb      	ldr	r3, [r7, #12]
   1f626:	68ba      	ldr	r2, [r7, #8]
   1f628:	619a      	str	r2, [r3, #24]
}
   1f62a:	e002      	b.n	1f632 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1f62c:	68fb      	ldr	r3, [r7, #12]
   1f62e:	68ba      	ldr	r2, [r7, #8]
   1f630:	615a      	str	r2, [r3, #20]
}
   1f632:	46c0      	nop			; (mov r8, r8)
   1f634:	46bd      	mov	sp, r7
   1f636:	b004      	add	sp, #16
   1f638:	bd80      	pop	{r7, pc}
   1f63a:	46c0      	nop			; (mov r8, r8)
   1f63c:	0001f5a5 	.word	0x0001f5a5

0001f640 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   1f640:	b580      	push	{r7, lr}
   1f642:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   1f644:	4b04      	ldr	r3, [pc, #16]	; (1f658 <chip_isr+0x18>)
   1f646:	681b      	ldr	r3, [r3, #0]
   1f648:	2b00      	cmp	r3, #0
   1f64a:	d002      	beq.n	1f652 <chip_isr+0x12>
		gpfIsr();
   1f64c:	4b02      	ldr	r3, [pc, #8]	; (1f658 <chip_isr+0x18>)
   1f64e:	681b      	ldr	r3, [r3, #0]
   1f650:	4798      	blx	r3
	}
}
   1f652:	46c0      	nop			; (mov r8, r8)
   1f654:	46bd      	mov	sp, r7
   1f656:	bd80      	pop	{r7, pc}
   1f658:	20004104 	.word	0x20004104

0001f65c <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   1f65c:	b580      	push	{r7, lr}
   1f65e:	b082      	sub	sp, #8
   1f660:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   1f662:	1d3b      	adds	r3, r7, #4
   1f664:	0018      	movs	r0, r3
   1f666:	4b10      	ldr	r3, [pc, #64]	; (1f6a8 <init_chip_pins+0x4c>)
   1f668:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1f66a:	1d3b      	adds	r3, r7, #4
   1f66c:	2201      	movs	r2, #1
   1f66e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   1f670:	1d3b      	adds	r3, r7, #4
   1f672:	0019      	movs	r1, r3
   1f674:	201b      	movs	r0, #27
   1f676:	4b0d      	ldr	r3, [pc, #52]	; (1f6ac <init_chip_pins+0x50>)
   1f678:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   1f67a:	1d3b      	adds	r3, r7, #4
   1f67c:	0019      	movs	r1, r3
   1f67e:	201c      	movs	r0, #28
   1f680:	4b0a      	ldr	r3, [pc, #40]	; (1f6ac <init_chip_pins+0x50>)
   1f682:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   1f684:	1d3b      	adds	r3, r7, #4
   1f686:	0019      	movs	r1, r3
   1f688:	2028      	movs	r0, #40	; 0x28
   1f68a:	4b08      	ldr	r3, [pc, #32]	; (1f6ac <init_chip_pins+0x50>)
   1f68c:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1f68e:	2100      	movs	r1, #0
   1f690:	201c      	movs	r0, #28
   1f692:	4b07      	ldr	r3, [pc, #28]	; (1f6b0 <init_chip_pins+0x54>)
   1f694:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1f696:	2100      	movs	r1, #0
   1f698:	201b      	movs	r0, #27
   1f69a:	4b05      	ldr	r3, [pc, #20]	; (1f6b0 <init_chip_pins+0x54>)
   1f69c:	4798      	blx	r3
}
   1f69e:	46c0      	nop			; (mov r8, r8)
   1f6a0:	46bd      	mov	sp, r7
   1f6a2:	b002      	add	sp, #8
   1f6a4:	bd80      	pop	{r7, pc}
   1f6a6:	46c0      	nop			; (mov r8, r8)
   1f6a8:	0001f5c9 	.word	0x0001f5c9
   1f6ac:	00025de9 	.word	0x00025de9
   1f6b0:	0001f5ed 	.word	0x0001f5ed

0001f6b4 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   1f6b4:	b580      	push	{r7, lr}
   1f6b6:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   1f6b8:	4b0b      	ldr	r3, [pc, #44]	; (1f6e8 <nm_bsp_init+0x34>)
   1f6ba:	2200      	movs	r2, #0
   1f6bc:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   1f6be:	4b0b      	ldr	r3, [pc, #44]	; (1f6ec <nm_bsp_init+0x38>)
   1f6c0:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   1f6c2:	4b0b      	ldr	r3, [pc, #44]	; (1f6f0 <nm_bsp_init+0x3c>)
   1f6c4:	681b      	ldr	r3, [r3, #0]
   1f6c6:	2201      	movs	r2, #1
   1f6c8:	4013      	ands	r3, r2
   1f6ca:	d004      	beq.n	1f6d6 <nm_bsp_init+0x22>
   1f6cc:	4b08      	ldr	r3, [pc, #32]	; (1f6f0 <nm_bsp_init+0x3c>)
   1f6ce:	681b      	ldr	r3, [r3, #0]
   1f6d0:	2202      	movs	r2, #2
   1f6d2:	4013      	ands	r3, r2
   1f6d4:	d101      	bne.n	1f6da <nm_bsp_init+0x26>
	    delay_init();
   1f6d6:	4b07      	ldr	r3, [pc, #28]	; (1f6f4 <nm_bsp_init+0x40>)
   1f6d8:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   1f6da:	4b07      	ldr	r3, [pc, #28]	; (1f6f8 <nm_bsp_init+0x44>)
   1f6dc:	4798      	blx	r3

	return M2M_SUCCESS;
   1f6de:	2300      	movs	r3, #0
}
   1f6e0:	0018      	movs	r0, r3
   1f6e2:	46bd      	mov	sp, r7
   1f6e4:	bd80      	pop	{r7, pc}
   1f6e6:	46c0      	nop			; (mov r8, r8)
   1f6e8:	20004104 	.word	0x20004104
   1f6ec:	0001f65d 	.word	0x0001f65d
   1f6f0:	e000e010 	.word	0xe000e010
   1f6f4:	0001f4d1 	.word	0x0001f4d1
   1f6f8:	0001f589 	.word	0x0001f589

0001f6fc <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   1f6fc:	b580      	push	{r7, lr}
   1f6fe:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1f700:	2100      	movs	r1, #0
   1f702:	201c      	movs	r0, #28
   1f704:	4b0b      	ldr	r3, [pc, #44]	; (1f734 <nm_bsp_reset+0x38>)
   1f706:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1f708:	2100      	movs	r1, #0
   1f70a:	201b      	movs	r0, #27
   1f70c:	4b09      	ldr	r3, [pc, #36]	; (1f734 <nm_bsp_reset+0x38>)
   1f70e:	4798      	blx	r3
	nm_bsp_sleep(1);
   1f710:	2001      	movs	r0, #1
   1f712:	4b09      	ldr	r3, [pc, #36]	; (1f738 <nm_bsp_reset+0x3c>)
   1f714:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   1f716:	2101      	movs	r1, #1
   1f718:	201c      	movs	r0, #28
   1f71a:	4b06      	ldr	r3, [pc, #24]	; (1f734 <nm_bsp_reset+0x38>)
   1f71c:	4798      	blx	r3
	nm_bsp_sleep(10);
   1f71e:	200a      	movs	r0, #10
   1f720:	4b05      	ldr	r3, [pc, #20]	; (1f738 <nm_bsp_reset+0x3c>)
   1f722:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   1f724:	2101      	movs	r1, #1
   1f726:	201b      	movs	r0, #27
   1f728:	4b02      	ldr	r3, [pc, #8]	; (1f734 <nm_bsp_reset+0x38>)
   1f72a:	4798      	blx	r3
}
   1f72c:	46c0      	nop			; (mov r8, r8)
   1f72e:	46bd      	mov	sp, r7
   1f730:	bd80      	pop	{r7, pc}
   1f732:	46c0      	nop			; (mov r8, r8)
   1f734:	0001f5ed 	.word	0x0001f5ed
   1f738:	0001f73d 	.word	0x0001f73d

0001f73c <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   1f73c:	b580      	push	{r7, lr}
   1f73e:	b082      	sub	sp, #8
   1f740:	af00      	add	r7, sp, #0
   1f742:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   1f744:	687b      	ldr	r3, [r7, #4]
   1f746:	0018      	movs	r0, r3
   1f748:	4b02      	ldr	r3, [pc, #8]	; (1f754 <nm_bsp_sleep+0x18>)
   1f74a:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   1f74c:	46c0      	nop			; (mov r8, r8)
   1f74e:	46bd      	mov	sp, r7
   1f750:	b002      	add	sp, #8
   1f752:	bd80      	pop	{r7, pc}
   1f754:	0001b551 	.word	0x0001b551

0001f758 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   1f758:	b580      	push	{r7, lr}
   1f75a:	b086      	sub	sp, #24
   1f75c:	af00      	add	r7, sp, #0
   1f75e:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   1f760:	4b15      	ldr	r3, [pc, #84]	; (1f7b8 <nm_bsp_register_isr+0x60>)
   1f762:	687a      	ldr	r2, [r7, #4]
   1f764:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   1f766:	230c      	movs	r3, #12
   1f768:	18fb      	adds	r3, r7, r3
   1f76a:	0018      	movs	r0, r3
   1f76c:	4b13      	ldr	r3, [pc, #76]	; (1f7bc <nm_bsp_register_isr+0x64>)
   1f76e:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   1f770:	230c      	movs	r3, #12
   1f772:	18fb      	adds	r3, r7, r3
   1f774:	2229      	movs	r2, #41	; 0x29
   1f776:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   1f778:	230c      	movs	r3, #12
   1f77a:	18fb      	adds	r3, r7, r3
   1f77c:	2200      	movs	r2, #0
   1f77e:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1f780:	230c      	movs	r3, #12
   1f782:	18fb      	adds	r3, r7, r3
   1f784:	2201      	movs	r2, #1
   1f786:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1f788:	230c      	movs	r3, #12
   1f78a:	18fb      	adds	r3, r7, r3
   1f78c:	2202      	movs	r2, #2
   1f78e:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   1f790:	230c      	movs	r3, #12
   1f792:	18fb      	adds	r3, r7, r3
   1f794:	0019      	movs	r1, r3
   1f796:	2009      	movs	r0, #9
   1f798:	4b09      	ldr	r3, [pc, #36]	; (1f7c0 <nm_bsp_register_isr+0x68>)
   1f79a:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   1f79c:	4b09      	ldr	r3, [pc, #36]	; (1f7c4 <nm_bsp_register_isr+0x6c>)
   1f79e:	2200      	movs	r2, #0
   1f7a0:	2109      	movs	r1, #9
   1f7a2:	0018      	movs	r0, r3
   1f7a4:	4b08      	ldr	r3, [pc, #32]	; (1f7c8 <nm_bsp_register_isr+0x70>)
   1f7a6:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1f7a8:	2100      	movs	r1, #0
   1f7aa:	2009      	movs	r0, #9
   1f7ac:	4b07      	ldr	r3, [pc, #28]	; (1f7cc <nm_bsp_register_isr+0x74>)
   1f7ae:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   1f7b0:	46c0      	nop			; (mov r8, r8)
   1f7b2:	46bd      	mov	sp, r7
   1f7b4:	b006      	add	sp, #24
   1f7b6:	bd80      	pop	{r7, pc}
   1f7b8:	20004104 	.word	0x20004104
   1f7bc:	00025c91 	.word	0x00025c91
   1f7c0:	00025cc5 	.word	0x00025cc5
   1f7c4:	0001f641 	.word	0x0001f641
   1f7c8:	00025891 	.word	0x00025891
   1f7cc:	000258f5 	.word	0x000258f5

0001f7d0 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   1f7d0:	b580      	push	{r7, lr}
   1f7d2:	b082      	sub	sp, #8
   1f7d4:	af00      	add	r7, sp, #0
   1f7d6:	0002      	movs	r2, r0
   1f7d8:	1dfb      	adds	r3, r7, #7
   1f7da:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   1f7dc:	1dfb      	adds	r3, r7, #7
   1f7de:	781b      	ldrb	r3, [r3, #0]
   1f7e0:	2b00      	cmp	r3, #0
   1f7e2:	d004      	beq.n	1f7ee <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1f7e4:	2100      	movs	r1, #0
   1f7e6:	2009      	movs	r0, #9
   1f7e8:	4b05      	ldr	r3, [pc, #20]	; (1f800 <nm_bsp_interrupt_ctrl+0x30>)
   1f7ea:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   1f7ec:	e003      	b.n	1f7f6 <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   1f7ee:	2100      	movs	r1, #0
   1f7f0:	2009      	movs	r0, #9
   1f7f2:	4b04      	ldr	r3, [pc, #16]	; (1f804 <nm_bsp_interrupt_ctrl+0x34>)
   1f7f4:	4798      	blx	r3
}
   1f7f6:	46c0      	nop			; (mov r8, r8)
   1f7f8:	46bd      	mov	sp, r7
   1f7fa:	b002      	add	sp, #8
   1f7fc:	bd80      	pop	{r7, pc}
   1f7fe:	46c0      	nop			; (mov r8, r8)
   1f800:	000258f5 	.word	0x000258f5
   1f804:	0002593d 	.word	0x0002593d

0001f808 <system_pinmux_get_group_from_gpio_pin>:
{
   1f808:	b580      	push	{r7, lr}
   1f80a:	b084      	sub	sp, #16
   1f80c:	af00      	add	r7, sp, #0
   1f80e:	0002      	movs	r2, r0
   1f810:	1dfb      	adds	r3, r7, #7
   1f812:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1f814:	230f      	movs	r3, #15
   1f816:	18fb      	adds	r3, r7, r3
   1f818:	1dfa      	adds	r2, r7, #7
   1f81a:	7812      	ldrb	r2, [r2, #0]
   1f81c:	09d2      	lsrs	r2, r2, #7
   1f81e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1f820:	230e      	movs	r3, #14
   1f822:	18fb      	adds	r3, r7, r3
   1f824:	1dfa      	adds	r2, r7, #7
   1f826:	7812      	ldrb	r2, [r2, #0]
   1f828:	0952      	lsrs	r2, r2, #5
   1f82a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1f82c:	4b0d      	ldr	r3, [pc, #52]	; (1f864 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1f82e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1f830:	230f      	movs	r3, #15
   1f832:	18fb      	adds	r3, r7, r3
   1f834:	781b      	ldrb	r3, [r3, #0]
   1f836:	2b00      	cmp	r3, #0
   1f838:	d10f      	bne.n	1f85a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1f83a:	230f      	movs	r3, #15
   1f83c:	18fb      	adds	r3, r7, r3
   1f83e:	781b      	ldrb	r3, [r3, #0]
   1f840:	009b      	lsls	r3, r3, #2
   1f842:	2210      	movs	r2, #16
   1f844:	4694      	mov	ip, r2
   1f846:	44bc      	add	ip, r7
   1f848:	4463      	add	r3, ip
   1f84a:	3b08      	subs	r3, #8
   1f84c:	681a      	ldr	r2, [r3, #0]
   1f84e:	230e      	movs	r3, #14
   1f850:	18fb      	adds	r3, r7, r3
   1f852:	781b      	ldrb	r3, [r3, #0]
   1f854:	01db      	lsls	r3, r3, #7
   1f856:	18d3      	adds	r3, r2, r3
   1f858:	e000      	b.n	1f85c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1f85a:	2300      	movs	r3, #0
}
   1f85c:	0018      	movs	r0, r3
   1f85e:	46bd      	mov	sp, r7
   1f860:	b004      	add	sp, #16
   1f862:	bd80      	pop	{r7, pc}
   1f864:	41004400 	.word	0x41004400

0001f868 <system_interrupt_enable>:
{
   1f868:	b580      	push	{r7, lr}
   1f86a:	b082      	sub	sp, #8
   1f86c:	af00      	add	r7, sp, #0
   1f86e:	0002      	movs	r2, r0
   1f870:	1dfb      	adds	r3, r7, #7
   1f872:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1f874:	4b06      	ldr	r3, [pc, #24]	; (1f890 <system_interrupt_enable+0x28>)
   1f876:	1dfa      	adds	r2, r7, #7
   1f878:	7812      	ldrb	r2, [r2, #0]
   1f87a:	0011      	movs	r1, r2
   1f87c:	221f      	movs	r2, #31
   1f87e:	400a      	ands	r2, r1
   1f880:	2101      	movs	r1, #1
   1f882:	4091      	lsls	r1, r2
   1f884:	000a      	movs	r2, r1
   1f886:	601a      	str	r2, [r3, #0]
}
   1f888:	46c0      	nop			; (mov r8, r8)
   1f88a:	46bd      	mov	sp, r7
   1f88c:	b002      	add	sp, #8
   1f88e:	bd80      	pop	{r7, pc}
   1f890:	e000e100 	.word	0xe000e100

0001f894 <system_interrupt_disable>:
{
   1f894:	b580      	push	{r7, lr}
   1f896:	b082      	sub	sp, #8
   1f898:	af00      	add	r7, sp, #0
   1f89a:	0002      	movs	r2, r0
   1f89c:	1dfb      	adds	r3, r7, #7
   1f89e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1f8a0:	4a07      	ldr	r2, [pc, #28]	; (1f8c0 <system_interrupt_disable+0x2c>)
   1f8a2:	1dfb      	adds	r3, r7, #7
   1f8a4:	781b      	ldrb	r3, [r3, #0]
   1f8a6:	0019      	movs	r1, r3
   1f8a8:	231f      	movs	r3, #31
   1f8aa:	400b      	ands	r3, r1
   1f8ac:	2101      	movs	r1, #1
   1f8ae:	4099      	lsls	r1, r3
   1f8b0:	000b      	movs	r3, r1
   1f8b2:	0019      	movs	r1, r3
   1f8b4:	2380      	movs	r3, #128	; 0x80
   1f8b6:	50d1      	str	r1, [r2, r3]
}
   1f8b8:	46c0      	nop			; (mov r8, r8)
   1f8ba:	46bd      	mov	sp, r7
   1f8bc:	b002      	add	sp, #8
   1f8be:	bd80      	pop	{r7, pc}
   1f8c0:	e000e100 	.word	0xe000e100

0001f8c4 <port_get_group_from_gpio_pin>:
{
   1f8c4:	b580      	push	{r7, lr}
   1f8c6:	b082      	sub	sp, #8
   1f8c8:	af00      	add	r7, sp, #0
   1f8ca:	0002      	movs	r2, r0
   1f8cc:	1dfb      	adds	r3, r7, #7
   1f8ce:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1f8d0:	1dfb      	adds	r3, r7, #7
   1f8d2:	781b      	ldrb	r3, [r3, #0]
   1f8d4:	0018      	movs	r0, r3
   1f8d6:	4b03      	ldr	r3, [pc, #12]	; (1f8e4 <port_get_group_from_gpio_pin+0x20>)
   1f8d8:	4798      	blx	r3
   1f8da:	0003      	movs	r3, r0
}
   1f8dc:	0018      	movs	r0, r3
   1f8de:	46bd      	mov	sp, r7
   1f8e0:	b002      	add	sp, #8
   1f8e2:	bd80      	pop	{r7, pc}
   1f8e4:	0001f809 	.word	0x0001f809

0001f8e8 <port_get_config_defaults>:
{
   1f8e8:	b580      	push	{r7, lr}
   1f8ea:	b082      	sub	sp, #8
   1f8ec:	af00      	add	r7, sp, #0
   1f8ee:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1f8f0:	687b      	ldr	r3, [r7, #4]
   1f8f2:	2200      	movs	r2, #0
   1f8f4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1f8f6:	687b      	ldr	r3, [r7, #4]
   1f8f8:	2201      	movs	r2, #1
   1f8fa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1f8fc:	687b      	ldr	r3, [r7, #4]
   1f8fe:	2200      	movs	r2, #0
   1f900:	709a      	strb	r2, [r3, #2]
}
   1f902:	46c0      	nop			; (mov r8, r8)
   1f904:	46bd      	mov	sp, r7
   1f906:	b002      	add	sp, #8
   1f908:	bd80      	pop	{r7, pc}
	...

0001f90c <port_pin_set_output_level>:
{
   1f90c:	b580      	push	{r7, lr}
   1f90e:	b084      	sub	sp, #16
   1f910:	af00      	add	r7, sp, #0
   1f912:	0002      	movs	r2, r0
   1f914:	1dfb      	adds	r3, r7, #7
   1f916:	701a      	strb	r2, [r3, #0]
   1f918:	1dbb      	adds	r3, r7, #6
   1f91a:	1c0a      	adds	r2, r1, #0
   1f91c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1f91e:	1dfb      	adds	r3, r7, #7
   1f920:	781b      	ldrb	r3, [r3, #0]
   1f922:	0018      	movs	r0, r3
   1f924:	4b0d      	ldr	r3, [pc, #52]	; (1f95c <port_pin_set_output_level+0x50>)
   1f926:	4798      	blx	r3
   1f928:	0003      	movs	r3, r0
   1f92a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1f92c:	1dfb      	adds	r3, r7, #7
   1f92e:	781b      	ldrb	r3, [r3, #0]
   1f930:	221f      	movs	r2, #31
   1f932:	4013      	ands	r3, r2
   1f934:	2201      	movs	r2, #1
   1f936:	409a      	lsls	r2, r3
   1f938:	0013      	movs	r3, r2
   1f93a:	60bb      	str	r3, [r7, #8]
	if (level) {
   1f93c:	1dbb      	adds	r3, r7, #6
   1f93e:	781b      	ldrb	r3, [r3, #0]
   1f940:	2b00      	cmp	r3, #0
   1f942:	d003      	beq.n	1f94c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1f944:	68fb      	ldr	r3, [r7, #12]
   1f946:	68ba      	ldr	r2, [r7, #8]
   1f948:	619a      	str	r2, [r3, #24]
}
   1f94a:	e002      	b.n	1f952 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1f94c:	68fb      	ldr	r3, [r7, #12]
   1f94e:	68ba      	ldr	r2, [r7, #8]
   1f950:	615a      	str	r2, [r3, #20]
}
   1f952:	46c0      	nop			; (mov r8, r8)
   1f954:	46bd      	mov	sp, r7
   1f956:	b004      	add	sp, #16
   1f958:	bd80      	pop	{r7, pc}
   1f95a:	46c0      	nop			; (mov r8, r8)
   1f95c:	0001f8c5 	.word	0x0001f8c5

0001f960 <spi_is_syncing>:
{
   1f960:	b580      	push	{r7, lr}
   1f962:	b084      	sub	sp, #16
   1f964:	af00      	add	r7, sp, #0
   1f966:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1f968:	687b      	ldr	r3, [r7, #4]
   1f96a:	681b      	ldr	r3, [r3, #0]
   1f96c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   1f96e:	68fb      	ldr	r3, [r7, #12]
   1f970:	69db      	ldr	r3, [r3, #28]
   1f972:	1e5a      	subs	r2, r3, #1
   1f974:	4193      	sbcs	r3, r2
   1f976:	b2db      	uxtb	r3, r3
}
   1f978:	0018      	movs	r0, r3
   1f97a:	46bd      	mov	sp, r7
   1f97c:	b004      	add	sp, #16
   1f97e:	bd80      	pop	{r7, pc}

0001f980 <spi_get_config_defaults>:
{
   1f980:	b580      	push	{r7, lr}
   1f982:	b082      	sub	sp, #8
   1f984:	af00      	add	r7, sp, #0
   1f986:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   1f988:	687b      	ldr	r3, [r7, #4]
   1f98a:	2201      	movs	r2, #1
   1f98c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1f98e:	687b      	ldr	r3, [r7, #4]
   1f990:	2200      	movs	r2, #0
   1f992:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1f994:	687b      	ldr	r3, [r7, #4]
   1f996:	2200      	movs	r2, #0
   1f998:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1f99a:	687b      	ldr	r3, [r7, #4]
   1f99c:	22c0      	movs	r2, #192	; 0xc0
   1f99e:	0392      	lsls	r2, r2, #14
   1f9a0:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1f9a2:	687b      	ldr	r3, [r7, #4]
   1f9a4:	2200      	movs	r2, #0
   1f9a6:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1f9a8:	687b      	ldr	r3, [r7, #4]
   1f9aa:	2200      	movs	r2, #0
   1f9ac:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1f9ae:	687b      	ldr	r3, [r7, #4]
   1f9b0:	2201      	movs	r2, #1
   1f9b2:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   1f9b4:	687b      	ldr	r3, [r7, #4]
   1f9b6:	2201      	movs	r2, #1
   1f9b8:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   1f9ba:	687b      	ldr	r3, [r7, #4]
   1f9bc:	2200      	movs	r2, #0
   1f9be:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   1f9c0:	687b      	ldr	r3, [r7, #4]
   1f9c2:	2224      	movs	r2, #36	; 0x24
   1f9c4:	2100      	movs	r1, #0
   1f9c6:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1f9c8:	687b      	ldr	r3, [r7, #4]
   1f9ca:	3318      	adds	r3, #24
   1f9cc:	220c      	movs	r2, #12
   1f9ce:	2100      	movs	r1, #0
   1f9d0:	0018      	movs	r0, r3
   1f9d2:	4b0a      	ldr	r3, [pc, #40]	; (1f9fc <spi_get_config_defaults+0x7c>)
   1f9d4:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   1f9d6:	687b      	ldr	r3, [r7, #4]
   1f9d8:	4a09      	ldr	r2, [pc, #36]	; (1fa00 <spi_get_config_defaults+0x80>)
   1f9da:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1f9dc:	687b      	ldr	r3, [r7, #4]
   1f9de:	2200      	movs	r2, #0
   1f9e0:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1f9e2:	687b      	ldr	r3, [r7, #4]
   1f9e4:	2200      	movs	r2, #0
   1f9e6:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1f9e8:	687b      	ldr	r3, [r7, #4]
   1f9ea:	2200      	movs	r2, #0
   1f9ec:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1f9ee:	687b      	ldr	r3, [r7, #4]
   1f9f0:	2200      	movs	r2, #0
   1f9f2:	635a      	str	r2, [r3, #52]	; 0x34
};
   1f9f4:	46c0      	nop			; (mov r8, r8)
   1f9f6:	46bd      	mov	sp, r7
   1f9f8:	b002      	add	sp, #8
   1f9fa:	bd80      	pop	{r7, pc}
   1f9fc:	0003431b 	.word	0x0003431b
   1fa00:	000186a0 	.word	0x000186a0

0001fa04 <spi_slave_inst_get_config_defaults>:
{
   1fa04:	b580      	push	{r7, lr}
   1fa06:	b082      	sub	sp, #8
   1fa08:	af00      	add	r7, sp, #0
   1fa0a:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   1fa0c:	687b      	ldr	r3, [r7, #4]
   1fa0e:	220a      	movs	r2, #10
   1fa10:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1fa12:	687b      	ldr	r3, [r7, #4]
   1fa14:	2200      	movs	r2, #0
   1fa16:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1fa18:	687b      	ldr	r3, [r7, #4]
   1fa1a:	2200      	movs	r2, #0
   1fa1c:	709a      	strb	r2, [r3, #2]
}
   1fa1e:	46c0      	nop			; (mov r8, r8)
   1fa20:	46bd      	mov	sp, r7
   1fa22:	b002      	add	sp, #8
   1fa24:	bd80      	pop	{r7, pc}
	...

0001fa28 <spi_attach_slave>:
{
   1fa28:	b580      	push	{r7, lr}
   1fa2a:	b084      	sub	sp, #16
   1fa2c:	af00      	add	r7, sp, #0
   1fa2e:	6078      	str	r0, [r7, #4]
   1fa30:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   1fa32:	683b      	ldr	r3, [r7, #0]
   1fa34:	781a      	ldrb	r2, [r3, #0]
   1fa36:	687b      	ldr	r3, [r7, #4]
   1fa38:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1fa3a:	683b      	ldr	r3, [r7, #0]
   1fa3c:	785a      	ldrb	r2, [r3, #1]
   1fa3e:	687b      	ldr	r3, [r7, #4]
   1fa40:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1fa42:	683b      	ldr	r3, [r7, #0]
   1fa44:	789a      	ldrb	r2, [r3, #2]
   1fa46:	687b      	ldr	r3, [r7, #4]
   1fa48:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   1fa4a:	230c      	movs	r3, #12
   1fa4c:	18fb      	adds	r3, r7, r3
   1fa4e:	0018      	movs	r0, r3
   1fa50:	4b0b      	ldr	r3, [pc, #44]	; (1fa80 <spi_attach_slave+0x58>)
   1fa52:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1fa54:	230c      	movs	r3, #12
   1fa56:	18fb      	adds	r3, r7, r3
   1fa58:	2201      	movs	r2, #1
   1fa5a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1fa5c:	687b      	ldr	r3, [r7, #4]
   1fa5e:	781b      	ldrb	r3, [r3, #0]
   1fa60:	220c      	movs	r2, #12
   1fa62:	18ba      	adds	r2, r7, r2
   1fa64:	0011      	movs	r1, r2
   1fa66:	0018      	movs	r0, r3
   1fa68:	4b06      	ldr	r3, [pc, #24]	; (1fa84 <spi_attach_slave+0x5c>)
   1fa6a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1fa6c:	687b      	ldr	r3, [r7, #4]
   1fa6e:	781b      	ldrb	r3, [r3, #0]
   1fa70:	2101      	movs	r1, #1
   1fa72:	0018      	movs	r0, r3
   1fa74:	4b04      	ldr	r3, [pc, #16]	; (1fa88 <spi_attach_slave+0x60>)
   1fa76:	4798      	blx	r3
}
   1fa78:	46c0      	nop			; (mov r8, r8)
   1fa7a:	46bd      	mov	sp, r7
   1fa7c:	b004      	add	sp, #16
   1fa7e:	bd80      	pop	{r7, pc}
   1fa80:	0001f8e9 	.word	0x0001f8e9
   1fa84:	00025de9 	.word	0x00025de9
   1fa88:	0001f90d 	.word	0x0001f90d

0001fa8c <spi_enable>:
{
   1fa8c:	b580      	push	{r7, lr}
   1fa8e:	b084      	sub	sp, #16
   1fa90:	af00      	add	r7, sp, #0
   1fa92:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1fa94:	687b      	ldr	r3, [r7, #4]
   1fa96:	681b      	ldr	r3, [r3, #0]
   1fa98:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1fa9a:	687b      	ldr	r3, [r7, #4]
   1fa9c:	681b      	ldr	r3, [r3, #0]
   1fa9e:	0018      	movs	r0, r3
   1faa0:	4b0b      	ldr	r3, [pc, #44]	; (1fad0 <spi_enable+0x44>)
   1faa2:	4798      	blx	r3
   1faa4:	0003      	movs	r3, r0
   1faa6:	0018      	movs	r0, r3
   1faa8:	4b0a      	ldr	r3, [pc, #40]	; (1fad4 <spi_enable+0x48>)
   1faaa:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   1faac:	46c0      	nop			; (mov r8, r8)
   1faae:	687b      	ldr	r3, [r7, #4]
   1fab0:	0018      	movs	r0, r3
   1fab2:	4b09      	ldr	r3, [pc, #36]	; (1fad8 <spi_enable+0x4c>)
   1fab4:	4798      	blx	r3
   1fab6:	1e03      	subs	r3, r0, #0
   1fab8:	d1f9      	bne.n	1faae <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1faba:	68fb      	ldr	r3, [r7, #12]
   1fabc:	681b      	ldr	r3, [r3, #0]
   1fabe:	2202      	movs	r2, #2
   1fac0:	431a      	orrs	r2, r3
   1fac2:	68fb      	ldr	r3, [r7, #12]
   1fac4:	601a      	str	r2, [r3, #0]
}
   1fac6:	46c0      	nop			; (mov r8, r8)
   1fac8:	46bd      	mov	sp, r7
   1faca:	b004      	add	sp, #16
   1facc:	bd80      	pop	{r7, pc}
   1face:	46c0      	nop			; (mov r8, r8)
   1fad0:	00026ab9 	.word	0x00026ab9
   1fad4:	0001f869 	.word	0x0001f869
   1fad8:	0001f961 	.word	0x0001f961

0001fadc <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   1fadc:	b580      	push	{r7, lr}
   1fade:	b084      	sub	sp, #16
   1fae0:	af00      	add	r7, sp, #0
   1fae2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1fae4:	687b      	ldr	r3, [r7, #4]
   1fae6:	681b      	ldr	r3, [r3, #0]
   1fae8:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1faea:	687b      	ldr	r3, [r7, #4]
   1faec:	681b      	ldr	r3, [r3, #0]
   1faee:	0018      	movs	r0, r3
   1faf0:	4b0e      	ldr	r3, [pc, #56]	; (1fb2c <spi_disable+0x50>)
   1faf2:	4798      	blx	r3
   1faf4:	0003      	movs	r3, r0
   1faf6:	0018      	movs	r0, r3
   1faf8:	4b0d      	ldr	r3, [pc, #52]	; (1fb30 <spi_disable+0x54>)
   1fafa:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1fafc:	46c0      	nop			; (mov r8, r8)
   1fafe:	687b      	ldr	r3, [r7, #4]
   1fb00:	0018      	movs	r0, r3
   1fb02:	4b0c      	ldr	r3, [pc, #48]	; (1fb34 <spi_disable+0x58>)
   1fb04:	4798      	blx	r3
   1fb06:	1e03      	subs	r3, r0, #0
   1fb08:	d1f9      	bne.n	1fafe <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   1fb0a:	68fb      	ldr	r3, [r7, #12]
   1fb0c:	228f      	movs	r2, #143	; 0x8f
   1fb0e:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   1fb10:	68fb      	ldr	r3, [r7, #12]
   1fb12:	228f      	movs	r2, #143	; 0x8f
   1fb14:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1fb16:	68fb      	ldr	r3, [r7, #12]
   1fb18:	681b      	ldr	r3, [r3, #0]
   1fb1a:	2202      	movs	r2, #2
   1fb1c:	4393      	bics	r3, r2
   1fb1e:	001a      	movs	r2, r3
   1fb20:	68fb      	ldr	r3, [r7, #12]
   1fb22:	601a      	str	r2, [r3, #0]
}
   1fb24:	46c0      	nop			; (mov r8, r8)
   1fb26:	46bd      	mov	sp, r7
   1fb28:	b004      	add	sp, #16
   1fb2a:	bd80      	pop	{r7, pc}
   1fb2c:	00026ab9 	.word	0x00026ab9
   1fb30:	0001f895 	.word	0x0001f895
   1fb34:	0001f961 	.word	0x0001f961

0001fb38 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   1fb38:	b580      	push	{r7, lr}
   1fb3a:	b084      	sub	sp, #16
   1fb3c:	af00      	add	r7, sp, #0
   1fb3e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1fb40:	687b      	ldr	r3, [r7, #4]
   1fb42:	681b      	ldr	r3, [r3, #0]
   1fb44:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   1fb46:	68fb      	ldr	r3, [r7, #12]
   1fb48:	7e1b      	ldrb	r3, [r3, #24]
   1fb4a:	b2db      	uxtb	r3, r3
   1fb4c:	001a      	movs	r2, r3
   1fb4e:	2302      	movs	r3, #2
   1fb50:	4013      	ands	r3, r2
   1fb52:	1e5a      	subs	r2, r3, #1
   1fb54:	4193      	sbcs	r3, r2
   1fb56:	b2db      	uxtb	r3, r3
}
   1fb58:	0018      	movs	r0, r3
   1fb5a:	46bd      	mov	sp, r7
   1fb5c:	b004      	add	sp, #16
   1fb5e:	bd80      	pop	{r7, pc}

0001fb60 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   1fb60:	b580      	push	{r7, lr}
   1fb62:	b084      	sub	sp, #16
   1fb64:	af00      	add	r7, sp, #0
   1fb66:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1fb68:	687b      	ldr	r3, [r7, #4]
   1fb6a:	681b      	ldr	r3, [r3, #0]
   1fb6c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1fb6e:	68fb      	ldr	r3, [r7, #12]
   1fb70:	7e1b      	ldrb	r3, [r3, #24]
   1fb72:	b2db      	uxtb	r3, r3
   1fb74:	001a      	movs	r2, r3
   1fb76:	2301      	movs	r3, #1
   1fb78:	4013      	ands	r3, r2
   1fb7a:	1e5a      	subs	r2, r3, #1
   1fb7c:	4193      	sbcs	r3, r2
   1fb7e:	b2db      	uxtb	r3, r3
}
   1fb80:	0018      	movs	r0, r3
   1fb82:	46bd      	mov	sp, r7
   1fb84:	b004      	add	sp, #16
   1fb86:	bd80      	pop	{r7, pc}

0001fb88 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   1fb88:	b580      	push	{r7, lr}
   1fb8a:	b084      	sub	sp, #16
   1fb8c:	af00      	add	r7, sp, #0
   1fb8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1fb90:	687b      	ldr	r3, [r7, #4]
   1fb92:	681b      	ldr	r3, [r3, #0]
   1fb94:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1fb96:	68fb      	ldr	r3, [r7, #12]
   1fb98:	7e1b      	ldrb	r3, [r3, #24]
   1fb9a:	b2db      	uxtb	r3, r3
   1fb9c:	001a      	movs	r2, r3
   1fb9e:	2304      	movs	r3, #4
   1fba0:	4013      	ands	r3, r2
   1fba2:	1e5a      	subs	r2, r3, #1
   1fba4:	4193      	sbcs	r3, r2
   1fba6:	b2db      	uxtb	r3, r3
}
   1fba8:	0018      	movs	r0, r3
   1fbaa:	46bd      	mov	sp, r7
   1fbac:	b004      	add	sp, #16
   1fbae:	bd80      	pop	{r7, pc}

0001fbb0 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   1fbb0:	b580      	push	{r7, lr}
   1fbb2:	b084      	sub	sp, #16
   1fbb4:	af00      	add	r7, sp, #0
   1fbb6:	6078      	str	r0, [r7, #4]
   1fbb8:	000a      	movs	r2, r1
   1fbba:	1cbb      	adds	r3, r7, #2
   1fbbc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1fbbe:	687b      	ldr	r3, [r7, #4]
   1fbc0:	681b      	ldr	r3, [r3, #0]
   1fbc2:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   1fbc4:	687b      	ldr	r3, [r7, #4]
   1fbc6:	0018      	movs	r0, r3
   1fbc8:	4b0a      	ldr	r3, [pc, #40]	; (1fbf4 <spi_write+0x44>)
   1fbca:	4798      	blx	r3
   1fbcc:	0003      	movs	r3, r0
   1fbce:	001a      	movs	r2, r3
   1fbd0:	2301      	movs	r3, #1
   1fbd2:	4053      	eors	r3, r2
   1fbd4:	b2db      	uxtb	r3, r3
   1fbd6:	2b00      	cmp	r3, #0
   1fbd8:	d001      	beq.n	1fbde <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   1fbda:	2305      	movs	r3, #5
   1fbdc:	e006      	b.n	1fbec <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1fbde:	1cbb      	adds	r3, r7, #2
   1fbe0:	881b      	ldrh	r3, [r3, #0]
   1fbe2:	05db      	lsls	r3, r3, #23
   1fbe4:	0dda      	lsrs	r2, r3, #23
   1fbe6:	68fb      	ldr	r3, [r7, #12]
   1fbe8:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   1fbea:	2300      	movs	r3, #0
}
   1fbec:	0018      	movs	r0, r3
   1fbee:	46bd      	mov	sp, r7
   1fbf0:	b004      	add	sp, #16
   1fbf2:	bd80      	pop	{r7, pc}
   1fbf4:	0001fb61 	.word	0x0001fb61

0001fbf8 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   1fbf8:	b580      	push	{r7, lr}
   1fbfa:	b084      	sub	sp, #16
   1fbfc:	af00      	add	r7, sp, #0
   1fbfe:	6078      	str	r0, [r7, #4]
   1fc00:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1fc02:	687b      	ldr	r3, [r7, #4]
   1fc04:	681b      	ldr	r3, [r3, #0]
   1fc06:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   1fc08:	687b      	ldr	r3, [r7, #4]
   1fc0a:	0018      	movs	r0, r3
   1fc0c:	4b1b      	ldr	r3, [pc, #108]	; (1fc7c <spi_read+0x84>)
   1fc0e:	4798      	blx	r3
   1fc10:	0003      	movs	r3, r0
   1fc12:	001a      	movs	r2, r3
   1fc14:	2301      	movs	r3, #1
   1fc16:	4053      	eors	r3, r2
   1fc18:	b2db      	uxtb	r3, r3
   1fc1a:	2b00      	cmp	r3, #0
   1fc1c:	d001      	beq.n	1fc22 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   1fc1e:	2310      	movs	r3, #16
   1fc20:	e027      	b.n	1fc72 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   1fc22:	230f      	movs	r3, #15
   1fc24:	18fb      	adds	r3, r7, r3
   1fc26:	2200      	movs	r2, #0
   1fc28:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1fc2a:	68bb      	ldr	r3, [r7, #8]
   1fc2c:	8b5b      	ldrh	r3, [r3, #26]
   1fc2e:	b29b      	uxth	r3, r3
   1fc30:	001a      	movs	r2, r3
   1fc32:	2304      	movs	r3, #4
   1fc34:	4013      	ands	r3, r2
   1fc36:	d006      	beq.n	1fc46 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   1fc38:	230f      	movs	r3, #15
   1fc3a:	18fb      	adds	r3, r7, r3
   1fc3c:	221e      	movs	r2, #30
   1fc3e:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1fc40:	68bb      	ldr	r3, [r7, #8]
   1fc42:	2204      	movs	r2, #4
   1fc44:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1fc46:	687b      	ldr	r3, [r7, #4]
   1fc48:	799b      	ldrb	r3, [r3, #6]
   1fc4a:	2b01      	cmp	r3, #1
   1fc4c:	d108      	bne.n	1fc60 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1fc4e:	68bb      	ldr	r3, [r7, #8]
   1fc50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1fc52:	b29b      	uxth	r3, r3
   1fc54:	05db      	lsls	r3, r3, #23
   1fc56:	0ddb      	lsrs	r3, r3, #23
   1fc58:	b29a      	uxth	r2, r3
   1fc5a:	683b      	ldr	r3, [r7, #0]
   1fc5c:	801a      	strh	r2, [r3, #0]
   1fc5e:	e005      	b.n	1fc6c <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1fc60:	68bb      	ldr	r3, [r7, #8]
   1fc62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1fc64:	b2db      	uxtb	r3, r3
   1fc66:	b29a      	uxth	r2, r3
   1fc68:	683b      	ldr	r3, [r7, #0]
   1fc6a:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   1fc6c:	230f      	movs	r3, #15
   1fc6e:	18fb      	adds	r3, r7, r3
   1fc70:	781b      	ldrb	r3, [r3, #0]
}
   1fc72:	0018      	movs	r0, r3
   1fc74:	46bd      	mov	sp, r7
   1fc76:	b004      	add	sp, #16
   1fc78:	bd80      	pop	{r7, pc}
   1fc7a:	46c0      	nop			; (mov r8, r8)
   1fc7c:	0001fb89 	.word	0x0001fb89

0001fc80 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   1fc80:	b580      	push	{r7, lr}
   1fc82:	b086      	sub	sp, #24
   1fc84:	af00      	add	r7, sp, #0
   1fc86:	60f8      	str	r0, [r7, #12]
   1fc88:	60b9      	str	r1, [r7, #8]
   1fc8a:	1dbb      	adds	r3, r7, #6
   1fc8c:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   1fc8e:	2313      	movs	r3, #19
   1fc90:	18fb      	adds	r3, r7, r3
   1fc92:	22ff      	movs	r2, #255	; 0xff
   1fc94:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   1fc96:	2317      	movs	r3, #23
   1fc98:	18fb      	adds	r3, r7, r3
   1fc9a:	2200      	movs	r2, #0
   1fc9c:	701a      	strb	r2, [r3, #0]
   1fc9e:	2316      	movs	r3, #22
   1fca0:	18fb      	adds	r3, r7, r3
   1fca2:	2200      	movs	r2, #0
   1fca4:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   1fca6:	2314      	movs	r3, #20
   1fca8:	18fb      	adds	r3, r7, r3
   1fcaa:	2200      	movs	r2, #0
   1fcac:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   1fcae:	2310      	movs	r3, #16
   1fcb0:	18fb      	adds	r3, r7, r3
   1fcb2:	2200      	movs	r2, #0
   1fcb4:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   1fcb6:	68bb      	ldr	r3, [r7, #8]
   1fcb8:	2b00      	cmp	r3, #0
   1fcba:	d102      	bne.n	1fcc2 <spi_rw+0x42>
   1fcbc:	68fb      	ldr	r3, [r7, #12]
   1fcbe:	2b00      	cmp	r3, #0
   1fcc0:	d003      	beq.n	1fcca <spi_rw+0x4a>
   1fcc2:	1dbb      	adds	r3, r7, #6
   1fcc4:	881b      	ldrh	r3, [r3, #0]
   1fcc6:	2b00      	cmp	r3, #0
   1fcc8:	d102      	bne.n	1fcd0 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   1fcca:	230f      	movs	r3, #15
   1fccc:	425b      	negs	r3, r3
   1fcce:	e07e      	b.n	1fdce <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   1fcd0:	68fb      	ldr	r3, [r7, #12]
   1fcd2:	2b00      	cmp	r3, #0
   1fcd4:	d106      	bne.n	1fce4 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   1fcd6:	2313      	movs	r3, #19
   1fcd8:	18fb      	adds	r3, r7, r3
   1fcda:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   1fcdc:	2317      	movs	r3, #23
   1fcde:	18fb      	adds	r3, r7, r3
   1fce0:	2201      	movs	r2, #1
   1fce2:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   1fce4:	68bb      	ldr	r3, [r7, #8]
   1fce6:	2b00      	cmp	r3, #0
   1fce8:	d106      	bne.n	1fcf8 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   1fcea:	2313      	movs	r3, #19
   1fcec:	18fb      	adds	r3, r7, r3
   1fcee:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   1fcf0:	2316      	movs	r3, #22
   1fcf2:	18fb      	adds	r3, r7, r3
   1fcf4:	2201      	movs	r2, #1
   1fcf6:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   1fcf8:	4937      	ldr	r1, [pc, #220]	; (1fdd8 <spi_rw+0x158>)
   1fcfa:	4b38      	ldr	r3, [pc, #224]	; (1fddc <spi_rw+0x15c>)
   1fcfc:	2201      	movs	r2, #1
   1fcfe:	0018      	movs	r0, r3
   1fd00:	4b37      	ldr	r3, [pc, #220]	; (1fde0 <spi_rw+0x160>)
   1fd02:	4798      	blx	r3

	while (u16Sz) {
   1fd04:	e04c      	b.n	1fda0 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   1fd06:	68fb      	ldr	r3, [r7, #12]
   1fd08:	781a      	ldrb	r2, [r3, #0]
   1fd0a:	2314      	movs	r3, #20
   1fd0c:	18fb      	adds	r3, r7, r3
   1fd0e:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   1fd10:	46c0      	nop			; (mov r8, r8)
   1fd12:	4b32      	ldr	r3, [pc, #200]	; (1fddc <spi_rw+0x15c>)
   1fd14:	0018      	movs	r0, r3
   1fd16:	4b33      	ldr	r3, [pc, #204]	; (1fde4 <spi_rw+0x164>)
   1fd18:	4798      	blx	r3
   1fd1a:	0003      	movs	r3, r0
   1fd1c:	001a      	movs	r2, r3
   1fd1e:	2301      	movs	r3, #1
   1fd20:	4053      	eors	r3, r2
   1fd22:	b2db      	uxtb	r3, r3
   1fd24:	2b00      	cmp	r3, #0
   1fd26:	d1f4      	bne.n	1fd12 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   1fd28:	46c0      	nop			; (mov r8, r8)
   1fd2a:	2314      	movs	r3, #20
   1fd2c:	18fb      	adds	r3, r7, r3
   1fd2e:	881a      	ldrh	r2, [r3, #0]
   1fd30:	4b2a      	ldr	r3, [pc, #168]	; (1fddc <spi_rw+0x15c>)
   1fd32:	0011      	movs	r1, r2
   1fd34:	0018      	movs	r0, r3
   1fd36:	4b2c      	ldr	r3, [pc, #176]	; (1fde8 <spi_rw+0x168>)
   1fd38:	4798      	blx	r3
   1fd3a:	1e03      	subs	r3, r0, #0
   1fd3c:	d1f5      	bne.n	1fd2a <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   1fd3e:	46c0      	nop			; (mov r8, r8)
   1fd40:	4b26      	ldr	r3, [pc, #152]	; (1fddc <spi_rw+0x15c>)
   1fd42:	0018      	movs	r0, r3
   1fd44:	4b29      	ldr	r3, [pc, #164]	; (1fdec <spi_rw+0x16c>)
   1fd46:	4798      	blx	r3
   1fd48:	0003      	movs	r3, r0
   1fd4a:	001a      	movs	r2, r3
   1fd4c:	2301      	movs	r3, #1
   1fd4e:	4053      	eors	r3, r2
   1fd50:	b2db      	uxtb	r3, r3
   1fd52:	2b00      	cmp	r3, #0
   1fd54:	d1f4      	bne.n	1fd40 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   1fd56:	46c0      	nop			; (mov r8, r8)
   1fd58:	2310      	movs	r3, #16
   1fd5a:	18fa      	adds	r2, r7, r3
   1fd5c:	4b1f      	ldr	r3, [pc, #124]	; (1fddc <spi_rw+0x15c>)
   1fd5e:	0011      	movs	r1, r2
   1fd60:	0018      	movs	r0, r3
   1fd62:	4b23      	ldr	r3, [pc, #140]	; (1fdf0 <spi_rw+0x170>)
   1fd64:	4798      	blx	r3
   1fd66:	1e03      	subs	r3, r0, #0
   1fd68:	d1f6      	bne.n	1fd58 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   1fd6a:	2310      	movs	r3, #16
   1fd6c:	18fb      	adds	r3, r7, r3
   1fd6e:	881b      	ldrh	r3, [r3, #0]
   1fd70:	b2da      	uxtb	r2, r3
   1fd72:	68bb      	ldr	r3, [r7, #8]
   1fd74:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   1fd76:	1dbb      	adds	r3, r7, #6
   1fd78:	881a      	ldrh	r2, [r3, #0]
   1fd7a:	1dbb      	adds	r3, r7, #6
   1fd7c:	3a01      	subs	r2, #1
   1fd7e:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   1fd80:	2316      	movs	r3, #22
   1fd82:	18fb      	adds	r3, r7, r3
   1fd84:	781b      	ldrb	r3, [r3, #0]
   1fd86:	2b00      	cmp	r3, #0
   1fd88:	d102      	bne.n	1fd90 <spi_rw+0x110>
			pu8Miso++;
   1fd8a:	68bb      	ldr	r3, [r7, #8]
   1fd8c:	3301      	adds	r3, #1
   1fd8e:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   1fd90:	2317      	movs	r3, #23
   1fd92:	18fb      	adds	r3, r7, r3
   1fd94:	781b      	ldrb	r3, [r3, #0]
   1fd96:	2b00      	cmp	r3, #0
   1fd98:	d102      	bne.n	1fda0 <spi_rw+0x120>
			pu8Mosi++;
   1fd9a:	68fb      	ldr	r3, [r7, #12]
   1fd9c:	3301      	adds	r3, #1
   1fd9e:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   1fda0:	1dbb      	adds	r3, r7, #6
   1fda2:	881b      	ldrh	r3, [r3, #0]
   1fda4:	2b00      	cmp	r3, #0
   1fda6:	d1ae      	bne.n	1fd06 <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   1fda8:	46c0      	nop			; (mov r8, r8)
   1fdaa:	4b0c      	ldr	r3, [pc, #48]	; (1fddc <spi_rw+0x15c>)
   1fdac:	0018      	movs	r0, r3
   1fdae:	4b11      	ldr	r3, [pc, #68]	; (1fdf4 <spi_rw+0x174>)
   1fdb0:	4798      	blx	r3
   1fdb2:	0003      	movs	r3, r0
   1fdb4:	001a      	movs	r2, r3
   1fdb6:	2301      	movs	r3, #1
   1fdb8:	4053      	eors	r3, r2
   1fdba:	b2db      	uxtb	r3, r3
   1fdbc:	2b00      	cmp	r3, #0
   1fdbe:	d1f4      	bne.n	1fdaa <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   1fdc0:	4905      	ldr	r1, [pc, #20]	; (1fdd8 <spi_rw+0x158>)
   1fdc2:	4b06      	ldr	r3, [pc, #24]	; (1fddc <spi_rw+0x15c>)
   1fdc4:	2200      	movs	r2, #0
   1fdc6:	0018      	movs	r0, r3
   1fdc8:	4b05      	ldr	r3, [pc, #20]	; (1fde0 <spi_rw+0x160>)
   1fdca:	4798      	blx	r3

	return M2M_SUCCESS;
   1fdcc:	2300      	movs	r3, #0
}
   1fdce:	0018      	movs	r0, r3
   1fdd0:	46bd      	mov	sp, r7
   1fdd2:	b006      	add	sp, #24
   1fdd4:	bd80      	pop	{r7, pc}
   1fdd6:	46c0      	nop			; (mov r8, r8)
   1fdd8:	20005844 	.word	0x20005844
   1fddc:	20005848 	.word	0x20005848
   1fde0:	0002752d 	.word	0x0002752d
   1fde4:	0001fb61 	.word	0x0001fb61
   1fde8:	0001fbb1 	.word	0x0001fbb1
   1fdec:	0001fb89 	.word	0x0001fb89
   1fdf0:	0001fbf9 	.word	0x0001fbf9
   1fdf4:	0001fb39 	.word	0x0001fb39

0001fdf8 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   1fdf8:	b580      	push	{r7, lr}
   1fdfa:	b092      	sub	sp, #72	; 0x48
   1fdfc:	af00      	add	r7, sp, #0
   1fdfe:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   1fe00:	2347      	movs	r3, #71	; 0x47
   1fe02:	18fb      	adds	r3, r7, r3
   1fe04:	2200      	movs	r2, #0
   1fe06:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   1fe08:	2308      	movs	r3, #8
   1fe0a:	18fb      	adds	r3, r7, r3
   1fe0c:	0018      	movs	r0, r3
   1fe0e:	4b26      	ldr	r3, [pc, #152]	; (1fea8 <nm_bus_init+0xb0>)
   1fe10:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   1fe12:	2308      	movs	r3, #8
   1fe14:	18fb      	adds	r3, r7, r3
   1fe16:	220e      	movs	r2, #14
   1fe18:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   1fe1a:	2308      	movs	r3, #8
   1fe1c:	18fa      	adds	r2, r7, r3
   1fe1e:	4b23      	ldr	r3, [pc, #140]	; (1feac <nm_bus_init+0xb4>)
   1fe20:	0011      	movs	r1, r2
   1fe22:	0018      	movs	r0, r3
   1fe24:	4b22      	ldr	r3, [pc, #136]	; (1feb0 <nm_bus_init+0xb8>)
   1fe26:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   1fe28:	230c      	movs	r3, #12
   1fe2a:	18fb      	adds	r3, r7, r3
   1fe2c:	0018      	movs	r0, r3
   1fe2e:	4b21      	ldr	r3, [pc, #132]	; (1feb4 <nm_bus_init+0xbc>)
   1fe30:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   1fe32:	230c      	movs	r3, #12
   1fe34:	18fb      	adds	r3, r7, r3
   1fe36:	22c0      	movs	r2, #192	; 0xc0
   1fe38:	0392      	lsls	r2, r2, #14
   1fe3a:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   1fe3c:	230c      	movs	r3, #12
   1fe3e:	18fb      	adds	r3, r7, r3
   1fe40:	4a1d      	ldr	r2, [pc, #116]	; (1feb8 <nm_bus_init+0xc0>)
   1fe42:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   1fe44:	230c      	movs	r3, #12
   1fe46:	18fb      	adds	r3, r7, r3
   1fe48:	4a1c      	ldr	r2, [pc, #112]	; (1febc <nm_bus_init+0xc4>)
   1fe4a:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   1fe4c:	230c      	movs	r3, #12
   1fe4e:	18fb      	adds	r3, r7, r3
   1fe50:	2201      	movs	r2, #1
   1fe52:	4252      	negs	r2, r2
   1fe54:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   1fe56:	230c      	movs	r3, #12
   1fe58:	18fb      	adds	r3, r7, r3
   1fe5a:	4a19      	ldr	r2, [pc, #100]	; (1fec0 <nm_bus_init+0xc8>)
   1fe5c:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   1fe5e:	230c      	movs	r3, #12
   1fe60:	18fb      	adds	r3, r7, r3
   1fe62:	2200      	movs	r2, #0
   1fe64:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   1fe66:	230c      	movs	r3, #12
   1fe68:	18fb      	adds	r3, r7, r3
   1fe6a:	4a16      	ldr	r2, [pc, #88]	; (1fec4 <nm_bus_init+0xcc>)
   1fe6c:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   1fe6e:	230c      	movs	r3, #12
   1fe70:	18fa      	adds	r2, r7, r3
   1fe72:	4915      	ldr	r1, [pc, #84]	; (1fec8 <nm_bus_init+0xd0>)
   1fe74:	4b15      	ldr	r3, [pc, #84]	; (1fecc <nm_bus_init+0xd4>)
   1fe76:	0018      	movs	r0, r3
   1fe78:	4b15      	ldr	r3, [pc, #84]	; (1fed0 <nm_bus_init+0xd8>)
   1fe7a:	4798      	blx	r3
   1fe7c:	1e03      	subs	r3, r0, #0
   1fe7e:	d002      	beq.n	1fe86 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   1fe80:	2306      	movs	r3, #6
   1fe82:	425b      	negs	r3, r3
   1fe84:	e00c      	b.n	1fea0 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   1fe86:	4b11      	ldr	r3, [pc, #68]	; (1fecc <nm_bus_init+0xd4>)
   1fe88:	0018      	movs	r0, r3
   1fe8a:	4b12      	ldr	r3, [pc, #72]	; (1fed4 <nm_bus_init+0xdc>)
   1fe8c:	4798      	blx	r3

	nm_bsp_reset();
   1fe8e:	4b12      	ldr	r3, [pc, #72]	; (1fed8 <nm_bus_init+0xe0>)
   1fe90:	4798      	blx	r3
	nm_bsp_sleep(1);
   1fe92:	2001      	movs	r0, #1
   1fe94:	4b11      	ldr	r3, [pc, #68]	; (1fedc <nm_bus_init+0xe4>)
   1fe96:	4798      	blx	r3
#endif
	return result;
   1fe98:	2347      	movs	r3, #71	; 0x47
   1fe9a:	18fb      	adds	r3, r7, r3
   1fe9c:	781b      	ldrb	r3, [r3, #0]
   1fe9e:	b25b      	sxtb	r3, r3
}
   1fea0:	0018      	movs	r0, r3
   1fea2:	46bd      	mov	sp, r7
   1fea4:	b012      	add	sp, #72	; 0x48
   1fea6:	bd80      	pop	{r7, pc}
   1fea8:	0001fa05 	.word	0x0001fa05
   1feac:	20005844 	.word	0x20005844
   1feb0:	0001fa29 	.word	0x0001fa29
   1feb4:	0001f981 	.word	0x0001f981
   1feb8:	000c0002 	.word	0x000c0002
   1febc:	000d0002 	.word	0x000d0002
   1fec0:	000f0002 	.word	0x000f0002
   1fec4:	00124f80 	.word	0x00124f80
   1fec8:	42001000 	.word	0x42001000
   1fecc:	20005848 	.word	0x20005848
   1fed0:	00027269 	.word	0x00027269
   1fed4:	0001fa8d 	.word	0x0001fa8d
   1fed8:	0001f6fd 	.word	0x0001f6fd
   1fedc:	0001f73d 	.word	0x0001f73d

0001fee0 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   1fee0:	b590      	push	{r4, r7, lr}
   1fee2:	b085      	sub	sp, #20
   1fee4:	af00      	add	r7, sp, #0
   1fee6:	0002      	movs	r2, r0
   1fee8:	6039      	str	r1, [r7, #0]
   1feea:	1dfb      	adds	r3, r7, #7
   1feec:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   1feee:	230f      	movs	r3, #15
   1fef0:	18fb      	adds	r3, r7, r3
   1fef2:	2200      	movs	r2, #0
   1fef4:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   1fef6:	1dfb      	adds	r3, r7, #7
   1fef8:	781b      	ldrb	r3, [r3, #0]
   1fefa:	2b03      	cmp	r3, #3
   1fefc:	d10f      	bne.n	1ff1e <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   1fefe:	683b      	ldr	r3, [r7, #0]
   1ff00:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   1ff02:	68bb      	ldr	r3, [r7, #8]
   1ff04:	6818      	ldr	r0, [r3, #0]
   1ff06:	68bb      	ldr	r3, [r7, #8]
   1ff08:	6859      	ldr	r1, [r3, #4]
   1ff0a:	68bb      	ldr	r3, [r7, #8]
   1ff0c:	891b      	ldrh	r3, [r3, #8]
   1ff0e:	220f      	movs	r2, #15
   1ff10:	18bc      	adds	r4, r7, r2
   1ff12:	001a      	movs	r2, r3
   1ff14:	4b10      	ldr	r3, [pc, #64]	; (1ff58 <nm_bus_ioctl+0x78>)
   1ff16:	4798      	blx	r3
   1ff18:	0003      	movs	r3, r0
   1ff1a:	7023      	strb	r3, [r4, #0]
		}
		break;
   1ff1c:	e013      	b.n	1ff46 <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   1ff1e:	230f      	movs	r3, #15
   1ff20:	18fb      	adds	r3, r7, r3
   1ff22:	22ff      	movs	r2, #255	; 0xff
   1ff24:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   1ff26:	2383      	movs	r3, #131	; 0x83
   1ff28:	005a      	lsls	r2, r3, #1
   1ff2a:	490c      	ldr	r1, [pc, #48]	; (1ff5c <nm_bus_ioctl+0x7c>)
   1ff2c:	4b0c      	ldr	r3, [pc, #48]	; (1ff60 <nm_bus_ioctl+0x80>)
   1ff2e:	0018      	movs	r0, r3
   1ff30:	4b0c      	ldr	r3, [pc, #48]	; (1ff64 <nm_bus_ioctl+0x84>)
   1ff32:	4798      	blx	r3
   1ff34:	4b0c      	ldr	r3, [pc, #48]	; (1ff68 <nm_bus_ioctl+0x88>)
   1ff36:	0018      	movs	r0, r3
   1ff38:	4b0a      	ldr	r3, [pc, #40]	; (1ff64 <nm_bus_ioctl+0x84>)
   1ff3a:	4798      	blx	r3
   1ff3c:	4b0b      	ldr	r3, [pc, #44]	; (1ff6c <nm_bus_ioctl+0x8c>)
   1ff3e:	0018      	movs	r0, r3
   1ff40:	4b08      	ldr	r3, [pc, #32]	; (1ff64 <nm_bus_ioctl+0x84>)
   1ff42:	4798      	blx	r3
			break;
   1ff44:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   1ff46:	230f      	movs	r3, #15
   1ff48:	18fb      	adds	r3, r7, r3
   1ff4a:	781b      	ldrb	r3, [r3, #0]
   1ff4c:	b25b      	sxtb	r3, r3
}
   1ff4e:	0018      	movs	r0, r3
   1ff50:	46bd      	mov	sp, r7
   1ff52:	b005      	add	sp, #20
   1ff54:	bd90      	pop	{r4, r7, pc}
   1ff56:	46c0      	nop			; (mov r8, r8)
   1ff58:	0001fc81 	.word	0x0001fc81
   1ff5c:	00037a20 	.word	0x00037a20
   1ff60:	000379f4 	.word	0x000379f4
   1ff64:	0001d2e9 	.word	0x0001d2e9
   1ff68:	00037a08 	.word	0x00037a08
   1ff6c:	00037a1c 	.word	0x00037a1c

0001ff70 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   1ff70:	b580      	push	{r7, lr}
   1ff72:	b082      	sub	sp, #8
   1ff74:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   1ff76:	1dfb      	adds	r3, r7, #7
   1ff78:	2200      	movs	r2, #0
   1ff7a:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   1ff7c:	1d3b      	adds	r3, r7, #4
   1ff7e:	0018      	movs	r0, r3
   1ff80:	4b13      	ldr	r3, [pc, #76]	; (1ffd0 <nm_bus_deinit+0x60>)
   1ff82:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   1ff84:	1d3b      	adds	r3, r7, #4
   1ff86:	2200      	movs	r2, #0
   1ff88:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   1ff8a:	1d3b      	adds	r3, r7, #4
   1ff8c:	2200      	movs	r2, #0
   1ff8e:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   1ff90:	4b10      	ldr	r3, [pc, #64]	; (1ffd4 <nm_bus_deinit+0x64>)
   1ff92:	0018      	movs	r0, r3
   1ff94:	4b10      	ldr	r3, [pc, #64]	; (1ffd8 <nm_bus_deinit+0x68>)
   1ff96:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   1ff98:	1d3b      	adds	r3, r7, #4
   1ff9a:	0019      	movs	r1, r3
   1ff9c:	200c      	movs	r0, #12
   1ff9e:	4b0f      	ldr	r3, [pc, #60]	; (1ffdc <nm_bus_deinit+0x6c>)
   1ffa0:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   1ffa2:	1d3b      	adds	r3, r7, #4
   1ffa4:	0019      	movs	r1, r3
   1ffa6:	200f      	movs	r0, #15
   1ffa8:	4b0c      	ldr	r3, [pc, #48]	; (1ffdc <nm_bus_deinit+0x6c>)
   1ffaa:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   1ffac:	1d3b      	adds	r3, r7, #4
   1ffae:	0019      	movs	r1, r3
   1ffb0:	200d      	movs	r0, #13
   1ffb2:	4b0a      	ldr	r3, [pc, #40]	; (1ffdc <nm_bus_deinit+0x6c>)
   1ffb4:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   1ffb6:	1d3b      	adds	r3, r7, #4
   1ffb8:	0019      	movs	r1, r3
   1ffba:	200e      	movs	r0, #14
   1ffbc:	4b07      	ldr	r3, [pc, #28]	; (1ffdc <nm_bus_deinit+0x6c>)
   1ffbe:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   1ffc0:	1dfb      	adds	r3, r7, #7
   1ffc2:	781b      	ldrb	r3, [r3, #0]
   1ffc4:	b25b      	sxtb	r3, r3
}
   1ffc6:	0018      	movs	r0, r3
   1ffc8:	46bd      	mov	sp, r7
   1ffca:	b002      	add	sp, #8
   1ffcc:	bd80      	pop	{r7, pc}
   1ffce:	46c0      	nop			; (mov r8, r8)
   1ffd0:	0001f8e9 	.word	0x0001f8e9
   1ffd4:	20005848 	.word	0x20005848
   1ffd8:	0001fadd 	.word	0x0001fadd
   1ffdc:	00025de9 	.word	0x00025de9

0001ffe0 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   1ffe0:	b580      	push	{r7, lr}
   1ffe2:	b084      	sub	sp, #16
   1ffe4:	af00      	add	r7, sp, #0
   1ffe6:	60f8      	str	r0, [r7, #12]
   1ffe8:	60b9      	str	r1, [r7, #8]
   1ffea:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   1ffec:	687b      	ldr	r3, [r7, #4]
   1ffee:	2b00      	cmp	r3, #0
   1fff0:	d010      	beq.n	20014 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   1fff2:	68bb      	ldr	r3, [r7, #8]
   1fff4:	781a      	ldrb	r2, [r3, #0]
   1fff6:	68fb      	ldr	r3, [r7, #12]
   1fff8:	701a      	strb	r2, [r3, #0]
		pDst++;
   1fffa:	68fb      	ldr	r3, [r7, #12]
   1fffc:	3301      	adds	r3, #1
   1fffe:	60fb      	str	r3, [r7, #12]
		pSrc++;
   20000:	68bb      	ldr	r3, [r7, #8]
   20002:	3301      	adds	r3, #1
   20004:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   20006:	687b      	ldr	r3, [r7, #4]
   20008:	3b01      	subs	r3, #1
   2000a:	607b      	str	r3, [r7, #4]
   2000c:	687b      	ldr	r3, [r7, #4]
   2000e:	2b00      	cmp	r3, #0
   20010:	d1ef      	bne.n	1fff2 <m2m_memcpy+0x12>
   20012:	e000      	b.n	20016 <m2m_memcpy+0x36>
	if(sz == 0) return;
   20014:	46c0      	nop			; (mov r8, r8)
}
   20016:	46bd      	mov	sp, r7
   20018:	b004      	add	sp, #16
   2001a:	bd80      	pop	{r7, pc}

0002001c <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   2001c:	b580      	push	{r7, lr}
   2001e:	b084      	sub	sp, #16
   20020:	af00      	add	r7, sp, #0
   20022:	60f8      	str	r0, [r7, #12]
   20024:	607a      	str	r2, [r7, #4]
   20026:	230b      	movs	r3, #11
   20028:	18fb      	adds	r3, r7, r3
   2002a:	1c0a      	adds	r2, r1, #0
   2002c:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   2002e:	687b      	ldr	r3, [r7, #4]
   20030:	2b00      	cmp	r3, #0
   20032:	d00e      	beq.n	20052 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   20034:	68fb      	ldr	r3, [r7, #12]
   20036:	220b      	movs	r2, #11
   20038:	18ba      	adds	r2, r7, r2
   2003a:	7812      	ldrb	r2, [r2, #0]
   2003c:	701a      	strb	r2, [r3, #0]
		pBuf++;
   2003e:	68fb      	ldr	r3, [r7, #12]
   20040:	3301      	adds	r3, #1
   20042:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   20044:	687b      	ldr	r3, [r7, #4]
   20046:	3b01      	subs	r3, #1
   20048:	607b      	str	r3, [r7, #4]
   2004a:	687b      	ldr	r3, [r7, #4]
   2004c:	2b00      	cmp	r3, #0
   2004e:	d1f1      	bne.n	20034 <m2m_memset+0x18>
   20050:	e000      	b.n	20054 <m2m_memset+0x38>
	if(sz == 0) return;
   20052:	46c0      	nop			; (mov r8, r8)
}
   20054:	46bd      	mov	sp, r7
   20056:	b004      	add	sp, #16
   20058:	bd80      	pop	{r7, pc}

0002005a <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   2005a:	b580      	push	{r7, lr}
   2005c:	b084      	sub	sp, #16
   2005e:	af00      	add	r7, sp, #0
   20060:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   20062:	230e      	movs	r3, #14
   20064:	18fb      	adds	r3, r7, r3
   20066:	2200      	movs	r2, #0
   20068:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   2006a:	e009      	b.n	20080 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   2006c:	230e      	movs	r3, #14
   2006e:	18fb      	adds	r3, r7, r3
   20070:	881a      	ldrh	r2, [r3, #0]
   20072:	230e      	movs	r3, #14
   20074:	18fb      	adds	r3, r7, r3
   20076:	3201      	adds	r2, #1
   20078:	801a      	strh	r2, [r3, #0]
		pcStr++;
   2007a:	687b      	ldr	r3, [r7, #4]
   2007c:	3301      	adds	r3, #1
   2007e:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   20080:	687b      	ldr	r3, [r7, #4]
   20082:	781b      	ldrb	r3, [r3, #0]
   20084:	2b00      	cmp	r3, #0
   20086:	d1f1      	bne.n	2006c <m2m_strlen+0x12>
	}
	return u16StrLen;
   20088:	230e      	movs	r3, #14
   2008a:	18fb      	adds	r3, r7, r3
   2008c:	881b      	ldrh	r3, [r3, #0]
}
   2008e:	0018      	movs	r0, r3
   20090:	46bd      	mov	sp, r7
   20092:	b004      	add	sp, #16
   20094:	bd80      	pop	{r7, pc}
	...

00020098 <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   20098:	b580      	push	{r7, lr}
   2009a:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   2009c:	4b04      	ldr	r3, [pc, #16]	; (200b0 <isr+0x18>)
   2009e:	78db      	ldrb	r3, [r3, #3]
   200a0:	b2db      	uxtb	r3, r3
   200a2:	3301      	adds	r3, #1
   200a4:	b2da      	uxtb	r2, r3
   200a6:	4b02      	ldr	r3, [pc, #8]	; (200b0 <isr+0x18>)
   200a8:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   200aa:	46c0      	nop			; (mov r8, r8)
   200ac:	46bd      	mov	sp, r7
   200ae:	bd80      	pop	{r7, pc}
   200b0:	20005884 	.word	0x20005884

000200b4 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   200b4:	b590      	push	{r4, r7, lr}
   200b6:	b083      	sub	sp, #12
   200b8:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   200ba:	1dfb      	adds	r3, r7, #7
   200bc:	2200      	movs	r2, #0
   200be:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   200c0:	4b14      	ldr	r3, [pc, #80]	; (20114 <hif_set_rx_done+0x60>)
   200c2:	2200      	movs	r2, #0
   200c4:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   200c6:	2001      	movs	r0, #1
   200c8:	4b13      	ldr	r3, [pc, #76]	; (20118 <hif_set_rx_done+0x64>)
   200ca:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   200cc:	1dfc      	adds	r4, r7, #7
   200ce:	003b      	movs	r3, r7
   200d0:	4a12      	ldr	r2, [pc, #72]	; (2011c <hif_set_rx_done+0x68>)
   200d2:	0019      	movs	r1, r3
   200d4:	0010      	movs	r0, r2
   200d6:	4b12      	ldr	r3, [pc, #72]	; (20120 <hif_set_rx_done+0x6c>)
   200d8:	4798      	blx	r3
   200da:	0003      	movs	r3, r0
   200dc:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   200de:	1dfb      	adds	r3, r7, #7
   200e0:	781b      	ldrb	r3, [r3, #0]
   200e2:	b25b      	sxtb	r3, r3
   200e4:	2b00      	cmp	r3, #0
   200e6:	d10d      	bne.n	20104 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   200e8:	683b      	ldr	r3, [r7, #0]
   200ea:	2202      	movs	r2, #2
   200ec:	4313      	orrs	r3, r2
   200ee:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   200f0:	683b      	ldr	r3, [r7, #0]
   200f2:	1dfc      	adds	r4, r7, #7
   200f4:	4a09      	ldr	r2, [pc, #36]	; (2011c <hif_set_rx_done+0x68>)
   200f6:	0019      	movs	r1, r3
   200f8:	0010      	movs	r0, r2
   200fa:	4b0a      	ldr	r3, [pc, #40]	; (20124 <hif_set_rx_done+0x70>)
   200fc:	4798      	blx	r3
   200fe:	0003      	movs	r3, r0
   20100:	7023      	strb	r3, [r4, #0]
   20102:	e000      	b.n	20106 <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   20104:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   20106:	1dfb      	adds	r3, r7, #7
   20108:	781b      	ldrb	r3, [r3, #0]
   2010a:	b25b      	sxtb	r3, r3

}
   2010c:	0018      	movs	r0, r3
   2010e:	46bd      	mov	sp, r7
   20110:	b003      	add	sp, #12
   20112:	bd90      	pop	{r4, r7, pc}
   20114:	20005884 	.word	0x20005884
   20118:	0001f7d1 	.word	0x0001f7d1
   2011c:	00001070 	.word	0x00001070
   20120:	000220ad 	.word	0x000220ad
   20124:	000220d1 	.word	0x000220d1

00020128 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   20128:	b580      	push	{r7, lr}
   2012a:	b082      	sub	sp, #8
   2012c:	af00      	add	r7, sp, #0
   2012e:	603a      	str	r2, [r7, #0]
   20130:	1dfb      	adds	r3, r7, #7
   20132:	1c02      	adds	r2, r0, #0
   20134:	701a      	strb	r2, [r3, #0]
   20136:	1d3b      	adds	r3, r7, #4
   20138:	1c0a      	adds	r2, r1, #0
   2013a:	801a      	strh	r2, [r3, #0]


}
   2013c:	46c0      	nop			; (mov r8, r8)
   2013e:	46bd      	mov	sp, r7
   20140:	b002      	add	sp, #8
   20142:	bd80      	pop	{r7, pc}

00020144 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   20144:	b590      	push	{r4, r7, lr}
   20146:	b083      	sub	sp, #12
   20148:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2014a:	1dfb      	adds	r3, r7, #7
   2014c:	2200      	movs	r2, #0
   2014e:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   20150:	4b16      	ldr	r3, [pc, #88]	; (201ac <hif_chip_wake+0x68>)
   20152:	789b      	ldrb	r3, [r3, #2]
   20154:	b2db      	uxtb	r3, r3
   20156:	2b00      	cmp	r3, #0
   20158:	d003      	beq.n	20162 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   2015a:	1dfb      	adds	r3, r7, #7
   2015c:	781b      	ldrb	r3, [r3, #0]
   2015e:	b25b      	sxtb	r3, r3
   20160:	e01f      	b.n	201a2 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   20162:	4b12      	ldr	r3, [pc, #72]	; (201ac <hif_chip_wake+0x68>)
   20164:	785b      	ldrb	r3, [r3, #1]
   20166:	b2db      	uxtb	r3, r3
   20168:	2b00      	cmp	r3, #0
   2016a:	d10e      	bne.n	2018a <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   2016c:	4b0f      	ldr	r3, [pc, #60]	; (201ac <hif_chip_wake+0x68>)
   2016e:	781b      	ldrb	r3, [r3, #0]
   20170:	b2db      	uxtb	r3, r3
   20172:	2b00      	cmp	r3, #0
   20174:	d009      	beq.n	2018a <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   20176:	1dfc      	adds	r4, r7, #7
   20178:	4b0d      	ldr	r3, [pc, #52]	; (201b0 <hif_chip_wake+0x6c>)
   2017a:	4798      	blx	r3
   2017c:	0003      	movs	r3, r0
   2017e:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   20180:	1dfb      	adds	r3, r7, #7
   20182:	781b      	ldrb	r3, [r3, #0]
   20184:	b25b      	sxtb	r3, r3
   20186:	2b00      	cmp	r3, #0
   20188:	d107      	bne.n	2019a <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   2018a:	4b08      	ldr	r3, [pc, #32]	; (201ac <hif_chip_wake+0x68>)
   2018c:	785b      	ldrb	r3, [r3, #1]
   2018e:	b2db      	uxtb	r3, r3
   20190:	3301      	adds	r3, #1
   20192:	b2da      	uxtb	r2, r3
   20194:	4b05      	ldr	r3, [pc, #20]	; (201ac <hif_chip_wake+0x68>)
   20196:	705a      	strb	r2, [r3, #1]
   20198:	e000      	b.n	2019c <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   2019a:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   2019c:	1dfb      	adds	r3, r7, #7
   2019e:	781b      	ldrb	r3, [r3, #0]
   201a0:	b25b      	sxtb	r3, r3
}
   201a2:	0018      	movs	r0, r3
   201a4:	46bd      	mov	sp, r7
   201a6:	b003      	add	sp, #12
   201a8:	bd90      	pop	{r4, r7, pc}
   201aa:	46c0      	nop			; (mov r8, r8)
   201ac:	20005884 	.word	0x20005884
   201b0:	00021b7d 	.word	0x00021b7d

000201b4 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   201b4:	b580      	push	{r7, lr}
   201b6:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   201b8:	4b07      	ldr	r3, [pc, #28]	; (201d8 <hif_chip_sleep_sc+0x24>)
   201ba:	785b      	ldrb	r3, [r3, #1]
   201bc:	b2db      	uxtb	r3, r3
   201be:	2b00      	cmp	r3, #0
   201c0:	d006      	beq.n	201d0 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   201c2:	4b05      	ldr	r3, [pc, #20]	; (201d8 <hif_chip_sleep_sc+0x24>)
   201c4:	785b      	ldrb	r3, [r3, #1]
   201c6:	b2db      	uxtb	r3, r3
   201c8:	3b01      	subs	r3, #1
   201ca:	b2da      	uxtb	r2, r3
   201cc:	4b02      	ldr	r3, [pc, #8]	; (201d8 <hif_chip_sleep_sc+0x24>)
   201ce:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   201d0:	2300      	movs	r3, #0
}
   201d2:	0018      	movs	r0, r3
   201d4:	46bd      	mov	sp, r7
   201d6:	bd80      	pop	{r7, pc}
   201d8:	20005884 	.word	0x20005884

000201dc <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   201dc:	b590      	push	{r4, r7, lr}
   201de:	b083      	sub	sp, #12
   201e0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   201e2:	1dfb      	adds	r3, r7, #7
   201e4:	2200      	movs	r2, #0
   201e6:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   201e8:	4b10      	ldr	r3, [pc, #64]	; (2022c <hif_chip_sleep+0x50>)
   201ea:	785b      	ldrb	r3, [r3, #1]
   201ec:	b2db      	uxtb	r3, r3
   201ee:	2b00      	cmp	r3, #0
   201f0:	d006      	beq.n	20200 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   201f2:	4b0e      	ldr	r3, [pc, #56]	; (2022c <hif_chip_sleep+0x50>)
   201f4:	785b      	ldrb	r3, [r3, #1]
   201f6:	b2db      	uxtb	r3, r3
   201f8:	3b01      	subs	r3, #1
   201fa:	b2da      	uxtb	r2, r3
   201fc:	4b0b      	ldr	r3, [pc, #44]	; (2022c <hif_chip_sleep+0x50>)
   201fe:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   20200:	4b0a      	ldr	r3, [pc, #40]	; (2022c <hif_chip_sleep+0x50>)
   20202:	785b      	ldrb	r3, [r3, #1]
   20204:	b2db      	uxtb	r3, r3
   20206:	2b00      	cmp	r3, #0
   20208:	d109      	bne.n	2021e <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   2020a:	4b08      	ldr	r3, [pc, #32]	; (2022c <hif_chip_sleep+0x50>)
   2020c:	781b      	ldrb	r3, [r3, #0]
   2020e:	b2db      	uxtb	r3, r3
   20210:	2b00      	cmp	r3, #0
   20212:	d004      	beq.n	2021e <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   20214:	1dfc      	adds	r4, r7, #7
   20216:	4b06      	ldr	r3, [pc, #24]	; (20230 <hif_chip_sleep+0x54>)
   20218:	4798      	blx	r3
   2021a:	0003      	movs	r3, r0
   2021c:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   2021e:	1dfb      	adds	r3, r7, #7
   20220:	781b      	ldrb	r3, [r3, #0]
   20222:	b25b      	sxtb	r3, r3
}
   20224:	0018      	movs	r0, r3
   20226:	46bd      	mov	sp, r7
   20228:	b003      	add	sp, #12
   2022a:	bd90      	pop	{r4, r7, pc}
   2022c:	20005884 	.word	0x20005884
   20230:	00021aa5 	.word	0x00021aa5

00020234 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   20234:	b580      	push	{r7, lr}
   20236:	b082      	sub	sp, #8
   20238:	af00      	add	r7, sp, #0
   2023a:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   2023c:	4b09      	ldr	r3, [pc, #36]	; (20264 <hif_init+0x30>)
   2023e:	222c      	movs	r2, #44	; 0x2c
   20240:	2100      	movs	r1, #0
   20242:	0018      	movs	r0, r3
   20244:	4b08      	ldr	r3, [pc, #32]	; (20268 <hif_init+0x34>)
   20246:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   20248:	4b08      	ldr	r3, [pc, #32]	; (2026c <hif_init+0x38>)
   2024a:	0018      	movs	r0, r3
   2024c:	4b08      	ldr	r3, [pc, #32]	; (20270 <hif_init+0x3c>)
   2024e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   20250:	4b08      	ldr	r3, [pc, #32]	; (20274 <hif_init+0x40>)
   20252:	0019      	movs	r1, r3
   20254:	2003      	movs	r0, #3
   20256:	4b08      	ldr	r3, [pc, #32]	; (20278 <hif_init+0x44>)
   20258:	4798      	blx	r3
	return M2M_SUCCESS;
   2025a:	2300      	movs	r3, #0
}
   2025c:	0018      	movs	r0, r3
   2025e:	46bd      	mov	sp, r7
   20260:	b002      	add	sp, #8
   20262:	bd80      	pop	{r7, pc}
   20264:	20005884 	.word	0x20005884
   20268:	0002001d 	.word	0x0002001d
   2026c:	00020099 	.word	0x00020099
   20270:	0001f759 	.word	0x0001f759
   20274:	00020129 	.word	0x00020129
   20278:	00020d19 	.word	0x00020d19

0002027c <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   2027c:	b590      	push	{r4, r7, lr}
   2027e:	b089      	sub	sp, #36	; 0x24
   20280:	af00      	add	r7, sp, #0
   20282:	0004      	movs	r4, r0
   20284:	0008      	movs	r0, r1
   20286:	603a      	str	r2, [r7, #0]
   20288:	0019      	movs	r1, r3
   2028a:	1dfb      	adds	r3, r7, #7
   2028c:	1c22      	adds	r2, r4, #0
   2028e:	701a      	strb	r2, [r3, #0]
   20290:	1dbb      	adds	r3, r7, #6
   20292:	1c02      	adds	r2, r0, #0
   20294:	701a      	strb	r2, [r3, #0]
   20296:	1d3b      	adds	r3, r7, #4
   20298:	1c0a      	adds	r2, r1, #0
   2029a:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   2029c:	231f      	movs	r3, #31
   2029e:	18fb      	adds	r3, r7, r3
   202a0:	22ff      	movs	r2, #255	; 0xff
   202a2:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   202a4:	1dbb      	adds	r3, r7, #6
   202a6:	781b      	ldrb	r3, [r3, #0]
   202a8:	227f      	movs	r2, #127	; 0x7f
   202aa:	4013      	ands	r3, r2
   202ac:	b2da      	uxtb	r2, r3
   202ae:	2318      	movs	r3, #24
   202b0:	18fb      	adds	r3, r7, r3
   202b2:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   202b4:	2318      	movs	r3, #24
   202b6:	18fb      	adds	r3, r7, r3
   202b8:	1dfa      	adds	r2, r7, #7
   202ba:	7812      	ldrb	r2, [r2, #0]
   202bc:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   202be:	2318      	movs	r3, #24
   202c0:	18fb      	adds	r3, r7, r3
   202c2:	2208      	movs	r2, #8
   202c4:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   202c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   202c8:	2b00      	cmp	r3, #0
   202ca:	d011      	beq.n	202f0 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   202cc:	2318      	movs	r3, #24
   202ce:	18fb      	adds	r3, r7, r3
   202d0:	885b      	ldrh	r3, [r3, #2]
   202d2:	b29a      	uxth	r2, r3
   202d4:	2338      	movs	r3, #56	; 0x38
   202d6:	18f9      	adds	r1, r7, r3
   202d8:	2334      	movs	r3, #52	; 0x34
   202da:	18fb      	adds	r3, r7, r3
   202dc:	8809      	ldrh	r1, [r1, #0]
   202de:	881b      	ldrh	r3, [r3, #0]
   202e0:	18cb      	adds	r3, r1, r3
   202e2:	b29b      	uxth	r3, r3
   202e4:	18d3      	adds	r3, r2, r3
   202e6:	b29a      	uxth	r2, r3
   202e8:	2318      	movs	r3, #24
   202ea:	18fb      	adds	r3, r7, r3
   202ec:	805a      	strh	r2, [r3, #2]
   202ee:	e00a      	b.n	20306 <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   202f0:	2318      	movs	r3, #24
   202f2:	18fb      	adds	r3, r7, r3
   202f4:	885b      	ldrh	r3, [r3, #2]
   202f6:	b29a      	uxth	r2, r3
   202f8:	1d3b      	adds	r3, r7, #4
   202fa:	881b      	ldrh	r3, [r3, #0]
   202fc:	18d3      	adds	r3, r2, r3
   202fe:	b29a      	uxth	r2, r3
   20300:	2318      	movs	r3, #24
   20302:	18fb      	adds	r3, r7, r3
   20304:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   20306:	231f      	movs	r3, #31
   20308:	18fc      	adds	r4, r7, r3
   2030a:	4bb2      	ldr	r3, [pc, #712]	; (205d4 <hif_send+0x358>)
   2030c:	4798      	blx	r3
   2030e:	0003      	movs	r3, r0
   20310:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   20312:	231f      	movs	r3, #31
   20314:	18fb      	adds	r3, r7, r3
   20316:	781b      	ldrb	r3, [r3, #0]
   20318:	b25b      	sxtb	r3, r3
   2031a:	2b00      	cmp	r3, #0
   2031c:	d000      	beq.n	20320 <hif_send+0xa4>
   2031e:	e129      	b.n	20574 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   20320:	2300      	movs	r3, #0
   20322:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   20324:	230e      	movs	r3, #14
   20326:	18fb      	adds	r3, r7, r3
   20328:	2200      	movs	r2, #0
   2032a:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   2032c:	2300      	movs	r3, #0
   2032e:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   20330:	1dfb      	adds	r3, r7, #7
   20332:	781a      	ldrb	r2, [r3, #0]
   20334:	697b      	ldr	r3, [r7, #20]
   20336:	4313      	orrs	r3, r2
   20338:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   2033a:	1dbb      	adds	r3, r7, #6
   2033c:	781b      	ldrb	r3, [r3, #0]
   2033e:	021a      	lsls	r2, r3, #8
   20340:	697b      	ldr	r3, [r7, #20]
   20342:	4313      	orrs	r3, r2
   20344:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   20346:	2318      	movs	r3, #24
   20348:	18fb      	adds	r3, r7, r3
   2034a:	885b      	ldrh	r3, [r3, #2]
   2034c:	b29b      	uxth	r3, r3
   2034e:	041a      	lsls	r2, r3, #16
   20350:	697b      	ldr	r3, [r7, #20]
   20352:	4313      	orrs	r3, r2
   20354:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   20356:	697b      	ldr	r3, [r7, #20]
   20358:	221f      	movs	r2, #31
   2035a:	18bc      	adds	r4, r7, r2
   2035c:	4a9e      	ldr	r2, [pc, #632]	; (205d8 <hif_send+0x35c>)
   2035e:	0019      	movs	r1, r3
   20360:	0010      	movs	r0, r2
   20362:	4b9e      	ldr	r3, [pc, #632]	; (205dc <hif_send+0x360>)
   20364:	4798      	blx	r3
   20366:	0003      	movs	r3, r0
   20368:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   2036a:	231f      	movs	r3, #31
   2036c:	18fb      	adds	r3, r7, r3
   2036e:	781b      	ldrb	r3, [r3, #0]
   20370:	b25b      	sxtb	r3, r3
   20372:	2b00      	cmp	r3, #0
   20374:	d000      	beq.n	20378 <hif_send+0xfc>
   20376:	e119      	b.n	205ac <hif_send+0x330>

		reg = 0UL;
   20378:	2300      	movs	r3, #0
   2037a:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   2037c:	697b      	ldr	r3, [r7, #20]
   2037e:	2202      	movs	r2, #2
   20380:	4313      	orrs	r3, r2
   20382:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   20384:	697b      	ldr	r3, [r7, #20]
   20386:	221f      	movs	r2, #31
   20388:	18bc      	adds	r4, r7, r2
   2038a:	4a95      	ldr	r2, [pc, #596]	; (205e0 <hif_send+0x364>)
   2038c:	0019      	movs	r1, r3
   2038e:	0010      	movs	r0, r2
   20390:	4b92      	ldr	r3, [pc, #584]	; (205dc <hif_send+0x360>)
   20392:	4798      	blx	r3
   20394:	0003      	movs	r3, r0
   20396:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   20398:	231f      	movs	r3, #31
   2039a:	18fb      	adds	r3, r7, r3
   2039c:	781b      	ldrb	r3, [r3, #0]
   2039e:	b25b      	sxtb	r3, r3
   203a0:	2b00      	cmp	r3, #0
   203a2:	d000      	beq.n	203a6 <hif_send+0x12a>
   203a4:	e104      	b.n	205b0 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   203a6:	2300      	movs	r3, #0
   203a8:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   203aa:	230e      	movs	r3, #14
   203ac:	18fb      	adds	r3, r7, r3
   203ae:	2200      	movs	r2, #0
   203b0:	801a      	strh	r2, [r3, #0]
   203b2:	e050      	b.n	20456 <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   203b4:	231f      	movs	r3, #31
   203b6:	18fc      	adds	r4, r7, r3
   203b8:	2314      	movs	r3, #20
   203ba:	18fb      	adds	r3, r7, r3
   203bc:	4a88      	ldr	r2, [pc, #544]	; (205e0 <hif_send+0x364>)
   203be:	0019      	movs	r1, r3
   203c0:	0010      	movs	r0, r2
   203c2:	4b88      	ldr	r3, [pc, #544]	; (205e4 <hif_send+0x368>)
   203c4:	4798      	blx	r3
   203c6:	0003      	movs	r3, r0
   203c8:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   203ca:	231f      	movs	r3, #31
   203cc:	18fb      	adds	r3, r7, r3
   203ce:	781b      	ldrb	r3, [r3, #0]
   203d0:	b25b      	sxtb	r3, r3
   203d2:	2b00      	cmp	r3, #0
   203d4:	d147      	bne.n	20466 <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   203d6:	230e      	movs	r3, #14
   203d8:	18fb      	adds	r3, r7, r3
   203da:	881b      	ldrh	r3, [r3, #0]
   203dc:	b29a      	uxth	r2, r3
   203de:	23f4      	movs	r3, #244	; 0xf4
   203e0:	33ff      	adds	r3, #255	; 0xff
   203e2:	429a      	cmp	r2, r3
   203e4:	d916      	bls.n	20414 <hif_send+0x198>
				if(cnt < 501) {
   203e6:	230e      	movs	r3, #14
   203e8:	18fb      	adds	r3, r7, r3
   203ea:	881b      	ldrh	r3, [r3, #0]
   203ec:	b29a      	uxth	r2, r3
   203ee:	23fa      	movs	r3, #250	; 0xfa
   203f0:	005b      	lsls	r3, r3, #1
   203f2:	429a      	cmp	r2, r3
   203f4:	d80b      	bhi.n	2040e <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   203f6:	4b7c      	ldr	r3, [pc, #496]	; (205e8 <hif_send+0x36c>)
   203f8:	0018      	movs	r0, r3
   203fa:	4b7c      	ldr	r3, [pc, #496]	; (205ec <hif_send+0x370>)
   203fc:	4798      	blx	r3
   203fe:	4b7c      	ldr	r3, [pc, #496]	; (205f0 <hif_send+0x374>)
   20400:	0018      	movs	r0, r3
   20402:	4b7a      	ldr	r3, [pc, #488]	; (205ec <hif_send+0x370>)
   20404:	4798      	blx	r3
   20406:	4b7b      	ldr	r3, [pc, #492]	; (205f4 <hif_send+0x378>)
   20408:	0018      	movs	r0, r3
   2040a:	4b78      	ldr	r3, [pc, #480]	; (205ec <hif_send+0x370>)
   2040c:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   2040e:	2001      	movs	r0, #1
   20410:	4b79      	ldr	r3, [pc, #484]	; (205f8 <hif_send+0x37c>)
   20412:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   20414:	697b      	ldr	r3, [r7, #20]
   20416:	2202      	movs	r2, #2
   20418:	4013      	ands	r3, r2
   2041a:	d113      	bne.n	20444 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   2041c:	231f      	movs	r3, #31
   2041e:	18fc      	adds	r4, r7, r3
   20420:	2310      	movs	r3, #16
   20422:	18fb      	adds	r3, r7, r3
   20424:	4a75      	ldr	r2, [pc, #468]	; (205fc <hif_send+0x380>)
   20426:	0019      	movs	r1, r3
   20428:	0010      	movs	r0, r2
   2042a:	4b6e      	ldr	r3, [pc, #440]	; (205e4 <hif_send+0x368>)
   2042c:	4798      	blx	r3
   2042e:	0003      	movs	r3, r0
   20430:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   20432:	231f      	movs	r3, #31
   20434:	18fb      	adds	r3, r7, r3
   20436:	781b      	ldrb	r3, [r3, #0]
   20438:	b25b      	sxtb	r3, r3
   2043a:	2b00      	cmp	r3, #0
   2043c:	d015      	beq.n	2046a <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   2043e:	2300      	movs	r3, #0
   20440:	613b      	str	r3, [r7, #16]
					goto ERR1;
   20442:	e0bc      	b.n	205be <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   20444:	230e      	movs	r3, #14
   20446:	18fb      	adds	r3, r7, r3
   20448:	881b      	ldrh	r3, [r3, #0]
   2044a:	b29b      	uxth	r3, r3
   2044c:	3301      	adds	r3, #1
   2044e:	b29a      	uxth	r2, r3
   20450:	230e      	movs	r3, #14
   20452:	18fb      	adds	r3, r7, r3
   20454:	801a      	strh	r2, [r3, #0]
   20456:	230e      	movs	r3, #14
   20458:	18fb      	adds	r3, r7, r3
   2045a:	881b      	ldrh	r3, [r3, #0]
   2045c:	b29b      	uxth	r3, r3
   2045e:	4a68      	ldr	r2, [pc, #416]	; (20600 <hif_send+0x384>)
   20460:	4293      	cmp	r3, r2
   20462:	d9a7      	bls.n	203b4 <hif_send+0x138>
   20464:	e002      	b.n	2046c <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   20466:	46c0      	nop			; (mov r8, r8)
   20468:	e000      	b.n	2046c <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   2046a:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   2046c:	693b      	ldr	r3, [r7, #16]
   2046e:	2b00      	cmp	r3, #0
   20470:	d100      	bne.n	20474 <hif_send+0x1f8>
   20472:	e074      	b.n	2055e <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   20474:	693b      	ldr	r3, [r7, #16]
   20476:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   20478:	2318      	movs	r3, #24
   2047a:	18fb      	adds	r3, r7, r3
   2047c:	885b      	ldrh	r3, [r3, #2]
   2047e:	b29a      	uxth	r2, r3
   20480:	2318      	movs	r3, #24
   20482:	18fb      	adds	r3, r7, r3
   20484:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   20486:	68bb      	ldr	r3, [r7, #8]
   20488:	221f      	movs	r2, #31
   2048a:	18bc      	adds	r4, r7, r2
   2048c:	2218      	movs	r2, #24
   2048e:	18b9      	adds	r1, r7, r2
   20490:	2208      	movs	r2, #8
   20492:	0018      	movs	r0, r3
   20494:	4b5b      	ldr	r3, [pc, #364]	; (20604 <hif_send+0x388>)
   20496:	4798      	blx	r3
   20498:	0003      	movs	r3, r0
   2049a:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   2049c:	231f      	movs	r3, #31
   2049e:	18fb      	adds	r3, r7, r3
   204a0:	781b      	ldrb	r3, [r3, #0]
   204a2:	b25b      	sxtb	r3, r3
   204a4:	2b00      	cmp	r3, #0
   204a6:	d000      	beq.n	204aa <hif_send+0x22e>
   204a8:	e084      	b.n	205b4 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   204aa:	68bb      	ldr	r3, [r7, #8]
   204ac:	3308      	adds	r3, #8
   204ae:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   204b0:	683b      	ldr	r3, [r7, #0]
   204b2:	2b00      	cmp	r3, #0
   204b4:	d016      	beq.n	204e4 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   204b6:	68b8      	ldr	r0, [r7, #8]
   204b8:	1d3b      	adds	r3, r7, #4
   204ba:	881a      	ldrh	r2, [r3, #0]
   204bc:	231f      	movs	r3, #31
   204be:	18fc      	adds	r4, r7, r3
   204c0:	683b      	ldr	r3, [r7, #0]
   204c2:	0019      	movs	r1, r3
   204c4:	4b4f      	ldr	r3, [pc, #316]	; (20604 <hif_send+0x388>)
   204c6:	4798      	blx	r3
   204c8:	0003      	movs	r3, r0
   204ca:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   204cc:	231f      	movs	r3, #31
   204ce:	18fb      	adds	r3, r7, r3
   204d0:	781b      	ldrb	r3, [r3, #0]
   204d2:	b25b      	sxtb	r3, r3
   204d4:	2b00      	cmp	r3, #0
   204d6:	d000      	beq.n	204da <hif_send+0x25e>
   204d8:	e06e      	b.n	205b8 <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   204da:	1d3b      	adds	r3, r7, #4
   204dc:	881a      	ldrh	r2, [r3, #0]
   204de:	68bb      	ldr	r3, [r7, #8]
   204e0:	18d3      	adds	r3, r2, r3
   204e2:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   204e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   204e6:	2b00      	cmp	r3, #0
   204e8:	d021      	beq.n	2052e <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   204ea:	2338      	movs	r3, #56	; 0x38
   204ec:	18fb      	adds	r3, r7, r3
   204ee:	881a      	ldrh	r2, [r3, #0]
   204f0:	1d3b      	adds	r3, r7, #4
   204f2:	881b      	ldrh	r3, [r3, #0]
   204f4:	1ad3      	subs	r3, r2, r3
   204f6:	001a      	movs	r2, r3
   204f8:	68bb      	ldr	r3, [r7, #8]
   204fa:	18d3      	adds	r3, r2, r3
   204fc:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   204fe:	68b8      	ldr	r0, [r7, #8]
   20500:	2334      	movs	r3, #52	; 0x34
   20502:	18fb      	adds	r3, r7, r3
   20504:	881a      	ldrh	r2, [r3, #0]
   20506:	231f      	movs	r3, #31
   20508:	18fc      	adds	r4, r7, r3
   2050a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2050c:	0019      	movs	r1, r3
   2050e:	4b3d      	ldr	r3, [pc, #244]	; (20604 <hif_send+0x388>)
   20510:	4798      	blx	r3
   20512:	0003      	movs	r3, r0
   20514:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   20516:	231f      	movs	r3, #31
   20518:	18fb      	adds	r3, r7, r3
   2051a:	781b      	ldrb	r3, [r3, #0]
   2051c:	b25b      	sxtb	r3, r3
   2051e:	2b00      	cmp	r3, #0
   20520:	d14c      	bne.n	205bc <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   20522:	2334      	movs	r3, #52	; 0x34
   20524:	18fb      	adds	r3, r7, r3
   20526:	881a      	ldrh	r2, [r3, #0]
   20528:	68bb      	ldr	r3, [r7, #8]
   2052a:	18d3      	adds	r3, r2, r3
   2052c:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   2052e:	693b      	ldr	r3, [r7, #16]
   20530:	009b      	lsls	r3, r3, #2
   20532:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   20534:	697b      	ldr	r3, [r7, #20]
   20536:	2202      	movs	r2, #2
   20538:	4313      	orrs	r3, r2
   2053a:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   2053c:	697b      	ldr	r3, [r7, #20]
   2053e:	221f      	movs	r2, #31
   20540:	18bc      	adds	r4, r7, r2
   20542:	4a31      	ldr	r2, [pc, #196]	; (20608 <hif_send+0x38c>)
   20544:	0019      	movs	r1, r3
   20546:	0010      	movs	r0, r2
   20548:	4b24      	ldr	r3, [pc, #144]	; (205dc <hif_send+0x360>)
   2054a:	4798      	blx	r3
   2054c:	0003      	movs	r3, r0
   2054e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   20550:	231f      	movs	r3, #31
   20552:	18fb      	adds	r3, r7, r3
   20554:	781b      	ldrb	r3, [r3, #0]
   20556:	b25b      	sxtb	r3, r3
   20558:	2b00      	cmp	r3, #0
   2055a:	d01c      	beq.n	20596 <hif_send+0x31a>
   2055c:	e02f      	b.n	205be <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   2055e:	231f      	movs	r3, #31
   20560:	18fc      	adds	r4, r7, r3
   20562:	4b2a      	ldr	r3, [pc, #168]	; (2060c <hif_send+0x390>)
   20564:	4798      	blx	r3
   20566:	0003      	movs	r3, r0
   20568:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   2056a:	231f      	movs	r3, #31
   2056c:	18fb      	adds	r3, r7, r3
   2056e:	22fd      	movs	r2, #253	; 0xfd
   20570:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   20572:	e026      	b.n	205c2 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   20574:	2398      	movs	r3, #152	; 0x98
   20576:	33ff      	adds	r3, #255	; 0xff
   20578:	001a      	movs	r2, r3
   2057a:	4925      	ldr	r1, [pc, #148]	; (20610 <hif_send+0x394>)
   2057c:	4b25      	ldr	r3, [pc, #148]	; (20614 <hif_send+0x398>)
   2057e:	0018      	movs	r0, r3
   20580:	4b1a      	ldr	r3, [pc, #104]	; (205ec <hif_send+0x370>)
   20582:	4798      	blx	r3
   20584:	4b24      	ldr	r3, [pc, #144]	; (20618 <hif_send+0x39c>)
   20586:	0018      	movs	r0, r3
   20588:	4b18      	ldr	r3, [pc, #96]	; (205ec <hif_send+0x370>)
   2058a:	4798      	blx	r3
   2058c:	4b19      	ldr	r3, [pc, #100]	; (205f4 <hif_send+0x378>)
   2058e:	0018      	movs	r0, r3
   20590:	4b16      	ldr	r3, [pc, #88]	; (205ec <hif_send+0x370>)
   20592:	4798      	blx	r3
		goto ERR2;
   20594:	e015      	b.n	205c2 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   20596:	231f      	movs	r3, #31
   20598:	18fc      	adds	r4, r7, r3
   2059a:	4b1c      	ldr	r3, [pc, #112]	; (2060c <hif_send+0x390>)
   2059c:	4798      	blx	r3
   2059e:	0003      	movs	r3, r0
   205a0:	7023      	strb	r3, [r4, #0]
	return ret;
   205a2:	231f      	movs	r3, #31
   205a4:	18fb      	adds	r3, r7, r3
   205a6:	781b      	ldrb	r3, [r3, #0]
   205a8:	b25b      	sxtb	r3, r3
   205aa:	e00e      	b.n	205ca <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   205ac:	46c0      	nop			; (mov r8, r8)
   205ae:	e006      	b.n	205be <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   205b0:	46c0      	nop			; (mov r8, r8)
   205b2:	e004      	b.n	205be <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   205b4:	46c0      	nop			; (mov r8, r8)
   205b6:	e002      	b.n	205be <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   205b8:	46c0      	nop			; (mov r8, r8)
   205ba:	e000      	b.n	205be <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   205bc:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   205be:	4b17      	ldr	r3, [pc, #92]	; (2061c <hif_send+0x3a0>)
   205c0:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   205c2:	231f      	movs	r3, #31
   205c4:	18fb      	adds	r3, r7, r3
   205c6:	781b      	ldrb	r3, [r3, #0]
   205c8:	b25b      	sxtb	r3, r3
}
   205ca:	0018      	movs	r0, r3
   205cc:	46bd      	mov	sp, r7
   205ce:	b009      	add	sp, #36	; 0x24
   205d0:	bd90      	pop	{r4, r7, pc}
   205d2:	46c0      	nop			; (mov r8, r8)
   205d4:	00020145 	.word	0x00020145
   205d8:	0000108c 	.word	0x0000108c
   205dc:	000220d1 	.word	0x000220d1
   205e0:	00001078 	.word	0x00001078
   205e4:	000220ad 	.word	0x000220ad
   205e8:	00037a30 	.word	0x00037a30
   205ec:	0001d2e9 	.word	0x0001d2e9
   205f0:	00037a3c 	.word	0x00037a3c
   205f4:	00037a50 	.word	0x00037a50
   205f8:	0001f73d 	.word	0x0001f73d
   205fc:	00150400 	.word	0x00150400
   20600:	000003e7 	.word	0x000003e7
   20604:	00022219 	.word	0x00022219
   20608:	0000106c 	.word	0x0000106c
   2060c:	000201dd 	.word	0x000201dd
   20610:	00037d58 	.word	0x00037d58
   20614:	00037a54 	.word	0x00037a54
   20618:	00037a68 	.word	0x00037a68
   2061c:	000201b5 	.word	0x000201b5

00020620 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   20620:	b590      	push	{r4, r7, lr}
   20622:	b087      	sub	sp, #28
   20624:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   20626:	230f      	movs	r3, #15
   20628:	18fb      	adds	r3, r7, r3
   2062a:	2200      	movs	r2, #0
   2062c:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   2062e:	230f      	movs	r3, #15
   20630:	18fc      	adds	r4, r7, r3
   20632:	2308      	movs	r3, #8
   20634:	18fb      	adds	r3, r7, r3
   20636:	4adc      	ldr	r2, [pc, #880]	; (209a8 <hif_isr+0x388>)
   20638:	0019      	movs	r1, r3
   2063a:	0010      	movs	r0, r2
   2063c:	4bdb      	ldr	r3, [pc, #876]	; (209ac <hif_isr+0x38c>)
   2063e:	4798      	blx	r3
   20640:	0003      	movs	r3, r0
   20642:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   20644:	230f      	movs	r3, #15
   20646:	18fb      	adds	r3, r7, r3
   20648:	781b      	ldrb	r3, [r3, #0]
   2064a:	b25b      	sxtb	r3, r3
   2064c:	2b00      	cmp	r3, #0
   2064e:	d000      	beq.n	20652 <hif_isr+0x32>
   20650:	e21e      	b.n	20a90 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   20652:	68bb      	ldr	r3, [r7, #8]
   20654:	2201      	movs	r2, #1
   20656:	4013      	ands	r3, r2
   20658:	d100      	bne.n	2065c <hif_isr+0x3c>
   2065a:	e204      	b.n	20a66 <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   2065c:	2000      	movs	r0, #0
   2065e:	4bd4      	ldr	r3, [pc, #848]	; (209b0 <hif_isr+0x390>)
   20660:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   20662:	68bb      	ldr	r3, [r7, #8]
   20664:	2201      	movs	r2, #1
   20666:	4393      	bics	r3, r2
   20668:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   2066a:	68bb      	ldr	r3, [r7, #8]
   2066c:	220f      	movs	r2, #15
   2066e:	18bc      	adds	r4, r7, r2
   20670:	4acd      	ldr	r2, [pc, #820]	; (209a8 <hif_isr+0x388>)
   20672:	0019      	movs	r1, r3
   20674:	0010      	movs	r0, r2
   20676:	4bcf      	ldr	r3, [pc, #828]	; (209b4 <hif_isr+0x394>)
   20678:	4798      	blx	r3
   2067a:	0003      	movs	r3, r0
   2067c:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   2067e:	230f      	movs	r3, #15
   20680:	18fb      	adds	r3, r7, r3
   20682:	781b      	ldrb	r3, [r3, #0]
   20684:	b25b      	sxtb	r3, r3
   20686:	2b00      	cmp	r3, #0
   20688:	d000      	beq.n	2068c <hif_isr+0x6c>
   2068a:	e210      	b.n	20aae <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   2068c:	4bca      	ldr	r3, [pc, #808]	; (209b8 <hif_isr+0x398>)
   2068e:	2201      	movs	r2, #1
   20690:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   20692:	68bb      	ldr	r3, [r7, #8]
   20694:	089b      	lsrs	r3, r3, #2
   20696:	b29a      	uxth	r2, r3
   20698:	230c      	movs	r3, #12
   2069a:	18fb      	adds	r3, r7, r3
   2069c:	0512      	lsls	r2, r2, #20
   2069e:	0d12      	lsrs	r2, r2, #20
   206a0:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   206a2:	230c      	movs	r3, #12
   206a4:	18fb      	adds	r3, r7, r3
   206a6:	881b      	ldrh	r3, [r3, #0]
   206a8:	2b00      	cmp	r3, #0
   206aa:	d100      	bne.n	206ae <hif_isr+0x8e>
   206ac:	e1c8      	b.n	20a40 <hif_isr+0x420>
				uint32 address = 0;
   206ae:	2300      	movs	r3, #0
   206b0:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   206b2:	230f      	movs	r3, #15
   206b4:	18fc      	adds	r4, r7, r3
   206b6:	003b      	movs	r3, r7
   206b8:	4ac0      	ldr	r2, [pc, #768]	; (209bc <hif_isr+0x39c>)
   206ba:	0019      	movs	r1, r3
   206bc:	0010      	movs	r0, r2
   206be:	4bbb      	ldr	r3, [pc, #748]	; (209ac <hif_isr+0x38c>)
   206c0:	4798      	blx	r3
   206c2:	0003      	movs	r3, r0
   206c4:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   206c6:	230f      	movs	r3, #15
   206c8:	18fb      	adds	r3, r7, r3
   206ca:	781b      	ldrb	r3, [r3, #0]
   206cc:	b25b      	sxtb	r3, r3
   206ce:	2b00      	cmp	r3, #0
   206d0:	d012      	beq.n	206f8 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   206d2:	23e4      	movs	r3, #228	; 0xe4
   206d4:	005a      	lsls	r2, r3, #1
   206d6:	49ba      	ldr	r1, [pc, #744]	; (209c0 <hif_isr+0x3a0>)
   206d8:	4bba      	ldr	r3, [pc, #744]	; (209c4 <hif_isr+0x3a4>)
   206da:	0018      	movs	r0, r3
   206dc:	4bba      	ldr	r3, [pc, #744]	; (209c8 <hif_isr+0x3a8>)
   206de:	4798      	blx	r3
   206e0:	4bba      	ldr	r3, [pc, #744]	; (209cc <hif_isr+0x3ac>)
   206e2:	0018      	movs	r0, r3
   206e4:	4bb8      	ldr	r3, [pc, #736]	; (209c8 <hif_isr+0x3a8>)
   206e6:	4798      	blx	r3
   206e8:	4bb9      	ldr	r3, [pc, #740]	; (209d0 <hif_isr+0x3b0>)
   206ea:	0018      	movs	r0, r3
   206ec:	4bb6      	ldr	r3, [pc, #728]	; (209c8 <hif_isr+0x3a8>)
   206ee:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   206f0:	2001      	movs	r0, #1
   206f2:	4baf      	ldr	r3, [pc, #700]	; (209b0 <hif_isr+0x390>)
   206f4:	4798      	blx	r3
					goto ERR1;
   206f6:	e1db      	b.n	20ab0 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   206f8:	683a      	ldr	r2, [r7, #0]
   206fa:	4baf      	ldr	r3, [pc, #700]	; (209b8 <hif_isr+0x398>)
   206fc:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   206fe:	230c      	movs	r3, #12
   20700:	18fb      	adds	r3, r7, r3
   20702:	881a      	ldrh	r2, [r3, #0]
   20704:	4bac      	ldr	r3, [pc, #688]	; (209b8 <hif_isr+0x398>)
   20706:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   20708:	683b      	ldr	r3, [r7, #0]
   2070a:	220f      	movs	r2, #15
   2070c:	18bc      	adds	r4, r7, r2
   2070e:	1d39      	adds	r1, r7, #4
   20710:	2204      	movs	r2, #4
   20712:	0018      	movs	r0, r3
   20714:	4baf      	ldr	r3, [pc, #700]	; (209d4 <hif_isr+0x3b4>)
   20716:	4798      	blx	r3
   20718:	0003      	movs	r3, r0
   2071a:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   2071c:	1d3b      	adds	r3, r7, #4
   2071e:	885b      	ldrh	r3, [r3, #2]
   20720:	b29a      	uxth	r2, r3
   20722:	1d3b      	adds	r3, r7, #4
   20724:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   20726:	230f      	movs	r3, #15
   20728:	18fb      	adds	r3, r7, r3
   2072a:	781b      	ldrb	r3, [r3, #0]
   2072c:	b25b      	sxtb	r3, r3
   2072e:	2b00      	cmp	r3, #0
   20730:	d012      	beq.n	20758 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   20732:	23e9      	movs	r3, #233	; 0xe9
   20734:	005a      	lsls	r2, r3, #1
   20736:	49a2      	ldr	r1, [pc, #648]	; (209c0 <hif_isr+0x3a0>)
   20738:	4ba2      	ldr	r3, [pc, #648]	; (209c4 <hif_isr+0x3a4>)
   2073a:	0018      	movs	r0, r3
   2073c:	4ba2      	ldr	r3, [pc, #648]	; (209c8 <hif_isr+0x3a8>)
   2073e:	4798      	blx	r3
   20740:	4ba5      	ldr	r3, [pc, #660]	; (209d8 <hif_isr+0x3b8>)
   20742:	0018      	movs	r0, r3
   20744:	4ba0      	ldr	r3, [pc, #640]	; (209c8 <hif_isr+0x3a8>)
   20746:	4798      	blx	r3
   20748:	4ba1      	ldr	r3, [pc, #644]	; (209d0 <hif_isr+0x3b0>)
   2074a:	0018      	movs	r0, r3
   2074c:	4b9e      	ldr	r3, [pc, #632]	; (209c8 <hif_isr+0x3a8>)
   2074e:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   20750:	2001      	movs	r0, #1
   20752:	4b97      	ldr	r3, [pc, #604]	; (209b0 <hif_isr+0x390>)
   20754:	4798      	blx	r3
					goto ERR1;
   20756:	e1ab      	b.n	20ab0 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   20758:	1d3b      	adds	r3, r7, #4
   2075a:	885b      	ldrh	r3, [r3, #2]
   2075c:	b29b      	uxth	r3, r3
   2075e:	220c      	movs	r2, #12
   20760:	18ba      	adds	r2, r7, r2
   20762:	8812      	ldrh	r2, [r2, #0]
   20764:	429a      	cmp	r2, r3
   20766:	d02f      	beq.n	207c8 <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   20768:	230c      	movs	r3, #12
   2076a:	18fb      	adds	r3, r7, r3
   2076c:	881b      	ldrh	r3, [r3, #0]
   2076e:	1d3a      	adds	r2, r7, #4
   20770:	8852      	ldrh	r2, [r2, #2]
   20772:	b292      	uxth	r2, r2
   20774:	1a9b      	subs	r3, r3, r2
   20776:	2b04      	cmp	r3, #4
   20778:	dd26      	ble.n	207c8 <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   2077a:	23dc      	movs	r3, #220	; 0xdc
   2077c:	33ff      	adds	r3, #255	; 0xff
   2077e:	001a      	movs	r2, r3
   20780:	498f      	ldr	r1, [pc, #572]	; (209c0 <hif_isr+0x3a0>)
   20782:	4b90      	ldr	r3, [pc, #576]	; (209c4 <hif_isr+0x3a4>)
   20784:	0018      	movs	r0, r3
   20786:	4b90      	ldr	r3, [pc, #576]	; (209c8 <hif_isr+0x3a8>)
   20788:	4798      	blx	r3
   2078a:	230c      	movs	r3, #12
   2078c:	18fb      	adds	r3, r7, r3
   2078e:	8819      	ldrh	r1, [r3, #0]
   20790:	1d3b      	adds	r3, r7, #4
   20792:	885b      	ldrh	r3, [r3, #2]
   20794:	b29b      	uxth	r3, r3
   20796:	001a      	movs	r2, r3
   20798:	1d3b      	adds	r3, r7, #4
   2079a:	781b      	ldrb	r3, [r3, #0]
   2079c:	b2db      	uxtb	r3, r3
   2079e:	001c      	movs	r4, r3
   207a0:	1d3b      	adds	r3, r7, #4
   207a2:	785b      	ldrb	r3, [r3, #1]
   207a4:	b2db      	uxtb	r3, r3
   207a6:	488d      	ldr	r0, [pc, #564]	; (209dc <hif_isr+0x3bc>)
   207a8:	9300      	str	r3, [sp, #0]
   207aa:	0023      	movs	r3, r4
   207ac:	4c86      	ldr	r4, [pc, #536]	; (209c8 <hif_isr+0x3a8>)
   207ae:	47a0      	blx	r4
   207b0:	4b87      	ldr	r3, [pc, #540]	; (209d0 <hif_isr+0x3b0>)
   207b2:	0018      	movs	r0, r3
   207b4:	4b84      	ldr	r3, [pc, #528]	; (209c8 <hif_isr+0x3a8>)
   207b6:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   207b8:	2001      	movs	r0, #1
   207ba:	4b7d      	ldr	r3, [pc, #500]	; (209b0 <hif_isr+0x390>)
   207bc:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   207be:	230f      	movs	r3, #15
   207c0:	18fb      	adds	r3, r7, r3
   207c2:	22fa      	movs	r2, #250	; 0xfa
   207c4:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   207c6:	e173      	b.n	20ab0 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   207c8:	1d3b      	adds	r3, r7, #4
   207ca:	781b      	ldrb	r3, [r3, #0]
   207cc:	b2db      	uxtb	r3, r3
   207ce:	2b01      	cmp	r3, #1
   207d0:	d122      	bne.n	20818 <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   207d2:	4b79      	ldr	r3, [pc, #484]	; (209b8 <hif_isr+0x398>)
   207d4:	691b      	ldr	r3, [r3, #16]
   207d6:	2b00      	cmp	r3, #0
   207d8:	d00d      	beq.n	207f6 <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   207da:	4b77      	ldr	r3, [pc, #476]	; (209b8 <hif_isr+0x398>)
   207dc:	691b      	ldr	r3, [r3, #16]
   207de:	1d3a      	adds	r2, r7, #4
   207e0:	7852      	ldrb	r2, [r2, #1]
   207e2:	b2d0      	uxtb	r0, r2
   207e4:	1d3a      	adds	r2, r7, #4
   207e6:	8852      	ldrh	r2, [r2, #2]
   207e8:	b292      	uxth	r2, r2
   207ea:	3a08      	subs	r2, #8
   207ec:	b291      	uxth	r1, r2
   207ee:	683a      	ldr	r2, [r7, #0]
   207f0:	3208      	adds	r2, #8
   207f2:	4798      	blx	r3
   207f4:	e102      	b.n	209fc <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   207f6:	23e8      	movs	r3, #232	; 0xe8
   207f8:	33ff      	adds	r3, #255	; 0xff
   207fa:	001a      	movs	r2, r3
   207fc:	4970      	ldr	r1, [pc, #448]	; (209c0 <hif_isr+0x3a0>)
   207fe:	4b71      	ldr	r3, [pc, #452]	; (209c4 <hif_isr+0x3a4>)
   20800:	0018      	movs	r0, r3
   20802:	4b71      	ldr	r3, [pc, #452]	; (209c8 <hif_isr+0x3a8>)
   20804:	4798      	blx	r3
   20806:	4b76      	ldr	r3, [pc, #472]	; (209e0 <hif_isr+0x3c0>)
   20808:	0018      	movs	r0, r3
   2080a:	4b6f      	ldr	r3, [pc, #444]	; (209c8 <hif_isr+0x3a8>)
   2080c:	4798      	blx	r3
   2080e:	4b70      	ldr	r3, [pc, #448]	; (209d0 <hif_isr+0x3b0>)
   20810:	0018      	movs	r0, r3
   20812:	4b6d      	ldr	r3, [pc, #436]	; (209c8 <hif_isr+0x3a8>)
   20814:	4798      	blx	r3
   20816:	e0f1      	b.n	209fc <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   20818:	1d3b      	adds	r3, r7, #4
   2081a:	781b      	ldrb	r3, [r3, #0]
   2081c:	b2db      	uxtb	r3, r3
   2081e:	2b02      	cmp	r3, #2
   20820:	d122      	bne.n	20868 <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   20822:	4b65      	ldr	r3, [pc, #404]	; (209b8 <hif_isr+0x398>)
   20824:	695b      	ldr	r3, [r3, #20]
   20826:	2b00      	cmp	r3, #0
   20828:	d00d      	beq.n	20846 <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2082a:	4b63      	ldr	r3, [pc, #396]	; (209b8 <hif_isr+0x398>)
   2082c:	695b      	ldr	r3, [r3, #20]
   2082e:	1d3a      	adds	r2, r7, #4
   20830:	7852      	ldrb	r2, [r2, #1]
   20832:	b2d0      	uxtb	r0, r2
   20834:	1d3a      	adds	r2, r7, #4
   20836:	8852      	ldrh	r2, [r2, #2]
   20838:	b292      	uxth	r2, r2
   2083a:	3a08      	subs	r2, #8
   2083c:	b291      	uxth	r1, r2
   2083e:	683a      	ldr	r2, [r7, #0]
   20840:	3208      	adds	r2, #8
   20842:	4798      	blx	r3
   20844:	e0da      	b.n	209fc <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   20846:	23f0      	movs	r3, #240	; 0xf0
   20848:	33ff      	adds	r3, #255	; 0xff
   2084a:	001a      	movs	r2, r3
   2084c:	495c      	ldr	r1, [pc, #368]	; (209c0 <hif_isr+0x3a0>)
   2084e:	4b5d      	ldr	r3, [pc, #372]	; (209c4 <hif_isr+0x3a4>)
   20850:	0018      	movs	r0, r3
   20852:	4b5d      	ldr	r3, [pc, #372]	; (209c8 <hif_isr+0x3a8>)
   20854:	4798      	blx	r3
   20856:	4b63      	ldr	r3, [pc, #396]	; (209e4 <hif_isr+0x3c4>)
   20858:	0018      	movs	r0, r3
   2085a:	4b5b      	ldr	r3, [pc, #364]	; (209c8 <hif_isr+0x3a8>)
   2085c:	4798      	blx	r3
   2085e:	4b5c      	ldr	r3, [pc, #368]	; (209d0 <hif_isr+0x3b0>)
   20860:	0018      	movs	r0, r3
   20862:	4b59      	ldr	r3, [pc, #356]	; (209c8 <hif_isr+0x3a8>)
   20864:	4798      	blx	r3
   20866:	e0c9      	b.n	209fc <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   20868:	1d3b      	adds	r3, r7, #4
   2086a:	781b      	ldrb	r3, [r3, #0]
   2086c:	b2db      	uxtb	r3, r3
   2086e:	2b04      	cmp	r3, #4
   20870:	d122      	bne.n	208b8 <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   20872:	4b51      	ldr	r3, [pc, #324]	; (209b8 <hif_isr+0x398>)
   20874:	699b      	ldr	r3, [r3, #24]
   20876:	2b00      	cmp	r3, #0
   20878:	d00d      	beq.n	20896 <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2087a:	4b4f      	ldr	r3, [pc, #316]	; (209b8 <hif_isr+0x398>)
   2087c:	699b      	ldr	r3, [r3, #24]
   2087e:	1d3a      	adds	r2, r7, #4
   20880:	7852      	ldrb	r2, [r2, #1]
   20882:	b2d0      	uxtb	r0, r2
   20884:	1d3a      	adds	r2, r7, #4
   20886:	8852      	ldrh	r2, [r2, #2]
   20888:	b292      	uxth	r2, r2
   2088a:	3a08      	subs	r2, #8
   2088c:	b291      	uxth	r1, r2
   2088e:	683a      	ldr	r2, [r7, #0]
   20890:	3208      	adds	r2, #8
   20892:	4798      	blx	r3
   20894:	e0b2      	b.n	209fc <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   20896:	23f8      	movs	r3, #248	; 0xf8
   20898:	33ff      	adds	r3, #255	; 0xff
   2089a:	001a      	movs	r2, r3
   2089c:	4948      	ldr	r1, [pc, #288]	; (209c0 <hif_isr+0x3a0>)
   2089e:	4b49      	ldr	r3, [pc, #292]	; (209c4 <hif_isr+0x3a4>)
   208a0:	0018      	movs	r0, r3
   208a2:	4b49      	ldr	r3, [pc, #292]	; (209c8 <hif_isr+0x3a8>)
   208a4:	4798      	blx	r3
   208a6:	4b50      	ldr	r3, [pc, #320]	; (209e8 <hif_isr+0x3c8>)
   208a8:	0018      	movs	r0, r3
   208aa:	4b47      	ldr	r3, [pc, #284]	; (209c8 <hif_isr+0x3a8>)
   208ac:	4798      	blx	r3
   208ae:	4b48      	ldr	r3, [pc, #288]	; (209d0 <hif_isr+0x3b0>)
   208b0:	0018      	movs	r0, r3
   208b2:	4b45      	ldr	r3, [pc, #276]	; (209c8 <hif_isr+0x3a8>)
   208b4:	4798      	blx	r3
   208b6:	e0a1      	b.n	209fc <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   208b8:	1d3b      	adds	r3, r7, #4
   208ba:	781b      	ldrb	r3, [r3, #0]
   208bc:	b2db      	uxtb	r3, r3
   208be:	2b06      	cmp	r3, #6
   208c0:	d121      	bne.n	20906 <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   208c2:	4b3d      	ldr	r3, [pc, #244]	; (209b8 <hif_isr+0x398>)
   208c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   208c6:	2b00      	cmp	r3, #0
   208c8:	d00d      	beq.n	208e6 <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   208ca:	4b3b      	ldr	r3, [pc, #236]	; (209b8 <hif_isr+0x398>)
   208cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   208ce:	1d3a      	adds	r2, r7, #4
   208d0:	7852      	ldrb	r2, [r2, #1]
   208d2:	b2d0      	uxtb	r0, r2
   208d4:	1d3a      	adds	r2, r7, #4
   208d6:	8852      	ldrh	r2, [r2, #2]
   208d8:	b292      	uxth	r2, r2
   208da:	3a08      	subs	r2, #8
   208dc:	b291      	uxth	r1, r2
   208de:	683a      	ldr	r2, [r7, #0]
   208e0:	3208      	adds	r2, #8
   208e2:	4798      	blx	r3
   208e4:	e08a      	b.n	209fc <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   208e6:	2380      	movs	r3, #128	; 0x80
   208e8:	009a      	lsls	r2, r3, #2
   208ea:	4935      	ldr	r1, [pc, #212]	; (209c0 <hif_isr+0x3a0>)
   208ec:	4b35      	ldr	r3, [pc, #212]	; (209c4 <hif_isr+0x3a4>)
   208ee:	0018      	movs	r0, r3
   208f0:	4b35      	ldr	r3, [pc, #212]	; (209c8 <hif_isr+0x3a8>)
   208f2:	4798      	blx	r3
   208f4:	4b3d      	ldr	r3, [pc, #244]	; (209ec <hif_isr+0x3cc>)
   208f6:	0018      	movs	r0, r3
   208f8:	4b33      	ldr	r3, [pc, #204]	; (209c8 <hif_isr+0x3a8>)
   208fa:	4798      	blx	r3
   208fc:	4b34      	ldr	r3, [pc, #208]	; (209d0 <hif_isr+0x3b0>)
   208fe:	0018      	movs	r0, r3
   20900:	4b31      	ldr	r3, [pc, #196]	; (209c8 <hif_isr+0x3a8>)
   20902:	4798      	blx	r3
   20904:	e07a      	b.n	209fc <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   20906:	1d3b      	adds	r3, r7, #4
   20908:	781b      	ldrb	r3, [r3, #0]
   2090a:	b2db      	uxtb	r3, r3
   2090c:	2b07      	cmp	r3, #7
   2090e:	d120      	bne.n	20952 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   20910:	4b29      	ldr	r3, [pc, #164]	; (209b8 <hif_isr+0x398>)
   20912:	69db      	ldr	r3, [r3, #28]
   20914:	2b00      	cmp	r3, #0
   20916:	d00d      	beq.n	20934 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20918:	4b27      	ldr	r3, [pc, #156]	; (209b8 <hif_isr+0x398>)
   2091a:	69db      	ldr	r3, [r3, #28]
   2091c:	1d3a      	adds	r2, r7, #4
   2091e:	7852      	ldrb	r2, [r2, #1]
   20920:	b2d0      	uxtb	r0, r2
   20922:	1d3a      	adds	r2, r7, #4
   20924:	8852      	ldrh	r2, [r2, #2]
   20926:	b292      	uxth	r2, r2
   20928:	3a08      	subs	r2, #8
   2092a:	b291      	uxth	r1, r2
   2092c:	683a      	ldr	r2, [r7, #0]
   2092e:	3208      	adds	r2, #8
   20930:	4798      	blx	r3
   20932:	e063      	b.n	209fc <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   20934:	4a2e      	ldr	r2, [pc, #184]	; (209f0 <hif_isr+0x3d0>)
   20936:	4922      	ldr	r1, [pc, #136]	; (209c0 <hif_isr+0x3a0>)
   20938:	4b22      	ldr	r3, [pc, #136]	; (209c4 <hif_isr+0x3a4>)
   2093a:	0018      	movs	r0, r3
   2093c:	4b22      	ldr	r3, [pc, #136]	; (209c8 <hif_isr+0x3a8>)
   2093e:	4798      	blx	r3
   20940:	4b2c      	ldr	r3, [pc, #176]	; (209f4 <hif_isr+0x3d4>)
   20942:	0018      	movs	r0, r3
   20944:	4b20      	ldr	r3, [pc, #128]	; (209c8 <hif_isr+0x3a8>)
   20946:	4798      	blx	r3
   20948:	4b21      	ldr	r3, [pc, #132]	; (209d0 <hif_isr+0x3b0>)
   2094a:	0018      	movs	r0, r3
   2094c:	4b1e      	ldr	r3, [pc, #120]	; (209c8 <hif_isr+0x3a8>)
   2094e:	4798      	blx	r3
   20950:	e054      	b.n	209fc <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   20952:	1d3b      	adds	r3, r7, #4
   20954:	781b      	ldrb	r3, [r3, #0]
   20956:	b2db      	uxtb	r3, r3
   20958:	2b05      	cmp	r3, #5
   2095a:	d111      	bne.n	20980 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   2095c:	4b16      	ldr	r3, [pc, #88]	; (209b8 <hif_isr+0x398>)
   2095e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20960:	2b00      	cmp	r3, #0
   20962:	d04b      	beq.n	209fc <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20964:	4b14      	ldr	r3, [pc, #80]	; (209b8 <hif_isr+0x398>)
   20966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20968:	1d3a      	adds	r2, r7, #4
   2096a:	7852      	ldrb	r2, [r2, #1]
   2096c:	b2d0      	uxtb	r0, r2
   2096e:	1d3a      	adds	r2, r7, #4
   20970:	8852      	ldrh	r2, [r2, #2]
   20972:	b292      	uxth	r2, r2
   20974:	3a08      	subs	r2, #8
   20976:	b291      	uxth	r1, r2
   20978:	683a      	ldr	r2, [r7, #0]
   2097a:	3208      	adds	r2, #8
   2097c:	4798      	blx	r3
   2097e:	e03d      	b.n	209fc <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   20980:	2384      	movs	r3, #132	; 0x84
   20982:	009a      	lsls	r2, r3, #2
   20984:	490e      	ldr	r1, [pc, #56]	; (209c0 <hif_isr+0x3a0>)
   20986:	4b0f      	ldr	r3, [pc, #60]	; (209c4 <hif_isr+0x3a4>)
   20988:	0018      	movs	r0, r3
   2098a:	4b0f      	ldr	r3, [pc, #60]	; (209c8 <hif_isr+0x3a8>)
   2098c:	4798      	blx	r3
   2098e:	4b1a      	ldr	r3, [pc, #104]	; (209f8 <hif_isr+0x3d8>)
   20990:	0018      	movs	r0, r3
   20992:	4b0d      	ldr	r3, [pc, #52]	; (209c8 <hif_isr+0x3a8>)
   20994:	4798      	blx	r3
   20996:	4b0e      	ldr	r3, [pc, #56]	; (209d0 <hif_isr+0x3b0>)
   20998:	0018      	movs	r0, r3
   2099a:	4b0b      	ldr	r3, [pc, #44]	; (209c8 <hif_isr+0x3a8>)
   2099c:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   2099e:	230f      	movs	r3, #15
   209a0:	18fb      	adds	r3, r7, r3
   209a2:	22fa      	movs	r2, #250	; 0xfa
   209a4:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   209a6:	e083      	b.n	20ab0 <hif_isr+0x490>
   209a8:	00001070 	.word	0x00001070
   209ac:	000220ad 	.word	0x000220ad
   209b0:	0001f7d1 	.word	0x0001f7d1
   209b4:	000220d1 	.word	0x000220d1
   209b8:	20005884 	.word	0x20005884
   209bc:	00001084 	.word	0x00001084
   209c0:	00037d64 	.word	0x00037d64
   209c4:	00037a54 	.word	0x00037a54
   209c8:	0001d2e9 	.word	0x0001d2e9
   209cc:	00037a88 	.word	0x00037a88
   209d0:	00037a50 	.word	0x00037a50
   209d4:	00022121 	.word	0x00022121
   209d8:	00037ab0 	.word	0x00037ab0
   209dc:	00037ac8 	.word	0x00037ac8
   209e0:	00037b08 	.word	0x00037b08
   209e4:	00037b2c 	.word	0x00037b2c
   209e8:	00037b50 	.word	0x00037b50
   209ec:	00037b70 	.word	0x00037b70
   209f0:	00000207 	.word	0x00000207
   209f4:	00037b94 	.word	0x00037b94
   209f8:	00037bb8 	.word	0x00037bb8
				}
				if(gstrHifCxt.u8HifRXDone)
   209fc:	4b30      	ldr	r3, [pc, #192]	; (20ac0 <hif_isr+0x4a0>)
   209fe:	789b      	ldrb	r3, [r3, #2]
   20a00:	b2db      	uxtb	r3, r3
   20a02:	2b00      	cmp	r3, #0
   20a04:	d054      	beq.n	20ab0 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   20a06:	4a2f      	ldr	r2, [pc, #188]	; (20ac4 <hif_isr+0x4a4>)
   20a08:	492f      	ldr	r1, [pc, #188]	; (20ac8 <hif_isr+0x4a8>)
   20a0a:	4b30      	ldr	r3, [pc, #192]	; (20acc <hif_isr+0x4ac>)
   20a0c:	0018      	movs	r0, r3
   20a0e:	4b30      	ldr	r3, [pc, #192]	; (20ad0 <hif_isr+0x4b0>)
   20a10:	4798      	blx	r3
   20a12:	1d3b      	adds	r3, r7, #4
   20a14:	781b      	ldrb	r3, [r3, #0]
   20a16:	b2db      	uxtb	r3, r3
   20a18:	0019      	movs	r1, r3
   20a1a:	1d3b      	adds	r3, r7, #4
   20a1c:	785b      	ldrb	r3, [r3, #1]
   20a1e:	b2db      	uxtb	r3, r3
   20a20:	001a      	movs	r2, r3
   20a22:	4b2c      	ldr	r3, [pc, #176]	; (20ad4 <hif_isr+0x4b4>)
   20a24:	0018      	movs	r0, r3
   20a26:	4b2a      	ldr	r3, [pc, #168]	; (20ad0 <hif_isr+0x4b0>)
   20a28:	4798      	blx	r3
   20a2a:	4b2b      	ldr	r3, [pc, #172]	; (20ad8 <hif_isr+0x4b8>)
   20a2c:	0018      	movs	r0, r3
   20a2e:	4b28      	ldr	r3, [pc, #160]	; (20ad0 <hif_isr+0x4b0>)
   20a30:	4798      	blx	r3
					ret = hif_set_rx_done();
   20a32:	230f      	movs	r3, #15
   20a34:	18fc      	adds	r4, r7, r3
   20a36:	4b29      	ldr	r3, [pc, #164]	; (20adc <hif_isr+0x4bc>)
   20a38:	4798      	blx	r3
   20a3a:	0003      	movs	r3, r0
   20a3c:	7023      	strb	r3, [r4, #0]
   20a3e:	e037      	b.n	20ab0 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   20a40:	4a27      	ldr	r2, [pc, #156]	; (20ae0 <hif_isr+0x4c0>)
   20a42:	4921      	ldr	r1, [pc, #132]	; (20ac8 <hif_isr+0x4a8>)
   20a44:	4b21      	ldr	r3, [pc, #132]	; (20acc <hif_isr+0x4ac>)
   20a46:	0018      	movs	r0, r3
   20a48:	4b21      	ldr	r3, [pc, #132]	; (20ad0 <hif_isr+0x4b0>)
   20a4a:	4798      	blx	r3
   20a4c:	4b25      	ldr	r3, [pc, #148]	; (20ae4 <hif_isr+0x4c4>)
   20a4e:	0018      	movs	r0, r3
   20a50:	4b1f      	ldr	r3, [pc, #124]	; (20ad0 <hif_isr+0x4b0>)
   20a52:	4798      	blx	r3
   20a54:	4b20      	ldr	r3, [pc, #128]	; (20ad8 <hif_isr+0x4b8>)
   20a56:	0018      	movs	r0, r3
   20a58:	4b1d      	ldr	r3, [pc, #116]	; (20ad0 <hif_isr+0x4b0>)
   20a5a:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   20a5c:	230f      	movs	r3, #15
   20a5e:	18fb      	adds	r3, r7, r3
   20a60:	22fe      	movs	r2, #254	; 0xfe
   20a62:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   20a64:	e024      	b.n	20ab0 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   20a66:	4a20      	ldr	r2, [pc, #128]	; (20ae8 <hif_isr+0x4c8>)
   20a68:	4917      	ldr	r1, [pc, #92]	; (20ac8 <hif_isr+0x4a8>)
   20a6a:	4b18      	ldr	r3, [pc, #96]	; (20acc <hif_isr+0x4ac>)
   20a6c:	0018      	movs	r0, r3
   20a6e:	4b18      	ldr	r3, [pc, #96]	; (20ad0 <hif_isr+0x4b0>)
   20a70:	4798      	blx	r3
   20a72:	68ba      	ldr	r2, [r7, #8]
   20a74:	4b1d      	ldr	r3, [pc, #116]	; (20aec <hif_isr+0x4cc>)
   20a76:	0011      	movs	r1, r2
   20a78:	0018      	movs	r0, r3
   20a7a:	4b15      	ldr	r3, [pc, #84]	; (20ad0 <hif_isr+0x4b0>)
   20a7c:	4798      	blx	r3
   20a7e:	4b16      	ldr	r3, [pc, #88]	; (20ad8 <hif_isr+0x4b8>)
   20a80:	0018      	movs	r0, r3
   20a82:	4b13      	ldr	r3, [pc, #76]	; (20ad0 <hif_isr+0x4b0>)
   20a84:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   20a86:	230f      	movs	r3, #15
   20a88:	18fb      	adds	r3, r7, r3
   20a8a:	22f4      	movs	r2, #244	; 0xf4
   20a8c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   20a8e:	e00f      	b.n	20ab0 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   20a90:	4a17      	ldr	r2, [pc, #92]	; (20af0 <hif_isr+0x4d0>)
   20a92:	490d      	ldr	r1, [pc, #52]	; (20ac8 <hif_isr+0x4a8>)
   20a94:	4b0d      	ldr	r3, [pc, #52]	; (20acc <hif_isr+0x4ac>)
   20a96:	0018      	movs	r0, r3
   20a98:	4b0d      	ldr	r3, [pc, #52]	; (20ad0 <hif_isr+0x4b0>)
   20a9a:	4798      	blx	r3
   20a9c:	4b15      	ldr	r3, [pc, #84]	; (20af4 <hif_isr+0x4d4>)
   20a9e:	0018      	movs	r0, r3
   20aa0:	4b0b      	ldr	r3, [pc, #44]	; (20ad0 <hif_isr+0x4b0>)
   20aa2:	4798      	blx	r3
   20aa4:	4b0c      	ldr	r3, [pc, #48]	; (20ad8 <hif_isr+0x4b8>)
   20aa6:	0018      	movs	r0, r3
   20aa8:	4b09      	ldr	r3, [pc, #36]	; (20ad0 <hif_isr+0x4b0>)
   20aaa:	4798      	blx	r3
		goto ERR1;
   20aac:	e000      	b.n	20ab0 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   20aae:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   20ab0:	230f      	movs	r3, #15
   20ab2:	18fb      	adds	r3, r7, r3
   20ab4:	781b      	ldrb	r3, [r3, #0]
   20ab6:	b25b      	sxtb	r3, r3
}
   20ab8:	0018      	movs	r0, r3
   20aba:	46bd      	mov	sp, r7
   20abc:	b005      	add	sp, #20
   20abe:	bd90      	pop	{r4, r7, pc}
   20ac0:	20005884 	.word	0x20005884
   20ac4:	00000216 	.word	0x00000216
   20ac8:	00037d64 	.word	0x00037d64
   20acc:	00037a54 	.word	0x00037a54
   20ad0:	0001d2e9 	.word	0x0001d2e9
   20ad4:	00037bd0 	.word	0x00037bd0
   20ad8:	00037a50 	.word	0x00037a50
   20adc:	000200b5 	.word	0x000200b5
   20ae0:	0000021d 	.word	0x0000021d
   20ae4:	00037bfc 	.word	0x00037bfc
   20ae8:	00000225 	.word	0x00000225
   20aec:	00037c10 	.word	0x00037c10
   20af0:	0000022e 	.word	0x0000022e
   20af4:	00037c2c 	.word	0x00037c2c

00020af8 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   20af8:	b590      	push	{r4, r7, lr}
   20afa:	b083      	sub	sp, #12
   20afc:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   20afe:	1dfb      	adds	r3, r7, #7
   20b00:	2200      	movs	r2, #0
   20b02:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   20b04:	4b1c      	ldr	r3, [pc, #112]	; (20b78 <hif_handle_isr+0x80>)
   20b06:	2200      	movs	r2, #0
   20b08:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   20b0a:	e024      	b.n	20b56 <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   20b0c:	4b1a      	ldr	r3, [pc, #104]	; (20b78 <hif_handle_isr+0x80>)
   20b0e:	78db      	ldrb	r3, [r3, #3]
   20b10:	b2db      	uxtb	r3, r3
   20b12:	3b01      	subs	r3, #1
   20b14:	b2da      	uxtb	r2, r3
   20b16:	4b18      	ldr	r3, [pc, #96]	; (20b78 <hif_handle_isr+0x80>)
   20b18:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   20b1a:	1dfc      	adds	r4, r7, #7
   20b1c:	4b17      	ldr	r3, [pc, #92]	; (20b7c <hif_handle_isr+0x84>)
   20b1e:	4798      	blx	r3
   20b20:	0003      	movs	r3, r0
   20b22:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   20b24:	1dfb      	adds	r3, r7, #7
   20b26:	781b      	ldrb	r3, [r3, #0]
   20b28:	b25b      	sxtb	r3, r3
   20b2a:	2b00      	cmp	r3, #0
   20b2c:	d100      	bne.n	20b30 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   20b2e:	e012      	b.n	20b56 <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   20b30:	4a13      	ldr	r2, [pc, #76]	; (20b80 <hif_handle_isr+0x88>)
   20b32:	4914      	ldr	r1, [pc, #80]	; (20b84 <hif_handle_isr+0x8c>)
   20b34:	4b14      	ldr	r3, [pc, #80]	; (20b88 <hif_handle_isr+0x90>)
   20b36:	0018      	movs	r0, r3
   20b38:	4b14      	ldr	r3, [pc, #80]	; (20b8c <hif_handle_isr+0x94>)
   20b3a:	4798      	blx	r3
   20b3c:	1dfb      	adds	r3, r7, #7
   20b3e:	2200      	movs	r2, #0
   20b40:	569a      	ldrsb	r2, [r3, r2]
   20b42:	4b13      	ldr	r3, [pc, #76]	; (20b90 <hif_handle_isr+0x98>)
   20b44:	0011      	movs	r1, r2
   20b46:	0018      	movs	r0, r3
   20b48:	4b10      	ldr	r3, [pc, #64]	; (20b8c <hif_handle_isr+0x94>)
   20b4a:	4798      	blx	r3
   20b4c:	4b11      	ldr	r3, [pc, #68]	; (20b94 <hif_handle_isr+0x9c>)
   20b4e:	0018      	movs	r0, r3
   20b50:	4b0e      	ldr	r3, [pc, #56]	; (20b8c <hif_handle_isr+0x94>)
   20b52:	4798      	blx	r3
			ret = hif_isr();
   20b54:	e7e1      	b.n	20b1a <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   20b56:	4b08      	ldr	r3, [pc, #32]	; (20b78 <hif_handle_isr+0x80>)
   20b58:	78db      	ldrb	r3, [r3, #3]
   20b5a:	b2db      	uxtb	r3, r3
   20b5c:	2b00      	cmp	r3, #0
   20b5e:	d004      	beq.n	20b6a <hif_handle_isr+0x72>
   20b60:	4b05      	ldr	r3, [pc, #20]	; (20b78 <hif_handle_isr+0x80>)
   20b62:	791b      	ldrb	r3, [r3, #4]
   20b64:	b2db      	uxtb	r3, r3
   20b66:	2b00      	cmp	r3, #0
   20b68:	d0d0      	beq.n	20b0c <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   20b6a:	1dfb      	adds	r3, r7, #7
   20b6c:	781b      	ldrb	r3, [r3, #0]
   20b6e:	b25b      	sxtb	r3, r3
}
   20b70:	0018      	movs	r0, r3
   20b72:	46bd      	mov	sp, r7
   20b74:	b003      	add	sp, #12
   20b76:	bd90      	pop	{r4, r7, pc}
   20b78:	20005884 	.word	0x20005884
   20b7c:	00020621 	.word	0x00020621
   20b80:	00000257 	.word	0x00000257
   20b84:	00037d6c 	.word	0x00037d6c
   20b88:	00037a54 	.word	0x00037a54
   20b8c:	0001d2e9 	.word	0x0001d2e9
   20b90:	00037c50 	.word	0x00037c50
   20b94:	00037a50 	.word	0x00037a50

00020b98 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   20b98:	b590      	push	{r4, r7, lr}
   20b9a:	b087      	sub	sp, #28
   20b9c:	af00      	add	r7, sp, #0
   20b9e:	60f8      	str	r0, [r7, #12]
   20ba0:	60b9      	str	r1, [r7, #8]
   20ba2:	0019      	movs	r1, r3
   20ba4:	1dbb      	adds	r3, r7, #6
   20ba6:	801a      	strh	r2, [r3, #0]
   20ba8:	1d7b      	adds	r3, r7, #5
   20baa:	1c0a      	adds	r2, r1, #0
   20bac:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   20bae:	2317      	movs	r3, #23
   20bb0:	18fb      	adds	r3, r7, r3
   20bb2:	2200      	movs	r2, #0
   20bb4:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   20bb6:	68fb      	ldr	r3, [r7, #12]
   20bb8:	2b00      	cmp	r3, #0
   20bba:	d006      	beq.n	20bca <hif_receive+0x32>
   20bbc:	68bb      	ldr	r3, [r7, #8]
   20bbe:	2b00      	cmp	r3, #0
   20bc0:	d003      	beq.n	20bca <hif_receive+0x32>
   20bc2:	1dbb      	adds	r3, r7, #6
   20bc4:	881b      	ldrh	r3, [r3, #0]
   20bc6:	2b00      	cmp	r3, #0
   20bc8:	d11e      	bne.n	20c08 <hif_receive+0x70>
	{
		if(isDone)
   20bca:	1d7b      	adds	r3, r7, #5
   20bcc:	781b      	ldrb	r3, [r3, #0]
   20bce:	2b00      	cmp	r3, #0
   20bd0:	d006      	beq.n	20be0 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   20bd2:	2317      	movs	r3, #23
   20bd4:	18fc      	adds	r4, r7, r3
   20bd6:	4b45      	ldr	r3, [pc, #276]	; (20cec <hif_receive+0x154>)
   20bd8:	4798      	blx	r3
   20bda:	0003      	movs	r3, r0
   20bdc:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   20bde:	e07c      	b.n	20cda <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   20be0:	2317      	movs	r3, #23
   20be2:	18fb      	adds	r3, r7, r3
   20be4:	22f4      	movs	r2, #244	; 0xf4
   20be6:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   20be8:	239e      	movs	r3, #158	; 0x9e
   20bea:	009a      	lsls	r2, r3, #2
   20bec:	4940      	ldr	r1, [pc, #256]	; (20cf0 <hif_receive+0x158>)
   20bee:	4b41      	ldr	r3, [pc, #260]	; (20cf4 <hif_receive+0x15c>)
   20bf0:	0018      	movs	r0, r3
   20bf2:	4b41      	ldr	r3, [pc, #260]	; (20cf8 <hif_receive+0x160>)
   20bf4:	4798      	blx	r3
   20bf6:	4b41      	ldr	r3, [pc, #260]	; (20cfc <hif_receive+0x164>)
   20bf8:	0018      	movs	r0, r3
   20bfa:	4b3f      	ldr	r3, [pc, #252]	; (20cf8 <hif_receive+0x160>)
   20bfc:	4798      	blx	r3
   20bfe:	4b40      	ldr	r3, [pc, #256]	; (20d00 <hif_receive+0x168>)
   20c00:	0018      	movs	r0, r3
   20c02:	4b3d      	ldr	r3, [pc, #244]	; (20cf8 <hif_receive+0x160>)
   20c04:	4798      	blx	r3
		goto ERR1;
   20c06:	e068      	b.n	20cda <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   20c08:	1dbb      	adds	r3, r7, #6
   20c0a:	881a      	ldrh	r2, [r3, #0]
   20c0c:	4b3d      	ldr	r3, [pc, #244]	; (20d04 <hif_receive+0x16c>)
   20c0e:	68db      	ldr	r3, [r3, #12]
   20c10:	429a      	cmp	r2, r3
   20c12:	d917      	bls.n	20c44 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   20c14:	2317      	movs	r3, #23
   20c16:	18fb      	adds	r3, r7, r3
   20c18:	22f4      	movs	r2, #244	; 0xf4
   20c1a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   20c1c:	23a0      	movs	r3, #160	; 0xa0
   20c1e:	009a      	lsls	r2, r3, #2
   20c20:	4933      	ldr	r1, [pc, #204]	; (20cf0 <hif_receive+0x158>)
   20c22:	4b34      	ldr	r3, [pc, #208]	; (20cf4 <hif_receive+0x15c>)
   20c24:	0018      	movs	r0, r3
   20c26:	4b34      	ldr	r3, [pc, #208]	; (20cf8 <hif_receive+0x160>)
   20c28:	4798      	blx	r3
   20c2a:	1dbb      	adds	r3, r7, #6
   20c2c:	8819      	ldrh	r1, [r3, #0]
   20c2e:	4b35      	ldr	r3, [pc, #212]	; (20d04 <hif_receive+0x16c>)
   20c30:	68da      	ldr	r2, [r3, #12]
   20c32:	4b35      	ldr	r3, [pc, #212]	; (20d08 <hif_receive+0x170>)
   20c34:	0018      	movs	r0, r3
   20c36:	4b30      	ldr	r3, [pc, #192]	; (20cf8 <hif_receive+0x160>)
   20c38:	4798      	blx	r3
   20c3a:	4b31      	ldr	r3, [pc, #196]	; (20d00 <hif_receive+0x168>)
   20c3c:	0018      	movs	r0, r3
   20c3e:	4b2e      	ldr	r3, [pc, #184]	; (20cf8 <hif_receive+0x160>)
   20c40:	4798      	blx	r3
		goto ERR1;
   20c42:	e04a      	b.n	20cda <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   20c44:	4b2f      	ldr	r3, [pc, #188]	; (20d04 <hif_receive+0x16c>)
   20c46:	689a      	ldr	r2, [r3, #8]
   20c48:	68fb      	ldr	r3, [r7, #12]
   20c4a:	429a      	cmp	r2, r3
   20c4c:	d80a      	bhi.n	20c64 <hif_receive+0xcc>
   20c4e:	1dbb      	adds	r3, r7, #6
   20c50:	881a      	ldrh	r2, [r3, #0]
   20c52:	68fb      	ldr	r3, [r7, #12]
   20c54:	18d2      	adds	r2, r2, r3
   20c56:	4b2b      	ldr	r3, [pc, #172]	; (20d04 <hif_receive+0x16c>)
   20c58:	6899      	ldr	r1, [r3, #8]
   20c5a:	4b2a      	ldr	r3, [pc, #168]	; (20d04 <hif_receive+0x16c>)
   20c5c:	68db      	ldr	r3, [r3, #12]
   20c5e:	18cb      	adds	r3, r1, r3
   20c60:	429a      	cmp	r2, r3
   20c62:	d912      	bls.n	20c8a <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   20c64:	2317      	movs	r3, #23
   20c66:	18fb      	adds	r3, r7, r3
   20c68:	22f4      	movs	r2, #244	; 0xf4
   20c6a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   20c6c:	4a27      	ldr	r2, [pc, #156]	; (20d0c <hif_receive+0x174>)
   20c6e:	4920      	ldr	r1, [pc, #128]	; (20cf0 <hif_receive+0x158>)
   20c70:	4b20      	ldr	r3, [pc, #128]	; (20cf4 <hif_receive+0x15c>)
   20c72:	0018      	movs	r0, r3
   20c74:	4b20      	ldr	r3, [pc, #128]	; (20cf8 <hif_receive+0x160>)
   20c76:	4798      	blx	r3
   20c78:	4b25      	ldr	r3, [pc, #148]	; (20d10 <hif_receive+0x178>)
   20c7a:	0018      	movs	r0, r3
   20c7c:	4b1e      	ldr	r3, [pc, #120]	; (20cf8 <hif_receive+0x160>)
   20c7e:	4798      	blx	r3
   20c80:	4b1f      	ldr	r3, [pc, #124]	; (20d00 <hif_receive+0x168>)
   20c82:	0018      	movs	r0, r3
   20c84:	4b1c      	ldr	r3, [pc, #112]	; (20cf8 <hif_receive+0x160>)
   20c86:	4798      	blx	r3
		goto ERR1;
   20c88:	e027      	b.n	20cda <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   20c8a:	1dbb      	adds	r3, r7, #6
   20c8c:	881a      	ldrh	r2, [r3, #0]
   20c8e:	2317      	movs	r3, #23
   20c90:	18fc      	adds	r4, r7, r3
   20c92:	68b9      	ldr	r1, [r7, #8]
   20c94:	68fb      	ldr	r3, [r7, #12]
   20c96:	0018      	movs	r0, r3
   20c98:	4b1e      	ldr	r3, [pc, #120]	; (20d14 <hif_receive+0x17c>)
   20c9a:	4798      	blx	r3
   20c9c:	0003      	movs	r3, r0
   20c9e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   20ca0:	2317      	movs	r3, #23
   20ca2:	18fb      	adds	r3, r7, r3
   20ca4:	781b      	ldrb	r3, [r3, #0]
   20ca6:	b25b      	sxtb	r3, r3
   20ca8:	2b00      	cmp	r3, #0
   20caa:	d115      	bne.n	20cd8 <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   20cac:	4b15      	ldr	r3, [pc, #84]	; (20d04 <hif_receive+0x16c>)
   20cae:	689a      	ldr	r2, [r3, #8]
   20cb0:	4b14      	ldr	r3, [pc, #80]	; (20d04 <hif_receive+0x16c>)
   20cb2:	68db      	ldr	r3, [r3, #12]
   20cb4:	18d2      	adds	r2, r2, r3
   20cb6:	1dbb      	adds	r3, r7, #6
   20cb8:	8819      	ldrh	r1, [r3, #0]
   20cba:	68fb      	ldr	r3, [r7, #12]
   20cbc:	18cb      	adds	r3, r1, r3
   20cbe:	429a      	cmp	r2, r3
   20cc0:	d003      	beq.n	20cca <hif_receive+0x132>
   20cc2:	1d7b      	adds	r3, r7, #5
   20cc4:	781b      	ldrb	r3, [r3, #0]
   20cc6:	2b00      	cmp	r3, #0
   20cc8:	d007      	beq.n	20cda <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   20cca:	2317      	movs	r3, #23
   20ccc:	18fc      	adds	r4, r7, r3
   20cce:	4b07      	ldr	r3, [pc, #28]	; (20cec <hif_receive+0x154>)
   20cd0:	4798      	blx	r3
   20cd2:	0003      	movs	r3, r0
   20cd4:	7023      	strb	r3, [r4, #0]
   20cd6:	e000      	b.n	20cda <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   20cd8:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   20cda:	2317      	movs	r3, #23
   20cdc:	18fb      	adds	r3, r7, r3
   20cde:	781b      	ldrb	r3, [r3, #0]
   20ce0:	b25b      	sxtb	r3, r3
}
   20ce2:	0018      	movs	r0, r3
   20ce4:	46bd      	mov	sp, r7
   20ce6:	b007      	add	sp, #28
   20ce8:	bd90      	pop	{r4, r7, pc}
   20cea:	46c0      	nop			; (mov r8, r8)
   20cec:	000200b5 	.word	0x000200b5
   20cf0:	00037d7c 	.word	0x00037d7c
   20cf4:	00037a54 	.word	0x00037a54
   20cf8:	0001d2e9 	.word	0x0001d2e9
   20cfc:	00037c80 	.word	0x00037c80
   20d00:	00037a50 	.word	0x00037a50
   20d04:	20005884 	.word	0x20005884
   20d08:	00037ca0 	.word	0x00037ca0
   20d0c:	00000286 	.word	0x00000286
   20d10:	00037ce8 	.word	0x00037ce8
   20d14:	00022121 	.word	0x00022121

00020d18 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   20d18:	b580      	push	{r7, lr}
   20d1a:	b084      	sub	sp, #16
   20d1c:	af00      	add	r7, sp, #0
   20d1e:	0002      	movs	r2, r0
   20d20:	6039      	str	r1, [r7, #0]
   20d22:	1dfb      	adds	r3, r7, #7
   20d24:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   20d26:	230f      	movs	r3, #15
   20d28:	18fb      	adds	r3, r7, r3
   20d2a:	2200      	movs	r2, #0
   20d2c:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   20d2e:	1dfb      	adds	r3, r7, #7
   20d30:	781b      	ldrb	r3, [r3, #0]
   20d32:	2b07      	cmp	r3, #7
   20d34:	d820      	bhi.n	20d78 <hif_register_cb+0x60>
   20d36:	009a      	lsls	r2, r3, #2
   20d38:	4b1e      	ldr	r3, [pc, #120]	; (20db4 <hif_register_cb+0x9c>)
   20d3a:	18d3      	adds	r3, r2, r3
   20d3c:	681b      	ldr	r3, [r3, #0]
   20d3e:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   20d40:	4b1d      	ldr	r3, [pc, #116]	; (20db8 <hif_register_cb+0xa0>)
   20d42:	683a      	ldr	r2, [r7, #0]
   20d44:	615a      	str	r2, [r3, #20]
			break;
   20d46:	e02d      	b.n	20da4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   20d48:	4b1b      	ldr	r3, [pc, #108]	; (20db8 <hif_register_cb+0xa0>)
   20d4a:	683a      	ldr	r2, [r7, #0]
   20d4c:	611a      	str	r2, [r3, #16]
			break;
   20d4e:	e029      	b.n	20da4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   20d50:	4b19      	ldr	r3, [pc, #100]	; (20db8 <hif_register_cb+0xa0>)
   20d52:	683a      	ldr	r2, [r7, #0]
   20d54:	619a      	str	r2, [r3, #24]
			break;
   20d56:	e025      	b.n	20da4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   20d58:	4b17      	ldr	r3, [pc, #92]	; (20db8 <hif_register_cb+0xa0>)
   20d5a:	683a      	ldr	r2, [r7, #0]
   20d5c:	621a      	str	r2, [r3, #32]
			break;
   20d5e:	e021      	b.n	20da4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   20d60:	4b15      	ldr	r3, [pc, #84]	; (20db8 <hif_register_cb+0xa0>)
   20d62:	683a      	ldr	r2, [r7, #0]
   20d64:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   20d66:	e01d      	b.n	20da4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   20d68:	4b13      	ldr	r3, [pc, #76]	; (20db8 <hif_register_cb+0xa0>)
   20d6a:	683a      	ldr	r2, [r7, #0]
   20d6c:	61da      	str	r2, [r3, #28]
			break;
   20d6e:	e019      	b.n	20da4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   20d70:	4b11      	ldr	r3, [pc, #68]	; (20db8 <hif_register_cb+0xa0>)
   20d72:	683a      	ldr	r2, [r7, #0]
   20d74:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   20d76:	e015      	b.n	20da4 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   20d78:	4a10      	ldr	r2, [pc, #64]	; (20dbc <hif_register_cb+0xa4>)
   20d7a:	4911      	ldr	r1, [pc, #68]	; (20dc0 <hif_register_cb+0xa8>)
   20d7c:	4b11      	ldr	r3, [pc, #68]	; (20dc4 <hif_register_cb+0xac>)
   20d7e:	0018      	movs	r0, r3
   20d80:	4b11      	ldr	r3, [pc, #68]	; (20dc8 <hif_register_cb+0xb0>)
   20d82:	4798      	blx	r3
   20d84:	1dfb      	adds	r3, r7, #7
   20d86:	781a      	ldrb	r2, [r3, #0]
   20d88:	4b10      	ldr	r3, [pc, #64]	; (20dcc <hif_register_cb+0xb4>)
   20d8a:	0011      	movs	r1, r2
   20d8c:	0018      	movs	r0, r3
   20d8e:	4b0e      	ldr	r3, [pc, #56]	; (20dc8 <hif_register_cb+0xb0>)
   20d90:	4798      	blx	r3
   20d92:	4b0f      	ldr	r3, [pc, #60]	; (20dd0 <hif_register_cb+0xb8>)
   20d94:	0018      	movs	r0, r3
   20d96:	4b0c      	ldr	r3, [pc, #48]	; (20dc8 <hif_register_cb+0xb0>)
   20d98:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   20d9a:	230f      	movs	r3, #15
   20d9c:	18fb      	adds	r3, r7, r3
   20d9e:	22f4      	movs	r2, #244	; 0xf4
   20da0:	701a      	strb	r2, [r3, #0]
			break;
   20da2:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   20da4:	230f      	movs	r3, #15
   20da6:	18fb      	adds	r3, r7, r3
   20da8:	781b      	ldrb	r3, [r3, #0]
   20daa:	b25b      	sxtb	r3, r3
}
   20dac:	0018      	movs	r0, r3
   20dae:	46bd      	mov	sp, r7
   20db0:	b004      	add	sp, #16
   20db2:	bd80      	pop	{r7, pc}
   20db4:	00037d38 	.word	0x00037d38
   20db8:	20005884 	.word	0x20005884
   20dbc:	000002be 	.word	0x000002be
   20dc0:	00037d88 	.word	0x00037d88
   20dc4:	00037a54 	.word	0x00037a54
   20dc8:	0001d2e9 	.word	0x0001d2e9
   20dcc:	00037d2c 	.word	0x00037d2c
   20dd0:	00037a50 	.word	0x00037a50

00020dd4 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   20dd4:	b590      	push	{r4, r7, lr}
   20dd6:	b0af      	sub	sp, #188	; 0xbc
   20dd8:	af02      	add	r7, sp, #8
   20dda:	603a      	str	r2, [r7, #0]
   20ddc:	1dfb      	adds	r3, r7, #7
   20dde:	1c02      	adds	r2, r0, #0
   20de0:	701a      	strb	r2, [r3, #0]
   20de2:	1d3b      	adds	r3, r7, #4
   20de4:	1c0a      	adds	r2, r1, #0
   20de6:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   20de8:	1dfb      	adds	r3, r7, #7
   20dea:	781b      	ldrb	r3, [r3, #0]
   20dec:	2b2c      	cmp	r3, #44	; 0x2c
   20dee:	d116      	bne.n	20e1e <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   20df0:	23a4      	movs	r3, #164	; 0xa4
   20df2:	18f9      	adds	r1, r7, r3
   20df4:	6838      	ldr	r0, [r7, #0]
   20df6:	2300      	movs	r3, #0
   20df8:	2204      	movs	r2, #4
   20dfa:	4cca      	ldr	r4, [pc, #808]	; (21124 <m2m_wifi_cb+0x350>)
   20dfc:	47a0      	blx	r4
   20dfe:	1e03      	subs	r3, r0, #0
   20e00:	d000      	beq.n	20e04 <m2m_wifi_cb+0x30>
   20e02:	e1b4      	b.n	2116e <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   20e04:	4bc8      	ldr	r3, [pc, #800]	; (21128 <m2m_wifi_cb+0x354>)
   20e06:	681b      	ldr	r3, [r3, #0]
   20e08:	2b00      	cmp	r3, #0
   20e0a:	d100      	bne.n	20e0e <m2m_wifi_cb+0x3a>
   20e0c:	e1af      	b.n	2116e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   20e0e:	4bc6      	ldr	r3, [pc, #792]	; (21128 <m2m_wifi_cb+0x354>)
   20e10:	681b      	ldr	r3, [r3, #0]
   20e12:	22a4      	movs	r2, #164	; 0xa4
   20e14:	18ba      	adds	r2, r7, r2
   20e16:	0011      	movs	r1, r2
   20e18:	202c      	movs	r0, #44	; 0x2c
   20e1a:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   20e1c:	e1a7      	b.n	2116e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   20e1e:	1dfb      	adds	r3, r7, #7
   20e20:	781b      	ldrb	r3, [r3, #0]
   20e22:	2b1b      	cmp	r3, #27
   20e24:	d116      	bne.n	20e54 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   20e26:	239c      	movs	r3, #156	; 0x9c
   20e28:	18f9      	adds	r1, r7, r3
   20e2a:	6838      	ldr	r0, [r7, #0]
   20e2c:	2300      	movs	r3, #0
   20e2e:	2208      	movs	r2, #8
   20e30:	4cbc      	ldr	r4, [pc, #752]	; (21124 <m2m_wifi_cb+0x350>)
   20e32:	47a0      	blx	r4
   20e34:	1e03      	subs	r3, r0, #0
   20e36:	d000      	beq.n	20e3a <m2m_wifi_cb+0x66>
   20e38:	e199      	b.n	2116e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20e3a:	4bbb      	ldr	r3, [pc, #748]	; (21128 <m2m_wifi_cb+0x354>)
   20e3c:	681b      	ldr	r3, [r3, #0]
   20e3e:	2b00      	cmp	r3, #0
   20e40:	d100      	bne.n	20e44 <m2m_wifi_cb+0x70>
   20e42:	e194      	b.n	2116e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   20e44:	4bb8      	ldr	r3, [pc, #736]	; (21128 <m2m_wifi_cb+0x354>)
   20e46:	681b      	ldr	r3, [r3, #0]
   20e48:	229c      	movs	r2, #156	; 0x9c
   20e4a:	18ba      	adds	r2, r7, r2
   20e4c:	0011      	movs	r1, r2
   20e4e:	201b      	movs	r0, #27
   20e50:	4798      	blx	r3
}
   20e52:	e18c      	b.n	2116e <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   20e54:	1dfb      	adds	r3, r7, #7
   20e56:	781b      	ldrb	r3, [r3, #0]
   20e58:	2b06      	cmp	r3, #6
   20e5a:	d116      	bne.n	20e8a <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   20e5c:	230c      	movs	r3, #12
   20e5e:	18f9      	adds	r1, r7, r3
   20e60:	6838      	ldr	r0, [r7, #0]
   20e62:	2301      	movs	r3, #1
   20e64:	2230      	movs	r2, #48	; 0x30
   20e66:	4caf      	ldr	r4, [pc, #700]	; (21124 <m2m_wifi_cb+0x350>)
   20e68:	47a0      	blx	r4
   20e6a:	1e03      	subs	r3, r0, #0
   20e6c:	d000      	beq.n	20e70 <m2m_wifi_cb+0x9c>
   20e6e:	e17e      	b.n	2116e <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   20e70:	4bad      	ldr	r3, [pc, #692]	; (21128 <m2m_wifi_cb+0x354>)
   20e72:	681b      	ldr	r3, [r3, #0]
   20e74:	2b00      	cmp	r3, #0
   20e76:	d100      	bne.n	20e7a <m2m_wifi_cb+0xa6>
   20e78:	e179      	b.n	2116e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   20e7a:	4bab      	ldr	r3, [pc, #684]	; (21128 <m2m_wifi_cb+0x354>)
   20e7c:	681b      	ldr	r3, [r3, #0]
   20e7e:	220c      	movs	r2, #12
   20e80:	18ba      	adds	r2, r7, r2
   20e82:	0011      	movs	r1, r2
   20e84:	2006      	movs	r0, #6
   20e86:	4798      	blx	r3
}
   20e88:	e171      	b.n	2116e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   20e8a:	1dfb      	adds	r3, r7, #7
   20e8c:	781b      	ldrb	r3, [r3, #0]
   20e8e:	2b0e      	cmp	r3, #14
   20e90:	d100      	bne.n	20e94 <m2m_wifi_cb+0xc0>
   20e92:	e16c      	b.n	2116e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   20e94:	1dfb      	adds	r3, r7, #7
   20e96:	781b      	ldrb	r3, [r3, #0]
   20e98:	2b32      	cmp	r3, #50	; 0x32
   20e9a:	d116      	bne.n	20eca <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   20e9c:	2384      	movs	r3, #132	; 0x84
   20e9e:	18f9      	adds	r1, r7, r3
   20ea0:	6838      	ldr	r0, [r7, #0]
   20ea2:	2300      	movs	r3, #0
   20ea4:	2218      	movs	r2, #24
   20ea6:	4c9f      	ldr	r4, [pc, #636]	; (21124 <m2m_wifi_cb+0x350>)
   20ea8:	47a0      	blx	r4
   20eaa:	1e03      	subs	r3, r0, #0
   20eac:	d000      	beq.n	20eb0 <m2m_wifi_cb+0xdc>
   20eae:	e15e      	b.n	2116e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20eb0:	4b9d      	ldr	r3, [pc, #628]	; (21128 <m2m_wifi_cb+0x354>)
   20eb2:	681b      	ldr	r3, [r3, #0]
   20eb4:	2b00      	cmp	r3, #0
   20eb6:	d100      	bne.n	20eba <m2m_wifi_cb+0xe6>
   20eb8:	e159      	b.n	2116e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   20eba:	4b9b      	ldr	r3, [pc, #620]	; (21128 <m2m_wifi_cb+0x354>)
   20ebc:	681b      	ldr	r3, [r3, #0]
   20ebe:	2284      	movs	r2, #132	; 0x84
   20ec0:	18ba      	adds	r2, r7, r2
   20ec2:	0011      	movs	r1, r2
   20ec4:	2032      	movs	r0, #50	; 0x32
   20ec6:	4798      	blx	r3
}
   20ec8:	e151      	b.n	2116e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   20eca:	1dfb      	adds	r3, r7, #7
   20ecc:	781b      	ldrb	r3, [r3, #0]
   20ece:	2b2f      	cmp	r3, #47	; 0x2f
   20ed0:	d11d      	bne.n	20f0e <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   20ed2:	230c      	movs	r3, #12
   20ed4:	18fb      	adds	r3, r7, r3
   20ed6:	2264      	movs	r2, #100	; 0x64
   20ed8:	2100      	movs	r1, #0
   20eda:	0018      	movs	r0, r3
   20edc:	4b93      	ldr	r3, [pc, #588]	; (2112c <m2m_wifi_cb+0x358>)
   20ede:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   20ee0:	230c      	movs	r3, #12
   20ee2:	18f9      	adds	r1, r7, r3
   20ee4:	6838      	ldr	r0, [r7, #0]
   20ee6:	2300      	movs	r3, #0
   20ee8:	2264      	movs	r2, #100	; 0x64
   20eea:	4c8e      	ldr	r4, [pc, #568]	; (21124 <m2m_wifi_cb+0x350>)
   20eec:	47a0      	blx	r4
   20eee:	1e03      	subs	r3, r0, #0
   20ef0:	d000      	beq.n	20ef4 <m2m_wifi_cb+0x120>
   20ef2:	e13c      	b.n	2116e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20ef4:	4b8c      	ldr	r3, [pc, #560]	; (21128 <m2m_wifi_cb+0x354>)
   20ef6:	681b      	ldr	r3, [r3, #0]
   20ef8:	2b00      	cmp	r3, #0
   20efa:	d100      	bne.n	20efe <m2m_wifi_cb+0x12a>
   20efc:	e137      	b.n	2116e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   20efe:	4b8a      	ldr	r3, [pc, #552]	; (21128 <m2m_wifi_cb+0x354>)
   20f00:	681b      	ldr	r3, [r3, #0]
   20f02:	220c      	movs	r2, #12
   20f04:	18ba      	adds	r2, r7, r2
   20f06:	0011      	movs	r1, r2
   20f08:	202f      	movs	r0, #47	; 0x2f
   20f0a:	4798      	blx	r3
}
   20f0c:	e12f      	b.n	2116e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   20f0e:	1dfb      	adds	r3, r7, #7
   20f10:	781b      	ldrb	r3, [r3, #0]
   20f12:	2b34      	cmp	r3, #52	; 0x34
   20f14:	d137      	bne.n	20f86 <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   20f16:	2380      	movs	r3, #128	; 0x80
   20f18:	18f9      	adds	r1, r7, r3
   20f1a:	6838      	ldr	r0, [r7, #0]
   20f1c:	2300      	movs	r3, #0
   20f1e:	2204      	movs	r2, #4
   20f20:	4c80      	ldr	r4, [pc, #512]	; (21124 <m2m_wifi_cb+0x350>)
   20f22:	47a0      	blx	r4
   20f24:	1e03      	subs	r3, r0, #0
   20f26:	d000      	beq.n	20f2a <m2m_wifi_cb+0x156>
   20f28:	e121      	b.n	2116e <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   20f2a:	4b81      	ldr	r3, [pc, #516]	; (21130 <m2m_wifi_cb+0x35c>)
   20f2c:	0018      	movs	r0, r3
   20f2e:	4b81      	ldr	r3, [pc, #516]	; (21134 <m2m_wifi_cb+0x360>)
   20f30:	4798      	blx	r3
   20f32:	2380      	movs	r3, #128	; 0x80
   20f34:	18fb      	adds	r3, r7, r3
   20f36:	681b      	ldr	r3, [r3, #0]
   20f38:	0e1b      	lsrs	r3, r3, #24
   20f3a:	b2db      	uxtb	r3, r3
   20f3c:	0019      	movs	r1, r3
   20f3e:	2380      	movs	r3, #128	; 0x80
   20f40:	18fb      	adds	r3, r7, r3
   20f42:	681b      	ldr	r3, [r3, #0]
   20f44:	0c1b      	lsrs	r3, r3, #16
   20f46:	b2db      	uxtb	r3, r3
   20f48:	001a      	movs	r2, r3
   20f4a:	2380      	movs	r3, #128	; 0x80
   20f4c:	18fb      	adds	r3, r7, r3
   20f4e:	681b      	ldr	r3, [r3, #0]
   20f50:	0a1b      	lsrs	r3, r3, #8
   20f52:	b2db      	uxtb	r3, r3
   20f54:	001c      	movs	r4, r3
   20f56:	2380      	movs	r3, #128	; 0x80
   20f58:	18fb      	adds	r3, r7, r3
   20f5a:	681b      	ldr	r3, [r3, #0]
   20f5c:	b2db      	uxtb	r3, r3
   20f5e:	4876      	ldr	r0, [pc, #472]	; (21138 <m2m_wifi_cb+0x364>)
   20f60:	9300      	str	r3, [sp, #0]
   20f62:	0023      	movs	r3, r4
   20f64:	4c73      	ldr	r4, [pc, #460]	; (21134 <m2m_wifi_cb+0x360>)
   20f66:	47a0      	blx	r4
   20f68:	4b74      	ldr	r3, [pc, #464]	; (2113c <m2m_wifi_cb+0x368>)
   20f6a:	0018      	movs	r0, r3
   20f6c:	4b71      	ldr	r3, [pc, #452]	; (21134 <m2m_wifi_cb+0x360>)
   20f6e:	4798      	blx	r3
			if (gpfAppWifiCb)
   20f70:	4b6d      	ldr	r3, [pc, #436]	; (21128 <m2m_wifi_cb+0x354>)
   20f72:	681b      	ldr	r3, [r3, #0]
   20f74:	2b00      	cmp	r3, #0
   20f76:	d100      	bne.n	20f7a <m2m_wifi_cb+0x1a6>
   20f78:	e0f9      	b.n	2116e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   20f7a:	4b6b      	ldr	r3, [pc, #428]	; (21128 <m2m_wifi_cb+0x354>)
   20f7c:	681b      	ldr	r3, [r3, #0]
   20f7e:	2100      	movs	r1, #0
   20f80:	2034      	movs	r0, #52	; 0x34
   20f82:	4798      	blx	r3
}
   20f84:	e0f3      	b.n	2116e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   20f86:	1dfb      	adds	r3, r7, #7
   20f88:	781b      	ldrb	r3, [r3, #0]
   20f8a:	2b11      	cmp	r3, #17
   20f8c:	d11e      	bne.n	20fcc <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   20f8e:	4b6c      	ldr	r3, [pc, #432]	; (21140 <m2m_wifi_cb+0x36c>)
   20f90:	2200      	movs	r2, #0
   20f92:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   20f94:	237c      	movs	r3, #124	; 0x7c
   20f96:	18f9      	adds	r1, r7, r3
   20f98:	6838      	ldr	r0, [r7, #0]
   20f9a:	2300      	movs	r3, #0
   20f9c:	2204      	movs	r2, #4
   20f9e:	4c61      	ldr	r4, [pc, #388]	; (21124 <m2m_wifi_cb+0x350>)
   20fa0:	47a0      	blx	r4
   20fa2:	1e03      	subs	r3, r0, #0
   20fa4:	d000      	beq.n	20fa8 <m2m_wifi_cb+0x1d4>
   20fa6:	e0e2      	b.n	2116e <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   20fa8:	237c      	movs	r3, #124	; 0x7c
   20faa:	18fb      	adds	r3, r7, r3
   20fac:	781a      	ldrb	r2, [r3, #0]
   20fae:	4b65      	ldr	r3, [pc, #404]	; (21144 <m2m_wifi_cb+0x370>)
   20fb0:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   20fb2:	4b5d      	ldr	r3, [pc, #372]	; (21128 <m2m_wifi_cb+0x354>)
   20fb4:	681b      	ldr	r3, [r3, #0]
   20fb6:	2b00      	cmp	r3, #0
   20fb8:	d100      	bne.n	20fbc <m2m_wifi_cb+0x1e8>
   20fba:	e0d8      	b.n	2116e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   20fbc:	4b5a      	ldr	r3, [pc, #360]	; (21128 <m2m_wifi_cb+0x354>)
   20fbe:	681b      	ldr	r3, [r3, #0]
   20fc0:	227c      	movs	r2, #124	; 0x7c
   20fc2:	18ba      	adds	r2, r7, r2
   20fc4:	0011      	movs	r1, r2
   20fc6:	2011      	movs	r0, #17
   20fc8:	4798      	blx	r3
}
   20fca:	e0d0      	b.n	2116e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   20fcc:	1dfb      	adds	r3, r7, #7
   20fce:	781b      	ldrb	r3, [r3, #0]
   20fd0:	2b13      	cmp	r3, #19
   20fd2:	d116      	bne.n	21002 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   20fd4:	230c      	movs	r3, #12
   20fd6:	18f9      	adds	r1, r7, r3
   20fd8:	6838      	ldr	r0, [r7, #0]
   20fda:	2300      	movs	r3, #0
   20fdc:	222c      	movs	r2, #44	; 0x2c
   20fde:	4c51      	ldr	r4, [pc, #324]	; (21124 <m2m_wifi_cb+0x350>)
   20fe0:	47a0      	blx	r4
   20fe2:	1e03      	subs	r3, r0, #0
   20fe4:	d000      	beq.n	20fe8 <m2m_wifi_cb+0x214>
   20fe6:	e0c2      	b.n	2116e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20fe8:	4b4f      	ldr	r3, [pc, #316]	; (21128 <m2m_wifi_cb+0x354>)
   20fea:	681b      	ldr	r3, [r3, #0]
   20fec:	2b00      	cmp	r3, #0
   20fee:	d100      	bne.n	20ff2 <m2m_wifi_cb+0x21e>
   20ff0:	e0bd      	b.n	2116e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   20ff2:	4b4d      	ldr	r3, [pc, #308]	; (21128 <m2m_wifi_cb+0x354>)
   20ff4:	681b      	ldr	r3, [r3, #0]
   20ff6:	220c      	movs	r2, #12
   20ff8:	18ba      	adds	r2, r7, r2
   20ffa:	0011      	movs	r1, r2
   20ffc:	2013      	movs	r0, #19
   20ffe:	4798      	blx	r3
}
   21000:	e0b5      	b.n	2116e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   21002:	1dfb      	adds	r3, r7, #7
   21004:	781b      	ldrb	r3, [r3, #0]
   21006:	2b04      	cmp	r3, #4
   21008:	d116      	bne.n	21038 <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   2100a:	23a8      	movs	r3, #168	; 0xa8
   2100c:	18f9      	adds	r1, r7, r3
   2100e:	6838      	ldr	r0, [r7, #0]
   21010:	2300      	movs	r3, #0
   21012:	2204      	movs	r2, #4
   21014:	4c43      	ldr	r4, [pc, #268]	; (21124 <m2m_wifi_cb+0x350>)
   21016:	47a0      	blx	r4
   21018:	1e03      	subs	r3, r0, #0
   2101a:	d000      	beq.n	2101e <m2m_wifi_cb+0x24a>
   2101c:	e0a7      	b.n	2116e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2101e:	4b42      	ldr	r3, [pc, #264]	; (21128 <m2m_wifi_cb+0x354>)
   21020:	681b      	ldr	r3, [r3, #0]
   21022:	2b00      	cmp	r3, #0
   21024:	d100      	bne.n	21028 <m2m_wifi_cb+0x254>
   21026:	e0a2      	b.n	2116e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   21028:	4b3f      	ldr	r3, [pc, #252]	; (21128 <m2m_wifi_cb+0x354>)
   2102a:	681b      	ldr	r3, [r3, #0]
   2102c:	22a8      	movs	r2, #168	; 0xa8
   2102e:	18ba      	adds	r2, r7, r2
   21030:	0011      	movs	r1, r2
   21032:	2004      	movs	r0, #4
   21034:	4798      	blx	r3
}
   21036:	e09a      	b.n	2116e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   21038:	1dfb      	adds	r3, r7, #7
   2103a:	781b      	ldrb	r3, [r3, #0]
   2103c:	2b65      	cmp	r3, #101	; 0x65
   2103e:	d116      	bne.n	2106e <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   21040:	23a8      	movs	r3, #168	; 0xa8
   21042:	18f9      	adds	r1, r7, r3
   21044:	6838      	ldr	r0, [r7, #0]
   21046:	2300      	movs	r3, #0
   21048:	2204      	movs	r2, #4
   2104a:	4c36      	ldr	r4, [pc, #216]	; (21124 <m2m_wifi_cb+0x350>)
   2104c:	47a0      	blx	r4
   2104e:	1e03      	subs	r3, r0, #0
   21050:	d000      	beq.n	21054 <m2m_wifi_cb+0x280>
   21052:	e08c      	b.n	2116e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21054:	4b34      	ldr	r3, [pc, #208]	; (21128 <m2m_wifi_cb+0x354>)
   21056:	681b      	ldr	r3, [r3, #0]
   21058:	2b00      	cmp	r3, #0
   2105a:	d100      	bne.n	2105e <m2m_wifi_cb+0x28a>
   2105c:	e087      	b.n	2116e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   2105e:	4b32      	ldr	r3, [pc, #200]	; (21128 <m2m_wifi_cb+0x354>)
   21060:	681b      	ldr	r3, [r3, #0]
   21062:	22a8      	movs	r2, #168	; 0xa8
   21064:	18ba      	adds	r2, r7, r2
   21066:	0011      	movs	r1, r2
   21068:	2065      	movs	r0, #101	; 0x65
   2106a:	4798      	blx	r3
}
   2106c:	e07f      	b.n	2116e <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   2106e:	1dfb      	adds	r3, r7, #7
   21070:	781b      	ldrb	r3, [r3, #0]
   21072:	2b09      	cmp	r3, #9
   21074:	d116      	bne.n	210a4 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   21076:	230c      	movs	r3, #12
   21078:	18f9      	adds	r1, r7, r3
   2107a:	6838      	ldr	r0, [r7, #0]
   2107c:	2301      	movs	r3, #1
   2107e:	2264      	movs	r2, #100	; 0x64
   21080:	4c28      	ldr	r4, [pc, #160]	; (21124 <m2m_wifi_cb+0x350>)
   21082:	47a0      	blx	r4
   21084:	1e03      	subs	r3, r0, #0
   21086:	d000      	beq.n	2108a <m2m_wifi_cb+0x2b6>
   21088:	e071      	b.n	2116e <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   2108a:	4b27      	ldr	r3, [pc, #156]	; (21128 <m2m_wifi_cb+0x354>)
   2108c:	681b      	ldr	r3, [r3, #0]
   2108e:	2b00      	cmp	r3, #0
   21090:	d100      	bne.n	21094 <m2m_wifi_cb+0x2c0>
   21092:	e06c      	b.n	2116e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   21094:	4b24      	ldr	r3, [pc, #144]	; (21128 <m2m_wifi_cb+0x354>)
   21096:	681b      	ldr	r3, [r3, #0]
   21098:	220c      	movs	r2, #12
   2109a:	18ba      	adds	r2, r7, r2
   2109c:	0011      	movs	r1, r2
   2109e:	2009      	movs	r0, #9
   210a0:	4798      	blx	r3
}
   210a2:	e064      	b.n	2116e <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   210a4:	1dfb      	adds	r3, r7, #7
   210a6:	781b      	ldrb	r3, [r3, #0]
   210a8:	2b2a      	cmp	r3, #42	; 0x2a
   210aa:	d114      	bne.n	210d6 <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   210ac:	2378      	movs	r3, #120	; 0x78
   210ae:	18f9      	adds	r1, r7, r3
   210b0:	6838      	ldr	r0, [r7, #0]
   210b2:	2301      	movs	r3, #1
   210b4:	2204      	movs	r2, #4
   210b6:	4c1b      	ldr	r4, [pc, #108]	; (21124 <m2m_wifi_cb+0x350>)
   210b8:	47a0      	blx	r4
   210ba:	1e03      	subs	r3, r0, #0
   210bc:	d157      	bne.n	2116e <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   210be:	4b1a      	ldr	r3, [pc, #104]	; (21128 <m2m_wifi_cb+0x354>)
   210c0:	681b      	ldr	r3, [r3, #0]
   210c2:	2b00      	cmp	r3, #0
   210c4:	d053      	beq.n	2116e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   210c6:	4b18      	ldr	r3, [pc, #96]	; (21128 <m2m_wifi_cb+0x354>)
   210c8:	681b      	ldr	r3, [r3, #0]
   210ca:	2278      	movs	r2, #120	; 0x78
   210cc:	18ba      	adds	r2, r7, r2
   210ce:	0011      	movs	r1, r2
   210d0:	202a      	movs	r0, #42	; 0x2a
   210d2:	4798      	blx	r3
}
   210d4:	e04b      	b.n	2116e <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   210d6:	1dfb      	adds	r3, r7, #7
   210d8:	781b      	ldrb	r3, [r3, #0]
   210da:	2b20      	cmp	r3, #32
   210dc:	d134      	bne.n	21148 <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   210de:	2370      	movs	r3, #112	; 0x70
   210e0:	18f9      	adds	r1, r7, r3
   210e2:	6838      	ldr	r0, [r7, #0]
   210e4:	2300      	movs	r3, #0
   210e6:	2208      	movs	r2, #8
   210e8:	4c0e      	ldr	r4, [pc, #56]	; (21124 <m2m_wifi_cb+0x350>)
   210ea:	47a0      	blx	r4
   210ec:	1e03      	subs	r3, r0, #0
   210ee:	d13e      	bne.n	2116e <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   210f0:	683b      	ldr	r3, [r7, #0]
   210f2:	3308      	adds	r3, #8
   210f4:	0018      	movs	r0, r3
   210f6:	2370      	movs	r3, #112	; 0x70
   210f8:	18fb      	adds	r3, r7, r3
   210fa:	6819      	ldr	r1, [r3, #0]
   210fc:	2370      	movs	r3, #112	; 0x70
   210fe:	18fb      	adds	r3, r7, r3
   21100:	889a      	ldrh	r2, [r3, #4]
   21102:	2301      	movs	r3, #1
   21104:	4c07      	ldr	r4, [pc, #28]	; (21124 <m2m_wifi_cb+0x350>)
   21106:	47a0      	blx	r4
   21108:	1e03      	subs	r3, r0, #0
   2110a:	d130      	bne.n	2116e <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   2110c:	4b06      	ldr	r3, [pc, #24]	; (21128 <m2m_wifi_cb+0x354>)
   2110e:	681b      	ldr	r3, [r3, #0]
   21110:	2b00      	cmp	r3, #0
   21112:	d02c      	beq.n	2116e <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   21114:	4b04      	ldr	r3, [pc, #16]	; (21128 <m2m_wifi_cb+0x354>)
   21116:	681b      	ldr	r3, [r3, #0]
   21118:	2270      	movs	r2, #112	; 0x70
   2111a:	18ba      	adds	r2, r7, r2
   2111c:	0011      	movs	r1, r2
   2111e:	2020      	movs	r0, #32
   21120:	4798      	blx	r3
}
   21122:	e024      	b.n	2116e <m2m_wifi_cb+0x39a>
   21124:	00020b99 	.word	0x00020b99
   21128:	2000410c 	.word	0x2000410c
   2112c:	0002001d 	.word	0x0002001d
   21130:	00037d98 	.word	0x00037d98
   21134:	0001d2e9 	.word	0x0001d2e9
   21138:	00037da4 	.word	0x00037da4
   2113c:	00037dc4 	.word	0x00037dc4
   21140:	20004109 	.word	0x20004109
   21144:	20004108 	.word	0x20004108
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   21148:	2324      	movs	r3, #36	; 0x24
   2114a:	33ff      	adds	r3, #255	; 0xff
   2114c:	001a      	movs	r2, r3
   2114e:	490a      	ldr	r1, [pc, #40]	; (21178 <m2m_wifi_cb+0x3a4>)
   21150:	4b0a      	ldr	r3, [pc, #40]	; (2117c <m2m_wifi_cb+0x3a8>)
   21152:	0018      	movs	r0, r3
   21154:	4b0a      	ldr	r3, [pc, #40]	; (21180 <m2m_wifi_cb+0x3ac>)
   21156:	4798      	blx	r3
   21158:	1dfb      	adds	r3, r7, #7
   2115a:	781a      	ldrb	r2, [r3, #0]
   2115c:	4b09      	ldr	r3, [pc, #36]	; (21184 <m2m_wifi_cb+0x3b0>)
   2115e:	0011      	movs	r1, r2
   21160:	0018      	movs	r0, r3
   21162:	4b07      	ldr	r3, [pc, #28]	; (21180 <m2m_wifi_cb+0x3ac>)
   21164:	4798      	blx	r3
   21166:	4b08      	ldr	r3, [pc, #32]	; (21188 <m2m_wifi_cb+0x3b4>)
   21168:	0018      	movs	r0, r3
   2116a:	4b05      	ldr	r3, [pc, #20]	; (21180 <m2m_wifi_cb+0x3ac>)
   2116c:	4798      	blx	r3
}
   2116e:	46c0      	nop			; (mov r8, r8)
   21170:	46bd      	mov	sp, r7
   21172:	b02d      	add	sp, #180	; 0xb4
   21174:	bd90      	pop	{r4, r7, pc}
   21176:	46c0      	nop			; (mov r8, r8)
   21178:	00038164 	.word	0x00038164
   2117c:	00037dc8 	.word	0x00037dc8
   21180:	0001d2e9 	.word	0x0001d2e9
   21184:	00037ddc 	.word	0x00037ddc
   21188:	00037dc4 	.word	0x00037dc4

0002118c <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   2118c:	b590      	push	{r4, r7, lr}
   2118e:	b091      	sub	sp, #68	; 0x44
   21190:	af02      	add	r7, sp, #8
   21192:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   21194:	2337      	movs	r3, #55	; 0x37
   21196:	18fb      	adds	r3, r7, r3
   21198:	2200      	movs	r2, #0
   2119a:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   2119c:	230b      	movs	r3, #11
   2119e:	18fb      	adds	r3, r7, r3
   211a0:	2201      	movs	r2, #1
   211a2:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   211a4:	687b      	ldr	r3, [r7, #4]
   211a6:	2b00      	cmp	r3, #0
   211a8:	d104      	bne.n	211b4 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   211aa:	2337      	movs	r3, #55	; 0x37
   211ac:	18fb      	adds	r3, r7, r3
   211ae:	22f4      	movs	r2, #244	; 0xf4
   211b0:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   211b2:	e0b3      	b.n	2131c <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   211b4:	687b      	ldr	r3, [r7, #4]
   211b6:	681a      	ldr	r2, [r3, #0]
   211b8:	4b5c      	ldr	r3, [pc, #368]	; (2132c <m2m_wifi_init+0x1a0>)
   211ba:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   211bc:	4b5c      	ldr	r3, [pc, #368]	; (21330 <m2m_wifi_init+0x1a4>)
   211be:	2200      	movs	r2, #0
   211c0:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   211c2:	2337      	movs	r3, #55	; 0x37
   211c4:	18fc      	adds	r4, r7, r3
   211c6:	230b      	movs	r3, #11
   211c8:	18fb      	adds	r3, r7, r3
   211ca:	0018      	movs	r0, r3
   211cc:	4b59      	ldr	r3, [pc, #356]	; (21334 <m2m_wifi_init+0x1a8>)
   211ce:	4798      	blx	r3
   211d0:	0003      	movs	r3, r0
   211d2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   211d4:	2337      	movs	r3, #55	; 0x37
   211d6:	18fb      	adds	r3, r7, r3
   211d8:	781b      	ldrb	r3, [r3, #0]
   211da:	b25b      	sxtb	r3, r3
   211dc:	2b00      	cmp	r3, #0
   211de:	d000      	beq.n	211e2 <m2m_wifi_init+0x56>
   211e0:	e099      	b.n	21316 <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   211e2:	2337      	movs	r3, #55	; 0x37
   211e4:	18fc      	adds	r4, r7, r3
   211e6:	2000      	movs	r0, #0
   211e8:	4b53      	ldr	r3, [pc, #332]	; (21338 <m2m_wifi_init+0x1ac>)
   211ea:	4798      	blx	r3
   211ec:	0003      	movs	r3, r0
   211ee:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   211f0:	2337      	movs	r3, #55	; 0x37
   211f2:	18fb      	adds	r3, r7, r3
   211f4:	781b      	ldrb	r3, [r3, #0]
   211f6:	b25b      	sxtb	r3, r3
   211f8:	2b00      	cmp	r3, #0
   211fa:	d000      	beq.n	211fe <m2m_wifi_init+0x72>
   211fc:	e086      	b.n	2130c <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   211fe:	4b4f      	ldr	r3, [pc, #316]	; (2133c <m2m_wifi_init+0x1b0>)
   21200:	0019      	movs	r1, r3
   21202:	2001      	movs	r0, #1
   21204:	4b4e      	ldr	r3, [pc, #312]	; (21340 <m2m_wifi_init+0x1b4>)
   21206:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   21208:	2337      	movs	r3, #55	; 0x37
   2120a:	18fc      	adds	r4, r7, r3
   2120c:	230c      	movs	r3, #12
   2120e:	18fb      	adds	r3, r7, r3
   21210:	0018      	movs	r0, r3
   21212:	4b4c      	ldr	r3, [pc, #304]	; (21344 <m2m_wifi_init+0x1b8>)
   21214:	4798      	blx	r3
   21216:	0003      	movs	r3, r0
   21218:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   2121a:	4b4b      	ldr	r3, [pc, #300]	; (21348 <m2m_wifi_init+0x1bc>)
   2121c:	0018      	movs	r0, r3
   2121e:	4b4b      	ldr	r3, [pc, #300]	; (2134c <m2m_wifi_init+0x1c0>)
   21220:	4798      	blx	r3
   21222:	230c      	movs	r3, #12
   21224:	18fb      	adds	r3, r7, r3
   21226:	791b      	ldrb	r3, [r3, #4]
   21228:	0019      	movs	r1, r3
   2122a:	230c      	movs	r3, #12
   2122c:	18fb      	adds	r3, r7, r3
   2122e:	795b      	ldrb	r3, [r3, #5]
   21230:	001a      	movs	r2, r3
   21232:	230c      	movs	r3, #12
   21234:	18fb      	adds	r3, r7, r3
   21236:	799b      	ldrb	r3, [r3, #6]
   21238:	001c      	movs	r4, r3
   2123a:	230c      	movs	r3, #12
   2123c:	18fb      	adds	r3, r7, r3
   2123e:	8c1b      	ldrh	r3, [r3, #32]
   21240:	4843      	ldr	r0, [pc, #268]	; (21350 <m2m_wifi_init+0x1c4>)
   21242:	9300      	str	r3, [sp, #0]
   21244:	0023      	movs	r3, r4
   21246:	4c41      	ldr	r4, [pc, #260]	; (2134c <m2m_wifi_init+0x1c0>)
   21248:	47a0      	blx	r4
   2124a:	4b42      	ldr	r3, [pc, #264]	; (21354 <m2m_wifi_init+0x1c8>)
   2124c:	0018      	movs	r0, r3
   2124e:	4b3f      	ldr	r3, [pc, #252]	; (2134c <m2m_wifi_init+0x1c0>)
   21250:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   21252:	4b3d      	ldr	r3, [pc, #244]	; (21348 <m2m_wifi_init+0x1bc>)
   21254:	0018      	movs	r0, r3
   21256:	4b3d      	ldr	r3, [pc, #244]	; (2134c <m2m_wifi_init+0x1c0>)
   21258:	4798      	blx	r3
   2125a:	230c      	movs	r3, #12
   2125c:	18fb      	adds	r3, r7, r3
   2125e:	3316      	adds	r3, #22
   21260:	001a      	movs	r2, r3
   21262:	230c      	movs	r3, #12
   21264:	18fb      	adds	r3, r7, r3
   21266:	330a      	adds	r3, #10
   21268:	0019      	movs	r1, r3
   2126a:	4b3b      	ldr	r3, [pc, #236]	; (21358 <m2m_wifi_init+0x1cc>)
   2126c:	0018      	movs	r0, r3
   2126e:	4b37      	ldr	r3, [pc, #220]	; (2134c <m2m_wifi_init+0x1c0>)
   21270:	4798      	blx	r3
   21272:	4b38      	ldr	r3, [pc, #224]	; (21354 <m2m_wifi_init+0x1c8>)
   21274:	0018      	movs	r0, r3
   21276:	4b35      	ldr	r3, [pc, #212]	; (2134c <m2m_wifi_init+0x1c0>)
   21278:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   2127a:	4b33      	ldr	r3, [pc, #204]	; (21348 <m2m_wifi_init+0x1bc>)
   2127c:	0018      	movs	r0, r3
   2127e:	4b33      	ldr	r3, [pc, #204]	; (2134c <m2m_wifi_init+0x1c0>)
   21280:	4798      	blx	r3
   21282:	230c      	movs	r3, #12
   21284:	18fb      	adds	r3, r7, r3
   21286:	79db      	ldrb	r3, [r3, #7]
   21288:	0019      	movs	r1, r3
   2128a:	230c      	movs	r3, #12
   2128c:	18fb      	adds	r3, r7, r3
   2128e:	7a1b      	ldrb	r3, [r3, #8]
   21290:	001a      	movs	r2, r3
   21292:	230c      	movs	r3, #12
   21294:	18fb      	adds	r3, r7, r3
   21296:	7a5b      	ldrb	r3, [r3, #9]
   21298:	4830      	ldr	r0, [pc, #192]	; (2135c <m2m_wifi_init+0x1d0>)
   2129a:	4c2c      	ldr	r4, [pc, #176]	; (2134c <m2m_wifi_init+0x1c0>)
   2129c:	47a0      	blx	r4
   2129e:	4b2d      	ldr	r3, [pc, #180]	; (21354 <m2m_wifi_init+0x1c8>)
   212a0:	0018      	movs	r0, r3
   212a2:	4b2a      	ldr	r3, [pc, #168]	; (2134c <m2m_wifi_init+0x1c0>)
   212a4:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   212a6:	4b28      	ldr	r3, [pc, #160]	; (21348 <m2m_wifi_init+0x1bc>)
   212a8:	0018      	movs	r0, r3
   212aa:	4b28      	ldr	r3, [pc, #160]	; (2134c <m2m_wifi_init+0x1c0>)
   212ac:	4798      	blx	r3
   212ae:	482c      	ldr	r0, [pc, #176]	; (21360 <m2m_wifi_init+0x1d4>)
   212b0:	2304      	movs	r3, #4
   212b2:	2205      	movs	r2, #5
   212b4:	2113      	movs	r1, #19
   212b6:	4c25      	ldr	r4, [pc, #148]	; (2134c <m2m_wifi_init+0x1c0>)
   212b8:	47a0      	blx	r4
   212ba:	4b26      	ldr	r3, [pc, #152]	; (21354 <m2m_wifi_init+0x1c8>)
   212bc:	0018      	movs	r0, r3
   212be:	4b23      	ldr	r3, [pc, #140]	; (2134c <m2m_wifi_init+0x1c0>)
   212c0:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   212c2:	4b21      	ldr	r3, [pc, #132]	; (21348 <m2m_wifi_init+0x1bc>)
   212c4:	0018      	movs	r0, r3
   212c6:	4b21      	ldr	r3, [pc, #132]	; (2134c <m2m_wifi_init+0x1c0>)
   212c8:	4798      	blx	r3
   212ca:	4a26      	ldr	r2, [pc, #152]	; (21364 <m2m_wifi_init+0x1d8>)
   212cc:	4926      	ldr	r1, [pc, #152]	; (21368 <m2m_wifi_init+0x1dc>)
   212ce:	4b27      	ldr	r3, [pc, #156]	; (2136c <m2m_wifi_init+0x1e0>)
   212d0:	0018      	movs	r0, r3
   212d2:	4b1e      	ldr	r3, [pc, #120]	; (2134c <m2m_wifi_init+0x1c0>)
   212d4:	4798      	blx	r3
   212d6:	4b1f      	ldr	r3, [pc, #124]	; (21354 <m2m_wifi_init+0x1c8>)
   212d8:	0018      	movs	r0, r3
   212da:	4b1c      	ldr	r3, [pc, #112]	; (2134c <m2m_wifi_init+0x1c0>)
   212dc:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   212de:	2337      	movs	r3, #55	; 0x37
   212e0:	18fb      	adds	r3, r7, r3
   212e2:	781b      	ldrb	r3, [r3, #0]
   212e4:	b25b      	sxtb	r3, r3
   212e6:	330d      	adds	r3, #13
   212e8:	d117      	bne.n	2131a <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   212ea:	23e8      	movs	r3, #232	; 0xe8
   212ec:	33ff      	adds	r3, #255	; 0xff
   212ee:	001a      	movs	r2, r3
   212f0:	491f      	ldr	r1, [pc, #124]	; (21370 <m2m_wifi_init+0x1e4>)
   212f2:	4b20      	ldr	r3, [pc, #128]	; (21374 <m2m_wifi_init+0x1e8>)
   212f4:	0018      	movs	r0, r3
   212f6:	4b15      	ldr	r3, [pc, #84]	; (2134c <m2m_wifi_init+0x1c0>)
   212f8:	4798      	blx	r3
   212fa:	4b1f      	ldr	r3, [pc, #124]	; (21378 <m2m_wifi_init+0x1ec>)
   212fc:	0018      	movs	r0, r3
   212fe:	4b13      	ldr	r3, [pc, #76]	; (2134c <m2m_wifi_init+0x1c0>)
   21300:	4798      	blx	r3
   21302:	4b14      	ldr	r3, [pc, #80]	; (21354 <m2m_wifi_init+0x1c8>)
   21304:	0018      	movs	r0, r3
   21306:	4b11      	ldr	r3, [pc, #68]	; (2134c <m2m_wifi_init+0x1c0>)
   21308:	4798      	blx	r3
	}

	goto _EXIT0;
   2130a:	e006      	b.n	2131a <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   2130c:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   2130e:	2000      	movs	r0, #0
   21310:	4b1a      	ldr	r3, [pc, #104]	; (2137c <m2m_wifi_init+0x1f0>)
   21312:	4798      	blx	r3
   21314:	e002      	b.n	2131c <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   21316:	46c0      	nop			; (mov r8, r8)
   21318:	e000      	b.n	2131c <m2m_wifi_init+0x190>
	goto _EXIT0;
   2131a:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   2131c:	2337      	movs	r3, #55	; 0x37
   2131e:	18fb      	adds	r3, r7, r3
   21320:	781b      	ldrb	r3, [r3, #0]
   21322:	b25b      	sxtb	r3, r3
}
   21324:	0018      	movs	r0, r3
   21326:	46bd      	mov	sp, r7
   21328:	b00f      	add	sp, #60	; 0x3c
   2132a:	bd90      	pop	{r4, r7, pc}
   2132c:	2000410c 	.word	0x2000410c
   21330:	20004109 	.word	0x20004109
   21334:	000224b1 	.word	0x000224b1
   21338:	00020235 	.word	0x00020235
   2133c:	00020dd5 	.word	0x00020dd5
   21340:	00020d19 	.word	0x00020d19
   21344:	000222e5 	.word	0x000222e5
   21348:	00037d98 	.word	0x00037d98
   2134c:	0001d2e9 	.word	0x0001d2e9
   21350:	00037f3c 	.word	0x00037f3c
   21354:	00037dc4 	.word	0x00037dc4
   21358:	00037f64 	.word	0x00037f64
   2135c:	00037f80 	.word	0x00037f80
   21360:	00037fa4 	.word	0x00037fa4
   21364:	00037fbc 	.word	0x00037fbc
   21368:	00037fc8 	.word	0x00037fc8
   2136c:	00037fd4 	.word	0x00037fd4
   21370:	00038170 	.word	0x00038170
   21374:	00037dc8 	.word	0x00037dc8
   21378:	00037fec 	.word	0x00037fec
   2137c:	00022641 	.word	0x00022641

00021380 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   21380:	b580      	push	{r7, lr}
   21382:	b082      	sub	sp, #8
   21384:	af00      	add	r7, sp, #0
   21386:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   21388:	4b03      	ldr	r3, [pc, #12]	; (21398 <m2m_wifi_handle_events+0x18>)
   2138a:	4798      	blx	r3
   2138c:	0003      	movs	r3, r0
}
   2138e:	0018      	movs	r0, r3
   21390:	46bd      	mov	sp, r7
   21392:	b002      	add	sp, #8
   21394:	bd80      	pop	{r7, pc}
   21396:	46c0      	nop			; (mov r8, r8)
   21398:	00020af9 	.word	0x00020af9

0002139c <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   2139c:	b590      	push	{r4, r7, lr}
   2139e:	b087      	sub	sp, #28
   213a0:	af02      	add	r7, sp, #8
   213a2:	60f8      	str	r0, [r7, #12]
   213a4:	0008      	movs	r0, r1
   213a6:	0011      	movs	r1, r2
   213a8:	607b      	str	r3, [r7, #4]
   213aa:	230b      	movs	r3, #11
   213ac:	18fb      	adds	r3, r7, r3
   213ae:	1c02      	adds	r2, r0, #0
   213b0:	701a      	strb	r2, [r3, #0]
   213b2:	230a      	movs	r3, #10
   213b4:	18fb      	adds	r3, r7, r3
   213b6:	1c0a      	adds	r2, r1, #0
   213b8:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   213ba:	687c      	ldr	r4, [r7, #4]
   213bc:	230a      	movs	r3, #10
   213be:	18fb      	adds	r3, r7, r3
   213c0:	781a      	ldrb	r2, [r3, #0]
   213c2:	230b      	movs	r3, #11
   213c4:	18fb      	adds	r3, r7, r3
   213c6:	7819      	ldrb	r1, [r3, #0]
   213c8:	68f8      	ldr	r0, [r7, #12]
   213ca:	2300      	movs	r3, #0
   213cc:	9301      	str	r3, [sp, #4]
   213ce:	2320      	movs	r3, #32
   213d0:	18fb      	adds	r3, r7, r3
   213d2:	881b      	ldrh	r3, [r3, #0]
   213d4:	9300      	str	r3, [sp, #0]
   213d6:	0023      	movs	r3, r4
   213d8:	4c03      	ldr	r4, [pc, #12]	; (213e8 <m2m_wifi_connect+0x4c>)
   213da:	47a0      	blx	r4
   213dc:	0003      	movs	r3, r0
}
   213de:	0018      	movs	r0, r3
   213e0:	46bd      	mov	sp, r7
   213e2:	b005      	add	sp, #20
   213e4:	bd90      	pop	{r4, r7, pc}
   213e6:	46c0      	nop			; (mov r8, r8)
   213e8:	000213ed 	.word	0x000213ed

000213ec <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   213ec:	b5b0      	push	{r4, r5, r7, lr}
   213ee:	b0aa      	sub	sp, #168	; 0xa8
   213f0:	af04      	add	r7, sp, #16
   213f2:	60f8      	str	r0, [r7, #12]
   213f4:	0008      	movs	r0, r1
   213f6:	0011      	movs	r1, r2
   213f8:	607b      	str	r3, [r7, #4]
   213fa:	230b      	movs	r3, #11
   213fc:	18fb      	adds	r3, r7, r3
   213fe:	1c02      	adds	r2, r0, #0
   21400:	701a      	strb	r2, [r3, #0]
   21402:	230a      	movs	r3, #10
   21404:	18fb      	adds	r3, r7, r3
   21406:	1c0a      	adds	r2, r1, #0
   21408:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   2140a:	2397      	movs	r3, #151	; 0x97
   2140c:	18fb      	adds	r3, r7, r3
   2140e:	2200      	movs	r2, #0
   21410:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   21412:	230a      	movs	r3, #10
   21414:	18fb      	adds	r3, r7, r3
   21416:	781b      	ldrb	r3, [r3, #0]
   21418:	2b01      	cmp	r3, #1
   2141a:	d100      	bne.n	2141e <m2m_wifi_connect_sc+0x32>
   2141c:	e085      	b.n	2152a <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   2141e:	687b      	ldr	r3, [r7, #4]
   21420:	2b00      	cmp	r3, #0
   21422:	d112      	bne.n	2144a <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   21424:	4ad8      	ldr	r2, [pc, #864]	; (21788 <m2m_wifi_connect_sc+0x39c>)
   21426:	49d9      	ldr	r1, [pc, #868]	; (2178c <m2m_wifi_connect_sc+0x3a0>)
   21428:	4bd9      	ldr	r3, [pc, #868]	; (21790 <m2m_wifi_connect_sc+0x3a4>)
   2142a:	0018      	movs	r0, r3
   2142c:	4bd9      	ldr	r3, [pc, #868]	; (21794 <m2m_wifi_connect_sc+0x3a8>)
   2142e:	4798      	blx	r3
   21430:	4bd9      	ldr	r3, [pc, #868]	; (21798 <m2m_wifi_connect_sc+0x3ac>)
   21432:	0018      	movs	r0, r3
   21434:	4bd7      	ldr	r3, [pc, #860]	; (21794 <m2m_wifi_connect_sc+0x3a8>)
   21436:	4798      	blx	r3
   21438:	4bd8      	ldr	r3, [pc, #864]	; (2179c <m2m_wifi_connect_sc+0x3b0>)
   2143a:	0018      	movs	r0, r3
   2143c:	4bd5      	ldr	r3, [pc, #852]	; (21794 <m2m_wifi_connect_sc+0x3a8>)
   2143e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21440:	2397      	movs	r3, #151	; 0x97
   21442:	18fb      	adds	r3, r7, r3
   21444:	22f4      	movs	r2, #244	; 0xf4
   21446:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21448:	e1f9      	b.n	2183e <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   2144a:	230a      	movs	r3, #10
   2144c:	18fb      	adds	r3, r7, r3
   2144e:	781b      	ldrb	r3, [r3, #0]
   21450:	2b02      	cmp	r3, #2
   21452:	d16a      	bne.n	2152a <m2m_wifi_connect_sc+0x13e>
   21454:	687b      	ldr	r3, [r7, #4]
   21456:	0018      	movs	r0, r3
   21458:	4bd1      	ldr	r3, [pc, #836]	; (217a0 <m2m_wifi_connect_sc+0x3b4>)
   2145a:	4798      	blx	r3
   2145c:	0003      	movs	r3, r0
   2145e:	2b40      	cmp	r3, #64	; 0x40
   21460:	d163      	bne.n	2152a <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   21462:	2396      	movs	r3, #150	; 0x96
   21464:	18fb      	adds	r3, r7, r3
   21466:	2200      	movs	r2, #0
   21468:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   2146a:	687b      	ldr	r3, [r7, #4]
   2146c:	2290      	movs	r2, #144	; 0x90
   2146e:	18ba      	adds	r2, r7, r2
   21470:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   21472:	e055      	b.n	21520 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   21474:	2396      	movs	r3, #150	; 0x96
   21476:	18fb      	adds	r3, r7, r3
   21478:	781b      	ldrb	r3, [r3, #0]
   2147a:	2290      	movs	r2, #144	; 0x90
   2147c:	18ba      	adds	r2, r7, r2
   2147e:	6812      	ldr	r2, [r2, #0]
   21480:	18d3      	adds	r3, r2, r3
   21482:	781b      	ldrb	r3, [r3, #0]
   21484:	2b2f      	cmp	r3, #47	; 0x2f
   21486:	d931      	bls.n	214ec <m2m_wifi_connect_sc+0x100>
   21488:	2396      	movs	r3, #150	; 0x96
   2148a:	18fb      	adds	r3, r7, r3
   2148c:	781b      	ldrb	r3, [r3, #0]
   2148e:	2290      	movs	r2, #144	; 0x90
   21490:	18ba      	adds	r2, r7, r2
   21492:	6812      	ldr	r2, [r2, #0]
   21494:	18d3      	adds	r3, r2, r3
   21496:	781b      	ldrb	r3, [r3, #0]
   21498:	2b39      	cmp	r3, #57	; 0x39
   2149a:	d909      	bls.n	214b0 <m2m_wifi_connect_sc+0xc4>
   2149c:	2396      	movs	r3, #150	; 0x96
   2149e:	18fb      	adds	r3, r7, r3
   214a0:	781b      	ldrb	r3, [r3, #0]
   214a2:	2290      	movs	r2, #144	; 0x90
   214a4:	18ba      	adds	r2, r7, r2
   214a6:	6812      	ldr	r2, [r2, #0]
   214a8:	18d3      	adds	r3, r2, r3
   214aa:	781b      	ldrb	r3, [r3, #0]
   214ac:	2b40      	cmp	r3, #64	; 0x40
   214ae:	d91d      	bls.n	214ec <m2m_wifi_connect_sc+0x100>
   214b0:	2396      	movs	r3, #150	; 0x96
   214b2:	18fb      	adds	r3, r7, r3
   214b4:	781b      	ldrb	r3, [r3, #0]
   214b6:	2290      	movs	r2, #144	; 0x90
   214b8:	18ba      	adds	r2, r7, r2
   214ba:	6812      	ldr	r2, [r2, #0]
   214bc:	18d3      	adds	r3, r2, r3
   214be:	781b      	ldrb	r3, [r3, #0]
   214c0:	2b46      	cmp	r3, #70	; 0x46
   214c2:	d909      	bls.n	214d8 <m2m_wifi_connect_sc+0xec>
   214c4:	2396      	movs	r3, #150	; 0x96
   214c6:	18fb      	adds	r3, r7, r3
   214c8:	781b      	ldrb	r3, [r3, #0]
   214ca:	2290      	movs	r2, #144	; 0x90
   214cc:	18ba      	adds	r2, r7, r2
   214ce:	6812      	ldr	r2, [r2, #0]
   214d0:	18d3      	adds	r3, r2, r3
   214d2:	781b      	ldrb	r3, [r3, #0]
   214d4:	2b60      	cmp	r3, #96	; 0x60
   214d6:	d909      	bls.n	214ec <m2m_wifi_connect_sc+0x100>
   214d8:	2396      	movs	r3, #150	; 0x96
   214da:	18fb      	adds	r3, r7, r3
   214dc:	781b      	ldrb	r3, [r3, #0]
   214de:	2290      	movs	r2, #144	; 0x90
   214e0:	18ba      	adds	r2, r7, r2
   214e2:	6812      	ldr	r2, [r2, #0]
   214e4:	18d3      	adds	r3, r2, r3
   214e6:	781b      	ldrb	r3, [r3, #0]
   214e8:	2b66      	cmp	r3, #102	; 0x66
   214ea:	d912      	bls.n	21512 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   214ec:	4aad      	ldr	r2, [pc, #692]	; (217a4 <m2m_wifi_connect_sc+0x3b8>)
   214ee:	49a7      	ldr	r1, [pc, #668]	; (2178c <m2m_wifi_connect_sc+0x3a0>)
   214f0:	4ba7      	ldr	r3, [pc, #668]	; (21790 <m2m_wifi_connect_sc+0x3a4>)
   214f2:	0018      	movs	r0, r3
   214f4:	4ba7      	ldr	r3, [pc, #668]	; (21794 <m2m_wifi_connect_sc+0x3a8>)
   214f6:	4798      	blx	r3
   214f8:	4bab      	ldr	r3, [pc, #684]	; (217a8 <m2m_wifi_connect_sc+0x3bc>)
   214fa:	0018      	movs	r0, r3
   214fc:	4ba5      	ldr	r3, [pc, #660]	; (21794 <m2m_wifi_connect_sc+0x3a8>)
   214fe:	4798      	blx	r3
   21500:	4ba6      	ldr	r3, [pc, #664]	; (2179c <m2m_wifi_connect_sc+0x3b0>)
   21502:	0018      	movs	r0, r3
   21504:	4ba3      	ldr	r3, [pc, #652]	; (21794 <m2m_wifi_connect_sc+0x3a8>)
   21506:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   21508:	2397      	movs	r3, #151	; 0x97
   2150a:	18fb      	adds	r3, r7, r3
   2150c:	22f4      	movs	r2, #244	; 0xf4
   2150e:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   21510:	e195      	b.n	2183e <m2m_wifi_connect_sc+0x452>
				}
				i++;
   21512:	2396      	movs	r3, #150	; 0x96
   21514:	18fb      	adds	r3, r7, r3
   21516:	781a      	ldrb	r2, [r3, #0]
   21518:	2396      	movs	r3, #150	; 0x96
   2151a:	18fb      	adds	r3, r7, r3
   2151c:	3201      	adds	r2, #1
   2151e:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   21520:	2396      	movs	r3, #150	; 0x96
   21522:	18fb      	adds	r3, r7, r3
   21524:	781b      	ldrb	r3, [r3, #0]
   21526:	2b3f      	cmp	r3, #63	; 0x3f
   21528:	d9a4      	bls.n	21474 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   2152a:	230b      	movs	r3, #11
   2152c:	18fb      	adds	r3, r7, r3
   2152e:	781b      	ldrb	r3, [r3, #0]
   21530:	2b00      	cmp	r3, #0
   21532:	d004      	beq.n	2153e <m2m_wifi_connect_sc+0x152>
   21534:	230b      	movs	r3, #11
   21536:	18fb      	adds	r3, r7, r3
   21538:	781b      	ldrb	r3, [r3, #0]
   2153a:	2b20      	cmp	r3, #32
   2153c:	d913      	bls.n	21566 <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   2153e:	238c      	movs	r3, #140	; 0x8c
   21540:	009a      	lsls	r2, r3, #2
   21542:	4992      	ldr	r1, [pc, #584]	; (2178c <m2m_wifi_connect_sc+0x3a0>)
   21544:	4b92      	ldr	r3, [pc, #584]	; (21790 <m2m_wifi_connect_sc+0x3a4>)
   21546:	0018      	movs	r0, r3
   21548:	4b92      	ldr	r3, [pc, #584]	; (21794 <m2m_wifi_connect_sc+0x3a8>)
   2154a:	4798      	blx	r3
   2154c:	4b97      	ldr	r3, [pc, #604]	; (217ac <m2m_wifi_connect_sc+0x3c0>)
   2154e:	0018      	movs	r0, r3
   21550:	4b90      	ldr	r3, [pc, #576]	; (21794 <m2m_wifi_connect_sc+0x3a8>)
   21552:	4798      	blx	r3
   21554:	4b91      	ldr	r3, [pc, #580]	; (2179c <m2m_wifi_connect_sc+0x3b0>)
   21556:	0018      	movs	r0, r3
   21558:	4b8e      	ldr	r3, [pc, #568]	; (21794 <m2m_wifi_connect_sc+0x3a8>)
   2155a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   2155c:	2397      	movs	r3, #151	; 0x97
   2155e:	18fb      	adds	r3, r7, r3
   21560:	22f4      	movs	r2, #244	; 0xf4
   21562:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   21564:	e16b      	b.n	2183e <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   21566:	23a8      	movs	r3, #168	; 0xa8
   21568:	18fb      	adds	r3, r7, r3
   2156a:	881b      	ldrh	r3, [r3, #0]
   2156c:	2b00      	cmp	r3, #0
   2156e:	d004      	beq.n	2157a <m2m_wifi_connect_sc+0x18e>
   21570:	23a8      	movs	r3, #168	; 0xa8
   21572:	18fb      	adds	r3, r7, r3
   21574:	881b      	ldrh	r3, [r3, #0]
   21576:	2b0e      	cmp	r3, #14
   21578:	d917      	bls.n	215aa <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   2157a:	23a8      	movs	r3, #168	; 0xa8
   2157c:	18fb      	adds	r3, r7, r3
   2157e:	881b      	ldrh	r3, [r3, #0]
   21580:	2bff      	cmp	r3, #255	; 0xff
   21582:	d012      	beq.n	215aa <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   21584:	4a8a      	ldr	r2, [pc, #552]	; (217b0 <m2m_wifi_connect_sc+0x3c4>)
   21586:	4981      	ldr	r1, [pc, #516]	; (2178c <m2m_wifi_connect_sc+0x3a0>)
   21588:	4b81      	ldr	r3, [pc, #516]	; (21790 <m2m_wifi_connect_sc+0x3a4>)
   2158a:	0018      	movs	r0, r3
   2158c:	4b81      	ldr	r3, [pc, #516]	; (21794 <m2m_wifi_connect_sc+0x3a8>)
   2158e:	4798      	blx	r3
   21590:	4b88      	ldr	r3, [pc, #544]	; (217b4 <m2m_wifi_connect_sc+0x3c8>)
   21592:	0018      	movs	r0, r3
   21594:	4b7f      	ldr	r3, [pc, #508]	; (21794 <m2m_wifi_connect_sc+0x3a8>)
   21596:	4798      	blx	r3
   21598:	4b80      	ldr	r3, [pc, #512]	; (2179c <m2m_wifi_connect_sc+0x3b0>)
   2159a:	0018      	movs	r0, r3
   2159c:	4b7d      	ldr	r3, [pc, #500]	; (21794 <m2m_wifi_connect_sc+0x3a8>)
   2159e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   215a0:	2397      	movs	r3, #151	; 0x97
   215a2:	18fb      	adds	r3, r7, r3
   215a4:	22f4      	movs	r2, #244	; 0xf4
   215a6:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   215a8:	e149      	b.n	2183e <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   215aa:	230b      	movs	r3, #11
   215ac:	18fb      	adds	r3, r7, r3
   215ae:	781a      	ldrb	r2, [r3, #0]
   215b0:	68f9      	ldr	r1, [r7, #12]
   215b2:	2314      	movs	r3, #20
   215b4:	18fb      	adds	r3, r7, r3
   215b6:	3346      	adds	r3, #70	; 0x46
   215b8:	0018      	movs	r0, r3
   215ba:	4b7f      	ldr	r3, [pc, #508]	; (217b8 <m2m_wifi_connect_sc+0x3cc>)
   215bc:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   215be:	230b      	movs	r3, #11
   215c0:	18fb      	adds	r3, r7, r3
   215c2:	781b      	ldrb	r3, [r3, #0]
   215c4:	2214      	movs	r2, #20
   215c6:	18ba      	adds	r2, r7, r2
   215c8:	2146      	movs	r1, #70	; 0x46
   215ca:	18d3      	adds	r3, r2, r3
   215cc:	185b      	adds	r3, r3, r1
   215ce:	2200      	movs	r2, #0
   215d0:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   215d2:	2314      	movs	r3, #20
   215d4:	18fb      	adds	r3, r7, r3
   215d6:	22a8      	movs	r2, #168	; 0xa8
   215d8:	18ba      	adds	r2, r7, r2
   215da:	2144      	movs	r1, #68	; 0x44
   215dc:	8812      	ldrh	r2, [r2, #0]
   215de:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   215e0:	23ac      	movs	r3, #172	; 0xac
   215e2:	18fb      	adds	r3, r7, r3
   215e4:	781b      	ldrb	r3, [r3, #0]
   215e6:	1e5a      	subs	r2, r3, #1
   215e8:	4193      	sbcs	r3, r2
   215ea:	b2db      	uxtb	r3, r3
   215ec:	0019      	movs	r1, r3
   215ee:	2314      	movs	r3, #20
   215f0:	18fb      	adds	r3, r7, r3
   215f2:	2267      	movs	r2, #103	; 0x67
   215f4:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   215f6:	2314      	movs	r3, #20
   215f8:	18fb      	adds	r3, r7, r3
   215fa:	228c      	movs	r2, #140	; 0x8c
   215fc:	18ba      	adds	r2, r7, r2
   215fe:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   21600:	238c      	movs	r3, #140	; 0x8c
   21602:	18fb      	adds	r3, r7, r3
   21604:	681b      	ldr	r3, [r3, #0]
   21606:	220a      	movs	r2, #10
   21608:	18ba      	adds	r2, r7, r2
   2160a:	2141      	movs	r1, #65	; 0x41
   2160c:	7812      	ldrb	r2, [r2, #0]
   2160e:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   21610:	230a      	movs	r3, #10
   21612:	18fb      	adds	r3, r7, r3
   21614:	781b      	ldrb	r3, [r3, #0]
   21616:	2b03      	cmp	r3, #3
   21618:	d000      	beq.n	2161c <m2m_wifi_connect_sc+0x230>
   2161a:	e07d      	b.n	21718 <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   2161c:	687b      	ldr	r3, [r7, #4]
   2161e:	2288      	movs	r2, #136	; 0x88
   21620:	18ba      	adds	r2, r7, r2
   21622:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   21624:	238c      	movs	r3, #140	; 0x8c
   21626:	18fb      	adds	r3, r7, r3
   21628:	681b      	ldr	r3, [r3, #0]
   2162a:	2284      	movs	r2, #132	; 0x84
   2162c:	18ba      	adds	r2, r7, r2
   2162e:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   21630:	2388      	movs	r3, #136	; 0x88
   21632:	18fb      	adds	r3, r7, r3
   21634:	681b      	ldr	r3, [r3, #0]
   21636:	781b      	ldrb	r3, [r3, #0]
   21638:	3b01      	subs	r3, #1
   2163a:	b2da      	uxtb	r2, r3
   2163c:	2384      	movs	r3, #132	; 0x84
   2163e:	18fb      	adds	r3, r7, r3
   21640:	681b      	ldr	r3, [r3, #0]
   21642:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   21644:	2384      	movs	r3, #132	; 0x84
   21646:	18fb      	adds	r3, r7, r3
   21648:	681b      	ldr	r3, [r3, #0]
   2164a:	781b      	ldrb	r3, [r3, #0]
   2164c:	2b03      	cmp	r3, #3
   2164e:	d919      	bls.n	21684 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   21650:	2394      	movs	r3, #148	; 0x94
   21652:	009a      	lsls	r2, r3, #2
   21654:	494d      	ldr	r1, [pc, #308]	; (2178c <m2m_wifi_connect_sc+0x3a0>)
   21656:	4b4e      	ldr	r3, [pc, #312]	; (21790 <m2m_wifi_connect_sc+0x3a4>)
   21658:	0018      	movs	r0, r3
   2165a:	4b4e      	ldr	r3, [pc, #312]	; (21794 <m2m_wifi_connect_sc+0x3a8>)
   2165c:	4798      	blx	r3
   2165e:	2384      	movs	r3, #132	; 0x84
   21660:	18fb      	adds	r3, r7, r3
   21662:	681b      	ldr	r3, [r3, #0]
   21664:	781b      	ldrb	r3, [r3, #0]
   21666:	001a      	movs	r2, r3
   21668:	4b54      	ldr	r3, [pc, #336]	; (217bc <m2m_wifi_connect_sc+0x3d0>)
   2166a:	0011      	movs	r1, r2
   2166c:	0018      	movs	r0, r3
   2166e:	4b49      	ldr	r3, [pc, #292]	; (21794 <m2m_wifi_connect_sc+0x3a8>)
   21670:	4798      	blx	r3
   21672:	4b4a      	ldr	r3, [pc, #296]	; (2179c <m2m_wifi_connect_sc+0x3b0>)
   21674:	0018      	movs	r0, r3
   21676:	4b47      	ldr	r3, [pc, #284]	; (21794 <m2m_wifi_connect_sc+0x3a8>)
   21678:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2167a:	2397      	movs	r3, #151	; 0x97
   2167c:	18fb      	adds	r3, r7, r3
   2167e:	22f4      	movs	r2, #244	; 0xf4
   21680:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21682:	e0dc      	b.n	2183e <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   21684:	2388      	movs	r3, #136	; 0x88
   21686:	18fb      	adds	r3, r7, r3
   21688:	681b      	ldr	r3, [r3, #0]
   2168a:	785b      	ldrb	r3, [r3, #1]
   2168c:	3b01      	subs	r3, #1
   2168e:	b2da      	uxtb	r2, r3
   21690:	2384      	movs	r3, #132	; 0x84
   21692:	18fb      	adds	r3, r7, r3
   21694:	681b      	ldr	r3, [r3, #0]
   21696:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   21698:	2384      	movs	r3, #132	; 0x84
   2169a:	18fb      	adds	r3, r7, r3
   2169c:	681b      	ldr	r3, [r3, #0]
   2169e:	785b      	ldrb	r3, [r3, #1]
   216a0:	2b0a      	cmp	r3, #10
   216a2:	d01e      	beq.n	216e2 <m2m_wifi_connect_sc+0x2f6>
   216a4:	2384      	movs	r3, #132	; 0x84
   216a6:	18fb      	adds	r3, r7, r3
   216a8:	681b      	ldr	r3, [r3, #0]
   216aa:	785b      	ldrb	r3, [r3, #1]
   216ac:	2b1a      	cmp	r3, #26
   216ae:	d018      	beq.n	216e2 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   216b0:	4a43      	ldr	r2, [pc, #268]	; (217c0 <m2m_wifi_connect_sc+0x3d4>)
   216b2:	4936      	ldr	r1, [pc, #216]	; (2178c <m2m_wifi_connect_sc+0x3a0>)
   216b4:	4b36      	ldr	r3, [pc, #216]	; (21790 <m2m_wifi_connect_sc+0x3a4>)
   216b6:	0018      	movs	r0, r3
   216b8:	4b36      	ldr	r3, [pc, #216]	; (21794 <m2m_wifi_connect_sc+0x3a8>)
   216ba:	4798      	blx	r3
   216bc:	2384      	movs	r3, #132	; 0x84
   216be:	18fb      	adds	r3, r7, r3
   216c0:	681b      	ldr	r3, [r3, #0]
   216c2:	785b      	ldrb	r3, [r3, #1]
   216c4:	001a      	movs	r2, r3
   216c6:	4b3f      	ldr	r3, [pc, #252]	; (217c4 <m2m_wifi_connect_sc+0x3d8>)
   216c8:	0011      	movs	r1, r2
   216ca:	0018      	movs	r0, r3
   216cc:	4b31      	ldr	r3, [pc, #196]	; (21794 <m2m_wifi_connect_sc+0x3a8>)
   216ce:	4798      	blx	r3
   216d0:	4b32      	ldr	r3, [pc, #200]	; (2179c <m2m_wifi_connect_sc+0x3b0>)
   216d2:	0018      	movs	r0, r3
   216d4:	4b2f      	ldr	r3, [pc, #188]	; (21794 <m2m_wifi_connect_sc+0x3a8>)
   216d6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   216d8:	2397      	movs	r3, #151	; 0x97
   216da:	18fb      	adds	r3, r7, r3
   216dc:	22f4      	movs	r2, #244	; 0xf4
   216de:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   216e0:	e0ad      	b.n	2183e <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   216e2:	2384      	movs	r3, #132	; 0x84
   216e4:	18fb      	adds	r3, r7, r3
   216e6:	681b      	ldr	r3, [r3, #0]
   216e8:	1c98      	adds	r0, r3, #2
   216ea:	2388      	movs	r3, #136	; 0x88
   216ec:	18fb      	adds	r3, r7, r3
   216ee:	681b      	ldr	r3, [r3, #0]
   216f0:	1c99      	adds	r1, r3, #2
   216f2:	2388      	movs	r3, #136	; 0x88
   216f4:	18fb      	adds	r3, r7, r3
   216f6:	681b      	ldr	r3, [r3, #0]
   216f8:	785b      	ldrb	r3, [r3, #1]
   216fa:	001a      	movs	r2, r3
   216fc:	4b2e      	ldr	r3, [pc, #184]	; (217b8 <m2m_wifi_connect_sc+0x3cc>)
   216fe:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   21700:	2388      	movs	r3, #136	; 0x88
   21702:	18fb      	adds	r3, r7, r3
   21704:	681b      	ldr	r3, [r3, #0]
   21706:	785b      	ldrb	r3, [r3, #1]
   21708:	001a      	movs	r2, r3
   2170a:	2384      	movs	r3, #132	; 0x84
   2170c:	18fb      	adds	r3, r7, r3
   2170e:	681b      	ldr	r3, [r3, #0]
   21710:	189b      	adds	r3, r3, r2
   21712:	2200      	movs	r2, #0
   21714:	709a      	strb	r2, [r3, #2]
   21716:	e081      	b.n	2181c <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   21718:	230a      	movs	r3, #10
   2171a:	18fb      	adds	r3, r7, r3
   2171c:	781b      	ldrb	r3, [r3, #0]
   2171e:	2b02      	cmp	r3, #2
   21720:	d156      	bne.n	217d0 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   21722:	2382      	movs	r3, #130	; 0x82
   21724:	18fc      	adds	r4, r7, r3
   21726:	687b      	ldr	r3, [r7, #4]
   21728:	0018      	movs	r0, r3
   2172a:	4b1d      	ldr	r3, [pc, #116]	; (217a0 <m2m_wifi_connect_sc+0x3b4>)
   2172c:	4798      	blx	r3
   2172e:	0003      	movs	r3, r0
   21730:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   21732:	2382      	movs	r3, #130	; 0x82
   21734:	18fb      	adds	r3, r7, r3
   21736:	881b      	ldrh	r3, [r3, #0]
   21738:	2b00      	cmp	r3, #0
   2173a:	d004      	beq.n	21746 <m2m_wifi_connect_sc+0x35a>
   2173c:	2382      	movs	r3, #130	; 0x82
   2173e:	18fb      	adds	r3, r7, r3
   21740:	881b      	ldrh	r3, [r3, #0]
   21742:	2b40      	cmp	r3, #64	; 0x40
   21744:	d912      	bls.n	2176c <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   21746:	4a20      	ldr	r2, [pc, #128]	; (217c8 <m2m_wifi_connect_sc+0x3dc>)
   21748:	4910      	ldr	r1, [pc, #64]	; (2178c <m2m_wifi_connect_sc+0x3a0>)
   2174a:	4b11      	ldr	r3, [pc, #68]	; (21790 <m2m_wifi_connect_sc+0x3a4>)
   2174c:	0018      	movs	r0, r3
   2174e:	4b11      	ldr	r3, [pc, #68]	; (21794 <m2m_wifi_connect_sc+0x3a8>)
   21750:	4798      	blx	r3
   21752:	4b1e      	ldr	r3, [pc, #120]	; (217cc <m2m_wifi_connect_sc+0x3e0>)
   21754:	0018      	movs	r0, r3
   21756:	4b0f      	ldr	r3, [pc, #60]	; (21794 <m2m_wifi_connect_sc+0x3a8>)
   21758:	4798      	blx	r3
   2175a:	4b10      	ldr	r3, [pc, #64]	; (2179c <m2m_wifi_connect_sc+0x3b0>)
   2175c:	0018      	movs	r0, r3
   2175e:	4b0d      	ldr	r3, [pc, #52]	; (21794 <m2m_wifi_connect_sc+0x3a8>)
   21760:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21762:	2397      	movs	r3, #151	; 0x97
   21764:	18fb      	adds	r3, r7, r3
   21766:	22f4      	movs	r2, #244	; 0xf4
   21768:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   2176a:	e068      	b.n	2183e <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   2176c:	238c      	movs	r3, #140	; 0x8c
   2176e:	18fb      	adds	r3, r7, r3
   21770:	6818      	ldr	r0, [r3, #0]
   21772:	2382      	movs	r3, #130	; 0x82
   21774:	18fb      	adds	r3, r7, r3
   21776:	881b      	ldrh	r3, [r3, #0]
   21778:	3301      	adds	r3, #1
   2177a:	001a      	movs	r2, r3
   2177c:	687b      	ldr	r3, [r7, #4]
   2177e:	0019      	movs	r1, r3
   21780:	4b0d      	ldr	r3, [pc, #52]	; (217b8 <m2m_wifi_connect_sc+0x3cc>)
   21782:	4798      	blx	r3
   21784:	e04a      	b.n	2181c <m2m_wifi_connect_sc+0x430>
   21786:	46c0      	nop			; (mov r8, r8)
   21788:	0000021a 	.word	0x0000021a
   2178c:	00038180 	.word	0x00038180
   21790:	00037dc8 	.word	0x00037dc8
   21794:	0001d2e9 	.word	0x0001d2e9
   21798:	00038008 	.word	0x00038008
   2179c:	00037dc4 	.word	0x00037dc4
   217a0:	0002005b 	.word	0x0002005b
   217a4:	00000226 	.word	0x00000226
   217a8:	0003801c 	.word	0x0003801c
   217ac:	0003802c 	.word	0x0003802c
   217b0:	00000239 	.word	0x00000239
   217b4:	00038040 	.word	0x00038040
   217b8:	0001ffe1 	.word	0x0001ffe1
   217bc:	0003804c 	.word	0x0003804c
   217c0:	00000257 	.word	0x00000257
   217c4:	00038068 	.word	0x00038068
   217c8:	00000266 	.word	0x00000266
   217cc:	00038084 	.word	0x00038084
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   217d0:	230a      	movs	r3, #10
   217d2:	18fb      	adds	r3, r7, r3
   217d4:	781b      	ldrb	r3, [r3, #0]
   217d6:	2b04      	cmp	r3, #4
   217d8:	d108      	bne.n	217ec <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   217da:	238c      	movs	r3, #140	; 0x8c
   217dc:	18fb      	adds	r3, r7, r3
   217de:	681b      	ldr	r3, [r3, #0]
   217e0:	6879      	ldr	r1, [r7, #4]
   217e2:	223e      	movs	r2, #62	; 0x3e
   217e4:	0018      	movs	r0, r3
   217e6:	4b1a      	ldr	r3, [pc, #104]	; (21850 <m2m_wifi_connect_sc+0x464>)
   217e8:	4798      	blx	r3
   217ea:	e017      	b.n	2181c <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   217ec:	230a      	movs	r3, #10
   217ee:	18fb      	adds	r3, r7, r3
   217f0:	781b      	ldrb	r3, [r3, #0]
   217f2:	2b01      	cmp	r3, #1
   217f4:	d012      	beq.n	2181c <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   217f6:	4a17      	ldr	r2, [pc, #92]	; (21854 <m2m_wifi_connect_sc+0x468>)
   217f8:	4917      	ldr	r1, [pc, #92]	; (21858 <m2m_wifi_connect_sc+0x46c>)
   217fa:	4b18      	ldr	r3, [pc, #96]	; (2185c <m2m_wifi_connect_sc+0x470>)
   217fc:	0018      	movs	r0, r3
   217fe:	4b18      	ldr	r3, [pc, #96]	; (21860 <m2m_wifi_connect_sc+0x474>)
   21800:	4798      	blx	r3
   21802:	4b18      	ldr	r3, [pc, #96]	; (21864 <m2m_wifi_connect_sc+0x478>)
   21804:	0018      	movs	r0, r3
   21806:	4b16      	ldr	r3, [pc, #88]	; (21860 <m2m_wifi_connect_sc+0x474>)
   21808:	4798      	blx	r3
   2180a:	4b17      	ldr	r3, [pc, #92]	; (21868 <m2m_wifi_connect_sc+0x47c>)
   2180c:	0018      	movs	r0, r3
   2180e:	4b14      	ldr	r3, [pc, #80]	; (21860 <m2m_wifi_connect_sc+0x474>)
   21810:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   21812:	2397      	movs	r3, #151	; 0x97
   21814:	18fb      	adds	r3, r7, r3
   21816:	22f4      	movs	r2, #244	; 0xf4
   21818:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   2181a:	e010      	b.n	2183e <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   2181c:	2397      	movs	r3, #151	; 0x97
   2181e:	18fc      	adds	r4, r7, r3
   21820:	2314      	movs	r3, #20
   21822:	18fa      	adds	r2, r7, r3
   21824:	2300      	movs	r3, #0
   21826:	9302      	str	r3, [sp, #8]
   21828:	2300      	movs	r3, #0
   2182a:	9301      	str	r3, [sp, #4]
   2182c:	2300      	movs	r3, #0
   2182e:	9300      	str	r3, [sp, #0]
   21830:	236c      	movs	r3, #108	; 0x6c
   21832:	2128      	movs	r1, #40	; 0x28
   21834:	2001      	movs	r0, #1
   21836:	4d0d      	ldr	r5, [pc, #52]	; (2186c <m2m_wifi_connect_sc+0x480>)
   21838:	47a8      	blx	r5
   2183a:	0003      	movs	r3, r0
   2183c:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   2183e:	2397      	movs	r3, #151	; 0x97
   21840:	18fb      	adds	r3, r7, r3
   21842:	781b      	ldrb	r3, [r3, #0]
   21844:	b25b      	sxtb	r3, r3
}
   21846:	0018      	movs	r0, r3
   21848:	46bd      	mov	sp, r7
   2184a:	b026      	add	sp, #152	; 0x98
   2184c:	bdb0      	pop	{r4, r5, r7, pc}
   2184e:	46c0      	nop			; (mov r8, r8)
   21850:	0001ffe1 	.word	0x0001ffe1
   21854:	00000276 	.word	0x00000276
   21858:	00038180 	.word	0x00038180
   2185c:	00037dc8 	.word	0x00037dc8
   21860:	0001d2e9 	.word	0x0001d2e9
   21864:	000380a0 	.word	0x000380a0
   21868:	00037dc4 	.word	0x00037dc4
   2186c:	0002027d 	.word	0x0002027d

00021870 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   21870:	b580      	push	{r7, lr}
   21872:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   21874:	2300      	movs	r3, #0
}
   21876:	0018      	movs	r0, r3
   21878:	46bd      	mov	sp, r7
   2187a:	bd80      	pop	{r7, pc}

0002187c <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   2187c:	b590      	push	{r4, r7, lr}
   2187e:	b087      	sub	sp, #28
   21880:	af00      	add	r7, sp, #0
   21882:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   21884:	2317      	movs	r3, #23
   21886:	18fb      	adds	r3, r7, r3
   21888:	2200      	movs	r2, #0
   2188a:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   2188c:	687b      	ldr	r3, [r7, #4]
   2188e:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   21890:	693b      	ldr	r3, [r7, #16]
   21892:	2280      	movs	r2, #128	; 0x80
   21894:	0052      	lsls	r2, r2, #1
   21896:	4313      	orrs	r3, r2
   21898:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   2189a:	693a      	ldr	r2, [r7, #16]
   2189c:	23a5      	movs	r3, #165	; 0xa5
   2189e:	015b      	lsls	r3, r3, #5
   218a0:	0011      	movs	r1, r2
   218a2:	0018      	movs	r0, r3
   218a4:	4b12      	ldr	r3, [pc, #72]	; (218f0 <chip_apply_conf+0x74>)
   218a6:	4798      	blx	r3
		if(val32 != 0) {		
   218a8:	693b      	ldr	r3, [r7, #16]
   218aa:	2b00      	cmp	r3, #0
   218ac:	d018      	beq.n	218e0 <chip_apply_conf+0x64>
			uint32 reg = 0;
   218ae:	2300      	movs	r3, #0
   218b0:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   218b2:	2317      	movs	r3, #23
   218b4:	18fc      	adds	r4, r7, r3
   218b6:	230c      	movs	r3, #12
   218b8:	18fa      	adds	r2, r7, r3
   218ba:	23a5      	movs	r3, #165	; 0xa5
   218bc:	015b      	lsls	r3, r3, #5
   218be:	0011      	movs	r1, r2
   218c0:	0018      	movs	r0, r3
   218c2:	4b0c      	ldr	r3, [pc, #48]	; (218f4 <chip_apply_conf+0x78>)
   218c4:	4798      	blx	r3
   218c6:	0003      	movs	r3, r0
   218c8:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   218ca:	2317      	movs	r3, #23
   218cc:	18fb      	adds	r3, r7, r3
   218ce:	781b      	ldrb	r3, [r3, #0]
   218d0:	b25b      	sxtb	r3, r3
   218d2:	2b00      	cmp	r3, #0
   218d4:	d1e1      	bne.n	2189a <chip_apply_conf+0x1e>
				if(reg == val32)
   218d6:	68fa      	ldr	r2, [r7, #12]
   218d8:	693b      	ldr	r3, [r7, #16]
   218da:	429a      	cmp	r2, r3
   218dc:	d002      	beq.n	218e4 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   218de:	e7dc      	b.n	2189a <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   218e0:	46c0      	nop			; (mov r8, r8)
   218e2:	e000      	b.n	218e6 <chip_apply_conf+0x6a>
					break;
   218e4:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   218e6:	2300      	movs	r3, #0
}
   218e8:	0018      	movs	r0, r3
   218ea:	46bd      	mov	sp, r7
   218ec:	b007      	add	sp, #28
   218ee:	bd90      	pop	{r4, r7, pc}
   218f0:	000220d1 	.word	0x000220d1
   218f4:	000220ad 	.word	0x000220ad

000218f8 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   218f8:	b590      	push	{r4, r7, lr}
   218fa:	b083      	sub	sp, #12
   218fc:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   218fe:	2300      	movs	r3, #0
   21900:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   21902:	1dfb      	adds	r3, r7, #7
   21904:	2200      	movs	r2, #0
   21906:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   21908:	1dfc      	adds	r4, r7, #7
   2190a:	003b      	movs	r3, r7
   2190c:	4a24      	ldr	r2, [pc, #144]	; (219a0 <enable_interrupts+0xa8>)
   2190e:	0019      	movs	r1, r3
   21910:	0010      	movs	r0, r2
   21912:	4b24      	ldr	r3, [pc, #144]	; (219a4 <enable_interrupts+0xac>)
   21914:	4798      	blx	r3
   21916:	0003      	movs	r3, r0
   21918:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   2191a:	1dfb      	adds	r3, r7, #7
   2191c:	781b      	ldrb	r3, [r3, #0]
   2191e:	b25b      	sxtb	r3, r3
   21920:	2b00      	cmp	r3, #0
   21922:	d131      	bne.n	21988 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   21924:	683b      	ldr	r3, [r7, #0]
   21926:	2280      	movs	r2, #128	; 0x80
   21928:	0052      	lsls	r2, r2, #1
   2192a:	4313      	orrs	r3, r2
   2192c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   2192e:	683b      	ldr	r3, [r7, #0]
   21930:	1dfc      	adds	r4, r7, #7
   21932:	4a1b      	ldr	r2, [pc, #108]	; (219a0 <enable_interrupts+0xa8>)
   21934:	0019      	movs	r1, r3
   21936:	0010      	movs	r0, r2
   21938:	4b1b      	ldr	r3, [pc, #108]	; (219a8 <enable_interrupts+0xb0>)
   2193a:	4798      	blx	r3
   2193c:	0003      	movs	r3, r0
   2193e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   21940:	1dfb      	adds	r3, r7, #7
   21942:	781b      	ldrb	r3, [r3, #0]
   21944:	b25b      	sxtb	r3, r3
   21946:	2b00      	cmp	r3, #0
   21948:	d120      	bne.n	2198c <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   2194a:	1dfc      	adds	r4, r7, #7
   2194c:	003a      	movs	r2, r7
   2194e:	23d0      	movs	r3, #208	; 0xd0
   21950:	015b      	lsls	r3, r3, #5
   21952:	0011      	movs	r1, r2
   21954:	0018      	movs	r0, r3
   21956:	4b13      	ldr	r3, [pc, #76]	; (219a4 <enable_interrupts+0xac>)
   21958:	4798      	blx	r3
   2195a:	0003      	movs	r3, r0
   2195c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   2195e:	1dfb      	adds	r3, r7, #7
   21960:	781b      	ldrb	r3, [r3, #0]
   21962:	b25b      	sxtb	r3, r3
   21964:	2b00      	cmp	r3, #0
   21966:	d113      	bne.n	21990 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   21968:	683b      	ldr	r3, [r7, #0]
   2196a:	2280      	movs	r2, #128	; 0x80
   2196c:	0252      	lsls	r2, r2, #9
   2196e:	4313      	orrs	r3, r2
   21970:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   21972:	683a      	ldr	r2, [r7, #0]
   21974:	1dfc      	adds	r4, r7, #7
   21976:	23d0      	movs	r3, #208	; 0xd0
   21978:	015b      	lsls	r3, r3, #5
   2197a:	0011      	movs	r1, r2
   2197c:	0018      	movs	r0, r3
   2197e:	4b0a      	ldr	r3, [pc, #40]	; (219a8 <enable_interrupts+0xb0>)
   21980:	4798      	blx	r3
   21982:	0003      	movs	r3, r0
   21984:	7023      	strb	r3, [r4, #0]
   21986:	e004      	b.n	21992 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   21988:	46c0      	nop			; (mov r8, r8)
   2198a:	e002      	b.n	21992 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   2198c:	46c0      	nop			; (mov r8, r8)
   2198e:	e000      	b.n	21992 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   21990:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   21992:	1dfb      	adds	r3, r7, #7
   21994:	781b      	ldrb	r3, [r3, #0]
   21996:	b25b      	sxtb	r3, r3
}
   21998:	0018      	movs	r0, r3
   2199a:	46bd      	mov	sp, r7
   2199c:	b003      	add	sp, #12
   2199e:	bd90      	pop	{r4, r7, pc}
   219a0:	00001408 	.word	0x00001408
   219a4:	000220ad 	.word	0x000220ad
   219a8:	000220d1 	.word	0x000220d1

000219ac <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   219ac:	b580      	push	{r7, lr}
   219ae:	b082      	sub	sp, #8
   219b0:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   219b2:	4b32      	ldr	r3, [pc, #200]	; (21a7c <nmi_get_chipid+0xd0>)
   219b4:	681b      	ldr	r3, [r3, #0]
   219b6:	2b00      	cmp	r3, #0
   219b8:	d159      	bne.n	21a6e <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   219ba:	4a30      	ldr	r2, [pc, #192]	; (21a7c <nmi_get_chipid+0xd0>)
   219bc:	2380      	movs	r3, #128	; 0x80
   219be:	015b      	lsls	r3, r3, #5
   219c0:	0011      	movs	r1, r2
   219c2:	0018      	movs	r0, r3
   219c4:	4b2e      	ldr	r3, [pc, #184]	; (21a80 <nmi_get_chipid+0xd4>)
   219c6:	4798      	blx	r3
   219c8:	1e03      	subs	r3, r0, #0
   219ca:	d004      	beq.n	219d6 <nmi_get_chipid+0x2a>
			chipid = 0;
   219cc:	4b2b      	ldr	r3, [pc, #172]	; (21a7c <nmi_get_chipid+0xd0>)
   219ce:	2200      	movs	r2, #0
   219d0:	601a      	str	r2, [r3, #0]
			return 0;
   219d2:	2300      	movs	r3, #0
   219d4:	e04d      	b.n	21a72 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   219d6:	1d3b      	adds	r3, r7, #4
   219d8:	4a2a      	ldr	r2, [pc, #168]	; (21a84 <nmi_get_chipid+0xd8>)
   219da:	0019      	movs	r1, r3
   219dc:	0010      	movs	r0, r2
   219de:	4b28      	ldr	r3, [pc, #160]	; (21a80 <nmi_get_chipid+0xd4>)
   219e0:	4798      	blx	r3
   219e2:	1e03      	subs	r3, r0, #0
   219e4:	d004      	beq.n	219f0 <nmi_get_chipid+0x44>
			chipid = 0;
   219e6:	4b25      	ldr	r3, [pc, #148]	; (21a7c <nmi_get_chipid+0xd0>)
   219e8:	2200      	movs	r2, #0
   219ea:	601a      	str	r2, [r3, #0]
			return 0;
   219ec:	2300      	movs	r3, #0
   219ee:	e040      	b.n	21a72 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   219f0:	4b22      	ldr	r3, [pc, #136]	; (21a7c <nmi_get_chipid+0xd0>)
   219f2:	681b      	ldr	r3, [r3, #0]
   219f4:	4a24      	ldr	r2, [pc, #144]	; (21a88 <nmi_get_chipid+0xdc>)
   219f6:	4293      	cmp	r3, r2
   219f8:	d106      	bne.n	21a08 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   219fa:	687b      	ldr	r3, [r7, #4]
   219fc:	2b01      	cmp	r3, #1
   219fe:	d029      	beq.n	21a54 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   21a00:	4b1e      	ldr	r3, [pc, #120]	; (21a7c <nmi_get_chipid+0xd0>)
   21a02:	4a22      	ldr	r2, [pc, #136]	; (21a8c <nmi_get_chipid+0xe0>)
   21a04:	601a      	str	r2, [r3, #0]
   21a06:	e025      	b.n	21a54 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   21a08:	4b1c      	ldr	r3, [pc, #112]	; (21a7c <nmi_get_chipid+0xd0>)
   21a0a:	681b      	ldr	r3, [r3, #0]
   21a0c:	4a20      	ldr	r2, [pc, #128]	; (21a90 <nmi_get_chipid+0xe4>)
   21a0e:	4293      	cmp	r3, r2
   21a10:	d10d      	bne.n	21a2e <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   21a12:	687b      	ldr	r3, [r7, #4]
   21a14:	2b03      	cmp	r3, #3
   21a16:	d01d      	beq.n	21a54 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   21a18:	687b      	ldr	r3, [r7, #4]
   21a1a:	2b04      	cmp	r3, #4
   21a1c:	d103      	bne.n	21a26 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   21a1e:	4b17      	ldr	r3, [pc, #92]	; (21a7c <nmi_get_chipid+0xd0>)
   21a20:	4a1c      	ldr	r2, [pc, #112]	; (21a94 <nmi_get_chipid+0xe8>)
   21a22:	601a      	str	r2, [r3, #0]
   21a24:	e016      	b.n	21a54 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   21a26:	4b15      	ldr	r3, [pc, #84]	; (21a7c <nmi_get_chipid+0xd0>)
   21a28:	4a1b      	ldr	r2, [pc, #108]	; (21a98 <nmi_get_chipid+0xec>)
   21a2a:	601a      	str	r2, [r3, #0]
   21a2c:	e012      	b.n	21a54 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   21a2e:	4b13      	ldr	r3, [pc, #76]	; (21a7c <nmi_get_chipid+0xd0>)
   21a30:	681b      	ldr	r3, [r3, #0]
   21a32:	4a1a      	ldr	r2, [pc, #104]	; (21a9c <nmi_get_chipid+0xf0>)
   21a34:	4293      	cmp	r3, r2
   21a36:	d10d      	bne.n	21a54 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   21a38:	4a10      	ldr	r2, [pc, #64]	; (21a7c <nmi_get_chipid+0xd0>)
   21a3a:	23ec      	movs	r3, #236	; 0xec
   21a3c:	039b      	lsls	r3, r3, #14
   21a3e:	0011      	movs	r1, r2
   21a40:	0018      	movs	r0, r3
   21a42:	4b0f      	ldr	r3, [pc, #60]	; (21a80 <nmi_get_chipid+0xd4>)
   21a44:	4798      	blx	r3
   21a46:	1e03      	subs	r3, r0, #0
   21a48:	d004      	beq.n	21a54 <nmi_get_chipid+0xa8>
			chipid = 0;
   21a4a:	4b0c      	ldr	r3, [pc, #48]	; (21a7c <nmi_get_chipid+0xd0>)
   21a4c:	2200      	movs	r2, #0
   21a4e:	601a      	str	r2, [r3, #0]
			return 0;
   21a50:	2300      	movs	r3, #0
   21a52:	e00e      	b.n	21a72 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   21a54:	4b09      	ldr	r3, [pc, #36]	; (21a7c <nmi_get_chipid+0xd0>)
   21a56:	681b      	ldr	r3, [r3, #0]
   21a58:	4a11      	ldr	r2, [pc, #68]	; (21aa0 <nmi_get_chipid+0xf4>)
   21a5a:	401a      	ands	r2, r3
   21a5c:	4b07      	ldr	r3, [pc, #28]	; (21a7c <nmi_get_chipid+0xd0>)
   21a5e:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   21a60:	4b06      	ldr	r3, [pc, #24]	; (21a7c <nmi_get_chipid+0xd0>)
   21a62:	681b      	ldr	r3, [r3, #0]
   21a64:	22a0      	movs	r2, #160	; 0xa0
   21a66:	02d2      	lsls	r2, r2, #11
   21a68:	431a      	orrs	r2, r3
   21a6a:	4b04      	ldr	r3, [pc, #16]	; (21a7c <nmi_get_chipid+0xd0>)
   21a6c:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   21a6e:	4b03      	ldr	r3, [pc, #12]	; (21a7c <nmi_get_chipid+0xd0>)
   21a70:	681b      	ldr	r3, [r3, #0]
}
   21a72:	0018      	movs	r0, r3
   21a74:	46bd      	mov	sp, r7
   21a76:	b002      	add	sp, #8
   21a78:	bd80      	pop	{r7, pc}
   21a7a:	46c0      	nop			; (mov r8, r8)
   21a7c:	20004110 	.word	0x20004110
   21a80:	000220ad 	.word	0x000220ad
   21a84:	000013f4 	.word	0x000013f4
   21a88:	001002a0 	.word	0x001002a0
   21a8c:	001002a1 	.word	0x001002a1
   21a90:	001002b0 	.word	0x001002b0
   21a94:	001002b1 	.word	0x001002b1
   21a98:	001002b2 	.word	0x001002b2
   21a9c:	001000f0 	.word	0x001000f0
   21aa0:	fff0ffff 	.word	0xfff0ffff

00021aa4 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   21aa4:	b590      	push	{r4, r7, lr}
   21aa6:	b083      	sub	sp, #12
   21aa8:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   21aaa:	1dfb      	adds	r3, r7, #7
   21aac:	2200      	movs	r2, #0
   21aae:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   21ab0:	1dfc      	adds	r4, r7, #7
   21ab2:	003b      	movs	r3, r7
   21ab4:	0019      	movs	r1, r3
   21ab6:	2010      	movs	r0, #16
   21ab8:	4b2e      	ldr	r3, [pc, #184]	; (21b74 <chip_sleep+0xd0>)
   21aba:	4798      	blx	r3
   21abc:	0003      	movs	r3, r0
   21abe:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   21ac0:	1dfb      	adds	r3, r7, #7
   21ac2:	781b      	ldrb	r3, [r3, #0]
   21ac4:	b25b      	sxtb	r3, r3
   21ac6:	2b00      	cmp	r3, #0
   21ac8:	d145      	bne.n	21b56 <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   21aca:	683b      	ldr	r3, [r7, #0]
   21acc:	2201      	movs	r2, #1
   21ace:	4013      	ands	r3, r2
   21ad0:	d000      	beq.n	21ad4 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   21ad2:	e7ed      	b.n	21ab0 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   21ad4:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   21ad6:	1dfc      	adds	r4, r7, #7
   21ad8:	003b      	movs	r3, r7
   21ada:	0019      	movs	r1, r3
   21adc:	2001      	movs	r0, #1
   21ade:	4b25      	ldr	r3, [pc, #148]	; (21b74 <chip_sleep+0xd0>)
   21ae0:	4798      	blx	r3
   21ae2:	0003      	movs	r3, r0
   21ae4:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   21ae6:	1dfb      	adds	r3, r7, #7
   21ae8:	781b      	ldrb	r3, [r3, #0]
   21aea:	b25b      	sxtb	r3, r3
   21aec:	2b00      	cmp	r3, #0
   21aee:	d134      	bne.n	21b5a <chip_sleep+0xb6>
	if(reg & NBIT1)
   21af0:	683b      	ldr	r3, [r7, #0]
   21af2:	2202      	movs	r2, #2
   21af4:	4013      	ands	r3, r2
   21af6:	d010      	beq.n	21b1a <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   21af8:	683b      	ldr	r3, [r7, #0]
   21afa:	2202      	movs	r2, #2
   21afc:	4393      	bics	r3, r2
   21afe:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   21b00:	683b      	ldr	r3, [r7, #0]
   21b02:	1dfc      	adds	r4, r7, #7
   21b04:	0019      	movs	r1, r3
   21b06:	2001      	movs	r0, #1
   21b08:	4b1b      	ldr	r3, [pc, #108]	; (21b78 <chip_sleep+0xd4>)
   21b0a:	4798      	blx	r3
   21b0c:	0003      	movs	r3, r0
   21b0e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   21b10:	1dfb      	adds	r3, r7, #7
   21b12:	781b      	ldrb	r3, [r3, #0]
   21b14:	b25b      	sxtb	r3, r3
   21b16:	2b00      	cmp	r3, #0
   21b18:	d121      	bne.n	21b5e <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   21b1a:	1dfc      	adds	r4, r7, #7
   21b1c:	003b      	movs	r3, r7
   21b1e:	0019      	movs	r1, r3
   21b20:	200b      	movs	r0, #11
   21b22:	4b14      	ldr	r3, [pc, #80]	; (21b74 <chip_sleep+0xd0>)
   21b24:	4798      	blx	r3
   21b26:	0003      	movs	r3, r0
   21b28:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   21b2a:	1dfb      	adds	r3, r7, #7
   21b2c:	781b      	ldrb	r3, [r3, #0]
   21b2e:	b25b      	sxtb	r3, r3
   21b30:	2b00      	cmp	r3, #0
   21b32:	d116      	bne.n	21b62 <chip_sleep+0xbe>
	if(reg & NBIT0)
   21b34:	683b      	ldr	r3, [r7, #0]
   21b36:	2201      	movs	r2, #1
   21b38:	4013      	ands	r3, r2
   21b3a:	d013      	beq.n	21b64 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   21b3c:	683b      	ldr	r3, [r7, #0]
   21b3e:	2201      	movs	r2, #1
   21b40:	4393      	bics	r3, r2
   21b42:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   21b44:	683b      	ldr	r3, [r7, #0]
   21b46:	1dfc      	adds	r4, r7, #7
   21b48:	0019      	movs	r1, r3
   21b4a:	200b      	movs	r0, #11
   21b4c:	4b0a      	ldr	r3, [pc, #40]	; (21b78 <chip_sleep+0xd4>)
   21b4e:	4798      	blx	r3
   21b50:	0003      	movs	r3, r0
   21b52:	7023      	strb	r3, [r4, #0]
   21b54:	e006      	b.n	21b64 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   21b56:	46c0      	nop			; (mov r8, r8)
   21b58:	e004      	b.n	21b64 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   21b5a:	46c0      	nop			; (mov r8, r8)
   21b5c:	e002      	b.n	21b64 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   21b5e:	46c0      	nop			; (mov r8, r8)
   21b60:	e000      	b.n	21b64 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   21b62:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   21b64:	1dfb      	adds	r3, r7, #7
   21b66:	781b      	ldrb	r3, [r3, #0]
   21b68:	b25b      	sxtb	r3, r3
}
   21b6a:	0018      	movs	r0, r3
   21b6c:	46bd      	mov	sp, r7
   21b6e:	b003      	add	sp, #12
   21b70:	bd90      	pop	{r4, r7, pc}
   21b72:	46c0      	nop			; (mov r8, r8)
   21b74:	000220ad 	.word	0x000220ad
   21b78:	000220d1 	.word	0x000220d1

00021b7c <chip_wake>:
sint8 chip_wake(void)
{
   21b7c:	b590      	push	{r4, r7, lr}
   21b7e:	b085      	sub	sp, #20
   21b80:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21b82:	230f      	movs	r3, #15
   21b84:	18fb      	adds	r3, r7, r3
   21b86:	2200      	movs	r2, #0
   21b88:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   21b8a:	2300      	movs	r3, #0
   21b8c:	607b      	str	r3, [r7, #4]
   21b8e:	2300      	movs	r3, #0
   21b90:	603b      	str	r3, [r7, #0]
   21b92:	2300      	movs	r3, #0
   21b94:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   21b96:	230f      	movs	r3, #15
   21b98:	18fc      	adds	r4, r7, r3
   21b9a:	1d3b      	adds	r3, r7, #4
   21b9c:	0019      	movs	r1, r3
   21b9e:	200b      	movs	r0, #11
   21ba0:	4b4e      	ldr	r3, [pc, #312]	; (21cdc <chip_wake+0x160>)
   21ba2:	4798      	blx	r3
   21ba4:	0003      	movs	r3, r0
   21ba6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   21ba8:	230f      	movs	r3, #15
   21baa:	18fb      	adds	r3, r7, r3
   21bac:	781b      	ldrb	r3, [r3, #0]
   21bae:	b25b      	sxtb	r3, r3
   21bb0:	2b00      	cmp	r3, #0
   21bb2:	d000      	beq.n	21bb6 <chip_wake+0x3a>
   21bb4:	e082      	b.n	21cbc <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   21bb6:	687b      	ldr	r3, [r7, #4]
   21bb8:	2201      	movs	r2, #1
   21bba:	4013      	ands	r3, r2
   21bbc:	d111      	bne.n	21be2 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   21bbe:	687b      	ldr	r3, [r7, #4]
   21bc0:	2201      	movs	r2, #1
   21bc2:	4313      	orrs	r3, r2
   21bc4:	220f      	movs	r2, #15
   21bc6:	18bc      	adds	r4, r7, r2
   21bc8:	0019      	movs	r1, r3
   21bca:	200b      	movs	r0, #11
   21bcc:	4b44      	ldr	r3, [pc, #272]	; (21ce0 <chip_wake+0x164>)
   21bce:	4798      	blx	r3
   21bd0:	0003      	movs	r3, r0
   21bd2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   21bd4:	230f      	movs	r3, #15
   21bd6:	18fb      	adds	r3, r7, r3
   21bd8:	781b      	ldrb	r3, [r3, #0]
   21bda:	b25b      	sxtb	r3, r3
   21bdc:	2b00      	cmp	r3, #0
   21bde:	d000      	beq.n	21be2 <chip_wake+0x66>
   21be0:	e06e      	b.n	21cc0 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   21be2:	230f      	movs	r3, #15
   21be4:	18fc      	adds	r4, r7, r3
   21be6:	1d3b      	adds	r3, r7, #4
   21be8:	0019      	movs	r1, r3
   21bea:	2001      	movs	r0, #1
   21bec:	4b3b      	ldr	r3, [pc, #236]	; (21cdc <chip_wake+0x160>)
   21bee:	4798      	blx	r3
   21bf0:	0003      	movs	r3, r0
   21bf2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   21bf4:	230f      	movs	r3, #15
   21bf6:	18fb      	adds	r3, r7, r3
   21bf8:	781b      	ldrb	r3, [r3, #0]
   21bfa:	b25b      	sxtb	r3, r3
   21bfc:	2b00      	cmp	r3, #0
   21bfe:	d161      	bne.n	21cc4 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   21c00:	687b      	ldr	r3, [r7, #4]
   21c02:	2202      	movs	r2, #2
   21c04:	4013      	ands	r3, r2
   21c06:	d110      	bne.n	21c2a <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   21c08:	687b      	ldr	r3, [r7, #4]
   21c0a:	2202      	movs	r2, #2
   21c0c:	4313      	orrs	r3, r2
   21c0e:	220f      	movs	r2, #15
   21c10:	18bc      	adds	r4, r7, r2
   21c12:	0019      	movs	r1, r3
   21c14:	2001      	movs	r0, #1
   21c16:	4b32      	ldr	r3, [pc, #200]	; (21ce0 <chip_wake+0x164>)
   21c18:	4798      	blx	r3
   21c1a:	0003      	movs	r3, r0
   21c1c:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   21c1e:	230f      	movs	r3, #15
   21c20:	18fb      	adds	r3, r7, r3
   21c22:	781b      	ldrb	r3, [r3, #0]
   21c24:	b25b      	sxtb	r3, r3
   21c26:	2b00      	cmp	r3, #0
   21c28:	d14e      	bne.n	21cc8 <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   21c2a:	230f      	movs	r3, #15
   21c2c:	18fc      	adds	r4, r7, r3
   21c2e:	003b      	movs	r3, r7
   21c30:	0019      	movs	r1, r3
   21c32:	200f      	movs	r0, #15
   21c34:	4b29      	ldr	r3, [pc, #164]	; (21cdc <chip_wake+0x160>)
   21c36:	4798      	blx	r3
   21c38:	0003      	movs	r3, r0
   21c3a:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   21c3c:	230f      	movs	r3, #15
   21c3e:	18fb      	adds	r3, r7, r3
   21c40:	781b      	ldrb	r3, [r3, #0]
   21c42:	b25b      	sxtb	r3, r3
   21c44:	2b00      	cmp	r3, #0
   21c46:	d014      	beq.n	21c72 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   21c48:	23a8      	movs	r3, #168	; 0xa8
   21c4a:	005a      	lsls	r2, r3, #1
   21c4c:	4925      	ldr	r1, [pc, #148]	; (21ce4 <chip_wake+0x168>)
   21c4e:	4b26      	ldr	r3, [pc, #152]	; (21ce8 <chip_wake+0x16c>)
   21c50:	0018      	movs	r0, r3
   21c52:	4b26      	ldr	r3, [pc, #152]	; (21cec <chip_wake+0x170>)
   21c54:	4798      	blx	r3
   21c56:	230f      	movs	r3, #15
   21c58:	18fb      	adds	r3, r7, r3
   21c5a:	2100      	movs	r1, #0
   21c5c:	5659      	ldrsb	r1, [r3, r1]
   21c5e:	683a      	ldr	r2, [r7, #0]
   21c60:	4b23      	ldr	r3, [pc, #140]	; (21cf0 <chip_wake+0x174>)
   21c62:	0018      	movs	r0, r3
   21c64:	4b21      	ldr	r3, [pc, #132]	; (21cec <chip_wake+0x170>)
   21c66:	4798      	blx	r3
   21c68:	4b22      	ldr	r3, [pc, #136]	; (21cf4 <chip_wake+0x178>)
   21c6a:	0018      	movs	r0, r3
   21c6c:	4b1f      	ldr	r3, [pc, #124]	; (21cec <chip_wake+0x170>)
   21c6e:	4798      	blx	r3
			goto _WAKE_EXIT;
   21c70:	e02b      	b.n	21cca <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   21c72:	683b      	ldr	r3, [r7, #0]
   21c74:	2204      	movs	r2, #4
   21c76:	4013      	ands	r3, r2
   21c78:	d11c      	bne.n	21cb4 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   21c7a:	2002      	movs	r0, #2
   21c7c:	4b1e      	ldr	r3, [pc, #120]	; (21cf8 <chip_wake+0x17c>)
   21c7e:	4798      	blx	r3
		trials++;
   21c80:	68bb      	ldr	r3, [r7, #8]
   21c82:	3301      	adds	r3, #1
   21c84:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   21c86:	68bb      	ldr	r3, [r7, #8]
   21c88:	2b04      	cmp	r3, #4
   21c8a:	d9ce      	bls.n	21c2a <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   21c8c:	23ad      	movs	r3, #173	; 0xad
   21c8e:	005a      	lsls	r2, r3, #1
   21c90:	4914      	ldr	r1, [pc, #80]	; (21ce4 <chip_wake+0x168>)
   21c92:	4b15      	ldr	r3, [pc, #84]	; (21ce8 <chip_wake+0x16c>)
   21c94:	0018      	movs	r0, r3
   21c96:	4b15      	ldr	r3, [pc, #84]	; (21cec <chip_wake+0x170>)
   21c98:	4798      	blx	r3
   21c9a:	4b18      	ldr	r3, [pc, #96]	; (21cfc <chip_wake+0x180>)
   21c9c:	0018      	movs	r0, r3
   21c9e:	4b13      	ldr	r3, [pc, #76]	; (21cec <chip_wake+0x170>)
   21ca0:	4798      	blx	r3
   21ca2:	4b14      	ldr	r3, [pc, #80]	; (21cf4 <chip_wake+0x178>)
   21ca4:	0018      	movs	r0, r3
   21ca6:	4b11      	ldr	r3, [pc, #68]	; (21cec <chip_wake+0x170>)
   21ca8:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   21caa:	230f      	movs	r3, #15
   21cac:	18fb      	adds	r3, r7, r3
   21cae:	22fc      	movs	r2, #252	; 0xfc
   21cb0:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   21cb2:	e00a      	b.n	21cca <chip_wake+0x14e>
			break;
   21cb4:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   21cb6:	4b12      	ldr	r3, [pc, #72]	; (21d00 <chip_wake+0x184>)
   21cb8:	4798      	blx	r3
   21cba:	e006      	b.n	21cca <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   21cbc:	46c0      	nop			; (mov r8, r8)
   21cbe:	e004      	b.n	21cca <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   21cc0:	46c0      	nop			; (mov r8, r8)
   21cc2:	e002      	b.n	21cca <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   21cc4:	46c0      	nop			; (mov r8, r8)
   21cc6:	e000      	b.n	21cca <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   21cc8:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   21cca:	230f      	movs	r3, #15
   21ccc:	18fb      	adds	r3, r7, r3
   21cce:	781b      	ldrb	r3, [r3, #0]
   21cd0:	b25b      	sxtb	r3, r3
}
   21cd2:	0018      	movs	r0, r3
   21cd4:	46bd      	mov	sp, r7
   21cd6:	b005      	add	sp, #20
   21cd8:	bd90      	pop	{r4, r7, pc}
   21cda:	46c0      	nop			; (mov r8, r8)
   21cdc:	000220ad 	.word	0x000220ad
   21ce0:	000220d1 	.word	0x000220d1
   21ce4:	00038220 	.word	0x00038220
   21ce8:	00038194 	.word	0x00038194
   21cec:	0001d2e9 	.word	0x0001d2e9
   21cf0:	000381a8 	.word	0x000381a8
   21cf4:	000381c0 	.word	0x000381c0
   21cf8:	0001f73d 	.word	0x0001f73d
   21cfc:	000381c4 	.word	0x000381c4
   21d00:	0002206d 	.word	0x0002206d

00021d04 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   21d04:	b580      	push	{r7, lr}
   21d06:	b088      	sub	sp, #32
   21d08:	af00      	add	r7, sp, #0
   21d0a:	0002      	movs	r2, r0
   21d0c:	1dfb      	adds	r3, r7, #7
   21d0e:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   21d10:	2313      	movs	r3, #19
   21d12:	18fb      	adds	r3, r7, r3
   21d14:	2200      	movs	r2, #0
   21d16:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   21d18:	2300      	movs	r3, #0
   21d1a:	61fb      	str	r3, [r7, #28]
   21d1c:	2300      	movs	r3, #0
   21d1e:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   21d20:	2300      	movs	r3, #0
   21d22:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   21d24:	4b4a      	ldr	r3, [pc, #296]	; (21e50 <wait_for_bootrom+0x14c>)
   21d26:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   21d28:	2300      	movs	r3, #0
   21d2a:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   21d2c:	4b49      	ldr	r3, [pc, #292]	; (21e54 <wait_for_bootrom+0x150>)
   21d2e:	0018      	movs	r0, r3
   21d30:	4b49      	ldr	r3, [pc, #292]	; (21e58 <wait_for_bootrom+0x154>)
   21d32:	4798      	blx	r3
   21d34:	0003      	movs	r3, r0
   21d36:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   21d38:	69fb      	ldr	r3, [r7, #28]
   21d3a:	2b00      	cmp	r3, #0
   21d3c:	db03      	blt.n	21d46 <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   21d3e:	2001      	movs	r0, #1
   21d40:	4b46      	ldr	r3, [pc, #280]	; (21e5c <wait_for_bootrom+0x158>)
   21d42:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   21d44:	e7f2      	b.n	21d2c <wait_for_bootrom+0x28>
			break;
   21d46:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   21d48:	4b45      	ldr	r3, [pc, #276]	; (21e60 <wait_for_bootrom+0x15c>)
   21d4a:	0018      	movs	r0, r3
   21d4c:	4b42      	ldr	r3, [pc, #264]	; (21e58 <wait_for_bootrom+0x154>)
   21d4e:	4798      	blx	r3
   21d50:	0003      	movs	r3, r0
   21d52:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   21d54:	69fb      	ldr	r3, [r7, #28]
   21d56:	2201      	movs	r2, #1
   21d58:	4013      	ands	r3, r2
   21d5a:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   21d5c:	69fb      	ldr	r3, [r7, #28]
   21d5e:	2b00      	cmp	r3, #0
   21d60:	d112      	bne.n	21d88 <wait_for_bootrom+0x84>
	{
		reg = 0;
   21d62:	2300      	movs	r3, #0
   21d64:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   21d66:	e00b      	b.n	21d80 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   21d68:	2001      	movs	r0, #1
   21d6a:	4b3c      	ldr	r3, [pc, #240]	; (21e5c <wait_for_bootrom+0x158>)
   21d6c:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   21d6e:	4b3d      	ldr	r3, [pc, #244]	; (21e64 <wait_for_bootrom+0x160>)
   21d70:	0018      	movs	r0, r3
   21d72:	4b39      	ldr	r3, [pc, #228]	; (21e58 <wait_for_bootrom+0x154>)
   21d74:	4798      	blx	r3
   21d76:	0003      	movs	r3, r0
   21d78:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   21d7a:	69bb      	ldr	r3, [r7, #24]
   21d7c:	3301      	adds	r3, #1
   21d7e:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   21d80:	69fb      	ldr	r3, [r7, #28]
   21d82:	4a39      	ldr	r2, [pc, #228]	; (21e68 <wait_for_bootrom+0x164>)
   21d84:	4293      	cmp	r3, r2
   21d86:	d1ef      	bne.n	21d68 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   21d88:	1dfb      	adds	r3, r7, #7
   21d8a:	781b      	ldrb	r3, [r3, #0]
   21d8c:	2b02      	cmp	r3, #2
   21d8e:	d10d      	bne.n	21dac <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   21d90:	4a36      	ldr	r2, [pc, #216]	; (21e6c <wait_for_bootrom+0x168>)
   21d92:	4b37      	ldr	r3, [pc, #220]	; (21e70 <wait_for_bootrom+0x16c>)
   21d94:	0011      	movs	r1, r2
   21d96:	0018      	movs	r0, r3
   21d98:	4b36      	ldr	r3, [pc, #216]	; (21e74 <wait_for_bootrom+0x170>)
   21d9a:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   21d9c:	2380      	movs	r3, #128	; 0x80
   21d9e:	035b      	lsls	r3, r3, #13
   21da0:	4a35      	ldr	r2, [pc, #212]	; (21e78 <wait_for_bootrom+0x174>)
   21da2:	0019      	movs	r1, r3
   21da4:	0010      	movs	r0, r2
   21da6:	4b33      	ldr	r3, [pc, #204]	; (21e74 <wait_for_bootrom+0x170>)
   21da8:	4798      	blx	r3
   21daa:	e022      	b.n	21df2 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   21dac:	1dfb      	adds	r3, r7, #7
   21dae:	781b      	ldrb	r3, [r3, #0]
   21db0:	2b03      	cmp	r3, #3
   21db2:	d10b      	bne.n	21dcc <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   21db4:	4a2d      	ldr	r2, [pc, #180]	; (21e6c <wait_for_bootrom+0x168>)
   21db6:	4b2e      	ldr	r3, [pc, #184]	; (21e70 <wait_for_bootrom+0x16c>)
   21db8:	0011      	movs	r1, r2
   21dba:	0018      	movs	r0, r3
   21dbc:	4b2d      	ldr	r3, [pc, #180]	; (21e74 <wait_for_bootrom+0x170>)
   21dbe:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   21dc0:	4b2d      	ldr	r3, [pc, #180]	; (21e78 <wait_for_bootrom+0x174>)
   21dc2:	2100      	movs	r1, #0
   21dc4:	0018      	movs	r0, r3
   21dc6:	4b2b      	ldr	r3, [pc, #172]	; (21e74 <wait_for_bootrom+0x170>)
   21dc8:	4798      	blx	r3
   21dca:	e012      	b.n	21df2 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   21dcc:	1dfb      	adds	r3, r7, #7
   21dce:	781b      	ldrb	r3, [r3, #0]
   21dd0:	2b04      	cmp	r3, #4
   21dd2:	d108      	bne.n	21de6 <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   21dd4:	2380      	movs	r3, #128	; 0x80
   21dd6:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   21dd8:	68fb      	ldr	r3, [r7, #12]
   21dda:	4a27      	ldr	r2, [pc, #156]	; (21e78 <wait_for_bootrom+0x174>)
   21ddc:	0019      	movs	r1, r3
   21dde:	0010      	movs	r0, r2
   21de0:	4b24      	ldr	r3, [pc, #144]	; (21e74 <wait_for_bootrom+0x170>)
   21de2:	4798      	blx	r3
   21de4:	e005      	b.n	21df2 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   21de6:	68fb      	ldr	r3, [r7, #12]
   21de8:	4a23      	ldr	r2, [pc, #140]	; (21e78 <wait_for_bootrom+0x174>)
   21dea:	0019      	movs	r1, r3
   21dec:	0010      	movs	r0, r2
   21dee:	4b21      	ldr	r3, [pc, #132]	; (21e74 <wait_for_bootrom+0x170>)
   21df0:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   21df2:	4b22      	ldr	r3, [pc, #136]	; (21e7c <wait_for_bootrom+0x178>)
   21df4:	4798      	blx	r3
   21df6:	0003      	movs	r3, r0
   21df8:	051b      	lsls	r3, r3, #20
   21dfa:	0d1b      	lsrs	r3, r3, #20
   21dfc:	4a20      	ldr	r2, [pc, #128]	; (21e80 <wait_for_bootrom+0x17c>)
   21dfe:	4293      	cmp	r3, r2
   21e00:	d906      	bls.n	21e10 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   21e02:	697b      	ldr	r3, [r7, #20]
   21e04:	2202      	movs	r2, #2
   21e06:	4313      	orrs	r3, r2
   21e08:	0018      	movs	r0, r3
   21e0a:	4b1e      	ldr	r3, [pc, #120]	; (21e84 <wait_for_bootrom+0x180>)
   21e0c:	4798      	blx	r3
   21e0e:	e003      	b.n	21e18 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   21e10:	697b      	ldr	r3, [r7, #20]
   21e12:	0018      	movs	r0, r3
   21e14:	4b1b      	ldr	r3, [pc, #108]	; (21e84 <wait_for_bootrom+0x180>)
   21e16:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   21e18:	4b1b      	ldr	r3, [pc, #108]	; (21e88 <wait_for_bootrom+0x184>)
   21e1a:	0018      	movs	r0, r3
   21e1c:	4b1b      	ldr	r3, [pc, #108]	; (21e8c <wait_for_bootrom+0x188>)
   21e1e:	4798      	blx	r3
   21e20:	68fa      	ldr	r2, [r7, #12]
   21e22:	4b1b      	ldr	r3, [pc, #108]	; (21e90 <wait_for_bootrom+0x18c>)
   21e24:	0011      	movs	r1, r2
   21e26:	0018      	movs	r0, r3
   21e28:	4b18      	ldr	r3, [pc, #96]	; (21e8c <wait_for_bootrom+0x188>)
   21e2a:	4798      	blx	r3
   21e2c:	4b19      	ldr	r3, [pc, #100]	; (21e94 <wait_for_bootrom+0x190>)
   21e2e:	0018      	movs	r0, r3
   21e30:	4b16      	ldr	r3, [pc, #88]	; (21e8c <wait_for_bootrom+0x188>)
   21e32:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   21e34:	4a18      	ldr	r2, [pc, #96]	; (21e98 <wait_for_bootrom+0x194>)
   21e36:	4b0b      	ldr	r3, [pc, #44]	; (21e64 <wait_for_bootrom+0x160>)
   21e38:	0011      	movs	r1, r2
   21e3a:	0018      	movs	r0, r3
   21e3c:	4b0d      	ldr	r3, [pc, #52]	; (21e74 <wait_for_bootrom+0x170>)
   21e3e:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   21e40:	2313      	movs	r3, #19
   21e42:	18fb      	adds	r3, r7, r3
   21e44:	781b      	ldrb	r3, [r3, #0]
   21e46:	b25b      	sxtb	r3, r3
}
   21e48:	0018      	movs	r0, r3
   21e4a:	46bd      	mov	sp, r7
   21e4c:	b008      	add	sp, #32
   21e4e:	bd80      	pop	{r7, pc}
   21e50:	13301354 	.word	0x13301354
   21e54:	00001014 	.word	0x00001014
   21e58:	0002208d 	.word	0x0002208d
   21e5c:	0001f73d 	.word	0x0001f73d
   21e60:	000207bc 	.word	0x000207bc
   21e64:	000c000c 	.word	0x000c000c
   21e68:	10add09e 	.word	0x10add09e
   21e6c:	3c1cd57d 	.word	0x3c1cd57d
   21e70:	000207ac 	.word	0x000207ac
   21e74:	000220d1 	.word	0x000220d1
   21e78:	0000108c 	.word	0x0000108c
   21e7c:	000219ad 	.word	0x000219ad
   21e80:	0000039f 	.word	0x0000039f
   21e84:	0002187d 	.word	0x0002187d
   21e88:	000381e0 	.word	0x000381e0
   21e8c:	0001d2e9 	.word	0x0001d2e9
   21e90:	000381ec 	.word	0x000381ec
   21e94:	000381c0 	.word	0x000381c0
   21e98:	ef522f61 	.word	0xef522f61

00021e9c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   21e9c:	b580      	push	{r7, lr}
   21e9e:	b088      	sub	sp, #32
   21ea0:	af00      	add	r7, sp, #0
   21ea2:	0002      	movs	r2, r0
   21ea4:	1dfb      	adds	r3, r7, #7
   21ea6:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   21ea8:	231f      	movs	r3, #31
   21eaa:	18fb      	adds	r3, r7, r3
   21eac:	2200      	movs	r2, #0
   21eae:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   21eb0:	2300      	movs	r3, #0
   21eb2:	61bb      	str	r3, [r7, #24]
   21eb4:	2300      	movs	r3, #0
   21eb6:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   21eb8:	2301      	movs	r3, #1
   21eba:	425b      	negs	r3, r3
   21ebc:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   21ebe:	4b1d      	ldr	r3, [pc, #116]	; (21f34 <wait_for_firmware_start+0x98>)
   21ec0:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   21ec2:	4b1d      	ldr	r3, [pc, #116]	; (21f38 <wait_for_firmware_start+0x9c>)
   21ec4:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   21ec6:	1dfb      	adds	r3, r7, #7
   21ec8:	781b      	ldrb	r3, [r3, #0]
   21eca:	2b02      	cmp	r3, #2
   21ecc:	d003      	beq.n	21ed6 <wait_for_firmware_start+0x3a>
   21ece:	1dfb      	adds	r3, r7, #7
   21ed0:	781b      	ldrb	r3, [r3, #0]
   21ed2:	2b03      	cmp	r3, #3
   21ed4:	d119      	bne.n	21f0a <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   21ed6:	4b19      	ldr	r3, [pc, #100]	; (21f3c <wait_for_firmware_start+0xa0>)
   21ed8:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   21eda:	4b19      	ldr	r3, [pc, #100]	; (21f40 <wait_for_firmware_start+0xa4>)
   21edc:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   21ede:	e014      	b.n	21f0a <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   21ee0:	2002      	movs	r0, #2
   21ee2:	4b18      	ldr	r3, [pc, #96]	; (21f44 <wait_for_firmware_start+0xa8>)
   21ee4:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   21ee6:	68fb      	ldr	r3, [r7, #12]
   21ee8:	0018      	movs	r0, r3
   21eea:	4b17      	ldr	r3, [pc, #92]	; (21f48 <wait_for_firmware_start+0xac>)
   21eec:	4798      	blx	r3
   21eee:	0003      	movs	r3, r0
   21ef0:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   21ef2:	697b      	ldr	r3, [r7, #20]
   21ef4:	3301      	adds	r3, #1
   21ef6:	617b      	str	r3, [r7, #20]
   21ef8:	697a      	ldr	r2, [r7, #20]
   21efa:	693b      	ldr	r3, [r7, #16]
   21efc:	429a      	cmp	r2, r3
   21efe:	d304      	bcc.n	21f0a <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   21f00:	231f      	movs	r3, #31
   21f02:	18fb      	adds	r3, r7, r3
   21f04:	22fb      	movs	r2, #251	; 0xfb
   21f06:	701a      	strb	r2, [r3, #0]
			goto ERR;
   21f08:	e00c      	b.n	21f24 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   21f0a:	68ba      	ldr	r2, [r7, #8]
   21f0c:	69bb      	ldr	r3, [r7, #24]
   21f0e:	429a      	cmp	r2, r3
   21f10:	d1e6      	bne.n	21ee0 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   21f12:	68bb      	ldr	r3, [r7, #8]
   21f14:	4a08      	ldr	r2, [pc, #32]	; (21f38 <wait_for_firmware_start+0x9c>)
   21f16:	4293      	cmp	r3, r2
   21f18:	d104      	bne.n	21f24 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   21f1a:	4b06      	ldr	r3, [pc, #24]	; (21f34 <wait_for_firmware_start+0x98>)
   21f1c:	2100      	movs	r1, #0
   21f1e:	0018      	movs	r0, r3
   21f20:	4b0a      	ldr	r3, [pc, #40]	; (21f4c <wait_for_firmware_start+0xb0>)
   21f22:	4798      	blx	r3
	}
ERR:
	return ret;
   21f24:	231f      	movs	r3, #31
   21f26:	18fb      	adds	r3, r7, r3
   21f28:	781b      	ldrb	r3, [r3, #0]
   21f2a:	b25b      	sxtb	r3, r3
}
   21f2c:	0018      	movs	r0, r3
   21f2e:	46bd      	mov	sp, r7
   21f30:	b008      	add	sp, #32
   21f32:	bd80      	pop	{r7, pc}
   21f34:	0000108c 	.word	0x0000108c
   21f38:	02532636 	.word	0x02532636
   21f3c:	000207ac 	.word	0x000207ac
   21f40:	d75dc1c3 	.word	0xd75dc1c3
   21f44:	0001f73d 	.word	0x0001f73d
   21f48:	0002208d 	.word	0x0002208d
   21f4c:	000220d1 	.word	0x000220d1

00021f50 <chip_deinit>:

sint8 chip_deinit(void)
{
   21f50:	b590      	push	{r4, r7, lr}
   21f52:	b083      	sub	sp, #12
   21f54:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   21f56:	2300      	movs	r3, #0
   21f58:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   21f5a:	1dfc      	adds	r4, r7, #7
   21f5c:	003a      	movs	r2, r7
   21f5e:	23a0      	movs	r3, #160	; 0xa0
   21f60:	015b      	lsls	r3, r3, #5
   21f62:	0011      	movs	r1, r2
   21f64:	0018      	movs	r0, r3
   21f66:	4b20      	ldr	r3, [pc, #128]	; (21fe8 <chip_deinit+0x98>)
   21f68:	4798      	blx	r3
   21f6a:	0003      	movs	r3, r0
   21f6c:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   21f6e:	1dfb      	adds	r3, r7, #7
   21f70:	781b      	ldrb	r3, [r3, #0]
   21f72:	b25b      	sxtb	r3, r3
   21f74:	2b00      	cmp	r3, #0
   21f76:	d00e      	beq.n	21f96 <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   21f78:	4a1c      	ldr	r2, [pc, #112]	; (21fec <chip_deinit+0x9c>)
   21f7a:	491d      	ldr	r1, [pc, #116]	; (21ff0 <chip_deinit+0xa0>)
   21f7c:	4b1d      	ldr	r3, [pc, #116]	; (21ff4 <chip_deinit+0xa4>)
   21f7e:	0018      	movs	r0, r3
   21f80:	4b1d      	ldr	r3, [pc, #116]	; (21ff8 <chip_deinit+0xa8>)
   21f82:	4798      	blx	r3
   21f84:	4b1d      	ldr	r3, [pc, #116]	; (21ffc <chip_deinit+0xac>)
   21f86:	0018      	movs	r0, r3
   21f88:	4b1b      	ldr	r3, [pc, #108]	; (21ff8 <chip_deinit+0xa8>)
   21f8a:	4798      	blx	r3
   21f8c:	4b1c      	ldr	r3, [pc, #112]	; (22000 <chip_deinit+0xb0>)
   21f8e:	0018      	movs	r0, r3
   21f90:	4b19      	ldr	r3, [pc, #100]	; (21ff8 <chip_deinit+0xa8>)
   21f92:	4798      	blx	r3
		goto ERR1;
   21f94:	e021      	b.n	21fda <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   21f96:	683b      	ldr	r3, [r7, #0]
   21f98:	4a1a      	ldr	r2, [pc, #104]	; (22004 <chip_deinit+0xb4>)
   21f9a:	4013      	ands	r3, r2
   21f9c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   21f9e:	683a      	ldr	r2, [r7, #0]
   21fa0:	1dfc      	adds	r4, r7, #7
   21fa2:	23a0      	movs	r3, #160	; 0xa0
   21fa4:	015b      	lsls	r3, r3, #5
   21fa6:	0011      	movs	r1, r2
   21fa8:	0018      	movs	r0, r3
   21faa:	4b17      	ldr	r3, [pc, #92]	; (22008 <chip_deinit+0xb8>)
   21fac:	4798      	blx	r3
   21fae:	0003      	movs	r3, r0
   21fb0:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   21fb2:	1dfb      	adds	r3, r7, #7
   21fb4:	781b      	ldrb	r3, [r3, #0]
   21fb6:	b25b      	sxtb	r3, r3
   21fb8:	2b00      	cmp	r3, #0
   21fba:	d00e      	beq.n	21fda <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   21fbc:	4a13      	ldr	r2, [pc, #76]	; (2200c <chip_deinit+0xbc>)
   21fbe:	490c      	ldr	r1, [pc, #48]	; (21ff0 <chip_deinit+0xa0>)
   21fc0:	4b0c      	ldr	r3, [pc, #48]	; (21ff4 <chip_deinit+0xa4>)
   21fc2:	0018      	movs	r0, r3
   21fc4:	4b0c      	ldr	r3, [pc, #48]	; (21ff8 <chip_deinit+0xa8>)
   21fc6:	4798      	blx	r3
   21fc8:	4b0c      	ldr	r3, [pc, #48]	; (21ffc <chip_deinit+0xac>)
   21fca:	0018      	movs	r0, r3
   21fcc:	4b0a      	ldr	r3, [pc, #40]	; (21ff8 <chip_deinit+0xa8>)
   21fce:	4798      	blx	r3
   21fd0:	4b0b      	ldr	r3, [pc, #44]	; (22000 <chip_deinit+0xb0>)
   21fd2:	0018      	movs	r0, r3
   21fd4:	4b08      	ldr	r3, [pc, #32]	; (21ff8 <chip_deinit+0xa8>)
   21fd6:	4798      	blx	r3
		goto ERR1;
   21fd8:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   21fda:	1dfb      	adds	r3, r7, #7
   21fdc:	781b      	ldrb	r3, [r3, #0]
   21fde:	b25b      	sxtb	r3, r3
}
   21fe0:	0018      	movs	r0, r3
   21fe2:	46bd      	mov	sp, r7
   21fe4:	b003      	add	sp, #12
   21fe6:	bd90      	pop	{r4, r7, pc}
   21fe8:	000220ad 	.word	0x000220ad
   21fec:	00000201 	.word	0x00000201
   21ff0:	0003822c 	.word	0x0003822c
   21ff4:	00038194 	.word	0x00038194
   21ff8:	0001d2e9 	.word	0x0001d2e9
   21ffc:	00038204 	.word	0x00038204
   22000:	000381c0 	.word	0x000381c0
   22004:	fffffbff 	.word	0xfffffbff
   22008:	000220d1 	.word	0x000220d1
   2200c:	00000207 	.word	0x00000207

00022010 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   22010:	b590      	push	{r4, r7, lr}
   22012:	b085      	sub	sp, #20
   22014:	af00      	add	r7, sp, #0
   22016:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   22018:	230f      	movs	r3, #15
   2201a:	18fb      	adds	r3, r7, r3
   2201c:	2200      	movs	r2, #0
   2201e:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   22020:	230f      	movs	r3, #15
   22022:	18fc      	adds	r4, r7, r3
   22024:	687b      	ldr	r3, [r7, #4]
   22026:	0018      	movs	r0, r3
   22028:	4b05      	ldr	r3, [pc, #20]	; (22040 <nm_bus_iface_init+0x30>)
   2202a:	4798      	blx	r3
   2202c:	0003      	movs	r3, r0
   2202e:	7023      	strb	r3, [r4, #0]
	return ret;
   22030:	230f      	movs	r3, #15
   22032:	18fb      	adds	r3, r7, r3
   22034:	781b      	ldrb	r3, [r3, #0]
   22036:	b25b      	sxtb	r3, r3
}
   22038:	0018      	movs	r0, r3
   2203a:	46bd      	mov	sp, r7
   2203c:	b005      	add	sp, #20
   2203e:	bd90      	pop	{r4, r7, pc}
   22040:	0001fdf9 	.word	0x0001fdf9

00022044 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   22044:	b590      	push	{r4, r7, lr}
   22046:	b083      	sub	sp, #12
   22048:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2204a:	1dfb      	adds	r3, r7, #7
   2204c:	2200      	movs	r2, #0
   2204e:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   22050:	1dfc      	adds	r4, r7, #7
   22052:	4b05      	ldr	r3, [pc, #20]	; (22068 <nm_bus_iface_deinit+0x24>)
   22054:	4798      	blx	r3
   22056:	0003      	movs	r3, r0
   22058:	7023      	strb	r3, [r4, #0]

	return ret;
   2205a:	1dfb      	adds	r3, r7, #7
   2205c:	781b      	ldrb	r3, [r3, #0]
   2205e:	b25b      	sxtb	r3, r3
}
   22060:	0018      	movs	r0, r3
   22062:	46bd      	mov	sp, r7
   22064:	b003      	add	sp, #12
   22066:	bd90      	pop	{r4, r7, pc}
   22068:	0001ff71 	.word	0x0001ff71

0002206c <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   2206c:	b580      	push	{r7, lr}
   2206e:	b082      	sub	sp, #8
   22070:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22072:	1dfb      	adds	r3, r7, #7
   22074:	2200      	movs	r2, #0
   22076:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   22078:	4b03      	ldr	r3, [pc, #12]	; (22088 <nm_bus_reset+0x1c>)
   2207a:	4798      	blx	r3
   2207c:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   2207e:	0018      	movs	r0, r3
   22080:	46bd      	mov	sp, r7
   22082:	b002      	add	sp, #8
   22084:	bd80      	pop	{r7, pc}
   22086:	46c0      	nop			; (mov r8, r8)
   22088:	00023e99 	.word	0x00023e99

0002208c <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   2208c:	b580      	push	{r7, lr}
   2208e:	b082      	sub	sp, #8
   22090:	af00      	add	r7, sp, #0
   22092:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   22094:	687b      	ldr	r3, [r7, #4]
   22096:	0018      	movs	r0, r3
   22098:	4b03      	ldr	r3, [pc, #12]	; (220a8 <nm_read_reg+0x1c>)
   2209a:	4798      	blx	r3
   2209c:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   2209e:	0018      	movs	r0, r3
   220a0:	46bd      	mov	sp, r7
   220a2:	b002      	add	sp, #8
   220a4:	bd80      	pop	{r7, pc}
   220a6:	46c0      	nop			; (mov r8, r8)
   220a8:	0002402d 	.word	0x0002402d

000220ac <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   220ac:	b580      	push	{r7, lr}
   220ae:	b082      	sub	sp, #8
   220b0:	af00      	add	r7, sp, #0
   220b2:	6078      	str	r0, [r7, #4]
   220b4:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   220b6:	683a      	ldr	r2, [r7, #0]
   220b8:	687b      	ldr	r3, [r7, #4]
   220ba:	0011      	movs	r1, r2
   220bc:	0018      	movs	r0, r3
   220be:	4b03      	ldr	r3, [pc, #12]	; (220cc <nm_read_reg_with_ret+0x20>)
   220c0:	4798      	blx	r3
   220c2:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   220c4:	0018      	movs	r0, r3
   220c6:	46bd      	mov	sp, r7
   220c8:	b002      	add	sp, #8
   220ca:	bd80      	pop	{r7, pc}
   220cc:	00024051 	.word	0x00024051

000220d0 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   220d0:	b580      	push	{r7, lr}
   220d2:	b082      	sub	sp, #8
   220d4:	af00      	add	r7, sp, #0
   220d6:	6078      	str	r0, [r7, #4]
   220d8:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   220da:	683a      	ldr	r2, [r7, #0]
   220dc:	687b      	ldr	r3, [r7, #4]
   220de:	0011      	movs	r1, r2
   220e0:	0018      	movs	r0, r3
   220e2:	4b03      	ldr	r3, [pc, #12]	; (220f0 <nm_write_reg+0x20>)
   220e4:	4798      	blx	r3
   220e6:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   220e8:	0018      	movs	r0, r3
   220ea:	46bd      	mov	sp, r7
   220ec:	b002      	add	sp, #8
   220ee:	bd80      	pop	{r7, pc}
   220f0:	000240a1 	.word	0x000240a1

000220f4 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   220f4:	b580      	push	{r7, lr}
   220f6:	b084      	sub	sp, #16
   220f8:	af00      	add	r7, sp, #0
   220fa:	60f8      	str	r0, [r7, #12]
   220fc:	60b9      	str	r1, [r7, #8]
   220fe:	1dbb      	adds	r3, r7, #6
   22100:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   22102:	1dbb      	adds	r3, r7, #6
   22104:	881a      	ldrh	r2, [r3, #0]
   22106:	68b9      	ldr	r1, [r7, #8]
   22108:	68fb      	ldr	r3, [r7, #12]
   2210a:	0018      	movs	r0, r3
   2210c:	4b03      	ldr	r3, [pc, #12]	; (2211c <p_nm_read_block+0x28>)
   2210e:	4798      	blx	r3
   22110:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   22112:	0018      	movs	r0, r3
   22114:	46bd      	mov	sp, r7
   22116:	b004      	add	sp, #16
   22118:	bd80      	pop	{r7, pc}
   2211a:	46c0      	nop			; (mov r8, r8)
   2211c:	000240f1 	.word	0x000240f1

00022120 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   22120:	b580      	push	{r7, lr}
   22122:	b086      	sub	sp, #24
   22124:	af00      	add	r7, sp, #0
   22126:	60f8      	str	r0, [r7, #12]
   22128:	60b9      	str	r1, [r7, #8]
   2212a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   2212c:	4b2d      	ldr	r3, [pc, #180]	; (221e4 <nm_read_block+0xc4>)
   2212e:	881a      	ldrh	r2, [r3, #0]
   22130:	2310      	movs	r3, #16
   22132:	18fb      	adds	r3, r7, r3
   22134:	3a08      	subs	r2, #8
   22136:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   22138:	2300      	movs	r3, #0
   2213a:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   2213c:	2313      	movs	r3, #19
   2213e:	18fb      	adds	r3, r7, r3
   22140:	2200      	movs	r2, #0
   22142:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   22144:	2310      	movs	r3, #16
   22146:	18fb      	adds	r3, r7, r3
   22148:	881a      	ldrh	r2, [r3, #0]
   2214a:	687b      	ldr	r3, [r7, #4]
   2214c:	429a      	cmp	r2, r3
   2214e:	d313      	bcc.n	22178 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   22150:	68ba      	ldr	r2, [r7, #8]
   22152:	697b      	ldr	r3, [r7, #20]
   22154:	18d1      	adds	r1, r2, r3
   22156:	687b      	ldr	r3, [r7, #4]
   22158:	b29a      	uxth	r2, r3
   2215a:	68fb      	ldr	r3, [r7, #12]
   2215c:	0018      	movs	r0, r3
   2215e:	4b22      	ldr	r3, [pc, #136]	; (221e8 <nm_read_block+0xc8>)
   22160:	4798      	blx	r3
   22162:	0003      	movs	r3, r0
   22164:	b2da      	uxtb	r2, r3
   22166:	2313      	movs	r3, #19
   22168:	18fb      	adds	r3, r7, r3
   2216a:	781b      	ldrb	r3, [r3, #0]
   2216c:	18d3      	adds	r3, r2, r3
   2216e:	b2da      	uxtb	r2, r3
   22170:	2313      	movs	r3, #19
   22172:	18fb      	adds	r3, r7, r3
   22174:	701a      	strb	r2, [r3, #0]
			break;
   22176:	e02d      	b.n	221d4 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   22178:	68ba      	ldr	r2, [r7, #8]
   2217a:	697b      	ldr	r3, [r7, #20]
   2217c:	18d1      	adds	r1, r2, r3
   2217e:	2310      	movs	r3, #16
   22180:	18fb      	adds	r3, r7, r3
   22182:	881a      	ldrh	r2, [r3, #0]
   22184:	68fb      	ldr	r3, [r7, #12]
   22186:	0018      	movs	r0, r3
   22188:	4b17      	ldr	r3, [pc, #92]	; (221e8 <nm_read_block+0xc8>)
   2218a:	4798      	blx	r3
   2218c:	0003      	movs	r3, r0
   2218e:	b2da      	uxtb	r2, r3
   22190:	2313      	movs	r3, #19
   22192:	18fb      	adds	r3, r7, r3
   22194:	781b      	ldrb	r3, [r3, #0]
   22196:	18d3      	adds	r3, r2, r3
   22198:	b2da      	uxtb	r2, r3
   2219a:	2313      	movs	r3, #19
   2219c:	18fb      	adds	r3, r7, r3
   2219e:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   221a0:	2313      	movs	r3, #19
   221a2:	18fb      	adds	r3, r7, r3
   221a4:	781b      	ldrb	r3, [r3, #0]
   221a6:	b25b      	sxtb	r3, r3
   221a8:	2b00      	cmp	r3, #0
   221aa:	d112      	bne.n	221d2 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   221ac:	2310      	movs	r3, #16
   221ae:	18fb      	adds	r3, r7, r3
   221b0:	881b      	ldrh	r3, [r3, #0]
   221b2:	687a      	ldr	r2, [r7, #4]
   221b4:	1ad3      	subs	r3, r2, r3
   221b6:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   221b8:	2310      	movs	r3, #16
   221ba:	18fb      	adds	r3, r7, r3
   221bc:	881b      	ldrh	r3, [r3, #0]
   221be:	697a      	ldr	r2, [r7, #20]
   221c0:	18d3      	adds	r3, r2, r3
   221c2:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   221c4:	2310      	movs	r3, #16
   221c6:	18fb      	adds	r3, r7, r3
   221c8:	881b      	ldrh	r3, [r3, #0]
   221ca:	68fa      	ldr	r2, [r7, #12]
   221cc:	18d3      	adds	r3, r2, r3
   221ce:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   221d0:	e7b8      	b.n	22144 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   221d2:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   221d4:	2313      	movs	r3, #19
   221d6:	18fb      	adds	r3, r7, r3
   221d8:	781b      	ldrb	r3, [r3, #0]
   221da:	b25b      	sxtb	r3, r3
}
   221dc:	0018      	movs	r0, r3
   221de:	46bd      	mov	sp, r7
   221e0:	b006      	add	sp, #24
   221e2:	bd80      	pop	{r7, pc}
   221e4:	2000010c 	.word	0x2000010c
   221e8:	000220f5 	.word	0x000220f5

000221ec <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   221ec:	b580      	push	{r7, lr}
   221ee:	b084      	sub	sp, #16
   221f0:	af00      	add	r7, sp, #0
   221f2:	60f8      	str	r0, [r7, #12]
   221f4:	60b9      	str	r1, [r7, #8]
   221f6:	1dbb      	adds	r3, r7, #6
   221f8:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   221fa:	1dbb      	adds	r3, r7, #6
   221fc:	881a      	ldrh	r2, [r3, #0]
   221fe:	68b9      	ldr	r1, [r7, #8]
   22200:	68fb      	ldr	r3, [r7, #12]
   22202:	0018      	movs	r0, r3
   22204:	4b03      	ldr	r3, [pc, #12]	; (22214 <p_nm_write_block+0x28>)
   22206:	4798      	blx	r3
   22208:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   2220a:	0018      	movs	r0, r3
   2220c:	46bd      	mov	sp, r7
   2220e:	b004      	add	sp, #16
   22210:	bd80      	pop	{r7, pc}
   22212:	46c0      	nop			; (mov r8, r8)
   22214:	00024149 	.word	0x00024149

00022218 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   22218:	b580      	push	{r7, lr}
   2221a:	b086      	sub	sp, #24
   2221c:	af00      	add	r7, sp, #0
   2221e:	60f8      	str	r0, [r7, #12]
   22220:	60b9      	str	r1, [r7, #8]
   22222:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   22224:	4b2d      	ldr	r3, [pc, #180]	; (222dc <nm_write_block+0xc4>)
   22226:	881a      	ldrh	r2, [r3, #0]
   22228:	2310      	movs	r3, #16
   2222a:	18fb      	adds	r3, r7, r3
   2222c:	3a08      	subs	r2, #8
   2222e:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   22230:	2300      	movs	r3, #0
   22232:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   22234:	2313      	movs	r3, #19
   22236:	18fb      	adds	r3, r7, r3
   22238:	2200      	movs	r2, #0
   2223a:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   2223c:	2310      	movs	r3, #16
   2223e:	18fb      	adds	r3, r7, r3
   22240:	881a      	ldrh	r2, [r3, #0]
   22242:	687b      	ldr	r3, [r7, #4]
   22244:	429a      	cmp	r2, r3
   22246:	d313      	bcc.n	22270 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   22248:	68ba      	ldr	r2, [r7, #8]
   2224a:	697b      	ldr	r3, [r7, #20]
   2224c:	18d1      	adds	r1, r2, r3
   2224e:	687b      	ldr	r3, [r7, #4]
   22250:	b29a      	uxth	r2, r3
   22252:	68fb      	ldr	r3, [r7, #12]
   22254:	0018      	movs	r0, r3
   22256:	4b22      	ldr	r3, [pc, #136]	; (222e0 <nm_write_block+0xc8>)
   22258:	4798      	blx	r3
   2225a:	0003      	movs	r3, r0
   2225c:	b2da      	uxtb	r2, r3
   2225e:	2313      	movs	r3, #19
   22260:	18fb      	adds	r3, r7, r3
   22262:	781b      	ldrb	r3, [r3, #0]
   22264:	18d3      	adds	r3, r2, r3
   22266:	b2da      	uxtb	r2, r3
   22268:	2313      	movs	r3, #19
   2226a:	18fb      	adds	r3, r7, r3
   2226c:	701a      	strb	r2, [r3, #0]
			break;
   2226e:	e02d      	b.n	222cc <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   22270:	68ba      	ldr	r2, [r7, #8]
   22272:	697b      	ldr	r3, [r7, #20]
   22274:	18d1      	adds	r1, r2, r3
   22276:	2310      	movs	r3, #16
   22278:	18fb      	adds	r3, r7, r3
   2227a:	881a      	ldrh	r2, [r3, #0]
   2227c:	68fb      	ldr	r3, [r7, #12]
   2227e:	0018      	movs	r0, r3
   22280:	4b17      	ldr	r3, [pc, #92]	; (222e0 <nm_write_block+0xc8>)
   22282:	4798      	blx	r3
   22284:	0003      	movs	r3, r0
   22286:	b2da      	uxtb	r2, r3
   22288:	2313      	movs	r3, #19
   2228a:	18fb      	adds	r3, r7, r3
   2228c:	781b      	ldrb	r3, [r3, #0]
   2228e:	18d3      	adds	r3, r2, r3
   22290:	b2da      	uxtb	r2, r3
   22292:	2313      	movs	r3, #19
   22294:	18fb      	adds	r3, r7, r3
   22296:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   22298:	2313      	movs	r3, #19
   2229a:	18fb      	adds	r3, r7, r3
   2229c:	781b      	ldrb	r3, [r3, #0]
   2229e:	b25b      	sxtb	r3, r3
   222a0:	2b00      	cmp	r3, #0
   222a2:	d112      	bne.n	222ca <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   222a4:	2310      	movs	r3, #16
   222a6:	18fb      	adds	r3, r7, r3
   222a8:	881b      	ldrh	r3, [r3, #0]
   222aa:	687a      	ldr	r2, [r7, #4]
   222ac:	1ad3      	subs	r3, r2, r3
   222ae:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   222b0:	2310      	movs	r3, #16
   222b2:	18fb      	adds	r3, r7, r3
   222b4:	881b      	ldrh	r3, [r3, #0]
   222b6:	697a      	ldr	r2, [r7, #20]
   222b8:	18d3      	adds	r3, r2, r3
   222ba:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   222bc:	2310      	movs	r3, #16
   222be:	18fb      	adds	r3, r7, r3
   222c0:	881b      	ldrh	r3, [r3, #0]
   222c2:	68fa      	ldr	r2, [r7, #12]
   222c4:	18d3      	adds	r3, r2, r3
   222c6:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   222c8:	e7b8      	b.n	2223c <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   222ca:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   222cc:	2313      	movs	r3, #19
   222ce:	18fb      	adds	r3, r7, r3
   222d0:	781b      	ldrb	r3, [r3, #0]
   222d2:	b25b      	sxtb	r3, r3
}
   222d4:	0018      	movs	r0, r3
   222d6:	46bd      	mov	sp, r7
   222d8:	b006      	add	sp, #24
   222da:	bd80      	pop	{r7, pc}
   222dc:	2000010c 	.word	0x2000010c
   222e0:	000221ed 	.word	0x000221ed

000222e4 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   222e4:	b590      	push	{r4, r7, lr}
   222e6:	b089      	sub	sp, #36	; 0x24
   222e8:	af00      	add	r7, sp, #0
   222ea:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   222ec:	2300      	movs	r3, #0
   222ee:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   222f0:	231f      	movs	r3, #31
   222f2:	18fb      	adds	r3, r7, r3
   222f4:	2200      	movs	r2, #0
   222f6:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   222f8:	230c      	movs	r3, #12
   222fa:	18fb      	adds	r3, r7, r3
   222fc:	0018      	movs	r0, r3
   222fe:	2308      	movs	r3, #8
   22300:	001a      	movs	r2, r3
   22302:	2100      	movs	r1, #0
   22304:	4b64      	ldr	r3, [pc, #400]	; (22498 <nm_get_firmware_full_info+0x1b4>)
   22306:	4798      	blx	r3
	if (pstrRev != NULL)
   22308:	687b      	ldr	r3, [r7, #4]
   2230a:	2b00      	cmp	r3, #0
   2230c:	d100      	bne.n	22310 <nm_get_firmware_full_info+0x2c>
   2230e:	e0ba      	b.n	22486 <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   22310:	687b      	ldr	r3, [r7, #4]
   22312:	2228      	movs	r2, #40	; 0x28
   22314:	2100      	movs	r1, #0
   22316:	0018      	movs	r0, r3
   22318:	4b60      	ldr	r3, [pc, #384]	; (2249c <nm_get_firmware_full_info+0x1b8>)
   2231a:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   2231c:	231f      	movs	r3, #31
   2231e:	18fc      	adds	r4, r7, r3
   22320:	2314      	movs	r3, #20
   22322:	18fb      	adds	r3, r7, r3
   22324:	4a5e      	ldr	r2, [pc, #376]	; (224a0 <nm_get_firmware_full_info+0x1bc>)
   22326:	0019      	movs	r1, r3
   22328:	0010      	movs	r0, r2
   2232a:	4b5e      	ldr	r3, [pc, #376]	; (224a4 <nm_get_firmware_full_info+0x1c0>)
   2232c:	4798      	blx	r3
   2232e:	0003      	movs	r3, r0
   22330:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   22332:	231f      	movs	r3, #31
   22334:	18fb      	adds	r3, r7, r3
   22336:	781b      	ldrb	r3, [r3, #0]
   22338:	b25b      	sxtb	r3, r3
   2233a:	2b00      	cmp	r3, #0
   2233c:	d000      	beq.n	22340 <nm_get_firmware_full_info+0x5c>
   2233e:	e0a2      	b.n	22486 <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   22340:	697b      	ldr	r3, [r7, #20]
   22342:	2b00      	cmp	r3, #0
   22344:	d100      	bne.n	22348 <nm_get_firmware_full_info+0x64>
   22346:	e09a      	b.n	2247e <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   22348:	697b      	ldr	r3, [r7, #20]
   2234a:	22c0      	movs	r2, #192	; 0xc0
   2234c:	0292      	lsls	r2, r2, #10
   2234e:	4313      	orrs	r3, r2
   22350:	221f      	movs	r2, #31
   22352:	18bc      	adds	r4, r7, r2
   22354:	220c      	movs	r2, #12
   22356:	18b9      	adds	r1, r7, r2
   22358:	2208      	movs	r2, #8
   2235a:	0018      	movs	r0, r3
   2235c:	4b52      	ldr	r3, [pc, #328]	; (224a8 <nm_get_firmware_full_info+0x1c4>)
   2235e:	4798      	blx	r3
   22360:	0003      	movs	r3, r0
   22362:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   22364:	231f      	movs	r3, #31
   22366:	18fb      	adds	r3, r7, r3
   22368:	781b      	ldrb	r3, [r3, #0]
   2236a:	b25b      	sxtb	r3, r3
   2236c:	2b00      	cmp	r3, #0
   2236e:	d000      	beq.n	22372 <nm_get_firmware_full_info+0x8e>
   22370:	e089      	b.n	22486 <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   22372:	230c      	movs	r3, #12
   22374:	18fb      	adds	r3, r7, r3
   22376:	685b      	ldr	r3, [r3, #4]
   22378:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   2237a:	697b      	ldr	r3, [r7, #20]
   2237c:	041b      	lsls	r3, r3, #16
   2237e:	0c1b      	lsrs	r3, r3, #16
   22380:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   22382:	697b      	ldr	r3, [r7, #20]
   22384:	2b00      	cmp	r3, #0
   22386:	d100      	bne.n	2238a <nm_get_firmware_full_info+0xa6>
   22388:	e074      	b.n	22474 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   2238a:	697b      	ldr	r3, [r7, #20]
   2238c:	22c0      	movs	r2, #192	; 0xc0
   2238e:	0292      	lsls	r2, r2, #10
   22390:	4313      	orrs	r3, r2
   22392:	221f      	movs	r2, #31
   22394:	18bc      	adds	r4, r7, r2
   22396:	6879      	ldr	r1, [r7, #4]
   22398:	2228      	movs	r2, #40	; 0x28
   2239a:	0018      	movs	r0, r3
   2239c:	4b42      	ldr	r3, [pc, #264]	; (224a8 <nm_get_firmware_full_info+0x1c4>)
   2239e:	4798      	blx	r3
   223a0:	0003      	movs	r3, r0
   223a2:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   223a4:	231f      	movs	r3, #31
   223a6:	18fb      	adds	r3, r7, r3
   223a8:	781b      	ldrb	r3, [r3, #0]
   223aa:	b25b      	sxtb	r3, r3
   223ac:	2b00      	cmp	r3, #0
   223ae:	d16a      	bne.n	22486 <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   223b0:	687b      	ldr	r3, [r7, #4]
   223b2:	791b      	ldrb	r3, [r3, #4]
   223b4:	021b      	lsls	r3, r3, #8
   223b6:	b21a      	sxth	r2, r3
   223b8:	687b      	ldr	r3, [r7, #4]
   223ba:	795b      	ldrb	r3, [r3, #5]
   223bc:	011b      	lsls	r3, r3, #4
   223be:	b21b      	sxth	r3, r3
   223c0:	21ff      	movs	r1, #255	; 0xff
   223c2:	400b      	ands	r3, r1
   223c4:	b21b      	sxth	r3, r3
   223c6:	4313      	orrs	r3, r2
   223c8:	b21a      	sxth	r2, r3
   223ca:	687b      	ldr	r3, [r7, #4]
   223cc:	799b      	ldrb	r3, [r3, #6]
   223ce:	b21b      	sxth	r3, r3
   223d0:	210f      	movs	r1, #15
   223d2:	400b      	ands	r3, r1
   223d4:	b21b      	sxth	r3, r3
   223d6:	4313      	orrs	r3, r2
   223d8:	b21a      	sxth	r2, r3
   223da:	231c      	movs	r3, #28
   223dc:	18fb      	adds	r3, r7, r3
   223de:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   223e0:	231a      	movs	r3, #26
   223e2:	18fb      	adds	r3, r7, r3
   223e4:	4a31      	ldr	r2, [pc, #196]	; (224ac <nm_get_firmware_full_info+0x1c8>)
   223e6:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   223e8:	687b      	ldr	r3, [r7, #4]
   223ea:	79db      	ldrb	r3, [r3, #7]
   223ec:	021b      	lsls	r3, r3, #8
   223ee:	b21a      	sxth	r2, r3
   223f0:	687b      	ldr	r3, [r7, #4]
   223f2:	7a1b      	ldrb	r3, [r3, #8]
   223f4:	011b      	lsls	r3, r3, #4
   223f6:	b21b      	sxth	r3, r3
   223f8:	21ff      	movs	r1, #255	; 0xff
   223fa:	400b      	ands	r3, r1
   223fc:	b21b      	sxth	r3, r3
   223fe:	4313      	orrs	r3, r2
   22400:	b21a      	sxth	r2, r3
   22402:	687b      	ldr	r3, [r7, #4]
   22404:	7a5b      	ldrb	r3, [r3, #9]
   22406:	b21b      	sxth	r3, r3
   22408:	210f      	movs	r1, #15
   2240a:	400b      	ands	r3, r1
   2240c:	b21b      	sxth	r3, r3
   2240e:	4313      	orrs	r3, r2
   22410:	b21a      	sxth	r2, r3
   22412:	2318      	movs	r3, #24
   22414:	18fb      	adds	r3, r7, r3
   22416:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   22418:	231c      	movs	r3, #28
   2241a:	18fb      	adds	r3, r7, r3
   2241c:	881b      	ldrh	r3, [r3, #0]
   2241e:	2b00      	cmp	r3, #0
   22420:	d009      	beq.n	22436 <nm_get_firmware_full_info+0x152>
   22422:	2318      	movs	r3, #24
   22424:	18fb      	adds	r3, r7, r3
   22426:	881b      	ldrh	r3, [r3, #0]
   22428:	2b00      	cmp	r3, #0
   2242a:	d004      	beq.n	22436 <nm_get_firmware_full_info+0x152>
   2242c:	2318      	movs	r3, #24
   2242e:	18fb      	adds	r3, r7, r3
   22430:	881b      	ldrh	r3, [r3, #0]
   22432:	2b00      	cmp	r3, #0
   22434:	d104      	bne.n	22440 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   22436:	231f      	movs	r3, #31
   22438:	18fb      	adds	r3, r7, r3
   2243a:	22f4      	movs	r2, #244	; 0xf4
   2243c:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   2243e:	e022      	b.n	22486 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   22440:	231a      	movs	r3, #26
   22442:	18fa      	adds	r2, r7, r3
   22444:	2318      	movs	r3, #24
   22446:	18fb      	adds	r3, r7, r3
   22448:	8812      	ldrh	r2, [r2, #0]
   2244a:	881b      	ldrh	r3, [r3, #0]
   2244c:	429a      	cmp	r2, r3
   2244e:	d204      	bcs.n	2245a <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   22450:	231f      	movs	r3, #31
   22452:	18fb      	adds	r3, r7, r3
   22454:	22f3      	movs	r2, #243	; 0xf3
   22456:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22458:	e015      	b.n	22486 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   2245a:	231a      	movs	r3, #26
   2245c:	18fa      	adds	r2, r7, r3
   2245e:	231c      	movs	r3, #28
   22460:	18fb      	adds	r3, r7, r3
   22462:	8812      	ldrh	r2, [r2, #0]
   22464:	881b      	ldrh	r3, [r3, #0]
   22466:	429a      	cmp	r2, r3
   22468:	d90d      	bls.n	22486 <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   2246a:	231f      	movs	r3, #31
   2246c:	18fb      	adds	r3, r7, r3
   2246e:	22f3      	movs	r2, #243	; 0xf3
   22470:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22472:	e008      	b.n	22486 <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   22474:	231f      	movs	r3, #31
   22476:	18fb      	adds	r3, r7, r3
   22478:	22f4      	movs	r2, #244	; 0xf4
   2247a:	701a      	strb	r2, [r3, #0]
   2247c:	e003      	b.n	22486 <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   2247e:	231f      	movs	r3, #31
   22480:	18fb      	adds	r3, r7, r3
   22482:	22f4      	movs	r2, #244	; 0xf4
   22484:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   22486:	231f      	movs	r3, #31
   22488:	18fb      	adds	r3, r7, r3
   2248a:	781b      	ldrb	r3, [r3, #0]
   2248c:	b25b      	sxtb	r3, r3
}
   2248e:	0018      	movs	r0, r3
   22490:	46bd      	mov	sp, r7
   22492:	b009      	add	sp, #36	; 0x24
   22494:	bd90      	pop	{r4, r7, pc}
   22496:	46c0      	nop			; (mov r8, r8)
   22498:	0003431b 	.word	0x0003431b
   2249c:	0002001d 	.word	0x0002001d
   224a0:	000c0008 	.word	0x000c0008
   224a4:	000220ad 	.word	0x000220ad
   224a8:	00022121 	.word	0x00022121
   224ac:	00001354 	.word	0x00001354

000224b0 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   224b0:	b590      	push	{r4, r7, lr}
   224b2:	b085      	sub	sp, #20
   224b4:	af00      	add	r7, sp, #0
   224b6:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   224b8:	230f      	movs	r3, #15
   224ba:	18fb      	adds	r3, r7, r3
   224bc:	2200      	movs	r2, #0
   224be:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   224c0:	687b      	ldr	r3, [r7, #4]
   224c2:	2b00      	cmp	r3, #0
   224c4:	d013      	beq.n	224ee <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   224c6:	230e      	movs	r3, #14
   224c8:	18fb      	adds	r3, r7, r3
   224ca:	687a      	ldr	r2, [r7, #4]
   224cc:	7812      	ldrb	r2, [r2, #0]
   224ce:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   224d0:	230e      	movs	r3, #14
   224d2:	18fb      	adds	r3, r7, r3
   224d4:	781b      	ldrb	r3, [r3, #0]
   224d6:	2b00      	cmp	r3, #0
   224d8:	d004      	beq.n	224e4 <nm_drv_init+0x34>
   224da:	230e      	movs	r3, #14
   224dc:	18fb      	adds	r3, r7, r3
   224de:	781b      	ldrb	r3, [r3, #0]
   224e0:	2b04      	cmp	r3, #4
   224e2:	d908      	bls.n	224f6 <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   224e4:	230e      	movs	r3, #14
   224e6:	18fb      	adds	r3, r7, r3
   224e8:	2201      	movs	r2, #1
   224ea:	701a      	strb	r2, [r3, #0]
   224ec:	e003      	b.n	224f6 <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   224ee:	230e      	movs	r3, #14
   224f0:	18fb      	adds	r3, r7, r3
   224f2:	2201      	movs	r2, #1
   224f4:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   224f6:	230f      	movs	r3, #15
   224f8:	18fc      	adds	r4, r7, r3
   224fa:	2000      	movs	r0, #0
   224fc:	4b41      	ldr	r3, [pc, #260]	; (22604 <nm_drv_init+0x154>)
   224fe:	4798      	blx	r3
   22500:	0003      	movs	r3, r0
   22502:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22504:	230f      	movs	r3, #15
   22506:	18fb      	adds	r3, r7, r3
   22508:	781b      	ldrb	r3, [r3, #0]
   2250a:	b25b      	sxtb	r3, r3
   2250c:	2b00      	cmp	r3, #0
   2250e:	d00f      	beq.n	22530 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   22510:	2390      	movs	r3, #144	; 0x90
   22512:	005a      	lsls	r2, r3, #1
   22514:	493c      	ldr	r1, [pc, #240]	; (22608 <nm_drv_init+0x158>)
   22516:	4b3d      	ldr	r3, [pc, #244]	; (2260c <nm_drv_init+0x15c>)
   22518:	0018      	movs	r0, r3
   2251a:	4b3d      	ldr	r3, [pc, #244]	; (22610 <nm_drv_init+0x160>)
   2251c:	4798      	blx	r3
   2251e:	4b3d      	ldr	r3, [pc, #244]	; (22614 <nm_drv_init+0x164>)
   22520:	0018      	movs	r0, r3
   22522:	4b3b      	ldr	r3, [pc, #236]	; (22610 <nm_drv_init+0x160>)
   22524:	4798      	blx	r3
   22526:	4b3c      	ldr	r3, [pc, #240]	; (22618 <nm_drv_init+0x168>)
   22528:	0018      	movs	r0, r3
   2252a:	4b39      	ldr	r3, [pc, #228]	; (22610 <nm_drv_init+0x160>)
   2252c:	4798      	blx	r3
		goto ERR1;
   2252e:	e061      	b.n	225f4 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   22530:	4b3a      	ldr	r3, [pc, #232]	; (2261c <nm_drv_init+0x16c>)
   22532:	0018      	movs	r0, r3
   22534:	4b36      	ldr	r3, [pc, #216]	; (22610 <nm_drv_init+0x160>)
   22536:	4798      	blx	r3
   22538:	4b39      	ldr	r3, [pc, #228]	; (22620 <nm_drv_init+0x170>)
   2253a:	4798      	blx	r3
   2253c:	0002      	movs	r2, r0
   2253e:	4b39      	ldr	r3, [pc, #228]	; (22624 <nm_drv_init+0x174>)
   22540:	0011      	movs	r1, r2
   22542:	0018      	movs	r0, r3
   22544:	4b32      	ldr	r3, [pc, #200]	; (22610 <nm_drv_init+0x160>)
   22546:	4798      	blx	r3
   22548:	4b33      	ldr	r3, [pc, #204]	; (22618 <nm_drv_init+0x168>)
   2254a:	0018      	movs	r0, r3
   2254c:	4b30      	ldr	r3, [pc, #192]	; (22610 <nm_drv_init+0x160>)
   2254e:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   22550:	4b35      	ldr	r3, [pc, #212]	; (22628 <nm_drv_init+0x178>)
   22552:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   22554:	230f      	movs	r3, #15
   22556:	18fc      	adds	r4, r7, r3
   22558:	230e      	movs	r3, #14
   2255a:	18fb      	adds	r3, r7, r3
   2255c:	781b      	ldrb	r3, [r3, #0]
   2255e:	0018      	movs	r0, r3
   22560:	4b32      	ldr	r3, [pc, #200]	; (2262c <nm_drv_init+0x17c>)
   22562:	4798      	blx	r3
   22564:	0003      	movs	r3, r0
   22566:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22568:	230f      	movs	r3, #15
   2256a:	18fb      	adds	r3, r7, r3
   2256c:	781b      	ldrb	r3, [r3, #0]
   2256e:	b25b      	sxtb	r3, r3
   22570:	2b00      	cmp	r3, #0
   22572:	d13a      	bne.n	225ea <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   22574:	230f      	movs	r3, #15
   22576:	18fc      	adds	r4, r7, r3
   22578:	230e      	movs	r3, #14
   2257a:	18fb      	adds	r3, r7, r3
   2257c:	781b      	ldrb	r3, [r3, #0]
   2257e:	0018      	movs	r0, r3
   22580:	4b2b      	ldr	r3, [pc, #172]	; (22630 <nm_drv_init+0x180>)
   22582:	4798      	blx	r3
   22584:	0003      	movs	r3, r0
   22586:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22588:	230f      	movs	r3, #15
   2258a:	18fb      	adds	r3, r7, r3
   2258c:	781b      	ldrb	r3, [r3, #0]
   2258e:	b25b      	sxtb	r3, r3
   22590:	2b00      	cmp	r3, #0
   22592:	d12c      	bne.n	225ee <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   22594:	230e      	movs	r3, #14
   22596:	18fb      	adds	r3, r7, r3
   22598:	781b      	ldrb	r3, [r3, #0]
   2259a:	2b02      	cmp	r3, #2
   2259c:	d02a      	beq.n	225f4 <nm_drv_init+0x144>
   2259e:	230e      	movs	r3, #14
   225a0:	18fb      	adds	r3, r7, r3
   225a2:	781b      	ldrb	r3, [r3, #0]
   225a4:	2b03      	cmp	r3, #3
   225a6:	d025      	beq.n	225f4 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   225a8:	230f      	movs	r3, #15
   225aa:	18fc      	adds	r4, r7, r3
   225ac:	4b21      	ldr	r3, [pc, #132]	; (22634 <nm_drv_init+0x184>)
   225ae:	4798      	blx	r3
   225b0:	0003      	movs	r3, r0
   225b2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   225b4:	230f      	movs	r3, #15
   225b6:	18fb      	adds	r3, r7, r3
   225b8:	781b      	ldrb	r3, [r3, #0]
   225ba:	b25b      	sxtb	r3, r3
   225bc:	2b00      	cmp	r3, #0
   225be:	d00f      	beq.n	225e0 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   225c0:	23a7      	movs	r3, #167	; 0xa7
   225c2:	005a      	lsls	r2, r3, #1
   225c4:	4910      	ldr	r1, [pc, #64]	; (22608 <nm_drv_init+0x158>)
   225c6:	4b11      	ldr	r3, [pc, #68]	; (2260c <nm_drv_init+0x15c>)
   225c8:	0018      	movs	r0, r3
   225ca:	4b11      	ldr	r3, [pc, #68]	; (22610 <nm_drv_init+0x160>)
   225cc:	4798      	blx	r3
   225ce:	4b1a      	ldr	r3, [pc, #104]	; (22638 <nm_drv_init+0x188>)
   225d0:	0018      	movs	r0, r3
   225d2:	4b0f      	ldr	r3, [pc, #60]	; (22610 <nm_drv_init+0x160>)
   225d4:	4798      	blx	r3
   225d6:	4b10      	ldr	r3, [pc, #64]	; (22618 <nm_drv_init+0x168>)
   225d8:	0018      	movs	r0, r3
   225da:	4b0d      	ldr	r3, [pc, #52]	; (22610 <nm_drv_init+0x160>)
   225dc:	4798      	blx	r3
		goto ERR2;
   225de:	e007      	b.n	225f0 <nm_drv_init+0x140>
	}
	return ret;
   225e0:	230f      	movs	r3, #15
   225e2:	18fb      	adds	r3, r7, r3
   225e4:	781b      	ldrb	r3, [r3, #0]
   225e6:	b25b      	sxtb	r3, r3
   225e8:	e008      	b.n	225fc <nm_drv_init+0x14c>
		goto ERR2;
   225ea:	46c0      	nop			; (mov r8, r8)
   225ec:	e000      	b.n	225f0 <nm_drv_init+0x140>
		goto ERR2;
   225ee:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   225f0:	4b12      	ldr	r3, [pc, #72]	; (2263c <nm_drv_init+0x18c>)
   225f2:	4798      	blx	r3
ERR1:
	return ret;
   225f4:	230f      	movs	r3, #15
   225f6:	18fb      	adds	r3, r7, r3
   225f8:	781b      	ldrb	r3, [r3, #0]
   225fa:	b25b      	sxtb	r3, r3
}
   225fc:	0018      	movs	r0, r3
   225fe:	46bd      	mov	sp, r7
   22600:	b005      	add	sp, #20
   22602:	bd90      	pop	{r4, r7, pc}
   22604:	00022011 	.word	0x00022011
   22608:	00038308 	.word	0x00038308
   2260c:	00038238 	.word	0x00038238
   22610:	0001d2e9 	.word	0x0001d2e9
   22614:	0003824c 	.word	0x0003824c
   22618:	00038268 	.word	0x00038268
   2261c:	0003826c 	.word	0x0003826c
   22620:	000219ad 	.word	0x000219ad
   22624:	00038278 	.word	0x00038278
   22628:	00023ec9 	.word	0x00023ec9
   2262c:	00021d05 	.word	0x00021d05
   22630:	00021e9d 	.word	0x00021e9d
   22634:	000218f9 	.word	0x000218f9
   22638:	00038288 	.word	0x00038288
   2263c:	00022045 	.word	0x00022045

00022640 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   22640:	b590      	push	{r4, r7, lr}
   22642:	b085      	sub	sp, #20
   22644:	af00      	add	r7, sp, #0
   22646:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   22648:	230f      	movs	r3, #15
   2264a:	18fc      	adds	r4, r7, r3
   2264c:	4b2e      	ldr	r3, [pc, #184]	; (22708 <nm_drv_deinit+0xc8>)
   2264e:	4798      	blx	r3
   22650:	0003      	movs	r3, r0
   22652:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22654:	230f      	movs	r3, #15
   22656:	18fb      	adds	r3, r7, r3
   22658:	781b      	ldrb	r3, [r3, #0]
   2265a:	b25b      	sxtb	r3, r3
   2265c:	2b00      	cmp	r3, #0
   2265e:	d010      	beq.n	22682 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   22660:	2366      	movs	r3, #102	; 0x66
   22662:	33ff      	adds	r3, #255	; 0xff
   22664:	001a      	movs	r2, r3
   22666:	4929      	ldr	r1, [pc, #164]	; (2270c <nm_drv_deinit+0xcc>)
   22668:	4b29      	ldr	r3, [pc, #164]	; (22710 <nm_drv_deinit+0xd0>)
   2266a:	0018      	movs	r0, r3
   2266c:	4b29      	ldr	r3, [pc, #164]	; (22714 <nm_drv_deinit+0xd4>)
   2266e:	4798      	blx	r3
   22670:	4b29      	ldr	r3, [pc, #164]	; (22718 <nm_drv_deinit+0xd8>)
   22672:	0018      	movs	r0, r3
   22674:	4b27      	ldr	r3, [pc, #156]	; (22714 <nm_drv_deinit+0xd4>)
   22676:	4798      	blx	r3
   22678:	4b28      	ldr	r3, [pc, #160]	; (2271c <nm_drv_deinit+0xdc>)
   2267a:	0018      	movs	r0, r3
   2267c:	4b25      	ldr	r3, [pc, #148]	; (22714 <nm_drv_deinit+0xd4>)
   2267e:	4798      	blx	r3
		goto ERR1;
   22680:	e03a      	b.n	226f8 <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   22682:	230f      	movs	r3, #15
   22684:	18fc      	adds	r4, r7, r3
   22686:	2000      	movs	r0, #0
   22688:	4b25      	ldr	r3, [pc, #148]	; (22720 <nm_drv_deinit+0xe0>)
   2268a:	4798      	blx	r3
   2268c:	0003      	movs	r3, r0
   2268e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22690:	230f      	movs	r3, #15
   22692:	18fb      	adds	r3, r7, r3
   22694:	781b      	ldrb	r3, [r3, #0]
   22696:	b25b      	sxtb	r3, r3
   22698:	2b00      	cmp	r3, #0
   2269a:	d00f      	beq.n	226bc <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   2269c:	23b6      	movs	r3, #182	; 0xb6
   2269e:	005a      	lsls	r2, r3, #1
   226a0:	491a      	ldr	r1, [pc, #104]	; (2270c <nm_drv_deinit+0xcc>)
   226a2:	4b1b      	ldr	r3, [pc, #108]	; (22710 <nm_drv_deinit+0xd0>)
   226a4:	0018      	movs	r0, r3
   226a6:	4b1b      	ldr	r3, [pc, #108]	; (22714 <nm_drv_deinit+0xd4>)
   226a8:	4798      	blx	r3
   226aa:	4b1e      	ldr	r3, [pc, #120]	; (22724 <nm_drv_deinit+0xe4>)
   226ac:	0018      	movs	r0, r3
   226ae:	4b19      	ldr	r3, [pc, #100]	; (22714 <nm_drv_deinit+0xd4>)
   226b0:	4798      	blx	r3
   226b2:	4b1a      	ldr	r3, [pc, #104]	; (2271c <nm_drv_deinit+0xdc>)
   226b4:	0018      	movs	r0, r3
   226b6:	4b17      	ldr	r3, [pc, #92]	; (22714 <nm_drv_deinit+0xd4>)
   226b8:	4798      	blx	r3
		goto ERR1;
   226ba:	e01d      	b.n	226f8 <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   226bc:	230f      	movs	r3, #15
   226be:	18fc      	adds	r4, r7, r3
   226c0:	4b19      	ldr	r3, [pc, #100]	; (22728 <nm_drv_deinit+0xe8>)
   226c2:	4798      	blx	r3
   226c4:	0003      	movs	r3, r0
   226c6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   226c8:	230f      	movs	r3, #15
   226ca:	18fb      	adds	r3, r7, r3
   226cc:	781b      	ldrb	r3, [r3, #0]
   226ce:	b25b      	sxtb	r3, r3
   226d0:	2b00      	cmp	r3, #0
   226d2:	d00f      	beq.n	226f4 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   226d4:	23b9      	movs	r3, #185	; 0xb9
   226d6:	005a      	lsls	r2, r3, #1
   226d8:	490c      	ldr	r1, [pc, #48]	; (2270c <nm_drv_deinit+0xcc>)
   226da:	4b0d      	ldr	r3, [pc, #52]	; (22710 <nm_drv_deinit+0xd0>)
   226dc:	0018      	movs	r0, r3
   226de:	4b0d      	ldr	r3, [pc, #52]	; (22714 <nm_drv_deinit+0xd4>)
   226e0:	4798      	blx	r3
   226e2:	4b12      	ldr	r3, [pc, #72]	; (2272c <nm_drv_deinit+0xec>)
   226e4:	0018      	movs	r0, r3
   226e6:	4b0b      	ldr	r3, [pc, #44]	; (22714 <nm_drv_deinit+0xd4>)
   226e8:	4798      	blx	r3
   226ea:	4b0c      	ldr	r3, [pc, #48]	; (2271c <nm_drv_deinit+0xdc>)
   226ec:	0018      	movs	r0, r3
   226ee:	4b09      	ldr	r3, [pc, #36]	; (22714 <nm_drv_deinit+0xd4>)
   226f0:	4798      	blx	r3
		goto ERR1;
   226f2:	e001      	b.n	226f8 <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   226f4:	4b0e      	ldr	r3, [pc, #56]	; (22730 <nm_drv_deinit+0xf0>)
   226f6:	4798      	blx	r3
#endif

ERR1:
	return ret;
   226f8:	230f      	movs	r3, #15
   226fa:	18fb      	adds	r3, r7, r3
   226fc:	781b      	ldrb	r3, [r3, #0]
   226fe:	b25b      	sxtb	r3, r3
}
   22700:	0018      	movs	r0, r3
   22702:	46bd      	mov	sp, r7
   22704:	b005      	add	sp, #20
   22706:	bd90      	pop	{r4, r7, pc}
   22708:	00021f51 	.word	0x00021f51
   2270c:	00038314 	.word	0x00038314
   22710:	00038238 	.word	0x00038238
   22714:	0001d2e9 	.word	0x0001d2e9
   22718:	000382a8 	.word	0x000382a8
   2271c:	00038268 	.word	0x00038268
   22720:	00025371 	.word	0x00025371
   22724:	000382c8 	.word	0x000382c8
   22728:	00022045 	.word	0x00022045
   2272c:	000382ec 	.word	0x000382ec
   22730:	00024015 	.word	0x00024015

00022734 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   22734:	b580      	push	{r7, lr}
   22736:	b086      	sub	sp, #24
   22738:	af00      	add	r7, sp, #0
   2273a:	6078      	str	r0, [r7, #4]
   2273c:	000a      	movs	r2, r1
   2273e:	1cbb      	adds	r3, r7, #2
   22740:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   22742:	230c      	movs	r3, #12
   22744:	18fb      	adds	r3, r7, r3
   22746:	2200      	movs	r2, #0
   22748:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   2274a:	230c      	movs	r3, #12
   2274c:	18fb      	adds	r3, r7, r3
   2274e:	687a      	ldr	r2, [r7, #4]
   22750:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   22752:	230c      	movs	r3, #12
   22754:	18fb      	adds	r3, r7, r3
   22756:	1cba      	adds	r2, r7, #2
   22758:	8812      	ldrh	r2, [r2, #0]
   2275a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   2275c:	230c      	movs	r3, #12
   2275e:	18fb      	adds	r3, r7, r3
   22760:	0019      	movs	r1, r3
   22762:	2003      	movs	r0, #3
   22764:	4b03      	ldr	r3, [pc, #12]	; (22774 <nmi_spi_read+0x40>)
   22766:	4798      	blx	r3
   22768:	0003      	movs	r3, r0
}
   2276a:	0018      	movs	r0, r3
   2276c:	46bd      	mov	sp, r7
   2276e:	b006      	add	sp, #24
   22770:	bd80      	pop	{r7, pc}
   22772:	46c0      	nop			; (mov r8, r8)
   22774:	0001fee1 	.word	0x0001fee1

00022778 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   22778:	b580      	push	{r7, lr}
   2277a:	b086      	sub	sp, #24
   2277c:	af00      	add	r7, sp, #0
   2277e:	6078      	str	r0, [r7, #4]
   22780:	000a      	movs	r2, r1
   22782:	1cbb      	adds	r3, r7, #2
   22784:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   22786:	230c      	movs	r3, #12
   22788:	18fb      	adds	r3, r7, r3
   2278a:	687a      	ldr	r2, [r7, #4]
   2278c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   2278e:	230c      	movs	r3, #12
   22790:	18fb      	adds	r3, r7, r3
   22792:	2200      	movs	r2, #0
   22794:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   22796:	230c      	movs	r3, #12
   22798:	18fb      	adds	r3, r7, r3
   2279a:	1cba      	adds	r2, r7, #2
   2279c:	8812      	ldrh	r2, [r2, #0]
   2279e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   227a0:	230c      	movs	r3, #12
   227a2:	18fb      	adds	r3, r7, r3
   227a4:	0019      	movs	r1, r3
   227a6:	2003      	movs	r0, #3
   227a8:	4b03      	ldr	r3, [pc, #12]	; (227b8 <nmi_spi_write+0x40>)
   227aa:	4798      	blx	r3
   227ac:	0003      	movs	r3, r0
}
   227ae:	0018      	movs	r0, r3
   227b0:	46bd      	mov	sp, r7
   227b2:	b006      	add	sp, #24
   227b4:	bd80      	pop	{r7, pc}
   227b6:	46c0      	nop			; (mov r8, r8)
   227b8:	0001fee1 	.word	0x0001fee1

000227bc <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   227bc:	b580      	push	{r7, lr}
   227be:	b088      	sub	sp, #32
   227c0:	af00      	add	r7, sp, #0
   227c2:	60f8      	str	r0, [r7, #12]
   227c4:	60b9      	str	r1, [r7, #8]
   227c6:	1dbb      	adds	r3, r7, #6
   227c8:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   227ca:	2314      	movs	r3, #20
   227cc:	18fb      	adds	r3, r7, r3
   227ce:	68fa      	ldr	r2, [r7, #12]
   227d0:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   227d2:	2314      	movs	r3, #20
   227d4:	18fb      	adds	r3, r7, r3
   227d6:	68ba      	ldr	r2, [r7, #8]
   227d8:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   227da:	2314      	movs	r3, #20
   227dc:	18fb      	adds	r3, r7, r3
   227de:	1dba      	adds	r2, r7, #6
   227e0:	8812      	ldrh	r2, [r2, #0]
   227e2:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   227e4:	2314      	movs	r3, #20
   227e6:	18fb      	adds	r3, r7, r3
   227e8:	0019      	movs	r1, r3
   227ea:	2003      	movs	r0, #3
   227ec:	4b03      	ldr	r3, [pc, #12]	; (227fc <nmi_spi_rw+0x40>)
   227ee:	4798      	blx	r3
   227f0:	0003      	movs	r3, r0
}
   227f2:	0018      	movs	r0, r3
   227f4:	46bd      	mov	sp, r7
   227f6:	b008      	add	sp, #32
   227f8:	bd80      	pop	{r7, pc}
   227fa:	46c0      	nop			; (mov r8, r8)
   227fc:	0001fee1 	.word	0x0001fee1

00022800 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   22800:	b580      	push	{r7, lr}
   22802:	b082      	sub	sp, #8
   22804:	af00      	add	r7, sp, #0
   22806:	0002      	movs	r2, r0
   22808:	1dfb      	adds	r3, r7, #7
   2280a:	701a      	strb	r2, [r3, #0]
   2280c:	1dbb      	adds	r3, r7, #6
   2280e:	1c0a      	adds	r2, r1, #0
   22810:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   22812:	1dfb      	adds	r3, r7, #7
   22814:	781b      	ldrb	r3, [r3, #0]
   22816:	005a      	lsls	r2, r3, #1
   22818:	1dbb      	adds	r3, r7, #6
   2281a:	781b      	ldrb	r3, [r3, #0]
   2281c:	4053      	eors	r3, r2
   2281e:	4a03      	ldr	r2, [pc, #12]	; (2282c <crc7_byte+0x2c>)
   22820:	5cd3      	ldrb	r3, [r2, r3]
}
   22822:	0018      	movs	r0, r3
   22824:	46bd      	mov	sp, r7
   22826:	b002      	add	sp, #8
   22828:	bd80      	pop	{r7, pc}
   2282a:	46c0      	nop			; (mov r8, r8)
   2282c:	00038324 	.word	0x00038324

00022830 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   22830:	b590      	push	{r4, r7, lr}
   22832:	b085      	sub	sp, #20
   22834:	af00      	add	r7, sp, #0
   22836:	60b9      	str	r1, [r7, #8]
   22838:	607a      	str	r2, [r7, #4]
   2283a:	230f      	movs	r3, #15
   2283c:	18fb      	adds	r3, r7, r3
   2283e:	1c02      	adds	r2, r0, #0
   22840:	701a      	strb	r2, [r3, #0]
	while (len--)
   22842:	e00e      	b.n	22862 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   22844:	68bb      	ldr	r3, [r7, #8]
   22846:	1c5a      	adds	r2, r3, #1
   22848:	60ba      	str	r2, [r7, #8]
   2284a:	781a      	ldrb	r2, [r3, #0]
   2284c:	230f      	movs	r3, #15
   2284e:	18fc      	adds	r4, r7, r3
   22850:	230f      	movs	r3, #15
   22852:	18fb      	adds	r3, r7, r3
   22854:	781b      	ldrb	r3, [r3, #0]
   22856:	0011      	movs	r1, r2
   22858:	0018      	movs	r0, r3
   2285a:	4b08      	ldr	r3, [pc, #32]	; (2287c <crc7+0x4c>)
   2285c:	4798      	blx	r3
   2285e:	0003      	movs	r3, r0
   22860:	7023      	strb	r3, [r4, #0]
	while (len--)
   22862:	687b      	ldr	r3, [r7, #4]
   22864:	1e5a      	subs	r2, r3, #1
   22866:	607a      	str	r2, [r7, #4]
   22868:	2b00      	cmp	r3, #0
   2286a:	d1eb      	bne.n	22844 <crc7+0x14>
	return crc;
   2286c:	230f      	movs	r3, #15
   2286e:	18fb      	adds	r3, r7, r3
   22870:	781b      	ldrb	r3, [r3, #0]
}
   22872:	0018      	movs	r0, r3
   22874:	46bd      	mov	sp, r7
   22876:	b005      	add	sp, #20
   22878:	bd90      	pop	{r4, r7, pc}
   2287a:	46c0      	nop			; (mov r8, r8)
   2287c:	00022801 	.word	0x00022801

00022880 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   22880:	b590      	push	{r4, r7, lr}
   22882:	b089      	sub	sp, #36	; 0x24
   22884:	af00      	add	r7, sp, #0
   22886:	60b9      	str	r1, [r7, #8]
   22888:	607a      	str	r2, [r7, #4]
   2288a:	603b      	str	r3, [r7, #0]
   2288c:	230f      	movs	r3, #15
   2288e:	18fb      	adds	r3, r7, r3
   22890:	1c02      	adds	r2, r0, #0
   22892:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   22894:	231f      	movs	r3, #31
   22896:	18fb      	adds	r3, r7, r3
   22898:	2205      	movs	r2, #5
   2289a:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   2289c:	231e      	movs	r3, #30
   2289e:	18fb      	adds	r3, r7, r3
   228a0:	2201      	movs	r2, #1
   228a2:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   228a4:	2314      	movs	r3, #20
   228a6:	18fb      	adds	r3, r7, r3
   228a8:	220f      	movs	r2, #15
   228aa:	18ba      	adds	r2, r7, r2
   228ac:	7812      	ldrb	r2, [r2, #0]
   228ae:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   228b0:	230f      	movs	r3, #15
   228b2:	18fb      	adds	r3, r7, r3
   228b4:	781b      	ldrb	r3, [r3, #0]
   228b6:	3bc1      	subs	r3, #193	; 0xc1
   228b8:	2b0e      	cmp	r3, #14
   228ba:	d900      	bls.n	228be <spi_cmd+0x3e>
   228bc:	e11b      	b.n	22af6 <spi_cmd+0x276>
   228be:	009a      	lsls	r2, r3, #2
   228c0:	4bb6      	ldr	r3, [pc, #728]	; (22b9c <spi_cmd+0x31c>)
   228c2:	18d3      	adds	r3, r2, r3
   228c4:	681b      	ldr	r3, [r3, #0]
   228c6:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   228c8:	68bb      	ldr	r3, [r7, #8]
   228ca:	0c1b      	lsrs	r3, r3, #16
   228cc:	b2da      	uxtb	r2, r3
   228ce:	2314      	movs	r3, #20
   228d0:	18fb      	adds	r3, r7, r3
   228d2:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   228d4:	68bb      	ldr	r3, [r7, #8]
   228d6:	0a1b      	lsrs	r3, r3, #8
   228d8:	b2da      	uxtb	r2, r3
   228da:	2314      	movs	r3, #20
   228dc:	18fb      	adds	r3, r7, r3
   228de:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   228e0:	68bb      	ldr	r3, [r7, #8]
   228e2:	b2da      	uxtb	r2, r3
   228e4:	2314      	movs	r3, #20
   228e6:	18fb      	adds	r3, r7, r3
   228e8:	70da      	strb	r2, [r3, #3]
		len = 5;
   228ea:	231f      	movs	r3, #31
   228ec:	18fb      	adds	r3, r7, r3
   228ee:	2205      	movs	r2, #5
   228f0:	701a      	strb	r2, [r3, #0]
		break;
   228f2:	e105      	b.n	22b00 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   228f4:	68bb      	ldr	r3, [r7, #8]
   228f6:	0a1b      	lsrs	r3, r3, #8
   228f8:	b2da      	uxtb	r2, r3
   228fa:	2314      	movs	r3, #20
   228fc:	18fb      	adds	r3, r7, r3
   228fe:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   22900:	2330      	movs	r3, #48	; 0x30
   22902:	18fb      	adds	r3, r7, r3
   22904:	781b      	ldrb	r3, [r3, #0]
   22906:	2b00      	cmp	r3, #0
   22908:	d009      	beq.n	2291e <spi_cmd+0x9e>
   2290a:	2314      	movs	r3, #20
   2290c:	18fb      	adds	r3, r7, r3
   2290e:	785b      	ldrb	r3, [r3, #1]
   22910:	2280      	movs	r2, #128	; 0x80
   22912:	4252      	negs	r2, r2
   22914:	4313      	orrs	r3, r2
   22916:	b2da      	uxtb	r2, r3
   22918:	2314      	movs	r3, #20
   2291a:	18fb      	adds	r3, r7, r3
   2291c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   2291e:	68bb      	ldr	r3, [r7, #8]
   22920:	b2da      	uxtb	r2, r3
   22922:	2314      	movs	r3, #20
   22924:	18fb      	adds	r3, r7, r3
   22926:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   22928:	2314      	movs	r3, #20
   2292a:	18fb      	adds	r3, r7, r3
   2292c:	2200      	movs	r2, #0
   2292e:	70da      	strb	r2, [r3, #3]
		len = 5;
   22930:	231f      	movs	r3, #31
   22932:	18fb      	adds	r3, r7, r3
   22934:	2205      	movs	r2, #5
   22936:	701a      	strb	r2, [r3, #0]
		break;
   22938:	e0e2      	b.n	22b00 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   2293a:	2314      	movs	r3, #20
   2293c:	18fb      	adds	r3, r7, r3
   2293e:	2200      	movs	r2, #0
   22940:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   22942:	2314      	movs	r3, #20
   22944:	18fb      	adds	r3, r7, r3
   22946:	2200      	movs	r2, #0
   22948:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   2294a:	2314      	movs	r3, #20
   2294c:	18fb      	adds	r3, r7, r3
   2294e:	2200      	movs	r2, #0
   22950:	70da      	strb	r2, [r3, #3]
		len = 5;
   22952:	231f      	movs	r3, #31
   22954:	18fb      	adds	r3, r7, r3
   22956:	2205      	movs	r2, #5
   22958:	701a      	strb	r2, [r3, #0]
		break;
   2295a:	e0d1      	b.n	22b00 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   2295c:	2314      	movs	r3, #20
   2295e:	18fb      	adds	r3, r7, r3
   22960:	2200      	movs	r2, #0
   22962:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   22964:	2314      	movs	r3, #20
   22966:	18fb      	adds	r3, r7, r3
   22968:	2200      	movs	r2, #0
   2296a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   2296c:	2314      	movs	r3, #20
   2296e:	18fb      	adds	r3, r7, r3
   22970:	2200      	movs	r2, #0
   22972:	70da      	strb	r2, [r3, #3]
		len = 5;
   22974:	231f      	movs	r3, #31
   22976:	18fb      	adds	r3, r7, r3
   22978:	2205      	movs	r2, #5
   2297a:	701a      	strb	r2, [r3, #0]
		break;
   2297c:	e0c0      	b.n	22b00 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   2297e:	2314      	movs	r3, #20
   22980:	18fb      	adds	r3, r7, r3
   22982:	22ff      	movs	r2, #255	; 0xff
   22984:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   22986:	2314      	movs	r3, #20
   22988:	18fb      	adds	r3, r7, r3
   2298a:	22ff      	movs	r2, #255	; 0xff
   2298c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   2298e:	2314      	movs	r3, #20
   22990:	18fb      	adds	r3, r7, r3
   22992:	22ff      	movs	r2, #255	; 0xff
   22994:	70da      	strb	r2, [r3, #3]
		len = 5;
   22996:	231f      	movs	r3, #31
   22998:	18fb      	adds	r3, r7, r3
   2299a:	2205      	movs	r2, #5
   2299c:	701a      	strb	r2, [r3, #0]
		break;
   2299e:	e0af      	b.n	22b00 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   229a0:	68bb      	ldr	r3, [r7, #8]
   229a2:	0c1b      	lsrs	r3, r3, #16
   229a4:	b2da      	uxtb	r2, r3
   229a6:	2314      	movs	r3, #20
   229a8:	18fb      	adds	r3, r7, r3
   229aa:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   229ac:	68bb      	ldr	r3, [r7, #8]
   229ae:	0a1b      	lsrs	r3, r3, #8
   229b0:	b2da      	uxtb	r2, r3
   229b2:	2314      	movs	r3, #20
   229b4:	18fb      	adds	r3, r7, r3
   229b6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   229b8:	68bb      	ldr	r3, [r7, #8]
   229ba:	b2da      	uxtb	r2, r3
   229bc:	2314      	movs	r3, #20
   229be:	18fb      	adds	r3, r7, r3
   229c0:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   229c2:	683b      	ldr	r3, [r7, #0]
   229c4:	0a1b      	lsrs	r3, r3, #8
   229c6:	b2da      	uxtb	r2, r3
   229c8:	2314      	movs	r3, #20
   229ca:	18fb      	adds	r3, r7, r3
   229cc:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   229ce:	683b      	ldr	r3, [r7, #0]
   229d0:	b2da      	uxtb	r2, r3
   229d2:	2314      	movs	r3, #20
   229d4:	18fb      	adds	r3, r7, r3
   229d6:	715a      	strb	r2, [r3, #5]
		len = 7;
   229d8:	231f      	movs	r3, #31
   229da:	18fb      	adds	r3, r7, r3
   229dc:	2207      	movs	r2, #7
   229de:	701a      	strb	r2, [r3, #0]
		break;
   229e0:	e08e      	b.n	22b00 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   229e2:	68bb      	ldr	r3, [r7, #8]
   229e4:	0c1b      	lsrs	r3, r3, #16
   229e6:	b2da      	uxtb	r2, r3
   229e8:	2314      	movs	r3, #20
   229ea:	18fb      	adds	r3, r7, r3
   229ec:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   229ee:	68bb      	ldr	r3, [r7, #8]
   229f0:	0a1b      	lsrs	r3, r3, #8
   229f2:	b2da      	uxtb	r2, r3
   229f4:	2314      	movs	r3, #20
   229f6:	18fb      	adds	r3, r7, r3
   229f8:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   229fa:	68bb      	ldr	r3, [r7, #8]
   229fc:	b2da      	uxtb	r2, r3
   229fe:	2314      	movs	r3, #20
   22a00:	18fb      	adds	r3, r7, r3
   22a02:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   22a04:	683b      	ldr	r3, [r7, #0]
   22a06:	0c1b      	lsrs	r3, r3, #16
   22a08:	b2da      	uxtb	r2, r3
   22a0a:	2314      	movs	r3, #20
   22a0c:	18fb      	adds	r3, r7, r3
   22a0e:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   22a10:	683b      	ldr	r3, [r7, #0]
   22a12:	0a1b      	lsrs	r3, r3, #8
   22a14:	b2da      	uxtb	r2, r3
   22a16:	2314      	movs	r3, #20
   22a18:	18fb      	adds	r3, r7, r3
   22a1a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   22a1c:	683b      	ldr	r3, [r7, #0]
   22a1e:	b2da      	uxtb	r2, r3
   22a20:	2314      	movs	r3, #20
   22a22:	18fb      	adds	r3, r7, r3
   22a24:	719a      	strb	r2, [r3, #6]
		len = 8;
   22a26:	231f      	movs	r3, #31
   22a28:	18fb      	adds	r3, r7, r3
   22a2a:	2208      	movs	r2, #8
   22a2c:	701a      	strb	r2, [r3, #0]
		break;
   22a2e:	e067      	b.n	22b00 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   22a30:	68bb      	ldr	r3, [r7, #8]
   22a32:	0a1b      	lsrs	r3, r3, #8
   22a34:	b2da      	uxtb	r2, r3
   22a36:	2314      	movs	r3, #20
   22a38:	18fb      	adds	r3, r7, r3
   22a3a:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   22a3c:	2330      	movs	r3, #48	; 0x30
   22a3e:	18fb      	adds	r3, r7, r3
   22a40:	781b      	ldrb	r3, [r3, #0]
   22a42:	2b00      	cmp	r3, #0
   22a44:	d009      	beq.n	22a5a <spi_cmd+0x1da>
   22a46:	2314      	movs	r3, #20
   22a48:	18fb      	adds	r3, r7, r3
   22a4a:	785b      	ldrb	r3, [r3, #1]
   22a4c:	2280      	movs	r2, #128	; 0x80
   22a4e:	4252      	negs	r2, r2
   22a50:	4313      	orrs	r3, r2
   22a52:	b2da      	uxtb	r2, r3
   22a54:	2314      	movs	r3, #20
   22a56:	18fb      	adds	r3, r7, r3
   22a58:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   22a5a:	68bb      	ldr	r3, [r7, #8]
   22a5c:	b2da      	uxtb	r2, r3
   22a5e:	2314      	movs	r3, #20
   22a60:	18fb      	adds	r3, r7, r3
   22a62:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   22a64:	687b      	ldr	r3, [r7, #4]
   22a66:	0e1b      	lsrs	r3, r3, #24
   22a68:	b2da      	uxtb	r2, r3
   22a6a:	2314      	movs	r3, #20
   22a6c:	18fb      	adds	r3, r7, r3
   22a6e:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   22a70:	687b      	ldr	r3, [r7, #4]
   22a72:	0c1b      	lsrs	r3, r3, #16
   22a74:	b2da      	uxtb	r2, r3
   22a76:	2314      	movs	r3, #20
   22a78:	18fb      	adds	r3, r7, r3
   22a7a:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   22a7c:	687b      	ldr	r3, [r7, #4]
   22a7e:	0a1b      	lsrs	r3, r3, #8
   22a80:	b2da      	uxtb	r2, r3
   22a82:	2314      	movs	r3, #20
   22a84:	18fb      	adds	r3, r7, r3
   22a86:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   22a88:	687b      	ldr	r3, [r7, #4]
   22a8a:	b2da      	uxtb	r2, r3
   22a8c:	2314      	movs	r3, #20
   22a8e:	18fb      	adds	r3, r7, r3
   22a90:	719a      	strb	r2, [r3, #6]
		len = 8;
   22a92:	231f      	movs	r3, #31
   22a94:	18fb      	adds	r3, r7, r3
   22a96:	2208      	movs	r2, #8
   22a98:	701a      	strb	r2, [r3, #0]
		break;
   22a9a:	e031      	b.n	22b00 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   22a9c:	68bb      	ldr	r3, [r7, #8]
   22a9e:	0c1b      	lsrs	r3, r3, #16
   22aa0:	b2da      	uxtb	r2, r3
   22aa2:	2314      	movs	r3, #20
   22aa4:	18fb      	adds	r3, r7, r3
   22aa6:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   22aa8:	68bb      	ldr	r3, [r7, #8]
   22aaa:	0a1b      	lsrs	r3, r3, #8
   22aac:	b2da      	uxtb	r2, r3
   22aae:	2314      	movs	r3, #20
   22ab0:	18fb      	adds	r3, r7, r3
   22ab2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   22ab4:	68bb      	ldr	r3, [r7, #8]
   22ab6:	b2da      	uxtb	r2, r3
   22ab8:	2314      	movs	r3, #20
   22aba:	18fb      	adds	r3, r7, r3
   22abc:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   22abe:	687b      	ldr	r3, [r7, #4]
   22ac0:	0e1b      	lsrs	r3, r3, #24
   22ac2:	b2da      	uxtb	r2, r3
   22ac4:	2314      	movs	r3, #20
   22ac6:	18fb      	adds	r3, r7, r3
   22ac8:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   22aca:	687b      	ldr	r3, [r7, #4]
   22acc:	0c1b      	lsrs	r3, r3, #16
   22ace:	b2da      	uxtb	r2, r3
   22ad0:	2314      	movs	r3, #20
   22ad2:	18fb      	adds	r3, r7, r3
   22ad4:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   22ad6:	687b      	ldr	r3, [r7, #4]
   22ad8:	0a1b      	lsrs	r3, r3, #8
   22ada:	b2da      	uxtb	r2, r3
   22adc:	2314      	movs	r3, #20
   22ade:	18fb      	adds	r3, r7, r3
   22ae0:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   22ae2:	687b      	ldr	r3, [r7, #4]
   22ae4:	b2da      	uxtb	r2, r3
   22ae6:	2314      	movs	r3, #20
   22ae8:	18fb      	adds	r3, r7, r3
   22aea:	71da      	strb	r2, [r3, #7]
		len = 9;
   22aec:	231f      	movs	r3, #31
   22aee:	18fb      	adds	r3, r7, r3
   22af0:	2209      	movs	r2, #9
   22af2:	701a      	strb	r2, [r3, #0]
		break;
   22af4:	e004      	b.n	22b00 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   22af6:	231e      	movs	r3, #30
   22af8:	18fb      	adds	r3, r7, r3
   22afa:	2200      	movs	r2, #0
   22afc:	701a      	strb	r2, [r3, #0]
		break;
   22afe:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   22b00:	231e      	movs	r3, #30
   22b02:	18fb      	adds	r3, r7, r3
   22b04:	781b      	ldrb	r3, [r3, #0]
   22b06:	b25b      	sxtb	r3, r3
   22b08:	2b00      	cmp	r3, #0
   22b0a:	d03f      	beq.n	22b8c <spi_cmd+0x30c>
		if (!gu8Crc_off)
   22b0c:	4b24      	ldr	r3, [pc, #144]	; (22ba0 <spi_cmd+0x320>)
   22b0e:	781b      	ldrb	r3, [r3, #0]
   22b10:	2b00      	cmp	r3, #0
   22b12:	d115      	bne.n	22b40 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   22b14:	231f      	movs	r3, #31
   22b16:	18fb      	adds	r3, r7, r3
   22b18:	781b      	ldrb	r3, [r3, #0]
   22b1a:	1e5c      	subs	r4, r3, #1
   22b1c:	231f      	movs	r3, #31
   22b1e:	18fb      	adds	r3, r7, r3
   22b20:	781b      	ldrb	r3, [r3, #0]
   22b22:	3b01      	subs	r3, #1
   22b24:	001a      	movs	r2, r3
   22b26:	2314      	movs	r3, #20
   22b28:	18fb      	adds	r3, r7, r3
   22b2a:	0019      	movs	r1, r3
   22b2c:	207f      	movs	r0, #127	; 0x7f
   22b2e:	4b1d      	ldr	r3, [pc, #116]	; (22ba4 <spi_cmd+0x324>)
   22b30:	4798      	blx	r3
   22b32:	0003      	movs	r3, r0
   22b34:	18db      	adds	r3, r3, r3
   22b36:	b2da      	uxtb	r2, r3
   22b38:	2314      	movs	r3, #20
   22b3a:	18fb      	adds	r3, r7, r3
   22b3c:	551a      	strb	r2, [r3, r4]
   22b3e:	e006      	b.n	22b4e <spi_cmd+0x2ce>
		else
			len-=1;
   22b40:	231f      	movs	r3, #31
   22b42:	18fb      	adds	r3, r7, r3
   22b44:	221f      	movs	r2, #31
   22b46:	18ba      	adds	r2, r7, r2
   22b48:	7812      	ldrb	r2, [r2, #0]
   22b4a:	3a01      	subs	r2, #1
   22b4c:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   22b4e:	231f      	movs	r3, #31
   22b50:	18fb      	adds	r3, r7, r3
   22b52:	781b      	ldrb	r3, [r3, #0]
   22b54:	b29a      	uxth	r2, r3
   22b56:	2314      	movs	r3, #20
   22b58:	18fb      	adds	r3, r7, r3
   22b5a:	0011      	movs	r1, r2
   22b5c:	0018      	movs	r0, r3
   22b5e:	4b12      	ldr	r3, [pc, #72]	; (22ba8 <spi_cmd+0x328>)
   22b60:	4798      	blx	r3
   22b62:	1e03      	subs	r3, r0, #0
   22b64:	d012      	beq.n	22b8c <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   22b66:	2390      	movs	r3, #144	; 0x90
   22b68:	005a      	lsls	r2, r3, #1
   22b6a:	4910      	ldr	r1, [pc, #64]	; (22bac <spi_cmd+0x32c>)
   22b6c:	4b10      	ldr	r3, [pc, #64]	; (22bb0 <spi_cmd+0x330>)
   22b6e:	0018      	movs	r0, r3
   22b70:	4b10      	ldr	r3, [pc, #64]	; (22bb4 <spi_cmd+0x334>)
   22b72:	4798      	blx	r3
   22b74:	4b10      	ldr	r3, [pc, #64]	; (22bb8 <spi_cmd+0x338>)
   22b76:	0018      	movs	r0, r3
   22b78:	4b0e      	ldr	r3, [pc, #56]	; (22bb4 <spi_cmd+0x334>)
   22b7a:	4798      	blx	r3
   22b7c:	4b0f      	ldr	r3, [pc, #60]	; (22bbc <spi_cmd+0x33c>)
   22b7e:	0018      	movs	r0, r3
   22b80:	4b0c      	ldr	r3, [pc, #48]	; (22bb4 <spi_cmd+0x334>)
   22b82:	4798      	blx	r3
			result = N_FAIL;
   22b84:	231e      	movs	r3, #30
   22b86:	18fb      	adds	r3, r7, r3
   22b88:	2200      	movs	r2, #0
   22b8a:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   22b8c:	231e      	movs	r3, #30
   22b8e:	18fb      	adds	r3, r7, r3
   22b90:	781b      	ldrb	r3, [r3, #0]
   22b92:	b25b      	sxtb	r3, r3
}
   22b94:	0018      	movs	r0, r3
   22b96:	46bd      	mov	sp, r7
   22b98:	b009      	add	sp, #36	; 0x24
   22b9a:	bd90      	pop	{r4, r7, pc}
   22b9c:	0003899c 	.word	0x0003899c
   22ba0:	20004114 	.word	0x20004114
   22ba4:	00022831 	.word	0x00022831
   22ba8:	00022779 	.word	0x00022779
   22bac:	00038a14 	.word	0x00038a14
   22bb0:	00038424 	.word	0x00038424
   22bb4:	0001d2e9 	.word	0x0001d2e9
   22bb8:	00038438 	.word	0x00038438
   22bbc:	00038464 	.word	0x00038464

00022bc0 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   22bc0:	b590      	push	{r4, r7, lr}
   22bc2:	b085      	sub	sp, #20
   22bc4:	af00      	add	r7, sp, #0
   22bc6:	0002      	movs	r2, r0
   22bc8:	1dfb      	adds	r3, r7, #7
   22bca:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   22bcc:	230e      	movs	r3, #14
   22bce:	18fb      	adds	r3, r7, r3
   22bd0:	2201      	movs	r2, #1
   22bd2:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   22bd4:	4b32      	ldr	r3, [pc, #200]	; (22ca0 <spi_data_rsp+0xe0>)
   22bd6:	781b      	ldrb	r3, [r3, #0]
   22bd8:	2b00      	cmp	r3, #0
   22bda:	d104      	bne.n	22be6 <spi_data_rsp+0x26>
		len = 2;
   22bdc:	230f      	movs	r3, #15
   22bde:	18fb      	adds	r3, r7, r3
   22be0:	2202      	movs	r2, #2
   22be2:	701a      	strb	r2, [r3, #0]
   22be4:	e003      	b.n	22bee <spi_data_rsp+0x2e>
	else
		len = 3;
   22be6:	230f      	movs	r3, #15
   22be8:	18fb      	adds	r3, r7, r3
   22bea:	2203      	movs	r2, #3
   22bec:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   22bee:	230f      	movs	r3, #15
   22bf0:	18fb      	adds	r3, r7, r3
   22bf2:	781b      	ldrb	r3, [r3, #0]
   22bf4:	b29a      	uxth	r2, r3
   22bf6:	2308      	movs	r3, #8
   22bf8:	18fb      	adds	r3, r7, r3
   22bfa:	0011      	movs	r1, r2
   22bfc:	0018      	movs	r0, r3
   22bfe:	4b29      	ldr	r3, [pc, #164]	; (22ca4 <spi_data_rsp+0xe4>)
   22c00:	4798      	blx	r3
   22c02:	1e03      	subs	r3, r0, #0
   22c04:	d013      	beq.n	22c2e <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   22c06:	239a      	movs	r3, #154	; 0x9a
   22c08:	005a      	lsls	r2, r3, #1
   22c0a:	4927      	ldr	r1, [pc, #156]	; (22ca8 <spi_data_rsp+0xe8>)
   22c0c:	4b27      	ldr	r3, [pc, #156]	; (22cac <spi_data_rsp+0xec>)
   22c0e:	0018      	movs	r0, r3
   22c10:	4b27      	ldr	r3, [pc, #156]	; (22cb0 <spi_data_rsp+0xf0>)
   22c12:	4798      	blx	r3
   22c14:	4b27      	ldr	r3, [pc, #156]	; (22cb4 <spi_data_rsp+0xf4>)
   22c16:	0018      	movs	r0, r3
   22c18:	4b25      	ldr	r3, [pc, #148]	; (22cb0 <spi_data_rsp+0xf0>)
   22c1a:	4798      	blx	r3
   22c1c:	4b26      	ldr	r3, [pc, #152]	; (22cb8 <spi_data_rsp+0xf8>)
   22c1e:	0018      	movs	r0, r3
   22c20:	4b23      	ldr	r3, [pc, #140]	; (22cb0 <spi_data_rsp+0xf0>)
   22c22:	4798      	blx	r3
		result = N_FAIL;
   22c24:	230e      	movs	r3, #14
   22c26:	18fb      	adds	r3, r7, r3
   22c28:	2200      	movs	r2, #0
   22c2a:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   22c2c:	e030      	b.n	22c90 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   22c2e:	230f      	movs	r3, #15
   22c30:	18fb      	adds	r3, r7, r3
   22c32:	781b      	ldrb	r3, [r3, #0]
   22c34:	3b01      	subs	r3, #1
   22c36:	2208      	movs	r2, #8
   22c38:	18ba      	adds	r2, r7, r2
   22c3a:	5cd3      	ldrb	r3, [r2, r3]
   22c3c:	2b00      	cmp	r3, #0
   22c3e:	d108      	bne.n	22c52 <spi_data_rsp+0x92>
   22c40:	230f      	movs	r3, #15
   22c42:	18fb      	adds	r3, r7, r3
   22c44:	781b      	ldrb	r3, [r3, #0]
   22c46:	3b02      	subs	r3, #2
   22c48:	2208      	movs	r2, #8
   22c4a:	18ba      	adds	r2, r7, r2
   22c4c:	5cd3      	ldrb	r3, [r2, r3]
   22c4e:	2bc3      	cmp	r3, #195	; 0xc3
   22c50:	d01e      	beq.n	22c90 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   22c52:	233c      	movs	r3, #60	; 0x3c
   22c54:	33ff      	adds	r3, #255	; 0xff
   22c56:	001a      	movs	r2, r3
   22c58:	4913      	ldr	r1, [pc, #76]	; (22ca8 <spi_data_rsp+0xe8>)
   22c5a:	4b14      	ldr	r3, [pc, #80]	; (22cac <spi_data_rsp+0xec>)
   22c5c:	0018      	movs	r0, r3
   22c5e:	4b14      	ldr	r3, [pc, #80]	; (22cb0 <spi_data_rsp+0xf0>)
   22c60:	4798      	blx	r3
   22c62:	2308      	movs	r3, #8
   22c64:	18fb      	adds	r3, r7, r3
   22c66:	781b      	ldrb	r3, [r3, #0]
   22c68:	0019      	movs	r1, r3
   22c6a:	2308      	movs	r3, #8
   22c6c:	18fb      	adds	r3, r7, r3
   22c6e:	785b      	ldrb	r3, [r3, #1]
   22c70:	001a      	movs	r2, r3
   22c72:	2308      	movs	r3, #8
   22c74:	18fb      	adds	r3, r7, r3
   22c76:	789b      	ldrb	r3, [r3, #2]
   22c78:	4810      	ldr	r0, [pc, #64]	; (22cbc <spi_data_rsp+0xfc>)
   22c7a:	4c0d      	ldr	r4, [pc, #52]	; (22cb0 <spi_data_rsp+0xf0>)
   22c7c:	47a0      	blx	r4
   22c7e:	4b0e      	ldr	r3, [pc, #56]	; (22cb8 <spi_data_rsp+0xf8>)
   22c80:	0018      	movs	r0, r3
   22c82:	4b0b      	ldr	r3, [pc, #44]	; (22cb0 <spi_data_rsp+0xf0>)
   22c84:	4798      	blx	r3
		result = N_FAIL;
   22c86:	230e      	movs	r3, #14
   22c88:	18fb      	adds	r3, r7, r3
   22c8a:	2200      	movs	r2, #0
   22c8c:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   22c8e:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   22c90:	230e      	movs	r3, #14
   22c92:	18fb      	adds	r3, r7, r3
   22c94:	781b      	ldrb	r3, [r3, #0]
   22c96:	b25b      	sxtb	r3, r3
}
   22c98:	0018      	movs	r0, r3
   22c9a:	46bd      	mov	sp, r7
   22c9c:	b005      	add	sp, #20
   22c9e:	bd90      	pop	{r4, r7, pc}
   22ca0:	20004114 	.word	0x20004114
   22ca4:	00022735 	.word	0x00022735
   22ca8:	00038a1c 	.word	0x00038a1c
   22cac:	00038424 	.word	0x00038424
   22cb0:	0001d2e9 	.word	0x0001d2e9
   22cb4:	00038468 	.word	0x00038468
   22cb8:	00038464 	.word	0x00038464
   22cbc:	00038488 	.word	0x00038488

00022cc0 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   22cc0:	b580      	push	{r7, lr}
   22cc2:	b084      	sub	sp, #16
   22cc4:	af00      	add	r7, sp, #0
   22cc6:	0002      	movs	r2, r0
   22cc8:	1dfb      	adds	r3, r7, #7
   22cca:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   22ccc:	230f      	movs	r3, #15
   22cce:	18fb      	adds	r3, r7, r3
   22cd0:	2201      	movs	r2, #1
   22cd2:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   22cd4:	1dfb      	adds	r3, r7, #7
   22cd6:	781b      	ldrb	r3, [r3, #0]
   22cd8:	2bcf      	cmp	r3, #207	; 0xcf
   22cda:	d007      	beq.n	22cec <spi_cmd_rsp+0x2c>
   22cdc:	1dfb      	adds	r3, r7, #7
   22cde:	781b      	ldrb	r3, [r3, #0]
   22ce0:	2bc5      	cmp	r3, #197	; 0xc5
   22ce2:	d003      	beq.n	22cec <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   22ce4:	1dfb      	adds	r3, r7, #7
   22ce6:	781b      	ldrb	r3, [r3, #0]
   22ce8:	2bc6      	cmp	r3, #198	; 0xc6
   22cea:	d10c      	bne.n	22d06 <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   22cec:	230d      	movs	r3, #13
   22cee:	18fb      	adds	r3, r7, r3
   22cf0:	2101      	movs	r1, #1
   22cf2:	0018      	movs	r0, r3
   22cf4:	4b3b      	ldr	r3, [pc, #236]	; (22de4 <spi_cmd_rsp+0x124>)
   22cf6:	4798      	blx	r3
   22cf8:	1e03      	subs	r3, r0, #0
   22cfa:	d004      	beq.n	22d06 <spi_cmd_rsp+0x46>
			result = N_FAIL;
   22cfc:	230f      	movs	r3, #15
   22cfe:	18fb      	adds	r3, r7, r3
   22d00:	2200      	movs	r2, #0
   22d02:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   22d04:	e065      	b.n	22dd2 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   22d06:	230e      	movs	r3, #14
   22d08:	18fb      	adds	r3, r7, r3
   22d0a:	220a      	movs	r2, #10
   22d0c:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   22d0e:	230d      	movs	r3, #13
   22d10:	18fb      	adds	r3, r7, r3
   22d12:	2101      	movs	r1, #1
   22d14:	0018      	movs	r0, r3
   22d16:	4b33      	ldr	r3, [pc, #204]	; (22de4 <spi_cmd_rsp+0x124>)
   22d18:	4798      	blx	r3
   22d1a:	1e03      	subs	r3, r0, #0
   22d1c:	d014      	beq.n	22d48 <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   22d1e:	235c      	movs	r3, #92	; 0x5c
   22d20:	33ff      	adds	r3, #255	; 0xff
   22d22:	001a      	movs	r2, r3
   22d24:	4930      	ldr	r1, [pc, #192]	; (22de8 <spi_cmd_rsp+0x128>)
   22d26:	4b31      	ldr	r3, [pc, #196]	; (22dec <spi_cmd_rsp+0x12c>)
   22d28:	0018      	movs	r0, r3
   22d2a:	4b31      	ldr	r3, [pc, #196]	; (22df0 <spi_cmd_rsp+0x130>)
   22d2c:	4798      	blx	r3
   22d2e:	4b31      	ldr	r3, [pc, #196]	; (22df4 <spi_cmd_rsp+0x134>)
   22d30:	0018      	movs	r0, r3
   22d32:	4b2f      	ldr	r3, [pc, #188]	; (22df0 <spi_cmd_rsp+0x130>)
   22d34:	4798      	blx	r3
   22d36:	4b30      	ldr	r3, [pc, #192]	; (22df8 <spi_cmd_rsp+0x138>)
   22d38:	0018      	movs	r0, r3
   22d3a:	4b2d      	ldr	r3, [pc, #180]	; (22df0 <spi_cmd_rsp+0x130>)
   22d3c:	4798      	blx	r3
			result = N_FAIL;
   22d3e:	230f      	movs	r3, #15
   22d40:	18fb      	adds	r3, r7, r3
   22d42:	2200      	movs	r2, #0
   22d44:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   22d46:	e044      	b.n	22dd2 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   22d48:	230d      	movs	r3, #13
   22d4a:	18fb      	adds	r3, r7, r3
   22d4c:	781b      	ldrb	r3, [r3, #0]
   22d4e:	1dfa      	adds	r2, r7, #7
   22d50:	7812      	ldrb	r2, [r2, #0]
   22d52:	429a      	cmp	r2, r3
   22d54:	d00b      	beq.n	22d6e <spi_cmd_rsp+0xae>
   22d56:	230e      	movs	r3, #14
   22d58:	18fb      	adds	r3, r7, r3
   22d5a:	781b      	ldrb	r3, [r3, #0]
   22d5c:	b25b      	sxtb	r3, r3
   22d5e:	b2da      	uxtb	r2, r3
   22d60:	3a01      	subs	r2, #1
   22d62:	b2d1      	uxtb	r1, r2
   22d64:	220e      	movs	r2, #14
   22d66:	18ba      	adds	r2, r7, r2
   22d68:	7011      	strb	r1, [r2, #0]
   22d6a:	2b00      	cmp	r3, #0
   22d6c:	dccf      	bgt.n	22d0e <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   22d6e:	230e      	movs	r3, #14
   22d70:	18fb      	adds	r3, r7, r3
   22d72:	220a      	movs	r2, #10
   22d74:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   22d76:	230d      	movs	r3, #13
   22d78:	18fb      	adds	r3, r7, r3
   22d7a:	2101      	movs	r1, #1
   22d7c:	0018      	movs	r0, r3
   22d7e:	4b19      	ldr	r3, [pc, #100]	; (22de4 <spi_cmd_rsp+0x124>)
   22d80:	4798      	blx	r3
   22d82:	1e03      	subs	r3, r0, #0
   22d84:	d014      	beq.n	22db0 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   22d86:	236a      	movs	r3, #106	; 0x6a
   22d88:	33ff      	adds	r3, #255	; 0xff
   22d8a:	001a      	movs	r2, r3
   22d8c:	4916      	ldr	r1, [pc, #88]	; (22de8 <spi_cmd_rsp+0x128>)
   22d8e:	4b17      	ldr	r3, [pc, #92]	; (22dec <spi_cmd_rsp+0x12c>)
   22d90:	0018      	movs	r0, r3
   22d92:	4b17      	ldr	r3, [pc, #92]	; (22df0 <spi_cmd_rsp+0x130>)
   22d94:	4798      	blx	r3
   22d96:	4b17      	ldr	r3, [pc, #92]	; (22df4 <spi_cmd_rsp+0x134>)
   22d98:	0018      	movs	r0, r3
   22d9a:	4b15      	ldr	r3, [pc, #84]	; (22df0 <spi_cmd_rsp+0x130>)
   22d9c:	4798      	blx	r3
   22d9e:	4b16      	ldr	r3, [pc, #88]	; (22df8 <spi_cmd_rsp+0x138>)
   22da0:	0018      	movs	r0, r3
   22da2:	4b13      	ldr	r3, [pc, #76]	; (22df0 <spi_cmd_rsp+0x130>)
   22da4:	4798      	blx	r3
			result = N_FAIL;
   22da6:	230f      	movs	r3, #15
   22da8:	18fb      	adds	r3, r7, r3
   22daa:	2200      	movs	r2, #0
   22dac:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   22dae:	e010      	b.n	22dd2 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   22db0:	230d      	movs	r3, #13
   22db2:	18fb      	adds	r3, r7, r3
   22db4:	781b      	ldrb	r3, [r3, #0]
   22db6:	2b00      	cmp	r3, #0
   22db8:	d00b      	beq.n	22dd2 <spi_cmd_rsp+0x112>
   22dba:	230e      	movs	r3, #14
   22dbc:	18fb      	adds	r3, r7, r3
   22dbe:	781b      	ldrb	r3, [r3, #0]
   22dc0:	b25b      	sxtb	r3, r3
   22dc2:	b2da      	uxtb	r2, r3
   22dc4:	3a01      	subs	r2, #1
   22dc6:	b2d1      	uxtb	r1, r2
   22dc8:	220e      	movs	r2, #14
   22dca:	18ba      	adds	r2, r7, r2
   22dcc:	7011      	strb	r1, [r2, #0]
   22dce:	2b00      	cmp	r3, #0
   22dd0:	dcd1      	bgt.n	22d76 <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   22dd2:	230f      	movs	r3, #15
   22dd4:	18fb      	adds	r3, r7, r3
   22dd6:	781b      	ldrb	r3, [r3, #0]
   22dd8:	b25b      	sxtb	r3, r3
}
   22dda:	0018      	movs	r0, r3
   22ddc:	46bd      	mov	sp, r7
   22dde:	b004      	add	sp, #16
   22de0:	bd80      	pop	{r7, pc}
   22de2:	46c0      	nop			; (mov r8, r8)
   22de4:	00022735 	.word	0x00022735
   22de8:	00038a2c 	.word	0x00038a2c
   22dec:	00038424 	.word	0x00038424
   22df0:	0001d2e9 	.word	0x0001d2e9
   22df4:	000384b8 	.word	0x000384b8
   22df8:	00038464 	.word	0x00038464

00022dfc <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   22dfc:	b590      	push	{r4, r7, lr}
   22dfe:	b09f      	sub	sp, #124	; 0x7c
   22e00:	af00      	add	r7, sp, #0
   22e02:	60b9      	str	r1, [r7, #8]
   22e04:	607a      	str	r2, [r7, #4]
   22e06:	603b      	str	r3, [r7, #0]
   22e08:	230f      	movs	r3, #15
   22e0a:	18fb      	adds	r3, r7, r3
   22e0c:	1c02      	adds	r2, r0, #0
   22e0e:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   22e10:	2300      	movs	r3, #0
   22e12:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   22e14:	2301      	movs	r3, #1
   22e16:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   22e18:	2338      	movs	r3, #56	; 0x38
   22e1a:	18fb      	adds	r3, r7, r3
   22e1c:	220f      	movs	r2, #15
   22e1e:	18ba      	adds	r2, r7, r2
   22e20:	7812      	ldrb	r2, [r2, #0]
   22e22:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   22e24:	230f      	movs	r3, #15
   22e26:	18fb      	adds	r3, r7, r3
   22e28:	781b      	ldrb	r3, [r3, #0]
   22e2a:	3bc1      	subs	r3, #193	; 0xc1
   22e2c:	2b0e      	cmp	r3, #14
   22e2e:	d900      	bls.n	22e32 <spi_cmd_complete+0x36>
   22e30:	e103      	b.n	2303a <spi_cmd_complete+0x23e>
   22e32:	009a      	lsls	r2, r3, #2
   22e34:	4bd1      	ldr	r3, [pc, #836]	; (2317c <spi_cmd_complete+0x380>)
   22e36:	18d3      	adds	r3, r2, r3
   22e38:	681b      	ldr	r3, [r3, #0]
   22e3a:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   22e3c:	68bb      	ldr	r3, [r7, #8]
   22e3e:	0c1b      	lsrs	r3, r3, #16
   22e40:	b2da      	uxtb	r2, r3
   22e42:	2338      	movs	r3, #56	; 0x38
   22e44:	18fb      	adds	r3, r7, r3
   22e46:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   22e48:	68bb      	ldr	r3, [r7, #8]
   22e4a:	0a1b      	lsrs	r3, r3, #8
   22e4c:	b2da      	uxtb	r2, r3
   22e4e:	2338      	movs	r3, #56	; 0x38
   22e50:	18fb      	adds	r3, r7, r3
   22e52:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   22e54:	68bb      	ldr	r3, [r7, #8]
   22e56:	b2da      	uxtb	r2, r3
   22e58:	2338      	movs	r3, #56	; 0x38
   22e5a:	18fb      	adds	r3, r7, r3
   22e5c:	70da      	strb	r2, [r3, #3]
		len = 5;
   22e5e:	2305      	movs	r3, #5
   22e60:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   22e62:	e0ed      	b.n	23040 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   22e64:	68bb      	ldr	r3, [r7, #8]
   22e66:	0a1b      	lsrs	r3, r3, #8
   22e68:	b2da      	uxtb	r2, r3
   22e6a:	2338      	movs	r3, #56	; 0x38
   22e6c:	18fb      	adds	r3, r7, r3
   22e6e:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   22e70:	2388      	movs	r3, #136	; 0x88
   22e72:	18fb      	adds	r3, r7, r3
   22e74:	781b      	ldrb	r3, [r3, #0]
   22e76:	2b01      	cmp	r3, #1
   22e78:	d109      	bne.n	22e8e <spi_cmd_complete+0x92>
   22e7a:	2338      	movs	r3, #56	; 0x38
   22e7c:	18fb      	adds	r3, r7, r3
   22e7e:	785b      	ldrb	r3, [r3, #1]
   22e80:	2280      	movs	r2, #128	; 0x80
   22e82:	4252      	negs	r2, r2
   22e84:	4313      	orrs	r3, r2
   22e86:	b2da      	uxtb	r2, r3
   22e88:	2338      	movs	r3, #56	; 0x38
   22e8a:	18fb      	adds	r3, r7, r3
   22e8c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   22e8e:	68bb      	ldr	r3, [r7, #8]
   22e90:	b2da      	uxtb	r2, r3
   22e92:	2338      	movs	r3, #56	; 0x38
   22e94:	18fb      	adds	r3, r7, r3
   22e96:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   22e98:	2338      	movs	r3, #56	; 0x38
   22e9a:	18fb      	adds	r3, r7, r3
   22e9c:	2200      	movs	r2, #0
   22e9e:	70da      	strb	r2, [r3, #3]
		len = 5;
   22ea0:	2305      	movs	r3, #5
   22ea2:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22ea4:	e0cc      	b.n	23040 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   22ea6:	2338      	movs	r3, #56	; 0x38
   22ea8:	18fb      	adds	r3, r7, r3
   22eaa:	2200      	movs	r2, #0
   22eac:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   22eae:	2338      	movs	r3, #56	; 0x38
   22eb0:	18fb      	adds	r3, r7, r3
   22eb2:	2200      	movs	r2, #0
   22eb4:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   22eb6:	2338      	movs	r3, #56	; 0x38
   22eb8:	18fb      	adds	r3, r7, r3
   22eba:	2200      	movs	r2, #0
   22ebc:	70da      	strb	r2, [r3, #3]
		len = 5;
   22ebe:	2305      	movs	r3, #5
   22ec0:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22ec2:	e0bd      	b.n	23040 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   22ec4:	2338      	movs	r3, #56	; 0x38
   22ec6:	18fb      	adds	r3, r7, r3
   22ec8:	2200      	movs	r2, #0
   22eca:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   22ecc:	2338      	movs	r3, #56	; 0x38
   22ece:	18fb      	adds	r3, r7, r3
   22ed0:	2200      	movs	r2, #0
   22ed2:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   22ed4:	2338      	movs	r3, #56	; 0x38
   22ed6:	18fb      	adds	r3, r7, r3
   22ed8:	2200      	movs	r2, #0
   22eda:	70da      	strb	r2, [r3, #3]
		len = 5;
   22edc:	2305      	movs	r3, #5
   22ede:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22ee0:	e0ae      	b.n	23040 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   22ee2:	2338      	movs	r3, #56	; 0x38
   22ee4:	18fb      	adds	r3, r7, r3
   22ee6:	22ff      	movs	r2, #255	; 0xff
   22ee8:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   22eea:	2338      	movs	r3, #56	; 0x38
   22eec:	18fb      	adds	r3, r7, r3
   22eee:	22ff      	movs	r2, #255	; 0xff
   22ef0:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   22ef2:	2338      	movs	r3, #56	; 0x38
   22ef4:	18fb      	adds	r3, r7, r3
   22ef6:	22ff      	movs	r2, #255	; 0xff
   22ef8:	70da      	strb	r2, [r3, #3]
		len = 5;
   22efa:	2305      	movs	r3, #5
   22efc:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22efe:	e09f      	b.n	23040 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   22f00:	68bb      	ldr	r3, [r7, #8]
   22f02:	0c1b      	lsrs	r3, r3, #16
   22f04:	b2da      	uxtb	r2, r3
   22f06:	2338      	movs	r3, #56	; 0x38
   22f08:	18fb      	adds	r3, r7, r3
   22f0a:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   22f0c:	68bb      	ldr	r3, [r7, #8]
   22f0e:	0a1b      	lsrs	r3, r3, #8
   22f10:	b2da      	uxtb	r2, r3
   22f12:	2338      	movs	r3, #56	; 0x38
   22f14:	18fb      	adds	r3, r7, r3
   22f16:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   22f18:	68bb      	ldr	r3, [r7, #8]
   22f1a:	b2da      	uxtb	r2, r3
   22f1c:	2338      	movs	r3, #56	; 0x38
   22f1e:	18fb      	adds	r3, r7, r3
   22f20:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   22f22:	683b      	ldr	r3, [r7, #0]
   22f24:	0a1b      	lsrs	r3, r3, #8
   22f26:	b2da      	uxtb	r2, r3
   22f28:	2338      	movs	r3, #56	; 0x38
   22f2a:	18fb      	adds	r3, r7, r3
   22f2c:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   22f2e:	683b      	ldr	r3, [r7, #0]
   22f30:	b2da      	uxtb	r2, r3
   22f32:	2338      	movs	r3, #56	; 0x38
   22f34:	18fb      	adds	r3, r7, r3
   22f36:	715a      	strb	r2, [r3, #5]
		len = 7;
   22f38:	2307      	movs	r3, #7
   22f3a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22f3c:	e080      	b.n	23040 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   22f3e:	68bb      	ldr	r3, [r7, #8]
   22f40:	0c1b      	lsrs	r3, r3, #16
   22f42:	b2da      	uxtb	r2, r3
   22f44:	2338      	movs	r3, #56	; 0x38
   22f46:	18fb      	adds	r3, r7, r3
   22f48:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   22f4a:	68bb      	ldr	r3, [r7, #8]
   22f4c:	0a1b      	lsrs	r3, r3, #8
   22f4e:	b2da      	uxtb	r2, r3
   22f50:	2338      	movs	r3, #56	; 0x38
   22f52:	18fb      	adds	r3, r7, r3
   22f54:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   22f56:	68bb      	ldr	r3, [r7, #8]
   22f58:	b2da      	uxtb	r2, r3
   22f5a:	2338      	movs	r3, #56	; 0x38
   22f5c:	18fb      	adds	r3, r7, r3
   22f5e:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   22f60:	683b      	ldr	r3, [r7, #0]
   22f62:	0c1b      	lsrs	r3, r3, #16
   22f64:	b2da      	uxtb	r2, r3
   22f66:	2338      	movs	r3, #56	; 0x38
   22f68:	18fb      	adds	r3, r7, r3
   22f6a:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   22f6c:	683b      	ldr	r3, [r7, #0]
   22f6e:	0a1b      	lsrs	r3, r3, #8
   22f70:	b2da      	uxtb	r2, r3
   22f72:	2338      	movs	r3, #56	; 0x38
   22f74:	18fb      	adds	r3, r7, r3
   22f76:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   22f78:	683b      	ldr	r3, [r7, #0]
   22f7a:	b2da      	uxtb	r2, r3
   22f7c:	2338      	movs	r3, #56	; 0x38
   22f7e:	18fb      	adds	r3, r7, r3
   22f80:	719a      	strb	r2, [r3, #6]
		len = 8;
   22f82:	2308      	movs	r3, #8
   22f84:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22f86:	e05b      	b.n	23040 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   22f88:	68bb      	ldr	r3, [r7, #8]
   22f8a:	0a1b      	lsrs	r3, r3, #8
   22f8c:	b2da      	uxtb	r2, r3
   22f8e:	2338      	movs	r3, #56	; 0x38
   22f90:	18fb      	adds	r3, r7, r3
   22f92:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   22f94:	2388      	movs	r3, #136	; 0x88
   22f96:	18fb      	adds	r3, r7, r3
   22f98:	781b      	ldrb	r3, [r3, #0]
   22f9a:	2b01      	cmp	r3, #1
   22f9c:	d109      	bne.n	22fb2 <spi_cmd_complete+0x1b6>
   22f9e:	2338      	movs	r3, #56	; 0x38
   22fa0:	18fb      	adds	r3, r7, r3
   22fa2:	785b      	ldrb	r3, [r3, #1]
   22fa4:	2280      	movs	r2, #128	; 0x80
   22fa6:	4252      	negs	r2, r2
   22fa8:	4313      	orrs	r3, r2
   22faa:	b2da      	uxtb	r2, r3
   22fac:	2338      	movs	r3, #56	; 0x38
   22fae:	18fb      	adds	r3, r7, r3
   22fb0:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   22fb2:	68bb      	ldr	r3, [r7, #8]
   22fb4:	b2da      	uxtb	r2, r3
   22fb6:	2338      	movs	r3, #56	; 0x38
   22fb8:	18fb      	adds	r3, r7, r3
   22fba:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   22fbc:	687b      	ldr	r3, [r7, #4]
   22fbe:	78da      	ldrb	r2, [r3, #3]
   22fc0:	2338      	movs	r3, #56	; 0x38
   22fc2:	18fb      	adds	r3, r7, r3
   22fc4:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   22fc6:	687b      	ldr	r3, [r7, #4]
   22fc8:	789a      	ldrb	r2, [r3, #2]
   22fca:	2338      	movs	r3, #56	; 0x38
   22fcc:	18fb      	adds	r3, r7, r3
   22fce:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   22fd0:	687b      	ldr	r3, [r7, #4]
   22fd2:	785a      	ldrb	r2, [r3, #1]
   22fd4:	2338      	movs	r3, #56	; 0x38
   22fd6:	18fb      	adds	r3, r7, r3
   22fd8:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   22fda:	687b      	ldr	r3, [r7, #4]
   22fdc:	781a      	ldrb	r2, [r3, #0]
   22fde:	2338      	movs	r3, #56	; 0x38
   22fe0:	18fb      	adds	r3, r7, r3
   22fe2:	719a      	strb	r2, [r3, #6]
		len = 8;
   22fe4:	2308      	movs	r3, #8
   22fe6:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22fe8:	e02a      	b.n	23040 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   22fea:	68bb      	ldr	r3, [r7, #8]
   22fec:	0c1b      	lsrs	r3, r3, #16
   22fee:	b2da      	uxtb	r2, r3
   22ff0:	2338      	movs	r3, #56	; 0x38
   22ff2:	18fb      	adds	r3, r7, r3
   22ff4:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   22ff6:	68bb      	ldr	r3, [r7, #8]
   22ff8:	0a1b      	lsrs	r3, r3, #8
   22ffa:	b2da      	uxtb	r2, r3
   22ffc:	2338      	movs	r3, #56	; 0x38
   22ffe:	18fb      	adds	r3, r7, r3
   23000:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   23002:	68bb      	ldr	r3, [r7, #8]
   23004:	b2da      	uxtb	r2, r3
   23006:	2338      	movs	r3, #56	; 0x38
   23008:	18fb      	adds	r3, r7, r3
   2300a:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   2300c:	687b      	ldr	r3, [r7, #4]
   2300e:	78da      	ldrb	r2, [r3, #3]
   23010:	2338      	movs	r3, #56	; 0x38
   23012:	18fb      	adds	r3, r7, r3
   23014:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   23016:	687b      	ldr	r3, [r7, #4]
   23018:	789a      	ldrb	r2, [r3, #2]
   2301a:	2338      	movs	r3, #56	; 0x38
   2301c:	18fb      	adds	r3, r7, r3
   2301e:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   23020:	687b      	ldr	r3, [r7, #4]
   23022:	785a      	ldrb	r2, [r3, #1]
   23024:	2338      	movs	r3, #56	; 0x38
   23026:	18fb      	adds	r3, r7, r3
   23028:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   2302a:	687b      	ldr	r3, [r7, #4]
   2302c:	781a      	ldrb	r2, [r3, #0]
   2302e:	2338      	movs	r3, #56	; 0x38
   23030:	18fb      	adds	r3, r7, r3
   23032:	71da      	strb	r2, [r3, #7]
		len = 9;
   23034:	2309      	movs	r3, #9
   23036:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23038:	e002      	b.n	23040 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   2303a:	2300      	movs	r3, #0
   2303c:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   2303e:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   23040:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23042:	2b01      	cmp	r3, #1
   23044:	d001      	beq.n	2304a <spi_cmd_complete+0x24e>
		return result;
   23046:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23048:	e33a      	b.n	236c0 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   2304a:	4b4d      	ldr	r3, [pc, #308]	; (23180 <spi_cmd_complete+0x384>)
   2304c:	781b      	ldrb	r3, [r3, #0]
   2304e:	2b00      	cmp	r3, #0
   23050:	d111      	bne.n	23076 <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   23052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23054:	1e5c      	subs	r4, r3, #1
   23056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23058:	3b01      	subs	r3, #1
   2305a:	001a      	movs	r2, r3
   2305c:	2338      	movs	r3, #56	; 0x38
   2305e:	18fb      	adds	r3, r7, r3
   23060:	0019      	movs	r1, r3
   23062:	207f      	movs	r0, #127	; 0x7f
   23064:	4b47      	ldr	r3, [pc, #284]	; (23184 <spi_cmd_complete+0x388>)
   23066:	4798      	blx	r3
   23068:	0003      	movs	r3, r0
   2306a:	18db      	adds	r3, r3, r3
   2306c:	b2da      	uxtb	r2, r3
   2306e:	2338      	movs	r3, #56	; 0x38
   23070:	18fb      	adds	r3, r7, r3
   23072:	551a      	strb	r2, [r3, r4]
   23074:	e002      	b.n	2307c <spi_cmd_complete+0x280>
	} else {
		len -=1;
   23076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23078:	3b01      	subs	r3, #1
   2307a:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   2307c:	230f      	movs	r3, #15
   2307e:	18fb      	adds	r3, r7, r3
   23080:	781b      	ldrb	r3, [r3, #0]
   23082:	2bcf      	cmp	r3, #207	; 0xcf
   23084:	d009      	beq.n	2309a <spi_cmd_complete+0x29e>
   23086:	230f      	movs	r3, #15
   23088:	18fb      	adds	r3, r7, r3
   2308a:	781b      	ldrb	r3, [r3, #0]
   2308c:	2bc5      	cmp	r3, #197	; 0xc5
   2308e:	d004      	beq.n	2309a <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   23090:	230f      	movs	r3, #15
   23092:	18fb      	adds	r3, r7, r3
   23094:	781b      	ldrb	r3, [r3, #0]
   23096:	2bc6      	cmp	r3, #198	; 0xc6
   23098:	d103      	bne.n	230a2 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   2309a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2309c:	3306      	adds	r3, #6
   2309e:	673b      	str	r3, [r7, #112]	; 0x70
   230a0:	e018      	b.n	230d4 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   230a2:	230f      	movs	r3, #15
   230a4:	18fb      	adds	r3, r7, r3
   230a6:	781b      	ldrb	r3, [r3, #0]
   230a8:	2bc4      	cmp	r3, #196	; 0xc4
   230aa:	d004      	beq.n	230b6 <spi_cmd_complete+0x2ba>
   230ac:	230f      	movs	r3, #15
   230ae:	18fb      	adds	r3, r7, r3
   230b0:	781b      	ldrb	r3, [r3, #0]
   230b2:	2bca      	cmp	r3, #202	; 0xca
   230b4:	d10b      	bne.n	230ce <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   230b6:	4b32      	ldr	r3, [pc, #200]	; (23180 <spi_cmd_complete+0x384>)
   230b8:	781b      	ldrb	r3, [r3, #0]
   230ba:	2b00      	cmp	r3, #0
   230bc:	d103      	bne.n	230c6 <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   230be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   230c0:	330c      	adds	r3, #12
   230c2:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   230c4:	e006      	b.n	230d4 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   230c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   230c8:	330a      	adds	r3, #10
   230ca:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   230cc:	e002      	b.n	230d4 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   230ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   230d0:	3305      	adds	r3, #5
   230d2:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   230d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   230d6:	2b20      	cmp	r3, #32
   230d8:	d914      	bls.n	23104 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   230da:	23f7      	movs	r3, #247	; 0xf7
   230dc:	005a      	lsls	r2, r3, #1
   230de:	492a      	ldr	r1, [pc, #168]	; (23188 <spi_cmd_complete+0x38c>)
   230e0:	4b2a      	ldr	r3, [pc, #168]	; (2318c <spi_cmd_complete+0x390>)
   230e2:	0018      	movs	r0, r3
   230e4:	4b2a      	ldr	r3, [pc, #168]	; (23190 <spi_cmd_complete+0x394>)
   230e6:	4798      	blx	r3
   230e8:	6f39      	ldr	r1, [r7, #112]	; 0x70
   230ea:	4b2a      	ldr	r3, [pc, #168]	; (23194 <spi_cmd_complete+0x398>)
   230ec:	2220      	movs	r2, #32
   230ee:	0018      	movs	r0, r3
   230f0:	4b27      	ldr	r3, [pc, #156]	; (23190 <spi_cmd_complete+0x394>)
   230f2:	4798      	blx	r3
   230f4:	4b28      	ldr	r3, [pc, #160]	; (23198 <spi_cmd_complete+0x39c>)
   230f6:	0018      	movs	r0, r3
   230f8:	4b25      	ldr	r3, [pc, #148]	; (23190 <spi_cmd_complete+0x394>)
   230fa:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   230fc:	2300      	movs	r3, #0
   230fe:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23100:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23102:	e2dd      	b.n	236c0 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   23104:	2377      	movs	r3, #119	; 0x77
   23106:	18fb      	adds	r3, r7, r3
   23108:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   2310a:	701a      	strb	r2, [r3, #0]
   2310c:	e00d      	b.n	2312a <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   2310e:	2377      	movs	r3, #119	; 0x77
   23110:	18fb      	adds	r3, r7, r3
   23112:	781b      	ldrb	r3, [r3, #0]
   23114:	2238      	movs	r2, #56	; 0x38
   23116:	18ba      	adds	r2, r7, r2
   23118:	2100      	movs	r1, #0
   2311a:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   2311c:	2377      	movs	r3, #119	; 0x77
   2311e:	18fb      	adds	r3, r7, r3
   23120:	781a      	ldrb	r2, [r3, #0]
   23122:	2377      	movs	r3, #119	; 0x77
   23124:	18fb      	adds	r3, r7, r3
   23126:	3201      	adds	r2, #1
   23128:	701a      	strb	r2, [r3, #0]
   2312a:	2377      	movs	r3, #119	; 0x77
   2312c:	18fb      	adds	r3, r7, r3
   2312e:	781a      	ldrb	r2, [r3, #0]
   23130:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23132:	429a      	cmp	r2, r3
   23134:	d3eb      	bcc.n	2310e <spi_cmd_complete+0x312>
	}
	rix = len;
   23136:	2376      	movs	r3, #118	; 0x76
   23138:	18fb      	adds	r3, r7, r3
   2313a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   2313c:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   2313e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23140:	b29a      	uxth	r2, r3
   23142:	2318      	movs	r3, #24
   23144:	18f9      	adds	r1, r7, r3
   23146:	2338      	movs	r3, #56	; 0x38
   23148:	18fb      	adds	r3, r7, r3
   2314a:	0018      	movs	r0, r3
   2314c:	4b13      	ldr	r3, [pc, #76]	; (2319c <spi_cmd_complete+0x3a0>)
   2314e:	4798      	blx	r3
   23150:	1e03      	subs	r3, r0, #0
   23152:	d027      	beq.n	231a4 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   23154:	23fa      	movs	r3, #250	; 0xfa
   23156:	33ff      	adds	r3, #255	; 0xff
   23158:	001a      	movs	r2, r3
   2315a:	490b      	ldr	r1, [pc, #44]	; (23188 <spi_cmd_complete+0x38c>)
   2315c:	4b0b      	ldr	r3, [pc, #44]	; (2318c <spi_cmd_complete+0x390>)
   2315e:	0018      	movs	r0, r3
   23160:	4b0b      	ldr	r3, [pc, #44]	; (23190 <spi_cmd_complete+0x394>)
   23162:	4798      	blx	r3
   23164:	4b0e      	ldr	r3, [pc, #56]	; (231a0 <spi_cmd_complete+0x3a4>)
   23166:	0018      	movs	r0, r3
   23168:	4b09      	ldr	r3, [pc, #36]	; (23190 <spi_cmd_complete+0x394>)
   2316a:	4798      	blx	r3
   2316c:	4b0a      	ldr	r3, [pc, #40]	; (23198 <spi_cmd_complete+0x39c>)
   2316e:	0018      	movs	r0, r3
   23170:	4b07      	ldr	r3, [pc, #28]	; (23190 <spi_cmd_complete+0x394>)
   23172:	4798      	blx	r3
		result = N_FAIL;
   23174:	2300      	movs	r3, #0
   23176:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23178:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2317a:	e2a1      	b.n	236c0 <spi_cmd_complete+0x8c4>
   2317c:	000389d8 	.word	0x000389d8
   23180:	20004114 	.word	0x20004114
   23184:	00022831 	.word	0x00022831
   23188:	00038a38 	.word	0x00038a38
   2318c:	00038424 	.word	0x00038424
   23190:	0001d2e9 	.word	0x0001d2e9
   23194:	000384ec 	.word	0x000384ec
   23198:	00038464 	.word	0x00038464
   2319c:	000227bd 	.word	0x000227bd
   231a0:	00038438 	.word	0x00038438
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   231a4:	230f      	movs	r3, #15
   231a6:	18fb      	adds	r3, r7, r3
   231a8:	781b      	ldrb	r3, [r3, #0]
   231aa:	2bcf      	cmp	r3, #207	; 0xcf
   231ac:	d009      	beq.n	231c2 <spi_cmd_complete+0x3c6>
   231ae:	230f      	movs	r3, #15
   231b0:	18fb      	adds	r3, r7, r3
   231b2:	781b      	ldrb	r3, [r3, #0]
   231b4:	2bc5      	cmp	r3, #197	; 0xc5
   231b6:	d004      	beq.n	231c2 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   231b8:	230f      	movs	r3, #15
   231ba:	18fb      	adds	r3, r7, r3
   231bc:	781b      	ldrb	r3, [r3, #0]
   231be:	2bc6      	cmp	r3, #198	; 0xc6
   231c0:	d106      	bne.n	231d0 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   231c2:	2376      	movs	r3, #118	; 0x76
   231c4:	18fb      	adds	r3, r7, r3
   231c6:	781a      	ldrb	r2, [r3, #0]
   231c8:	2376      	movs	r3, #118	; 0x76
   231ca:	18fb      	adds	r3, r7, r3
   231cc:	3201      	adds	r2, #1
   231ce:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   231d0:	2376      	movs	r3, #118	; 0x76
   231d2:	18fb      	adds	r3, r7, r3
   231d4:	781b      	ldrb	r3, [r3, #0]
   231d6:	2276      	movs	r2, #118	; 0x76
   231d8:	18ba      	adds	r2, r7, r2
   231da:	1c59      	adds	r1, r3, #1
   231dc:	7011      	strb	r1, [r2, #0]
   231de:	001a      	movs	r2, r3
   231e0:	2318      	movs	r3, #24
   231e2:	18fb      	adds	r3, r7, r3
   231e4:	5c9a      	ldrb	r2, [r3, r2]
   231e6:	2317      	movs	r3, #23
   231e8:	18fb      	adds	r3, r7, r3
   231ea:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   231ec:	2317      	movs	r3, #23
   231ee:	18fb      	adds	r3, r7, r3
   231f0:	781b      	ldrb	r3, [r3, #0]
   231f2:	220f      	movs	r2, #15
   231f4:	18ba      	adds	r2, r7, r2
   231f6:	7812      	ldrb	r2, [r2, #0]
   231f8:	429a      	cmp	r2, r3
   231fa:	d018      	beq.n	2322e <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   231fc:	4add      	ldr	r2, [pc, #884]	; (23574 <spi_cmd_complete+0x778>)
   231fe:	49de      	ldr	r1, [pc, #888]	; (23578 <spi_cmd_complete+0x77c>)
   23200:	4bde      	ldr	r3, [pc, #888]	; (2357c <spi_cmd_complete+0x780>)
   23202:	0018      	movs	r0, r3
   23204:	4bde      	ldr	r3, [pc, #888]	; (23580 <spi_cmd_complete+0x784>)
   23206:	4798      	blx	r3
   23208:	230f      	movs	r3, #15
   2320a:	18fb      	adds	r3, r7, r3
   2320c:	7819      	ldrb	r1, [r3, #0]
   2320e:	2317      	movs	r3, #23
   23210:	18fb      	adds	r3, r7, r3
   23212:	781b      	ldrb	r3, [r3, #0]
   23214:	001a      	movs	r2, r3
   23216:	4bdb      	ldr	r3, [pc, #876]	; (23584 <spi_cmd_complete+0x788>)
   23218:	0018      	movs	r0, r3
   2321a:	4bd9      	ldr	r3, [pc, #868]	; (23580 <spi_cmd_complete+0x784>)
   2321c:	4798      	blx	r3
   2321e:	4bda      	ldr	r3, [pc, #872]	; (23588 <spi_cmd_complete+0x78c>)
   23220:	0018      	movs	r0, r3
   23222:	4bd7      	ldr	r3, [pc, #860]	; (23580 <spi_cmd_complete+0x784>)
   23224:	4798      	blx	r3
		result = N_FAIL;
   23226:	2300      	movs	r3, #0
   23228:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   2322a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2322c:	e248      	b.n	236c0 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   2322e:	2376      	movs	r3, #118	; 0x76
   23230:	18fb      	adds	r3, r7, r3
   23232:	781b      	ldrb	r3, [r3, #0]
   23234:	2276      	movs	r2, #118	; 0x76
   23236:	18ba      	adds	r2, r7, r2
   23238:	1c59      	adds	r1, r3, #1
   2323a:	7011      	strb	r1, [r2, #0]
   2323c:	001a      	movs	r2, r3
   2323e:	2318      	movs	r3, #24
   23240:	18fb      	adds	r3, r7, r3
   23242:	5c9a      	ldrb	r2, [r3, r2]
   23244:	2317      	movs	r3, #23
   23246:	18fb      	adds	r3, r7, r3
   23248:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   2324a:	2317      	movs	r3, #23
   2324c:	18fb      	adds	r3, r7, r3
   2324e:	781b      	ldrb	r3, [r3, #0]
   23250:	2b00      	cmp	r3, #0
   23252:	d016      	beq.n	23282 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   23254:	4acd      	ldr	r2, [pc, #820]	; (2358c <spi_cmd_complete+0x790>)
   23256:	49c8      	ldr	r1, [pc, #800]	; (23578 <spi_cmd_complete+0x77c>)
   23258:	4bc8      	ldr	r3, [pc, #800]	; (2357c <spi_cmd_complete+0x780>)
   2325a:	0018      	movs	r0, r3
   2325c:	4bc8      	ldr	r3, [pc, #800]	; (23580 <spi_cmd_complete+0x784>)
   2325e:	4798      	blx	r3
   23260:	2317      	movs	r3, #23
   23262:	18fb      	adds	r3, r7, r3
   23264:	781b      	ldrb	r3, [r3, #0]
   23266:	001a      	movs	r2, r3
   23268:	4bc9      	ldr	r3, [pc, #804]	; (23590 <spi_cmd_complete+0x794>)
   2326a:	0011      	movs	r1, r2
   2326c:	0018      	movs	r0, r3
   2326e:	4bc4      	ldr	r3, [pc, #784]	; (23580 <spi_cmd_complete+0x784>)
   23270:	4798      	blx	r3
   23272:	4bc5      	ldr	r3, [pc, #788]	; (23588 <spi_cmd_complete+0x78c>)
   23274:	0018      	movs	r0, r3
   23276:	4bc2      	ldr	r3, [pc, #776]	; (23580 <spi_cmd_complete+0x784>)
   23278:	4798      	blx	r3
		result = N_FAIL;
   2327a:	2300      	movs	r3, #0
   2327c:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   2327e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23280:	e21e      	b.n	236c0 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   23282:	230f      	movs	r3, #15
   23284:	18fb      	adds	r3, r7, r3
   23286:	781b      	ldrb	r3, [r3, #0]
   23288:	2bc4      	cmp	r3, #196	; 0xc4
   2328a:	d00f      	beq.n	232ac <spi_cmd_complete+0x4b0>
   2328c:	230f      	movs	r3, #15
   2328e:	18fb      	adds	r3, r7, r3
   23290:	781b      	ldrb	r3, [r3, #0]
   23292:	2bca      	cmp	r3, #202	; 0xca
   23294:	d00a      	beq.n	232ac <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   23296:	230f      	movs	r3, #15
   23298:	18fb      	adds	r3, r7, r3
   2329a:	781b      	ldrb	r3, [r3, #0]
   2329c:	2bc2      	cmp	r3, #194	; 0xc2
   2329e:	d005      	beq.n	232ac <spi_cmd_complete+0x4b0>
   232a0:	230f      	movs	r3, #15
   232a2:	18fb      	adds	r3, r7, r3
   232a4:	781b      	ldrb	r3, [r3, #0]
   232a6:	2bc8      	cmp	r3, #200	; 0xc8
   232a8:	d000      	beq.n	232ac <spi_cmd_complete+0x4b0>
   232aa:	e208      	b.n	236be <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   232ac:	230a      	movs	r3, #10
   232ae:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   232b0:	2376      	movs	r3, #118	; 0x76
   232b2:	18fb      	adds	r3, r7, r3
   232b4:	781a      	ldrb	r2, [r3, #0]
   232b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   232b8:	429a      	cmp	r2, r3
   232ba:	d218      	bcs.n	232ee <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   232bc:	2376      	movs	r3, #118	; 0x76
   232be:	18fb      	adds	r3, r7, r3
   232c0:	781b      	ldrb	r3, [r3, #0]
   232c2:	2276      	movs	r2, #118	; 0x76
   232c4:	18ba      	adds	r2, r7, r2
   232c6:	1c59      	adds	r1, r3, #1
   232c8:	7011      	strb	r1, [r2, #0]
   232ca:	001a      	movs	r2, r3
   232cc:	2318      	movs	r3, #24
   232ce:	18fb      	adds	r3, r7, r3
   232d0:	5c9a      	ldrb	r2, [r3, r2]
   232d2:	2317      	movs	r3, #23
   232d4:	18fb      	adds	r3, r7, r3
   232d6:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   232d8:	2317      	movs	r3, #23
   232da:	18fb      	adds	r3, r7, r3
   232dc:	781b      	ldrb	r3, [r3, #0]
   232de:	091b      	lsrs	r3, r3, #4
   232e0:	b2db      	uxtb	r3, r3
   232e2:	001a      	movs	r2, r3
   232e4:	230f      	movs	r3, #15
   232e6:	4013      	ands	r3, r2
   232e8:	2b0f      	cmp	r3, #15
   232ea:	d103      	bne.n	232f4 <spi_cmd_complete+0x4f8>
					break;
   232ec:	e007      	b.n	232fe <spi_cmd_complete+0x502>
					retry = 0;
   232ee:	2300      	movs	r3, #0
   232f0:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   232f2:	e004      	b.n	232fe <spi_cmd_complete+0x502>
			} while (retry--);
   232f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   232f6:	1e5a      	subs	r2, r3, #1
   232f8:	667a      	str	r2, [r7, #100]	; 0x64
   232fa:	2b00      	cmp	r3, #0
   232fc:	d1d8      	bne.n	232b0 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   232fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   23300:	2b00      	cmp	r3, #0
   23302:	dc18      	bgt.n	23336 <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   23304:	2395      	movs	r3, #149	; 0x95
   23306:	009a      	lsls	r2, r3, #2
   23308:	499b      	ldr	r1, [pc, #620]	; (23578 <spi_cmd_complete+0x77c>)
   2330a:	4b9c      	ldr	r3, [pc, #624]	; (2357c <spi_cmd_complete+0x780>)
   2330c:	0018      	movs	r0, r3
   2330e:	4b9c      	ldr	r3, [pc, #624]	; (23580 <spi_cmd_complete+0x784>)
   23310:	4798      	blx	r3
   23312:	2317      	movs	r3, #23
   23314:	18fb      	adds	r3, r7, r3
   23316:	781b      	ldrb	r3, [r3, #0]
   23318:	001a      	movs	r2, r3
   2331a:	4b9e      	ldr	r3, [pc, #632]	; (23594 <spi_cmd_complete+0x798>)
   2331c:	0011      	movs	r1, r2
   2331e:	0018      	movs	r0, r3
   23320:	4b97      	ldr	r3, [pc, #604]	; (23580 <spi_cmd_complete+0x784>)
   23322:	4798      	blx	r3
   23324:	4b98      	ldr	r3, [pc, #608]	; (23588 <spi_cmd_complete+0x78c>)
   23326:	0018      	movs	r0, r3
   23328:	4b95      	ldr	r3, [pc, #596]	; (23580 <spi_cmd_complete+0x784>)
   2332a:	4798      	blx	r3
				result = N_RESET;
   2332c:	2301      	movs	r3, #1
   2332e:	425b      	negs	r3, r3
   23330:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   23332:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23334:	e1c4      	b.n	236c0 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   23336:	230f      	movs	r3, #15
   23338:	18fb      	adds	r3, r7, r3
   2333a:	781b      	ldrb	r3, [r3, #0]
   2333c:	2bc4      	cmp	r3, #196	; 0xc4
   2333e:	d005      	beq.n	2334c <spi_cmd_complete+0x550>
   23340:	230f      	movs	r3, #15
   23342:	18fb      	adds	r3, r7, r3
   23344:	781b      	ldrb	r3, [r3, #0]
   23346:	2bca      	cmp	r3, #202	; 0xca
   23348:	d000      	beq.n	2334c <spi_cmd_complete+0x550>
   2334a:	e08e      	b.n	2346a <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   2334c:	2376      	movs	r3, #118	; 0x76
   2334e:	18fb      	adds	r3, r7, r3
   23350:	781b      	ldrb	r3, [r3, #0]
   23352:	3303      	adds	r3, #3
   23354:	001a      	movs	r2, r3
   23356:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23358:	429a      	cmp	r2, r3
   2335a:	d23c      	bcs.n	233d6 <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   2335c:	2376      	movs	r3, #118	; 0x76
   2335e:	18fb      	adds	r3, r7, r3
   23360:	781b      	ldrb	r3, [r3, #0]
   23362:	2276      	movs	r2, #118	; 0x76
   23364:	18ba      	adds	r2, r7, r2
   23366:	1c59      	adds	r1, r3, #1
   23368:	7011      	strb	r1, [r2, #0]
   2336a:	001a      	movs	r2, r3
   2336c:	2318      	movs	r3, #24
   2336e:	18fb      	adds	r3, r7, r3
   23370:	5c9a      	ldrb	r2, [r3, r2]
   23372:	687b      	ldr	r3, [r7, #4]
   23374:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   23376:	687b      	ldr	r3, [r7, #4]
   23378:	1c5a      	adds	r2, r3, #1
   2337a:	2376      	movs	r3, #118	; 0x76
   2337c:	18fb      	adds	r3, r7, r3
   2337e:	781b      	ldrb	r3, [r3, #0]
   23380:	2176      	movs	r1, #118	; 0x76
   23382:	1879      	adds	r1, r7, r1
   23384:	1c58      	adds	r0, r3, #1
   23386:	7008      	strb	r0, [r1, #0]
   23388:	0019      	movs	r1, r3
   2338a:	2318      	movs	r3, #24
   2338c:	18fb      	adds	r3, r7, r3
   2338e:	5c5b      	ldrb	r3, [r3, r1]
   23390:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   23392:	687b      	ldr	r3, [r7, #4]
   23394:	1c9a      	adds	r2, r3, #2
   23396:	2376      	movs	r3, #118	; 0x76
   23398:	18fb      	adds	r3, r7, r3
   2339a:	781b      	ldrb	r3, [r3, #0]
   2339c:	2176      	movs	r1, #118	; 0x76
   2339e:	1879      	adds	r1, r7, r1
   233a0:	1c58      	adds	r0, r3, #1
   233a2:	7008      	strb	r0, [r1, #0]
   233a4:	0019      	movs	r1, r3
   233a6:	2318      	movs	r3, #24
   233a8:	18fb      	adds	r3, r7, r3
   233aa:	5c5b      	ldrb	r3, [r3, r1]
   233ac:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   233ae:	687b      	ldr	r3, [r7, #4]
   233b0:	1cda      	adds	r2, r3, #3
   233b2:	2376      	movs	r3, #118	; 0x76
   233b4:	18fb      	adds	r3, r7, r3
   233b6:	781b      	ldrb	r3, [r3, #0]
   233b8:	2176      	movs	r1, #118	; 0x76
   233ba:	1879      	adds	r1, r7, r1
   233bc:	1c58      	adds	r0, r3, #1
   233be:	7008      	strb	r0, [r1, #0]
   233c0:	0019      	movs	r1, r3
   233c2:	2318      	movs	r3, #24
   233c4:	18fb      	adds	r3, r7, r3
   233c6:	5c5b      	ldrb	r3, [r3, r1]
   233c8:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   233ca:	4b73      	ldr	r3, [pc, #460]	; (23598 <spi_cmd_complete+0x79c>)
   233cc:	781b      	ldrb	r3, [r3, #0]
   233ce:	2b00      	cmp	r3, #0
   233d0:	d000      	beq.n	233d4 <spi_cmd_complete+0x5d8>
   233d2:	e174      	b.n	236be <spi_cmd_complete+0x8c2>
   233d4:	e011      	b.n	233fa <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   233d6:	4a71      	ldr	r2, [pc, #452]	; (2359c <spi_cmd_complete+0x7a0>)
   233d8:	4967      	ldr	r1, [pc, #412]	; (23578 <spi_cmd_complete+0x77c>)
   233da:	4b68      	ldr	r3, [pc, #416]	; (2357c <spi_cmd_complete+0x780>)
   233dc:	0018      	movs	r0, r3
   233de:	4b68      	ldr	r3, [pc, #416]	; (23580 <spi_cmd_complete+0x784>)
   233e0:	4798      	blx	r3
   233e2:	4b6f      	ldr	r3, [pc, #444]	; (235a0 <spi_cmd_complete+0x7a4>)
   233e4:	0018      	movs	r0, r3
   233e6:	4b66      	ldr	r3, [pc, #408]	; (23580 <spi_cmd_complete+0x784>)
   233e8:	4798      	blx	r3
   233ea:	4b67      	ldr	r3, [pc, #412]	; (23588 <spi_cmd_complete+0x78c>)
   233ec:	0018      	movs	r0, r3
   233ee:	4b64      	ldr	r3, [pc, #400]	; (23580 <spi_cmd_complete+0x784>)
   233f0:	4798      	blx	r3
					result = N_FAIL;
   233f2:	2300      	movs	r3, #0
   233f4:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   233f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   233f8:	e162      	b.n	236c0 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   233fa:	2376      	movs	r3, #118	; 0x76
   233fc:	18fb      	adds	r3, r7, r3
   233fe:	781b      	ldrb	r3, [r3, #0]
   23400:	3301      	adds	r3, #1
   23402:	001a      	movs	r2, r3
   23404:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23406:	429a      	cmp	r2, r3
   23408:	d21c      	bcs.n	23444 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   2340a:	2376      	movs	r3, #118	; 0x76
   2340c:	18fb      	adds	r3, r7, r3
   2340e:	781b      	ldrb	r3, [r3, #0]
   23410:	2276      	movs	r2, #118	; 0x76
   23412:	18ba      	adds	r2, r7, r2
   23414:	1c59      	adds	r1, r3, #1
   23416:	7011      	strb	r1, [r2, #0]
   23418:	001a      	movs	r2, r3
   2341a:	2318      	movs	r3, #24
   2341c:	18fb      	adds	r3, r7, r3
   2341e:	5c9a      	ldrb	r2, [r3, r2]
   23420:	2314      	movs	r3, #20
   23422:	18fb      	adds	r3, r7, r3
   23424:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   23426:	2376      	movs	r3, #118	; 0x76
   23428:	18fb      	adds	r3, r7, r3
   2342a:	781b      	ldrb	r3, [r3, #0]
   2342c:	2276      	movs	r2, #118	; 0x76
   2342e:	18ba      	adds	r2, r7, r2
   23430:	1c59      	adds	r1, r3, #1
   23432:	7011      	strb	r1, [r2, #0]
   23434:	001a      	movs	r2, r3
   23436:	2318      	movs	r3, #24
   23438:	18fb      	adds	r3, r7, r3
   2343a:	5c9a      	ldrb	r2, [r3, r2]
   2343c:	2314      	movs	r3, #20
   2343e:	18fb      	adds	r3, r7, r3
   23440:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   23442:	e13c      	b.n	236be <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   23444:	239c      	movs	r3, #156	; 0x9c
   23446:	009a      	lsls	r2, r3, #2
   23448:	494b      	ldr	r1, [pc, #300]	; (23578 <spi_cmd_complete+0x77c>)
   2344a:	4b4c      	ldr	r3, [pc, #304]	; (2357c <spi_cmd_complete+0x780>)
   2344c:	0018      	movs	r0, r3
   2344e:	4b4c      	ldr	r3, [pc, #304]	; (23580 <spi_cmd_complete+0x784>)
   23450:	4798      	blx	r3
   23452:	4b54      	ldr	r3, [pc, #336]	; (235a4 <spi_cmd_complete+0x7a8>)
   23454:	0018      	movs	r0, r3
   23456:	4b4a      	ldr	r3, [pc, #296]	; (23580 <spi_cmd_complete+0x784>)
   23458:	4798      	blx	r3
   2345a:	4b4b      	ldr	r3, [pc, #300]	; (23588 <spi_cmd_complete+0x78c>)
   2345c:	0018      	movs	r0, r3
   2345e:	4b48      	ldr	r3, [pc, #288]	; (23580 <spi_cmd_complete+0x784>)
   23460:	4798      	blx	r3
						result = N_FAIL;
   23462:	2300      	movs	r3, #0
   23464:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   23466:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23468:	e12a      	b.n	236c0 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   2346a:	230f      	movs	r3, #15
   2346c:	18fb      	adds	r3, r7, r3
   2346e:	781b      	ldrb	r3, [r3, #0]
   23470:	2bc2      	cmp	r3, #194	; 0xc2
   23472:	d005      	beq.n	23480 <spi_cmd_complete+0x684>
   23474:	230f      	movs	r3, #15
   23476:	18fb      	adds	r3, r7, r3
   23478:	781b      	ldrb	r3, [r3, #0]
   2347a:	2bc8      	cmp	r3, #200	; 0xc8
   2347c:	d000      	beq.n	23480 <spi_cmd_complete+0x684>
   2347e:	e11e      	b.n	236be <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   23480:	2300      	movs	r3, #0
   23482:	663b      	str	r3, [r7, #96]	; 0x60
   23484:	e011      	b.n	234aa <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   23486:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23488:	1c5a      	adds	r2, r3, #1
   2348a:	663a      	str	r2, [r7, #96]	; 0x60
   2348c:	001a      	movs	r2, r3
   2348e:	687b      	ldr	r3, [r7, #4]
   23490:	189a      	adds	r2, r3, r2
   23492:	2376      	movs	r3, #118	; 0x76
   23494:	18fb      	adds	r3, r7, r3
   23496:	781b      	ldrb	r3, [r3, #0]
   23498:	2176      	movs	r1, #118	; 0x76
   2349a:	1879      	adds	r1, r7, r1
   2349c:	1c58      	adds	r0, r3, #1
   2349e:	7008      	strb	r0, [r1, #0]
   234a0:	0019      	movs	r1, r3
   234a2:	2318      	movs	r3, #24
   234a4:	18fb      	adds	r3, r7, r3
   234a6:	5c5b      	ldrb	r3, [r3, r1]
   234a8:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   234aa:	2376      	movs	r3, #118	; 0x76
   234ac:	18fb      	adds	r3, r7, r3
   234ae:	781a      	ldrb	r2, [r3, #0]
   234b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   234b2:	429a      	cmp	r2, r3
   234b4:	d203      	bcs.n	234be <spi_cmd_complete+0x6c2>
   234b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   234b8:	683b      	ldr	r3, [r7, #0]
   234ba:	429a      	cmp	r2, r3
   234bc:	d3e3      	bcc.n	23486 <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   234be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   234c0:	683a      	ldr	r2, [r7, #0]
   234c2:	1ad3      	subs	r3, r2, r3
   234c4:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   234c6:	683b      	ldr	r3, [r7, #0]
   234c8:	2b00      	cmp	r3, #0
   234ca:	d100      	bne.n	234ce <spi_cmd_complete+0x6d2>
   234cc:	e0f1      	b.n	236b2 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   234ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   234d0:	2280      	movs	r2, #128	; 0x80
   234d2:	0192      	lsls	r2, r2, #6
   234d4:	1ad3      	subs	r3, r2, r3
   234d6:	001a      	movs	r2, r3
   234d8:	683b      	ldr	r3, [r7, #0]
   234da:	429a      	cmp	r2, r3
   234dc:	d302      	bcc.n	234e4 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   234de:	683b      	ldr	r3, [r7, #0]
   234e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   234e2:	e004      	b.n	234ee <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   234e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   234e6:	2280      	movs	r2, #128	; 0x80
   234e8:	0192      	lsls	r2, r2, #6
   234ea:	1ad3      	subs	r3, r2, r3
   234ec:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   234ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   234f0:	687a      	ldr	r2, [r7, #4]
   234f2:	18d3      	adds	r3, r2, r3
   234f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   234f6:	b292      	uxth	r2, r2
   234f8:	0011      	movs	r1, r2
   234fa:	0018      	movs	r0, r3
   234fc:	4b2a      	ldr	r3, [pc, #168]	; (235a8 <spi_cmd_complete+0x7ac>)
   234fe:	4798      	blx	r3
   23500:	1e03      	subs	r3, r0, #0
   23502:	d010      	beq.n	23526 <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   23504:	4a29      	ldr	r2, [pc, #164]	; (235ac <spi_cmd_complete+0x7b0>)
   23506:	491c      	ldr	r1, [pc, #112]	; (23578 <spi_cmd_complete+0x77c>)
   23508:	4b1c      	ldr	r3, [pc, #112]	; (2357c <spi_cmd_complete+0x780>)
   2350a:	0018      	movs	r0, r3
   2350c:	4b1c      	ldr	r3, [pc, #112]	; (23580 <spi_cmd_complete+0x784>)
   2350e:	4798      	blx	r3
   23510:	4b27      	ldr	r3, [pc, #156]	; (235b0 <spi_cmd_complete+0x7b4>)
   23512:	0018      	movs	r0, r3
   23514:	4b1a      	ldr	r3, [pc, #104]	; (23580 <spi_cmd_complete+0x784>)
   23516:	4798      	blx	r3
   23518:	4b1b      	ldr	r3, [pc, #108]	; (23588 <spi_cmd_complete+0x78c>)
   2351a:	0018      	movs	r0, r3
   2351c:	4b18      	ldr	r3, [pc, #96]	; (23580 <spi_cmd_complete+0x784>)
   2351e:	4798      	blx	r3
						result = N_FAIL;
   23520:	2300      	movs	r3, #0
   23522:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   23524:	e0cb      	b.n	236be <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   23526:	4b1c      	ldr	r3, [pc, #112]	; (23598 <spi_cmd_complete+0x79c>)
   23528:	781b      	ldrb	r3, [r3, #0]
   2352a:	2b00      	cmp	r3, #0
   2352c:	d119      	bne.n	23562 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   2352e:	2314      	movs	r3, #20
   23530:	18fb      	adds	r3, r7, r3
   23532:	2102      	movs	r1, #2
   23534:	0018      	movs	r0, r3
   23536:	4b1c      	ldr	r3, [pc, #112]	; (235a8 <spi_cmd_complete+0x7ac>)
   23538:	4798      	blx	r3
   2353a:	1e03      	subs	r3, r0, #0
   2353c:	d011      	beq.n	23562 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   2353e:	23a6      	movs	r3, #166	; 0xa6
   23540:	009a      	lsls	r2, r3, #2
   23542:	490d      	ldr	r1, [pc, #52]	; (23578 <spi_cmd_complete+0x77c>)
   23544:	4b0d      	ldr	r3, [pc, #52]	; (2357c <spi_cmd_complete+0x780>)
   23546:	0018      	movs	r0, r3
   23548:	4b0d      	ldr	r3, [pc, #52]	; (23580 <spi_cmd_complete+0x784>)
   2354a:	4798      	blx	r3
   2354c:	4b19      	ldr	r3, [pc, #100]	; (235b4 <spi_cmd_complete+0x7b8>)
   2354e:	0018      	movs	r0, r3
   23550:	4b0b      	ldr	r3, [pc, #44]	; (23580 <spi_cmd_complete+0x784>)
   23552:	4798      	blx	r3
   23554:	4b0c      	ldr	r3, [pc, #48]	; (23588 <spi_cmd_complete+0x78c>)
   23556:	0018      	movs	r0, r3
   23558:	4b09      	ldr	r3, [pc, #36]	; (23580 <spi_cmd_complete+0x784>)
   2355a:	4798      	blx	r3
							result = N_FAIL;
   2355c:	2300      	movs	r3, #0
   2355e:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   23560:	e0ad      	b.n	236be <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   23562:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   23566:	18d3      	adds	r3, r2, r3
   23568:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   2356a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   2356c:	683a      	ldr	r2, [r7, #0]
   2356e:	1ad3      	subs	r3, r2, r3
   23570:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   23572:	e09e      	b.n	236b2 <spi_cmd_complete+0x8b6>
   23574:	0000022f 	.word	0x0000022f
   23578:	00038a38 	.word	0x00038a38
   2357c:	00038424 	.word	0x00038424
   23580:	0001d2e9 	.word	0x0001d2e9
   23584:	0003851c 	.word	0x0003851c
   23588:	00038464 	.word	0x00038464
   2358c:	00000239 	.word	0x00000239
   23590:	00038558 	.word	0x00038558
   23594:	0003858c 	.word	0x0003858c
   23598:	20004114 	.word	0x20004114
   2359c:	00000263 	.word	0x00000263
   235a0:	000385bc 	.word	0x000385bc
   235a4:	000385ec 	.word	0x000385ec
   235a8:	00022735 	.word	0x00022735
   235ac:	0000028e 	.word	0x0000028e
   235b0:	0003861c 	.word	0x0003861c
   235b4:	00038650 	.word	0x00038650
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   235b8:	683a      	ldr	r2, [r7, #0]
   235ba:	2380      	movs	r3, #128	; 0x80
   235bc:	019b      	lsls	r3, r3, #6
   235be:	429a      	cmp	r2, r3
   235c0:	d802      	bhi.n	235c8 <spi_cmd_complete+0x7cc>
						nbytes = sz;
   235c2:	683b      	ldr	r3, [r7, #0]
   235c4:	65bb      	str	r3, [r7, #88]	; 0x58
   235c6:	e002      	b.n	235ce <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   235c8:	2380      	movs	r3, #128	; 0x80
   235ca:	019b      	lsls	r3, r3, #6
   235cc:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   235ce:	230a      	movs	r3, #10
   235d0:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   235d2:	2317      	movs	r3, #23
   235d4:	18fb      	adds	r3, r7, r3
   235d6:	2101      	movs	r1, #1
   235d8:	0018      	movs	r0, r3
   235da:	4b3b      	ldr	r3, [pc, #236]	; (236c8 <spi_cmd_complete+0x8cc>)
   235dc:	4798      	blx	r3
   235de:	1e03      	subs	r3, r0, #0
   235e0:	d011      	beq.n	23606 <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   235e2:	23ae      	movs	r3, #174	; 0xae
   235e4:	009a      	lsls	r2, r3, #2
   235e6:	4939      	ldr	r1, [pc, #228]	; (236cc <spi_cmd_complete+0x8d0>)
   235e8:	4b39      	ldr	r3, [pc, #228]	; (236d0 <spi_cmd_complete+0x8d4>)
   235ea:	0018      	movs	r0, r3
   235ec:	4b39      	ldr	r3, [pc, #228]	; (236d4 <spi_cmd_complete+0x8d8>)
   235ee:	4798      	blx	r3
   235f0:	4b39      	ldr	r3, [pc, #228]	; (236d8 <spi_cmd_complete+0x8dc>)
   235f2:	0018      	movs	r0, r3
   235f4:	4b37      	ldr	r3, [pc, #220]	; (236d4 <spi_cmd_complete+0x8d8>)
   235f6:	4798      	blx	r3
   235f8:	4b38      	ldr	r3, [pc, #224]	; (236dc <spi_cmd_complete+0x8e0>)
   235fa:	0018      	movs	r0, r3
   235fc:	4b35      	ldr	r3, [pc, #212]	; (236d4 <spi_cmd_complete+0x8d8>)
   235fe:	4798      	blx	r3
							result = N_FAIL;
   23600:	2300      	movs	r3, #0
   23602:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   23604:	e010      	b.n	23628 <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   23606:	2317      	movs	r3, #23
   23608:	18fb      	adds	r3, r7, r3
   2360a:	781b      	ldrb	r3, [r3, #0]
   2360c:	091b      	lsrs	r3, r3, #4
   2360e:	b2db      	uxtb	r3, r3
   23610:	001a      	movs	r2, r3
   23612:	230f      	movs	r3, #15
   23614:	4013      	ands	r3, r2
   23616:	2b0f      	cmp	r3, #15
   23618:	d005      	beq.n	23626 <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   2361a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2361c:	1e5a      	subs	r2, r3, #1
   2361e:	667a      	str	r2, [r7, #100]	; 0x64
   23620:	2b00      	cmp	r3, #0
   23622:	d1d6      	bne.n	235d2 <spi_cmd_complete+0x7d6>
   23624:	e000      	b.n	23628 <spi_cmd_complete+0x82c>
							break;
   23626:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   23628:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2362a:	2b00      	cmp	r3, #0
   2362c:	d046      	beq.n	236bc <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   2362e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23630:	687a      	ldr	r2, [r7, #4]
   23632:	18d3      	adds	r3, r2, r3
   23634:	6dba      	ldr	r2, [r7, #88]	; 0x58
   23636:	b292      	uxth	r2, r2
   23638:	0011      	movs	r1, r2
   2363a:	0018      	movs	r0, r3
   2363c:	4b22      	ldr	r3, [pc, #136]	; (236c8 <spi_cmd_complete+0x8cc>)
   2363e:	4798      	blx	r3
   23640:	1e03      	subs	r3, r0, #0
   23642:	d011      	beq.n	23668 <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   23644:	23b2      	movs	r3, #178	; 0xb2
   23646:	009a      	lsls	r2, r3, #2
   23648:	4920      	ldr	r1, [pc, #128]	; (236cc <spi_cmd_complete+0x8d0>)
   2364a:	4b21      	ldr	r3, [pc, #132]	; (236d0 <spi_cmd_complete+0x8d4>)
   2364c:	0018      	movs	r0, r3
   2364e:	4b21      	ldr	r3, [pc, #132]	; (236d4 <spi_cmd_complete+0x8d8>)
   23650:	4798      	blx	r3
   23652:	4b23      	ldr	r3, [pc, #140]	; (236e0 <spi_cmd_complete+0x8e4>)
   23654:	0018      	movs	r0, r3
   23656:	4b1f      	ldr	r3, [pc, #124]	; (236d4 <spi_cmd_complete+0x8d8>)
   23658:	4798      	blx	r3
   2365a:	4b20      	ldr	r3, [pc, #128]	; (236dc <spi_cmd_complete+0x8e0>)
   2365c:	0018      	movs	r0, r3
   2365e:	4b1d      	ldr	r3, [pc, #116]	; (236d4 <spi_cmd_complete+0x8d8>)
   23660:	4798      	blx	r3
						result = N_FAIL;
   23662:	2300      	movs	r3, #0
   23664:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   23666:	e02a      	b.n	236be <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   23668:	4b1e      	ldr	r3, [pc, #120]	; (236e4 <spi_cmd_complete+0x8e8>)
   2366a:	781b      	ldrb	r3, [r3, #0]
   2366c:	2b00      	cmp	r3, #0
   2366e:	d118      	bne.n	236a2 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   23670:	2314      	movs	r3, #20
   23672:	18fb      	adds	r3, r7, r3
   23674:	2102      	movs	r1, #2
   23676:	0018      	movs	r0, r3
   23678:	4b13      	ldr	r3, [pc, #76]	; (236c8 <spi_cmd_complete+0x8cc>)
   2367a:	4798      	blx	r3
   2367c:	1e03      	subs	r3, r0, #0
   2367e:	d010      	beq.n	236a2 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   23680:	4a19      	ldr	r2, [pc, #100]	; (236e8 <spi_cmd_complete+0x8ec>)
   23682:	4912      	ldr	r1, [pc, #72]	; (236cc <spi_cmd_complete+0x8d0>)
   23684:	4b12      	ldr	r3, [pc, #72]	; (236d0 <spi_cmd_complete+0x8d4>)
   23686:	0018      	movs	r0, r3
   23688:	4b12      	ldr	r3, [pc, #72]	; (236d4 <spi_cmd_complete+0x8d8>)
   2368a:	4798      	blx	r3
   2368c:	4b17      	ldr	r3, [pc, #92]	; (236ec <spi_cmd_complete+0x8f0>)
   2368e:	0018      	movs	r0, r3
   23690:	4b10      	ldr	r3, [pc, #64]	; (236d4 <spi_cmd_complete+0x8d8>)
   23692:	4798      	blx	r3
   23694:	4b11      	ldr	r3, [pc, #68]	; (236dc <spi_cmd_complete+0x8e0>)
   23696:	0018      	movs	r0, r3
   23698:	4b0e      	ldr	r3, [pc, #56]	; (236d4 <spi_cmd_complete+0x8d8>)
   2369a:	4798      	blx	r3
							result = N_FAIL;
   2369c:	2300      	movs	r3, #0
   2369e:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   236a0:	e00d      	b.n	236be <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   236a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   236a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   236a6:	18d3      	adds	r3, r2, r3
   236a8:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   236aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   236ac:	683a      	ldr	r2, [r7, #0]
   236ae:	1ad3      	subs	r3, r2, r3
   236b0:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   236b2:	683b      	ldr	r3, [r7, #0]
   236b4:	2b00      	cmp	r3, #0
   236b6:	d000      	beq.n	236ba <spi_cmd_complete+0x8be>
   236b8:	e77e      	b.n	235b8 <spi_cmd_complete+0x7bc>
   236ba:	e000      	b.n	236be <spi_cmd_complete+0x8c2>
						break;
   236bc:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   236be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   236c0:	0018      	movs	r0, r3
   236c2:	46bd      	mov	sp, r7
   236c4:	b01f      	add	sp, #124	; 0x7c
   236c6:	bd90      	pop	{r4, r7, pc}
   236c8:	00022735 	.word	0x00022735
   236cc:	00038a38 	.word	0x00038a38
   236d0:	00038424 	.word	0x00038424
   236d4:	0001d2e9 	.word	0x0001d2e9
   236d8:	00038688 	.word	0x00038688
   236dc:	00038464 	.word	0x00038464
   236e0:	0003861c 	.word	0x0003861c
   236e4:	20004114 	.word	0x20004114
   236e8:	000002d2 	.word	0x000002d2
   236ec:	00038650 	.word	0x00038650

000236f0 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   236f0:	b580      	push	{r7, lr}
   236f2:	b086      	sub	sp, #24
   236f4:	af00      	add	r7, sp, #0
   236f6:	6078      	str	r0, [r7, #4]
   236f8:	000a      	movs	r2, r1
   236fa:	1cbb      	adds	r3, r7, #2
   236fc:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   236fe:	2313      	movs	r3, #19
   23700:	18fb      	adds	r3, r7, r3
   23702:	2201      	movs	r2, #1
   23704:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   23706:	230c      	movs	r3, #12
   23708:	18fb      	adds	r3, r7, r3
   2370a:	2200      	movs	r2, #0
   2370c:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   2370e:	2316      	movs	r3, #22
   23710:	18fb      	adds	r3, r7, r3
   23712:	2200      	movs	r2, #0
   23714:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   23716:	1cbb      	adds	r3, r7, #2
   23718:	881a      	ldrh	r2, [r3, #0]
   2371a:	2380      	movs	r3, #128	; 0x80
   2371c:	019b      	lsls	r3, r3, #6
   2371e:	429a      	cmp	r2, r3
   23720:	d805      	bhi.n	2372e <spi_data_write+0x3e>
			nbytes = sz;
   23722:	2314      	movs	r3, #20
   23724:	18fb      	adds	r3, r7, r3
   23726:	1cba      	adds	r2, r7, #2
   23728:	8812      	ldrh	r2, [r2, #0]
   2372a:	801a      	strh	r2, [r3, #0]
   2372c:	e004      	b.n	23738 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   2372e:	2314      	movs	r3, #20
   23730:	18fb      	adds	r3, r7, r3
   23732:	2280      	movs	r2, #128	; 0x80
   23734:	0192      	lsls	r2, r2, #6
   23736:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   23738:	2311      	movs	r3, #17
   2373a:	18fb      	adds	r3, r7, r3
   2373c:	22f0      	movs	r2, #240	; 0xf0
   2373e:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   23740:	2316      	movs	r3, #22
   23742:	18fb      	adds	r3, r7, r3
   23744:	2200      	movs	r2, #0
   23746:	5e9b      	ldrsh	r3, [r3, r2]
   23748:	2b00      	cmp	r3, #0
   2374a:	d10f      	bne.n	2376c <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   2374c:	1cbb      	adds	r3, r7, #2
   2374e:	881a      	ldrh	r2, [r3, #0]
   23750:	2380      	movs	r3, #128	; 0x80
   23752:	019b      	lsls	r3, r3, #6
   23754:	429a      	cmp	r2, r3
   23756:	d804      	bhi.n	23762 <spi_data_write+0x72>
				order = 0x3;
   23758:	2312      	movs	r3, #18
   2375a:	18fb      	adds	r3, r7, r3
   2375c:	2203      	movs	r2, #3
   2375e:	701a      	strb	r2, [r3, #0]
   23760:	e013      	b.n	2378a <spi_data_write+0x9a>
			else
				order = 0x1;
   23762:	2312      	movs	r3, #18
   23764:	18fb      	adds	r3, r7, r3
   23766:	2201      	movs	r2, #1
   23768:	701a      	strb	r2, [r3, #0]
   2376a:	e00e      	b.n	2378a <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   2376c:	1cbb      	adds	r3, r7, #2
   2376e:	881a      	ldrh	r2, [r3, #0]
   23770:	2380      	movs	r3, #128	; 0x80
   23772:	019b      	lsls	r3, r3, #6
   23774:	429a      	cmp	r2, r3
   23776:	d804      	bhi.n	23782 <spi_data_write+0x92>
				order = 0x3;
   23778:	2312      	movs	r3, #18
   2377a:	18fb      	adds	r3, r7, r3
   2377c:	2203      	movs	r2, #3
   2377e:	701a      	strb	r2, [r3, #0]
   23780:	e003      	b.n	2378a <spi_data_write+0x9a>
			else
				order = 0x2;
   23782:	2312      	movs	r3, #18
   23784:	18fb      	adds	r3, r7, r3
   23786:	2202      	movs	r2, #2
   23788:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   2378a:	2311      	movs	r3, #17
   2378c:	18fb      	adds	r3, r7, r3
   2378e:	781a      	ldrb	r2, [r3, #0]
   23790:	2312      	movs	r3, #18
   23792:	18fb      	adds	r3, r7, r3
   23794:	781b      	ldrb	r3, [r3, #0]
   23796:	4313      	orrs	r3, r2
   23798:	b2da      	uxtb	r2, r3
   2379a:	2311      	movs	r3, #17
   2379c:	18fb      	adds	r3, r7, r3
   2379e:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   237a0:	2311      	movs	r3, #17
   237a2:	18fb      	adds	r3, r7, r3
   237a4:	2101      	movs	r1, #1
   237a6:	0018      	movs	r0, r3
   237a8:	4b3c      	ldr	r3, [pc, #240]	; (2389c <spi_data_write+0x1ac>)
   237aa:	4798      	blx	r3
   237ac:	1e03      	subs	r3, r0, #0
   237ae:	d012      	beq.n	237d6 <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   237b0:	4a3b      	ldr	r2, [pc, #236]	; (238a0 <spi_data_write+0x1b0>)
   237b2:	493c      	ldr	r1, [pc, #240]	; (238a4 <spi_data_write+0x1b4>)
   237b4:	4b3c      	ldr	r3, [pc, #240]	; (238a8 <spi_data_write+0x1b8>)
   237b6:	0018      	movs	r0, r3
   237b8:	4b3c      	ldr	r3, [pc, #240]	; (238ac <spi_data_write+0x1bc>)
   237ba:	4798      	blx	r3
   237bc:	4b3c      	ldr	r3, [pc, #240]	; (238b0 <spi_data_write+0x1c0>)
   237be:	0018      	movs	r0, r3
   237c0:	4b3a      	ldr	r3, [pc, #232]	; (238ac <spi_data_write+0x1bc>)
   237c2:	4798      	blx	r3
   237c4:	4b3b      	ldr	r3, [pc, #236]	; (238b4 <spi_data_write+0x1c4>)
   237c6:	0018      	movs	r0, r3
   237c8:	4b38      	ldr	r3, [pc, #224]	; (238ac <spi_data_write+0x1bc>)
   237ca:	4798      	blx	r3
			result = N_FAIL;
   237cc:	2313      	movs	r3, #19
   237ce:	18fb      	adds	r3, r7, r3
   237d0:	2200      	movs	r2, #0
   237d2:	701a      	strb	r2, [r3, #0]
			break;
   237d4:	e059      	b.n	2388a <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   237d6:	2316      	movs	r3, #22
   237d8:	18fb      	adds	r3, r7, r3
   237da:	2200      	movs	r2, #0
   237dc:	5e9b      	ldrsh	r3, [r3, r2]
   237de:	687a      	ldr	r2, [r7, #4]
   237e0:	18d2      	adds	r2, r2, r3
   237e2:	2314      	movs	r3, #20
   237e4:	18fb      	adds	r3, r7, r3
   237e6:	881b      	ldrh	r3, [r3, #0]
   237e8:	0019      	movs	r1, r3
   237ea:	0010      	movs	r0, r2
   237ec:	4b2b      	ldr	r3, [pc, #172]	; (2389c <spi_data_write+0x1ac>)
   237ee:	4798      	blx	r3
   237f0:	1e03      	subs	r3, r0, #0
   237f2:	d012      	beq.n	2381a <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   237f4:	4a30      	ldr	r2, [pc, #192]	; (238b8 <spi_data_write+0x1c8>)
   237f6:	492b      	ldr	r1, [pc, #172]	; (238a4 <spi_data_write+0x1b4>)
   237f8:	4b2b      	ldr	r3, [pc, #172]	; (238a8 <spi_data_write+0x1b8>)
   237fa:	0018      	movs	r0, r3
   237fc:	4b2b      	ldr	r3, [pc, #172]	; (238ac <spi_data_write+0x1bc>)
   237fe:	4798      	blx	r3
   23800:	4b2e      	ldr	r3, [pc, #184]	; (238bc <spi_data_write+0x1cc>)
   23802:	0018      	movs	r0, r3
   23804:	4b29      	ldr	r3, [pc, #164]	; (238ac <spi_data_write+0x1bc>)
   23806:	4798      	blx	r3
   23808:	4b2a      	ldr	r3, [pc, #168]	; (238b4 <spi_data_write+0x1c4>)
   2380a:	0018      	movs	r0, r3
   2380c:	4b27      	ldr	r3, [pc, #156]	; (238ac <spi_data_write+0x1bc>)
   2380e:	4798      	blx	r3
			result = N_FAIL;
   23810:	2313      	movs	r3, #19
   23812:	18fb      	adds	r3, r7, r3
   23814:	2200      	movs	r2, #0
   23816:	701a      	strb	r2, [r3, #0]
			break;
   23818:	e037      	b.n	2388a <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   2381a:	4b29      	ldr	r3, [pc, #164]	; (238c0 <spi_data_write+0x1d0>)
   2381c:	781b      	ldrb	r3, [r3, #0]
   2381e:	2b00      	cmp	r3, #0
   23820:	d11b      	bne.n	2385a <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   23822:	230c      	movs	r3, #12
   23824:	18fb      	adds	r3, r7, r3
   23826:	2102      	movs	r1, #2
   23828:	0018      	movs	r0, r3
   2382a:	4b1c      	ldr	r3, [pc, #112]	; (2389c <spi_data_write+0x1ac>)
   2382c:	4798      	blx	r3
   2382e:	1e03      	subs	r3, r0, #0
   23830:	d013      	beq.n	2385a <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   23832:	23d7      	movs	r3, #215	; 0xd7
   23834:	009a      	lsls	r2, r3, #2
   23836:	491b      	ldr	r1, [pc, #108]	; (238a4 <spi_data_write+0x1b4>)
   23838:	4b1b      	ldr	r3, [pc, #108]	; (238a8 <spi_data_write+0x1b8>)
   2383a:	0018      	movs	r0, r3
   2383c:	4b1b      	ldr	r3, [pc, #108]	; (238ac <spi_data_write+0x1bc>)
   2383e:	4798      	blx	r3
   23840:	4b20      	ldr	r3, [pc, #128]	; (238c4 <spi_data_write+0x1d4>)
   23842:	0018      	movs	r0, r3
   23844:	4b19      	ldr	r3, [pc, #100]	; (238ac <spi_data_write+0x1bc>)
   23846:	4798      	blx	r3
   23848:	4b1a      	ldr	r3, [pc, #104]	; (238b4 <spi_data_write+0x1c4>)
   2384a:	0018      	movs	r0, r3
   2384c:	4b17      	ldr	r3, [pc, #92]	; (238ac <spi_data_write+0x1bc>)
   2384e:	4798      	blx	r3
				result = N_FAIL;
   23850:	2313      	movs	r3, #19
   23852:	18fb      	adds	r3, r7, r3
   23854:	2200      	movs	r2, #0
   23856:	701a      	strb	r2, [r3, #0]
				break;
   23858:	e017      	b.n	2388a <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   2385a:	2316      	movs	r3, #22
   2385c:	18fb      	adds	r3, r7, r3
   2385e:	881a      	ldrh	r2, [r3, #0]
   23860:	2314      	movs	r3, #20
   23862:	18fb      	adds	r3, r7, r3
   23864:	881b      	ldrh	r3, [r3, #0]
   23866:	18d3      	adds	r3, r2, r3
   23868:	b29a      	uxth	r2, r3
   2386a:	2316      	movs	r3, #22
   2386c:	18fb      	adds	r3, r7, r3
   2386e:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   23870:	1cbb      	adds	r3, r7, #2
   23872:	1cb9      	adds	r1, r7, #2
   23874:	2214      	movs	r2, #20
   23876:	18ba      	adds	r2, r7, r2
   23878:	8809      	ldrh	r1, [r1, #0]
   2387a:	8812      	ldrh	r2, [r2, #0]
   2387c:	1a8a      	subs	r2, r1, r2
   2387e:	801a      	strh	r2, [r3, #0]
	} while (sz);
   23880:	1cbb      	adds	r3, r7, #2
   23882:	881b      	ldrh	r3, [r3, #0]
   23884:	2b00      	cmp	r3, #0
   23886:	d000      	beq.n	2388a <spi_data_write+0x19a>
   23888:	e745      	b.n	23716 <spi_data_write+0x26>


	return result;
   2388a:	2313      	movs	r3, #19
   2388c:	18fb      	adds	r3, r7, r3
   2388e:	781b      	ldrb	r3, [r3, #0]
   23890:	b25b      	sxtb	r3, r3
}
   23892:	0018      	movs	r0, r3
   23894:	46bd      	mov	sp, r7
   23896:	b006      	add	sp, #24
   23898:	bd80      	pop	{r7, pc}
   2389a:	46c0      	nop			; (mov r8, r8)
   2389c:	00022779 	.word	0x00022779
   238a0:	00000349 	.word	0x00000349
   238a4:	00038a4c 	.word	0x00038a4c
   238a8:	00038424 	.word	0x00038424
   238ac:	0001d2e9 	.word	0x0001d2e9
   238b0:	000386ec 	.word	0x000386ec
   238b4:	00038464 	.word	0x00038464
   238b8:	00000352 	.word	0x00000352
   238bc:	00038724 	.word	0x00038724
   238c0:	20004114 	.word	0x20004114
   238c4:	00038758 	.word	0x00038758

000238c8 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   238c8:	b590      	push	{r4, r7, lr}
   238ca:	b087      	sub	sp, #28
   238cc:	af02      	add	r7, sp, #8
   238ce:	6078      	str	r0, [r7, #4]
   238d0:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   238d2:	230f      	movs	r3, #15
   238d4:	18fb      	adds	r3, r7, r3
   238d6:	220a      	movs	r2, #10
   238d8:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   238da:	230c      	movs	r3, #12
   238dc:	18fb      	adds	r3, r7, r3
   238de:	2201      	movs	r2, #1
   238e0:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   238e2:	230e      	movs	r3, #14
   238e4:	18fb      	adds	r3, r7, r3
   238e6:	22c9      	movs	r2, #201	; 0xc9
   238e8:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   238ea:	230d      	movs	r3, #13
   238ec:	18fb      	adds	r3, r7, r3
   238ee:	2200      	movs	r2, #0
   238f0:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   238f2:	687b      	ldr	r3, [r7, #4]
   238f4:	2b30      	cmp	r3, #48	; 0x30
   238f6:	d808      	bhi.n	2390a <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   238f8:	230e      	movs	r3, #14
   238fa:	18fb      	adds	r3, r7, r3
   238fc:	22c3      	movs	r2, #195	; 0xc3
   238fe:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   23900:	230d      	movs	r3, #13
   23902:	18fb      	adds	r3, r7, r3
   23904:	2201      	movs	r2, #1
   23906:	701a      	strb	r2, [r3, #0]
   23908:	e007      	b.n	2391a <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   2390a:	230e      	movs	r3, #14
   2390c:	18fb      	adds	r3, r7, r3
   2390e:	22c9      	movs	r2, #201	; 0xc9
   23910:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   23912:	230d      	movs	r3, #13
   23914:	18fb      	adds	r3, r7, r3
   23916:	2200      	movs	r2, #0
   23918:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   2391a:	003a      	movs	r2, r7
   2391c:	6879      	ldr	r1, [r7, #4]
   2391e:	230e      	movs	r3, #14
   23920:	18fb      	adds	r3, r7, r3
   23922:	7818      	ldrb	r0, [r3, #0]
   23924:	230d      	movs	r3, #13
   23926:	18fb      	adds	r3, r7, r3
   23928:	781b      	ldrb	r3, [r3, #0]
   2392a:	9300      	str	r3, [sp, #0]
   2392c:	2304      	movs	r3, #4
   2392e:	4c2e      	ldr	r4, [pc, #184]	; (239e8 <spi_write_reg+0x120>)
   23930:	47a0      	blx	r4
   23932:	0002      	movs	r2, r0
   23934:	230c      	movs	r3, #12
   23936:	18fb      	adds	r3, r7, r3
   23938:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2393a:	230c      	movs	r3, #12
   2393c:	18fb      	adds	r3, r7, r3
   2393e:	781b      	ldrb	r3, [r3, #0]
   23940:	b25b      	sxtb	r3, r3
   23942:	2b01      	cmp	r3, #1
   23944:	d010      	beq.n	23968 <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   23946:	4a29      	ldr	r2, [pc, #164]	; (239ec <spi_write_reg+0x124>)
   23948:	4929      	ldr	r1, [pc, #164]	; (239f0 <spi_write_reg+0x128>)
   2394a:	4b2a      	ldr	r3, [pc, #168]	; (239f4 <spi_write_reg+0x12c>)
   2394c:	0018      	movs	r0, r3
   2394e:	4b2a      	ldr	r3, [pc, #168]	; (239f8 <spi_write_reg+0x130>)
   23950:	4798      	blx	r3
   23952:	687a      	ldr	r2, [r7, #4]
   23954:	4b29      	ldr	r3, [pc, #164]	; (239fc <spi_write_reg+0x134>)
   23956:	0011      	movs	r1, r2
   23958:	0018      	movs	r0, r3
   2395a:	4b27      	ldr	r3, [pc, #156]	; (239f8 <spi_write_reg+0x130>)
   2395c:	4798      	blx	r3
   2395e:	4b28      	ldr	r3, [pc, #160]	; (23a00 <spi_write_reg+0x138>)
   23960:	0018      	movs	r0, r3
   23962:	4b25      	ldr	r3, [pc, #148]	; (239f8 <spi_write_reg+0x130>)
   23964:	4798      	blx	r3
		goto _FAIL_;
   23966:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   23968:	230c      	movs	r3, #12
   2396a:	18fb      	adds	r3, r7, r3
   2396c:	781b      	ldrb	r3, [r3, #0]
   2396e:	b25b      	sxtb	r3, r3
   23970:	2b01      	cmp	r3, #1
   23972:	d030      	beq.n	239d6 <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   23974:	2001      	movs	r0, #1
   23976:	4b23      	ldr	r3, [pc, #140]	; (23a04 <spi_write_reg+0x13c>)
   23978:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   2397a:	2300      	movs	r3, #0
   2397c:	9300      	str	r3, [sp, #0]
   2397e:	2300      	movs	r3, #0
   23980:	2200      	movs	r2, #0
   23982:	2100      	movs	r1, #0
   23984:	20cf      	movs	r0, #207	; 0xcf
   23986:	4c20      	ldr	r4, [pc, #128]	; (23a08 <spi_write_reg+0x140>)
   23988:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   2398a:	20cf      	movs	r0, #207	; 0xcf
   2398c:	4b1f      	ldr	r3, [pc, #124]	; (23a0c <spi_write_reg+0x144>)
   2398e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   23990:	23ea      	movs	r3, #234	; 0xea
   23992:	009a      	lsls	r2, r3, #2
   23994:	4916      	ldr	r1, [pc, #88]	; (239f0 <spi_write_reg+0x128>)
   23996:	4b17      	ldr	r3, [pc, #92]	; (239f4 <spi_write_reg+0x12c>)
   23998:	0018      	movs	r0, r3
   2399a:	4b17      	ldr	r3, [pc, #92]	; (239f8 <spi_write_reg+0x130>)
   2399c:	4798      	blx	r3
   2399e:	230f      	movs	r3, #15
   239a0:	18fb      	adds	r3, r7, r3
   239a2:	7819      	ldrb	r1, [r3, #0]
   239a4:	683b      	ldr	r3, [r7, #0]
   239a6:	687a      	ldr	r2, [r7, #4]
   239a8:	4819      	ldr	r0, [pc, #100]	; (23a10 <spi_write_reg+0x148>)
   239aa:	4c13      	ldr	r4, [pc, #76]	; (239f8 <spi_write_reg+0x130>)
   239ac:	47a0      	blx	r4
   239ae:	4b14      	ldr	r3, [pc, #80]	; (23a00 <spi_write_reg+0x138>)
   239b0:	0018      	movs	r0, r3
   239b2:	4b11      	ldr	r3, [pc, #68]	; (239f8 <spi_write_reg+0x130>)
   239b4:	4798      	blx	r3
		nm_bsp_sleep(1);
   239b6:	2001      	movs	r0, #1
   239b8:	4b12      	ldr	r3, [pc, #72]	; (23a04 <spi_write_reg+0x13c>)
   239ba:	4798      	blx	r3
		retry--;
   239bc:	230f      	movs	r3, #15
   239be:	18fb      	adds	r3, r7, r3
   239c0:	781a      	ldrb	r2, [r3, #0]
   239c2:	230f      	movs	r3, #15
   239c4:	18fb      	adds	r3, r7, r3
   239c6:	3a01      	subs	r2, #1
   239c8:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   239ca:	230f      	movs	r3, #15
   239cc:	18fb      	adds	r3, r7, r3
   239ce:	781b      	ldrb	r3, [r3, #0]
   239d0:	2b00      	cmp	r3, #0
   239d2:	d000      	beq.n	239d6 <spi_write_reg+0x10e>
   239d4:	e78d      	b.n	238f2 <spi_write_reg+0x2a>
	}

	return result;
   239d6:	230c      	movs	r3, #12
   239d8:	18fb      	adds	r3, r7, r3
   239da:	781b      	ldrb	r3, [r3, #0]
   239dc:	b25b      	sxtb	r3, r3
}
   239de:	0018      	movs	r0, r3
   239e0:	46bd      	mov	sp, r7
   239e2:	b005      	add	sp, #20
   239e4:	bd90      	pop	{r4, r7, pc}
   239e6:	46c0      	nop			; (mov r8, r8)
   239e8:	00022dfd 	.word	0x00022dfd
   239ec:	0000039d 	.word	0x0000039d
   239f0:	00038a5c 	.word	0x00038a5c
   239f4:	00038424 	.word	0x00038424
   239f8:	0001d2e9 	.word	0x0001d2e9
   239fc:	00038790 	.word	0x00038790
   23a00:	00038464 	.word	0x00038464
   23a04:	0001f73d 	.word	0x0001f73d
   23a08:	00022881 	.word	0x00022881
   23a0c:	00022cc1 	.word	0x00022cc1
   23a10:	000387bc 	.word	0x000387bc

00023a14 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   23a14:	b590      	push	{r4, r7, lr}
   23a16:	b089      	sub	sp, #36	; 0x24
   23a18:	af02      	add	r7, sp, #8
   23a1a:	60f8      	str	r0, [r7, #12]
   23a1c:	60b9      	str	r1, [r7, #8]
   23a1e:	1dbb      	adds	r3, r7, #6
   23a20:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   23a22:	2316      	movs	r3, #22
   23a24:	18fb      	adds	r3, r7, r3
   23a26:	220a      	movs	r2, #10
   23a28:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   23a2a:	2315      	movs	r3, #21
   23a2c:	18fb      	adds	r3, r7, r3
   23a2e:	22c7      	movs	r2, #199	; 0xc7
   23a30:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   23a32:	1dbb      	adds	r3, r7, #6
   23a34:	881a      	ldrh	r2, [r3, #0]
   23a36:	68f9      	ldr	r1, [r7, #12]
   23a38:	2315      	movs	r3, #21
   23a3a:	18fb      	adds	r3, r7, r3
   23a3c:	7818      	ldrb	r0, [r3, #0]
   23a3e:	2300      	movs	r3, #0
   23a40:	9300      	str	r3, [sp, #0]
   23a42:	0013      	movs	r3, r2
   23a44:	2200      	movs	r2, #0
   23a46:	4c4d      	ldr	r4, [pc, #308]	; (23b7c <nm_spi_write+0x168>)
   23a48:	47a0      	blx	r4
   23a4a:	0002      	movs	r2, r0
   23a4c:	2317      	movs	r3, #23
   23a4e:	18fb      	adds	r3, r7, r3
   23a50:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   23a52:	2317      	movs	r3, #23
   23a54:	18fb      	adds	r3, r7, r3
   23a56:	781b      	ldrb	r3, [r3, #0]
   23a58:	b25b      	sxtb	r3, r3
   23a5a:	2b01      	cmp	r3, #1
   23a5c:	d010      	beq.n	23a80 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   23a5e:	4a48      	ldr	r2, [pc, #288]	; (23b80 <nm_spi_write+0x16c>)
   23a60:	4948      	ldr	r1, [pc, #288]	; (23b84 <nm_spi_write+0x170>)
   23a62:	4b49      	ldr	r3, [pc, #292]	; (23b88 <nm_spi_write+0x174>)
   23a64:	0018      	movs	r0, r3
   23a66:	4b49      	ldr	r3, [pc, #292]	; (23b8c <nm_spi_write+0x178>)
   23a68:	4798      	blx	r3
   23a6a:	68fa      	ldr	r2, [r7, #12]
   23a6c:	4b48      	ldr	r3, [pc, #288]	; (23b90 <nm_spi_write+0x17c>)
   23a6e:	0011      	movs	r1, r2
   23a70:	0018      	movs	r0, r3
   23a72:	4b46      	ldr	r3, [pc, #280]	; (23b8c <nm_spi_write+0x178>)
   23a74:	4798      	blx	r3
   23a76:	4b47      	ldr	r3, [pc, #284]	; (23b94 <nm_spi_write+0x180>)
   23a78:	0018      	movs	r0, r3
   23a7a:	4b44      	ldr	r3, [pc, #272]	; (23b8c <nm_spi_write+0x178>)
   23a7c:	4798      	blx	r3
		goto _FAIL_;
   23a7e:	e03e      	b.n	23afe <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   23a80:	2317      	movs	r3, #23
   23a82:	18fc      	adds	r4, r7, r3
   23a84:	1dbb      	adds	r3, r7, #6
   23a86:	881a      	ldrh	r2, [r3, #0]
   23a88:	68bb      	ldr	r3, [r7, #8]
   23a8a:	0011      	movs	r1, r2
   23a8c:	0018      	movs	r0, r3
   23a8e:	4b42      	ldr	r3, [pc, #264]	; (23b98 <nm_spi_write+0x184>)
   23a90:	4798      	blx	r3
   23a92:	0003      	movs	r3, r0
   23a94:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   23a96:	2317      	movs	r3, #23
   23a98:	18fb      	adds	r3, r7, r3
   23a9a:	781b      	ldrb	r3, [r3, #0]
   23a9c:	b25b      	sxtb	r3, r3
   23a9e:	2b01      	cmp	r3, #1
   23aa0:	d00e      	beq.n	23ac0 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   23aa2:	4a3e      	ldr	r2, [pc, #248]	; (23b9c <nm_spi_write+0x188>)
   23aa4:	4937      	ldr	r1, [pc, #220]	; (23b84 <nm_spi_write+0x170>)
   23aa6:	4b38      	ldr	r3, [pc, #224]	; (23b88 <nm_spi_write+0x174>)
   23aa8:	0018      	movs	r0, r3
   23aaa:	4b38      	ldr	r3, [pc, #224]	; (23b8c <nm_spi_write+0x178>)
   23aac:	4798      	blx	r3
   23aae:	4b3c      	ldr	r3, [pc, #240]	; (23ba0 <nm_spi_write+0x18c>)
   23ab0:	0018      	movs	r0, r3
   23ab2:	4b36      	ldr	r3, [pc, #216]	; (23b8c <nm_spi_write+0x178>)
   23ab4:	4798      	blx	r3
   23ab6:	4b37      	ldr	r3, [pc, #220]	; (23b94 <nm_spi_write+0x180>)
   23ab8:	0018      	movs	r0, r3
   23aba:	4b34      	ldr	r3, [pc, #208]	; (23b8c <nm_spi_write+0x178>)
   23abc:	4798      	blx	r3
		goto _FAIL_;
   23abe:	e01e      	b.n	23afe <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   23ac0:	2317      	movs	r3, #23
   23ac2:	18fc      	adds	r4, r7, r3
   23ac4:	2315      	movs	r3, #21
   23ac6:	18fb      	adds	r3, r7, r3
   23ac8:	781b      	ldrb	r3, [r3, #0]
   23aca:	0018      	movs	r0, r3
   23acc:	4b35      	ldr	r3, [pc, #212]	; (23ba4 <nm_spi_write+0x190>)
   23ace:	4798      	blx	r3
   23ad0:	0003      	movs	r3, r0
   23ad2:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   23ad4:	2317      	movs	r3, #23
   23ad6:	18fb      	adds	r3, r7, r3
   23ad8:	781b      	ldrb	r3, [r3, #0]
   23ada:	b25b      	sxtb	r3, r3
   23adc:	2b01      	cmp	r3, #1
   23ade:	d00e      	beq.n	23afe <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   23ae0:	4a31      	ldr	r2, [pc, #196]	; (23ba8 <nm_spi_write+0x194>)
   23ae2:	4928      	ldr	r1, [pc, #160]	; (23b84 <nm_spi_write+0x170>)
   23ae4:	4b28      	ldr	r3, [pc, #160]	; (23b88 <nm_spi_write+0x174>)
   23ae6:	0018      	movs	r0, r3
   23ae8:	4b28      	ldr	r3, [pc, #160]	; (23b8c <nm_spi_write+0x178>)
   23aea:	4798      	blx	r3
   23aec:	4b2c      	ldr	r3, [pc, #176]	; (23ba0 <nm_spi_write+0x18c>)
   23aee:	0018      	movs	r0, r3
   23af0:	4b26      	ldr	r3, [pc, #152]	; (23b8c <nm_spi_write+0x178>)
   23af2:	4798      	blx	r3
   23af4:	4b27      	ldr	r3, [pc, #156]	; (23b94 <nm_spi_write+0x180>)
   23af6:	0018      	movs	r0, r3
   23af8:	4b24      	ldr	r3, [pc, #144]	; (23b8c <nm_spi_write+0x178>)
   23afa:	4798      	blx	r3
		goto _FAIL_;
   23afc:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   23afe:	2317      	movs	r3, #23
   23b00:	18fb      	adds	r3, r7, r3
   23b02:	781b      	ldrb	r3, [r3, #0]
   23b04:	b25b      	sxtb	r3, r3
   23b06:	2b01      	cmp	r3, #1
   23b08:	d030      	beq.n	23b6c <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   23b0a:	2001      	movs	r0, #1
   23b0c:	4b27      	ldr	r3, [pc, #156]	; (23bac <nm_spi_write+0x198>)
   23b0e:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   23b10:	2300      	movs	r3, #0
   23b12:	9300      	str	r3, [sp, #0]
   23b14:	2300      	movs	r3, #0
   23b16:	2200      	movs	r2, #0
   23b18:	2100      	movs	r1, #0
   23b1a:	20cf      	movs	r0, #207	; 0xcf
   23b1c:	4c24      	ldr	r4, [pc, #144]	; (23bb0 <nm_spi_write+0x19c>)
   23b1e:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   23b20:	20cf      	movs	r0, #207	; 0xcf
   23b22:	4b24      	ldr	r3, [pc, #144]	; (23bb4 <nm_spi_write+0x1a0>)
   23b24:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   23b26:	4a24      	ldr	r2, [pc, #144]	; (23bb8 <nm_spi_write+0x1a4>)
   23b28:	4916      	ldr	r1, [pc, #88]	; (23b84 <nm_spi_write+0x170>)
   23b2a:	4b17      	ldr	r3, [pc, #92]	; (23b88 <nm_spi_write+0x174>)
   23b2c:	0018      	movs	r0, r3
   23b2e:	4b17      	ldr	r3, [pc, #92]	; (23b8c <nm_spi_write+0x178>)
   23b30:	4798      	blx	r3
   23b32:	2316      	movs	r3, #22
   23b34:	18fb      	adds	r3, r7, r3
   23b36:	7819      	ldrb	r1, [r3, #0]
   23b38:	1dbb      	adds	r3, r7, #6
   23b3a:	881b      	ldrh	r3, [r3, #0]
   23b3c:	68fa      	ldr	r2, [r7, #12]
   23b3e:	481f      	ldr	r0, [pc, #124]	; (23bbc <nm_spi_write+0x1a8>)
   23b40:	4c12      	ldr	r4, [pc, #72]	; (23b8c <nm_spi_write+0x178>)
   23b42:	47a0      	blx	r4
   23b44:	4b13      	ldr	r3, [pc, #76]	; (23b94 <nm_spi_write+0x180>)
   23b46:	0018      	movs	r0, r3
   23b48:	4b10      	ldr	r3, [pc, #64]	; (23b8c <nm_spi_write+0x178>)
   23b4a:	4798      	blx	r3
		nm_bsp_sleep(1);
   23b4c:	2001      	movs	r0, #1
   23b4e:	4b17      	ldr	r3, [pc, #92]	; (23bac <nm_spi_write+0x198>)
   23b50:	4798      	blx	r3
		retry--;
   23b52:	2316      	movs	r3, #22
   23b54:	18fb      	adds	r3, r7, r3
   23b56:	781a      	ldrb	r2, [r3, #0]
   23b58:	2316      	movs	r3, #22
   23b5a:	18fb      	adds	r3, r7, r3
   23b5c:	3a01      	subs	r2, #1
   23b5e:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   23b60:	2316      	movs	r3, #22
   23b62:	18fb      	adds	r3, r7, r3
   23b64:	781b      	ldrb	r3, [r3, #0]
   23b66:	2b00      	cmp	r3, #0
   23b68:	d000      	beq.n	23b6c <nm_spi_write+0x158>
   23b6a:	e762      	b.n	23a32 <nm_spi_write+0x1e>
	}


	return result;
   23b6c:	2317      	movs	r3, #23
   23b6e:	18fb      	adds	r3, r7, r3
   23b70:	781b      	ldrb	r3, [r3, #0]
   23b72:	b25b      	sxtb	r3, r3
}
   23b74:	0018      	movs	r0, r3
   23b76:	46bd      	mov	sp, r7
   23b78:	b007      	add	sp, #28
   23b7a:	bd90      	pop	{r4, r7, pc}
   23b7c:	00022dfd 	.word	0x00022dfd
   23b80:	000003cf 	.word	0x000003cf
   23b84:	00038a6c 	.word	0x00038a6c
   23b88:	00038424 	.word	0x00038424
   23b8c:	0001d2e9 	.word	0x0001d2e9
   23b90:	000387d8 	.word	0x000387d8
   23b94:	00038464 	.word	0x00038464
   23b98:	000236f1 	.word	0x000236f1
   23b9c:	000003d9 	.word	0x000003d9
   23ba0:	00038808 	.word	0x00038808
   23ba4:	00022bc1 	.word	0x00022bc1
   23ba8:	000003e1 	.word	0x000003e1
   23bac:	0001f73d 	.word	0x0001f73d
   23bb0:	00022881 	.word	0x00022881
   23bb4:	00022cc1 	.word	0x00022cc1
   23bb8:	000003eb 	.word	0x000003eb
   23bbc:	00038830 	.word	0x00038830

00023bc0 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   23bc0:	b590      	push	{r4, r7, lr}
   23bc2:	b087      	sub	sp, #28
   23bc4:	af02      	add	r7, sp, #8
   23bc6:	6078      	str	r0, [r7, #4]
   23bc8:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   23bca:	230f      	movs	r3, #15
   23bcc:	18fb      	adds	r3, r7, r3
   23bce:	220a      	movs	r2, #10
   23bd0:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   23bd2:	230c      	movs	r3, #12
   23bd4:	18fb      	adds	r3, r7, r3
   23bd6:	2201      	movs	r2, #1
   23bd8:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   23bda:	230e      	movs	r3, #14
   23bdc:	18fb      	adds	r3, r7, r3
   23bde:	22ca      	movs	r2, #202	; 0xca
   23be0:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   23be2:	230d      	movs	r3, #13
   23be4:	18fb      	adds	r3, r7, r3
   23be6:	2200      	movs	r2, #0
   23be8:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   23bea:	687b      	ldr	r3, [r7, #4]
   23bec:	2bff      	cmp	r3, #255	; 0xff
   23bee:	d808      	bhi.n	23c02 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   23bf0:	230e      	movs	r3, #14
   23bf2:	18fb      	adds	r3, r7, r3
   23bf4:	22c4      	movs	r2, #196	; 0xc4
   23bf6:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   23bf8:	230d      	movs	r3, #13
   23bfa:	18fb      	adds	r3, r7, r3
   23bfc:	2201      	movs	r2, #1
   23bfe:	701a      	strb	r2, [r3, #0]
   23c00:	e007      	b.n	23c12 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   23c02:	230e      	movs	r3, #14
   23c04:	18fb      	adds	r3, r7, r3
   23c06:	22ca      	movs	r2, #202	; 0xca
   23c08:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   23c0a:	230d      	movs	r3, #13
   23c0c:	18fb      	adds	r3, r7, r3
   23c0e:	2200      	movs	r2, #0
   23c10:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   23c12:	2308      	movs	r3, #8
   23c14:	18fa      	adds	r2, r7, r3
   23c16:	6879      	ldr	r1, [r7, #4]
   23c18:	230e      	movs	r3, #14
   23c1a:	18fb      	adds	r3, r7, r3
   23c1c:	7818      	ldrb	r0, [r3, #0]
   23c1e:	230d      	movs	r3, #13
   23c20:	18fb      	adds	r3, r7, r3
   23c22:	781b      	ldrb	r3, [r3, #0]
   23c24:	9300      	str	r3, [sp, #0]
   23c26:	2304      	movs	r3, #4
   23c28:	4c37      	ldr	r4, [pc, #220]	; (23d08 <spi_read_reg+0x148>)
   23c2a:	47a0      	blx	r4
   23c2c:	0002      	movs	r2, r0
   23c2e:	230c      	movs	r3, #12
   23c30:	18fb      	adds	r3, r7, r3
   23c32:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   23c34:	230c      	movs	r3, #12
   23c36:	18fb      	adds	r3, r7, r3
   23c38:	781b      	ldrb	r3, [r3, #0]
   23c3a:	b25b      	sxtb	r3, r3
   23c3c:	2b01      	cmp	r3, #1
   23c3e:	d010      	beq.n	23c62 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   23c40:	4a32      	ldr	r2, [pc, #200]	; (23d0c <spi_read_reg+0x14c>)
   23c42:	4933      	ldr	r1, [pc, #204]	; (23d10 <spi_read_reg+0x150>)
   23c44:	4b33      	ldr	r3, [pc, #204]	; (23d14 <spi_read_reg+0x154>)
   23c46:	0018      	movs	r0, r3
   23c48:	4b33      	ldr	r3, [pc, #204]	; (23d18 <spi_read_reg+0x158>)
   23c4a:	4798      	blx	r3
   23c4c:	687a      	ldr	r2, [r7, #4]
   23c4e:	4b33      	ldr	r3, [pc, #204]	; (23d1c <spi_read_reg+0x15c>)
   23c50:	0011      	movs	r1, r2
   23c52:	0018      	movs	r0, r3
   23c54:	4b30      	ldr	r3, [pc, #192]	; (23d18 <spi_read_reg+0x158>)
   23c56:	4798      	blx	r3
   23c58:	4b31      	ldr	r3, [pc, #196]	; (23d20 <spi_read_reg+0x160>)
   23c5a:	0018      	movs	r0, r3
   23c5c:	4b2e      	ldr	r3, [pc, #184]	; (23d18 <spi_read_reg+0x158>)
   23c5e:	4798      	blx	r3
		goto _FAIL_;
   23c60:	e014      	b.n	23c8c <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   23c62:	2308      	movs	r3, #8
   23c64:	18fb      	adds	r3, r7, r3
   23c66:	781b      	ldrb	r3, [r3, #0]
   23c68:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   23c6a:	2308      	movs	r3, #8
   23c6c:	18fb      	adds	r3, r7, r3
   23c6e:	785b      	ldrb	r3, [r3, #1]
   23c70:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   23c72:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   23c74:	2308      	movs	r3, #8
   23c76:	18fb      	adds	r3, r7, r3
   23c78:	789b      	ldrb	r3, [r3, #2]
   23c7a:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   23c7c:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   23c7e:	2308      	movs	r3, #8
   23c80:	18fb      	adds	r3, r7, r3
   23c82:	78db      	ldrb	r3, [r3, #3]
   23c84:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   23c86:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   23c88:	683b      	ldr	r3, [r7, #0]
   23c8a:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   23c8c:	230c      	movs	r3, #12
   23c8e:	18fb      	adds	r3, r7, r3
   23c90:	781b      	ldrb	r3, [r3, #0]
   23c92:	b25b      	sxtb	r3, r3
   23c94:	2b01      	cmp	r3, #1
   23c96:	d02f      	beq.n	23cf8 <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   23c98:	2001      	movs	r0, #1
   23c9a:	4b22      	ldr	r3, [pc, #136]	; (23d24 <spi_read_reg+0x164>)
   23c9c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   23c9e:	2300      	movs	r3, #0
   23ca0:	9300      	str	r3, [sp, #0]
   23ca2:	2300      	movs	r3, #0
   23ca4:	2200      	movs	r2, #0
   23ca6:	2100      	movs	r1, #0
   23ca8:	20cf      	movs	r0, #207	; 0xcf
   23caa:	4c1f      	ldr	r4, [pc, #124]	; (23d28 <spi_read_reg+0x168>)
   23cac:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   23cae:	20cf      	movs	r0, #207	; 0xcf
   23cb0:	4b1e      	ldr	r3, [pc, #120]	; (23d2c <spi_read_reg+0x16c>)
   23cb2:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   23cb4:	4a1e      	ldr	r2, [pc, #120]	; (23d30 <spi_read_reg+0x170>)
   23cb6:	4916      	ldr	r1, [pc, #88]	; (23d10 <spi_read_reg+0x150>)
   23cb8:	4b16      	ldr	r3, [pc, #88]	; (23d14 <spi_read_reg+0x154>)
   23cba:	0018      	movs	r0, r3
   23cbc:	4b16      	ldr	r3, [pc, #88]	; (23d18 <spi_read_reg+0x158>)
   23cbe:	4798      	blx	r3
   23cc0:	230f      	movs	r3, #15
   23cc2:	18fb      	adds	r3, r7, r3
   23cc4:	7819      	ldrb	r1, [r3, #0]
   23cc6:	687a      	ldr	r2, [r7, #4]
   23cc8:	4b1a      	ldr	r3, [pc, #104]	; (23d34 <spi_read_reg+0x174>)
   23cca:	0018      	movs	r0, r3
   23ccc:	4b12      	ldr	r3, [pc, #72]	; (23d18 <spi_read_reg+0x158>)
   23cce:	4798      	blx	r3
   23cd0:	4b13      	ldr	r3, [pc, #76]	; (23d20 <spi_read_reg+0x160>)
   23cd2:	0018      	movs	r0, r3
   23cd4:	4b10      	ldr	r3, [pc, #64]	; (23d18 <spi_read_reg+0x158>)
   23cd6:	4798      	blx	r3
		nm_bsp_sleep(1);
   23cd8:	2001      	movs	r0, #1
   23cda:	4b12      	ldr	r3, [pc, #72]	; (23d24 <spi_read_reg+0x164>)
   23cdc:	4798      	blx	r3
		retry--;
   23cde:	230f      	movs	r3, #15
   23ce0:	18fb      	adds	r3, r7, r3
   23ce2:	781a      	ldrb	r2, [r3, #0]
   23ce4:	230f      	movs	r3, #15
   23ce6:	18fb      	adds	r3, r7, r3
   23ce8:	3a01      	subs	r2, #1
   23cea:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   23cec:	230f      	movs	r3, #15
   23cee:	18fb      	adds	r3, r7, r3
   23cf0:	781b      	ldrb	r3, [r3, #0]
   23cf2:	2b00      	cmp	r3, #0
   23cf4:	d000      	beq.n	23cf8 <spi_read_reg+0x138>
   23cf6:	e778      	b.n	23bea <spi_read_reg+0x2a>
	}
		
	return result;
   23cf8:	230c      	movs	r3, #12
   23cfa:	18fb      	adds	r3, r7, r3
   23cfc:	781b      	ldrb	r3, [r3, #0]
   23cfe:	b25b      	sxtb	r3, r3
}
   23d00:	0018      	movs	r0, r3
   23d02:	46bd      	mov	sp, r7
   23d04:	b005      	add	sp, #20
   23d06:	bd90      	pop	{r4, r7, pc}
   23d08:	00022dfd 	.word	0x00022dfd
   23d0c:	00000423 	.word	0x00000423
   23d10:	00038a7c 	.word	0x00038a7c
   23d14:	00038424 	.word	0x00038424
   23d18:	0001d2e9 	.word	0x0001d2e9
   23d1c:	0003884c 	.word	0x0003884c
   23d20:	00038464 	.word	0x00038464
   23d24:	0001f73d 	.word	0x0001f73d
   23d28:	00022881 	.word	0x00022881
   23d2c:	00022cc1 	.word	0x00022cc1
   23d30:	00000435 	.word	0x00000435
   23d34:	00038878 	.word	0x00038878

00023d38 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   23d38:	b590      	push	{r4, r7, lr}
   23d3a:	b089      	sub	sp, #36	; 0x24
   23d3c:	af02      	add	r7, sp, #8
   23d3e:	60f8      	str	r0, [r7, #12]
   23d40:	60b9      	str	r1, [r7, #8]
   23d42:	1dbb      	adds	r3, r7, #6
   23d44:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   23d46:	2316      	movs	r3, #22
   23d48:	18fb      	adds	r3, r7, r3
   23d4a:	22c8      	movs	r2, #200	; 0xc8
   23d4c:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   23d4e:	2317      	movs	r3, #23
   23d50:	18fb      	adds	r3, r7, r3
   23d52:	220a      	movs	r2, #10
   23d54:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   23d56:	1dbb      	adds	r3, r7, #6
   23d58:	881c      	ldrh	r4, [r3, #0]
   23d5a:	68ba      	ldr	r2, [r7, #8]
   23d5c:	68f9      	ldr	r1, [r7, #12]
   23d5e:	2316      	movs	r3, #22
   23d60:	18fb      	adds	r3, r7, r3
   23d62:	7818      	ldrb	r0, [r3, #0]
   23d64:	2300      	movs	r3, #0
   23d66:	9300      	str	r3, [sp, #0]
   23d68:	0023      	movs	r3, r4
   23d6a:	4c2e      	ldr	r4, [pc, #184]	; (23e24 <nm_spi_read+0xec>)
   23d6c:	47a0      	blx	r4
   23d6e:	0002      	movs	r2, r0
   23d70:	2315      	movs	r3, #21
   23d72:	18fb      	adds	r3, r7, r3
   23d74:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   23d76:	2315      	movs	r3, #21
   23d78:	18fb      	adds	r3, r7, r3
   23d7a:	781b      	ldrb	r3, [r3, #0]
   23d7c:	b25b      	sxtb	r3, r3
   23d7e:	2b01      	cmp	r3, #1
   23d80:	d010      	beq.n	23da4 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   23d82:	4a29      	ldr	r2, [pc, #164]	; (23e28 <nm_spi_read+0xf0>)
   23d84:	4929      	ldr	r1, [pc, #164]	; (23e2c <nm_spi_read+0xf4>)
   23d86:	4b2a      	ldr	r3, [pc, #168]	; (23e30 <nm_spi_read+0xf8>)
   23d88:	0018      	movs	r0, r3
   23d8a:	4b2a      	ldr	r3, [pc, #168]	; (23e34 <nm_spi_read+0xfc>)
   23d8c:	4798      	blx	r3
   23d8e:	68fa      	ldr	r2, [r7, #12]
   23d90:	4b29      	ldr	r3, [pc, #164]	; (23e38 <nm_spi_read+0x100>)
   23d92:	0011      	movs	r1, r2
   23d94:	0018      	movs	r0, r3
   23d96:	4b27      	ldr	r3, [pc, #156]	; (23e34 <nm_spi_read+0xfc>)
   23d98:	4798      	blx	r3
   23d9a:	4b28      	ldr	r3, [pc, #160]	; (23e3c <nm_spi_read+0x104>)
   23d9c:	0018      	movs	r0, r3
   23d9e:	4b25      	ldr	r3, [pc, #148]	; (23e34 <nm_spi_read+0xfc>)
   23da0:	4798      	blx	r3
		goto _FAIL_;
   23da2:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   23da4:	2315      	movs	r3, #21
   23da6:	18fb      	adds	r3, r7, r3
   23da8:	781b      	ldrb	r3, [r3, #0]
   23daa:	b25b      	sxtb	r3, r3
   23dac:	2b01      	cmp	r3, #1
   23dae:	d030      	beq.n	23e12 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   23db0:	2001      	movs	r0, #1
   23db2:	4b23      	ldr	r3, [pc, #140]	; (23e40 <nm_spi_read+0x108>)
   23db4:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   23db6:	2300      	movs	r3, #0
   23db8:	9300      	str	r3, [sp, #0]
   23dba:	2300      	movs	r3, #0
   23dbc:	2200      	movs	r2, #0
   23dbe:	2100      	movs	r1, #0
   23dc0:	20cf      	movs	r0, #207	; 0xcf
   23dc2:	4c20      	ldr	r4, [pc, #128]	; (23e44 <nm_spi_read+0x10c>)
   23dc4:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   23dc6:	20cf      	movs	r0, #207	; 0xcf
   23dc8:	4b1f      	ldr	r3, [pc, #124]	; (23e48 <nm_spi_read+0x110>)
   23dca:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   23dcc:	4a1f      	ldr	r2, [pc, #124]	; (23e4c <nm_spi_read+0x114>)
   23dce:	4917      	ldr	r1, [pc, #92]	; (23e2c <nm_spi_read+0xf4>)
   23dd0:	4b17      	ldr	r3, [pc, #92]	; (23e30 <nm_spi_read+0xf8>)
   23dd2:	0018      	movs	r0, r3
   23dd4:	4b17      	ldr	r3, [pc, #92]	; (23e34 <nm_spi_read+0xfc>)
   23dd6:	4798      	blx	r3
   23dd8:	2317      	movs	r3, #23
   23dda:	18fb      	adds	r3, r7, r3
   23ddc:	7819      	ldrb	r1, [r3, #0]
   23dde:	1dbb      	adds	r3, r7, #6
   23de0:	881b      	ldrh	r3, [r3, #0]
   23de2:	68fa      	ldr	r2, [r7, #12]
   23de4:	481a      	ldr	r0, [pc, #104]	; (23e50 <nm_spi_read+0x118>)
   23de6:	4c13      	ldr	r4, [pc, #76]	; (23e34 <nm_spi_read+0xfc>)
   23de8:	47a0      	blx	r4
   23dea:	4b14      	ldr	r3, [pc, #80]	; (23e3c <nm_spi_read+0x104>)
   23dec:	0018      	movs	r0, r3
   23dee:	4b11      	ldr	r3, [pc, #68]	; (23e34 <nm_spi_read+0xfc>)
   23df0:	4798      	blx	r3
		nm_bsp_sleep(1);
   23df2:	2001      	movs	r0, #1
   23df4:	4b12      	ldr	r3, [pc, #72]	; (23e40 <nm_spi_read+0x108>)
   23df6:	4798      	blx	r3
		retry--;
   23df8:	2317      	movs	r3, #23
   23dfa:	18fb      	adds	r3, r7, r3
   23dfc:	781a      	ldrb	r2, [r3, #0]
   23dfe:	2317      	movs	r3, #23
   23e00:	18fb      	adds	r3, r7, r3
   23e02:	3a01      	subs	r2, #1
   23e04:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   23e06:	2317      	movs	r3, #23
   23e08:	18fb      	adds	r3, r7, r3
   23e0a:	781b      	ldrb	r3, [r3, #0]
   23e0c:	2b00      	cmp	r3, #0
   23e0e:	d000      	beq.n	23e12 <nm_spi_read+0xda>
   23e10:	e7a1      	b.n	23d56 <nm_spi_read+0x1e>
	}

	return result;
   23e12:	2315      	movs	r3, #21
   23e14:	18fb      	adds	r3, r7, r3
   23e16:	781b      	ldrb	r3, [r3, #0]
   23e18:	b25b      	sxtb	r3, r3
}
   23e1a:	0018      	movs	r0, r3
   23e1c:	46bd      	mov	sp, r7
   23e1e:	b007      	add	sp, #28
   23e20:	bd90      	pop	{r4, r7, pc}
   23e22:	46c0      	nop			; (mov r8, r8)
   23e24:	00022dfd 	.word	0x00022dfd
   23e28:	00000472 	.word	0x00000472
   23e2c:	00038a8c 	.word	0x00038a8c
   23e30:	00038424 	.word	0x00038424
   23e34:	0001d2e9 	.word	0x0001d2e9
   23e38:	00038890 	.word	0x00038890
   23e3c:	00038464 	.word	0x00038464
   23e40:	0001f73d 	.word	0x0001f73d
   23e44:	00022881 	.word	0x00022881
   23e48:	00022cc1 	.word	0x00022cc1
   23e4c:	0000047d 	.word	0x0000047d
   23e50:	00038830 	.word	0x00038830

00023e54 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   23e54:	b580      	push	{r7, lr}
   23e56:	b082      	sub	sp, #8
   23e58:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   23e5a:	4b0c      	ldr	r3, [pc, #48]	; (23e8c <spi_init_pkt_sz+0x38>)
   23e5c:	0018      	movs	r0, r3
   23e5e:	4b0c      	ldr	r3, [pc, #48]	; (23e90 <spi_init_pkt_sz+0x3c>)
   23e60:	4798      	blx	r3
   23e62:	0003      	movs	r3, r0
   23e64:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   23e66:	687b      	ldr	r3, [r7, #4]
   23e68:	2270      	movs	r2, #112	; 0x70
   23e6a:	4393      	bics	r3, r2
   23e6c:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   23e6e:	687b      	ldr	r3, [r7, #4]
   23e70:	2250      	movs	r2, #80	; 0x50
   23e72:	4313      	orrs	r3, r2
   23e74:	607b      	str	r3, [r7, #4]
   23e76:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   23e78:	687b      	ldr	r3, [r7, #4]
   23e7a:	4a04      	ldr	r2, [pc, #16]	; (23e8c <spi_init_pkt_sz+0x38>)
   23e7c:	0019      	movs	r1, r3
   23e7e:	0010      	movs	r0, r2
   23e80:	4b04      	ldr	r3, [pc, #16]	; (23e94 <spi_init_pkt_sz+0x40>)
   23e82:	4798      	blx	r3
}
   23e84:	46c0      	nop			; (mov r8, r8)
   23e86:	46bd      	mov	sp, r7
   23e88:	b002      	add	sp, #8
   23e8a:	bd80      	pop	{r7, pc}
   23e8c:	0000e824 	.word	0x0000e824
   23e90:	0002402d 	.word	0x0002402d
   23e94:	000240a1 	.word	0x000240a1

00023e98 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   23e98:	b590      	push	{r4, r7, lr}
   23e9a:	b083      	sub	sp, #12
   23e9c:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   23e9e:	2300      	movs	r3, #0
   23ea0:	9300      	str	r3, [sp, #0]
   23ea2:	2300      	movs	r3, #0
   23ea4:	2200      	movs	r2, #0
   23ea6:	2100      	movs	r1, #0
   23ea8:	20cf      	movs	r0, #207	; 0xcf
   23eaa:	4c05      	ldr	r4, [pc, #20]	; (23ec0 <nm_spi_reset+0x28>)
   23eac:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   23eae:	20cf      	movs	r0, #207	; 0xcf
   23eb0:	4b04      	ldr	r3, [pc, #16]	; (23ec4 <nm_spi_reset+0x2c>)
   23eb2:	4798      	blx	r3
	return M2M_SUCCESS;
   23eb4:	2300      	movs	r3, #0
}
   23eb6:	0018      	movs	r0, r3
   23eb8:	46bd      	mov	sp, r7
   23eba:	b001      	add	sp, #4
   23ebc:	bd90      	pop	{r4, r7, pc}
   23ebe:	46c0      	nop			; (mov r8, r8)
   23ec0:	00022881 	.word	0x00022881
   23ec4:	00022cc1 	.word	0x00022cc1

00023ec8 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   23ec8:	b580      	push	{r7, lr}
   23eca:	b082      	sub	sp, #8
   23ecc:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   23ece:	2300      	movs	r3, #0
   23ed0:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   23ed2:	4b40      	ldr	r3, [pc, #256]	; (23fd4 <nm_spi_init+0x10c>)
   23ed4:	2200      	movs	r2, #0
   23ed6:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   23ed8:	003b      	movs	r3, r7
   23eda:	4a3f      	ldr	r2, [pc, #252]	; (23fd8 <nm_spi_init+0x110>)
   23edc:	0019      	movs	r1, r3
   23ede:	0010      	movs	r0, r2
   23ee0:	4b3e      	ldr	r3, [pc, #248]	; (23fdc <nm_spi_init+0x114>)
   23ee2:	4798      	blx	r3
   23ee4:	1e03      	subs	r3, r0, #0
   23ee6:	d129      	bne.n	23f3c <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   23ee8:	4b3a      	ldr	r3, [pc, #232]	; (23fd4 <nm_spi_init+0x10c>)
   23eea:	2201      	movs	r2, #1
   23eec:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   23eee:	2398      	movs	r3, #152	; 0x98
   23ef0:	00da      	lsls	r2, r3, #3
   23ef2:	493b      	ldr	r1, [pc, #236]	; (23fe0 <nm_spi_init+0x118>)
   23ef4:	4b3b      	ldr	r3, [pc, #236]	; (23fe4 <nm_spi_init+0x11c>)
   23ef6:	0018      	movs	r0, r3
   23ef8:	4b3b      	ldr	r3, [pc, #236]	; (23fe8 <nm_spi_init+0x120>)
   23efa:	4798      	blx	r3
   23efc:	4b3b      	ldr	r3, [pc, #236]	; (23fec <nm_spi_init+0x124>)
   23efe:	0018      	movs	r0, r3
   23f00:	4b39      	ldr	r3, [pc, #228]	; (23fe8 <nm_spi_init+0x120>)
   23f02:	4798      	blx	r3
   23f04:	4b3a      	ldr	r3, [pc, #232]	; (23ff0 <nm_spi_init+0x128>)
   23f06:	0018      	movs	r0, r3
   23f08:	4b37      	ldr	r3, [pc, #220]	; (23fe8 <nm_spi_init+0x120>)
   23f0a:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   23f0c:	003b      	movs	r3, r7
   23f0e:	4a32      	ldr	r2, [pc, #200]	; (23fd8 <nm_spi_init+0x110>)
   23f10:	0019      	movs	r1, r3
   23f12:	0010      	movs	r0, r2
   23f14:	4b31      	ldr	r3, [pc, #196]	; (23fdc <nm_spi_init+0x114>)
   23f16:	4798      	blx	r3
   23f18:	1e03      	subs	r3, r0, #0
   23f1a:	d10f      	bne.n	23f3c <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   23f1c:	4a35      	ldr	r2, [pc, #212]	; (23ff4 <nm_spi_init+0x12c>)
   23f1e:	4930      	ldr	r1, [pc, #192]	; (23fe0 <nm_spi_init+0x118>)
   23f20:	4b30      	ldr	r3, [pc, #192]	; (23fe4 <nm_spi_init+0x11c>)
   23f22:	0018      	movs	r0, r3
   23f24:	4b30      	ldr	r3, [pc, #192]	; (23fe8 <nm_spi_init+0x120>)
   23f26:	4798      	blx	r3
   23f28:	4b33      	ldr	r3, [pc, #204]	; (23ff8 <nm_spi_init+0x130>)
   23f2a:	0018      	movs	r0, r3
   23f2c:	4b2e      	ldr	r3, [pc, #184]	; (23fe8 <nm_spi_init+0x120>)
   23f2e:	4798      	blx	r3
   23f30:	4b2f      	ldr	r3, [pc, #188]	; (23ff0 <nm_spi_init+0x128>)
   23f32:	0018      	movs	r0, r3
   23f34:	4b2c      	ldr	r3, [pc, #176]	; (23fe8 <nm_spi_init+0x120>)
   23f36:	4798      	blx	r3
			return 0;
   23f38:	2300      	movs	r3, #0
   23f3a:	e047      	b.n	23fcc <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   23f3c:	4b25      	ldr	r3, [pc, #148]	; (23fd4 <nm_spi_init+0x10c>)
   23f3e:	781b      	ldrb	r3, [r3, #0]
   23f40:	2b00      	cmp	r3, #0
   23f42:	d126      	bne.n	23f92 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   23f44:	683b      	ldr	r3, [r7, #0]
   23f46:	220c      	movs	r2, #12
   23f48:	4393      	bics	r3, r2
   23f4a:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   23f4c:	683b      	ldr	r3, [r7, #0]
   23f4e:	2270      	movs	r2, #112	; 0x70
   23f50:	4393      	bics	r3, r2
   23f52:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   23f54:	683b      	ldr	r3, [r7, #0]
   23f56:	2250      	movs	r2, #80	; 0x50
   23f58:	4313      	orrs	r3, r2
   23f5a:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   23f5c:	683b      	ldr	r3, [r7, #0]
   23f5e:	4a1e      	ldr	r2, [pc, #120]	; (23fd8 <nm_spi_init+0x110>)
   23f60:	0019      	movs	r1, r3
   23f62:	0010      	movs	r0, r2
   23f64:	4b25      	ldr	r3, [pc, #148]	; (23ffc <nm_spi_init+0x134>)
   23f66:	4798      	blx	r3
   23f68:	1e03      	subs	r3, r0, #0
   23f6a:	d10f      	bne.n	23f8c <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   23f6c:	4a24      	ldr	r2, [pc, #144]	; (24000 <nm_spi_init+0x138>)
   23f6e:	491c      	ldr	r1, [pc, #112]	; (23fe0 <nm_spi_init+0x118>)
   23f70:	4b1c      	ldr	r3, [pc, #112]	; (23fe4 <nm_spi_init+0x11c>)
   23f72:	0018      	movs	r0, r3
   23f74:	4b1c      	ldr	r3, [pc, #112]	; (23fe8 <nm_spi_init+0x120>)
   23f76:	4798      	blx	r3
   23f78:	4b22      	ldr	r3, [pc, #136]	; (24004 <nm_spi_init+0x13c>)
   23f7a:	0018      	movs	r0, r3
   23f7c:	4b1a      	ldr	r3, [pc, #104]	; (23fe8 <nm_spi_init+0x120>)
   23f7e:	4798      	blx	r3
   23f80:	4b1b      	ldr	r3, [pc, #108]	; (23ff0 <nm_spi_init+0x128>)
   23f82:	0018      	movs	r0, r3
   23f84:	4b18      	ldr	r3, [pc, #96]	; (23fe8 <nm_spi_init+0x120>)
   23f86:	4798      	blx	r3
			return 0;
   23f88:	2300      	movs	r3, #0
   23f8a:	e01f      	b.n	23fcc <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   23f8c:	4b11      	ldr	r3, [pc, #68]	; (23fd4 <nm_spi_init+0x10c>)
   23f8e:	2201      	movs	r2, #1
   23f90:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   23f92:	1d3a      	adds	r2, r7, #4
   23f94:	2380      	movs	r3, #128	; 0x80
   23f96:	015b      	lsls	r3, r3, #5
   23f98:	0011      	movs	r1, r2
   23f9a:	0018      	movs	r0, r3
   23f9c:	4b0f      	ldr	r3, [pc, #60]	; (23fdc <nm_spi_init+0x114>)
   23f9e:	4798      	blx	r3
   23fa0:	1e03      	subs	r3, r0, #0
   23fa2:	d110      	bne.n	23fc6 <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   23fa4:	4a18      	ldr	r2, [pc, #96]	; (24008 <nm_spi_init+0x140>)
   23fa6:	490e      	ldr	r1, [pc, #56]	; (23fe0 <nm_spi_init+0x118>)
   23fa8:	4b0e      	ldr	r3, [pc, #56]	; (23fe4 <nm_spi_init+0x11c>)
   23faa:	0018      	movs	r0, r3
   23fac:	4b0e      	ldr	r3, [pc, #56]	; (23fe8 <nm_spi_init+0x120>)
   23fae:	4798      	blx	r3
   23fb0:	4b16      	ldr	r3, [pc, #88]	; (2400c <nm_spi_init+0x144>)
   23fb2:	0018      	movs	r0, r3
   23fb4:	4b0c      	ldr	r3, [pc, #48]	; (23fe8 <nm_spi_init+0x120>)
   23fb6:	4798      	blx	r3
   23fb8:	4b0d      	ldr	r3, [pc, #52]	; (23ff0 <nm_spi_init+0x128>)
   23fba:	0018      	movs	r0, r3
   23fbc:	4b0a      	ldr	r3, [pc, #40]	; (23fe8 <nm_spi_init+0x120>)
   23fbe:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   23fc0:	2306      	movs	r3, #6
   23fc2:	425b      	negs	r3, r3
   23fc4:	e002      	b.n	23fcc <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   23fc6:	4b12      	ldr	r3, [pc, #72]	; (24010 <nm_spi_init+0x148>)
   23fc8:	4798      	blx	r3


	return M2M_SUCCESS;
   23fca:	2300      	movs	r3, #0
}
   23fcc:	0018      	movs	r0, r3
   23fce:	46bd      	mov	sp, r7
   23fd0:	b002      	add	sp, #8
   23fd2:	bd80      	pop	{r7, pc}
   23fd4:	20004114 	.word	0x20004114
   23fd8:	0000e824 	.word	0x0000e824
   23fdc:	00023bc1 	.word	0x00023bc1
   23fe0:	00038a98 	.word	0x00038a98
   23fe4:	00038424 	.word	0x00038424
   23fe8:	0001d2e9 	.word	0x0001d2e9
   23fec:	000388c0 	.word	0x000388c0
   23ff0:	00038464 	.word	0x00038464
   23ff4:	000004c3 	.word	0x000004c3
   23ff8:	00038910 	.word	0x00038910
   23ffc:	000238c9 	.word	0x000238c9
   24000:	000004cd 	.word	0x000004cd
   24004:	00038940 	.word	0x00038940
   24008:	000004d7 	.word	0x000004d7
   2400c:	00038974 	.word	0x00038974
   24010:	00023e55 	.word	0x00023e55

00024014 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   24014:	b580      	push	{r7, lr}
   24016:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   24018:	4b03      	ldr	r3, [pc, #12]	; (24028 <nm_spi_deinit+0x14>)
   2401a:	2200      	movs	r2, #0
   2401c:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   2401e:	2300      	movs	r3, #0
}
   24020:	0018      	movs	r0, r3
   24022:	46bd      	mov	sp, r7
   24024:	bd80      	pop	{r7, pc}
   24026:	46c0      	nop			; (mov r8, r8)
   24028:	20004114 	.word	0x20004114

0002402c <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   2402c:	b580      	push	{r7, lr}
   2402e:	b084      	sub	sp, #16
   24030:	af00      	add	r7, sp, #0
   24032:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   24034:	230c      	movs	r3, #12
   24036:	18fa      	adds	r2, r7, r3
   24038:	687b      	ldr	r3, [r7, #4]
   2403a:	0011      	movs	r1, r2
   2403c:	0018      	movs	r0, r3
   2403e:	4b03      	ldr	r3, [pc, #12]	; (2404c <nm_spi_read_reg+0x20>)
   24040:	4798      	blx	r3

	return u32Val;
   24042:	68fb      	ldr	r3, [r7, #12]
}
   24044:	0018      	movs	r0, r3
   24046:	46bd      	mov	sp, r7
   24048:	b004      	add	sp, #16
   2404a:	bd80      	pop	{r7, pc}
   2404c:	00023bc1 	.word	0x00023bc1

00024050 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   24050:	b590      	push	{r4, r7, lr}
   24052:	b085      	sub	sp, #20
   24054:	af00      	add	r7, sp, #0
   24056:	6078      	str	r0, [r7, #4]
   24058:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   2405a:	230f      	movs	r3, #15
   2405c:	18fc      	adds	r4, r7, r3
   2405e:	683a      	ldr	r2, [r7, #0]
   24060:	687b      	ldr	r3, [r7, #4]
   24062:	0011      	movs	r1, r2
   24064:	0018      	movs	r0, r3
   24066:	4b0d      	ldr	r3, [pc, #52]	; (2409c <nm_spi_read_reg_with_ret+0x4c>)
   24068:	4798      	blx	r3
   2406a:	0003      	movs	r3, r0
   2406c:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   2406e:	230f      	movs	r3, #15
   24070:	18fb      	adds	r3, r7, r3
   24072:	781b      	ldrb	r3, [r3, #0]
   24074:	b25b      	sxtb	r3, r3
   24076:	2b01      	cmp	r3, #1
   24078:	d104      	bne.n	24084 <nm_spi_read_reg_with_ret+0x34>
   2407a:	230f      	movs	r3, #15
   2407c:	18fb      	adds	r3, r7, r3
   2407e:	2200      	movs	r2, #0
   24080:	701a      	strb	r2, [r3, #0]
   24082:	e003      	b.n	2408c <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24084:	230f      	movs	r3, #15
   24086:	18fb      	adds	r3, r7, r3
   24088:	22fa      	movs	r2, #250	; 0xfa
   2408a:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   2408c:	230f      	movs	r3, #15
   2408e:	18fb      	adds	r3, r7, r3
   24090:	781b      	ldrb	r3, [r3, #0]
   24092:	b25b      	sxtb	r3, r3
}
   24094:	0018      	movs	r0, r3
   24096:	46bd      	mov	sp, r7
   24098:	b005      	add	sp, #20
   2409a:	bd90      	pop	{r4, r7, pc}
   2409c:	00023bc1 	.word	0x00023bc1

000240a0 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   240a0:	b590      	push	{r4, r7, lr}
   240a2:	b085      	sub	sp, #20
   240a4:	af00      	add	r7, sp, #0
   240a6:	6078      	str	r0, [r7, #4]
   240a8:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   240aa:	230f      	movs	r3, #15
   240ac:	18fc      	adds	r4, r7, r3
   240ae:	683a      	ldr	r2, [r7, #0]
   240b0:	687b      	ldr	r3, [r7, #4]
   240b2:	0011      	movs	r1, r2
   240b4:	0018      	movs	r0, r3
   240b6:	4b0d      	ldr	r3, [pc, #52]	; (240ec <nm_spi_write_reg+0x4c>)
   240b8:	4798      	blx	r3
   240ba:	0003      	movs	r3, r0
   240bc:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   240be:	230f      	movs	r3, #15
   240c0:	18fb      	adds	r3, r7, r3
   240c2:	781b      	ldrb	r3, [r3, #0]
   240c4:	b25b      	sxtb	r3, r3
   240c6:	2b01      	cmp	r3, #1
   240c8:	d104      	bne.n	240d4 <nm_spi_write_reg+0x34>
   240ca:	230f      	movs	r3, #15
   240cc:	18fb      	adds	r3, r7, r3
   240ce:	2200      	movs	r2, #0
   240d0:	701a      	strb	r2, [r3, #0]
   240d2:	e003      	b.n	240dc <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   240d4:	230f      	movs	r3, #15
   240d6:	18fb      	adds	r3, r7, r3
   240d8:	22fa      	movs	r2, #250	; 0xfa
   240da:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   240dc:	230f      	movs	r3, #15
   240de:	18fb      	adds	r3, r7, r3
   240e0:	781b      	ldrb	r3, [r3, #0]
   240e2:	b25b      	sxtb	r3, r3
}
   240e4:	0018      	movs	r0, r3
   240e6:	46bd      	mov	sp, r7
   240e8:	b005      	add	sp, #20
   240ea:	bd90      	pop	{r4, r7, pc}
   240ec:	000238c9 	.word	0x000238c9

000240f0 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   240f0:	b590      	push	{r4, r7, lr}
   240f2:	b087      	sub	sp, #28
   240f4:	af00      	add	r7, sp, #0
   240f6:	60f8      	str	r0, [r7, #12]
   240f8:	60b9      	str	r1, [r7, #8]
   240fa:	1dbb      	adds	r3, r7, #6
   240fc:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   240fe:	2317      	movs	r3, #23
   24100:	18fc      	adds	r4, r7, r3
   24102:	1dbb      	adds	r3, r7, #6
   24104:	881a      	ldrh	r2, [r3, #0]
   24106:	68b9      	ldr	r1, [r7, #8]
   24108:	68fb      	ldr	r3, [r7, #12]
   2410a:	0018      	movs	r0, r3
   2410c:	4b0d      	ldr	r3, [pc, #52]	; (24144 <nm_spi_read_block+0x54>)
   2410e:	4798      	blx	r3
   24110:	0003      	movs	r3, r0
   24112:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   24114:	2317      	movs	r3, #23
   24116:	18fb      	adds	r3, r7, r3
   24118:	781b      	ldrb	r3, [r3, #0]
   2411a:	b25b      	sxtb	r3, r3
   2411c:	2b01      	cmp	r3, #1
   2411e:	d104      	bne.n	2412a <nm_spi_read_block+0x3a>
   24120:	2317      	movs	r3, #23
   24122:	18fb      	adds	r3, r7, r3
   24124:	2200      	movs	r2, #0
   24126:	701a      	strb	r2, [r3, #0]
   24128:	e003      	b.n	24132 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   2412a:	2317      	movs	r3, #23
   2412c:	18fb      	adds	r3, r7, r3
   2412e:	22fa      	movs	r2, #250	; 0xfa
   24130:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   24132:	2317      	movs	r3, #23
   24134:	18fb      	adds	r3, r7, r3
   24136:	781b      	ldrb	r3, [r3, #0]
   24138:	b25b      	sxtb	r3, r3
}
   2413a:	0018      	movs	r0, r3
   2413c:	46bd      	mov	sp, r7
   2413e:	b007      	add	sp, #28
   24140:	bd90      	pop	{r4, r7, pc}
   24142:	46c0      	nop			; (mov r8, r8)
   24144:	00023d39 	.word	0x00023d39

00024148 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   24148:	b590      	push	{r4, r7, lr}
   2414a:	b087      	sub	sp, #28
   2414c:	af00      	add	r7, sp, #0
   2414e:	60f8      	str	r0, [r7, #12]
   24150:	60b9      	str	r1, [r7, #8]
   24152:	1dbb      	adds	r3, r7, #6
   24154:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   24156:	2317      	movs	r3, #23
   24158:	18fc      	adds	r4, r7, r3
   2415a:	1dbb      	adds	r3, r7, #6
   2415c:	881a      	ldrh	r2, [r3, #0]
   2415e:	68b9      	ldr	r1, [r7, #8]
   24160:	68fb      	ldr	r3, [r7, #12]
   24162:	0018      	movs	r0, r3
   24164:	4b0d      	ldr	r3, [pc, #52]	; (2419c <nm_spi_write_block+0x54>)
   24166:	4798      	blx	r3
   24168:	0003      	movs	r3, r0
   2416a:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   2416c:	2317      	movs	r3, #23
   2416e:	18fb      	adds	r3, r7, r3
   24170:	781b      	ldrb	r3, [r3, #0]
   24172:	b25b      	sxtb	r3, r3
   24174:	2b01      	cmp	r3, #1
   24176:	d104      	bne.n	24182 <nm_spi_write_block+0x3a>
   24178:	2317      	movs	r3, #23
   2417a:	18fb      	adds	r3, r7, r3
   2417c:	2200      	movs	r2, #0
   2417e:	701a      	strb	r2, [r3, #0]
   24180:	e003      	b.n	2418a <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24182:	2317      	movs	r3, #23
   24184:	18fb      	adds	r3, r7, r3
   24186:	22fa      	movs	r2, #250	; 0xfa
   24188:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   2418a:	2317      	movs	r3, #23
   2418c:	18fb      	adds	r3, r7, r3
   2418e:	781b      	ldrb	r3, [r3, #0]
   24190:	b25b      	sxtb	r3, r3
}
   24192:	0018      	movs	r0, r3
   24194:	46bd      	mov	sp, r7
   24196:	b007      	add	sp, #28
   24198:	bd90      	pop	{r4, r7, pc}
   2419a:	46c0      	nop			; (mov r8, r8)
   2419c:	00023a15 	.word	0x00023a15

000241a0 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   241a0:	b590      	push	{r4, r7, lr}
   241a2:	b089      	sub	sp, #36	; 0x24
   241a4:	af00      	add	r7, sp, #0
   241a6:	60b9      	str	r1, [r7, #8]
   241a8:	0011      	movs	r1, r2
   241aa:	607b      	str	r3, [r7, #4]
   241ac:	230f      	movs	r3, #15
   241ae:	18fb      	adds	r3, r7, r3
   241b0:	1c02      	adds	r2, r0, #0
   241b2:	701a      	strb	r2, [r3, #0]
   241b4:	230e      	movs	r3, #14
   241b6:	18fb      	adds	r3, r7, r3
   241b8:	1c0a      	adds	r2, r1, #0
   241ba:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   241bc:	2330      	movs	r3, #48	; 0x30
   241be:	18fb      	adds	r3, r7, r3
   241c0:	881b      	ldrh	r3, [r3, #0]
   241c2:	2b00      	cmp	r3, #0
   241c4:	d100      	bne.n	241c8 <Socket_ReadSocketData+0x28>
   241c6:	e0d7      	b.n	24378 <Socket_ReadSocketData+0x1d8>
   241c8:	230f      	movs	r3, #15
   241ca:	18fb      	adds	r3, r7, r3
   241cc:	2200      	movs	r2, #0
   241ce:	569a      	ldrsb	r2, [r3, r2]
   241d0:	4b6b      	ldr	r3, [pc, #428]	; (24380 <Socket_ReadSocketData+0x1e0>)
   241d2:	0112      	lsls	r2, r2, #4
   241d4:	58d3      	ldr	r3, [r2, r3]
   241d6:	2b00      	cmp	r3, #0
   241d8:	d100      	bne.n	241dc <Socket_ReadSocketData+0x3c>
   241da:	e0cd      	b.n	24378 <Socket_ReadSocketData+0x1d8>
   241dc:	230f      	movs	r3, #15
   241de:	18fb      	adds	r3, r7, r3
   241e0:	781b      	ldrb	r3, [r3, #0]
   241e2:	b25b      	sxtb	r3, r3
   241e4:	4a66      	ldr	r2, [pc, #408]	; (24380 <Socket_ReadSocketData+0x1e0>)
   241e6:	011b      	lsls	r3, r3, #4
   241e8:	18d3      	adds	r3, r2, r3
   241ea:	3304      	adds	r3, #4
   241ec:	881b      	ldrh	r3, [r3, #0]
   241ee:	b29b      	uxth	r3, r3
   241f0:	2b00      	cmp	r3, #0
   241f2:	d100      	bne.n	241f6 <Socket_ReadSocketData+0x56>
   241f4:	e0c0      	b.n	24378 <Socket_ReadSocketData+0x1d8>
   241f6:	230f      	movs	r3, #15
   241f8:	18fb      	adds	r3, r7, r3
   241fa:	781b      	ldrb	r3, [r3, #0]
   241fc:	b25b      	sxtb	r3, r3
   241fe:	4a60      	ldr	r2, [pc, #384]	; (24380 <Socket_ReadSocketData+0x1e0>)
   24200:	011b      	lsls	r3, r3, #4
   24202:	18d3      	adds	r3, r2, r3
   24204:	330a      	adds	r3, #10
   24206:	781b      	ldrb	r3, [r3, #0]
   24208:	b2db      	uxtb	r3, r3
   2420a:	2b01      	cmp	r3, #1
   2420c:	d000      	beq.n	24210 <Socket_ReadSocketData+0x70>
   2420e:	e0b3      	b.n	24378 <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   24210:	687b      	ldr	r3, [r7, #4]
   24212:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   24214:	68bb      	ldr	r3, [r7, #8]
   24216:	2230      	movs	r2, #48	; 0x30
   24218:	18ba      	adds	r2, r7, r2
   2421a:	8812      	ldrh	r2, [r2, #0]
   2421c:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   2421e:	2319      	movs	r3, #25
   24220:	18fb      	adds	r3, r7, r3
   24222:	2201      	movs	r2, #1
   24224:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   24226:	231a      	movs	r3, #26
   24228:	18fb      	adds	r3, r7, r3
   2422a:	2230      	movs	r2, #48	; 0x30
   2422c:	18ba      	adds	r2, r7, r2
   2422e:	8812      	ldrh	r2, [r2, #0]
   24230:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   24232:	230f      	movs	r3, #15
   24234:	18fb      	adds	r3, r7, r3
   24236:	781b      	ldrb	r3, [r3, #0]
   24238:	b25b      	sxtb	r3, r3
   2423a:	4a51      	ldr	r2, [pc, #324]	; (24380 <Socket_ReadSocketData+0x1e0>)
   2423c:	011b      	lsls	r3, r3, #4
   2423e:	18d3      	adds	r3, r2, r3
   24240:	3304      	adds	r3, #4
   24242:	881b      	ldrh	r3, [r3, #0]
   24244:	b29b      	uxth	r3, r3
   24246:	221a      	movs	r2, #26
   24248:	18ba      	adds	r2, r7, r2
   2424a:	8812      	ldrh	r2, [r2, #0]
   2424c:	1ad3      	subs	r3, r2, r3
   2424e:	b29a      	uxth	r2, r3
   24250:	2316      	movs	r3, #22
   24252:	18fb      	adds	r3, r7, r3
   24254:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   24256:	2316      	movs	r3, #22
   24258:	18fb      	adds	r3, r7, r3
   2425a:	2200      	movs	r2, #0
   2425c:	5e9b      	ldrsh	r3, [r3, r2]
   2425e:	2b00      	cmp	r3, #0
   24260:	dd0f      	ble.n	24282 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   24262:	2319      	movs	r3, #25
   24264:	18fb      	adds	r3, r7, r3
   24266:	2200      	movs	r2, #0
   24268:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   2426a:	230f      	movs	r3, #15
   2426c:	18fb      	adds	r3, r7, r3
   2426e:	2200      	movs	r2, #0
   24270:	569a      	ldrsb	r2, [r3, r2]
   24272:	231a      	movs	r3, #26
   24274:	18fb      	adds	r3, r7, r3
   24276:	4942      	ldr	r1, [pc, #264]	; (24380 <Socket_ReadSocketData+0x1e0>)
   24278:	0112      	lsls	r2, r2, #4
   2427a:	188a      	adds	r2, r1, r2
   2427c:	3204      	adds	r2, #4
   2427e:	8812      	ldrh	r2, [r2, #0]
   24280:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   24282:	230f      	movs	r3, #15
   24284:	18fb      	adds	r3, r7, r3
   24286:	2200      	movs	r2, #0
   24288:	569a      	ldrsb	r2, [r3, r2]
   2428a:	4b3d      	ldr	r3, [pc, #244]	; (24380 <Socket_ReadSocketData+0x1e0>)
   2428c:	0112      	lsls	r2, r2, #4
   2428e:	58d1      	ldr	r1, [r2, r3]
   24290:	2319      	movs	r3, #25
   24292:	18fb      	adds	r3, r7, r3
   24294:	781c      	ldrb	r4, [r3, #0]
   24296:	231a      	movs	r3, #26
   24298:	18fb      	adds	r3, r7, r3
   2429a:	881a      	ldrh	r2, [r3, #0]
   2429c:	69f8      	ldr	r0, [r7, #28]
   2429e:	0023      	movs	r3, r4
   242a0:	4c38      	ldr	r4, [pc, #224]	; (24384 <Socket_ReadSocketData+0x1e4>)
   242a2:	47a0      	blx	r4
   242a4:	1e03      	subs	r3, r0, #0
   242a6:	d14f      	bne.n	24348 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   242a8:	230f      	movs	r3, #15
   242aa:	18fb      	adds	r3, r7, r3
   242ac:	2200      	movs	r2, #0
   242ae:	569a      	ldrsb	r2, [r3, r2]
   242b0:	4b33      	ldr	r3, [pc, #204]	; (24380 <Socket_ReadSocketData+0x1e0>)
   242b2:	0112      	lsls	r2, r2, #4
   242b4:	58d2      	ldr	r2, [r2, r3]
   242b6:	68bb      	ldr	r3, [r7, #8]
   242b8:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   242ba:	231a      	movs	r3, #26
   242bc:	18fb      	adds	r3, r7, r3
   242be:	2200      	movs	r2, #0
   242c0:	5e9a      	ldrsh	r2, [r3, r2]
   242c2:	68bb      	ldr	r3, [r7, #8]
   242c4:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   242c6:	68bb      	ldr	r3, [r7, #8]
   242c8:	88da      	ldrh	r2, [r3, #6]
   242ca:	231a      	movs	r3, #26
   242cc:	18fb      	adds	r3, r7, r3
   242ce:	881b      	ldrh	r3, [r3, #0]
   242d0:	1ad3      	subs	r3, r2, r3
   242d2:	b29a      	uxth	r2, r3
   242d4:	68bb      	ldr	r3, [r7, #8]
   242d6:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   242d8:	4b2b      	ldr	r3, [pc, #172]	; (24388 <Socket_ReadSocketData+0x1e8>)
   242da:	681b      	ldr	r3, [r3, #0]
   242dc:	2b00      	cmp	r3, #0
   242de:	d00b      	beq.n	242f8 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   242e0:	4b29      	ldr	r3, [pc, #164]	; (24388 <Socket_ReadSocketData+0x1e8>)
   242e2:	681b      	ldr	r3, [r3, #0]
   242e4:	68bc      	ldr	r4, [r7, #8]
   242e6:	220e      	movs	r2, #14
   242e8:	18ba      	adds	r2, r7, r2
   242ea:	7811      	ldrb	r1, [r2, #0]
   242ec:	220f      	movs	r2, #15
   242ee:	18ba      	adds	r2, r7, r2
   242f0:	2000      	movs	r0, #0
   242f2:	5610      	ldrsb	r0, [r2, r0]
   242f4:	0022      	movs	r2, r4
   242f6:	4798      	blx	r3

				u16ReadCount -= u16Read;
   242f8:	2330      	movs	r3, #48	; 0x30
   242fa:	18f9      	adds	r1, r7, r3
   242fc:	2330      	movs	r3, #48	; 0x30
   242fe:	18fa      	adds	r2, r7, r3
   24300:	231a      	movs	r3, #26
   24302:	18fb      	adds	r3, r7, r3
   24304:	8812      	ldrh	r2, [r2, #0]
   24306:	881b      	ldrh	r3, [r3, #0]
   24308:	1ad3      	subs	r3, r2, r3
   2430a:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   2430c:	231a      	movs	r3, #26
   2430e:	18fb      	adds	r3, r7, r3
   24310:	881b      	ldrh	r3, [r3, #0]
   24312:	69fa      	ldr	r2, [r7, #28]
   24314:	18d3      	adds	r3, r2, r3
   24316:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   24318:	230f      	movs	r3, #15
   2431a:	18fb      	adds	r3, r7, r3
   2431c:	781b      	ldrb	r3, [r3, #0]
   2431e:	b25b      	sxtb	r3, r3
   24320:	4a17      	ldr	r2, [pc, #92]	; (24380 <Socket_ReadSocketData+0x1e0>)
   24322:	011b      	lsls	r3, r3, #4
   24324:	18d3      	adds	r3, r2, r3
   24326:	330a      	adds	r3, #10
   24328:	781b      	ldrb	r3, [r3, #0]
   2432a:	b2db      	uxtb	r3, r3
   2432c:	2b00      	cmp	r3, #0
   2432e:	d11c      	bne.n	2436a <Socket_ReadSocketData+0x1ca>
   24330:	2330      	movs	r3, #48	; 0x30
   24332:	18fb      	adds	r3, r7, r3
   24334:	881b      	ldrh	r3, [r3, #0]
   24336:	2b00      	cmp	r3, #0
   24338:	d017      	beq.n	2436a <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   2433a:	2301      	movs	r3, #1
   2433c:	2200      	movs	r2, #0
   2433e:	2100      	movs	r1, #0
   24340:	2000      	movs	r0, #0
   24342:	4c10      	ldr	r4, [pc, #64]	; (24384 <Socket_ReadSocketData+0x1e4>)
   24344:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   24346:	e017      	b.n	24378 <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   24348:	4b10      	ldr	r3, [pc, #64]	; (2438c <Socket_ReadSocketData+0x1ec>)
   2434a:	0018      	movs	r0, r3
   2434c:	4b10      	ldr	r3, [pc, #64]	; (24390 <Socket_ReadSocketData+0x1f0>)
   2434e:	4798      	blx	r3
   24350:	2330      	movs	r3, #48	; 0x30
   24352:	18fb      	adds	r3, r7, r3
   24354:	881a      	ldrh	r2, [r3, #0]
   24356:	4b0f      	ldr	r3, [pc, #60]	; (24394 <Socket_ReadSocketData+0x1f4>)
   24358:	0011      	movs	r1, r2
   2435a:	0018      	movs	r0, r3
   2435c:	4b0c      	ldr	r3, [pc, #48]	; (24390 <Socket_ReadSocketData+0x1f0>)
   2435e:	4798      	blx	r3
   24360:	4b0d      	ldr	r3, [pc, #52]	; (24398 <Socket_ReadSocketData+0x1f8>)
   24362:	0018      	movs	r0, r3
   24364:	4b0a      	ldr	r3, [pc, #40]	; (24390 <Socket_ReadSocketData+0x1f0>)
   24366:	4798      	blx	r3
				break;
   24368:	e006      	b.n	24378 <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   2436a:	2330      	movs	r3, #48	; 0x30
   2436c:	18fb      	adds	r3, r7, r3
   2436e:	881b      	ldrh	r3, [r3, #0]
   24370:	2b00      	cmp	r3, #0
   24372:	d000      	beq.n	24376 <Socket_ReadSocketData+0x1d6>
   24374:	e753      	b.n	2421e <Socket_ReadSocketData+0x7e>
	}
}
   24376:	e7ff      	b.n	24378 <Socket_ReadSocketData+0x1d8>
   24378:	46c0      	nop			; (mov r8, r8)
   2437a:	46bd      	mov	sp, r7
   2437c:	b009      	add	sp, #36	; 0x24
   2437e:	bd90      	pop	{r4, r7, pc}
   24380:	200058b4 	.word	0x200058b4
   24384:	00020b99 	.word	0x00020b99
   24388:	20005964 	.word	0x20005964
   2438c:	00038aa4 	.word	0x00038aa4
   24390:	0001d2e9 	.word	0x0001d2e9
   24394:	00038ab0 	.word	0x00038ab0
   24398:	00038ac4 	.word	0x00038ac4

0002439c <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   2439c:	b590      	push	{r4, r7, lr}
   2439e:	b0bb      	sub	sp, #236	; 0xec
   243a0:	af02      	add	r7, sp, #8
   243a2:	603a      	str	r2, [r7, #0]
   243a4:	1dfb      	adds	r3, r7, #7
   243a6:	1c02      	adds	r2, r0, #0
   243a8:	701a      	strb	r2, [r3, #0]
   243aa:	1d3b      	adds	r3, r7, #4
   243ac:	1c0a      	adds	r2, r1, #0
   243ae:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   243b0:	1dfb      	adds	r3, r7, #7
   243b2:	781b      	ldrb	r3, [r3, #0]
   243b4:	2b41      	cmp	r3, #65	; 0x41
   243b6:	d003      	beq.n	243c0 <m2m_ip_cb+0x24>
   243b8:	1dfb      	adds	r3, r7, #7
   243ba:	781b      	ldrb	r3, [r3, #0]
   243bc:	2b54      	cmp	r3, #84	; 0x54
   243be:	d120      	bne.n	24402 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   243c0:	23cc      	movs	r3, #204	; 0xcc
   243c2:	18f9      	adds	r1, r7, r3
   243c4:	6838      	ldr	r0, [r7, #0]
   243c6:	2300      	movs	r3, #0
   243c8:	2204      	movs	r2, #4
   243ca:	4c98      	ldr	r4, [pc, #608]	; (2462c <m2m_ip_cb+0x290>)
   243cc:	47a0      	blx	r4
   243ce:	1e03      	subs	r3, r0, #0
   243d0:	d000      	beq.n	243d4 <m2m_ip_cb+0x38>
   243d2:	e275      	b.n	248c0 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   243d4:	23cc      	movs	r3, #204	; 0xcc
   243d6:	18fb      	adds	r3, r7, r3
   243d8:	2201      	movs	r2, #1
   243da:	569a      	ldrsb	r2, [r3, r2]
   243dc:	23c8      	movs	r3, #200	; 0xc8
   243de:	18fb      	adds	r3, r7, r3
   243e0:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   243e2:	4b93      	ldr	r3, [pc, #588]	; (24630 <m2m_ip_cb+0x294>)
   243e4:	681b      	ldr	r3, [r3, #0]
   243e6:	2b00      	cmp	r3, #0
   243e8:	d100      	bne.n	243ec <m2m_ip_cb+0x50>
   243ea:	e269      	b.n	248c0 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   243ec:	4b90      	ldr	r3, [pc, #576]	; (24630 <m2m_ip_cb+0x294>)
   243ee:	681b      	ldr	r3, [r3, #0]
   243f0:	22cc      	movs	r2, #204	; 0xcc
   243f2:	18ba      	adds	r2, r7, r2
   243f4:	2000      	movs	r0, #0
   243f6:	5610      	ldrsb	r0, [r2, r0]
   243f8:	22c8      	movs	r2, #200	; 0xc8
   243fa:	18ba      	adds	r2, r7, r2
   243fc:	2101      	movs	r1, #1
   243fe:	4798      	blx	r3
	{
   24400:	e25e      	b.n	248c0 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   24402:	1dfb      	adds	r3, r7, #7
   24404:	781b      	ldrb	r3, [r3, #0]
   24406:	2b42      	cmp	r3, #66	; 0x42
   24408:	d120      	bne.n	2444c <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   2440a:	23c4      	movs	r3, #196	; 0xc4
   2440c:	18f9      	adds	r1, r7, r3
   2440e:	6838      	ldr	r0, [r7, #0]
   24410:	2300      	movs	r3, #0
   24412:	2204      	movs	r2, #4
   24414:	4c85      	ldr	r4, [pc, #532]	; (2462c <m2m_ip_cb+0x290>)
   24416:	47a0      	blx	r4
   24418:	1e03      	subs	r3, r0, #0
   2441a:	d000      	beq.n	2441e <m2m_ip_cb+0x82>
   2441c:	e257      	b.n	248ce <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   2441e:	23c4      	movs	r3, #196	; 0xc4
   24420:	18fb      	adds	r3, r7, r3
   24422:	2201      	movs	r2, #1
   24424:	569a      	ldrsb	r2, [r3, r2]
   24426:	23c0      	movs	r3, #192	; 0xc0
   24428:	18fb      	adds	r3, r7, r3
   2442a:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   2442c:	4b80      	ldr	r3, [pc, #512]	; (24630 <m2m_ip_cb+0x294>)
   2442e:	681b      	ldr	r3, [r3, #0]
   24430:	2b00      	cmp	r3, #0
   24432:	d100      	bne.n	24436 <m2m_ip_cb+0x9a>
   24434:	e24b      	b.n	248ce <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   24436:	4b7e      	ldr	r3, [pc, #504]	; (24630 <m2m_ip_cb+0x294>)
   24438:	681b      	ldr	r3, [r3, #0]
   2443a:	22c4      	movs	r2, #196	; 0xc4
   2443c:	18ba      	adds	r2, r7, r2
   2443e:	2000      	movs	r0, #0
   24440:	5610      	ldrsb	r0, [r2, r0]
   24442:	22c0      	movs	r2, #192	; 0xc0
   24444:	18ba      	adds	r2, r7, r2
   24446:	2102      	movs	r1, #2
   24448:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   2444a:	e240      	b.n	248ce <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   2444c:	1dfb      	adds	r3, r7, #7
   2444e:	781b      	ldrb	r3, [r3, #0]
   24450:	2b43      	cmp	r3, #67	; 0x43
   24452:	d000      	beq.n	24456 <m2m_ip_cb+0xba>
   24454:	e086      	b.n	24564 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   24456:	23b4      	movs	r3, #180	; 0xb4
   24458:	18f9      	adds	r1, r7, r3
   2445a:	6838      	ldr	r0, [r7, #0]
   2445c:	2300      	movs	r3, #0
   2445e:	220c      	movs	r2, #12
   24460:	4c72      	ldr	r4, [pc, #456]	; (2462c <m2m_ip_cb+0x290>)
   24462:	47a0      	blx	r4
   24464:	1e03      	subs	r3, r0, #0
   24466:	d000      	beq.n	2446a <m2m_ip_cb+0xce>
   24468:	e231      	b.n	248ce <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   2446a:	23b4      	movs	r3, #180	; 0xb4
   2446c:	18fb      	adds	r3, r7, r3
   2446e:	7a5b      	ldrb	r3, [r3, #9]
   24470:	b25b      	sxtb	r3, r3
   24472:	2b00      	cmp	r3, #0
   24474:	db4f      	blt.n	24516 <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   24476:	23b4      	movs	r3, #180	; 0xb4
   24478:	18fb      	adds	r3, r7, r3
   2447a:	7a5b      	ldrb	r3, [r3, #9]
   2447c:	b25b      	sxtb	r3, r3
   2447e:	0018      	movs	r0, r3
   24480:	23b4      	movs	r3, #180	; 0xb4
   24482:	18fb      	adds	r3, r7, r3
   24484:	7a1b      	ldrb	r3, [r3, #8]
   24486:	b25b      	sxtb	r3, r3
   24488:	4a6a      	ldr	r2, [pc, #424]	; (24634 <m2m_ip_cb+0x298>)
   2448a:	011b      	lsls	r3, r3, #4
   2448c:	18d3      	adds	r3, r2, r3
   2448e:	330b      	adds	r3, #11
   24490:	781b      	ldrb	r3, [r3, #0]
   24492:	b2d9      	uxtb	r1, r3
   24494:	4a67      	ldr	r2, [pc, #412]	; (24634 <m2m_ip_cb+0x298>)
   24496:	0103      	lsls	r3, r0, #4
   24498:	18d3      	adds	r3, r2, r3
   2449a:	330b      	adds	r3, #11
   2449c:	1c0a      	adds	r2, r1, #0
   2449e:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   244a0:	23b4      	movs	r3, #180	; 0xb4
   244a2:	18fb      	adds	r3, r7, r3
   244a4:	7a5b      	ldrb	r3, [r3, #9]
   244a6:	b25b      	sxtb	r3, r3
   244a8:	4a62      	ldr	r2, [pc, #392]	; (24634 <m2m_ip_cb+0x298>)
   244aa:	011b      	lsls	r3, r3, #4
   244ac:	18d3      	adds	r3, r2, r3
   244ae:	330a      	adds	r3, #10
   244b0:	2201      	movs	r2, #1
   244b2:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   244b4:	23b4      	movs	r3, #180	; 0xb4
   244b6:	18fb      	adds	r3, r7, r3
   244b8:	7a5b      	ldrb	r3, [r3, #9]
   244ba:	b25b      	sxtb	r3, r3
   244bc:	0018      	movs	r0, r3
   244be:	23b4      	movs	r3, #180	; 0xb4
   244c0:	18fb      	adds	r3, r7, r3
   244c2:	895b      	ldrh	r3, [r3, #10]
   244c4:	3b08      	subs	r3, #8
   244c6:	b299      	uxth	r1, r3
   244c8:	4a5a      	ldr	r2, [pc, #360]	; (24634 <m2m_ip_cb+0x298>)
   244ca:	0103      	lsls	r3, r0, #4
   244cc:	18d3      	adds	r3, r2, r3
   244ce:	3308      	adds	r3, #8
   244d0:	1c0a      	adds	r2, r1, #0
   244d2:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   244d4:	4b58      	ldr	r3, [pc, #352]	; (24638 <m2m_ip_cb+0x29c>)
   244d6:	881b      	ldrh	r3, [r3, #0]
   244d8:	b29b      	uxth	r3, r3
   244da:	3301      	adds	r3, #1
   244dc:	b29a      	uxth	r2, r3
   244de:	4b56      	ldr	r3, [pc, #344]	; (24638 <m2m_ip_cb+0x29c>)
   244e0:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   244e2:	4b55      	ldr	r3, [pc, #340]	; (24638 <m2m_ip_cb+0x29c>)
   244e4:	881b      	ldrh	r3, [r3, #0]
   244e6:	b29b      	uxth	r3, r3
   244e8:	2b00      	cmp	r3, #0
   244ea:	d106      	bne.n	244fa <m2m_ip_cb+0x15e>
					++gu16SessionID;
   244ec:	4b52      	ldr	r3, [pc, #328]	; (24638 <m2m_ip_cb+0x29c>)
   244ee:	881b      	ldrh	r3, [r3, #0]
   244f0:	b29b      	uxth	r3, r3
   244f2:	3301      	adds	r3, #1
   244f4:	b29a      	uxth	r2, r3
   244f6:	4b50      	ldr	r3, [pc, #320]	; (24638 <m2m_ip_cb+0x29c>)
   244f8:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   244fa:	23b4      	movs	r3, #180	; 0xb4
   244fc:	18fb      	adds	r3, r7, r3
   244fe:	7a5b      	ldrb	r3, [r3, #9]
   24500:	b25b      	sxtb	r3, r3
   24502:	0018      	movs	r0, r3
   24504:	4b4c      	ldr	r3, [pc, #304]	; (24638 <m2m_ip_cb+0x29c>)
   24506:	881b      	ldrh	r3, [r3, #0]
   24508:	b299      	uxth	r1, r3
   2450a:	4a4a      	ldr	r2, [pc, #296]	; (24634 <m2m_ip_cb+0x298>)
   2450c:	0103      	lsls	r3, r0, #4
   2450e:	18d3      	adds	r3, r2, r3
   24510:	3306      	adds	r3, #6
   24512:	1c0a      	adds	r2, r1, #0
   24514:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   24516:	23b4      	movs	r3, #180	; 0xb4
   24518:	18fb      	adds	r3, r7, r3
   2451a:	2209      	movs	r2, #9
   2451c:	569a      	ldrsb	r2, [r3, r2]
   2451e:	23a0      	movs	r3, #160	; 0xa0
   24520:	18fb      	adds	r3, r7, r3
   24522:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   24524:	23a0      	movs	r3, #160	; 0xa0
   24526:	18fb      	adds	r3, r7, r3
   24528:	2202      	movs	r2, #2
   2452a:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   2452c:	23b4      	movs	r3, #180	; 0xb4
   2452e:	18fb      	adds	r3, r7, r3
   24530:	885a      	ldrh	r2, [r3, #2]
   24532:	23a0      	movs	r3, #160	; 0xa0
   24534:	18fb      	adds	r3, r7, r3
   24536:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   24538:	23b4      	movs	r3, #180	; 0xb4
   2453a:	18fb      	adds	r3, r7, r3
   2453c:	685a      	ldr	r2, [r3, #4]
   2453e:	23a0      	movs	r3, #160	; 0xa0
   24540:	18fb      	adds	r3, r7, r3
   24542:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   24544:	4b3a      	ldr	r3, [pc, #232]	; (24630 <m2m_ip_cb+0x294>)
   24546:	681b      	ldr	r3, [r3, #0]
   24548:	2b00      	cmp	r3, #0
   2454a:	d100      	bne.n	2454e <m2m_ip_cb+0x1b2>
   2454c:	e1bf      	b.n	248ce <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   2454e:	4b38      	ldr	r3, [pc, #224]	; (24630 <m2m_ip_cb+0x294>)
   24550:	681b      	ldr	r3, [r3, #0]
   24552:	22b4      	movs	r2, #180	; 0xb4
   24554:	18ba      	adds	r2, r7, r2
   24556:	2008      	movs	r0, #8
   24558:	5610      	ldrsb	r0, [r2, r0]
   2455a:	22a0      	movs	r2, #160	; 0xa0
   2455c:	18ba      	adds	r2, r7, r2
   2455e:	2104      	movs	r1, #4
   24560:	4798      	blx	r3
}
   24562:	e1b4      	b.n	248ce <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   24564:	1dfb      	adds	r3, r7, #7
   24566:	781b      	ldrb	r3, [r3, #0]
   24568:	2b44      	cmp	r3, #68	; 0x44
   2456a:	d003      	beq.n	24574 <m2m_ip_cb+0x1d8>
   2456c:	1dfb      	adds	r3, r7, #7
   2456e:	781b      	ldrb	r3, [r3, #0]
   24570:	2b4b      	cmp	r3, #75	; 0x4b
   24572:	d13d      	bne.n	245f0 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   24574:	239c      	movs	r3, #156	; 0x9c
   24576:	18f9      	adds	r1, r7, r3
   24578:	6838      	ldr	r0, [r7, #0]
   2457a:	2300      	movs	r3, #0
   2457c:	2204      	movs	r2, #4
   2457e:	4c2b      	ldr	r4, [pc, #172]	; (2462c <m2m_ip_cb+0x290>)
   24580:	47a0      	blx	r4
   24582:	1e03      	subs	r3, r0, #0
   24584:	d000      	beq.n	24588 <m2m_ip_cb+0x1ec>
   24586:	e19d      	b.n	248c4 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   24588:	239c      	movs	r3, #156	; 0x9c
   2458a:	18fb      	adds	r3, r7, r3
   2458c:	2200      	movs	r2, #0
   2458e:	569a      	ldrsb	r2, [r3, r2]
   24590:	2398      	movs	r3, #152	; 0x98
   24592:	18fb      	adds	r3, r7, r3
   24594:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   24596:	239c      	movs	r3, #156	; 0x9c
   24598:	18fb      	adds	r3, r7, r3
   2459a:	2201      	movs	r2, #1
   2459c:	569a      	ldrsb	r2, [r3, r2]
   2459e:	2398      	movs	r3, #152	; 0x98
   245a0:	18fb      	adds	r3, r7, r3
   245a2:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   245a4:	239c      	movs	r3, #156	; 0x9c
   245a6:	18fb      	adds	r3, r7, r3
   245a8:	785b      	ldrb	r3, [r3, #1]
   245aa:	b25b      	sxtb	r3, r3
   245ac:	2b00      	cmp	r3, #0
   245ae:	d10f      	bne.n	245d0 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   245b0:	239c      	movs	r3, #156	; 0x9c
   245b2:	18fb      	adds	r3, r7, r3
   245b4:	781b      	ldrb	r3, [r3, #0]
   245b6:	b25b      	sxtb	r3, r3
   245b8:	0018      	movs	r0, r3
   245ba:	239c      	movs	r3, #156	; 0x9c
   245bc:	18fb      	adds	r3, r7, r3
   245be:	885b      	ldrh	r3, [r3, #2]
   245c0:	3b08      	subs	r3, #8
   245c2:	b299      	uxth	r1, r3
   245c4:	4a1b      	ldr	r2, [pc, #108]	; (24634 <m2m_ip_cb+0x298>)
   245c6:	0103      	lsls	r3, r0, #4
   245c8:	18d3      	adds	r3, r2, r3
   245ca:	3308      	adds	r3, #8
   245cc:	1c0a      	adds	r2, r1, #0
   245ce:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   245d0:	4b17      	ldr	r3, [pc, #92]	; (24630 <m2m_ip_cb+0x294>)
   245d2:	681b      	ldr	r3, [r3, #0]
   245d4:	2b00      	cmp	r3, #0
   245d6:	d100      	bne.n	245da <m2m_ip_cb+0x23e>
   245d8:	e174      	b.n	248c4 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   245da:	4b15      	ldr	r3, [pc, #84]	; (24630 <m2m_ip_cb+0x294>)
   245dc:	681b      	ldr	r3, [r3, #0]
   245de:	229c      	movs	r2, #156	; 0x9c
   245e0:	18ba      	adds	r2, r7, r2
   245e2:	2000      	movs	r0, #0
   245e4:	5610      	ldrsb	r0, [r2, r0]
   245e6:	2298      	movs	r2, #152	; 0x98
   245e8:	18ba      	adds	r2, r7, r2
   245ea:	2105      	movs	r1, #5
   245ec:	4798      	blx	r3
	{
   245ee:	e169      	b.n	248c4 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   245f0:	1dfb      	adds	r3, r7, #7
   245f2:	781b      	ldrb	r3, [r3, #0]
   245f4:	2b4a      	cmp	r3, #74	; 0x4a
   245f6:	d123      	bne.n	24640 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   245f8:	230c      	movs	r3, #12
   245fa:	18f9      	adds	r1, r7, r3
   245fc:	6838      	ldr	r0, [r7, #0]
   245fe:	2300      	movs	r3, #0
   24600:	2244      	movs	r2, #68	; 0x44
   24602:	4c0a      	ldr	r4, [pc, #40]	; (2462c <m2m_ip_cb+0x290>)
   24604:	47a0      	blx	r4
   24606:	1e03      	subs	r3, r0, #0
   24608:	d000      	beq.n	2460c <m2m_ip_cb+0x270>
   2460a:	e160      	b.n	248ce <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   2460c:	4b0b      	ldr	r3, [pc, #44]	; (2463c <m2m_ip_cb+0x2a0>)
   2460e:	681b      	ldr	r3, [r3, #0]
   24610:	2b00      	cmp	r3, #0
   24612:	d100      	bne.n	24616 <m2m_ip_cb+0x27a>
   24614:	e15b      	b.n	248ce <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   24616:	4b09      	ldr	r3, [pc, #36]	; (2463c <m2m_ip_cb+0x2a0>)
   24618:	681a      	ldr	r2, [r3, #0]
   2461a:	230c      	movs	r3, #12
   2461c:	18fb      	adds	r3, r7, r3
   2461e:	6c19      	ldr	r1, [r3, #64]	; 0x40
   24620:	230c      	movs	r3, #12
   24622:	18fb      	adds	r3, r7, r3
   24624:	0018      	movs	r0, r3
   24626:	4790      	blx	r2
}
   24628:	e151      	b.n	248ce <m2m_ip_cb+0x532>
   2462a:	46c0      	nop			; (mov r8, r8)
   2462c:	00020b99 	.word	0x00020b99
   24630:	20005964 	.word	0x20005964
   24634:	200058b4 	.word	0x200058b4
   24638:	20004116 	.word	0x20004116
   2463c:	2000596c 	.word	0x2000596c
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   24640:	1dfb      	adds	r3, r7, #7
   24642:	781b      	ldrb	r3, [r3, #0]
   24644:	2b46      	cmp	r3, #70	; 0x46
   24646:	d008      	beq.n	2465a <m2m_ip_cb+0x2be>
   24648:	1dfb      	adds	r3, r7, #7
   2464a:	781b      	ldrb	r3, [r3, #0]
   2464c:	2b48      	cmp	r3, #72	; 0x48
   2464e:	d004      	beq.n	2465a <m2m_ip_cb+0x2be>
   24650:	1dfb      	adds	r3, r7, #7
   24652:	781b      	ldrb	r3, [r3, #0]
   24654:	2b4d      	cmp	r3, #77	; 0x4d
   24656:	d000      	beq.n	2465a <m2m_ip_cb+0x2be>
   24658:	e0b4      	b.n	247c4 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   2465a:	23df      	movs	r3, #223	; 0xdf
   2465c:	18fb      	adds	r3, r7, r3
   2465e:	2206      	movs	r2, #6
   24660:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   24662:	1dfb      	adds	r3, r7, #7
   24664:	781b      	ldrb	r3, [r3, #0]
   24666:	2b48      	cmp	r3, #72	; 0x48
   24668:	d103      	bne.n	24672 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   2466a:	23df      	movs	r3, #223	; 0xdf
   2466c:	18fb      	adds	r3, r7, r3
   2466e:	2209      	movs	r2, #9
   24670:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   24672:	23d8      	movs	r3, #216	; 0xd8
   24674:	18fb      	adds	r3, r7, r3
   24676:	2210      	movs	r2, #16
   24678:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   2467a:	23d8      	movs	r3, #216	; 0xd8
   2467c:	18fb      	adds	r3, r7, r3
   2467e:	881a      	ldrh	r2, [r3, #0]
   24680:	2388      	movs	r3, #136	; 0x88
   24682:	18f9      	adds	r1, r7, r3
   24684:	6838      	ldr	r0, [r7, #0]
   24686:	2300      	movs	r3, #0
   24688:	4c93      	ldr	r4, [pc, #588]	; (248d8 <m2m_ip_cb+0x53c>)
   2468a:	47a0      	blx	r4
   2468c:	1e03      	subs	r3, r0, #0
   2468e:	d000      	beq.n	24692 <m2m_ip_cb+0x2f6>
   24690:	e11a      	b.n	248c8 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   24692:	23d6      	movs	r3, #214	; 0xd6
   24694:	18fb      	adds	r3, r7, r3
   24696:	2200      	movs	r2, #0
   24698:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   2469a:	23d5      	movs	r3, #213	; 0xd5
   2469c:	18fb      	adds	r3, r7, r3
   2469e:	2288      	movs	r2, #136	; 0x88
   246a0:	18ba      	adds	r2, r7, r2
   246a2:	7b12      	ldrb	r2, [r2, #12]
   246a4:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   246a6:	23d6      	movs	r3, #214	; 0xd6
   246a8:	18fb      	adds	r3, r7, r3
   246aa:	2288      	movs	r2, #136	; 0x88
   246ac:	18ba      	adds	r2, r7, r2
   246ae:	89d2      	ldrh	r2, [r2, #14]
   246b0:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   246b2:	23d5      	movs	r3, #213	; 0xd5
   246b4:	18fb      	adds	r3, r7, r3
   246b6:	781b      	ldrb	r3, [r3, #0]
   246b8:	b25b      	sxtb	r3, r3
   246ba:	4a88      	ldr	r2, [pc, #544]	; (248dc <m2m_ip_cb+0x540>)
   246bc:	011b      	lsls	r3, r3, #4
   246be:	18d3      	adds	r3, r2, r3
   246c0:	330c      	adds	r3, #12
   246c2:	2200      	movs	r2, #0
   246c4:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   246c6:	23d2      	movs	r3, #210	; 0xd2
   246c8:	18fb      	adds	r3, r7, r3
   246ca:	2288      	movs	r2, #136	; 0x88
   246cc:	18ba      	adds	r2, r7, r2
   246ce:	8912      	ldrh	r2, [r2, #8]
   246d0:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   246d2:	23d0      	movs	r3, #208	; 0xd0
   246d4:	18fb      	adds	r3, r7, r3
   246d6:	2288      	movs	r2, #136	; 0x88
   246d8:	18ba      	adds	r2, r7, r2
   246da:	8952      	ldrh	r2, [r2, #10]
   246dc:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   246de:	2388      	movs	r3, #136	; 0x88
   246e0:	18fb      	adds	r3, r7, r3
   246e2:	885a      	ldrh	r2, [r3, #2]
   246e4:	2370      	movs	r3, #112	; 0x70
   246e6:	18fb      	adds	r3, r7, r3
   246e8:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   246ea:	2388      	movs	r3, #136	; 0x88
   246ec:	18fb      	adds	r3, r7, r3
   246ee:	685a      	ldr	r2, [r3, #4]
   246f0:	2370      	movs	r3, #112	; 0x70
   246f2:	18fb      	adds	r3, r7, r3
   246f4:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   246f6:	23d5      	movs	r3, #213	; 0xd5
   246f8:	18fb      	adds	r3, r7, r3
   246fa:	781b      	ldrb	r3, [r3, #0]
   246fc:	b25b      	sxtb	r3, r3
   246fe:	4a77      	ldr	r2, [pc, #476]	; (248dc <m2m_ip_cb+0x540>)
   24700:	011b      	lsls	r3, r3, #4
   24702:	18d3      	adds	r3, r2, r3
   24704:	3306      	adds	r3, #6
   24706:	881b      	ldrh	r3, [r3, #0]
   24708:	b29b      	uxth	r3, r3
   2470a:	22d6      	movs	r2, #214	; 0xd6
   2470c:	18ba      	adds	r2, r7, r2
   2470e:	8812      	ldrh	r2, [r2, #0]
   24710:	429a      	cmp	r2, r3
   24712:	d148      	bne.n	247a6 <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   24714:	23d2      	movs	r3, #210	; 0xd2
   24716:	18fb      	adds	r3, r7, r3
   24718:	2200      	movs	r2, #0
   2471a:	5e9b      	ldrsh	r3, [r3, r2]
   2471c:	2b00      	cmp	r3, #0
   2471e:	dd25      	ble.n	2476c <m2m_ip_cb+0x3d0>
   24720:	23d2      	movs	r3, #210	; 0xd2
   24722:	18fb      	adds	r3, r7, r3
   24724:	2200      	movs	r2, #0
   24726:	5e9a      	ldrsh	r2, [r3, r2]
   24728:	1d3b      	adds	r3, r7, #4
   2472a:	881b      	ldrh	r3, [r3, #0]
   2472c:	429a      	cmp	r2, r3
   2472e:	da1d      	bge.n	2476c <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   24730:	23d0      	movs	r3, #208	; 0xd0
   24732:	18fb      	adds	r3, r7, r3
   24734:	881b      	ldrh	r3, [r3, #0]
   24736:	683a      	ldr	r2, [r7, #0]
   24738:	18d3      	adds	r3, r2, r3
   2473a:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   2473c:	23d8      	movs	r3, #216	; 0xd8
   2473e:	18fb      	adds	r3, r7, r3
   24740:	22d2      	movs	r2, #210	; 0xd2
   24742:	18ba      	adds	r2, r7, r2
   24744:	8812      	ldrh	r2, [r2, #0]
   24746:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   24748:	683c      	ldr	r4, [r7, #0]
   2474a:	23df      	movs	r3, #223	; 0xdf
   2474c:	18fb      	adds	r3, r7, r3
   2474e:	781a      	ldrb	r2, [r3, #0]
   24750:	2370      	movs	r3, #112	; 0x70
   24752:	18f9      	adds	r1, r7, r3
   24754:	23d5      	movs	r3, #213	; 0xd5
   24756:	18fb      	adds	r3, r7, r3
   24758:	2000      	movs	r0, #0
   2475a:	5618      	ldrsb	r0, [r3, r0]
   2475c:	23d8      	movs	r3, #216	; 0xd8
   2475e:	18fb      	adds	r3, r7, r3
   24760:	881b      	ldrh	r3, [r3, #0]
   24762:	9300      	str	r3, [sp, #0]
   24764:	0023      	movs	r3, r4
   24766:	4c5e      	ldr	r4, [pc, #376]	; (248e0 <m2m_ip_cb+0x544>)
   24768:	47a0      	blx	r4
	{
   2476a:	e0ad      	b.n	248c8 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   2476c:	2370      	movs	r3, #112	; 0x70
   2476e:	18fb      	adds	r3, r7, r3
   24770:	22d2      	movs	r2, #210	; 0xd2
   24772:	18ba      	adds	r2, r7, r2
   24774:	8812      	ldrh	r2, [r2, #0]
   24776:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   24778:	2370      	movs	r3, #112	; 0x70
   2477a:	18fb      	adds	r3, r7, r3
   2477c:	2200      	movs	r2, #0
   2477e:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   24780:	4b58      	ldr	r3, [pc, #352]	; (248e4 <m2m_ip_cb+0x548>)
   24782:	681b      	ldr	r3, [r3, #0]
   24784:	2b00      	cmp	r3, #0
   24786:	d100      	bne.n	2478a <m2m_ip_cb+0x3ee>
   24788:	e09e      	b.n	248c8 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   2478a:	4b56      	ldr	r3, [pc, #344]	; (248e4 <m2m_ip_cb+0x548>)
   2478c:	681b      	ldr	r3, [r3, #0]
   2478e:	2270      	movs	r2, #112	; 0x70
   24790:	18bc      	adds	r4, r7, r2
   24792:	22df      	movs	r2, #223	; 0xdf
   24794:	18ba      	adds	r2, r7, r2
   24796:	7811      	ldrb	r1, [r2, #0]
   24798:	22d5      	movs	r2, #213	; 0xd5
   2479a:	18ba      	adds	r2, r7, r2
   2479c:	2000      	movs	r0, #0
   2479e:	5610      	ldrsb	r0, [r2, r0]
   247a0:	0022      	movs	r2, r4
   247a2:	4798      	blx	r3
	{
   247a4:	e090      	b.n	248c8 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   247a6:	23d8      	movs	r3, #216	; 0xd8
   247a8:	18fa      	adds	r2, r7, r3
   247aa:	1d3b      	adds	r3, r7, #4
   247ac:	8812      	ldrh	r2, [r2, #0]
   247ae:	881b      	ldrh	r3, [r3, #0]
   247b0:	429a      	cmp	r2, r3
   247b2:	d300      	bcc.n	247b6 <m2m_ip_cb+0x41a>
   247b4:	e088      	b.n	248c8 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   247b6:	2301      	movs	r3, #1
   247b8:	2200      	movs	r2, #0
   247ba:	2100      	movs	r1, #0
   247bc:	2000      	movs	r0, #0
   247be:	4c46      	ldr	r4, [pc, #280]	; (248d8 <m2m_ip_cb+0x53c>)
   247c0:	47a0      	blx	r4
	{
   247c2:	e081      	b.n	248c8 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   247c4:	1dfb      	adds	r3, r7, #7
   247c6:	781b      	ldrb	r3, [r3, #0]
   247c8:	2b45      	cmp	r3, #69	; 0x45
   247ca:	d007      	beq.n	247dc <m2m_ip_cb+0x440>
   247cc:	1dfb      	adds	r3, r7, #7
   247ce:	781b      	ldrb	r3, [r3, #0]
   247d0:	2b47      	cmp	r3, #71	; 0x47
   247d2:	d003      	beq.n	247dc <m2m_ip_cb+0x440>
   247d4:	1dfb      	adds	r3, r7, #7
   247d6:	781b      	ldrb	r3, [r3, #0]
   247d8:	2b4c      	cmp	r3, #76	; 0x4c
   247da:	d14c      	bne.n	24876 <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   247dc:	23de      	movs	r3, #222	; 0xde
   247de:	18fb      	adds	r3, r7, r3
   247e0:	2207      	movs	r2, #7
   247e2:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   247e4:	1dfb      	adds	r3, r7, #7
   247e6:	781b      	ldrb	r3, [r3, #0]
   247e8:	2b47      	cmp	r3, #71	; 0x47
   247ea:	d103      	bne.n	247f4 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   247ec:	23de      	movs	r3, #222	; 0xde
   247ee:	18fb      	adds	r3, r7, r3
   247f0:	2208      	movs	r2, #8
   247f2:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   247f4:	2364      	movs	r3, #100	; 0x64
   247f6:	18f9      	adds	r1, r7, r3
   247f8:	6838      	ldr	r0, [r7, #0]
   247fa:	2300      	movs	r3, #0
   247fc:	2208      	movs	r2, #8
   247fe:	4c36      	ldr	r4, [pc, #216]	; (248d8 <m2m_ip_cb+0x53c>)
   24800:	47a0      	blx	r4
   24802:	1e03      	subs	r3, r0, #0
   24804:	d162      	bne.n	248cc <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   24806:	23dc      	movs	r3, #220	; 0xdc
   24808:	18fb      	adds	r3, r7, r3
   2480a:	2200      	movs	r2, #0
   2480c:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   2480e:	23db      	movs	r3, #219	; 0xdb
   24810:	18fb      	adds	r3, r7, r3
   24812:	2264      	movs	r2, #100	; 0x64
   24814:	18ba      	adds	r2, r7, r2
   24816:	7812      	ldrb	r2, [r2, #0]
   24818:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   2481a:	23dc      	movs	r3, #220	; 0xdc
   2481c:	18fb      	adds	r3, r7, r3
   2481e:	2264      	movs	r2, #100	; 0x64
   24820:	18ba      	adds	r2, r7, r2
   24822:	8892      	ldrh	r2, [r2, #4]
   24824:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   24826:	2364      	movs	r3, #100	; 0x64
   24828:	18fb      	adds	r3, r7, r3
   2482a:	2202      	movs	r2, #2
   2482c:	5e9a      	ldrsh	r2, [r3, r2]
   2482e:	236e      	movs	r3, #110	; 0x6e
   24830:	18fb      	adds	r3, r7, r3
   24832:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   24834:	23db      	movs	r3, #219	; 0xdb
   24836:	18fb      	adds	r3, r7, r3
   24838:	781b      	ldrb	r3, [r3, #0]
   2483a:	b25b      	sxtb	r3, r3
   2483c:	4a27      	ldr	r2, [pc, #156]	; (248dc <m2m_ip_cb+0x540>)
   2483e:	011b      	lsls	r3, r3, #4
   24840:	18d3      	adds	r3, r2, r3
   24842:	3306      	adds	r3, #6
   24844:	881b      	ldrh	r3, [r3, #0]
   24846:	b29b      	uxth	r3, r3
   24848:	22dc      	movs	r2, #220	; 0xdc
   2484a:	18ba      	adds	r2, r7, r2
   2484c:	8812      	ldrh	r2, [r2, #0]
   2484e:	429a      	cmp	r2, r3
   24850:	d13c      	bne.n	248cc <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   24852:	4b24      	ldr	r3, [pc, #144]	; (248e4 <m2m_ip_cb+0x548>)
   24854:	681b      	ldr	r3, [r3, #0]
   24856:	2b00      	cmp	r3, #0
   24858:	d038      	beq.n	248cc <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   2485a:	4b22      	ldr	r3, [pc, #136]	; (248e4 <m2m_ip_cb+0x548>)
   2485c:	681b      	ldr	r3, [r3, #0]
   2485e:	226e      	movs	r2, #110	; 0x6e
   24860:	18bc      	adds	r4, r7, r2
   24862:	22de      	movs	r2, #222	; 0xde
   24864:	18ba      	adds	r2, r7, r2
   24866:	7811      	ldrb	r1, [r2, #0]
   24868:	22db      	movs	r2, #219	; 0xdb
   2486a:	18ba      	adds	r2, r7, r2
   2486c:	2000      	movs	r0, #0
   2486e:	5610      	ldrsb	r0, [r2, r0]
   24870:	0022      	movs	r2, r4
   24872:	4798      	blx	r3
	{
   24874:	e02a      	b.n	248cc <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   24876:	1dfb      	adds	r3, r7, #7
   24878:	781b      	ldrb	r3, [r3, #0]
   2487a:	2b52      	cmp	r3, #82	; 0x52
   2487c:	d127      	bne.n	248ce <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   2487e:	2350      	movs	r3, #80	; 0x50
   24880:	18f9      	adds	r1, r7, r3
   24882:	6838      	ldr	r0, [r7, #0]
   24884:	2301      	movs	r3, #1
   24886:	2214      	movs	r2, #20
   24888:	4c13      	ldr	r4, [pc, #76]	; (248d8 <m2m_ip_cb+0x53c>)
   2488a:	47a0      	blx	r4
   2488c:	1e03      	subs	r3, r0, #0
   2488e:	d11e      	bne.n	248ce <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   24890:	2350      	movs	r3, #80	; 0x50
   24892:	18fb      	adds	r3, r7, r3
   24894:	685b      	ldr	r3, [r3, #4]
   24896:	001a      	movs	r2, r3
   24898:	4b13      	ldr	r3, [pc, #76]	; (248e8 <m2m_ip_cb+0x54c>)
   2489a:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   2489c:	4b12      	ldr	r3, [pc, #72]	; (248e8 <m2m_ip_cb+0x54c>)
   2489e:	681b      	ldr	r3, [r3, #0]
   248a0:	2b00      	cmp	r3, #0
   248a2:	d014      	beq.n	248ce <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   248a4:	4b10      	ldr	r3, [pc, #64]	; (248e8 <m2m_ip_cb+0x54c>)
   248a6:	681c      	ldr	r4, [r3, #0]
   248a8:	2350      	movs	r3, #80	; 0x50
   248aa:	18fb      	adds	r3, r7, r3
   248ac:	6818      	ldr	r0, [r3, #0]
   248ae:	2350      	movs	r3, #80	; 0x50
   248b0:	18fb      	adds	r3, r7, r3
   248b2:	6899      	ldr	r1, [r3, #8]
   248b4:	2350      	movs	r3, #80	; 0x50
   248b6:	18fb      	adds	r3, r7, r3
   248b8:	7c1b      	ldrb	r3, [r3, #16]
   248ba:	001a      	movs	r2, r3
   248bc:	47a0      	blx	r4
}
   248be:	e006      	b.n	248ce <m2m_ip_cb+0x532>
	{
   248c0:	46c0      	nop			; (mov r8, r8)
   248c2:	e004      	b.n	248ce <m2m_ip_cb+0x532>
	{
   248c4:	46c0      	nop			; (mov r8, r8)
   248c6:	e002      	b.n	248ce <m2m_ip_cb+0x532>
	{
   248c8:	46c0      	nop			; (mov r8, r8)
   248ca:	e000      	b.n	248ce <m2m_ip_cb+0x532>
	{
   248cc:	46c0      	nop			; (mov r8, r8)
}
   248ce:	46c0      	nop			; (mov r8, r8)
   248d0:	46bd      	mov	sp, r7
   248d2:	b039      	add	sp, #228	; 0xe4
   248d4:	bd90      	pop	{r4, r7, pc}
   248d6:	46c0      	nop			; (mov r8, r8)
   248d8:	00020b99 	.word	0x00020b99
   248dc:	200058b4 	.word	0x200058b4
   248e0:	000241a1 	.word	0x000241a1
   248e4:	20005964 	.word	0x20005964
   248e8:	20005968 	.word	0x20005968

000248ec <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   248ec:	b580      	push	{r7, lr}
   248ee:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   248f0:	4b0c      	ldr	r3, [pc, #48]	; (24924 <socketInit+0x38>)
   248f2:	781b      	ldrb	r3, [r3, #0]
   248f4:	b2db      	uxtb	r3, r3
   248f6:	2b00      	cmp	r3, #0
   248f8:	d110      	bne.n	2491c <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   248fa:	4b0b      	ldr	r3, [pc, #44]	; (24928 <socketInit+0x3c>)
   248fc:	22b0      	movs	r2, #176	; 0xb0
   248fe:	2100      	movs	r1, #0
   24900:	0018      	movs	r0, r3
   24902:	4b0a      	ldr	r3, [pc, #40]	; (2492c <socketInit+0x40>)
   24904:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   24906:	4b0a      	ldr	r3, [pc, #40]	; (24930 <socketInit+0x44>)
   24908:	0019      	movs	r1, r3
   2490a:	2002      	movs	r0, #2
   2490c:	4b09      	ldr	r3, [pc, #36]	; (24934 <socketInit+0x48>)
   2490e:	4798      	blx	r3
		gbSocketInit	= 1;
   24910:	4b04      	ldr	r3, [pc, #16]	; (24924 <socketInit+0x38>)
   24912:	2201      	movs	r2, #1
   24914:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   24916:	4b08      	ldr	r3, [pc, #32]	; (24938 <socketInit+0x4c>)
   24918:	2200      	movs	r2, #0
   2491a:	801a      	strh	r2, [r3, #0]
	}
}
   2491c:	46c0      	nop			; (mov r8, r8)
   2491e:	46bd      	mov	sp, r7
   24920:	bd80      	pop	{r7, pc}
   24922:	46c0      	nop			; (mov r8, r8)
   24924:	20004118 	.word	0x20004118
   24928:	200058b4 	.word	0x200058b4
   2492c:	0002001d 	.word	0x0002001d
   24930:	0002439d 	.word	0x0002439d
   24934:	00020d19 	.word	0x00020d19
   24938:	20004116 	.word	0x20004116

0002493c <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   2493c:	b580      	push	{r7, lr}
   2493e:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   24940:	4b0a      	ldr	r3, [pc, #40]	; (2496c <socketDeinit+0x30>)
   24942:	22b0      	movs	r2, #176	; 0xb0
   24944:	2100      	movs	r1, #0
   24946:	0018      	movs	r0, r3
   24948:	4b09      	ldr	r3, [pc, #36]	; (24970 <socketDeinit+0x34>)
   2494a:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   2494c:	2100      	movs	r1, #0
   2494e:	2002      	movs	r0, #2
   24950:	4b08      	ldr	r3, [pc, #32]	; (24974 <socketDeinit+0x38>)
   24952:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   24954:	4b08      	ldr	r3, [pc, #32]	; (24978 <socketDeinit+0x3c>)
   24956:	2200      	movs	r2, #0
   24958:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   2495a:	4b08      	ldr	r3, [pc, #32]	; (2497c <socketDeinit+0x40>)
   2495c:	2200      	movs	r2, #0
   2495e:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   24960:	4b07      	ldr	r3, [pc, #28]	; (24980 <socketDeinit+0x44>)
   24962:	2200      	movs	r2, #0
   24964:	701a      	strb	r2, [r3, #0]
}
   24966:	46c0      	nop			; (mov r8, r8)
   24968:	46bd      	mov	sp, r7
   2496a:	bd80      	pop	{r7, pc}
   2496c:	200058b4 	.word	0x200058b4
   24970:	0002001d 	.word	0x0002001d
   24974:	00020d19 	.word	0x00020d19
   24978:	20005964 	.word	0x20005964
   2497c:	2000596c 	.word	0x2000596c
   24980:	20004118 	.word	0x20004118

00024984 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   24984:	b580      	push	{r7, lr}
   24986:	b082      	sub	sp, #8
   24988:	af00      	add	r7, sp, #0
   2498a:	6078      	str	r0, [r7, #4]
   2498c:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   2498e:	4b05      	ldr	r3, [pc, #20]	; (249a4 <registerSocketCallback+0x20>)
   24990:	687a      	ldr	r2, [r7, #4]
   24992:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   24994:	4b04      	ldr	r3, [pc, #16]	; (249a8 <registerSocketCallback+0x24>)
   24996:	683a      	ldr	r2, [r7, #0]
   24998:	601a      	str	r2, [r3, #0]
}
   2499a:	46c0      	nop			; (mov r8, r8)
   2499c:	46bd      	mov	sp, r7
   2499e:	b002      	add	sp, #8
   249a0:	bd80      	pop	{r7, pc}
   249a2:	46c0      	nop			; (mov r8, r8)
   249a4:	20005964 	.word	0x20005964
   249a8:	2000596c 	.word	0x2000596c

000249ac <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   249ac:	b590      	push	{r4, r7, lr}
   249ae:	b08d      	sub	sp, #52	; 0x34
   249b0:	af04      	add	r7, sp, #16
   249b2:	0004      	movs	r4, r0
   249b4:	0008      	movs	r0, r1
   249b6:	0011      	movs	r1, r2
   249b8:	1dbb      	adds	r3, r7, #6
   249ba:	1c22      	adds	r2, r4, #0
   249bc:	801a      	strh	r2, [r3, #0]
   249be:	1d7b      	adds	r3, r7, #5
   249c0:	1c02      	adds	r2, r0, #0
   249c2:	701a      	strb	r2, [r3, #0]
   249c4:	1d3b      	adds	r3, r7, #4
   249c6:	1c0a      	adds	r2, r1, #0
   249c8:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   249ca:	231f      	movs	r3, #31
   249cc:	18fb      	adds	r3, r7, r3
   249ce:	22ff      	movs	r2, #255	; 0xff
   249d0:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   249d2:	1dbb      	adds	r3, r7, #6
   249d4:	881b      	ldrh	r3, [r3, #0]
   249d6:	2b02      	cmp	r3, #2
   249d8:	d000      	beq.n	249dc <socket+0x30>
   249da:	e0ce      	b.n	24b7a <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   249dc:	1d7b      	adds	r3, r7, #5
   249de:	781b      	ldrb	r3, [r3, #0]
   249e0:	2b01      	cmp	r3, #1
   249e2:	d135      	bne.n	24a50 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   249e4:	231e      	movs	r3, #30
   249e6:	18fb      	adds	r3, r7, r3
   249e8:	2200      	movs	r2, #0
   249ea:	701a      	strb	r2, [r3, #0]
   249ec:	e02a      	b.n	24a44 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   249ee:	2317      	movs	r3, #23
   249f0:	18fb      	adds	r3, r7, r3
   249f2:	4a66      	ldr	r2, [pc, #408]	; (24b8c <socket+0x1e0>)
   249f4:	7812      	ldrb	r2, [r2, #0]
   249f6:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   249f8:	4b64      	ldr	r3, [pc, #400]	; (24b8c <socket+0x1e0>)
   249fa:	781b      	ldrb	r3, [r3, #0]
   249fc:	b2db      	uxtb	r3, r3
   249fe:	011a      	lsls	r2, r3, #4
   24a00:	4b63      	ldr	r3, [pc, #396]	; (24b90 <socket+0x1e4>)
   24a02:	18d3      	adds	r3, r2, r3
   24a04:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   24a06:	4b61      	ldr	r3, [pc, #388]	; (24b8c <socket+0x1e0>)
   24a08:	781b      	ldrb	r3, [r3, #0]
   24a0a:	b2db      	uxtb	r3, r3
   24a0c:	1c5a      	adds	r2, r3, #1
   24a0e:	4b61      	ldr	r3, [pc, #388]	; (24b94 <socket+0x1e8>)
   24a10:	2107      	movs	r1, #7
   24a12:	0010      	movs	r0, r2
   24a14:	4798      	blx	r3
   24a16:	000b      	movs	r3, r1
   24a18:	b2da      	uxtb	r2, r3
   24a1a:	4b5c      	ldr	r3, [pc, #368]	; (24b8c <socket+0x1e0>)
   24a1c:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   24a1e:	69bb      	ldr	r3, [r7, #24]
   24a20:	7a9b      	ldrb	r3, [r3, #10]
   24a22:	b2db      	uxtb	r3, r3
   24a24:	2b00      	cmp	r3, #0
   24a26:	d106      	bne.n	24a36 <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   24a28:	231f      	movs	r3, #31
   24a2a:	18fb      	adds	r3, r7, r3
   24a2c:	2217      	movs	r2, #23
   24a2e:	18ba      	adds	r2, r7, r2
   24a30:	7812      	ldrb	r2, [r2, #0]
   24a32:	701a      	strb	r2, [r3, #0]
					break;
   24a34:	e04c      	b.n	24ad0 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   24a36:	231e      	movs	r3, #30
   24a38:	18fb      	adds	r3, r7, r3
   24a3a:	781a      	ldrb	r2, [r3, #0]
   24a3c:	231e      	movs	r3, #30
   24a3e:	18fb      	adds	r3, r7, r3
   24a40:	3201      	adds	r2, #1
   24a42:	701a      	strb	r2, [r3, #0]
   24a44:	231e      	movs	r3, #30
   24a46:	18fb      	adds	r3, r7, r3
   24a48:	781b      	ldrb	r3, [r3, #0]
   24a4a:	2b06      	cmp	r3, #6
   24a4c:	d9cf      	bls.n	249ee <socket+0x42>
   24a4e:	e03f      	b.n	24ad0 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   24a50:	1d7b      	adds	r3, r7, #5
   24a52:	781b      	ldrb	r3, [r3, #0]
   24a54:	2b02      	cmp	r3, #2
   24a56:	d13b      	bne.n	24ad0 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   24a58:	4b4f      	ldr	r3, [pc, #316]	; (24b98 <socket+0x1ec>)
   24a5a:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   24a5c:	231e      	movs	r3, #30
   24a5e:	18fb      	adds	r3, r7, r3
   24a60:	2200      	movs	r2, #0
   24a62:	701a      	strb	r2, [r3, #0]
   24a64:	e02f      	b.n	24ac6 <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   24a66:	2317      	movs	r3, #23
   24a68:	18fb      	adds	r3, r7, r3
   24a6a:	4a4c      	ldr	r2, [pc, #304]	; (24b9c <socket+0x1f0>)
   24a6c:	7812      	ldrb	r2, [r2, #0]
   24a6e:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   24a70:	4b4a      	ldr	r3, [pc, #296]	; (24b9c <socket+0x1f0>)
   24a72:	781b      	ldrb	r3, [r3, #0]
   24a74:	b2db      	uxtb	r3, r3
   24a76:	011b      	lsls	r3, r3, #4
   24a78:	693a      	ldr	r2, [r7, #16]
   24a7a:	18d3      	adds	r3, r2, r3
   24a7c:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   24a7e:	4b47      	ldr	r3, [pc, #284]	; (24b9c <socket+0x1f0>)
   24a80:	781b      	ldrb	r3, [r3, #0]
   24a82:	b2db      	uxtb	r3, r3
   24a84:	3301      	adds	r3, #1
   24a86:	4a46      	ldr	r2, [pc, #280]	; (24ba0 <socket+0x1f4>)
   24a88:	4013      	ands	r3, r2
   24a8a:	d504      	bpl.n	24a96 <socket+0xea>
   24a8c:	3b01      	subs	r3, #1
   24a8e:	2204      	movs	r2, #4
   24a90:	4252      	negs	r2, r2
   24a92:	4313      	orrs	r3, r2
   24a94:	3301      	adds	r3, #1
   24a96:	b2da      	uxtb	r2, r3
   24a98:	4b40      	ldr	r3, [pc, #256]	; (24b9c <socket+0x1f0>)
   24a9a:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   24a9c:	69bb      	ldr	r3, [r7, #24]
   24a9e:	7a9b      	ldrb	r3, [r3, #10]
   24aa0:	b2db      	uxtb	r3, r3
   24aa2:	2b00      	cmp	r3, #0
   24aa4:	d108      	bne.n	24ab8 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   24aa6:	2317      	movs	r3, #23
   24aa8:	18fb      	adds	r3, r7, r3
   24aaa:	781b      	ldrb	r3, [r3, #0]
   24aac:	3307      	adds	r3, #7
   24aae:	b2da      	uxtb	r2, r3
   24ab0:	231f      	movs	r3, #31
   24ab2:	18fb      	adds	r3, r7, r3
   24ab4:	701a      	strb	r2, [r3, #0]
					break;
   24ab6:	e00b      	b.n	24ad0 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   24ab8:	231e      	movs	r3, #30
   24aba:	18fb      	adds	r3, r7, r3
   24abc:	781a      	ldrb	r2, [r3, #0]
   24abe:	231e      	movs	r3, #30
   24ac0:	18fb      	adds	r3, r7, r3
   24ac2:	3201      	adds	r2, #1
   24ac4:	701a      	strb	r2, [r3, #0]
   24ac6:	231e      	movs	r3, #30
   24ac8:	18fb      	adds	r3, r7, r3
   24aca:	781b      	ldrb	r3, [r3, #0]
   24acc:	2b03      	cmp	r3, #3
   24ace:	d9ca      	bls.n	24a66 <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   24ad0:	231f      	movs	r3, #31
   24ad2:	18fb      	adds	r3, r7, r3
   24ad4:	781b      	ldrb	r3, [r3, #0]
   24ad6:	2b7f      	cmp	r3, #127	; 0x7f
   24ad8:	d84f      	bhi.n	24b7a <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   24ada:	69bb      	ldr	r3, [r7, #24]
   24adc:	2210      	movs	r2, #16
   24ade:	2100      	movs	r1, #0
   24ae0:	0018      	movs	r0, r3
   24ae2:	4b30      	ldr	r3, [pc, #192]	; (24ba4 <socket+0x1f8>)
   24ae4:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   24ae6:	69bb      	ldr	r3, [r7, #24]
   24ae8:	2201      	movs	r2, #1
   24aea:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   24aec:	4b2e      	ldr	r3, [pc, #184]	; (24ba8 <socket+0x1fc>)
   24aee:	881b      	ldrh	r3, [r3, #0]
   24af0:	b29b      	uxth	r3, r3
   24af2:	3301      	adds	r3, #1
   24af4:	b29a      	uxth	r2, r3
   24af6:	4b2c      	ldr	r3, [pc, #176]	; (24ba8 <socket+0x1fc>)
   24af8:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   24afa:	4b2b      	ldr	r3, [pc, #172]	; (24ba8 <socket+0x1fc>)
   24afc:	881b      	ldrh	r3, [r3, #0]
   24afe:	b29b      	uxth	r3, r3
   24b00:	2b00      	cmp	r3, #0
   24b02:	d106      	bne.n	24b12 <socket+0x166>
				++gu16SessionID;
   24b04:	4b28      	ldr	r3, [pc, #160]	; (24ba8 <socket+0x1fc>)
   24b06:	881b      	ldrh	r3, [r3, #0]
   24b08:	b29b      	uxth	r3, r3
   24b0a:	3301      	adds	r3, #1
   24b0c:	b29a      	uxth	r2, r3
   24b0e:	4b26      	ldr	r3, [pc, #152]	; (24ba8 <socket+0x1fc>)
   24b10:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   24b12:	4b25      	ldr	r3, [pc, #148]	; (24ba8 <socket+0x1fc>)
   24b14:	881b      	ldrh	r3, [r3, #0]
   24b16:	b29a      	uxth	r2, r3
   24b18:	69bb      	ldr	r3, [r7, #24]
   24b1a:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   24b1c:	4b23      	ldr	r3, [pc, #140]	; (24bac <socket+0x200>)
   24b1e:	0018      	movs	r0, r3
   24b20:	4b23      	ldr	r3, [pc, #140]	; (24bb0 <socket+0x204>)
   24b22:	4798      	blx	r3
   24b24:	231f      	movs	r3, #31
   24b26:	18fb      	adds	r3, r7, r3
   24b28:	2100      	movs	r1, #0
   24b2a:	5659      	ldrsb	r1, [r3, r1]
   24b2c:	4b1e      	ldr	r3, [pc, #120]	; (24ba8 <socket+0x1fc>)
   24b2e:	881b      	ldrh	r3, [r3, #0]
   24b30:	b29b      	uxth	r3, r3
   24b32:	001a      	movs	r2, r3
   24b34:	4b1f      	ldr	r3, [pc, #124]	; (24bb4 <socket+0x208>)
   24b36:	0018      	movs	r0, r3
   24b38:	4b1d      	ldr	r3, [pc, #116]	; (24bb0 <socket+0x204>)
   24b3a:	4798      	blx	r3
   24b3c:	4b1e      	ldr	r3, [pc, #120]	; (24bb8 <socket+0x20c>)
   24b3e:	0018      	movs	r0, r3
   24b40:	4b1b      	ldr	r3, [pc, #108]	; (24bb0 <socket+0x204>)
   24b42:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   24b44:	1d3b      	adds	r3, r7, #4
   24b46:	781b      	ldrb	r3, [r3, #0]
   24b48:	2201      	movs	r2, #1
   24b4a:	4013      	ands	r3, r2
   24b4c:	d015      	beq.n	24b7a <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   24b4e:	230c      	movs	r3, #12
   24b50:	18fb      	adds	r3, r7, r3
   24b52:	221f      	movs	r2, #31
   24b54:	18ba      	adds	r2, r7, r2
   24b56:	7812      	ldrb	r2, [r2, #0]
   24b58:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   24b5a:	69bb      	ldr	r3, [r7, #24]
   24b5c:	2221      	movs	r2, #33	; 0x21
   24b5e:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   24b60:	230c      	movs	r3, #12
   24b62:	18fa      	adds	r2, r7, r3
   24b64:	2300      	movs	r3, #0
   24b66:	9302      	str	r3, [sp, #8]
   24b68:	2300      	movs	r3, #0
   24b6a:	9301      	str	r3, [sp, #4]
   24b6c:	2300      	movs	r3, #0
   24b6e:	9300      	str	r3, [sp, #0]
   24b70:	2304      	movs	r3, #4
   24b72:	2150      	movs	r1, #80	; 0x50
   24b74:	2002      	movs	r0, #2
   24b76:	4c11      	ldr	r4, [pc, #68]	; (24bbc <socket+0x210>)
   24b78:	47a0      	blx	r4
			}
		}
	}
	return sock;
   24b7a:	231f      	movs	r3, #31
   24b7c:	18fb      	adds	r3, r7, r3
   24b7e:	781b      	ldrb	r3, [r3, #0]
   24b80:	b25b      	sxtb	r3, r3
}
   24b82:	0018      	movs	r0, r3
   24b84:	46bd      	mov	sp, r7
   24b86:	b009      	add	sp, #36	; 0x24
   24b88:	bd90      	pop	{r4, r7, pc}
   24b8a:	46c0      	nop			; (mov r8, r8)
   24b8c:	20004119 	.word	0x20004119
   24b90:	200058b4 	.word	0x200058b4
   24b94:	0003217d 	.word	0x0003217d
   24b98:	20005924 	.word	0x20005924
   24b9c:	2000411a 	.word	0x2000411a
   24ba0:	80000003 	.word	0x80000003
   24ba4:	0002001d 	.word	0x0002001d
   24ba8:	20004116 	.word	0x20004116
   24bac:	00038aa4 	.word	0x00038aa4
   24bb0:	0001d2e9 	.word	0x0001d2e9
   24bb4:	00038ac8 	.word	0x00038ac8
   24bb8:	00038ac4 	.word	0x00038ac4
   24bbc:	0002027d 	.word	0x0002027d

00024bc0 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   24bc0:	b5b0      	push	{r4, r5, r7, lr}
   24bc2:	b08a      	sub	sp, #40	; 0x28
   24bc4:	af04      	add	r7, sp, #16
   24bc6:	6039      	str	r1, [r7, #0]
   24bc8:	0011      	movs	r1, r2
   24bca:	1dfb      	adds	r3, r7, #7
   24bcc:	1c02      	adds	r2, r0, #0
   24bce:	701a      	strb	r2, [r3, #0]
   24bd0:	1dbb      	adds	r3, r7, #6
   24bd2:	1c0a      	adds	r2, r1, #0
   24bd4:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   24bd6:	2317      	movs	r3, #23
   24bd8:	18fb      	adds	r3, r7, r3
   24bda:	22fa      	movs	r2, #250	; 0xfa
   24bdc:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   24bde:	1dfb      	adds	r3, r7, #7
   24be0:	781b      	ldrb	r3, [r3, #0]
   24be2:	2b7f      	cmp	r3, #127	; 0x7f
   24be4:	d867      	bhi.n	24cb6 <connect+0xf6>
   24be6:	683b      	ldr	r3, [r7, #0]
   24be8:	2b00      	cmp	r3, #0
   24bea:	d064      	beq.n	24cb6 <connect+0xf6>
   24bec:	1dfb      	adds	r3, r7, #7
   24bee:	781b      	ldrb	r3, [r3, #0]
   24bf0:	b25b      	sxtb	r3, r3
   24bf2:	4a35      	ldr	r2, [pc, #212]	; (24cc8 <connect+0x108>)
   24bf4:	011b      	lsls	r3, r3, #4
   24bf6:	18d3      	adds	r3, r2, r3
   24bf8:	330a      	adds	r3, #10
   24bfa:	781b      	ldrb	r3, [r3, #0]
   24bfc:	b2db      	uxtb	r3, r3
   24bfe:	2b01      	cmp	r3, #1
   24c00:	d159      	bne.n	24cb6 <connect+0xf6>
   24c02:	1dbb      	adds	r3, r7, #6
   24c04:	781b      	ldrb	r3, [r3, #0]
   24c06:	2b00      	cmp	r3, #0
   24c08:	d055      	beq.n	24cb6 <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   24c0a:	2316      	movs	r3, #22
   24c0c:	18fb      	adds	r3, r7, r3
   24c0e:	2244      	movs	r2, #68	; 0x44
   24c10:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   24c12:	1dfb      	adds	r3, r7, #7
   24c14:	781b      	ldrb	r3, [r3, #0]
   24c16:	b25b      	sxtb	r3, r3
   24c18:	4a2b      	ldr	r2, [pc, #172]	; (24cc8 <connect+0x108>)
   24c1a:	011b      	lsls	r3, r3, #4
   24c1c:	18d3      	adds	r3, r2, r3
   24c1e:	330b      	adds	r3, #11
   24c20:	781b      	ldrb	r3, [r3, #0]
   24c22:	b2db      	uxtb	r3, r3
   24c24:	001a      	movs	r2, r3
   24c26:	2301      	movs	r3, #1
   24c28:	4013      	ands	r3, r2
   24c2a:	d00f      	beq.n	24c4c <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   24c2c:	2316      	movs	r3, #22
   24c2e:	18fb      	adds	r3, r7, r3
   24c30:	224b      	movs	r2, #75	; 0x4b
   24c32:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   24c34:	1dfb      	adds	r3, r7, #7
   24c36:	781b      	ldrb	r3, [r3, #0]
   24c38:	b25b      	sxtb	r3, r3
   24c3a:	4a23      	ldr	r2, [pc, #140]	; (24cc8 <connect+0x108>)
   24c3c:	011b      	lsls	r3, r3, #4
   24c3e:	18d3      	adds	r3, r2, r3
   24c40:	330b      	adds	r3, #11
   24c42:	781b      	ldrb	r3, [r3, #0]
   24c44:	b2da      	uxtb	r2, r3
   24c46:	2308      	movs	r3, #8
   24c48:	18fb      	adds	r3, r7, r3
   24c4a:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   24c4c:	2308      	movs	r3, #8
   24c4e:	18fb      	adds	r3, r7, r3
   24c50:	1dfa      	adds	r2, r7, #7
   24c52:	7812      	ldrb	r2, [r2, #0]
   24c54:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   24c56:	6839      	ldr	r1, [r7, #0]
   24c58:	2308      	movs	r3, #8
   24c5a:	18fb      	adds	r3, r7, r3
   24c5c:	2208      	movs	r2, #8
   24c5e:	0018      	movs	r0, r3
   24c60:	4b1a      	ldr	r3, [pc, #104]	; (24ccc <connect+0x10c>)
   24c62:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   24c64:	1dfb      	adds	r3, r7, #7
   24c66:	781b      	ldrb	r3, [r3, #0]
   24c68:	b25b      	sxtb	r3, r3
   24c6a:	4a17      	ldr	r2, [pc, #92]	; (24cc8 <connect+0x108>)
   24c6c:	011b      	lsls	r3, r3, #4
   24c6e:	18d3      	adds	r3, r2, r3
   24c70:	3306      	adds	r3, #6
   24c72:	881b      	ldrh	r3, [r3, #0]
   24c74:	b29a      	uxth	r2, r3
   24c76:	2308      	movs	r3, #8
   24c78:	18fb      	adds	r3, r7, r3
   24c7a:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   24c7c:	2317      	movs	r3, #23
   24c7e:	18fc      	adds	r4, r7, r3
   24c80:	2308      	movs	r3, #8
   24c82:	18fa      	adds	r2, r7, r3
   24c84:	2316      	movs	r3, #22
   24c86:	18fb      	adds	r3, r7, r3
   24c88:	7819      	ldrb	r1, [r3, #0]
   24c8a:	2300      	movs	r3, #0
   24c8c:	9302      	str	r3, [sp, #8]
   24c8e:	2300      	movs	r3, #0
   24c90:	9301      	str	r3, [sp, #4]
   24c92:	2300      	movs	r3, #0
   24c94:	9300      	str	r3, [sp, #0]
   24c96:	230c      	movs	r3, #12
   24c98:	2002      	movs	r0, #2
   24c9a:	4d0d      	ldr	r5, [pc, #52]	; (24cd0 <connect+0x110>)
   24c9c:	47a8      	blx	r5
   24c9e:	0003      	movs	r3, r0
   24ca0:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   24ca2:	2317      	movs	r3, #23
   24ca4:	18fb      	adds	r3, r7, r3
   24ca6:	781b      	ldrb	r3, [r3, #0]
   24ca8:	b25b      	sxtb	r3, r3
   24caa:	2b00      	cmp	r3, #0
   24cac:	d003      	beq.n	24cb6 <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   24cae:	2317      	movs	r3, #23
   24cb0:	18fb      	adds	r3, r7, r3
   24cb2:	22f7      	movs	r2, #247	; 0xf7
   24cb4:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   24cb6:	2317      	movs	r3, #23
   24cb8:	18fb      	adds	r3, r7, r3
   24cba:	781b      	ldrb	r3, [r3, #0]
   24cbc:	b25b      	sxtb	r3, r3
}
   24cbe:	0018      	movs	r0, r3
   24cc0:	46bd      	mov	sp, r7
   24cc2:	b006      	add	sp, #24
   24cc4:	bdb0      	pop	{r4, r5, r7, pc}
   24cc6:	46c0      	nop			; (mov r8, r8)
   24cc8:	200058b4 	.word	0x200058b4
   24ccc:	0001ffe1 	.word	0x0001ffe1
   24cd0:	0002027d 	.word	0x0002027d

00024cd4 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   24cd4:	b590      	push	{r4, r7, lr}
   24cd6:	b08f      	sub	sp, #60	; 0x3c
   24cd8:	af04      	add	r7, sp, #16
   24cda:	0004      	movs	r4, r0
   24cdc:	60b9      	str	r1, [r7, #8]
   24cde:	0010      	movs	r0, r2
   24ce0:	0019      	movs	r1, r3
   24ce2:	230f      	movs	r3, #15
   24ce4:	18fb      	adds	r3, r7, r3
   24ce6:	1c22      	adds	r2, r4, #0
   24ce8:	701a      	strb	r2, [r3, #0]
   24cea:	230c      	movs	r3, #12
   24cec:	18fb      	adds	r3, r7, r3
   24cee:	1c02      	adds	r2, r0, #0
   24cf0:	801a      	strh	r2, [r3, #0]
   24cf2:	1dbb      	adds	r3, r7, #6
   24cf4:	1c0a      	adds	r2, r1, #0
   24cf6:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   24cf8:	2326      	movs	r3, #38	; 0x26
   24cfa:	18fb      	adds	r3, r7, r3
   24cfc:	2206      	movs	r2, #6
   24cfe:	4252      	negs	r2, r2
   24d00:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   24d02:	230f      	movs	r3, #15
   24d04:	18fb      	adds	r3, r7, r3
   24d06:	781b      	ldrb	r3, [r3, #0]
   24d08:	2b7f      	cmp	r3, #127	; 0x7f
   24d0a:	d900      	bls.n	24d0e <send+0x3a>
   24d0c:	e087      	b.n	24e1e <send+0x14a>
   24d0e:	68bb      	ldr	r3, [r7, #8]
   24d10:	2b00      	cmp	r3, #0
   24d12:	d100      	bne.n	24d16 <send+0x42>
   24d14:	e083      	b.n	24e1e <send+0x14a>
   24d16:	230c      	movs	r3, #12
   24d18:	18fb      	adds	r3, r7, r3
   24d1a:	881a      	ldrh	r2, [r3, #0]
   24d1c:	23af      	movs	r3, #175	; 0xaf
   24d1e:	00db      	lsls	r3, r3, #3
   24d20:	429a      	cmp	r2, r3
   24d22:	d900      	bls.n	24d26 <send+0x52>
   24d24:	e07b      	b.n	24e1e <send+0x14a>
   24d26:	230f      	movs	r3, #15
   24d28:	18fb      	adds	r3, r7, r3
   24d2a:	781b      	ldrb	r3, [r3, #0]
   24d2c:	b25b      	sxtb	r3, r3
   24d2e:	4a40      	ldr	r2, [pc, #256]	; (24e30 <send+0x15c>)
   24d30:	011b      	lsls	r3, r3, #4
   24d32:	18d3      	adds	r3, r2, r3
   24d34:	330a      	adds	r3, #10
   24d36:	781b      	ldrb	r3, [r3, #0]
   24d38:	b2db      	uxtb	r3, r3
   24d3a:	2b01      	cmp	r3, #1
   24d3c:	d16f      	bne.n	24e1e <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   24d3e:	2323      	movs	r3, #35	; 0x23
   24d40:	18fb      	adds	r3, r7, r3
   24d42:	2245      	movs	r2, #69	; 0x45
   24d44:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   24d46:	2324      	movs	r3, #36	; 0x24
   24d48:	18fb      	adds	r3, r7, r3
   24d4a:	2250      	movs	r2, #80	; 0x50
   24d4c:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   24d4e:	2310      	movs	r3, #16
   24d50:	18fb      	adds	r3, r7, r3
   24d52:	220f      	movs	r2, #15
   24d54:	18ba      	adds	r2, r7, r2
   24d56:	7812      	ldrb	r2, [r2, #0]
   24d58:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   24d5a:	2310      	movs	r3, #16
   24d5c:	18fb      	adds	r3, r7, r3
   24d5e:	220c      	movs	r2, #12
   24d60:	18ba      	adds	r2, r7, r2
   24d62:	8812      	ldrh	r2, [r2, #0]
   24d64:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   24d66:	230f      	movs	r3, #15
   24d68:	18fb      	adds	r3, r7, r3
   24d6a:	781b      	ldrb	r3, [r3, #0]
   24d6c:	b25b      	sxtb	r3, r3
   24d6e:	4a30      	ldr	r2, [pc, #192]	; (24e30 <send+0x15c>)
   24d70:	011b      	lsls	r3, r3, #4
   24d72:	18d3      	adds	r3, r2, r3
   24d74:	3306      	adds	r3, #6
   24d76:	881b      	ldrh	r3, [r3, #0]
   24d78:	b29a      	uxth	r2, r3
   24d7a:	2310      	movs	r3, #16
   24d7c:	18fb      	adds	r3, r7, r3
   24d7e:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   24d80:	230f      	movs	r3, #15
   24d82:	18fb      	adds	r3, r7, r3
   24d84:	781b      	ldrb	r3, [r3, #0]
   24d86:	b25b      	sxtb	r3, r3
   24d88:	2b06      	cmp	r3, #6
   24d8a:	dd03      	ble.n	24d94 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   24d8c:	2324      	movs	r3, #36	; 0x24
   24d8e:	18fb      	adds	r3, r7, r3
   24d90:	2244      	movs	r2, #68	; 0x44
   24d92:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   24d94:	230f      	movs	r3, #15
   24d96:	18fb      	adds	r3, r7, r3
   24d98:	781b      	ldrb	r3, [r3, #0]
   24d9a:	b25b      	sxtb	r3, r3
   24d9c:	4a24      	ldr	r2, [pc, #144]	; (24e30 <send+0x15c>)
   24d9e:	011b      	lsls	r3, r3, #4
   24da0:	18d3      	adds	r3, r2, r3
   24da2:	330b      	adds	r3, #11
   24da4:	781b      	ldrb	r3, [r3, #0]
   24da6:	b2db      	uxtb	r3, r3
   24da8:	001a      	movs	r2, r3
   24daa:	2301      	movs	r3, #1
   24dac:	4013      	ands	r3, r2
   24dae:	d00f      	beq.n	24dd0 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   24db0:	2323      	movs	r3, #35	; 0x23
   24db2:	18fb      	adds	r3, r7, r3
   24db4:	224c      	movs	r2, #76	; 0x4c
   24db6:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   24db8:	230f      	movs	r3, #15
   24dba:	18fb      	adds	r3, r7, r3
   24dbc:	2200      	movs	r2, #0
   24dbe:	569a      	ldrsb	r2, [r3, r2]
   24dc0:	2324      	movs	r3, #36	; 0x24
   24dc2:	18fb      	adds	r3, r7, r3
   24dc4:	491a      	ldr	r1, [pc, #104]	; (24e30 <send+0x15c>)
   24dc6:	0112      	lsls	r2, r2, #4
   24dc8:	188a      	adds	r2, r1, r2
   24dca:	3208      	adds	r2, #8
   24dcc:	8812      	ldrh	r2, [r2, #0]
   24dce:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   24dd0:	2323      	movs	r3, #35	; 0x23
   24dd2:	18fb      	adds	r3, r7, r3
   24dd4:	781b      	ldrb	r3, [r3, #0]
   24dd6:	2280      	movs	r2, #128	; 0x80
   24dd8:	4252      	negs	r2, r2
   24dda:	4313      	orrs	r3, r2
   24ddc:	b2d9      	uxtb	r1, r3
   24dde:	2310      	movs	r3, #16
   24de0:	18fa      	adds	r2, r7, r3
   24de2:	2324      	movs	r3, #36	; 0x24
   24de4:	18fb      	adds	r3, r7, r3
   24de6:	881b      	ldrh	r3, [r3, #0]
   24de8:	9302      	str	r3, [sp, #8]
   24dea:	230c      	movs	r3, #12
   24dec:	18fb      	adds	r3, r7, r3
   24dee:	881b      	ldrh	r3, [r3, #0]
   24df0:	9301      	str	r3, [sp, #4]
   24df2:	68bb      	ldr	r3, [r7, #8]
   24df4:	9300      	str	r3, [sp, #0]
   24df6:	2310      	movs	r3, #16
   24df8:	2002      	movs	r0, #2
   24dfa:	4c0e      	ldr	r4, [pc, #56]	; (24e34 <send+0x160>)
   24dfc:	47a0      	blx	r4
   24dfe:	0003      	movs	r3, r0
   24e00:	001a      	movs	r2, r3
   24e02:	2326      	movs	r3, #38	; 0x26
   24e04:	18fb      	adds	r3, r7, r3
   24e06:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   24e08:	2326      	movs	r3, #38	; 0x26
   24e0a:	18fb      	adds	r3, r7, r3
   24e0c:	2200      	movs	r2, #0
   24e0e:	5e9b      	ldrsh	r3, [r3, r2]
   24e10:	2b00      	cmp	r3, #0
   24e12:	d004      	beq.n	24e1e <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   24e14:	2326      	movs	r3, #38	; 0x26
   24e16:	18fb      	adds	r3, r7, r3
   24e18:	220e      	movs	r2, #14
   24e1a:	4252      	negs	r2, r2
   24e1c:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   24e1e:	2326      	movs	r3, #38	; 0x26
   24e20:	18fb      	adds	r3, r7, r3
   24e22:	2200      	movs	r2, #0
   24e24:	5e9b      	ldrsh	r3, [r3, r2]
}
   24e26:	0018      	movs	r0, r3
   24e28:	46bd      	mov	sp, r7
   24e2a:	b00b      	add	sp, #44	; 0x2c
   24e2c:	bd90      	pop	{r4, r7, pc}
   24e2e:	46c0      	nop			; (mov r8, r8)
   24e30:	200058b4 	.word	0x200058b4
   24e34:	0002027d 	.word	0x0002027d

00024e38 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   24e38:	b590      	push	{r4, r7, lr}
   24e3a:	b08d      	sub	sp, #52	; 0x34
   24e3c:	af04      	add	r7, sp, #16
   24e3e:	60b9      	str	r1, [r7, #8]
   24e40:	0011      	movs	r1, r2
   24e42:	607b      	str	r3, [r7, #4]
   24e44:	230f      	movs	r3, #15
   24e46:	18fb      	adds	r3, r7, r3
   24e48:	1c02      	adds	r2, r0, #0
   24e4a:	701a      	strb	r2, [r3, #0]
   24e4c:	230c      	movs	r3, #12
   24e4e:	18fb      	adds	r3, r7, r3
   24e50:	1c0a      	adds	r2, r1, #0
   24e52:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   24e54:	231e      	movs	r3, #30
   24e56:	18fb      	adds	r3, r7, r3
   24e58:	2206      	movs	r2, #6
   24e5a:	4252      	negs	r2, r2
   24e5c:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   24e5e:	230f      	movs	r3, #15
   24e60:	18fb      	adds	r3, r7, r3
   24e62:	781b      	ldrb	r3, [r3, #0]
   24e64:	2b7f      	cmp	r3, #127	; 0x7f
   24e66:	d900      	bls.n	24e6a <recv+0x32>
   24e68:	e099      	b.n	24f9e <recv+0x166>
   24e6a:	68bb      	ldr	r3, [r7, #8]
   24e6c:	2b00      	cmp	r3, #0
   24e6e:	d100      	bne.n	24e72 <recv+0x3a>
   24e70:	e095      	b.n	24f9e <recv+0x166>
   24e72:	230c      	movs	r3, #12
   24e74:	18fb      	adds	r3, r7, r3
   24e76:	881b      	ldrh	r3, [r3, #0]
   24e78:	2b00      	cmp	r3, #0
   24e7a:	d100      	bne.n	24e7e <recv+0x46>
   24e7c:	e08f      	b.n	24f9e <recv+0x166>
   24e7e:	230f      	movs	r3, #15
   24e80:	18fb      	adds	r3, r7, r3
   24e82:	781b      	ldrb	r3, [r3, #0]
   24e84:	b25b      	sxtb	r3, r3
   24e86:	4a4a      	ldr	r2, [pc, #296]	; (24fb0 <recv+0x178>)
   24e88:	011b      	lsls	r3, r3, #4
   24e8a:	18d3      	adds	r3, r2, r3
   24e8c:	330a      	adds	r3, #10
   24e8e:	781b      	ldrb	r3, [r3, #0]
   24e90:	b2db      	uxtb	r3, r3
   24e92:	2b01      	cmp	r3, #1
   24e94:	d000      	beq.n	24e98 <recv+0x60>
   24e96:	e082      	b.n	24f9e <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   24e98:	231e      	movs	r3, #30
   24e9a:	18fb      	adds	r3, r7, r3
   24e9c:	2200      	movs	r2, #0
   24e9e:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   24ea0:	230f      	movs	r3, #15
   24ea2:	18fb      	adds	r3, r7, r3
   24ea4:	2200      	movs	r2, #0
   24ea6:	569a      	ldrsb	r2, [r3, r2]
   24ea8:	4b41      	ldr	r3, [pc, #260]	; (24fb0 <recv+0x178>)
   24eaa:	0112      	lsls	r2, r2, #4
   24eac:	68b9      	ldr	r1, [r7, #8]
   24eae:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   24eb0:	230f      	movs	r3, #15
   24eb2:	18fb      	adds	r3, r7, r3
   24eb4:	781b      	ldrb	r3, [r3, #0]
   24eb6:	b25b      	sxtb	r3, r3
   24eb8:	4a3d      	ldr	r2, [pc, #244]	; (24fb0 <recv+0x178>)
   24eba:	011b      	lsls	r3, r3, #4
   24ebc:	18d3      	adds	r3, r2, r3
   24ebe:	3304      	adds	r3, #4
   24ec0:	220c      	movs	r2, #12
   24ec2:	18ba      	adds	r2, r7, r2
   24ec4:	8812      	ldrh	r2, [r2, #0]
   24ec6:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   24ec8:	230f      	movs	r3, #15
   24eca:	18fb      	adds	r3, r7, r3
   24ecc:	781b      	ldrb	r3, [r3, #0]
   24ece:	b25b      	sxtb	r3, r3
   24ed0:	4a37      	ldr	r2, [pc, #220]	; (24fb0 <recv+0x178>)
   24ed2:	011b      	lsls	r3, r3, #4
   24ed4:	18d3      	adds	r3, r2, r3
   24ed6:	330c      	adds	r3, #12
   24ed8:	781b      	ldrb	r3, [r3, #0]
   24eda:	b2db      	uxtb	r3, r3
   24edc:	2b00      	cmp	r3, #0
   24ede:	d15e      	bne.n	24f9e <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   24ee0:	231d      	movs	r3, #29
   24ee2:	18fb      	adds	r3, r7, r3
   24ee4:	2246      	movs	r2, #70	; 0x46
   24ee6:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   24ee8:	230f      	movs	r3, #15
   24eea:	18fb      	adds	r3, r7, r3
   24eec:	781b      	ldrb	r3, [r3, #0]
   24eee:	b25b      	sxtb	r3, r3
   24ef0:	4a2f      	ldr	r2, [pc, #188]	; (24fb0 <recv+0x178>)
   24ef2:	011b      	lsls	r3, r3, #4
   24ef4:	18d3      	adds	r3, r2, r3
   24ef6:	330c      	adds	r3, #12
   24ef8:	2201      	movs	r2, #1
   24efa:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   24efc:	230f      	movs	r3, #15
   24efe:	18fb      	adds	r3, r7, r3
   24f00:	781b      	ldrb	r3, [r3, #0]
   24f02:	b25b      	sxtb	r3, r3
   24f04:	4a2a      	ldr	r2, [pc, #168]	; (24fb0 <recv+0x178>)
   24f06:	011b      	lsls	r3, r3, #4
   24f08:	18d3      	adds	r3, r2, r3
   24f0a:	330b      	adds	r3, #11
   24f0c:	781b      	ldrb	r3, [r3, #0]
   24f0e:	b2db      	uxtb	r3, r3
   24f10:	001a      	movs	r2, r3
   24f12:	2301      	movs	r3, #1
   24f14:	4013      	ands	r3, r2
   24f16:	d003      	beq.n	24f20 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   24f18:	231d      	movs	r3, #29
   24f1a:	18fb      	adds	r3, r7, r3
   24f1c:	224d      	movs	r2, #77	; 0x4d
   24f1e:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   24f20:	687b      	ldr	r3, [r7, #4]
   24f22:	2b00      	cmp	r3, #0
   24f24:	d105      	bne.n	24f32 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   24f26:	2314      	movs	r3, #20
   24f28:	18fb      	adds	r3, r7, r3
   24f2a:	2201      	movs	r2, #1
   24f2c:	4252      	negs	r2, r2
   24f2e:	601a      	str	r2, [r3, #0]
   24f30:	e003      	b.n	24f3a <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   24f32:	2314      	movs	r3, #20
   24f34:	18fb      	adds	r3, r7, r3
   24f36:	687a      	ldr	r2, [r7, #4]
   24f38:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   24f3a:	2314      	movs	r3, #20
   24f3c:	18fb      	adds	r3, r7, r3
   24f3e:	220f      	movs	r2, #15
   24f40:	18ba      	adds	r2, r7, r2
   24f42:	7812      	ldrb	r2, [r2, #0]
   24f44:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   24f46:	230f      	movs	r3, #15
   24f48:	18fb      	adds	r3, r7, r3
   24f4a:	781b      	ldrb	r3, [r3, #0]
   24f4c:	b25b      	sxtb	r3, r3
   24f4e:	4a18      	ldr	r2, [pc, #96]	; (24fb0 <recv+0x178>)
   24f50:	011b      	lsls	r3, r3, #4
   24f52:	18d3      	adds	r3, r2, r3
   24f54:	3306      	adds	r3, #6
   24f56:	881b      	ldrh	r3, [r3, #0]
   24f58:	b29a      	uxth	r2, r3
   24f5a:	2314      	movs	r3, #20
   24f5c:	18fb      	adds	r3, r7, r3
   24f5e:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   24f60:	2314      	movs	r3, #20
   24f62:	18fa      	adds	r2, r7, r3
   24f64:	231d      	movs	r3, #29
   24f66:	18fb      	adds	r3, r7, r3
   24f68:	7819      	ldrb	r1, [r3, #0]
   24f6a:	2300      	movs	r3, #0
   24f6c:	9302      	str	r3, [sp, #8]
   24f6e:	2300      	movs	r3, #0
   24f70:	9301      	str	r3, [sp, #4]
   24f72:	2300      	movs	r3, #0
   24f74:	9300      	str	r3, [sp, #0]
   24f76:	2308      	movs	r3, #8
   24f78:	2002      	movs	r0, #2
   24f7a:	4c0e      	ldr	r4, [pc, #56]	; (24fb4 <recv+0x17c>)
   24f7c:	47a0      	blx	r4
   24f7e:	0003      	movs	r3, r0
   24f80:	001a      	movs	r2, r3
   24f82:	231e      	movs	r3, #30
   24f84:	18fb      	adds	r3, r7, r3
   24f86:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   24f88:	231e      	movs	r3, #30
   24f8a:	18fb      	adds	r3, r7, r3
   24f8c:	2200      	movs	r2, #0
   24f8e:	5e9b      	ldrsh	r3, [r3, r2]
   24f90:	2b00      	cmp	r3, #0
   24f92:	d004      	beq.n	24f9e <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   24f94:	231e      	movs	r3, #30
   24f96:	18fb      	adds	r3, r7, r3
   24f98:	220e      	movs	r2, #14
   24f9a:	4252      	negs	r2, r2
   24f9c:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   24f9e:	231e      	movs	r3, #30
   24fa0:	18fb      	adds	r3, r7, r3
   24fa2:	2200      	movs	r2, #0
   24fa4:	5e9b      	ldrsh	r3, [r3, r2]
}
   24fa6:	0018      	movs	r0, r3
   24fa8:	46bd      	mov	sp, r7
   24faa:	b009      	add	sp, #36	; 0x24
   24fac:	bd90      	pop	{r4, r7, pc}
   24fae:	46c0      	nop			; (mov r8, r8)
   24fb0:	200058b4 	.word	0x200058b4
   24fb4:	0002027d 	.word	0x0002027d

00024fb8 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   24fb8:	b5b0      	push	{r4, r5, r7, lr}
   24fba:	b088      	sub	sp, #32
   24fbc:	af04      	add	r7, sp, #16
   24fbe:	0002      	movs	r2, r0
   24fc0:	1dfb      	adds	r3, r7, #7
   24fc2:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   24fc4:	230f      	movs	r3, #15
   24fc6:	18fb      	adds	r3, r7, r3
   24fc8:	22fa      	movs	r2, #250	; 0xfa
   24fca:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   24fcc:	4b43      	ldr	r3, [pc, #268]	; (250dc <close+0x124>)
   24fce:	0018      	movs	r0, r3
   24fd0:	4b43      	ldr	r3, [pc, #268]	; (250e0 <close+0x128>)
   24fd2:	4798      	blx	r3
   24fd4:	1dfb      	adds	r3, r7, #7
   24fd6:	2200      	movs	r2, #0
   24fd8:	569a      	ldrsb	r2, [r3, r2]
   24fda:	4b42      	ldr	r3, [pc, #264]	; (250e4 <close+0x12c>)
   24fdc:	0011      	movs	r1, r2
   24fde:	0018      	movs	r0, r3
   24fe0:	4b3f      	ldr	r3, [pc, #252]	; (250e0 <close+0x128>)
   24fe2:	4798      	blx	r3
   24fe4:	4b40      	ldr	r3, [pc, #256]	; (250e8 <close+0x130>)
   24fe6:	0018      	movs	r0, r3
   24fe8:	4b3d      	ldr	r3, [pc, #244]	; (250e0 <close+0x128>)
   24fea:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   24fec:	1dfb      	adds	r3, r7, #7
   24fee:	781b      	ldrb	r3, [r3, #0]
   24ff0:	2b7f      	cmp	r3, #127	; 0x7f
   24ff2:	d86a      	bhi.n	250ca <close+0x112>
   24ff4:	1dfb      	adds	r3, r7, #7
   24ff6:	781b      	ldrb	r3, [r3, #0]
   24ff8:	b25b      	sxtb	r3, r3
   24ffa:	4a3c      	ldr	r2, [pc, #240]	; (250ec <close+0x134>)
   24ffc:	011b      	lsls	r3, r3, #4
   24ffe:	18d3      	adds	r3, r2, r3
   25000:	330a      	adds	r3, #10
   25002:	781b      	ldrb	r3, [r3, #0]
   25004:	b2db      	uxtb	r3, r3
   25006:	2b01      	cmp	r3, #1
   25008:	d15f      	bne.n	250ca <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   2500a:	230e      	movs	r3, #14
   2500c:	18fb      	adds	r3, r7, r3
   2500e:	2249      	movs	r2, #73	; 0x49
   25010:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   25012:	2308      	movs	r3, #8
   25014:	18fb      	adds	r3, r7, r3
   25016:	1dfa      	adds	r2, r7, #7
   25018:	7812      	ldrb	r2, [r2, #0]
   2501a:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   2501c:	1dfb      	adds	r3, r7, #7
   2501e:	781b      	ldrb	r3, [r3, #0]
   25020:	b25b      	sxtb	r3, r3
   25022:	4a32      	ldr	r2, [pc, #200]	; (250ec <close+0x134>)
   25024:	011b      	lsls	r3, r3, #4
   25026:	18d3      	adds	r3, r2, r3
   25028:	3306      	adds	r3, #6
   2502a:	881b      	ldrh	r3, [r3, #0]
   2502c:	b29a      	uxth	r2, r3
   2502e:	2308      	movs	r3, #8
   25030:	18fb      	adds	r3, r7, r3
   25032:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   25034:	1dfb      	adds	r3, r7, #7
   25036:	781b      	ldrb	r3, [r3, #0]
   25038:	b25b      	sxtb	r3, r3
   2503a:	4a2c      	ldr	r2, [pc, #176]	; (250ec <close+0x134>)
   2503c:	011b      	lsls	r3, r3, #4
   2503e:	18d3      	adds	r3, r2, r3
   25040:	330a      	adds	r3, #10
   25042:	2200      	movs	r2, #0
   25044:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   25046:	1dfb      	adds	r3, r7, #7
   25048:	781b      	ldrb	r3, [r3, #0]
   2504a:	b25b      	sxtb	r3, r3
   2504c:	4a27      	ldr	r2, [pc, #156]	; (250ec <close+0x134>)
   2504e:	011b      	lsls	r3, r3, #4
   25050:	18d3      	adds	r3, r2, r3
   25052:	3306      	adds	r3, #6
   25054:	2200      	movs	r2, #0
   25056:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   25058:	1dfb      	adds	r3, r7, #7
   2505a:	781b      	ldrb	r3, [r3, #0]
   2505c:	b25b      	sxtb	r3, r3
   2505e:	4a23      	ldr	r2, [pc, #140]	; (250ec <close+0x134>)
   25060:	011b      	lsls	r3, r3, #4
   25062:	18d3      	adds	r3, r2, r3
   25064:	330b      	adds	r3, #11
   25066:	781b      	ldrb	r3, [r3, #0]
   25068:	b2db      	uxtb	r3, r3
   2506a:	001a      	movs	r2, r3
   2506c:	2301      	movs	r3, #1
   2506e:	4013      	ands	r3, r2
   25070:	d003      	beq.n	2507a <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   25072:	230e      	movs	r3, #14
   25074:	18fb      	adds	r3, r7, r3
   25076:	224e      	movs	r2, #78	; 0x4e
   25078:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   2507a:	230f      	movs	r3, #15
   2507c:	18fc      	adds	r4, r7, r3
   2507e:	2308      	movs	r3, #8
   25080:	18fa      	adds	r2, r7, r3
   25082:	230e      	movs	r3, #14
   25084:	18fb      	adds	r3, r7, r3
   25086:	7819      	ldrb	r1, [r3, #0]
   25088:	2300      	movs	r3, #0
   2508a:	9302      	str	r3, [sp, #8]
   2508c:	2300      	movs	r3, #0
   2508e:	9301      	str	r3, [sp, #4]
   25090:	2300      	movs	r3, #0
   25092:	9300      	str	r3, [sp, #0]
   25094:	2304      	movs	r3, #4
   25096:	2002      	movs	r0, #2
   25098:	4d15      	ldr	r5, [pc, #84]	; (250f0 <close+0x138>)
   2509a:	47a8      	blx	r5
   2509c:	0003      	movs	r3, r0
   2509e:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   250a0:	230f      	movs	r3, #15
   250a2:	18fb      	adds	r3, r7, r3
   250a4:	781b      	ldrb	r3, [r3, #0]
   250a6:	b25b      	sxtb	r3, r3
   250a8:	2b00      	cmp	r3, #0
   250aa:	d003      	beq.n	250b4 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   250ac:	230f      	movs	r3, #15
   250ae:	18fb      	adds	r3, r7, r3
   250b0:	22f7      	movs	r2, #247	; 0xf7
   250b2:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   250b4:	1dfb      	adds	r3, r7, #7
   250b6:	781b      	ldrb	r3, [r3, #0]
   250b8:	b25b      	sxtb	r3, r3
   250ba:	011a      	lsls	r2, r3, #4
   250bc:	4b0b      	ldr	r3, [pc, #44]	; (250ec <close+0x134>)
   250be:	18d3      	adds	r3, r2, r3
   250c0:	2210      	movs	r2, #16
   250c2:	2100      	movs	r1, #0
   250c4:	0018      	movs	r0, r3
   250c6:	4b0b      	ldr	r3, [pc, #44]	; (250f4 <close+0x13c>)
   250c8:	4798      	blx	r3
	}
	return s8Ret;
   250ca:	230f      	movs	r3, #15
   250cc:	18fb      	adds	r3, r7, r3
   250ce:	781b      	ldrb	r3, [r3, #0]
   250d0:	b25b      	sxtb	r3, r3
}
   250d2:	0018      	movs	r0, r3
   250d4:	46bd      	mov	sp, r7
   250d6:	b004      	add	sp, #16
   250d8:	bdb0      	pop	{r4, r5, r7, pc}
   250da:	46c0      	nop			; (mov r8, r8)
   250dc:	00038aa4 	.word	0x00038aa4
   250e0:	0001d2e9 	.word	0x0001d2e9
   250e4:	00038ae4 	.word	0x00038ae4
   250e8:	00038ac4 	.word	0x00038ac4
   250ec:	200058b4 	.word	0x200058b4
   250f0:	0002027d 	.word	0x0002027d
   250f4:	0002001d 	.word	0x0002001d

000250f8 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   250f8:	b580      	push	{r7, lr}
   250fa:	b086      	sub	sp, #24
   250fc:	af00      	add	r7, sp, #0
   250fe:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   25100:	2300      	movs	r3, #0
   25102:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   25104:	2317      	movs	r3, #23
   25106:	18fb      	adds	r3, r7, r3
   25108:	2200      	movs	r2, #0
   2510a:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   2510c:	2316      	movs	r3, #22
   2510e:	18fb      	adds	r3, r7, r3
   25110:	2200      	movs	r2, #0
   25112:	701a      	strb	r2, [r3, #0]
   25114:	e060      	b.n	251d8 <nmi_inet_addr+0xe0>
	{
		j = 0;
   25116:	2315      	movs	r3, #21
   25118:	18fb      	adds	r3, r7, r3
   2511a:	2200      	movs	r2, #0
   2511c:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   2511e:	2314      	movs	r3, #20
   25120:	18fb      	adds	r3, r7, r3
   25122:	687a      	ldr	r2, [r7, #4]
   25124:	7812      	ldrb	r2, [r2, #0]
   25126:	701a      	strb	r2, [r3, #0]
			++j;
   25128:	2315      	movs	r3, #21
   2512a:	18fb      	adds	r3, r7, r3
   2512c:	2215      	movs	r2, #21
   2512e:	18ba      	adds	r2, r7, r2
   25130:	7812      	ldrb	r2, [r2, #0]
   25132:	3201      	adds	r2, #1
   25134:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   25136:	2315      	movs	r3, #21
   25138:	18fb      	adds	r3, r7, r3
   2513a:	781b      	ldrb	r3, [r3, #0]
   2513c:	2b04      	cmp	r3, #4
   2513e:	d901      	bls.n	25144 <nmi_inet_addr+0x4c>
			{
				return 0;
   25140:	2300      	movs	r3, #0
   25142:	e057      	b.n	251f4 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   25144:	2314      	movs	r3, #20
   25146:	18fb      	adds	r3, r7, r3
   25148:	781b      	ldrb	r3, [r3, #0]
   2514a:	2b2e      	cmp	r3, #46	; 0x2e
   2514c:	d004      	beq.n	25158 <nmi_inet_addr+0x60>
   2514e:	2314      	movs	r3, #20
   25150:	18fb      	adds	r3, r7, r3
   25152:	781b      	ldrb	r3, [r3, #0]
   25154:	2b00      	cmp	r3, #0
   25156:	d10d      	bne.n	25174 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   25158:	2316      	movs	r3, #22
   2515a:	18fb      	adds	r3, r7, r3
   2515c:	781b      	ldrb	r3, [r3, #0]
   2515e:	220c      	movs	r2, #12
   25160:	18ba      	adds	r2, r7, r2
   25162:	2117      	movs	r1, #23
   25164:	1879      	adds	r1, r7, r1
   25166:	7809      	ldrb	r1, [r1, #0]
   25168:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   2516a:	2317      	movs	r3, #23
   2516c:	18fb      	adds	r3, r7, r3
   2516e:	2200      	movs	r2, #0
   25170:	701a      	strb	r2, [r3, #0]
   25172:	e01d      	b.n	251b0 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   25174:	2314      	movs	r3, #20
   25176:	18fb      	adds	r3, r7, r3
   25178:	781b      	ldrb	r3, [r3, #0]
   2517a:	2b2f      	cmp	r3, #47	; 0x2f
   2517c:	d916      	bls.n	251ac <nmi_inet_addr+0xb4>
   2517e:	2314      	movs	r3, #20
   25180:	18fb      	adds	r3, r7, r3
   25182:	781b      	ldrb	r3, [r3, #0]
   25184:	2b39      	cmp	r3, #57	; 0x39
   25186:	d811      	bhi.n	251ac <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   25188:	2317      	movs	r3, #23
   2518a:	18fb      	adds	r3, r7, r3
   2518c:	781b      	ldrb	r3, [r3, #0]
   2518e:	1c1a      	adds	r2, r3, #0
   25190:	0092      	lsls	r2, r2, #2
   25192:	18d3      	adds	r3, r2, r3
   25194:	18db      	adds	r3, r3, r3
   25196:	b2da      	uxtb	r2, r3
   25198:	2314      	movs	r3, #20
   2519a:	18fb      	adds	r3, r7, r3
   2519c:	781b      	ldrb	r3, [r3, #0]
   2519e:	18d3      	adds	r3, r2, r3
   251a0:	b2da      	uxtb	r2, r3
   251a2:	2317      	movs	r3, #23
   251a4:	18fb      	adds	r3, r7, r3
   251a6:	3a30      	subs	r2, #48	; 0x30
   251a8:	701a      	strb	r2, [r3, #0]
   251aa:	e001      	b.n	251b0 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   251ac:	2300      	movs	r3, #0
   251ae:	e021      	b.n	251f4 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   251b0:	687b      	ldr	r3, [r7, #4]
   251b2:	3301      	adds	r3, #1
   251b4:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   251b6:	2314      	movs	r3, #20
   251b8:	18fb      	adds	r3, r7, r3
   251ba:	781b      	ldrb	r3, [r3, #0]
   251bc:	2b2e      	cmp	r3, #46	; 0x2e
   251be:	d004      	beq.n	251ca <nmi_inet_addr+0xd2>
   251c0:	2314      	movs	r3, #20
   251c2:	18fb      	adds	r3, r7, r3
   251c4:	781b      	ldrb	r3, [r3, #0]
   251c6:	2b00      	cmp	r3, #0
   251c8:	d1a9      	bne.n	2511e <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   251ca:	2316      	movs	r3, #22
   251cc:	18fb      	adds	r3, r7, r3
   251ce:	2216      	movs	r2, #22
   251d0:	18ba      	adds	r2, r7, r2
   251d2:	7812      	ldrb	r2, [r2, #0]
   251d4:	3201      	adds	r2, #1
   251d6:	701a      	strb	r2, [r3, #0]
   251d8:	2316      	movs	r3, #22
   251da:	18fb      	adds	r3, r7, r3
   251dc:	781b      	ldrb	r3, [r3, #0]
   251de:	2b03      	cmp	r3, #3
   251e0:	d999      	bls.n	25116 <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   251e2:	230c      	movs	r3, #12
   251e4:	18f9      	adds	r1, r7, r3
   251e6:	2310      	movs	r3, #16
   251e8:	18fb      	adds	r3, r7, r3
   251ea:	2204      	movs	r2, #4
   251ec:	0018      	movs	r0, r3
   251ee:	4b03      	ldr	r3, [pc, #12]	; (251fc <nmi_inet_addr+0x104>)
   251f0:	4798      	blx	r3
	return u32IP;
   251f2:	693b      	ldr	r3, [r7, #16]
}
   251f4:	0018      	movs	r0, r3
   251f6:	46bd      	mov	sp, r7
   251f8:	b006      	add	sp, #24
   251fa:	bd80      	pop	{r7, pc}
   251fc:	0001ffe1 	.word	0x0001ffe1

00025200 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   25200:	b5b0      	push	{r4, r5, r7, lr}
   25202:	b088      	sub	sp, #32
   25204:	af04      	add	r7, sp, #16
   25206:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   25208:	230f      	movs	r3, #15
   2520a:	18fb      	adds	r3, r7, r3
   2520c:	22fa      	movs	r2, #250	; 0xfa
   2520e:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   25210:	687b      	ldr	r3, [r7, #4]
   25212:	0018      	movs	r0, r3
   25214:	4b14      	ldr	r3, [pc, #80]	; (25268 <gethostbyname+0x68>)
   25216:	4798      	blx	r3
   25218:	0003      	movs	r3, r0
   2521a:	001a      	movs	r2, r3
   2521c:	230e      	movs	r3, #14
   2521e:	18fb      	adds	r3, r7, r3
   25220:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   25222:	230e      	movs	r3, #14
   25224:	18fb      	adds	r3, r7, r3
   25226:	781b      	ldrb	r3, [r3, #0]
   25228:	2b40      	cmp	r3, #64	; 0x40
   2522a:	d815      	bhi.n	25258 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   2522c:	230e      	movs	r3, #14
   2522e:	18fb      	adds	r3, r7, r3
   25230:	781b      	ldrb	r3, [r3, #0]
   25232:	b29b      	uxth	r3, r3
   25234:	3301      	adds	r3, #1
   25236:	b299      	uxth	r1, r3
   25238:	230f      	movs	r3, #15
   2523a:	18fc      	adds	r4, r7, r3
   2523c:	687a      	ldr	r2, [r7, #4]
   2523e:	2300      	movs	r3, #0
   25240:	9302      	str	r3, [sp, #8]
   25242:	2300      	movs	r3, #0
   25244:	9301      	str	r3, [sp, #4]
   25246:	2300      	movs	r3, #0
   25248:	9300      	str	r3, [sp, #0]
   2524a:	000b      	movs	r3, r1
   2524c:	214a      	movs	r1, #74	; 0x4a
   2524e:	2002      	movs	r0, #2
   25250:	4d06      	ldr	r5, [pc, #24]	; (2526c <gethostbyname+0x6c>)
   25252:	47a8      	blx	r5
   25254:	0003      	movs	r3, r0
   25256:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   25258:	230f      	movs	r3, #15
   2525a:	18fb      	adds	r3, r7, r3
   2525c:	781b      	ldrb	r3, [r3, #0]
   2525e:	b25b      	sxtb	r3, r3
}
   25260:	0018      	movs	r0, r3
   25262:	46bd      	mov	sp, r7
   25264:	b004      	add	sp, #16
   25266:	bdb0      	pop	{r4, r5, r7, pc}
   25268:	0002005b 	.word	0x0002005b
   2526c:	0002027d 	.word	0x0002027d

00025270 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   25270:	b580      	push	{r7, lr}
   25272:	b082      	sub	sp, #8
   25274:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   25276:	003b      	movs	r3, r7
   25278:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   2527a:	687b      	ldr	r3, [r7, #4]
   2527c:	22b9      	movs	r2, #185	; 0xb9
   2527e:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   25280:	4b13      	ldr	r3, [pc, #76]	; (252d0 <spi_flash_enter_low_power_mode+0x60>)
   25282:	2100      	movs	r1, #0
   25284:	0018      	movs	r0, r3
   25286:	4b13      	ldr	r3, [pc, #76]	; (252d4 <spi_flash_enter_low_power_mode+0x64>)
   25288:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   2528a:	687b      	ldr	r3, [r7, #4]
   2528c:	781b      	ldrb	r3, [r3, #0]
   2528e:	001a      	movs	r2, r3
   25290:	4b11      	ldr	r3, [pc, #68]	; (252d8 <spi_flash_enter_low_power_mode+0x68>)
   25292:	0011      	movs	r1, r2
   25294:	0018      	movs	r0, r3
   25296:	4b0f      	ldr	r3, [pc, #60]	; (252d4 <spi_flash_enter_low_power_mode+0x64>)
   25298:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   2529a:	4b10      	ldr	r3, [pc, #64]	; (252dc <spi_flash_enter_low_power_mode+0x6c>)
   2529c:	2101      	movs	r1, #1
   2529e:	0018      	movs	r0, r3
   252a0:	4b0c      	ldr	r3, [pc, #48]	; (252d4 <spi_flash_enter_low_power_mode+0x64>)
   252a2:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   252a4:	4b0e      	ldr	r3, [pc, #56]	; (252e0 <spi_flash_enter_low_power_mode+0x70>)
   252a6:	2100      	movs	r1, #0
   252a8:	0018      	movs	r0, r3
   252aa:	4b0a      	ldr	r3, [pc, #40]	; (252d4 <spi_flash_enter_low_power_mode+0x64>)
   252ac:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   252ae:	4b0d      	ldr	r3, [pc, #52]	; (252e4 <spi_flash_enter_low_power_mode+0x74>)
   252b0:	2181      	movs	r1, #129	; 0x81
   252b2:	0018      	movs	r0, r3
   252b4:	4b07      	ldr	r3, [pc, #28]	; (252d4 <spi_flash_enter_low_power_mode+0x64>)
   252b6:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   252b8:	46c0      	nop			; (mov r8, r8)
   252ba:	4b0b      	ldr	r3, [pc, #44]	; (252e8 <spi_flash_enter_low_power_mode+0x78>)
   252bc:	0018      	movs	r0, r3
   252be:	4b0b      	ldr	r3, [pc, #44]	; (252ec <spi_flash_enter_low_power_mode+0x7c>)
   252c0:	4798      	blx	r3
   252c2:	0003      	movs	r3, r0
   252c4:	2b01      	cmp	r3, #1
   252c6:	d1f8      	bne.n	252ba <spi_flash_enter_low_power_mode+0x4a>
}
   252c8:	46c0      	nop			; (mov r8, r8)
   252ca:	46bd      	mov	sp, r7
   252cc:	b002      	add	sp, #8
   252ce:	bd80      	pop	{r7, pc}
   252d0:	00010208 	.word	0x00010208
   252d4:	000220d1 	.word	0x000220d1
   252d8:	0001020c 	.word	0x0001020c
   252dc:	00010214 	.word	0x00010214
   252e0:	0001021c 	.word	0x0001021c
   252e4:	00010204 	.word	0x00010204
   252e8:	00010218 	.word	0x00010218
   252ec:	0002208d 	.word	0x0002208d

000252f0 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   252f0:	b580      	push	{r7, lr}
   252f2:	b082      	sub	sp, #8
   252f4:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   252f6:	003b      	movs	r3, r7
   252f8:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   252fa:	687b      	ldr	r3, [r7, #4]
   252fc:	22ab      	movs	r2, #171	; 0xab
   252fe:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   25300:	4b13      	ldr	r3, [pc, #76]	; (25350 <spi_flash_leave_low_power_mode+0x60>)
   25302:	2100      	movs	r1, #0
   25304:	0018      	movs	r0, r3
   25306:	4b13      	ldr	r3, [pc, #76]	; (25354 <spi_flash_leave_low_power_mode+0x64>)
   25308:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   2530a:	687b      	ldr	r3, [r7, #4]
   2530c:	781b      	ldrb	r3, [r3, #0]
   2530e:	001a      	movs	r2, r3
   25310:	4b11      	ldr	r3, [pc, #68]	; (25358 <spi_flash_leave_low_power_mode+0x68>)
   25312:	0011      	movs	r1, r2
   25314:	0018      	movs	r0, r3
   25316:	4b0f      	ldr	r3, [pc, #60]	; (25354 <spi_flash_leave_low_power_mode+0x64>)
   25318:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   2531a:	4b10      	ldr	r3, [pc, #64]	; (2535c <spi_flash_leave_low_power_mode+0x6c>)
   2531c:	2101      	movs	r1, #1
   2531e:	0018      	movs	r0, r3
   25320:	4b0c      	ldr	r3, [pc, #48]	; (25354 <spi_flash_leave_low_power_mode+0x64>)
   25322:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   25324:	4b0e      	ldr	r3, [pc, #56]	; (25360 <spi_flash_leave_low_power_mode+0x70>)
   25326:	2100      	movs	r1, #0
   25328:	0018      	movs	r0, r3
   2532a:	4b0a      	ldr	r3, [pc, #40]	; (25354 <spi_flash_leave_low_power_mode+0x64>)
   2532c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   2532e:	4b0d      	ldr	r3, [pc, #52]	; (25364 <spi_flash_leave_low_power_mode+0x74>)
   25330:	2181      	movs	r1, #129	; 0x81
   25332:	0018      	movs	r0, r3
   25334:	4b07      	ldr	r3, [pc, #28]	; (25354 <spi_flash_leave_low_power_mode+0x64>)
   25336:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   25338:	46c0      	nop			; (mov r8, r8)
   2533a:	4b0b      	ldr	r3, [pc, #44]	; (25368 <spi_flash_leave_low_power_mode+0x78>)
   2533c:	0018      	movs	r0, r3
   2533e:	4b0b      	ldr	r3, [pc, #44]	; (2536c <spi_flash_leave_low_power_mode+0x7c>)
   25340:	4798      	blx	r3
   25342:	0003      	movs	r3, r0
   25344:	2b01      	cmp	r3, #1
   25346:	d1f8      	bne.n	2533a <spi_flash_leave_low_power_mode+0x4a>
}
   25348:	46c0      	nop			; (mov r8, r8)
   2534a:	46bd      	mov	sp, r7
   2534c:	b002      	add	sp, #8
   2534e:	bd80      	pop	{r7, pc}
   25350:	00010208 	.word	0x00010208
   25354:	000220d1 	.word	0x000220d1
   25358:	0001020c 	.word	0x0001020c
   2535c:	00010214 	.word	0x00010214
   25360:	0001021c 	.word	0x0001021c
   25364:	00010204 	.word	0x00010204
   25368:	00010218 	.word	0x00010218
   2536c:	0002208d 	.word	0x0002208d

00025370 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   25370:	b590      	push	{r4, r7, lr}
   25372:	b085      	sub	sp, #20
   25374:	af00      	add	r7, sp, #0
   25376:	0002      	movs	r2, r0
   25378:	1dfb      	adds	r3, r7, #7
   2537a:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   2537c:	230f      	movs	r3, #15
   2537e:	18fb      	adds	r3, r7, r3
   25380:	2200      	movs	r2, #0
   25382:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   25384:	4b24      	ldr	r3, [pc, #144]	; (25418 <spi_flash_enable+0xa8>)
   25386:	4798      	blx	r3
   25388:	0003      	movs	r3, r0
   2538a:	051b      	lsls	r3, r3, #20
   2538c:	0d1b      	lsrs	r3, r3, #20
   2538e:	4a23      	ldr	r2, [pc, #140]	; (2541c <spi_flash_enable+0xac>)
   25390:	4293      	cmp	r3, r2
   25392:	d938      	bls.n	25406 <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   25394:	230f      	movs	r3, #15
   25396:	18fc      	adds	r4, r7, r3
   25398:	2308      	movs	r3, #8
   2539a:	18fb      	adds	r3, r7, r3
   2539c:	4a20      	ldr	r2, [pc, #128]	; (25420 <spi_flash_enable+0xb0>)
   2539e:	0019      	movs	r1, r3
   253a0:	0010      	movs	r0, r2
   253a2:	4b20      	ldr	r3, [pc, #128]	; (25424 <spi_flash_enable+0xb4>)
   253a4:	4798      	blx	r3
   253a6:	0003      	movs	r3, r0
   253a8:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   253aa:	230f      	movs	r3, #15
   253ac:	18fb      	adds	r3, r7, r3
   253ae:	781b      	ldrb	r3, [r3, #0]
   253b0:	b25b      	sxtb	r3, r3
   253b2:	2b00      	cmp	r3, #0
   253b4:	d126      	bne.n	25404 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   253b6:	68bb      	ldr	r3, [r7, #8]
   253b8:	4a1b      	ldr	r2, [pc, #108]	; (25428 <spi_flash_enable+0xb8>)
   253ba:	4013      	ands	r3, r2
   253bc:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   253be:	68bb      	ldr	r3, [r7, #8]
   253c0:	4a1a      	ldr	r2, [pc, #104]	; (2542c <spi_flash_enable+0xbc>)
   253c2:	4313      	orrs	r3, r2
   253c4:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   253c6:	68bb      	ldr	r3, [r7, #8]
   253c8:	4a15      	ldr	r2, [pc, #84]	; (25420 <spi_flash_enable+0xb0>)
   253ca:	0019      	movs	r1, r3
   253cc:	0010      	movs	r0, r2
   253ce:	4b18      	ldr	r3, [pc, #96]	; (25430 <spi_flash_enable+0xc0>)
   253d0:	4798      	blx	r3
		if(enable) {
   253d2:	1dfb      	adds	r3, r7, #7
   253d4:	781b      	ldrb	r3, [r3, #0]
   253d6:	2b00      	cmp	r3, #0
   253d8:	d002      	beq.n	253e0 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   253da:	4b16      	ldr	r3, [pc, #88]	; (25434 <spi_flash_enable+0xc4>)
   253dc:	4798      	blx	r3
   253de:	e001      	b.n	253e4 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   253e0:	4b15      	ldr	r3, [pc, #84]	; (25438 <spi_flash_enable+0xc8>)
   253e2:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   253e4:	68bb      	ldr	r3, [r7, #8]
   253e6:	4a10      	ldr	r2, [pc, #64]	; (25428 <spi_flash_enable+0xb8>)
   253e8:	4013      	ands	r3, r2
   253ea:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   253ec:	68bb      	ldr	r3, [r7, #8]
   253ee:	2280      	movs	r2, #128	; 0x80
   253f0:	0252      	lsls	r2, r2, #9
   253f2:	4313      	orrs	r3, r2
   253f4:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   253f6:	68bb      	ldr	r3, [r7, #8]
   253f8:	4a09      	ldr	r2, [pc, #36]	; (25420 <spi_flash_enable+0xb0>)
   253fa:	0019      	movs	r1, r3
   253fc:	0010      	movs	r0, r2
   253fe:	4b0c      	ldr	r3, [pc, #48]	; (25430 <spi_flash_enable+0xc0>)
   25400:	4798      	blx	r3
   25402:	e000      	b.n	25406 <spi_flash_enable+0x96>
			goto ERR1;
   25404:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   25406:	230f      	movs	r3, #15
   25408:	18fb      	adds	r3, r7, r3
   2540a:	781b      	ldrb	r3, [r3, #0]
   2540c:	b25b      	sxtb	r3, r3
}
   2540e:	0018      	movs	r0, r3
   25410:	46bd      	mov	sp, r7
   25412:	b005      	add	sp, #20
   25414:	bd90      	pop	{r4, r7, pc}
   25416:	46c0      	nop			; (mov r8, r8)
   25418:	000219ad 	.word	0x000219ad
   2541c:	0000039f 	.word	0x0000039f
   25420:	00001410 	.word	0x00001410
   25424:	000220ad 	.word	0x000220ad
   25428:	f8888fff 	.word	0xf8888fff
   2542c:	01111000 	.word	0x01111000
   25430:	000220d1 	.word	0x000220d1
   25434:	000252f1 	.word	0x000252f1
   25438:	00025271 	.word	0x00025271

0002543c <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   2543c:	b580      	push	{r7, lr}
   2543e:	b084      	sub	sp, #16
   25440:	af00      	add	r7, sp, #0
   25442:	0002      	movs	r2, r0
   25444:	1dfb      	adds	r3, r7, #7
   25446:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   25448:	1dfb      	adds	r3, r7, #7
   2544a:	781b      	ldrb	r3, [r3, #0]
   2544c:	2b00      	cmp	r3, #0
   2544e:	d108      	bne.n	25462 <mem_test_unit_ready+0x26>
   25450:	1dfb      	adds	r3, r7, #7
   25452:	781a      	ldrb	r2, [r3, #0]
   25454:	4b08      	ldr	r3, [pc, #32]	; (25478 <mem_test_unit_ready+0x3c>)
   25456:	0152      	lsls	r2, r2, #5
   25458:	58d3      	ldr	r3, [r2, r3]
   2545a:	4798      	blx	r3
   2545c:	0003      	movs	r3, r0
   2545e:	001a      	movs	r2, r3
   25460:	e000      	b.n	25464 <mem_test_unit_ready+0x28>
   25462:	2201      	movs	r2, #1
  status =
   25464:	230f      	movs	r3, #15
   25466:	18fb      	adds	r3, r7, r3
   25468:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   2546a:	230f      	movs	r3, #15
   2546c:	18fb      	adds	r3, r7, r3
   2546e:	781b      	ldrb	r3, [r3, #0]
}
   25470:	0018      	movs	r0, r3
   25472:	46bd      	mov	sp, r7
   25474:	b004      	add	sp, #16
   25476:	bd80      	pop	{r7, pc}
   25478:	00038b70 	.word	0x00038b70

0002547c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   2547c:	b580      	push	{r7, lr}
   2547e:	b084      	sub	sp, #16
   25480:	af00      	add	r7, sp, #0
   25482:	0002      	movs	r2, r0
   25484:	6039      	str	r1, [r7, #0]
   25486:	1dfb      	adds	r3, r7, #7
   25488:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   2548a:	1dfb      	adds	r3, r7, #7
   2548c:	781b      	ldrb	r3, [r3, #0]
   2548e:	2b00      	cmp	r3, #0
   25490:	d10c      	bne.n	254ac <mem_read_capacity+0x30>
   25492:	1dfb      	adds	r3, r7, #7
   25494:	781b      	ldrb	r3, [r3, #0]
   25496:	4a0b      	ldr	r2, [pc, #44]	; (254c4 <mem_read_capacity+0x48>)
   25498:	015b      	lsls	r3, r3, #5
   2549a:	18d3      	adds	r3, r2, r3
   2549c:	3304      	adds	r3, #4
   2549e:	681b      	ldr	r3, [r3, #0]
   254a0:	683a      	ldr	r2, [r7, #0]
   254a2:	0010      	movs	r0, r2
   254a4:	4798      	blx	r3
   254a6:	0003      	movs	r3, r0
   254a8:	001a      	movs	r2, r3
   254aa:	e000      	b.n	254ae <mem_read_capacity+0x32>
   254ac:	2201      	movs	r2, #1
  status =
   254ae:	230f      	movs	r3, #15
   254b0:	18fb      	adds	r3, r7, r3
   254b2:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   254b4:	230f      	movs	r3, #15
   254b6:	18fb      	adds	r3, r7, r3
   254b8:	781b      	ldrb	r3, [r3, #0]
}
   254ba:	0018      	movs	r0, r3
   254bc:	46bd      	mov	sp, r7
   254be:	b004      	add	sp, #16
   254c0:	bd80      	pop	{r7, pc}
   254c2:	46c0      	nop			; (mov r8, r8)
   254c4:	00038b70 	.word	0x00038b70

000254c8 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   254c8:	b580      	push	{r7, lr}
   254ca:	b084      	sub	sp, #16
   254cc:	af00      	add	r7, sp, #0
   254ce:	0002      	movs	r2, r0
   254d0:	1dfb      	adds	r3, r7, #7
   254d2:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   254d4:	1dfb      	adds	r3, r7, #7
   254d6:	781b      	ldrb	r3, [r3, #0]
   254d8:	425a      	negs	r2, r3
   254da:	4153      	adcs	r3, r2
   254dc:	b2da      	uxtb	r2, r3
  sector_size =
   254de:	230f      	movs	r3, #15
   254e0:	18fb      	adds	r3, r7, r3
   254e2:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   254e4:	230f      	movs	r3, #15
   254e6:	18fb      	adds	r3, r7, r3
   254e8:	781b      	ldrb	r3, [r3, #0]
}
   254ea:	0018      	movs	r0, r3
   254ec:	46bd      	mov	sp, r7
   254ee:	b004      	add	sp, #16
   254f0:	bd80      	pop	{r7, pc}
	...

000254f4 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   254f4:	b580      	push	{r7, lr}
   254f6:	b084      	sub	sp, #16
   254f8:	af00      	add	r7, sp, #0
   254fa:	0002      	movs	r2, r0
   254fc:	1dfb      	adds	r3, r7, #7
   254fe:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   25500:	1dfb      	adds	r3, r7, #7
   25502:	781b      	ldrb	r3, [r3, #0]
   25504:	2b00      	cmp	r3, #0
   25506:	d109      	bne.n	2551c <mem_wr_protect+0x28>
   25508:	1dfb      	adds	r3, r7, #7
   2550a:	781b      	ldrb	r3, [r3, #0]
   2550c:	4a0a      	ldr	r2, [pc, #40]	; (25538 <mem_wr_protect+0x44>)
   2550e:	015b      	lsls	r3, r3, #5
   25510:	18d3      	adds	r3, r2, r3
   25512:	330c      	adds	r3, #12
   25514:	681b      	ldr	r3, [r3, #0]
   25516:	4798      	blx	r3
   25518:	1e03      	subs	r3, r0, #0
   2551a:	d001      	beq.n	25520 <mem_wr_protect+0x2c>
   2551c:	2201      	movs	r2, #1
   2551e:	e000      	b.n	25522 <mem_wr_protect+0x2e>
   25520:	2200      	movs	r2, #0
  wr_protect =
   25522:	230f      	movs	r3, #15
   25524:	18fb      	adds	r3, r7, r3
   25526:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   25528:	230f      	movs	r3, #15
   2552a:	18fb      	adds	r3, r7, r3
   2552c:	781b      	ldrb	r3, [r3, #0]
}
   2552e:	0018      	movs	r0, r3
   25530:	46bd      	mov	sp, r7
   25532:	b004      	add	sp, #16
   25534:	bd80      	pop	{r7, pc}
   25536:	46c0      	nop			; (mov r8, r8)
   25538:	00038b70 	.word	0x00038b70

0002553c <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   2553c:	b580      	push	{r7, lr}
   2553e:	b086      	sub	sp, #24
   25540:	af00      	add	r7, sp, #0
   25542:	60b9      	str	r1, [r7, #8]
   25544:	607a      	str	r2, [r7, #4]
   25546:	230f      	movs	r3, #15
   25548:	18fb      	adds	r3, r7, r3
   2554a:	1c02      	adds	r2, r0, #0
   2554c:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   2554e:	230f      	movs	r3, #15
   25550:	18fb      	adds	r3, r7, r3
   25552:	781b      	ldrb	r3, [r3, #0]
   25554:	2b00      	cmp	r3, #0
   25556:	d10e      	bne.n	25576 <memory_2_ram+0x3a>
   25558:	230f      	movs	r3, #15
   2555a:	18fb      	adds	r3, r7, r3
   2555c:	781b      	ldrb	r3, [r3, #0]
   2555e:	4a0b      	ldr	r2, [pc, #44]	; (2558c <memory_2_ram+0x50>)
   25560:	015b      	lsls	r3, r3, #5
   25562:	18d3      	adds	r3, r2, r3
   25564:	3314      	adds	r3, #20
   25566:	681b      	ldr	r3, [r3, #0]
   25568:	6879      	ldr	r1, [r7, #4]
   2556a:	68ba      	ldr	r2, [r7, #8]
   2556c:	0010      	movs	r0, r2
   2556e:	4798      	blx	r3
   25570:	0003      	movs	r3, r0
   25572:	001a      	movs	r2, r3
   25574:	e000      	b.n	25578 <memory_2_ram+0x3c>
   25576:	2201      	movs	r2, #1
  status =
   25578:	2317      	movs	r3, #23
   2557a:	18fb      	adds	r3, r7, r3
   2557c:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   2557e:	2317      	movs	r3, #23
   25580:	18fb      	adds	r3, r7, r3
   25582:	781b      	ldrb	r3, [r3, #0]
}
   25584:	0018      	movs	r0, r3
   25586:	46bd      	mov	sp, r7
   25588:	b006      	add	sp, #24
   2558a:	bd80      	pop	{r7, pc}
   2558c:	00038b70 	.word	0x00038b70

00025590 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   25590:	b580      	push	{r7, lr}
   25592:	b086      	sub	sp, #24
   25594:	af00      	add	r7, sp, #0
   25596:	60b9      	str	r1, [r7, #8]
   25598:	607a      	str	r2, [r7, #4]
   2559a:	230f      	movs	r3, #15
   2559c:	18fb      	adds	r3, r7, r3
   2559e:	1c02      	adds	r2, r0, #0
   255a0:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   255a2:	230f      	movs	r3, #15
   255a4:	18fb      	adds	r3, r7, r3
   255a6:	781b      	ldrb	r3, [r3, #0]
   255a8:	2b00      	cmp	r3, #0
   255aa:	d10e      	bne.n	255ca <ram_2_memory+0x3a>
   255ac:	230f      	movs	r3, #15
   255ae:	18fb      	adds	r3, r7, r3
   255b0:	781b      	ldrb	r3, [r3, #0]
   255b2:	4a0b      	ldr	r2, [pc, #44]	; (255e0 <ram_2_memory+0x50>)
   255b4:	015b      	lsls	r3, r3, #5
   255b6:	18d3      	adds	r3, r2, r3
   255b8:	3318      	adds	r3, #24
   255ba:	681b      	ldr	r3, [r3, #0]
   255bc:	6879      	ldr	r1, [r7, #4]
   255be:	68ba      	ldr	r2, [r7, #8]
   255c0:	0010      	movs	r0, r2
   255c2:	4798      	blx	r3
   255c4:	0003      	movs	r3, r0
   255c6:	001a      	movs	r2, r3
   255c8:	e000      	b.n	255cc <ram_2_memory+0x3c>
   255ca:	2201      	movs	r2, #1
  status =
   255cc:	2317      	movs	r3, #23
   255ce:	18fb      	adds	r3, r7, r3
   255d0:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   255d2:	2317      	movs	r3, #23
   255d4:	18fb      	adds	r3, r7, r3
   255d6:	781b      	ldrb	r3, [r3, #0]
}
   255d8:	0018      	movs	r0, r3
   255da:	46bd      	mov	sp, r7
   255dc:	b006      	add	sp, #24
   255de:	bd80      	pop	{r7, pc}
   255e0:	00038b70 	.word	0x00038b70

000255e4 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   255e4:	b580      	push	{r7, lr}
   255e6:	b082      	sub	sp, #8
   255e8:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   255ea:	4b10      	ldr	r3, [pc, #64]	; (2562c <cpu_irq_enter_critical+0x48>)
   255ec:	681b      	ldr	r3, [r3, #0]
   255ee:	2b00      	cmp	r3, #0
   255f0:	d112      	bne.n	25618 <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   255f2:	f3ef 8310 	mrs	r3, PRIMASK
   255f6:	607b      	str	r3, [r7, #4]
  return(result);
   255f8:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   255fa:	2b00      	cmp	r3, #0
   255fc:	d109      	bne.n	25612 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   255fe:	b672      	cpsid	i
   25600:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   25604:	4b0a      	ldr	r3, [pc, #40]	; (25630 <cpu_irq_enter_critical+0x4c>)
   25606:	2200      	movs	r2, #0
   25608:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   2560a:	4b0a      	ldr	r3, [pc, #40]	; (25634 <cpu_irq_enter_critical+0x50>)
   2560c:	2201      	movs	r2, #1
   2560e:	701a      	strb	r2, [r3, #0]
   25610:	e002      	b.n	25618 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   25612:	4b08      	ldr	r3, [pc, #32]	; (25634 <cpu_irq_enter_critical+0x50>)
   25614:	2200      	movs	r2, #0
   25616:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   25618:	4b04      	ldr	r3, [pc, #16]	; (2562c <cpu_irq_enter_critical+0x48>)
   2561a:	681b      	ldr	r3, [r3, #0]
   2561c:	1c5a      	adds	r2, r3, #1
   2561e:	4b03      	ldr	r3, [pc, #12]	; (2562c <cpu_irq_enter_critical+0x48>)
   25620:	601a      	str	r2, [r3, #0]
}
   25622:	46c0      	nop			; (mov r8, r8)
   25624:	46bd      	mov	sp, r7
   25626:	b002      	add	sp, #8
   25628:	bd80      	pop	{r7, pc}
   2562a:	46c0      	nop			; (mov r8, r8)
   2562c:	2000411c 	.word	0x2000411c
   25630:	2000010e 	.word	0x2000010e
   25634:	20004120 	.word	0x20004120

00025638 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   25638:	b580      	push	{r7, lr}
   2563a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   2563c:	4b0b      	ldr	r3, [pc, #44]	; (2566c <cpu_irq_leave_critical+0x34>)
   2563e:	681b      	ldr	r3, [r3, #0]
   25640:	1e5a      	subs	r2, r3, #1
   25642:	4b0a      	ldr	r3, [pc, #40]	; (2566c <cpu_irq_leave_critical+0x34>)
   25644:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   25646:	4b09      	ldr	r3, [pc, #36]	; (2566c <cpu_irq_leave_critical+0x34>)
   25648:	681b      	ldr	r3, [r3, #0]
   2564a:	2b00      	cmp	r3, #0
   2564c:	d10a      	bne.n	25664 <cpu_irq_leave_critical+0x2c>
   2564e:	4b08      	ldr	r3, [pc, #32]	; (25670 <cpu_irq_leave_critical+0x38>)
   25650:	781b      	ldrb	r3, [r3, #0]
   25652:	b2db      	uxtb	r3, r3
   25654:	2b00      	cmp	r3, #0
   25656:	d005      	beq.n	25664 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   25658:	4b06      	ldr	r3, [pc, #24]	; (25674 <cpu_irq_leave_critical+0x3c>)
   2565a:	2201      	movs	r2, #1
   2565c:	701a      	strb	r2, [r3, #0]
   2565e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   25662:	b662      	cpsie	i
	}
}
   25664:	46c0      	nop			; (mov r8, r8)
   25666:	46bd      	mov	sp, r7
   25668:	bd80      	pop	{r7, pc}
   2566a:	46c0      	nop			; (mov r8, r8)
   2566c:	2000411c 	.word	0x2000411c
   25670:	20004120 	.word	0x20004120
   25674:	2000010e 	.word	0x2000010e

00025678 <system_pinmux_get_group_from_gpio_pin>:
{
   25678:	b580      	push	{r7, lr}
   2567a:	b084      	sub	sp, #16
   2567c:	af00      	add	r7, sp, #0
   2567e:	0002      	movs	r2, r0
   25680:	1dfb      	adds	r3, r7, #7
   25682:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   25684:	230f      	movs	r3, #15
   25686:	18fb      	adds	r3, r7, r3
   25688:	1dfa      	adds	r2, r7, #7
   2568a:	7812      	ldrb	r2, [r2, #0]
   2568c:	09d2      	lsrs	r2, r2, #7
   2568e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   25690:	230e      	movs	r3, #14
   25692:	18fb      	adds	r3, r7, r3
   25694:	1dfa      	adds	r2, r7, #7
   25696:	7812      	ldrb	r2, [r2, #0]
   25698:	0952      	lsrs	r2, r2, #5
   2569a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2569c:	4b0d      	ldr	r3, [pc, #52]	; (256d4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2569e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   256a0:	230f      	movs	r3, #15
   256a2:	18fb      	adds	r3, r7, r3
   256a4:	781b      	ldrb	r3, [r3, #0]
   256a6:	2b00      	cmp	r3, #0
   256a8:	d10f      	bne.n	256ca <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   256aa:	230f      	movs	r3, #15
   256ac:	18fb      	adds	r3, r7, r3
   256ae:	781b      	ldrb	r3, [r3, #0]
   256b0:	009b      	lsls	r3, r3, #2
   256b2:	2210      	movs	r2, #16
   256b4:	4694      	mov	ip, r2
   256b6:	44bc      	add	ip, r7
   256b8:	4463      	add	r3, ip
   256ba:	3b08      	subs	r3, #8
   256bc:	681a      	ldr	r2, [r3, #0]
   256be:	230e      	movs	r3, #14
   256c0:	18fb      	adds	r3, r7, r3
   256c2:	781b      	ldrb	r3, [r3, #0]
   256c4:	01db      	lsls	r3, r3, #7
   256c6:	18d3      	adds	r3, r2, r3
   256c8:	e000      	b.n	256cc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   256ca:	2300      	movs	r3, #0
}
   256cc:	0018      	movs	r0, r3
   256ce:	46bd      	mov	sp, r7
   256d0:	b004      	add	sp, #16
   256d2:	bd80      	pop	{r7, pc}
   256d4:	41004400 	.word	0x41004400

000256d8 <port_get_group_from_gpio_pin>:
{
   256d8:	b580      	push	{r7, lr}
   256da:	b082      	sub	sp, #8
   256dc:	af00      	add	r7, sp, #0
   256de:	0002      	movs	r2, r0
   256e0:	1dfb      	adds	r3, r7, #7
   256e2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   256e4:	1dfb      	adds	r3, r7, #7
   256e6:	781b      	ldrb	r3, [r3, #0]
   256e8:	0018      	movs	r0, r3
   256ea:	4b03      	ldr	r3, [pc, #12]	; (256f8 <port_get_group_from_gpio_pin+0x20>)
   256ec:	4798      	blx	r3
   256ee:	0003      	movs	r3, r0
}
   256f0:	0018      	movs	r0, r3
   256f2:	46bd      	mov	sp, r7
   256f4:	b002      	add	sp, #8
   256f6:	bd80      	pop	{r7, pc}
   256f8:	00025679 	.word	0x00025679

000256fc <port_get_config_defaults>:
{
   256fc:	b580      	push	{r7, lr}
   256fe:	b082      	sub	sp, #8
   25700:	af00      	add	r7, sp, #0
   25702:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   25704:	687b      	ldr	r3, [r7, #4]
   25706:	2200      	movs	r2, #0
   25708:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   2570a:	687b      	ldr	r3, [r7, #4]
   2570c:	2201      	movs	r2, #1
   2570e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   25710:	687b      	ldr	r3, [r7, #4]
   25712:	2200      	movs	r2, #0
   25714:	709a      	strb	r2, [r3, #2]
}
   25716:	46c0      	nop			; (mov r8, r8)
   25718:	46bd      	mov	sp, r7
   2571a:	b002      	add	sp, #8
   2571c:	bd80      	pop	{r7, pc}
	...

00025720 <port_pin_set_output_level>:
{
   25720:	b580      	push	{r7, lr}
   25722:	b084      	sub	sp, #16
   25724:	af00      	add	r7, sp, #0
   25726:	0002      	movs	r2, r0
   25728:	1dfb      	adds	r3, r7, #7
   2572a:	701a      	strb	r2, [r3, #0]
   2572c:	1dbb      	adds	r3, r7, #6
   2572e:	1c0a      	adds	r2, r1, #0
   25730:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   25732:	1dfb      	adds	r3, r7, #7
   25734:	781b      	ldrb	r3, [r3, #0]
   25736:	0018      	movs	r0, r3
   25738:	4b0d      	ldr	r3, [pc, #52]	; (25770 <port_pin_set_output_level+0x50>)
   2573a:	4798      	blx	r3
   2573c:	0003      	movs	r3, r0
   2573e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   25740:	1dfb      	adds	r3, r7, #7
   25742:	781b      	ldrb	r3, [r3, #0]
   25744:	221f      	movs	r2, #31
   25746:	4013      	ands	r3, r2
   25748:	2201      	movs	r2, #1
   2574a:	409a      	lsls	r2, r3
   2574c:	0013      	movs	r3, r2
   2574e:	60bb      	str	r3, [r7, #8]
	if (level) {
   25750:	1dbb      	adds	r3, r7, #6
   25752:	781b      	ldrb	r3, [r3, #0]
   25754:	2b00      	cmp	r3, #0
   25756:	d003      	beq.n	25760 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   25758:	68fb      	ldr	r3, [r7, #12]
   2575a:	68ba      	ldr	r2, [r7, #8]
   2575c:	619a      	str	r2, [r3, #24]
}
   2575e:	e002      	b.n	25766 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   25760:	68fb      	ldr	r3, [r7, #12]
   25762:	68ba      	ldr	r2, [r7, #8]
   25764:	615a      	str	r2, [r3, #20]
}
   25766:	46c0      	nop			; (mov r8, r8)
   25768:	46bd      	mov	sp, r7
   2576a:	b004      	add	sp, #16
   2576c:	bd80      	pop	{r7, pc}
   2576e:	46c0      	nop			; (mov r8, r8)
   25770:	000256d9 	.word	0x000256d9

00025774 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   25774:	b580      	push	{r7, lr}
   25776:	b082      	sub	sp, #8
   25778:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   2577a:	1d3b      	adds	r3, r7, #4
   2577c:	0018      	movs	r0, r3
   2577e:	4b0e      	ldr	r3, [pc, #56]	; (257b8 <system_board_init+0x44>)
   25780:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   25782:	1d3b      	adds	r3, r7, #4
   25784:	2201      	movs	r2, #1
   25786:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   25788:	1d3b      	adds	r3, r7, #4
   2578a:	0019      	movs	r1, r3
   2578c:	2017      	movs	r0, #23
   2578e:	4b0b      	ldr	r3, [pc, #44]	; (257bc <system_board_init+0x48>)
   25790:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   25792:	2101      	movs	r1, #1
   25794:	2017      	movs	r0, #23
   25796:	4b0a      	ldr	r3, [pc, #40]	; (257c0 <system_board_init+0x4c>)
   25798:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   2579a:	1d3b      	adds	r3, r7, #4
   2579c:	2200      	movs	r2, #0
   2579e:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   257a0:	1d3b      	adds	r3, r7, #4
   257a2:	2201      	movs	r2, #1
   257a4:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   257a6:	1d3b      	adds	r3, r7, #4
   257a8:	0019      	movs	r1, r3
   257aa:	2037      	movs	r0, #55	; 0x37
   257ac:	4b03      	ldr	r3, [pc, #12]	; (257bc <system_board_init+0x48>)
   257ae:	4798      	blx	r3
}
   257b0:	46c0      	nop			; (mov r8, r8)
   257b2:	46bd      	mov	sp, r7
   257b4:	b002      	add	sp, #8
   257b6:	bd80      	pop	{r7, pc}
   257b8:	000256fd 	.word	0x000256fd
   257bc:	00025de9 	.word	0x00025de9
   257c0:	00025721 	.word	0x00025721

000257c4 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   257c4:	b580      	push	{r7, lr}
   257c6:	b084      	sub	sp, #16
   257c8:	af00      	add	r7, sp, #0
   257ca:	0002      	movs	r2, r0
   257cc:	1dfb      	adds	r3, r7, #7
   257ce:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   257d0:	230f      	movs	r3, #15
   257d2:	18fb      	adds	r3, r7, r3
   257d4:	1dfa      	adds	r2, r7, #7
   257d6:	7812      	ldrb	r2, [r2, #0]
   257d8:	0952      	lsrs	r2, r2, #5
   257da:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   257dc:	230f      	movs	r3, #15
   257de:	18fb      	adds	r3, r7, r3
   257e0:	781b      	ldrb	r3, [r3, #0]
   257e2:	2b00      	cmp	r3, #0
   257e4:	d10c      	bne.n	25800 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   257e6:	4b09      	ldr	r3, [pc, #36]	; (2580c <_extint_get_eic_from_channel+0x48>)
   257e8:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   257ea:	230f      	movs	r3, #15
   257ec:	18fb      	adds	r3, r7, r3
   257ee:	781b      	ldrb	r3, [r3, #0]
   257f0:	009b      	lsls	r3, r3, #2
   257f2:	2210      	movs	r2, #16
   257f4:	4694      	mov	ip, r2
   257f6:	44bc      	add	ip, r7
   257f8:	4463      	add	r3, ip
   257fa:	3b08      	subs	r3, #8
   257fc:	681b      	ldr	r3, [r3, #0]
   257fe:	e000      	b.n	25802 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   25800:	2300      	movs	r3, #0
	}
}
   25802:	0018      	movs	r0, r3
   25804:	46bd      	mov	sp, r7
   25806:	b004      	add	sp, #16
   25808:	bd80      	pop	{r7, pc}
   2580a:	46c0      	nop			; (mov r8, r8)
   2580c:	40001800 	.word	0x40001800

00025810 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   25810:	b580      	push	{r7, lr}
   25812:	b084      	sub	sp, #16
   25814:	af00      	add	r7, sp, #0
   25816:	0002      	movs	r2, r0
   25818:	1dfb      	adds	r3, r7, #7
   2581a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   2581c:	1dfb      	adds	r3, r7, #7
   2581e:	781b      	ldrb	r3, [r3, #0]
   25820:	0018      	movs	r0, r3
   25822:	4b0b      	ldr	r3, [pc, #44]	; (25850 <extint_chan_is_detected+0x40>)
   25824:	4798      	blx	r3
   25826:	0003      	movs	r3, r0
   25828:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   2582a:	1dfb      	adds	r3, r7, #7
   2582c:	781b      	ldrb	r3, [r3, #0]
   2582e:	221f      	movs	r2, #31
   25830:	4013      	ands	r3, r2
   25832:	2201      	movs	r2, #1
   25834:	409a      	lsls	r2, r3
   25836:	0013      	movs	r3, r2
   25838:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   2583a:	68fb      	ldr	r3, [r7, #12]
   2583c:	691b      	ldr	r3, [r3, #16]
   2583e:	68ba      	ldr	r2, [r7, #8]
   25840:	4013      	ands	r3, r2
   25842:	1e5a      	subs	r2, r3, #1
   25844:	4193      	sbcs	r3, r2
   25846:	b2db      	uxtb	r3, r3
}
   25848:	0018      	movs	r0, r3
   2584a:	46bd      	mov	sp, r7
   2584c:	b004      	add	sp, #16
   2584e:	bd80      	pop	{r7, pc}
   25850:	000257c5 	.word	0x000257c5

00025854 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   25854:	b580      	push	{r7, lr}
   25856:	b084      	sub	sp, #16
   25858:	af00      	add	r7, sp, #0
   2585a:	0002      	movs	r2, r0
   2585c:	1dfb      	adds	r3, r7, #7
   2585e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   25860:	1dfb      	adds	r3, r7, #7
   25862:	781b      	ldrb	r3, [r3, #0]
   25864:	0018      	movs	r0, r3
   25866:	4b09      	ldr	r3, [pc, #36]	; (2588c <extint_chan_clear_detected+0x38>)
   25868:	4798      	blx	r3
   2586a:	0003      	movs	r3, r0
   2586c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   2586e:	1dfb      	adds	r3, r7, #7
   25870:	781b      	ldrb	r3, [r3, #0]
   25872:	221f      	movs	r2, #31
   25874:	4013      	ands	r3, r2
   25876:	2201      	movs	r2, #1
   25878:	409a      	lsls	r2, r3
   2587a:	0013      	movs	r3, r2
   2587c:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   2587e:	68fb      	ldr	r3, [r7, #12]
   25880:	68ba      	ldr	r2, [r7, #8]
   25882:	611a      	str	r2, [r3, #16]
}
   25884:	46c0      	nop			; (mov r8, r8)
   25886:	46bd      	mov	sp, r7
   25888:	b004      	add	sp, #16
   2588a:	bd80      	pop	{r7, pc}
   2588c:	000257c5 	.word	0x000257c5

00025890 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   25890:	b580      	push	{r7, lr}
   25892:	b082      	sub	sp, #8
   25894:	af00      	add	r7, sp, #0
   25896:	6078      	str	r0, [r7, #4]
   25898:	0008      	movs	r0, r1
   2589a:	0011      	movs	r1, r2
   2589c:	1cfb      	adds	r3, r7, #3
   2589e:	1c02      	adds	r2, r0, #0
   258a0:	701a      	strb	r2, [r3, #0]
   258a2:	1cbb      	adds	r3, r7, #2
   258a4:	1c0a      	adds	r2, r1, #0
   258a6:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   258a8:	1cbb      	adds	r3, r7, #2
   258aa:	781b      	ldrb	r3, [r3, #0]
   258ac:	2b00      	cmp	r3, #0
   258ae:	d001      	beq.n	258b4 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   258b0:	2317      	movs	r3, #23
   258b2:	e019      	b.n	258e8 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   258b4:	1cfb      	adds	r3, r7, #3
   258b6:	781a      	ldrb	r2, [r3, #0]
   258b8:	4b0d      	ldr	r3, [pc, #52]	; (258f0 <extint_register_callback+0x60>)
   258ba:	0092      	lsls	r2, r2, #2
   258bc:	58d3      	ldr	r3, [r2, r3]
   258be:	2b00      	cmp	r3, #0
   258c0:	d107      	bne.n	258d2 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   258c2:	1cfb      	adds	r3, r7, #3
   258c4:	781a      	ldrb	r2, [r3, #0]
   258c6:	4b0a      	ldr	r3, [pc, #40]	; (258f0 <extint_register_callback+0x60>)
   258c8:	0092      	lsls	r2, r2, #2
   258ca:	6879      	ldr	r1, [r7, #4]
   258cc:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   258ce:	2300      	movs	r3, #0
   258d0:	e00a      	b.n	258e8 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   258d2:	1cfb      	adds	r3, r7, #3
   258d4:	781a      	ldrb	r2, [r3, #0]
   258d6:	4b06      	ldr	r3, [pc, #24]	; (258f0 <extint_register_callback+0x60>)
   258d8:	0092      	lsls	r2, r2, #2
   258da:	58d2      	ldr	r2, [r2, r3]
   258dc:	687b      	ldr	r3, [r7, #4]
   258de:	429a      	cmp	r2, r3
   258e0:	d101      	bne.n	258e6 <extint_register_callback+0x56>
		return STATUS_OK;
   258e2:	2300      	movs	r3, #0
   258e4:	e000      	b.n	258e8 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   258e6:	231d      	movs	r3, #29
}
   258e8:	0018      	movs	r0, r3
   258ea:	46bd      	mov	sp, r7
   258ec:	b002      	add	sp, #8
   258ee:	bd80      	pop	{r7, pc}
   258f0:	20005974 	.word	0x20005974

000258f4 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   258f4:	b580      	push	{r7, lr}
   258f6:	b084      	sub	sp, #16
   258f8:	af00      	add	r7, sp, #0
   258fa:	0002      	movs	r2, r0
   258fc:	1dfb      	adds	r3, r7, #7
   258fe:	701a      	strb	r2, [r3, #0]
   25900:	1dbb      	adds	r3, r7, #6
   25902:	1c0a      	adds	r2, r1, #0
   25904:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   25906:	1dbb      	adds	r3, r7, #6
   25908:	781b      	ldrb	r3, [r3, #0]
   2590a:	2b00      	cmp	r3, #0
   2590c:	d10e      	bne.n	2592c <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   2590e:	1dfb      	adds	r3, r7, #7
   25910:	781b      	ldrb	r3, [r3, #0]
   25912:	0018      	movs	r0, r3
   25914:	4b08      	ldr	r3, [pc, #32]	; (25938 <extint_chan_enable_callback+0x44>)
   25916:	4798      	blx	r3
   25918:	0003      	movs	r3, r0
   2591a:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   2591c:	1dfb      	adds	r3, r7, #7
   2591e:	781b      	ldrb	r3, [r3, #0]
   25920:	2201      	movs	r2, #1
   25922:	409a      	lsls	r2, r3
   25924:	68fb      	ldr	r3, [r7, #12]
   25926:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   25928:	2300      	movs	r3, #0
   2592a:	e000      	b.n	2592e <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   2592c:	2317      	movs	r3, #23
}
   2592e:	0018      	movs	r0, r3
   25930:	46bd      	mov	sp, r7
   25932:	b004      	add	sp, #16
   25934:	bd80      	pop	{r7, pc}
   25936:	46c0      	nop			; (mov r8, r8)
   25938:	000257c5 	.word	0x000257c5

0002593c <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   2593c:	b580      	push	{r7, lr}
   2593e:	b084      	sub	sp, #16
   25940:	af00      	add	r7, sp, #0
   25942:	0002      	movs	r2, r0
   25944:	1dfb      	adds	r3, r7, #7
   25946:	701a      	strb	r2, [r3, #0]
   25948:	1dbb      	adds	r3, r7, #6
   2594a:	1c0a      	adds	r2, r1, #0
   2594c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   2594e:	1dbb      	adds	r3, r7, #6
   25950:	781b      	ldrb	r3, [r3, #0]
   25952:	2b00      	cmp	r3, #0
   25954:	d10e      	bne.n	25974 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   25956:	1dfb      	adds	r3, r7, #7
   25958:	781b      	ldrb	r3, [r3, #0]
   2595a:	0018      	movs	r0, r3
   2595c:	4b08      	ldr	r3, [pc, #32]	; (25980 <extint_chan_disable_callback+0x44>)
   2595e:	4798      	blx	r3
   25960:	0003      	movs	r3, r0
   25962:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   25964:	1dfb      	adds	r3, r7, #7
   25966:	781b      	ldrb	r3, [r3, #0]
   25968:	2201      	movs	r2, #1
   2596a:	409a      	lsls	r2, r3
   2596c:	68fb      	ldr	r3, [r7, #12]
   2596e:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   25970:	2300      	movs	r3, #0
   25972:	e000      	b.n	25976 <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   25974:	2317      	movs	r3, #23
}
   25976:	0018      	movs	r0, r3
   25978:	46bd      	mov	sp, r7
   2597a:	b004      	add	sp, #16
   2597c:	bd80      	pop	{r7, pc}
   2597e:	46c0      	nop			; (mov r8, r8)
   25980:	000257c5 	.word	0x000257c5

00025984 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   25984:	b580      	push	{r7, lr}
   25986:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   25988:	4b15      	ldr	r3, [pc, #84]	; (259e0 <EIC_Handler+0x5c>)
   2598a:	2200      	movs	r2, #0
   2598c:	701a      	strb	r2, [r3, #0]
   2598e:	e020      	b.n	259d2 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   25990:	4b13      	ldr	r3, [pc, #76]	; (259e0 <EIC_Handler+0x5c>)
   25992:	781b      	ldrb	r3, [r3, #0]
   25994:	0018      	movs	r0, r3
   25996:	4b13      	ldr	r3, [pc, #76]	; (259e4 <EIC_Handler+0x60>)
   25998:	4798      	blx	r3
   2599a:	1e03      	subs	r3, r0, #0
   2599c:	d013      	beq.n	259c6 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   2599e:	4b10      	ldr	r3, [pc, #64]	; (259e0 <EIC_Handler+0x5c>)
   259a0:	781b      	ldrb	r3, [r3, #0]
   259a2:	0018      	movs	r0, r3
   259a4:	4b10      	ldr	r3, [pc, #64]	; (259e8 <EIC_Handler+0x64>)
   259a6:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   259a8:	4b0d      	ldr	r3, [pc, #52]	; (259e0 <EIC_Handler+0x5c>)
   259aa:	781b      	ldrb	r3, [r3, #0]
   259ac:	001a      	movs	r2, r3
   259ae:	4b0f      	ldr	r3, [pc, #60]	; (259ec <EIC_Handler+0x68>)
   259b0:	0092      	lsls	r2, r2, #2
   259b2:	58d3      	ldr	r3, [r2, r3]
   259b4:	2b00      	cmp	r3, #0
   259b6:	d006      	beq.n	259c6 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   259b8:	4b09      	ldr	r3, [pc, #36]	; (259e0 <EIC_Handler+0x5c>)
   259ba:	781b      	ldrb	r3, [r3, #0]
   259bc:	001a      	movs	r2, r3
   259be:	4b0b      	ldr	r3, [pc, #44]	; (259ec <EIC_Handler+0x68>)
   259c0:	0092      	lsls	r2, r2, #2
   259c2:	58d3      	ldr	r3, [r2, r3]
   259c4:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   259c6:	4b06      	ldr	r3, [pc, #24]	; (259e0 <EIC_Handler+0x5c>)
   259c8:	781b      	ldrb	r3, [r3, #0]
   259ca:	3301      	adds	r3, #1
   259cc:	b2da      	uxtb	r2, r3
   259ce:	4b04      	ldr	r3, [pc, #16]	; (259e0 <EIC_Handler+0x5c>)
   259d0:	701a      	strb	r2, [r3, #0]
   259d2:	4b03      	ldr	r3, [pc, #12]	; (259e0 <EIC_Handler+0x5c>)
   259d4:	781b      	ldrb	r3, [r3, #0]
   259d6:	2b0f      	cmp	r3, #15
   259d8:	d9da      	bls.n	25990 <EIC_Handler+0xc>
			}
		}
	}
}
   259da:	46c0      	nop			; (mov r8, r8)
   259dc:	46bd      	mov	sp, r7
   259de:	bd80      	pop	{r7, pc}
   259e0:	20005970 	.word	0x20005970
   259e4:	00025811 	.word	0x00025811
   259e8:	00025855 	.word	0x00025855
   259ec:	20005974 	.word	0x20005974

000259f0 <system_gclk_chan_get_config_defaults>:
{
   259f0:	b580      	push	{r7, lr}
   259f2:	b082      	sub	sp, #8
   259f4:	af00      	add	r7, sp, #0
   259f6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   259f8:	687b      	ldr	r3, [r7, #4]
   259fa:	2200      	movs	r2, #0
   259fc:	701a      	strb	r2, [r3, #0]
}
   259fe:	46c0      	nop			; (mov r8, r8)
   25a00:	46bd      	mov	sp, r7
   25a02:	b002      	add	sp, #8
   25a04:	bd80      	pop	{r7, pc}
	...

00025a08 <system_apb_clock_set_mask>:
{
   25a08:	b580      	push	{r7, lr}
   25a0a:	b082      	sub	sp, #8
   25a0c:	af00      	add	r7, sp, #0
   25a0e:	0002      	movs	r2, r0
   25a10:	6039      	str	r1, [r7, #0]
   25a12:	1dfb      	adds	r3, r7, #7
   25a14:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   25a16:	1dfb      	adds	r3, r7, #7
   25a18:	781b      	ldrb	r3, [r3, #0]
   25a1a:	2b01      	cmp	r3, #1
   25a1c:	d00a      	beq.n	25a34 <system_apb_clock_set_mask+0x2c>
   25a1e:	2b02      	cmp	r3, #2
   25a20:	d00f      	beq.n	25a42 <system_apb_clock_set_mask+0x3a>
   25a22:	2b00      	cmp	r3, #0
   25a24:	d114      	bne.n	25a50 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   25a26:	4b0e      	ldr	r3, [pc, #56]	; (25a60 <system_apb_clock_set_mask+0x58>)
   25a28:	4a0d      	ldr	r2, [pc, #52]	; (25a60 <system_apb_clock_set_mask+0x58>)
   25a2a:	6991      	ldr	r1, [r2, #24]
   25a2c:	683a      	ldr	r2, [r7, #0]
   25a2e:	430a      	orrs	r2, r1
   25a30:	619a      	str	r2, [r3, #24]
			break;
   25a32:	e00f      	b.n	25a54 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   25a34:	4b0a      	ldr	r3, [pc, #40]	; (25a60 <system_apb_clock_set_mask+0x58>)
   25a36:	4a0a      	ldr	r2, [pc, #40]	; (25a60 <system_apb_clock_set_mask+0x58>)
   25a38:	69d1      	ldr	r1, [r2, #28]
   25a3a:	683a      	ldr	r2, [r7, #0]
   25a3c:	430a      	orrs	r2, r1
   25a3e:	61da      	str	r2, [r3, #28]
			break;
   25a40:	e008      	b.n	25a54 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   25a42:	4b07      	ldr	r3, [pc, #28]	; (25a60 <system_apb_clock_set_mask+0x58>)
   25a44:	4a06      	ldr	r2, [pc, #24]	; (25a60 <system_apb_clock_set_mask+0x58>)
   25a46:	6a11      	ldr	r1, [r2, #32]
   25a48:	683a      	ldr	r2, [r7, #0]
   25a4a:	430a      	orrs	r2, r1
   25a4c:	621a      	str	r2, [r3, #32]
			break;
   25a4e:	e001      	b.n	25a54 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   25a50:	2317      	movs	r3, #23
   25a52:	e000      	b.n	25a56 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   25a54:	2300      	movs	r3, #0
}
   25a56:	0018      	movs	r0, r3
   25a58:	46bd      	mov	sp, r7
   25a5a:	b002      	add	sp, #8
   25a5c:	bd80      	pop	{r7, pc}
   25a5e:	46c0      	nop			; (mov r8, r8)
   25a60:	40000400 	.word	0x40000400

00025a64 <system_pinmux_get_config_defaults>:
{
   25a64:	b580      	push	{r7, lr}
   25a66:	b082      	sub	sp, #8
   25a68:	af00      	add	r7, sp, #0
   25a6a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   25a6c:	687b      	ldr	r3, [r7, #4]
   25a6e:	2280      	movs	r2, #128	; 0x80
   25a70:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   25a72:	687b      	ldr	r3, [r7, #4]
   25a74:	2200      	movs	r2, #0
   25a76:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   25a78:	687b      	ldr	r3, [r7, #4]
   25a7a:	2201      	movs	r2, #1
   25a7c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   25a7e:	687b      	ldr	r3, [r7, #4]
   25a80:	2200      	movs	r2, #0
   25a82:	70da      	strb	r2, [r3, #3]
}
   25a84:	46c0      	nop			; (mov r8, r8)
   25a86:	46bd      	mov	sp, r7
   25a88:	b002      	add	sp, #8
   25a8a:	bd80      	pop	{r7, pc}

00025a8c <system_interrupt_enable>:
{
   25a8c:	b580      	push	{r7, lr}
   25a8e:	b082      	sub	sp, #8
   25a90:	af00      	add	r7, sp, #0
   25a92:	0002      	movs	r2, r0
   25a94:	1dfb      	adds	r3, r7, #7
   25a96:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   25a98:	4b06      	ldr	r3, [pc, #24]	; (25ab4 <system_interrupt_enable+0x28>)
   25a9a:	1dfa      	adds	r2, r7, #7
   25a9c:	7812      	ldrb	r2, [r2, #0]
   25a9e:	0011      	movs	r1, r2
   25aa0:	221f      	movs	r2, #31
   25aa2:	400a      	ands	r2, r1
   25aa4:	2101      	movs	r1, #1
   25aa6:	4091      	lsls	r1, r2
   25aa8:	000a      	movs	r2, r1
   25aaa:	601a      	str	r2, [r3, #0]
}
   25aac:	46c0      	nop			; (mov r8, r8)
   25aae:	46bd      	mov	sp, r7
   25ab0:	b002      	add	sp, #8
   25ab2:	bd80      	pop	{r7, pc}
   25ab4:	e000e100 	.word	0xe000e100

00025ab8 <_extint_get_eic_from_channel>:
{
   25ab8:	b580      	push	{r7, lr}
   25aba:	b084      	sub	sp, #16
   25abc:	af00      	add	r7, sp, #0
   25abe:	0002      	movs	r2, r0
   25ac0:	1dfb      	adds	r3, r7, #7
   25ac2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   25ac4:	230f      	movs	r3, #15
   25ac6:	18fb      	adds	r3, r7, r3
   25ac8:	1dfa      	adds	r2, r7, #7
   25aca:	7812      	ldrb	r2, [r2, #0]
   25acc:	0952      	lsrs	r2, r2, #5
   25ace:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   25ad0:	230f      	movs	r3, #15
   25ad2:	18fb      	adds	r3, r7, r3
   25ad4:	781b      	ldrb	r3, [r3, #0]
   25ad6:	2b00      	cmp	r3, #0
   25ad8:	d10c      	bne.n	25af4 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   25ada:	4b09      	ldr	r3, [pc, #36]	; (25b00 <_extint_get_eic_from_channel+0x48>)
   25adc:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   25ade:	230f      	movs	r3, #15
   25ae0:	18fb      	adds	r3, r7, r3
   25ae2:	781b      	ldrb	r3, [r3, #0]
   25ae4:	009b      	lsls	r3, r3, #2
   25ae6:	2210      	movs	r2, #16
   25ae8:	4694      	mov	ip, r2
   25aea:	44bc      	add	ip, r7
   25aec:	4463      	add	r3, ip
   25aee:	3b08      	subs	r3, #8
   25af0:	681b      	ldr	r3, [r3, #0]
   25af2:	e000      	b.n	25af6 <_extint_get_eic_from_channel+0x3e>
		return NULL;
   25af4:	2300      	movs	r3, #0
}
   25af6:	0018      	movs	r0, r3
   25af8:	46bd      	mov	sp, r7
   25afa:	b004      	add	sp, #16
   25afc:	bd80      	pop	{r7, pc}
   25afe:	46c0      	nop			; (mov r8, r8)
   25b00:	40001800 	.word	0x40001800

00025b04 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   25b04:	b580      	push	{r7, lr}
   25b06:	b082      	sub	sp, #8
   25b08:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   25b0a:	4b0f      	ldr	r3, [pc, #60]	; (25b48 <extint_is_syncing+0x44>)
   25b0c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   25b0e:	2300      	movs	r3, #0
   25b10:	607b      	str	r3, [r7, #4]
   25b12:	e011      	b.n	25b38 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   25b14:	687b      	ldr	r3, [r7, #4]
   25b16:	009b      	lsls	r3, r3, #2
   25b18:	2208      	movs	r2, #8
   25b1a:	4694      	mov	ip, r2
   25b1c:	44bc      	add	ip, r7
   25b1e:	4463      	add	r3, ip
   25b20:	3b08      	subs	r3, #8
   25b22:	681b      	ldr	r3, [r3, #0]
   25b24:	785b      	ldrb	r3, [r3, #1]
   25b26:	b2db      	uxtb	r3, r3
   25b28:	b25b      	sxtb	r3, r3
   25b2a:	2b00      	cmp	r3, #0
   25b2c:	da01      	bge.n	25b32 <extint_is_syncing+0x2e>
			return true;
   25b2e:	2301      	movs	r3, #1
   25b30:	e006      	b.n	25b40 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   25b32:	687b      	ldr	r3, [r7, #4]
   25b34:	3301      	adds	r3, #1
   25b36:	607b      	str	r3, [r7, #4]
   25b38:	687b      	ldr	r3, [r7, #4]
   25b3a:	2b00      	cmp	r3, #0
   25b3c:	d0ea      	beq.n	25b14 <extint_is_syncing+0x10>
		}
	}
	return false;
   25b3e:	2300      	movs	r3, #0
}
   25b40:	0018      	movs	r0, r3
   25b42:	46bd      	mov	sp, r7
   25b44:	b002      	add	sp, #8
   25b46:	bd80      	pop	{r7, pc}
   25b48:	40001800 	.word	0x40001800

00025b4c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   25b4c:	b580      	push	{r7, lr}
   25b4e:	b084      	sub	sp, #16
   25b50:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   25b52:	4b2d      	ldr	r3, [pc, #180]	; (25c08 <_system_extint_init+0xbc>)
   25b54:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   25b56:	2140      	movs	r1, #64	; 0x40
   25b58:	2000      	movs	r0, #0
   25b5a:	4b2c      	ldr	r3, [pc, #176]	; (25c0c <_system_extint_init+0xc0>)
   25b5c:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   25b5e:	003b      	movs	r3, r7
   25b60:	0018      	movs	r0, r3
   25b62:	4b2b      	ldr	r3, [pc, #172]	; (25c10 <_system_extint_init+0xc4>)
   25b64:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   25b66:	003b      	movs	r3, r7
   25b68:	2200      	movs	r2, #0
   25b6a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   25b6c:	003b      	movs	r3, r7
   25b6e:	0019      	movs	r1, r3
   25b70:	2005      	movs	r0, #5
   25b72:	4b28      	ldr	r3, [pc, #160]	; (25c14 <_system_extint_init+0xc8>)
   25b74:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   25b76:	2005      	movs	r0, #5
   25b78:	4b27      	ldr	r3, [pc, #156]	; (25c18 <_system_extint_init+0xcc>)
   25b7a:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   25b7c:	2300      	movs	r3, #0
   25b7e:	60fb      	str	r3, [r7, #12]
   25b80:	e018      	b.n	25bb4 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   25b82:	68fb      	ldr	r3, [r7, #12]
   25b84:	009b      	lsls	r3, r3, #2
   25b86:	2210      	movs	r2, #16
   25b88:	4694      	mov	ip, r2
   25b8a:	44bc      	add	ip, r7
   25b8c:	4463      	add	r3, ip
   25b8e:	3b0c      	subs	r3, #12
   25b90:	681a      	ldr	r2, [r3, #0]
   25b92:	68fb      	ldr	r3, [r7, #12]
   25b94:	009b      	lsls	r3, r3, #2
   25b96:	2110      	movs	r1, #16
   25b98:	468c      	mov	ip, r1
   25b9a:	44bc      	add	ip, r7
   25b9c:	4463      	add	r3, ip
   25b9e:	3b0c      	subs	r3, #12
   25ba0:	681b      	ldr	r3, [r3, #0]
   25ba2:	781b      	ldrb	r3, [r3, #0]
   25ba4:	b2db      	uxtb	r3, r3
   25ba6:	2101      	movs	r1, #1
   25ba8:	430b      	orrs	r3, r1
   25baa:	b2db      	uxtb	r3, r3
   25bac:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   25bae:	68fb      	ldr	r3, [r7, #12]
   25bb0:	3301      	adds	r3, #1
   25bb2:	60fb      	str	r3, [r7, #12]
   25bb4:	68fb      	ldr	r3, [r7, #12]
   25bb6:	2b00      	cmp	r3, #0
   25bb8:	d0e3      	beq.n	25b82 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   25bba:	46c0      	nop			; (mov r8, r8)
   25bbc:	4b17      	ldr	r3, [pc, #92]	; (25c1c <_system_extint_init+0xd0>)
   25bbe:	4798      	blx	r3
   25bc0:	1e03      	subs	r3, r0, #0
   25bc2:	d1fb      	bne.n	25bbc <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   25bc4:	230b      	movs	r3, #11
   25bc6:	18fb      	adds	r3, r7, r3
   25bc8:	2200      	movs	r2, #0
   25bca:	701a      	strb	r2, [r3, #0]
   25bcc:	e00d      	b.n	25bea <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   25bce:	230b      	movs	r3, #11
   25bd0:	18fb      	adds	r3, r7, r3
   25bd2:	781a      	ldrb	r2, [r3, #0]
   25bd4:	4b12      	ldr	r3, [pc, #72]	; (25c20 <_system_extint_init+0xd4>)
   25bd6:	0092      	lsls	r2, r2, #2
   25bd8:	2100      	movs	r1, #0
   25bda:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   25bdc:	230b      	movs	r3, #11
   25bde:	18fb      	adds	r3, r7, r3
   25be0:	781a      	ldrb	r2, [r3, #0]
   25be2:	230b      	movs	r3, #11
   25be4:	18fb      	adds	r3, r7, r3
   25be6:	3201      	adds	r2, #1
   25be8:	701a      	strb	r2, [r3, #0]
   25bea:	230b      	movs	r3, #11
   25bec:	18fb      	adds	r3, r7, r3
   25bee:	781b      	ldrb	r3, [r3, #0]
   25bf0:	2b0f      	cmp	r3, #15
   25bf2:	d9ec      	bls.n	25bce <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   25bf4:	2004      	movs	r0, #4
   25bf6:	4b0b      	ldr	r3, [pc, #44]	; (25c24 <_system_extint_init+0xd8>)
   25bf8:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   25bfa:	4b0b      	ldr	r3, [pc, #44]	; (25c28 <_system_extint_init+0xdc>)
   25bfc:	4798      	blx	r3
}
   25bfe:	46c0      	nop			; (mov r8, r8)
   25c00:	46bd      	mov	sp, r7
   25c02:	b004      	add	sp, #16
   25c04:	bd80      	pop	{r7, pc}
   25c06:	46c0      	nop			; (mov r8, r8)
   25c08:	40001800 	.word	0x40001800
   25c0c:	00025a09 	.word	0x00025a09
   25c10:	000259f1 	.word	0x000259f1
   25c14:	00029279 	.word	0x00029279
   25c18:	000292bd 	.word	0x000292bd
   25c1c:	00025b05 	.word	0x00025b05
   25c20:	20005974 	.word	0x20005974
   25c24:	00025a8d 	.word	0x00025a8d
   25c28:	00025c2d 	.word	0x00025c2d

00025c2c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   25c2c:	b580      	push	{r7, lr}
   25c2e:	b082      	sub	sp, #8
   25c30:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   25c32:	4b15      	ldr	r3, [pc, #84]	; (25c88 <_extint_enable+0x5c>)
   25c34:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   25c36:	2300      	movs	r3, #0
   25c38:	607b      	str	r3, [r7, #4]
   25c3a:	e018      	b.n	25c6e <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   25c3c:	687b      	ldr	r3, [r7, #4]
   25c3e:	009b      	lsls	r3, r3, #2
   25c40:	2208      	movs	r2, #8
   25c42:	4694      	mov	ip, r2
   25c44:	44bc      	add	ip, r7
   25c46:	4463      	add	r3, ip
   25c48:	3b08      	subs	r3, #8
   25c4a:	681a      	ldr	r2, [r3, #0]
   25c4c:	687b      	ldr	r3, [r7, #4]
   25c4e:	009b      	lsls	r3, r3, #2
   25c50:	2108      	movs	r1, #8
   25c52:	468c      	mov	ip, r1
   25c54:	44bc      	add	ip, r7
   25c56:	4463      	add	r3, ip
   25c58:	3b08      	subs	r3, #8
   25c5a:	681b      	ldr	r3, [r3, #0]
   25c5c:	781b      	ldrb	r3, [r3, #0]
   25c5e:	b2db      	uxtb	r3, r3
   25c60:	2102      	movs	r1, #2
   25c62:	430b      	orrs	r3, r1
   25c64:	b2db      	uxtb	r3, r3
   25c66:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   25c68:	687b      	ldr	r3, [r7, #4]
   25c6a:	3301      	adds	r3, #1
   25c6c:	607b      	str	r3, [r7, #4]
   25c6e:	687b      	ldr	r3, [r7, #4]
   25c70:	2b00      	cmp	r3, #0
   25c72:	d0e3      	beq.n	25c3c <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   25c74:	46c0      	nop			; (mov r8, r8)
   25c76:	4b05      	ldr	r3, [pc, #20]	; (25c8c <_extint_enable+0x60>)
   25c78:	4798      	blx	r3
   25c7a:	1e03      	subs	r3, r0, #0
   25c7c:	d1fb      	bne.n	25c76 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   25c7e:	46c0      	nop			; (mov r8, r8)
   25c80:	46bd      	mov	sp, r7
   25c82:	b002      	add	sp, #8
   25c84:	bd80      	pop	{r7, pc}
   25c86:	46c0      	nop			; (mov r8, r8)
   25c88:	40001800 	.word	0x40001800
   25c8c:	00025b05 	.word	0x00025b05

00025c90 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   25c90:	b580      	push	{r7, lr}
   25c92:	b082      	sub	sp, #8
   25c94:	af00      	add	r7, sp, #0
   25c96:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   25c98:	687b      	ldr	r3, [r7, #4]
   25c9a:	2200      	movs	r2, #0
   25c9c:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   25c9e:	687b      	ldr	r3, [r7, #4]
   25ca0:	2200      	movs	r2, #0
   25ca2:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   25ca4:	687b      	ldr	r3, [r7, #4]
   25ca6:	2201      	movs	r2, #1
   25ca8:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   25caa:	687b      	ldr	r3, [r7, #4]
   25cac:	2201      	movs	r2, #1
   25cae:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   25cb0:	687b      	ldr	r3, [r7, #4]
   25cb2:	2200      	movs	r2, #0
   25cb4:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   25cb6:	687b      	ldr	r3, [r7, #4]
   25cb8:	2202      	movs	r2, #2
   25cba:	72da      	strb	r2, [r3, #11]
}
   25cbc:	46c0      	nop			; (mov r8, r8)
   25cbe:	46bd      	mov	sp, r7
   25cc0:	b002      	add	sp, #8
   25cc2:	bd80      	pop	{r7, pc}

00025cc4 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   25cc4:	b580      	push	{r7, lr}
   25cc6:	b086      	sub	sp, #24
   25cc8:	af00      	add	r7, sp, #0
   25cca:	0002      	movs	r2, r0
   25ccc:	6039      	str	r1, [r7, #0]
   25cce:	1dfb      	adds	r3, r7, #7
   25cd0:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   25cd2:	2308      	movs	r3, #8
   25cd4:	18fb      	adds	r3, r7, r3
   25cd6:	0018      	movs	r0, r3
   25cd8:	4b36      	ldr	r3, [pc, #216]	; (25db4 <extint_chan_set_config+0xf0>)
   25cda:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   25cdc:	683b      	ldr	r3, [r7, #0]
   25cde:	685b      	ldr	r3, [r3, #4]
   25ce0:	b2da      	uxtb	r2, r3
   25ce2:	2308      	movs	r3, #8
   25ce4:	18fb      	adds	r3, r7, r3
   25ce6:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   25ce8:	2308      	movs	r3, #8
   25cea:	18fb      	adds	r3, r7, r3
   25cec:	2200      	movs	r2, #0
   25cee:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   25cf0:	683b      	ldr	r3, [r7, #0]
   25cf2:	7a1a      	ldrb	r2, [r3, #8]
   25cf4:	2308      	movs	r3, #8
   25cf6:	18fb      	adds	r3, r7, r3
   25cf8:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   25cfa:	683b      	ldr	r3, [r7, #0]
   25cfc:	681b      	ldr	r3, [r3, #0]
   25cfe:	b2db      	uxtb	r3, r3
   25d00:	2208      	movs	r2, #8
   25d02:	18ba      	adds	r2, r7, r2
   25d04:	0011      	movs	r1, r2
   25d06:	0018      	movs	r0, r3
   25d08:	4b2b      	ldr	r3, [pc, #172]	; (25db8 <extint_chan_set_config+0xf4>)
   25d0a:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   25d0c:	1dfb      	adds	r3, r7, #7
   25d0e:	781b      	ldrb	r3, [r3, #0]
   25d10:	0018      	movs	r0, r3
   25d12:	4b2a      	ldr	r3, [pc, #168]	; (25dbc <extint_chan_set_config+0xf8>)
   25d14:	4798      	blx	r3
   25d16:	0003      	movs	r3, r0
   25d18:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   25d1a:	1dfb      	adds	r3, r7, #7
   25d1c:	781b      	ldrb	r3, [r3, #0]
   25d1e:	2207      	movs	r2, #7
   25d20:	4013      	ands	r3, r2
   25d22:	009b      	lsls	r3, r3, #2
   25d24:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   25d26:	683b      	ldr	r3, [r7, #0]
   25d28:	7adb      	ldrb	r3, [r3, #11]
   25d2a:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   25d2c:	683b      	ldr	r3, [r7, #0]
   25d2e:	7a9b      	ldrb	r3, [r3, #10]
   25d30:	2b00      	cmp	r3, #0
   25d32:	d003      	beq.n	25d3c <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   25d34:	697b      	ldr	r3, [r7, #20]
   25d36:	2208      	movs	r2, #8
   25d38:	4313      	orrs	r3, r2
   25d3a:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   25d3c:	1dfb      	adds	r3, r7, #7
   25d3e:	781b      	ldrb	r3, [r3, #0]
   25d40:	08db      	lsrs	r3, r3, #3
   25d42:	b2db      	uxtb	r3, r3
   25d44:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   25d46:	1dfb      	adds	r3, r7, #7
   25d48:	781b      	ldrb	r3, [r3, #0]
   25d4a:	08db      	lsrs	r3, r3, #3
   25d4c:	b2db      	uxtb	r3, r3
   25d4e:	001a      	movs	r2, r3
   25d50:	693b      	ldr	r3, [r7, #16]
   25d52:	3206      	adds	r2, #6
   25d54:	0092      	lsls	r2, r2, #2
   25d56:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   25d58:	210f      	movs	r1, #15
   25d5a:	68fa      	ldr	r2, [r7, #12]
   25d5c:	4091      	lsls	r1, r2
   25d5e:	000a      	movs	r2, r1
   25d60:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   25d62:	401a      	ands	r2, r3
			(new_config << config_pos);
   25d64:	6979      	ldr	r1, [r7, #20]
   25d66:	68fb      	ldr	r3, [r7, #12]
   25d68:	4099      	lsls	r1, r3
   25d6a:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   25d6c:	431a      	orrs	r2, r3
   25d6e:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   25d70:	693b      	ldr	r3, [r7, #16]
   25d72:	1d82      	adds	r2, r0, #6
   25d74:	0092      	lsls	r2, r2, #2
   25d76:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   25d78:	683b      	ldr	r3, [r7, #0]
   25d7a:	7a5b      	ldrb	r3, [r3, #9]
   25d7c:	2b00      	cmp	r3, #0
   25d7e:	d00a      	beq.n	25d96 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   25d80:	693b      	ldr	r3, [r7, #16]
   25d82:	695a      	ldr	r2, [r3, #20]
   25d84:	1dfb      	adds	r3, r7, #7
   25d86:	781b      	ldrb	r3, [r3, #0]
   25d88:	2101      	movs	r1, #1
   25d8a:	4099      	lsls	r1, r3
   25d8c:	000b      	movs	r3, r1
   25d8e:	431a      	orrs	r2, r3
   25d90:	693b      	ldr	r3, [r7, #16]
   25d92:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   25d94:	e00a      	b.n	25dac <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   25d96:	693b      	ldr	r3, [r7, #16]
   25d98:	695b      	ldr	r3, [r3, #20]
   25d9a:	1dfa      	adds	r2, r7, #7
   25d9c:	7812      	ldrb	r2, [r2, #0]
   25d9e:	2101      	movs	r1, #1
   25da0:	4091      	lsls	r1, r2
   25da2:	000a      	movs	r2, r1
   25da4:	43d2      	mvns	r2, r2
   25da6:	401a      	ands	r2, r3
   25da8:	693b      	ldr	r3, [r7, #16]
   25daa:	615a      	str	r2, [r3, #20]
}
   25dac:	46c0      	nop			; (mov r8, r8)
   25dae:	46bd      	mov	sp, r7
   25db0:	b006      	add	sp, #24
   25db2:	bd80      	pop	{r7, pc}
   25db4:	00025a65 	.word	0x00025a65
   25db8:	000295d9 	.word	0x000295d9
   25dbc:	00025ab9 	.word	0x00025ab9

00025dc0 <system_pinmux_get_config_defaults>:
{
   25dc0:	b580      	push	{r7, lr}
   25dc2:	b082      	sub	sp, #8
   25dc4:	af00      	add	r7, sp, #0
   25dc6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   25dc8:	687b      	ldr	r3, [r7, #4]
   25dca:	2280      	movs	r2, #128	; 0x80
   25dcc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   25dce:	687b      	ldr	r3, [r7, #4]
   25dd0:	2200      	movs	r2, #0
   25dd2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   25dd4:	687b      	ldr	r3, [r7, #4]
   25dd6:	2201      	movs	r2, #1
   25dd8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   25dda:	687b      	ldr	r3, [r7, #4]
   25ddc:	2200      	movs	r2, #0
   25dde:	70da      	strb	r2, [r3, #3]
}
   25de0:	46c0      	nop			; (mov r8, r8)
   25de2:	46bd      	mov	sp, r7
   25de4:	b002      	add	sp, #8
   25de6:	bd80      	pop	{r7, pc}

00025de8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   25de8:	b580      	push	{r7, lr}
   25dea:	b084      	sub	sp, #16
   25dec:	af00      	add	r7, sp, #0
   25dee:	0002      	movs	r2, r0
   25df0:	6039      	str	r1, [r7, #0]
   25df2:	1dfb      	adds	r3, r7, #7
   25df4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   25df6:	230c      	movs	r3, #12
   25df8:	18fb      	adds	r3, r7, r3
   25dfa:	0018      	movs	r0, r3
   25dfc:	4b10      	ldr	r3, [pc, #64]	; (25e40 <port_pin_set_config+0x58>)
   25dfe:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   25e00:	230c      	movs	r3, #12
   25e02:	18fb      	adds	r3, r7, r3
   25e04:	2280      	movs	r2, #128	; 0x80
   25e06:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   25e08:	683b      	ldr	r3, [r7, #0]
   25e0a:	781a      	ldrb	r2, [r3, #0]
   25e0c:	230c      	movs	r3, #12
   25e0e:	18fb      	adds	r3, r7, r3
   25e10:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   25e12:	683b      	ldr	r3, [r7, #0]
   25e14:	785a      	ldrb	r2, [r3, #1]
   25e16:	230c      	movs	r3, #12
   25e18:	18fb      	adds	r3, r7, r3
   25e1a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   25e1c:	683b      	ldr	r3, [r7, #0]
   25e1e:	789a      	ldrb	r2, [r3, #2]
   25e20:	230c      	movs	r3, #12
   25e22:	18fb      	adds	r3, r7, r3
   25e24:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   25e26:	230c      	movs	r3, #12
   25e28:	18fa      	adds	r2, r7, r3
   25e2a:	1dfb      	adds	r3, r7, #7
   25e2c:	781b      	ldrb	r3, [r3, #0]
   25e2e:	0011      	movs	r1, r2
   25e30:	0018      	movs	r0, r3
   25e32:	4b04      	ldr	r3, [pc, #16]	; (25e44 <port_pin_set_config+0x5c>)
   25e34:	4798      	blx	r3
}
   25e36:	46c0      	nop			; (mov r8, r8)
   25e38:	46bd      	mov	sp, r7
   25e3a:	b004      	add	sp, #16
   25e3c:	bd80      	pop	{r7, pc}
   25e3e:	46c0      	nop			; (mov r8, r8)
   25e40:	00025dc1 	.word	0x00025dc1
   25e44:	000295d9 	.word	0x000295d9

00025e48 <system_gclk_chan_get_config_defaults>:
{
   25e48:	b580      	push	{r7, lr}
   25e4a:	b082      	sub	sp, #8
   25e4c:	af00      	add	r7, sp, #0
   25e4e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   25e50:	687b      	ldr	r3, [r7, #4]
   25e52:	2200      	movs	r2, #0
   25e54:	701a      	strb	r2, [r3, #0]
}
   25e56:	46c0      	nop			; (mov r8, r8)
   25e58:	46bd      	mov	sp, r7
   25e5a:	b002      	add	sp, #8
   25e5c:	bd80      	pop	{r7, pc}
	...

00025e60 <system_apb_clock_set_mask>:
{
   25e60:	b580      	push	{r7, lr}
   25e62:	b082      	sub	sp, #8
   25e64:	af00      	add	r7, sp, #0
   25e66:	0002      	movs	r2, r0
   25e68:	6039      	str	r1, [r7, #0]
   25e6a:	1dfb      	adds	r3, r7, #7
   25e6c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   25e6e:	1dfb      	adds	r3, r7, #7
   25e70:	781b      	ldrb	r3, [r3, #0]
   25e72:	2b01      	cmp	r3, #1
   25e74:	d00a      	beq.n	25e8c <system_apb_clock_set_mask+0x2c>
   25e76:	2b02      	cmp	r3, #2
   25e78:	d00f      	beq.n	25e9a <system_apb_clock_set_mask+0x3a>
   25e7a:	2b00      	cmp	r3, #0
   25e7c:	d114      	bne.n	25ea8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   25e7e:	4b0e      	ldr	r3, [pc, #56]	; (25eb8 <system_apb_clock_set_mask+0x58>)
   25e80:	4a0d      	ldr	r2, [pc, #52]	; (25eb8 <system_apb_clock_set_mask+0x58>)
   25e82:	6991      	ldr	r1, [r2, #24]
   25e84:	683a      	ldr	r2, [r7, #0]
   25e86:	430a      	orrs	r2, r1
   25e88:	619a      	str	r2, [r3, #24]
			break;
   25e8a:	e00f      	b.n	25eac <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   25e8c:	4b0a      	ldr	r3, [pc, #40]	; (25eb8 <system_apb_clock_set_mask+0x58>)
   25e8e:	4a0a      	ldr	r2, [pc, #40]	; (25eb8 <system_apb_clock_set_mask+0x58>)
   25e90:	69d1      	ldr	r1, [r2, #28]
   25e92:	683a      	ldr	r2, [r7, #0]
   25e94:	430a      	orrs	r2, r1
   25e96:	61da      	str	r2, [r3, #28]
			break;
   25e98:	e008      	b.n	25eac <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   25e9a:	4b07      	ldr	r3, [pc, #28]	; (25eb8 <system_apb_clock_set_mask+0x58>)
   25e9c:	4a06      	ldr	r2, [pc, #24]	; (25eb8 <system_apb_clock_set_mask+0x58>)
   25e9e:	6a11      	ldr	r1, [r2, #32]
   25ea0:	683a      	ldr	r2, [r7, #0]
   25ea2:	430a      	orrs	r2, r1
   25ea4:	621a      	str	r2, [r3, #32]
			break;
   25ea6:	e001      	b.n	25eac <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   25ea8:	2317      	movs	r3, #23
   25eaa:	e000      	b.n	25eae <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   25eac:	2300      	movs	r3, #0
}
   25eae:	0018      	movs	r0, r3
   25eb0:	46bd      	mov	sp, r7
   25eb2:	b002      	add	sp, #8
   25eb4:	bd80      	pop	{r7, pc}
   25eb6:	46c0      	nop			; (mov r8, r8)
   25eb8:	40000400 	.word	0x40000400

00025ebc <system_interrupt_enable>:
{
   25ebc:	b580      	push	{r7, lr}
   25ebe:	b082      	sub	sp, #8
   25ec0:	af00      	add	r7, sp, #0
   25ec2:	0002      	movs	r2, r0
   25ec4:	1dfb      	adds	r3, r7, #7
   25ec6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   25ec8:	4b06      	ldr	r3, [pc, #24]	; (25ee4 <system_interrupt_enable+0x28>)
   25eca:	1dfa      	adds	r2, r7, #7
   25ecc:	7812      	ldrb	r2, [r2, #0]
   25ece:	0011      	movs	r1, r2
   25ed0:	221f      	movs	r2, #31
   25ed2:	400a      	ands	r2, r1
   25ed4:	2101      	movs	r1, #1
   25ed6:	4091      	lsls	r1, r2
   25ed8:	000a      	movs	r2, r1
   25eda:	601a      	str	r2, [r3, #0]
}
   25edc:	46c0      	nop			; (mov r8, r8)
   25ede:	46bd      	mov	sp, r7
   25ee0:	b002      	add	sp, #8
   25ee2:	bd80      	pop	{r7, pc}
   25ee4:	e000e100 	.word	0xe000e100

00025ee8 <system_interrupt_disable>:
{
   25ee8:	b580      	push	{r7, lr}
   25eea:	b082      	sub	sp, #8
   25eec:	af00      	add	r7, sp, #0
   25eee:	0002      	movs	r2, r0
   25ef0:	1dfb      	adds	r3, r7, #7
   25ef2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   25ef4:	4a07      	ldr	r2, [pc, #28]	; (25f14 <system_interrupt_disable+0x2c>)
   25ef6:	1dfb      	adds	r3, r7, #7
   25ef8:	781b      	ldrb	r3, [r3, #0]
   25efa:	0019      	movs	r1, r3
   25efc:	231f      	movs	r3, #31
   25efe:	400b      	ands	r3, r1
   25f00:	2101      	movs	r1, #1
   25f02:	4099      	lsls	r1, r3
   25f04:	000b      	movs	r3, r1
   25f06:	0019      	movs	r1, r3
   25f08:	2380      	movs	r3, #128	; 0x80
   25f0a:	50d1      	str	r1, [r2, r3]
}
   25f0c:	46c0      	nop			; (mov r8, r8)
   25f0e:	46bd      	mov	sp, r7
   25f10:	b002      	add	sp, #8
   25f12:	bd80      	pop	{r7, pc}
   25f14:	e000e100 	.word	0xe000e100

00025f18 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   25f18:	b580      	push	{r7, lr}
   25f1a:	b084      	sub	sp, #16
   25f1c:	af00      	add	r7, sp, #0
   25f1e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25f20:	687b      	ldr	r3, [r7, #4]
   25f22:	681b      	ldr	r3, [r3, #0]
   25f24:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   25f26:	68fb      	ldr	r3, [r7, #12]
   25f28:	7a9b      	ldrb	r3, [r3, #10]
   25f2a:	b2db      	uxtb	r3, r3
   25f2c:	b25b      	sxtb	r3, r3
   25f2e:	2b00      	cmp	r3, #0
   25f30:	da01      	bge.n	25f36 <rtc_calendar_is_syncing+0x1e>
                return true;
   25f32:	2301      	movs	r3, #1
   25f34:	e000      	b.n	25f38 <rtc_calendar_is_syncing+0x20>
        }

        return false;
   25f36:	2300      	movs	r3, #0
}
   25f38:	0018      	movs	r0, r3
   25f3a:	46bd      	mov	sp, r7
   25f3c:	b004      	add	sp, #16
   25f3e:	bd80      	pop	{r7, pc}

00025f40 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   25f40:	b580      	push	{r7, lr}
   25f42:	b084      	sub	sp, #16
   25f44:	af00      	add	r7, sp, #0
   25f46:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25f48:	687b      	ldr	r3, [r7, #4]
   25f4a:	681b      	ldr	r3, [r3, #0]
   25f4c:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   25f4e:	2003      	movs	r0, #3
   25f50:	4b0a      	ldr	r3, [pc, #40]	; (25f7c <rtc_calendar_enable+0x3c>)
   25f52:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   25f54:	46c0      	nop			; (mov r8, r8)
   25f56:	687b      	ldr	r3, [r7, #4]
   25f58:	0018      	movs	r0, r3
   25f5a:	4b09      	ldr	r3, [pc, #36]	; (25f80 <rtc_calendar_enable+0x40>)
   25f5c:	4798      	blx	r3
   25f5e:	1e03      	subs	r3, r0, #0
   25f60:	d1f9      	bne.n	25f56 <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   25f62:	68fb      	ldr	r3, [r7, #12]
   25f64:	881b      	ldrh	r3, [r3, #0]
   25f66:	b29b      	uxth	r3, r3
   25f68:	2202      	movs	r2, #2
   25f6a:	4313      	orrs	r3, r2
   25f6c:	b29a      	uxth	r2, r3
   25f6e:	68fb      	ldr	r3, [r7, #12]
   25f70:	801a      	strh	r2, [r3, #0]
}
   25f72:	46c0      	nop			; (mov r8, r8)
   25f74:	46bd      	mov	sp, r7
   25f76:	b004      	add	sp, #16
   25f78:	bd80      	pop	{r7, pc}
   25f7a:	46c0      	nop			; (mov r8, r8)
   25f7c:	00025ebd 	.word	0x00025ebd
   25f80:	00025f19 	.word	0x00025f19

00025f84 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   25f84:	b580      	push	{r7, lr}
   25f86:	b084      	sub	sp, #16
   25f88:	af00      	add	r7, sp, #0
   25f8a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25f8c:	687b      	ldr	r3, [r7, #4]
   25f8e:	681b      	ldr	r3, [r3, #0]
   25f90:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   25f92:	2003      	movs	r0, #3
   25f94:	4b0d      	ldr	r3, [pc, #52]	; (25fcc <rtc_calendar_disable+0x48>)
   25f96:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   25f98:	46c0      	nop			; (mov r8, r8)
   25f9a:	687b      	ldr	r3, [r7, #4]
   25f9c:	0018      	movs	r0, r3
   25f9e:	4b0c      	ldr	r3, [pc, #48]	; (25fd0 <rtc_calendar_disable+0x4c>)
   25fa0:	4798      	blx	r3
   25fa2:	1e03      	subs	r3, r0, #0
   25fa4:	d1f9      	bne.n	25f9a <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   25fa6:	68fb      	ldr	r3, [r7, #12]
   25fa8:	22c1      	movs	r2, #193	; 0xc1
   25faa:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   25fac:	68fb      	ldr	r3, [r7, #12]
   25fae:	22c1      	movs	r2, #193	; 0xc1
   25fb0:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   25fb2:	68fb      	ldr	r3, [r7, #12]
   25fb4:	881b      	ldrh	r3, [r3, #0]
   25fb6:	b29b      	uxth	r3, r3
   25fb8:	2202      	movs	r2, #2
   25fba:	4393      	bics	r3, r2
   25fbc:	b29a      	uxth	r2, r3
   25fbe:	68fb      	ldr	r3, [r7, #12]
   25fc0:	801a      	strh	r2, [r3, #0]
}
   25fc2:	46c0      	nop			; (mov r8, r8)
   25fc4:	46bd      	mov	sp, r7
   25fc6:	b004      	add	sp, #16
   25fc8:	bd80      	pop	{r7, pc}
   25fca:	46c0      	nop			; (mov r8, r8)
   25fcc:	00025ee9 	.word	0x00025ee9
   25fd0:	00025f19 	.word	0x00025f19

00025fd4 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   25fd4:	b580      	push	{r7, lr}
   25fd6:	b084      	sub	sp, #16
   25fd8:	af00      	add	r7, sp, #0
   25fda:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25fdc:	687b      	ldr	r3, [r7, #4]
   25fde:	681b      	ldr	r3, [r3, #0]
   25fe0:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   25fe2:	687b      	ldr	r3, [r7, #4]
   25fe4:	0018      	movs	r0, r3
   25fe6:	4b0d      	ldr	r3, [pc, #52]	; (2601c <rtc_calendar_reset+0x48>)
   25fe8:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   25fea:	687b      	ldr	r3, [r7, #4]
   25fec:	2200      	movs	r2, #0
   25fee:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   25ff0:	687b      	ldr	r3, [r7, #4]
   25ff2:	2200      	movs	r2, #0
   25ff4:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   25ff6:	46c0      	nop			; (mov r8, r8)
   25ff8:	687b      	ldr	r3, [r7, #4]
   25ffa:	0018      	movs	r0, r3
   25ffc:	4b08      	ldr	r3, [pc, #32]	; (26020 <rtc_calendar_reset+0x4c>)
   25ffe:	4798      	blx	r3
   26000:	1e03      	subs	r3, r0, #0
   26002:	d1f9      	bne.n	25ff8 <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   26004:	68fb      	ldr	r3, [r7, #12]
   26006:	881b      	ldrh	r3, [r3, #0]
   26008:	b29b      	uxth	r3, r3
   2600a:	2201      	movs	r2, #1
   2600c:	4313      	orrs	r3, r2
   2600e:	b29a      	uxth	r2, r3
   26010:	68fb      	ldr	r3, [r7, #12]
   26012:	801a      	strh	r2, [r3, #0]
}
   26014:	46c0      	nop			; (mov r8, r8)
   26016:	46bd      	mov	sp, r7
   26018:	b004      	add	sp, #16
   2601a:	bd80      	pop	{r7, pc}
   2601c:	00025f85 	.word	0x00025f85
   26020:	00025f19 	.word	0x00025f19

00026024 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   26024:	b580      	push	{r7, lr}
   26026:	b084      	sub	sp, #16
   26028:	af00      	add	r7, sp, #0
   2602a:	6078      	str	r0, [r7, #4]
   2602c:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   2602e:	683b      	ldr	r3, [r7, #0]
   26030:	88db      	ldrh	r3, [r3, #6]
   26032:	001a      	movs	r2, r3
   26034:	687b      	ldr	r3, [r7, #4]
   26036:	88db      	ldrh	r3, [r3, #6]
   26038:	1ad3      	subs	r3, r2, r3
   2603a:	069b      	lsls	r3, r3, #26
   2603c:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   2603e:	683b      	ldr	r3, [r7, #0]
   26040:	795b      	ldrb	r3, [r3, #5]
   26042:	059b      	lsls	r3, r3, #22
   26044:	001a      	movs	r2, r3
   26046:	68fb      	ldr	r3, [r7, #12]
   26048:	4313      	orrs	r3, r2
   2604a:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   2604c:	683b      	ldr	r3, [r7, #0]
   2604e:	791b      	ldrb	r3, [r3, #4]
   26050:	045b      	lsls	r3, r3, #17
   26052:	001a      	movs	r2, r3
   26054:	68fb      	ldr	r3, [r7, #12]
   26056:	4313      	orrs	r3, r2
   26058:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   2605a:	683b      	ldr	r3, [r7, #0]
   2605c:	789b      	ldrb	r3, [r3, #2]
   2605e:	031b      	lsls	r3, r3, #12
   26060:	001a      	movs	r2, r3
   26062:	68fb      	ldr	r3, [r7, #12]
   26064:	4313      	orrs	r3, r2
   26066:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   26068:	687b      	ldr	r3, [r7, #4]
   2606a:	791b      	ldrb	r3, [r3, #4]
   2606c:	2201      	movs	r2, #1
   2606e:	4053      	eors	r3, r2
   26070:	b2db      	uxtb	r3, r3
   26072:	2b00      	cmp	r3, #0
   26074:	d008      	beq.n	26088 <rtc_calendar_time_to_register_value+0x64>
   26076:	683b      	ldr	r3, [r7, #0]
   26078:	78db      	ldrb	r3, [r3, #3]
   2607a:	2b00      	cmp	r3, #0
   2607c:	d004      	beq.n	26088 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   2607e:	68fb      	ldr	r3, [r7, #12]
   26080:	2280      	movs	r2, #128	; 0x80
   26082:	0252      	lsls	r2, r2, #9
   26084:	4313      	orrs	r3, r2
   26086:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   26088:	683b      	ldr	r3, [r7, #0]
   2608a:	785b      	ldrb	r3, [r3, #1]
   2608c:	019b      	lsls	r3, r3, #6
   2608e:	001a      	movs	r2, r3
   26090:	68fb      	ldr	r3, [r7, #12]
   26092:	4313      	orrs	r3, r2
   26094:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   26096:	683b      	ldr	r3, [r7, #0]
   26098:	781b      	ldrb	r3, [r3, #0]
   2609a:	001a      	movs	r2, r3
   2609c:	68fb      	ldr	r3, [r7, #12]
   2609e:	4313      	orrs	r3, r2
   260a0:	60fb      	str	r3, [r7, #12]

	return register_value;
   260a2:	68fb      	ldr	r3, [r7, #12]
}
   260a4:	0018      	movs	r0, r3
   260a6:	46bd      	mov	sp, r7
   260a8:	b004      	add	sp, #16
   260aa:	bd80      	pop	{r7, pc}

000260ac <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   260ac:	b580      	push	{r7, lr}
   260ae:	b084      	sub	sp, #16
   260b0:	af00      	add	r7, sp, #0
   260b2:	60f8      	str	r0, [r7, #12]
   260b4:	60b9      	str	r1, [r7, #8]
   260b6:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   260b8:	68bb      	ldr	r3, [r7, #8]
   260ba:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   260bc:	b29a      	uxth	r2, r3
   260be:	68fb      	ldr	r3, [r7, #12]
   260c0:	88db      	ldrh	r3, [r3, #6]
   260c2:	18d3      	adds	r3, r2, r3
   260c4:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   260c6:	687b      	ldr	r3, [r7, #4]
   260c8:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   260ca:	68bb      	ldr	r3, [r7, #8]
   260cc:	0d9b      	lsrs	r3, r3, #22
   260ce:	b2db      	uxtb	r3, r3
   260d0:	220f      	movs	r2, #15
   260d2:	4013      	ands	r3, r2
   260d4:	b2da      	uxtb	r2, r3
   260d6:	687b      	ldr	r3, [r7, #4]
   260d8:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   260da:	68bb      	ldr	r3, [r7, #8]
   260dc:	0c5b      	lsrs	r3, r3, #17
   260de:	b2db      	uxtb	r3, r3
   260e0:	221f      	movs	r2, #31
   260e2:	4013      	ands	r3, r2
   260e4:	b2da      	uxtb	r2, r3
   260e6:	687b      	ldr	r3, [r7, #4]
   260e8:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   260ea:	68fb      	ldr	r3, [r7, #12]
   260ec:	791b      	ldrb	r3, [r3, #4]
   260ee:	2b00      	cmp	r3, #0
   260f0:	d008      	beq.n	26104 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   260f2:	68bb      	ldr	r3, [r7, #8]
   260f4:	0b1b      	lsrs	r3, r3, #12
   260f6:	b2db      	uxtb	r3, r3
   260f8:	221f      	movs	r2, #31
   260fa:	4013      	ands	r3, r2
   260fc:	b2da      	uxtb	r2, r3
   260fe:	687b      	ldr	r3, [r7, #4]
   26100:	709a      	strb	r2, [r3, #2]
   26102:	e010      	b.n	26126 <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   26104:	68bb      	ldr	r3, [r7, #8]
   26106:	0b1b      	lsrs	r3, r3, #12
   26108:	b2db      	uxtb	r3, r3
   2610a:	220f      	movs	r2, #15
   2610c:	4013      	ands	r3, r2
   2610e:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   26110:	687b      	ldr	r3, [r7, #4]
   26112:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   26114:	68ba      	ldr	r2, [r7, #8]
   26116:	2380      	movs	r3, #128	; 0x80
   26118:	025b      	lsls	r3, r3, #9
   2611a:	4013      	ands	r3, r2
   2611c:	1e5a      	subs	r2, r3, #1
   2611e:	4193      	sbcs	r3, r2
   26120:	b2da      	uxtb	r2, r3
   26122:	687b      	ldr	r3, [r7, #4]
   26124:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   26126:	68bb      	ldr	r3, [r7, #8]
   26128:	099b      	lsrs	r3, r3, #6
   2612a:	b2db      	uxtb	r3, r3
   2612c:	223f      	movs	r2, #63	; 0x3f
   2612e:	4013      	ands	r3, r2
   26130:	b2da      	uxtb	r2, r3
   26132:	687b      	ldr	r3, [r7, #4]
   26134:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   26136:	68bb      	ldr	r3, [r7, #8]
   26138:	b2db      	uxtb	r3, r3
   2613a:	223f      	movs	r2, #63	; 0x3f
   2613c:	4013      	ands	r3, r2
   2613e:	b2da      	uxtb	r2, r3
   26140:	687b      	ldr	r3, [r7, #4]
   26142:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   26144:	46c0      	nop			; (mov r8, r8)
   26146:	46bd      	mov	sp, r7
   26148:	b004      	add	sp, #16
   2614a:	bd80      	pop	{r7, pc}

0002614c <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   2614c:	b580      	push	{r7, lr}
   2614e:	b084      	sub	sp, #16
   26150:	af00      	add	r7, sp, #0
   26152:	6078      	str	r0, [r7, #4]
   26154:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26156:	687b      	ldr	r3, [r7, #4]
   26158:	681b      	ldr	r3, [r3, #0]
   2615a:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   2615c:	683b      	ldr	r3, [r7, #0]
   2615e:	881a      	ldrh	r2, [r3, #0]
   26160:	230e      	movs	r3, #14
   26162:	18fb      	adds	r3, r7, r3
   26164:	2108      	movs	r1, #8
   26166:	430a      	orrs	r2, r1
   26168:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   2616a:	683b      	ldr	r3, [r7, #0]
   2616c:	791b      	ldrb	r3, [r3, #4]
   2616e:	2201      	movs	r2, #1
   26170:	4053      	eors	r3, r2
   26172:	b2db      	uxtb	r3, r3
   26174:	2b00      	cmp	r3, #0
   26176:	d007      	beq.n	26188 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   26178:	230e      	movs	r3, #14
   2617a:	18fb      	adds	r3, r7, r3
   2617c:	220e      	movs	r2, #14
   2617e:	18ba      	adds	r2, r7, r2
   26180:	8812      	ldrh	r2, [r2, #0]
   26182:	2140      	movs	r1, #64	; 0x40
   26184:	430a      	orrs	r2, r1
   26186:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   26188:	683b      	ldr	r3, [r7, #0]
   2618a:	789b      	ldrb	r3, [r3, #2]
   2618c:	2b00      	cmp	r3, #0
   2618e:	d007      	beq.n	261a0 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   26190:	230e      	movs	r3, #14
   26192:	18fb      	adds	r3, r7, r3
   26194:	220e      	movs	r2, #14
   26196:	18ba      	adds	r2, r7, r2
   26198:	8812      	ldrh	r2, [r2, #0]
   2619a:	2180      	movs	r1, #128	; 0x80
   2619c:	430a      	orrs	r2, r1
   2619e:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   261a0:	68bb      	ldr	r3, [r7, #8]
   261a2:	220e      	movs	r2, #14
   261a4:	18ba      	adds	r2, r7, r2
   261a6:	8812      	ldrh	r2, [r2, #0]
   261a8:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   261aa:	683b      	ldr	r3, [r7, #0]
   261ac:	78db      	ldrb	r3, [r3, #3]
   261ae:	2b00      	cmp	r3, #0
   261b0:	d008      	beq.n	261c4 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   261b2:	68bb      	ldr	r3, [r7, #8]
   261b4:	885b      	ldrh	r3, [r3, #2]
   261b6:	b29b      	uxth	r3, r3
   261b8:	2280      	movs	r2, #128	; 0x80
   261ba:	01d2      	lsls	r2, r2, #7
   261bc:	4313      	orrs	r3, r2
   261be:	b29a      	uxth	r2, r3
   261c0:	68bb      	ldr	r3, [r7, #8]
   261c2:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   261c4:	230d      	movs	r3, #13
   261c6:	18fb      	adds	r3, r7, r3
   261c8:	2200      	movs	r2, #0
   261ca:	701a      	strb	r2, [r3, #0]
   261cc:	e017      	b.n	261fe <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   261ce:	230d      	movs	r3, #13
   261d0:	18fb      	adds	r3, r7, r3
   261d2:	781a      	ldrb	r2, [r3, #0]
   261d4:	0013      	movs	r3, r2
   261d6:	009b      	lsls	r3, r3, #2
   261d8:	189b      	adds	r3, r3, r2
   261da:	005b      	lsls	r3, r3, #1
   261dc:	3308      	adds	r3, #8
   261de:	683a      	ldr	r2, [r7, #0]
   261e0:	18d1      	adds	r1, r2, r3
   261e2:	230d      	movs	r3, #13
   261e4:	18fb      	adds	r3, r7, r3
   261e6:	781a      	ldrb	r2, [r3, #0]
   261e8:	687b      	ldr	r3, [r7, #4]
   261ea:	0018      	movs	r0, r3
   261ec:	4b08      	ldr	r3, [pc, #32]	; (26210 <_rtc_calendar_set_config+0xc4>)
   261ee:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   261f0:	230d      	movs	r3, #13
   261f2:	18fb      	adds	r3, r7, r3
   261f4:	781a      	ldrb	r2, [r3, #0]
   261f6:	230d      	movs	r3, #13
   261f8:	18fb      	adds	r3, r7, r3
   261fa:	3201      	adds	r2, #1
   261fc:	701a      	strb	r2, [r3, #0]
   261fe:	230d      	movs	r3, #13
   26200:	18fb      	adds	r3, r7, r3
   26202:	781b      	ldrb	r3, [r3, #0]
   26204:	2b00      	cmp	r3, #0
   26206:	d0e2      	beq.n	261ce <_rtc_calendar_set_config+0x82>
	}
}
   26208:	46c0      	nop			; (mov r8, r8)
   2620a:	46bd      	mov	sp, r7
   2620c:	b004      	add	sp, #16
   2620e:	bd80      	pop	{r7, pc}
   26210:	00026335 	.word	0x00026335

00026214 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   26214:	b580      	push	{r7, lr}
   26216:	b086      	sub	sp, #24
   26218:	af00      	add	r7, sp, #0
   2621a:	60f8      	str	r0, [r7, #12]
   2621c:	60b9      	str	r1, [r7, #8]
   2621e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   26220:	68fb      	ldr	r3, [r7, #12]
   26222:	68ba      	ldr	r2, [r7, #8]
   26224:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   26226:	2120      	movs	r1, #32
   26228:	2000      	movs	r0, #0
   2622a:	4b18      	ldr	r3, [pc, #96]	; (2628c <rtc_calendar_init+0x78>)
   2622c:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2622e:	2314      	movs	r3, #20
   26230:	18fb      	adds	r3, r7, r3
   26232:	0018      	movs	r0, r3
   26234:	4b16      	ldr	r3, [pc, #88]	; (26290 <rtc_calendar_init+0x7c>)
   26236:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   26238:	2314      	movs	r3, #20
   2623a:	18fb      	adds	r3, r7, r3
   2623c:	2202      	movs	r2, #2
   2623e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   26240:	2314      	movs	r3, #20
   26242:	18fb      	adds	r3, r7, r3
   26244:	0019      	movs	r1, r3
   26246:	2004      	movs	r0, #4
   26248:	4b12      	ldr	r3, [pc, #72]	; (26294 <rtc_calendar_init+0x80>)
   2624a:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   2624c:	2004      	movs	r0, #4
   2624e:	4b12      	ldr	r3, [pc, #72]	; (26298 <rtc_calendar_init+0x84>)
   26250:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   26252:	68fb      	ldr	r3, [r7, #12]
   26254:	0018      	movs	r0, r3
   26256:	4b11      	ldr	r3, [pc, #68]	; (2629c <rtc_calendar_init+0x88>)
   26258:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   2625a:	687b      	ldr	r3, [r7, #4]
   2625c:	791a      	ldrb	r2, [r3, #4]
   2625e:	68fb      	ldr	r3, [r7, #12]
   26260:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   26262:	687b      	ldr	r3, [r7, #4]
   26264:	78da      	ldrb	r2, [r3, #3]
   26266:	68fb      	ldr	r3, [r7, #12]
   26268:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   2626a:	687b      	ldr	r3, [r7, #4]
   2626c:	88da      	ldrh	r2, [r3, #6]
   2626e:	68fb      	ldr	r3, [r7, #12]
   26270:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   26272:	4b0b      	ldr	r3, [pc, #44]	; (262a0 <rtc_calendar_init+0x8c>)
   26274:	68fa      	ldr	r2, [r7, #12]
   26276:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   26278:	687a      	ldr	r2, [r7, #4]
   2627a:	68fb      	ldr	r3, [r7, #12]
   2627c:	0011      	movs	r1, r2
   2627e:	0018      	movs	r0, r3
   26280:	4b08      	ldr	r3, [pc, #32]	; (262a4 <rtc_calendar_init+0x90>)
   26282:	4798      	blx	r3
}
   26284:	46c0      	nop			; (mov r8, r8)
   26286:	46bd      	mov	sp, r7
   26288:	b006      	add	sp, #24
   2628a:	bd80      	pop	{r7, pc}
   2628c:	00025e61 	.word	0x00025e61
   26290:	00025e49 	.word	0x00025e49
   26294:	00029279 	.word	0x00029279
   26298:	000292bd 	.word	0x000292bd
   2629c:	00025fd5 	.word	0x00025fd5
   262a0:	200059b4 	.word	0x200059b4
   262a4:	0002614d 	.word	0x0002614d

000262a8 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   262a8:	b580      	push	{r7, lr}
   262aa:	b084      	sub	sp, #16
   262ac:	af00      	add	r7, sp, #0
   262ae:	6078      	str	r0, [r7, #4]
   262b0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   262b2:	687b      	ldr	r3, [r7, #4]
   262b4:	681b      	ldr	r3, [r3, #0]
   262b6:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   262b8:	687b      	ldr	r3, [r7, #4]
   262ba:	795b      	ldrb	r3, [r3, #5]
   262bc:	2201      	movs	r2, #1
   262be:	4053      	eors	r3, r2
   262c0:	b2db      	uxtb	r3, r3
   262c2:	2b00      	cmp	r3, #0
   262c4:	d00a      	beq.n	262dc <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   262c6:	68fb      	ldr	r3, [r7, #12]
   262c8:	4a16      	ldr	r2, [pc, #88]	; (26324 <rtc_calendar_get_time+0x7c>)
   262ca:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   262cc:	46c0      	nop			; (mov r8, r8)
   262ce:	687b      	ldr	r3, [r7, #4]
   262d0:	0018      	movs	r0, r3
   262d2:	4b15      	ldr	r3, [pc, #84]	; (26328 <rtc_calendar_get_time+0x80>)
   262d4:	4798      	blx	r3
   262d6:	1e03      	subs	r3, r0, #0
   262d8:	d1f9      	bne.n	262ce <rtc_calendar_get_time+0x26>
   262da:	e016      	b.n	2630a <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   262dc:	68fb      	ldr	r3, [r7, #12]
   262de:	885b      	ldrh	r3, [r3, #2]
   262e0:	b29b      	uxth	r3, r3
   262e2:	001a      	movs	r2, r3
   262e4:	2380      	movs	r3, #128	; 0x80
   262e6:	01db      	lsls	r3, r3, #7
   262e8:	4013      	ands	r3, r2
   262ea:	d10e      	bne.n	2630a <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   262ec:	68fb      	ldr	r3, [r7, #12]
   262ee:	885b      	ldrh	r3, [r3, #2]
   262f0:	b29b      	uxth	r3, r3
   262f2:	4a0e      	ldr	r2, [pc, #56]	; (2632c <rtc_calendar_get_time+0x84>)
   262f4:	4313      	orrs	r3, r2
   262f6:	b29a      	uxth	r2, r3
   262f8:	68fb      	ldr	r3, [r7, #12]
   262fa:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   262fc:	46c0      	nop			; (mov r8, r8)
   262fe:	687b      	ldr	r3, [r7, #4]
   26300:	0018      	movs	r0, r3
   26302:	4b09      	ldr	r3, [pc, #36]	; (26328 <rtc_calendar_get_time+0x80>)
   26304:	4798      	blx	r3
   26306:	1e03      	subs	r3, r0, #0
   26308:	d1f9      	bne.n	262fe <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   2630a:	68fb      	ldr	r3, [r7, #12]
   2630c:	691b      	ldr	r3, [r3, #16]
   2630e:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   26310:	683a      	ldr	r2, [r7, #0]
   26312:	68b9      	ldr	r1, [r7, #8]
   26314:	687b      	ldr	r3, [r7, #4]
   26316:	0018      	movs	r0, r3
   26318:	4b05      	ldr	r3, [pc, #20]	; (26330 <rtc_calendar_get_time+0x88>)
   2631a:	4798      	blx	r3
}
   2631c:	46c0      	nop			; (mov r8, r8)
   2631e:	46bd      	mov	sp, r7
   26320:	b004      	add	sp, #16
   26322:	bd80      	pop	{r7, pc}
   26324:	ffff8000 	.word	0xffff8000
   26328:	00025f19 	.word	0x00025f19
   2632c:	ffffc000 	.word	0xffffc000
   26330:	000260ad 	.word	0x000260ad

00026334 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   26334:	b580      	push	{r7, lr}
   26336:	b086      	sub	sp, #24
   26338:	af00      	add	r7, sp, #0
   2633a:	60f8      	str	r0, [r7, #12]
   2633c:	60b9      	str	r1, [r7, #8]
   2633e:	1dfb      	adds	r3, r7, #7
   26340:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26342:	68fb      	ldr	r3, [r7, #12]
   26344:	681b      	ldr	r3, [r3, #0]
   26346:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   26348:	1dfb      	adds	r3, r7, #7
   2634a:	781b      	ldrb	r3, [r3, #0]
   2634c:	2b01      	cmp	r3, #1
   2634e:	d901      	bls.n	26354 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   26350:	2317      	movs	r3, #23
   26352:	e021      	b.n	26398 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   26354:	68ba      	ldr	r2, [r7, #8]
   26356:	68fb      	ldr	r3, [r7, #12]
   26358:	0011      	movs	r1, r2
   2635a:	0018      	movs	r0, r3
   2635c:	4b10      	ldr	r3, [pc, #64]	; (263a0 <rtc_calendar_set_alarm+0x6c>)
   2635e:	4798      	blx	r3
   26360:	0003      	movs	r3, r0
   26362:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   26364:	46c0      	nop			; (mov r8, r8)
   26366:	68fb      	ldr	r3, [r7, #12]
   26368:	0018      	movs	r0, r3
   2636a:	4b0e      	ldr	r3, [pc, #56]	; (263a4 <rtc_calendar_set_alarm+0x70>)
   2636c:	4798      	blx	r3
   2636e:	1e03      	subs	r3, r0, #0
   26370:	d1f9      	bne.n	26366 <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   26372:	1dfb      	adds	r3, r7, #7
   26374:	781a      	ldrb	r2, [r3, #0]
   26376:	697b      	ldr	r3, [r7, #20]
   26378:	3203      	adds	r2, #3
   2637a:	00d2      	lsls	r2, r2, #3
   2637c:	6939      	ldr	r1, [r7, #16]
   2637e:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   26380:	1dfb      	adds	r3, r7, #7
   26382:	781b      	ldrb	r3, [r3, #0]
   26384:	68ba      	ldr	r2, [r7, #8]
   26386:	7a11      	ldrb	r1, [r2, #8]
   26388:	697a      	ldr	r2, [r7, #20]
   2638a:	3303      	adds	r3, #3
   2638c:	00db      	lsls	r3, r3, #3
   2638e:	18d3      	adds	r3, r2, r3
   26390:	3304      	adds	r3, #4
   26392:	1c0a      	adds	r2, r1, #0
   26394:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   26396:	2300      	movs	r3, #0
}
   26398:	0018      	movs	r0, r3
   2639a:	46bd      	mov	sp, r7
   2639c:	b006      	add	sp, #24
   2639e:	bd80      	pop	{r7, pc}
   263a0:	00026025 	.word	0x00026025
   263a4:	00025f19 	.word	0x00025f19

000263a8 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   263a8:	b580      	push	{r7, lr}
   263aa:	b086      	sub	sp, #24
   263ac:	af00      	add	r7, sp, #0
   263ae:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   263b0:	4b28      	ldr	r3, [pc, #160]	; (26454 <_rtc_interrupt_handler+0xac>)
   263b2:	687a      	ldr	r2, [r7, #4]
   263b4:	0092      	lsls	r2, r2, #2
   263b6:	58d3      	ldr	r3, [r2, r3]
   263b8:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   263ba:	697b      	ldr	r3, [r7, #20]
   263bc:	681b      	ldr	r3, [r3, #0]
   263be:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   263c0:	230e      	movs	r3, #14
   263c2:	18fb      	adds	r3, r7, r3
   263c4:	697a      	ldr	r2, [r7, #20]
   263c6:	8a52      	ldrh	r2, [r2, #18]
   263c8:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   263ca:	697b      	ldr	r3, [r7, #20]
   263cc:	8a1b      	ldrh	r3, [r3, #16]
   263ce:	b29a      	uxth	r2, r3
   263d0:	230e      	movs	r3, #14
   263d2:	18fb      	adds	r3, r7, r3
   263d4:	210e      	movs	r1, #14
   263d6:	1879      	adds	r1, r7, r1
   263d8:	8809      	ldrh	r1, [r1, #0]
   263da:	400a      	ands	r2, r1
   263dc:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   263de:	693b      	ldr	r3, [r7, #16]
   263e0:	7a1b      	ldrb	r3, [r3, #8]
   263e2:	b2da      	uxtb	r2, r3
   263e4:	230c      	movs	r3, #12
   263e6:	18fb      	adds	r3, r7, r3
   263e8:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   263ea:	693b      	ldr	r3, [r7, #16]
   263ec:	79db      	ldrb	r3, [r3, #7]
   263ee:	b2db      	uxtb	r3, r3
   263f0:	b29a      	uxth	r2, r3
   263f2:	230c      	movs	r3, #12
   263f4:	18fb      	adds	r3, r7, r3
   263f6:	210c      	movs	r1, #12
   263f8:	1879      	adds	r1, r7, r1
   263fa:	8809      	ldrh	r1, [r1, #0]
   263fc:	400a      	ands	r2, r1
   263fe:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   26400:	230c      	movs	r3, #12
   26402:	18fb      	adds	r3, r7, r3
   26404:	881b      	ldrh	r3, [r3, #0]
   26406:	2280      	movs	r2, #128	; 0x80
   26408:	4013      	ands	r3, r2
   2640a:	d00c      	beq.n	26426 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   2640c:	230e      	movs	r3, #14
   2640e:	18fb      	adds	r3, r7, r3
   26410:	881b      	ldrh	r3, [r3, #0]
   26412:	2202      	movs	r2, #2
   26414:	4013      	ands	r3, r2
   26416:	d002      	beq.n	2641e <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   26418:	697b      	ldr	r3, [r7, #20]
   2641a:	68db      	ldr	r3, [r3, #12]
   2641c:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   2641e:	693b      	ldr	r3, [r7, #16]
   26420:	2280      	movs	r2, #128	; 0x80
   26422:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   26424:	e011      	b.n	2644a <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   26426:	230c      	movs	r3, #12
   26428:	18fb      	adds	r3, r7, r3
   2642a:	881b      	ldrh	r3, [r3, #0]
   2642c:	2201      	movs	r2, #1
   2642e:	4013      	ands	r3, r2
   26430:	d00b      	beq.n	2644a <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   26432:	230e      	movs	r3, #14
   26434:	18fb      	adds	r3, r7, r3
   26436:	881b      	ldrh	r3, [r3, #0]
   26438:	2201      	movs	r2, #1
   2643a:	4013      	ands	r3, r2
   2643c:	d002      	beq.n	26444 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   2643e:	697b      	ldr	r3, [r7, #20]
   26440:	689b      	ldr	r3, [r3, #8]
   26442:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   26444:	693b      	ldr	r3, [r7, #16]
   26446:	2201      	movs	r2, #1
   26448:	721a      	strb	r2, [r3, #8]
}
   2644a:	46c0      	nop			; (mov r8, r8)
   2644c:	46bd      	mov	sp, r7
   2644e:	b006      	add	sp, #24
   26450:	bd80      	pop	{r7, pc}
   26452:	46c0      	nop			; (mov r8, r8)
   26454:	200059b4 	.word	0x200059b4

00026458 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   26458:	b580      	push	{r7, lr}
   2645a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   2645c:	2000      	movs	r0, #0
   2645e:	4b02      	ldr	r3, [pc, #8]	; (26468 <RTC_Handler+0x10>)
   26460:	4798      	blx	r3
}
   26462:	46c0      	nop			; (mov r8, r8)
   26464:	46bd      	mov	sp, r7
   26466:	bd80      	pop	{r7, pc}
   26468:	000263a9 	.word	0x000263a9

0002646c <system_gclk_chan_get_config_defaults>:
{
   2646c:	b580      	push	{r7, lr}
   2646e:	b082      	sub	sp, #8
   26470:	af00      	add	r7, sp, #0
   26472:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26474:	687b      	ldr	r3, [r7, #4]
   26476:	2200      	movs	r2, #0
   26478:	701a      	strb	r2, [r3, #0]
}
   2647a:	46c0      	nop			; (mov r8, r8)
   2647c:	46bd      	mov	sp, r7
   2647e:	b002      	add	sp, #8
   26480:	bd80      	pop	{r7, pc}

00026482 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   26482:	b5f0      	push	{r4, r5, r6, r7, lr}
   26484:	b08d      	sub	sp, #52	; 0x34
   26486:	af00      	add	r7, sp, #0
   26488:	60b8      	str	r0, [r7, #8]
   2648a:	60f9      	str	r1, [r7, #12]
   2648c:	603a      	str	r2, [r7, #0]
   2648e:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   26490:	2300      	movs	r3, #0
   26492:	2400      	movs	r4, #0
   26494:	623b      	str	r3, [r7, #32]
   26496:	627c      	str	r4, [r7, #36]	; 0x24
   26498:	2300      	movs	r3, #0
   2649a:	2400      	movs	r4, #0
   2649c:	61bb      	str	r3, [r7, #24]
   2649e:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   264a0:	233f      	movs	r3, #63	; 0x3f
   264a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   264a4:	e053      	b.n	2654e <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   264a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   264a8:	3b20      	subs	r3, #32
   264aa:	2b00      	cmp	r3, #0
   264ac:	db04      	blt.n	264b8 <long_division+0x36>
   264ae:	2201      	movs	r2, #1
   264b0:	409a      	lsls	r2, r3
   264b2:	0013      	movs	r3, r2
   264b4:	617b      	str	r3, [r7, #20]
   264b6:	e00b      	b.n	264d0 <long_division+0x4e>
   264b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   264ba:	2220      	movs	r2, #32
   264bc:	1ad3      	subs	r3, r2, r3
   264be:	2201      	movs	r2, #1
   264c0:	40da      	lsrs	r2, r3
   264c2:	0013      	movs	r3, r2
   264c4:	2100      	movs	r1, #0
   264c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   264c8:	4091      	lsls	r1, r2
   264ca:	000a      	movs	r2, r1
   264cc:	4313      	orrs	r3, r2
   264ce:	617b      	str	r3, [r7, #20]
   264d0:	2201      	movs	r2, #1
   264d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   264d4:	409a      	lsls	r2, r3
   264d6:	0013      	movs	r3, r2
   264d8:	613b      	str	r3, [r7, #16]

		r = r << 1;
   264da:	69bb      	ldr	r3, [r7, #24]
   264dc:	69fc      	ldr	r4, [r7, #28]
   264de:	18db      	adds	r3, r3, r3
   264e0:	4164      	adcs	r4, r4
   264e2:	61bb      	str	r3, [r7, #24]
   264e4:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   264e6:	68bb      	ldr	r3, [r7, #8]
   264e8:	693a      	ldr	r2, [r7, #16]
   264ea:	401a      	ands	r2, r3
   264ec:	0015      	movs	r5, r2
   264ee:	68fb      	ldr	r3, [r7, #12]
   264f0:	697a      	ldr	r2, [r7, #20]
   264f2:	401a      	ands	r2, r3
   264f4:	0016      	movs	r6, r2
   264f6:	002b      	movs	r3, r5
   264f8:	4333      	orrs	r3, r6
   264fa:	d007      	beq.n	2650c <long_division+0x8a>
			r |= 0x01;
   264fc:	69bb      	ldr	r3, [r7, #24]
   264fe:	2201      	movs	r2, #1
   26500:	4313      	orrs	r3, r2
   26502:	61bb      	str	r3, [r7, #24]
   26504:	69fb      	ldr	r3, [r7, #28]
   26506:	2200      	movs	r2, #0
   26508:	4313      	orrs	r3, r2
   2650a:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   2650c:	687a      	ldr	r2, [r7, #4]
   2650e:	69fb      	ldr	r3, [r7, #28]
   26510:	429a      	cmp	r2, r3
   26512:	d819      	bhi.n	26548 <long_division+0xc6>
   26514:	687a      	ldr	r2, [r7, #4]
   26516:	69fb      	ldr	r3, [r7, #28]
   26518:	429a      	cmp	r2, r3
   2651a:	d103      	bne.n	26524 <long_division+0xa2>
   2651c:	683a      	ldr	r2, [r7, #0]
   2651e:	69bb      	ldr	r3, [r7, #24]
   26520:	429a      	cmp	r2, r3
   26522:	d811      	bhi.n	26548 <long_division+0xc6>
			r = r - d;
   26524:	69b9      	ldr	r1, [r7, #24]
   26526:	69fa      	ldr	r2, [r7, #28]
   26528:	683b      	ldr	r3, [r7, #0]
   2652a:	687c      	ldr	r4, [r7, #4]
   2652c:	1ac9      	subs	r1, r1, r3
   2652e:	41a2      	sbcs	r2, r4
   26530:	000b      	movs	r3, r1
   26532:	0014      	movs	r4, r2
   26534:	61bb      	str	r3, [r7, #24]
   26536:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   26538:	6a3a      	ldr	r2, [r7, #32]
   2653a:	693b      	ldr	r3, [r7, #16]
   2653c:	4313      	orrs	r3, r2
   2653e:	623b      	str	r3, [r7, #32]
   26540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   26542:	697b      	ldr	r3, [r7, #20]
   26544:	4313      	orrs	r3, r2
   26546:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   26548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2654a:	3b01      	subs	r3, #1
   2654c:	62fb      	str	r3, [r7, #44]	; 0x2c
   2654e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26550:	2b00      	cmp	r3, #0
   26552:	daa8      	bge.n	264a6 <long_division+0x24>
		}
	}

	return q;
   26554:	6a3b      	ldr	r3, [r7, #32]
   26556:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   26558:	0018      	movs	r0, r3
   2655a:	0021      	movs	r1, r4
   2655c:	46bd      	mov	sp, r7
   2655e:	b00d      	add	sp, #52	; 0x34
   26560:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026562 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   26562:	b580      	push	{r7, lr}
   26564:	b086      	sub	sp, #24
   26566:	af00      	add	r7, sp, #0
   26568:	60f8      	str	r0, [r7, #12]
   2656a:	60b9      	str	r1, [r7, #8]
   2656c:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   2656e:	2316      	movs	r3, #22
   26570:	18fb      	adds	r3, r7, r3
   26572:	2200      	movs	r2, #0
   26574:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   26576:	68bb      	ldr	r3, [r7, #8]
   26578:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   2657a:	68bb      	ldr	r3, [r7, #8]
   2657c:	085a      	lsrs	r2, r3, #1
   2657e:	68fb      	ldr	r3, [r7, #12]
   26580:	429a      	cmp	r2, r3
   26582:	d201      	bcs.n	26588 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26584:	2340      	movs	r3, #64	; 0x40
   26586:	e026      	b.n	265d6 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   26588:	68bb      	ldr	r3, [r7, #8]
   2658a:	085b      	lsrs	r3, r3, #1
   2658c:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   2658e:	e00a      	b.n	265a6 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   26590:	693a      	ldr	r2, [r7, #16]
   26592:	68fb      	ldr	r3, [r7, #12]
   26594:	1ad3      	subs	r3, r2, r3
   26596:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   26598:	2316      	movs	r3, #22
   2659a:	18fb      	adds	r3, r7, r3
   2659c:	881a      	ldrh	r2, [r3, #0]
   2659e:	2316      	movs	r3, #22
   265a0:	18fb      	adds	r3, r7, r3
   265a2:	3201      	adds	r2, #1
   265a4:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   265a6:	693a      	ldr	r2, [r7, #16]
   265a8:	68fb      	ldr	r3, [r7, #12]
   265aa:	429a      	cmp	r2, r3
   265ac:	d2f0      	bcs.n	26590 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   265ae:	2316      	movs	r3, #22
   265b0:	18fb      	adds	r3, r7, r3
   265b2:	2216      	movs	r2, #22
   265b4:	18ba      	adds	r2, r7, r2
   265b6:	8812      	ldrh	r2, [r2, #0]
   265b8:	3a01      	subs	r2, #1
   265ba:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   265bc:	2316      	movs	r3, #22
   265be:	18fb      	adds	r3, r7, r3
   265c0:	881b      	ldrh	r3, [r3, #0]
   265c2:	2bff      	cmp	r3, #255	; 0xff
   265c4:	d901      	bls.n	265ca <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   265c6:	2340      	movs	r3, #64	; 0x40
   265c8:	e005      	b.n	265d6 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   265ca:	687b      	ldr	r3, [r7, #4]
   265cc:	2216      	movs	r2, #22
   265ce:	18ba      	adds	r2, r7, r2
   265d0:	8812      	ldrh	r2, [r2, #0]
   265d2:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   265d4:	2300      	movs	r3, #0
	}
}
   265d6:	0018      	movs	r0, r3
   265d8:	46bd      	mov	sp, r7
   265da:	b006      	add	sp, #24
   265dc:	bd80      	pop	{r7, pc}
	...

000265e0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   265e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   265e2:	b0a1      	sub	sp, #132	; 0x84
   265e4:	af00      	add	r7, sp, #0
   265e6:	64f8      	str	r0, [r7, #76]	; 0x4c
   265e8:	64b9      	str	r1, [r7, #72]	; 0x48
   265ea:	647a      	str	r2, [r7, #68]	; 0x44
   265ec:	2243      	movs	r2, #67	; 0x43
   265ee:	18ba      	adds	r2, r7, r2
   265f0:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   265f2:	2300      	movs	r3, #0
   265f4:	2400      	movs	r4, #0
   265f6:	673b      	str	r3, [r7, #112]	; 0x70
   265f8:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   265fa:	2300      	movs	r3, #0
   265fc:	2400      	movs	r4, #0
   265fe:	66bb      	str	r3, [r7, #104]	; 0x68
   26600:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   26602:	2300      	movs	r3, #0
   26604:	2400      	movs	r4, #0
   26606:	67bb      	str	r3, [r7, #120]	; 0x78
   26608:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   2660a:	2300      	movs	r3, #0
   2660c:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   2660e:	2358      	movs	r3, #88	; 0x58
   26610:	2240      	movs	r2, #64	; 0x40
   26612:	4694      	mov	ip, r2
   26614:	44bc      	add	ip, r7
   26616:	4463      	add	r3, ip
   26618:	781a      	ldrb	r2, [r3, #0]
   2661a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2661c:	435a      	muls	r2, r3
   2661e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26620:	429a      	cmp	r2, r3
   26622:	d901      	bls.n	26628 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26624:	2340      	movs	r3, #64	; 0x40
   26626:	e0b3      	b.n	26790 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   26628:	2343      	movs	r3, #67	; 0x43
   2662a:	18fb      	adds	r3, r7, r3
   2662c:	781b      	ldrb	r3, [r3, #0]
   2662e:	2b00      	cmp	r3, #0
   26630:	d13d      	bne.n	266ae <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   26632:	2358      	movs	r3, #88	; 0x58
   26634:	2240      	movs	r2, #64	; 0x40
   26636:	4694      	mov	ip, r2
   26638:	44bc      	add	ip, r7
   2663a:	4463      	add	r3, ip
   2663c:	781b      	ldrb	r3, [r3, #0]
   2663e:	b2db      	uxtb	r3, r3
   26640:	613b      	str	r3, [r7, #16]
   26642:	2300      	movs	r3, #0
   26644:	617b      	str	r3, [r7, #20]
   26646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   26648:	60bb      	str	r3, [r7, #8]
   2664a:	2300      	movs	r3, #0
   2664c:	60fb      	str	r3, [r7, #12]
   2664e:	4c52      	ldr	r4, [pc, #328]	; (26798 <_sercom_get_async_baud_val+0x1b8>)
   26650:	68ba      	ldr	r2, [r7, #8]
   26652:	68fb      	ldr	r3, [r7, #12]
   26654:	6938      	ldr	r0, [r7, #16]
   26656:	6979      	ldr	r1, [r7, #20]
   26658:	47a0      	blx	r4
   2665a:	0003      	movs	r3, r0
   2665c:	000c      	movs	r4, r1
   2665e:	001b      	movs	r3, r3
   26660:	65fb      	str	r3, [r7, #92]	; 0x5c
   26662:	2300      	movs	r3, #0
   26664:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   26666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26668:	603b      	str	r3, [r7, #0]
   2666a:	2300      	movs	r3, #0
   2666c:	607b      	str	r3, [r7, #4]
   2666e:	6db8      	ldr	r0, [r7, #88]	; 0x58
   26670:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   26672:	683a      	ldr	r2, [r7, #0]
   26674:	687b      	ldr	r3, [r7, #4]
   26676:	4c49      	ldr	r4, [pc, #292]	; (2679c <_sercom_get_async_baud_val+0x1bc>)
   26678:	47a0      	blx	r4
   2667a:	0003      	movs	r3, r0
   2667c:	000c      	movs	r4, r1
   2667e:	673b      	str	r3, [r7, #112]	; 0x70
   26680:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   26682:	2100      	movs	r1, #0
   26684:	2201      	movs	r2, #1
   26686:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   26688:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   2668a:	1ac9      	subs	r1, r1, r3
   2668c:	41a2      	sbcs	r2, r4
   2668e:	000b      	movs	r3, r1
   26690:	0014      	movs	r4, r2
   26692:	66bb      	str	r3, [r7, #104]	; 0x68
   26694:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   26696:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26698:	0c1b      	lsrs	r3, r3, #16
   2669a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   2669c:	0416      	lsls	r6, r2, #16
   2669e:	431e      	orrs	r6, r3
   266a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   266a2:	041d      	lsls	r5, r3, #16
   266a4:	0033      	movs	r3, r6
   266a6:	67bb      	str	r3, [r7, #120]	; 0x78
   266a8:	2300      	movs	r3, #0
   266aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   266ac:	e06a      	b.n	26784 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   266ae:	2343      	movs	r3, #67	; 0x43
   266b0:	18fb      	adds	r3, r7, r3
   266b2:	781b      	ldrb	r3, [r3, #0]
   266b4:	2b01      	cmp	r3, #1
   266b6:	d165      	bne.n	26784 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   266b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   266ba:	633b      	str	r3, [r7, #48]	; 0x30
   266bc:	2300      	movs	r3, #0
   266be:	637b      	str	r3, [r7, #52]	; 0x34
   266c0:	2358      	movs	r3, #88	; 0x58
   266c2:	2240      	movs	r2, #64	; 0x40
   266c4:	4694      	mov	ip, r2
   266c6:	44bc      	add	ip, r7
   266c8:	4463      	add	r3, ip
   266ca:	781b      	ldrb	r3, [r3, #0]
   266cc:	b2db      	uxtb	r3, r3
   266ce:	62bb      	str	r3, [r7, #40]	; 0x28
   266d0:	2300      	movs	r3, #0
   266d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   266d4:	4c30      	ldr	r4, [pc, #192]	; (26798 <_sercom_get_async_baud_val+0x1b8>)
   266d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   266d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   266da:	6b38      	ldr	r0, [r7, #48]	; 0x30
   266dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
   266de:	47a0      	blx	r4
   266e0:	0003      	movs	r3, r0
   266e2:	000c      	movs	r4, r1
   266e4:	65bb      	str	r3, [r7, #88]	; 0x58
   266e6:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   266e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   266ea:	623b      	str	r3, [r7, #32]
   266ec:	2300      	movs	r3, #0
   266ee:	627b      	str	r3, [r7, #36]	; 0x24
   266f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   266f2:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   266f4:	001a      	movs	r2, r3
   266f6:	0023      	movs	r3, r4
   266f8:	6a38      	ldr	r0, [r7, #32]
   266fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
   266fc:	4c27      	ldr	r4, [pc, #156]	; (2679c <_sercom_get_async_baud_val+0x1bc>)
   266fe:	47a0      	blx	r4
   26700:	0003      	movs	r3, r0
   26702:	000c      	movs	r4, r1
   26704:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   26706:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   26708:	2380      	movs	r3, #128	; 0x80
   2670a:	019b      	lsls	r3, r3, #6
   2670c:	429a      	cmp	r2, r3
   2670e:	d901      	bls.n	26714 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26710:	2340      	movs	r3, #64	; 0x40
   26712:	e03d      	b.n	26790 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   26714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26716:	61bb      	str	r3, [r7, #24]
   26718:	2300      	movs	r3, #0
   2671a:	61fb      	str	r3, [r7, #28]
   2671c:	69b9      	ldr	r1, [r7, #24]
   2671e:	69fa      	ldr	r2, [r7, #28]
   26720:	000b      	movs	r3, r1
   26722:	0f5b      	lsrs	r3, r3, #29
   26724:	0010      	movs	r0, r2
   26726:	00c0      	lsls	r0, r0, #3
   26728:	63f8      	str	r0, [r7, #60]	; 0x3c
   2672a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   2672c:	4318      	orrs	r0, r3
   2672e:	63f8      	str	r0, [r7, #60]	; 0x3c
   26730:	000b      	movs	r3, r1
   26732:	00db      	lsls	r3, r3, #3
   26734:	63bb      	str	r3, [r7, #56]	; 0x38
   26736:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26738:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   2673a:	001a      	movs	r2, r3
   2673c:	0023      	movs	r3, r4
   2673e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   26740:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   26742:	4c16      	ldr	r4, [pc, #88]	; (2679c <_sercom_get_async_baud_val+0x1bc>)
   26744:	47a0      	blx	r4
   26746:	0003      	movs	r3, r0
   26748:	000c      	movs	r4, r1
   2674a:	65bb      	str	r3, [r7, #88]	; 0x58
   2674c:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   2674e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26750:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   26752:	b2d9      	uxtb	r1, r3
   26754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   26756:	b2db      	uxtb	r3, r3
   26758:	00db      	lsls	r3, r3, #3
   2675a:	b2da      	uxtb	r2, r3
   2675c:	2317      	movs	r3, #23
   2675e:	2040      	movs	r0, #64	; 0x40
   26760:	4684      	mov	ip, r0
   26762:	44bc      	add	ip, r7
   26764:	4463      	add	r3, ip
   26766:	1a8a      	subs	r2, r1, r2
   26768:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   2676a:	2317      	movs	r3, #23
   2676c:	2240      	movs	r2, #64	; 0x40
   2676e:	4694      	mov	ip, r2
   26770:	44bc      	add	ip, r7
   26772:	4463      	add	r3, ip
   26774:	781b      	ldrb	r3, [r3, #0]
   26776:	035b      	lsls	r3, r3, #13
   26778:	001a      	movs	r2, r3
   2677a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2677c:	4313      	orrs	r3, r2
   2677e:	67bb      	str	r3, [r7, #120]	; 0x78
   26780:	2300      	movs	r3, #0
   26782:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   26784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   26786:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   26788:	b29a      	uxth	r2, r3
   2678a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2678c:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   2678e:	2300      	movs	r3, #0
}
   26790:	0018      	movs	r0, r3
   26792:	46bd      	mov	sp, r7
   26794:	b021      	add	sp, #132	; 0x84
   26796:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26798:	000321fd 	.word	0x000321fd
   2679c:	00026483 	.word	0x00026483

000267a0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   267a0:	b580      	push	{r7, lr}
   267a2:	b084      	sub	sp, #16
   267a4:	af00      	add	r7, sp, #0
   267a6:	0002      	movs	r2, r0
   267a8:	1dfb      	adds	r3, r7, #7
   267aa:	701a      	strb	r2, [r3, #0]
   267ac:	1dbb      	adds	r3, r7, #6
   267ae:	1c0a      	adds	r2, r1, #0
   267b0:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   267b2:	4b1a      	ldr	r3, [pc, #104]	; (2681c <sercom_set_gclk_generator+0x7c>)
   267b4:	781b      	ldrb	r3, [r3, #0]
   267b6:	2201      	movs	r2, #1
   267b8:	4053      	eors	r3, r2
   267ba:	b2db      	uxtb	r3, r3
   267bc:	2b00      	cmp	r3, #0
   267be:	d103      	bne.n	267c8 <sercom_set_gclk_generator+0x28>
   267c0:	1dbb      	adds	r3, r7, #6
   267c2:	781b      	ldrb	r3, [r3, #0]
   267c4:	2b00      	cmp	r3, #0
   267c6:	d01b      	beq.n	26800 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   267c8:	230c      	movs	r3, #12
   267ca:	18fb      	adds	r3, r7, r3
   267cc:	0018      	movs	r0, r3
   267ce:	4b14      	ldr	r3, [pc, #80]	; (26820 <sercom_set_gclk_generator+0x80>)
   267d0:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   267d2:	230c      	movs	r3, #12
   267d4:	18fb      	adds	r3, r7, r3
   267d6:	1dfa      	adds	r2, r7, #7
   267d8:	7812      	ldrb	r2, [r2, #0]
   267da:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   267dc:	230c      	movs	r3, #12
   267de:	18fb      	adds	r3, r7, r3
   267e0:	0019      	movs	r1, r3
   267e2:	2013      	movs	r0, #19
   267e4:	4b0f      	ldr	r3, [pc, #60]	; (26824 <sercom_set_gclk_generator+0x84>)
   267e6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   267e8:	2013      	movs	r0, #19
   267ea:	4b0f      	ldr	r3, [pc, #60]	; (26828 <sercom_set_gclk_generator+0x88>)
   267ec:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   267ee:	4b0b      	ldr	r3, [pc, #44]	; (2681c <sercom_set_gclk_generator+0x7c>)
   267f0:	1dfa      	adds	r2, r7, #7
   267f2:	7812      	ldrb	r2, [r2, #0]
   267f4:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   267f6:	4b09      	ldr	r3, [pc, #36]	; (2681c <sercom_set_gclk_generator+0x7c>)
   267f8:	2201      	movs	r2, #1
   267fa:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   267fc:	2300      	movs	r3, #0
   267fe:	e008      	b.n	26812 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   26800:	4b06      	ldr	r3, [pc, #24]	; (2681c <sercom_set_gclk_generator+0x7c>)
   26802:	785b      	ldrb	r3, [r3, #1]
   26804:	1dfa      	adds	r2, r7, #7
   26806:	7812      	ldrb	r2, [r2, #0]
   26808:	429a      	cmp	r2, r3
   2680a:	d101      	bne.n	26810 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   2680c:	2300      	movs	r3, #0
   2680e:	e000      	b.n	26812 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   26810:	231d      	movs	r3, #29
}
   26812:	0018      	movs	r0, r3
   26814:	46bd      	mov	sp, r7
   26816:	b004      	add	sp, #16
   26818:	bd80      	pop	{r7, pc}
   2681a:	46c0      	nop			; (mov r8, r8)
   2681c:	20004124 	.word	0x20004124
   26820:	0002646d 	.word	0x0002646d
   26824:	00029279 	.word	0x00029279
   26828:	000292bd 	.word	0x000292bd

0002682c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   2682c:	b580      	push	{r7, lr}
   2682e:	b082      	sub	sp, #8
   26830:	af00      	add	r7, sp, #0
   26832:	6078      	str	r0, [r7, #4]
   26834:	000a      	movs	r2, r1
   26836:	1cfb      	adds	r3, r7, #3
   26838:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   2683a:	687b      	ldr	r3, [r7, #4]
   2683c:	4a4d      	ldr	r2, [pc, #308]	; (26974 <_sercom_get_default_pad+0x148>)
   2683e:	4293      	cmp	r3, r2
   26840:	d03f      	beq.n	268c2 <_sercom_get_default_pad+0x96>
   26842:	4a4c      	ldr	r2, [pc, #304]	; (26974 <_sercom_get_default_pad+0x148>)
   26844:	4293      	cmp	r3, r2
   26846:	d806      	bhi.n	26856 <_sercom_get_default_pad+0x2a>
   26848:	4a4b      	ldr	r2, [pc, #300]	; (26978 <_sercom_get_default_pad+0x14c>)
   2684a:	4293      	cmp	r3, r2
   2684c:	d00f      	beq.n	2686e <_sercom_get_default_pad+0x42>
   2684e:	4a4b      	ldr	r2, [pc, #300]	; (2697c <_sercom_get_default_pad+0x150>)
   26850:	4293      	cmp	r3, r2
   26852:	d021      	beq.n	26898 <_sercom_get_default_pad+0x6c>
   26854:	e089      	b.n	2696a <_sercom_get_default_pad+0x13e>
   26856:	4a4a      	ldr	r2, [pc, #296]	; (26980 <_sercom_get_default_pad+0x154>)
   26858:	4293      	cmp	r3, r2
   2685a:	d100      	bne.n	2685e <_sercom_get_default_pad+0x32>
   2685c:	e05b      	b.n	26916 <_sercom_get_default_pad+0xea>
   2685e:	4a49      	ldr	r2, [pc, #292]	; (26984 <_sercom_get_default_pad+0x158>)
   26860:	4293      	cmp	r3, r2
   26862:	d100      	bne.n	26866 <_sercom_get_default_pad+0x3a>
   26864:	e06c      	b.n	26940 <_sercom_get_default_pad+0x114>
   26866:	4a48      	ldr	r2, [pc, #288]	; (26988 <_sercom_get_default_pad+0x15c>)
   26868:	4293      	cmp	r3, r2
   2686a:	d03f      	beq.n	268ec <_sercom_get_default_pad+0xc0>
   2686c:	e07d      	b.n	2696a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   2686e:	1cfb      	adds	r3, r7, #3
   26870:	781b      	ldrb	r3, [r3, #0]
   26872:	2b01      	cmp	r3, #1
   26874:	d00a      	beq.n	2688c <_sercom_get_default_pad+0x60>
   26876:	dc02      	bgt.n	2687e <_sercom_get_default_pad+0x52>
   26878:	2b00      	cmp	r3, #0
   2687a:	d005      	beq.n	26888 <_sercom_get_default_pad+0x5c>
   2687c:	e075      	b.n	2696a <_sercom_get_default_pad+0x13e>
   2687e:	2b02      	cmp	r3, #2
   26880:	d006      	beq.n	26890 <_sercom_get_default_pad+0x64>
   26882:	2b03      	cmp	r3, #3
   26884:	d006      	beq.n	26894 <_sercom_get_default_pad+0x68>
   26886:	e070      	b.n	2696a <_sercom_get_default_pad+0x13e>
   26888:	4b40      	ldr	r3, [pc, #256]	; (2698c <_sercom_get_default_pad+0x160>)
   2688a:	e06f      	b.n	2696c <_sercom_get_default_pad+0x140>
   2688c:	4b40      	ldr	r3, [pc, #256]	; (26990 <_sercom_get_default_pad+0x164>)
   2688e:	e06d      	b.n	2696c <_sercom_get_default_pad+0x140>
   26890:	4b40      	ldr	r3, [pc, #256]	; (26994 <_sercom_get_default_pad+0x168>)
   26892:	e06b      	b.n	2696c <_sercom_get_default_pad+0x140>
   26894:	4b40      	ldr	r3, [pc, #256]	; (26998 <_sercom_get_default_pad+0x16c>)
   26896:	e069      	b.n	2696c <_sercom_get_default_pad+0x140>
   26898:	1cfb      	adds	r3, r7, #3
   2689a:	781b      	ldrb	r3, [r3, #0]
   2689c:	2b01      	cmp	r3, #1
   2689e:	d00a      	beq.n	268b6 <_sercom_get_default_pad+0x8a>
   268a0:	dc02      	bgt.n	268a8 <_sercom_get_default_pad+0x7c>
   268a2:	2b00      	cmp	r3, #0
   268a4:	d005      	beq.n	268b2 <_sercom_get_default_pad+0x86>
   268a6:	e060      	b.n	2696a <_sercom_get_default_pad+0x13e>
   268a8:	2b02      	cmp	r3, #2
   268aa:	d006      	beq.n	268ba <_sercom_get_default_pad+0x8e>
   268ac:	2b03      	cmp	r3, #3
   268ae:	d006      	beq.n	268be <_sercom_get_default_pad+0x92>
   268b0:	e05b      	b.n	2696a <_sercom_get_default_pad+0x13e>
   268b2:	2303      	movs	r3, #3
   268b4:	e05a      	b.n	2696c <_sercom_get_default_pad+0x140>
   268b6:	4b39      	ldr	r3, [pc, #228]	; (2699c <_sercom_get_default_pad+0x170>)
   268b8:	e058      	b.n	2696c <_sercom_get_default_pad+0x140>
   268ba:	4b39      	ldr	r3, [pc, #228]	; (269a0 <_sercom_get_default_pad+0x174>)
   268bc:	e056      	b.n	2696c <_sercom_get_default_pad+0x140>
   268be:	4b39      	ldr	r3, [pc, #228]	; (269a4 <_sercom_get_default_pad+0x178>)
   268c0:	e054      	b.n	2696c <_sercom_get_default_pad+0x140>
   268c2:	1cfb      	adds	r3, r7, #3
   268c4:	781b      	ldrb	r3, [r3, #0]
   268c6:	2b01      	cmp	r3, #1
   268c8:	d00a      	beq.n	268e0 <_sercom_get_default_pad+0xb4>
   268ca:	dc02      	bgt.n	268d2 <_sercom_get_default_pad+0xa6>
   268cc:	2b00      	cmp	r3, #0
   268ce:	d005      	beq.n	268dc <_sercom_get_default_pad+0xb0>
   268d0:	e04b      	b.n	2696a <_sercom_get_default_pad+0x13e>
   268d2:	2b02      	cmp	r3, #2
   268d4:	d006      	beq.n	268e4 <_sercom_get_default_pad+0xb8>
   268d6:	2b03      	cmp	r3, #3
   268d8:	d006      	beq.n	268e8 <_sercom_get_default_pad+0xbc>
   268da:	e046      	b.n	2696a <_sercom_get_default_pad+0x13e>
   268dc:	4b32      	ldr	r3, [pc, #200]	; (269a8 <_sercom_get_default_pad+0x17c>)
   268de:	e045      	b.n	2696c <_sercom_get_default_pad+0x140>
   268e0:	4b32      	ldr	r3, [pc, #200]	; (269ac <_sercom_get_default_pad+0x180>)
   268e2:	e043      	b.n	2696c <_sercom_get_default_pad+0x140>
   268e4:	4b32      	ldr	r3, [pc, #200]	; (269b0 <_sercom_get_default_pad+0x184>)
   268e6:	e041      	b.n	2696c <_sercom_get_default_pad+0x140>
   268e8:	4b32      	ldr	r3, [pc, #200]	; (269b4 <_sercom_get_default_pad+0x188>)
   268ea:	e03f      	b.n	2696c <_sercom_get_default_pad+0x140>
   268ec:	1cfb      	adds	r3, r7, #3
   268ee:	781b      	ldrb	r3, [r3, #0]
   268f0:	2b01      	cmp	r3, #1
   268f2:	d00a      	beq.n	2690a <_sercom_get_default_pad+0xde>
   268f4:	dc02      	bgt.n	268fc <_sercom_get_default_pad+0xd0>
   268f6:	2b00      	cmp	r3, #0
   268f8:	d005      	beq.n	26906 <_sercom_get_default_pad+0xda>
   268fa:	e036      	b.n	2696a <_sercom_get_default_pad+0x13e>
   268fc:	2b02      	cmp	r3, #2
   268fe:	d006      	beq.n	2690e <_sercom_get_default_pad+0xe2>
   26900:	2b03      	cmp	r3, #3
   26902:	d006      	beq.n	26912 <_sercom_get_default_pad+0xe6>
   26904:	e031      	b.n	2696a <_sercom_get_default_pad+0x13e>
   26906:	4b2c      	ldr	r3, [pc, #176]	; (269b8 <_sercom_get_default_pad+0x18c>)
   26908:	e030      	b.n	2696c <_sercom_get_default_pad+0x140>
   2690a:	4b2c      	ldr	r3, [pc, #176]	; (269bc <_sercom_get_default_pad+0x190>)
   2690c:	e02e      	b.n	2696c <_sercom_get_default_pad+0x140>
   2690e:	4b2c      	ldr	r3, [pc, #176]	; (269c0 <_sercom_get_default_pad+0x194>)
   26910:	e02c      	b.n	2696c <_sercom_get_default_pad+0x140>
   26912:	4b2c      	ldr	r3, [pc, #176]	; (269c4 <_sercom_get_default_pad+0x198>)
   26914:	e02a      	b.n	2696c <_sercom_get_default_pad+0x140>
   26916:	1cfb      	adds	r3, r7, #3
   26918:	781b      	ldrb	r3, [r3, #0]
   2691a:	2b01      	cmp	r3, #1
   2691c:	d00a      	beq.n	26934 <_sercom_get_default_pad+0x108>
   2691e:	dc02      	bgt.n	26926 <_sercom_get_default_pad+0xfa>
   26920:	2b00      	cmp	r3, #0
   26922:	d005      	beq.n	26930 <_sercom_get_default_pad+0x104>
   26924:	e021      	b.n	2696a <_sercom_get_default_pad+0x13e>
   26926:	2b02      	cmp	r3, #2
   26928:	d006      	beq.n	26938 <_sercom_get_default_pad+0x10c>
   2692a:	2b03      	cmp	r3, #3
   2692c:	d006      	beq.n	2693c <_sercom_get_default_pad+0x110>
   2692e:	e01c      	b.n	2696a <_sercom_get_default_pad+0x13e>
   26930:	4b25      	ldr	r3, [pc, #148]	; (269c8 <_sercom_get_default_pad+0x19c>)
   26932:	e01b      	b.n	2696c <_sercom_get_default_pad+0x140>
   26934:	4b25      	ldr	r3, [pc, #148]	; (269cc <_sercom_get_default_pad+0x1a0>)
   26936:	e019      	b.n	2696c <_sercom_get_default_pad+0x140>
   26938:	4b25      	ldr	r3, [pc, #148]	; (269d0 <_sercom_get_default_pad+0x1a4>)
   2693a:	e017      	b.n	2696c <_sercom_get_default_pad+0x140>
   2693c:	4b25      	ldr	r3, [pc, #148]	; (269d4 <_sercom_get_default_pad+0x1a8>)
   2693e:	e015      	b.n	2696c <_sercom_get_default_pad+0x140>
   26940:	1cfb      	adds	r3, r7, #3
   26942:	781b      	ldrb	r3, [r3, #0]
   26944:	2b01      	cmp	r3, #1
   26946:	d00a      	beq.n	2695e <_sercom_get_default_pad+0x132>
   26948:	dc02      	bgt.n	26950 <_sercom_get_default_pad+0x124>
   2694a:	2b00      	cmp	r3, #0
   2694c:	d005      	beq.n	2695a <_sercom_get_default_pad+0x12e>
   2694e:	e00c      	b.n	2696a <_sercom_get_default_pad+0x13e>
   26950:	2b02      	cmp	r3, #2
   26952:	d006      	beq.n	26962 <_sercom_get_default_pad+0x136>
   26954:	2b03      	cmp	r3, #3
   26956:	d006      	beq.n	26966 <_sercom_get_default_pad+0x13a>
   26958:	e007      	b.n	2696a <_sercom_get_default_pad+0x13e>
   2695a:	4b1f      	ldr	r3, [pc, #124]	; (269d8 <_sercom_get_default_pad+0x1ac>)
   2695c:	e006      	b.n	2696c <_sercom_get_default_pad+0x140>
   2695e:	4b1f      	ldr	r3, [pc, #124]	; (269dc <_sercom_get_default_pad+0x1b0>)
   26960:	e004      	b.n	2696c <_sercom_get_default_pad+0x140>
   26962:	4b1f      	ldr	r3, [pc, #124]	; (269e0 <_sercom_get_default_pad+0x1b4>)
   26964:	e002      	b.n	2696c <_sercom_get_default_pad+0x140>
   26966:	4b1f      	ldr	r3, [pc, #124]	; (269e4 <_sercom_get_default_pad+0x1b8>)
   26968:	e000      	b.n	2696c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   2696a:	2300      	movs	r3, #0
}
   2696c:	0018      	movs	r0, r3
   2696e:	46bd      	mov	sp, r7
   26970:	b002      	add	sp, #8
   26972:	bd80      	pop	{r7, pc}
   26974:	42001000 	.word	0x42001000
   26978:	42000800 	.word	0x42000800
   2697c:	42000c00 	.word	0x42000c00
   26980:	42001800 	.word	0x42001800
   26984:	42001c00 	.word	0x42001c00
   26988:	42001400 	.word	0x42001400
   2698c:	00040003 	.word	0x00040003
   26990:	00050003 	.word	0x00050003
   26994:	00060003 	.word	0x00060003
   26998:	00070003 	.word	0x00070003
   2699c:	00010003 	.word	0x00010003
   269a0:	001e0003 	.word	0x001e0003
   269a4:	001f0003 	.word	0x001f0003
   269a8:	00080003 	.word	0x00080003
   269ac:	00090003 	.word	0x00090003
   269b0:	000a0003 	.word	0x000a0003
   269b4:	000b0003 	.word	0x000b0003
   269b8:	00100003 	.word	0x00100003
   269bc:	00110003 	.word	0x00110003
   269c0:	00120003 	.word	0x00120003
   269c4:	00130003 	.word	0x00130003
   269c8:	000c0003 	.word	0x000c0003
   269cc:	000d0003 	.word	0x000d0003
   269d0:	000e0003 	.word	0x000e0003
   269d4:	000f0003 	.word	0x000f0003
   269d8:	00160003 	.word	0x00160003
   269dc:	00170003 	.word	0x00170003
   269e0:	00180003 	.word	0x00180003
   269e4:	00190003 	.word	0x00190003

000269e8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   269e8:	b590      	push	{r4, r7, lr}
   269ea:	b08b      	sub	sp, #44	; 0x2c
   269ec:	af00      	add	r7, sp, #0
   269ee:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   269f0:	230c      	movs	r3, #12
   269f2:	18fb      	adds	r3, r7, r3
   269f4:	4a0f      	ldr	r2, [pc, #60]	; (26a34 <_sercom_get_sercom_inst_index+0x4c>)
   269f6:	ca13      	ldmia	r2!, {r0, r1, r4}
   269f8:	c313      	stmia	r3!, {r0, r1, r4}
   269fa:	ca13      	ldmia	r2!, {r0, r1, r4}
   269fc:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   269fe:	2300      	movs	r3, #0
   26a00:	627b      	str	r3, [r7, #36]	; 0x24
   26a02:	e00e      	b.n	26a22 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   26a04:	230c      	movs	r3, #12
   26a06:	18fb      	adds	r3, r7, r3
   26a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   26a0a:	0092      	lsls	r2, r2, #2
   26a0c:	58d3      	ldr	r3, [r2, r3]
   26a0e:	001a      	movs	r2, r3
   26a10:	687b      	ldr	r3, [r7, #4]
   26a12:	429a      	cmp	r2, r3
   26a14:	d102      	bne.n	26a1c <_sercom_get_sercom_inst_index+0x34>
			return i;
   26a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   26a18:	b2db      	uxtb	r3, r3
   26a1a:	e006      	b.n	26a2a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   26a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   26a1e:	3301      	adds	r3, #1
   26a20:	627b      	str	r3, [r7, #36]	; 0x24
   26a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   26a24:	2b05      	cmp	r3, #5
   26a26:	d9ed      	bls.n	26a04 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   26a28:	2300      	movs	r3, #0
}
   26a2a:	0018      	movs	r0, r3
   26a2c:	46bd      	mov	sp, r7
   26a2e:	b00b      	add	sp, #44	; 0x2c
   26a30:	bd90      	pop	{r4, r7, pc}
   26a32:	46c0      	nop			; (mov r8, r8)
   26a34:	00038b90 	.word	0x00038b90

00026a38 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   26a38:	b580      	push	{r7, lr}
   26a3a:	b082      	sub	sp, #8
   26a3c:	af00      	add	r7, sp, #0
   26a3e:	0002      	movs	r2, r0
   26a40:	1dfb      	adds	r3, r7, #7
   26a42:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   26a44:	46c0      	nop			; (mov r8, r8)
   26a46:	46bd      	mov	sp, r7
   26a48:	b002      	add	sp, #8
   26a4a:	bd80      	pop	{r7, pc}

00026a4c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   26a4c:	b580      	push	{r7, lr}
   26a4e:	b084      	sub	sp, #16
   26a50:	af00      	add	r7, sp, #0
   26a52:	0002      	movs	r2, r0
   26a54:	6039      	str	r1, [r7, #0]
   26a56:	1dfb      	adds	r3, r7, #7
   26a58:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   26a5a:	4b13      	ldr	r3, [pc, #76]	; (26aa8 <_sercom_set_handler+0x5c>)
   26a5c:	781b      	ldrb	r3, [r3, #0]
   26a5e:	2201      	movs	r2, #1
   26a60:	4053      	eors	r3, r2
   26a62:	b2db      	uxtb	r3, r3
   26a64:	2b00      	cmp	r3, #0
   26a66:	d015      	beq.n	26a94 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   26a68:	2300      	movs	r3, #0
   26a6a:	60fb      	str	r3, [r7, #12]
   26a6c:	e00c      	b.n	26a88 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   26a6e:	4b0f      	ldr	r3, [pc, #60]	; (26aac <_sercom_set_handler+0x60>)
   26a70:	68fa      	ldr	r2, [r7, #12]
   26a72:	0092      	lsls	r2, r2, #2
   26a74:	490e      	ldr	r1, [pc, #56]	; (26ab0 <_sercom_set_handler+0x64>)
   26a76:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   26a78:	4b0e      	ldr	r3, [pc, #56]	; (26ab4 <_sercom_set_handler+0x68>)
   26a7a:	68fa      	ldr	r2, [r7, #12]
   26a7c:	0092      	lsls	r2, r2, #2
   26a7e:	2100      	movs	r1, #0
   26a80:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   26a82:	68fb      	ldr	r3, [r7, #12]
   26a84:	3301      	adds	r3, #1
   26a86:	60fb      	str	r3, [r7, #12]
   26a88:	68fb      	ldr	r3, [r7, #12]
   26a8a:	2b05      	cmp	r3, #5
   26a8c:	d9ef      	bls.n	26a6e <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   26a8e:	4b06      	ldr	r3, [pc, #24]	; (26aa8 <_sercom_set_handler+0x5c>)
   26a90:	2201      	movs	r2, #1
   26a92:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   26a94:	1dfb      	adds	r3, r7, #7
   26a96:	781a      	ldrb	r2, [r3, #0]
   26a98:	4b04      	ldr	r3, [pc, #16]	; (26aac <_sercom_set_handler+0x60>)
   26a9a:	0092      	lsls	r2, r2, #2
   26a9c:	6839      	ldr	r1, [r7, #0]
   26a9e:	50d1      	str	r1, [r2, r3]
}
   26aa0:	46c0      	nop			; (mov r8, r8)
   26aa2:	46bd      	mov	sp, r7
   26aa4:	b004      	add	sp, #16
   26aa6:	bd80      	pop	{r7, pc}
   26aa8:	20004126 	.word	0x20004126
   26aac:	20004128 	.word	0x20004128
   26ab0:	00026a39 	.word	0x00026a39
   26ab4:	200059b8 	.word	0x200059b8

00026ab8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   26ab8:	b590      	push	{r4, r7, lr}
   26aba:	b085      	sub	sp, #20
   26abc:	af00      	add	r7, sp, #0
   26abe:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   26ac0:	2308      	movs	r3, #8
   26ac2:	18fb      	adds	r3, r7, r3
   26ac4:	4a0b      	ldr	r2, [pc, #44]	; (26af4 <_sercom_get_interrupt_vector+0x3c>)
   26ac6:	6811      	ldr	r1, [r2, #0]
   26ac8:	6019      	str	r1, [r3, #0]
   26aca:	8892      	ldrh	r2, [r2, #4]
   26acc:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   26ace:	230f      	movs	r3, #15
   26ad0:	18fc      	adds	r4, r7, r3
   26ad2:	687b      	ldr	r3, [r7, #4]
   26ad4:	0018      	movs	r0, r3
   26ad6:	4b08      	ldr	r3, [pc, #32]	; (26af8 <_sercom_get_interrupt_vector+0x40>)
   26ad8:	4798      	blx	r3
   26ada:	0003      	movs	r3, r0
   26adc:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   26ade:	230f      	movs	r3, #15
   26ae0:	18fb      	adds	r3, r7, r3
   26ae2:	781b      	ldrb	r3, [r3, #0]
   26ae4:	2208      	movs	r2, #8
   26ae6:	18ba      	adds	r2, r7, r2
   26ae8:	5cd3      	ldrb	r3, [r2, r3]
   26aea:	b25b      	sxtb	r3, r3
}
   26aec:	0018      	movs	r0, r3
   26aee:	46bd      	mov	sp, r7
   26af0:	b005      	add	sp, #20
   26af2:	bd90      	pop	{r4, r7, pc}
   26af4:	00038ba8 	.word	0x00038ba8
   26af8:	000269e9 	.word	0x000269e9

00026afc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   26afc:	b580      	push	{r7, lr}
   26afe:	af00      	add	r7, sp, #0
   26b00:	4b03      	ldr	r3, [pc, #12]	; (26b10 <SERCOM0_Handler+0x14>)
   26b02:	681b      	ldr	r3, [r3, #0]
   26b04:	2000      	movs	r0, #0
   26b06:	4798      	blx	r3
   26b08:	46c0      	nop			; (mov r8, r8)
   26b0a:	46bd      	mov	sp, r7
   26b0c:	bd80      	pop	{r7, pc}
   26b0e:	46c0      	nop			; (mov r8, r8)
   26b10:	20004128 	.word	0x20004128

00026b14 <SERCOM1_Handler>:
   26b14:	b580      	push	{r7, lr}
   26b16:	af00      	add	r7, sp, #0
   26b18:	4b03      	ldr	r3, [pc, #12]	; (26b28 <SERCOM1_Handler+0x14>)
   26b1a:	685b      	ldr	r3, [r3, #4]
   26b1c:	2001      	movs	r0, #1
   26b1e:	4798      	blx	r3
   26b20:	46c0      	nop			; (mov r8, r8)
   26b22:	46bd      	mov	sp, r7
   26b24:	bd80      	pop	{r7, pc}
   26b26:	46c0      	nop			; (mov r8, r8)
   26b28:	20004128 	.word	0x20004128

00026b2c <SERCOM2_Handler>:
   26b2c:	b580      	push	{r7, lr}
   26b2e:	af00      	add	r7, sp, #0
   26b30:	4b03      	ldr	r3, [pc, #12]	; (26b40 <SERCOM2_Handler+0x14>)
   26b32:	689b      	ldr	r3, [r3, #8]
   26b34:	2002      	movs	r0, #2
   26b36:	4798      	blx	r3
   26b38:	46c0      	nop			; (mov r8, r8)
   26b3a:	46bd      	mov	sp, r7
   26b3c:	bd80      	pop	{r7, pc}
   26b3e:	46c0      	nop			; (mov r8, r8)
   26b40:	20004128 	.word	0x20004128

00026b44 <SERCOM3_Handler>:
   26b44:	b580      	push	{r7, lr}
   26b46:	af00      	add	r7, sp, #0
   26b48:	4b03      	ldr	r3, [pc, #12]	; (26b58 <SERCOM3_Handler+0x14>)
   26b4a:	68db      	ldr	r3, [r3, #12]
   26b4c:	2003      	movs	r0, #3
   26b4e:	4798      	blx	r3
   26b50:	46c0      	nop			; (mov r8, r8)
   26b52:	46bd      	mov	sp, r7
   26b54:	bd80      	pop	{r7, pc}
   26b56:	46c0      	nop			; (mov r8, r8)
   26b58:	20004128 	.word	0x20004128

00026b5c <SERCOM4_Handler>:
   26b5c:	b580      	push	{r7, lr}
   26b5e:	af00      	add	r7, sp, #0
   26b60:	4b03      	ldr	r3, [pc, #12]	; (26b70 <SERCOM4_Handler+0x14>)
   26b62:	691b      	ldr	r3, [r3, #16]
   26b64:	2004      	movs	r0, #4
   26b66:	4798      	blx	r3
   26b68:	46c0      	nop			; (mov r8, r8)
   26b6a:	46bd      	mov	sp, r7
   26b6c:	bd80      	pop	{r7, pc}
   26b6e:	46c0      	nop			; (mov r8, r8)
   26b70:	20004128 	.word	0x20004128

00026b74 <SERCOM5_Handler>:
   26b74:	b580      	push	{r7, lr}
   26b76:	af00      	add	r7, sp, #0
   26b78:	4b03      	ldr	r3, [pc, #12]	; (26b88 <SERCOM5_Handler+0x14>)
   26b7a:	695b      	ldr	r3, [r3, #20]
   26b7c:	2005      	movs	r0, #5
   26b7e:	4798      	blx	r3
   26b80:	46c0      	nop			; (mov r8, r8)
   26b82:	46bd      	mov	sp, r7
   26b84:	bd80      	pop	{r7, pc}
   26b86:	46c0      	nop			; (mov r8, r8)
   26b88:	20004128 	.word	0x20004128

00026b8c <system_pinmux_get_config_defaults>:
{
   26b8c:	b580      	push	{r7, lr}
   26b8e:	b082      	sub	sp, #8
   26b90:	af00      	add	r7, sp, #0
   26b92:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   26b94:	687b      	ldr	r3, [r7, #4]
   26b96:	2280      	movs	r2, #128	; 0x80
   26b98:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26b9a:	687b      	ldr	r3, [r7, #4]
   26b9c:	2200      	movs	r2, #0
   26b9e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   26ba0:	687b      	ldr	r3, [r7, #4]
   26ba2:	2201      	movs	r2, #1
   26ba4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   26ba6:	687b      	ldr	r3, [r7, #4]
   26ba8:	2200      	movs	r2, #0
   26baa:	70da      	strb	r2, [r3, #3]
}
   26bac:	46c0      	nop			; (mov r8, r8)
   26bae:	46bd      	mov	sp, r7
   26bb0:	b002      	add	sp, #8
   26bb2:	bd80      	pop	{r7, pc}

00026bb4 <system_pinmux_get_group_from_gpio_pin>:
{
   26bb4:	b580      	push	{r7, lr}
   26bb6:	b084      	sub	sp, #16
   26bb8:	af00      	add	r7, sp, #0
   26bba:	0002      	movs	r2, r0
   26bbc:	1dfb      	adds	r3, r7, #7
   26bbe:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   26bc0:	230f      	movs	r3, #15
   26bc2:	18fb      	adds	r3, r7, r3
   26bc4:	1dfa      	adds	r2, r7, #7
   26bc6:	7812      	ldrb	r2, [r2, #0]
   26bc8:	09d2      	lsrs	r2, r2, #7
   26bca:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   26bcc:	230e      	movs	r3, #14
   26bce:	18fb      	adds	r3, r7, r3
   26bd0:	1dfa      	adds	r2, r7, #7
   26bd2:	7812      	ldrb	r2, [r2, #0]
   26bd4:	0952      	lsrs	r2, r2, #5
   26bd6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   26bd8:	4b0d      	ldr	r3, [pc, #52]	; (26c10 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   26bda:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   26bdc:	230f      	movs	r3, #15
   26bde:	18fb      	adds	r3, r7, r3
   26be0:	781b      	ldrb	r3, [r3, #0]
   26be2:	2b00      	cmp	r3, #0
   26be4:	d10f      	bne.n	26c06 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   26be6:	230f      	movs	r3, #15
   26be8:	18fb      	adds	r3, r7, r3
   26bea:	781b      	ldrb	r3, [r3, #0]
   26bec:	009b      	lsls	r3, r3, #2
   26bee:	2210      	movs	r2, #16
   26bf0:	4694      	mov	ip, r2
   26bf2:	44bc      	add	ip, r7
   26bf4:	4463      	add	r3, ip
   26bf6:	3b08      	subs	r3, #8
   26bf8:	681a      	ldr	r2, [r3, #0]
   26bfa:	230e      	movs	r3, #14
   26bfc:	18fb      	adds	r3, r7, r3
   26bfe:	781b      	ldrb	r3, [r3, #0]
   26c00:	01db      	lsls	r3, r3, #7
   26c02:	18d3      	adds	r3, r2, r3
   26c04:	e000      	b.n	26c08 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   26c06:	2300      	movs	r3, #0
}
   26c08:	0018      	movs	r0, r3
   26c0a:	46bd      	mov	sp, r7
   26c0c:	b004      	add	sp, #16
   26c0e:	bd80      	pop	{r7, pc}
   26c10:	41004400 	.word	0x41004400

00026c14 <port_get_group_from_gpio_pin>:
{
   26c14:	b580      	push	{r7, lr}
   26c16:	b082      	sub	sp, #8
   26c18:	af00      	add	r7, sp, #0
   26c1a:	0002      	movs	r2, r0
   26c1c:	1dfb      	adds	r3, r7, #7
   26c1e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   26c20:	1dfb      	adds	r3, r7, #7
   26c22:	781b      	ldrb	r3, [r3, #0]
   26c24:	0018      	movs	r0, r3
   26c26:	4b03      	ldr	r3, [pc, #12]	; (26c34 <port_get_group_from_gpio_pin+0x20>)
   26c28:	4798      	blx	r3
   26c2a:	0003      	movs	r3, r0
}
   26c2c:	0018      	movs	r0, r3
   26c2e:	46bd      	mov	sp, r7
   26c30:	b002      	add	sp, #8
   26c32:	bd80      	pop	{r7, pc}
   26c34:	00026bb5 	.word	0x00026bb5

00026c38 <port_pin_set_output_level>:
{
   26c38:	b580      	push	{r7, lr}
   26c3a:	b084      	sub	sp, #16
   26c3c:	af00      	add	r7, sp, #0
   26c3e:	0002      	movs	r2, r0
   26c40:	1dfb      	adds	r3, r7, #7
   26c42:	701a      	strb	r2, [r3, #0]
   26c44:	1dbb      	adds	r3, r7, #6
   26c46:	1c0a      	adds	r2, r1, #0
   26c48:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   26c4a:	1dfb      	adds	r3, r7, #7
   26c4c:	781b      	ldrb	r3, [r3, #0]
   26c4e:	0018      	movs	r0, r3
   26c50:	4b0d      	ldr	r3, [pc, #52]	; (26c88 <port_pin_set_output_level+0x50>)
   26c52:	4798      	blx	r3
   26c54:	0003      	movs	r3, r0
   26c56:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   26c58:	1dfb      	adds	r3, r7, #7
   26c5a:	781b      	ldrb	r3, [r3, #0]
   26c5c:	221f      	movs	r2, #31
   26c5e:	4013      	ands	r3, r2
   26c60:	2201      	movs	r2, #1
   26c62:	409a      	lsls	r2, r3
   26c64:	0013      	movs	r3, r2
   26c66:	60bb      	str	r3, [r7, #8]
	if (level) {
   26c68:	1dbb      	adds	r3, r7, #6
   26c6a:	781b      	ldrb	r3, [r3, #0]
   26c6c:	2b00      	cmp	r3, #0
   26c6e:	d003      	beq.n	26c78 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   26c70:	68fb      	ldr	r3, [r7, #12]
   26c72:	68ba      	ldr	r2, [r7, #8]
   26c74:	619a      	str	r2, [r3, #24]
}
   26c76:	e002      	b.n	26c7e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   26c78:	68fb      	ldr	r3, [r7, #12]
   26c7a:	68ba      	ldr	r2, [r7, #8]
   26c7c:	615a      	str	r2, [r3, #20]
}
   26c7e:	46c0      	nop			; (mov r8, r8)
   26c80:	46bd      	mov	sp, r7
   26c82:	b004      	add	sp, #16
   26c84:	bd80      	pop	{r7, pc}
   26c86:	46c0      	nop			; (mov r8, r8)
   26c88:	00026c15 	.word	0x00026c15

00026c8c <system_gclk_chan_get_config_defaults>:
{
   26c8c:	b580      	push	{r7, lr}
   26c8e:	b082      	sub	sp, #8
   26c90:	af00      	add	r7, sp, #0
   26c92:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26c94:	687b      	ldr	r3, [r7, #4]
   26c96:	2200      	movs	r2, #0
   26c98:	701a      	strb	r2, [r3, #0]
}
   26c9a:	46c0      	nop			; (mov r8, r8)
   26c9c:	46bd      	mov	sp, r7
   26c9e:	b002      	add	sp, #8
   26ca0:	bd80      	pop	{r7, pc}
	...

00026ca4 <system_apb_clock_set_mask>:
{
   26ca4:	b580      	push	{r7, lr}
   26ca6:	b082      	sub	sp, #8
   26ca8:	af00      	add	r7, sp, #0
   26caa:	0002      	movs	r2, r0
   26cac:	6039      	str	r1, [r7, #0]
   26cae:	1dfb      	adds	r3, r7, #7
   26cb0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   26cb2:	1dfb      	adds	r3, r7, #7
   26cb4:	781b      	ldrb	r3, [r3, #0]
   26cb6:	2b01      	cmp	r3, #1
   26cb8:	d00a      	beq.n	26cd0 <system_apb_clock_set_mask+0x2c>
   26cba:	2b02      	cmp	r3, #2
   26cbc:	d00f      	beq.n	26cde <system_apb_clock_set_mask+0x3a>
   26cbe:	2b00      	cmp	r3, #0
   26cc0:	d114      	bne.n	26cec <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   26cc2:	4b0e      	ldr	r3, [pc, #56]	; (26cfc <system_apb_clock_set_mask+0x58>)
   26cc4:	4a0d      	ldr	r2, [pc, #52]	; (26cfc <system_apb_clock_set_mask+0x58>)
   26cc6:	6991      	ldr	r1, [r2, #24]
   26cc8:	683a      	ldr	r2, [r7, #0]
   26cca:	430a      	orrs	r2, r1
   26ccc:	619a      	str	r2, [r3, #24]
			break;
   26cce:	e00f      	b.n	26cf0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   26cd0:	4b0a      	ldr	r3, [pc, #40]	; (26cfc <system_apb_clock_set_mask+0x58>)
   26cd2:	4a0a      	ldr	r2, [pc, #40]	; (26cfc <system_apb_clock_set_mask+0x58>)
   26cd4:	69d1      	ldr	r1, [r2, #28]
   26cd6:	683a      	ldr	r2, [r7, #0]
   26cd8:	430a      	orrs	r2, r1
   26cda:	61da      	str	r2, [r3, #28]
			break;
   26cdc:	e008      	b.n	26cf0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   26cde:	4b07      	ldr	r3, [pc, #28]	; (26cfc <system_apb_clock_set_mask+0x58>)
   26ce0:	4a06      	ldr	r2, [pc, #24]	; (26cfc <system_apb_clock_set_mask+0x58>)
   26ce2:	6a11      	ldr	r1, [r2, #32]
   26ce4:	683a      	ldr	r2, [r7, #0]
   26ce6:	430a      	orrs	r2, r1
   26ce8:	621a      	str	r2, [r3, #32]
			break;
   26cea:	e001      	b.n	26cf0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   26cec:	2317      	movs	r3, #23
   26cee:	e000      	b.n	26cf2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   26cf0:	2300      	movs	r3, #0
}
   26cf2:	0018      	movs	r0, r3
   26cf4:	46bd      	mov	sp, r7
   26cf6:	b002      	add	sp, #8
   26cf8:	bd80      	pop	{r7, pc}
   26cfa:	46c0      	nop			; (mov r8, r8)
   26cfc:	40000400 	.word	0x40000400

00026d00 <system_is_debugger_present>:
{
   26d00:	b580      	push	{r7, lr}
   26d02:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   26d04:	4b05      	ldr	r3, [pc, #20]	; (26d1c <system_is_debugger_present+0x1c>)
   26d06:	789b      	ldrb	r3, [r3, #2]
   26d08:	b2db      	uxtb	r3, r3
   26d0a:	001a      	movs	r2, r3
   26d0c:	2302      	movs	r3, #2
   26d0e:	4013      	ands	r3, r2
   26d10:	1e5a      	subs	r2, r3, #1
   26d12:	4193      	sbcs	r3, r2
   26d14:	b2db      	uxtb	r3, r3
}
   26d16:	0018      	movs	r0, r3
   26d18:	46bd      	mov	sp, r7
   26d1a:	bd80      	pop	{r7, pc}
   26d1c:	41002000 	.word	0x41002000

00026d20 <system_interrupt_enable>:
{
   26d20:	b580      	push	{r7, lr}
   26d22:	b082      	sub	sp, #8
   26d24:	af00      	add	r7, sp, #0
   26d26:	0002      	movs	r2, r0
   26d28:	1dfb      	adds	r3, r7, #7
   26d2a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26d2c:	4b06      	ldr	r3, [pc, #24]	; (26d48 <system_interrupt_enable+0x28>)
   26d2e:	1dfa      	adds	r2, r7, #7
   26d30:	7812      	ldrb	r2, [r2, #0]
   26d32:	0011      	movs	r1, r2
   26d34:	221f      	movs	r2, #31
   26d36:	400a      	ands	r2, r1
   26d38:	2101      	movs	r1, #1
   26d3a:	4091      	lsls	r1, r2
   26d3c:	000a      	movs	r2, r1
   26d3e:	601a      	str	r2, [r3, #0]
}
   26d40:	46c0      	nop			; (mov r8, r8)
   26d42:	46bd      	mov	sp, r7
   26d44:	b002      	add	sp, #8
   26d46:	bd80      	pop	{r7, pc}
   26d48:	e000e100 	.word	0xe000e100

00026d4c <system_interrupt_disable>:
{
   26d4c:	b580      	push	{r7, lr}
   26d4e:	b082      	sub	sp, #8
   26d50:	af00      	add	r7, sp, #0
   26d52:	0002      	movs	r2, r0
   26d54:	1dfb      	adds	r3, r7, #7
   26d56:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26d58:	4a07      	ldr	r2, [pc, #28]	; (26d78 <system_interrupt_disable+0x2c>)
   26d5a:	1dfb      	adds	r3, r7, #7
   26d5c:	781b      	ldrb	r3, [r3, #0]
   26d5e:	0019      	movs	r1, r3
   26d60:	231f      	movs	r3, #31
   26d62:	400b      	ands	r3, r1
   26d64:	2101      	movs	r1, #1
   26d66:	4099      	lsls	r1, r3
   26d68:	000b      	movs	r3, r1
   26d6a:	0019      	movs	r1, r3
   26d6c:	2380      	movs	r3, #128	; 0x80
   26d6e:	50d1      	str	r1, [r2, r3]
}
   26d70:	46c0      	nop			; (mov r8, r8)
   26d72:	46bd      	mov	sp, r7
   26d74:	b002      	add	sp, #8
   26d76:	bd80      	pop	{r7, pc}
   26d78:	e000e100 	.word	0xe000e100

00026d7c <spi_is_syncing>:
{
   26d7c:	b580      	push	{r7, lr}
   26d7e:	b084      	sub	sp, #16
   26d80:	af00      	add	r7, sp, #0
   26d82:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26d84:	687b      	ldr	r3, [r7, #4]
   26d86:	681b      	ldr	r3, [r3, #0]
   26d88:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   26d8a:	68fb      	ldr	r3, [r7, #12]
   26d8c:	69db      	ldr	r3, [r3, #28]
   26d8e:	1e5a      	subs	r2, r3, #1
   26d90:	4193      	sbcs	r3, r2
   26d92:	b2db      	uxtb	r3, r3
}
   26d94:	0018      	movs	r0, r3
   26d96:	46bd      	mov	sp, r7
   26d98:	b004      	add	sp, #16
   26d9a:	bd80      	pop	{r7, pc}

00026d9c <spi_enable>:
{
   26d9c:	b580      	push	{r7, lr}
   26d9e:	b084      	sub	sp, #16
   26da0:	af00      	add	r7, sp, #0
   26da2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26da4:	687b      	ldr	r3, [r7, #4]
   26da6:	681b      	ldr	r3, [r3, #0]
   26da8:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   26daa:	687b      	ldr	r3, [r7, #4]
   26dac:	681b      	ldr	r3, [r3, #0]
   26dae:	0018      	movs	r0, r3
   26db0:	4b0b      	ldr	r3, [pc, #44]	; (26de0 <spi_enable+0x44>)
   26db2:	4798      	blx	r3
   26db4:	0003      	movs	r3, r0
   26db6:	0018      	movs	r0, r3
   26db8:	4b0a      	ldr	r3, [pc, #40]	; (26de4 <spi_enable+0x48>)
   26dba:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   26dbc:	46c0      	nop			; (mov r8, r8)
   26dbe:	687b      	ldr	r3, [r7, #4]
   26dc0:	0018      	movs	r0, r3
   26dc2:	4b09      	ldr	r3, [pc, #36]	; (26de8 <spi_enable+0x4c>)
   26dc4:	4798      	blx	r3
   26dc6:	1e03      	subs	r3, r0, #0
   26dc8:	d1f9      	bne.n	26dbe <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   26dca:	68fb      	ldr	r3, [r7, #12]
   26dcc:	681b      	ldr	r3, [r3, #0]
   26dce:	2202      	movs	r2, #2
   26dd0:	431a      	orrs	r2, r3
   26dd2:	68fb      	ldr	r3, [r7, #12]
   26dd4:	601a      	str	r2, [r3, #0]
}
   26dd6:	46c0      	nop			; (mov r8, r8)
   26dd8:	46bd      	mov	sp, r7
   26dda:	b004      	add	sp, #16
   26ddc:	bd80      	pop	{r7, pc}
   26dde:	46c0      	nop			; (mov r8, r8)
   26de0:	00026ab9 	.word	0x00026ab9
   26de4:	00026d21 	.word	0x00026d21
   26de8:	00026d7d 	.word	0x00026d7d

00026dec <spi_disable>:
{
   26dec:	b580      	push	{r7, lr}
   26dee:	b084      	sub	sp, #16
   26df0:	af00      	add	r7, sp, #0
   26df2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26df4:	687b      	ldr	r3, [r7, #4]
   26df6:	681b      	ldr	r3, [r3, #0]
   26df8:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   26dfa:	687b      	ldr	r3, [r7, #4]
   26dfc:	681b      	ldr	r3, [r3, #0]
   26dfe:	0018      	movs	r0, r3
   26e00:	4b0e      	ldr	r3, [pc, #56]	; (26e3c <spi_disable+0x50>)
   26e02:	4798      	blx	r3
   26e04:	0003      	movs	r3, r0
   26e06:	0018      	movs	r0, r3
   26e08:	4b0d      	ldr	r3, [pc, #52]	; (26e40 <spi_disable+0x54>)
   26e0a:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   26e0c:	46c0      	nop			; (mov r8, r8)
   26e0e:	687b      	ldr	r3, [r7, #4]
   26e10:	0018      	movs	r0, r3
   26e12:	4b0c      	ldr	r3, [pc, #48]	; (26e44 <spi_disable+0x58>)
   26e14:	4798      	blx	r3
   26e16:	1e03      	subs	r3, r0, #0
   26e18:	d1f9      	bne.n	26e0e <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   26e1a:	68fb      	ldr	r3, [r7, #12]
   26e1c:	228f      	movs	r2, #143	; 0x8f
   26e1e:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   26e20:	68fb      	ldr	r3, [r7, #12]
   26e22:	228f      	movs	r2, #143	; 0x8f
   26e24:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   26e26:	68fb      	ldr	r3, [r7, #12]
   26e28:	681b      	ldr	r3, [r3, #0]
   26e2a:	2202      	movs	r2, #2
   26e2c:	4393      	bics	r3, r2
   26e2e:	001a      	movs	r2, r3
   26e30:	68fb      	ldr	r3, [r7, #12]
   26e32:	601a      	str	r2, [r3, #0]
}
   26e34:	46c0      	nop			; (mov r8, r8)
   26e36:	46bd      	mov	sp, r7
   26e38:	b004      	add	sp, #16
   26e3a:	bd80      	pop	{r7, pc}
   26e3c:	00026ab9 	.word	0x00026ab9
   26e40:	00026d4d 	.word	0x00026d4d
   26e44:	00026d7d 	.word	0x00026d7d

00026e48 <spi_is_write_complete>:
{
   26e48:	b580      	push	{r7, lr}
   26e4a:	b084      	sub	sp, #16
   26e4c:	af00      	add	r7, sp, #0
   26e4e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26e50:	687b      	ldr	r3, [r7, #4]
   26e52:	681b      	ldr	r3, [r3, #0]
   26e54:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   26e56:	68fb      	ldr	r3, [r7, #12]
   26e58:	7e1b      	ldrb	r3, [r3, #24]
   26e5a:	b2db      	uxtb	r3, r3
   26e5c:	001a      	movs	r2, r3
   26e5e:	2302      	movs	r3, #2
   26e60:	4013      	ands	r3, r2
   26e62:	1e5a      	subs	r2, r3, #1
   26e64:	4193      	sbcs	r3, r2
   26e66:	b2db      	uxtb	r3, r3
}
   26e68:	0018      	movs	r0, r3
   26e6a:	46bd      	mov	sp, r7
   26e6c:	b004      	add	sp, #16
   26e6e:	bd80      	pop	{r7, pc}

00026e70 <spi_is_ready_to_write>:
{
   26e70:	b580      	push	{r7, lr}
   26e72:	b084      	sub	sp, #16
   26e74:	af00      	add	r7, sp, #0
   26e76:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26e78:	687b      	ldr	r3, [r7, #4]
   26e7a:	681b      	ldr	r3, [r3, #0]
   26e7c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   26e7e:	68fb      	ldr	r3, [r7, #12]
   26e80:	7e1b      	ldrb	r3, [r3, #24]
   26e82:	b2db      	uxtb	r3, r3
   26e84:	001a      	movs	r2, r3
   26e86:	2301      	movs	r3, #1
   26e88:	4013      	ands	r3, r2
   26e8a:	1e5a      	subs	r2, r3, #1
   26e8c:	4193      	sbcs	r3, r2
   26e8e:	b2db      	uxtb	r3, r3
}
   26e90:	0018      	movs	r0, r3
   26e92:	46bd      	mov	sp, r7
   26e94:	b004      	add	sp, #16
   26e96:	bd80      	pop	{r7, pc}

00026e98 <spi_is_ready_to_read>:
{
   26e98:	b580      	push	{r7, lr}
   26e9a:	b084      	sub	sp, #16
   26e9c:	af00      	add	r7, sp, #0
   26e9e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26ea0:	687b      	ldr	r3, [r7, #4]
   26ea2:	681b      	ldr	r3, [r3, #0]
   26ea4:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   26ea6:	68fb      	ldr	r3, [r7, #12]
   26ea8:	7e1b      	ldrb	r3, [r3, #24]
   26eaa:	b2db      	uxtb	r3, r3
   26eac:	001a      	movs	r2, r3
   26eae:	2304      	movs	r3, #4
   26eb0:	4013      	ands	r3, r2
   26eb2:	1e5a      	subs	r2, r3, #1
   26eb4:	4193      	sbcs	r3, r2
   26eb6:	b2db      	uxtb	r3, r3
}
   26eb8:	0018      	movs	r0, r3
   26eba:	46bd      	mov	sp, r7
   26ebc:	b004      	add	sp, #16
   26ebe:	bd80      	pop	{r7, pc}

00026ec0 <spi_write>:
{
   26ec0:	b580      	push	{r7, lr}
   26ec2:	b084      	sub	sp, #16
   26ec4:	af00      	add	r7, sp, #0
   26ec6:	6078      	str	r0, [r7, #4]
   26ec8:	000a      	movs	r2, r1
   26eca:	1cbb      	adds	r3, r7, #2
   26ecc:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26ece:	687b      	ldr	r3, [r7, #4]
   26ed0:	681b      	ldr	r3, [r3, #0]
   26ed2:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   26ed4:	687b      	ldr	r3, [r7, #4]
   26ed6:	0018      	movs	r0, r3
   26ed8:	4b0a      	ldr	r3, [pc, #40]	; (26f04 <spi_write+0x44>)
   26eda:	4798      	blx	r3
   26edc:	0003      	movs	r3, r0
   26ede:	001a      	movs	r2, r3
   26ee0:	2301      	movs	r3, #1
   26ee2:	4053      	eors	r3, r2
   26ee4:	b2db      	uxtb	r3, r3
   26ee6:	2b00      	cmp	r3, #0
   26ee8:	d001      	beq.n	26eee <spi_write+0x2e>
		return STATUS_BUSY;
   26eea:	2305      	movs	r3, #5
   26eec:	e006      	b.n	26efc <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   26eee:	1cbb      	adds	r3, r7, #2
   26ef0:	881b      	ldrh	r3, [r3, #0]
   26ef2:	05db      	lsls	r3, r3, #23
   26ef4:	0dda      	lsrs	r2, r3, #23
   26ef6:	68fb      	ldr	r3, [r7, #12]
   26ef8:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   26efa:	2300      	movs	r3, #0
}
   26efc:	0018      	movs	r0, r3
   26efe:	46bd      	mov	sp, r7
   26f00:	b004      	add	sp, #16
   26f02:	bd80      	pop	{r7, pc}
   26f04:	00026e71 	.word	0x00026e71

00026f08 <spi_read>:
{
   26f08:	b580      	push	{r7, lr}
   26f0a:	b084      	sub	sp, #16
   26f0c:	af00      	add	r7, sp, #0
   26f0e:	6078      	str	r0, [r7, #4]
   26f10:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26f12:	687b      	ldr	r3, [r7, #4]
   26f14:	681b      	ldr	r3, [r3, #0]
   26f16:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   26f18:	687b      	ldr	r3, [r7, #4]
   26f1a:	0018      	movs	r0, r3
   26f1c:	4b1b      	ldr	r3, [pc, #108]	; (26f8c <spi_read+0x84>)
   26f1e:	4798      	blx	r3
   26f20:	0003      	movs	r3, r0
   26f22:	001a      	movs	r2, r3
   26f24:	2301      	movs	r3, #1
   26f26:	4053      	eors	r3, r2
   26f28:	b2db      	uxtb	r3, r3
   26f2a:	2b00      	cmp	r3, #0
   26f2c:	d001      	beq.n	26f32 <spi_read+0x2a>
		return STATUS_ERR_IO;
   26f2e:	2310      	movs	r3, #16
   26f30:	e027      	b.n	26f82 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   26f32:	230f      	movs	r3, #15
   26f34:	18fb      	adds	r3, r7, r3
   26f36:	2200      	movs	r2, #0
   26f38:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   26f3a:	68bb      	ldr	r3, [r7, #8]
   26f3c:	8b5b      	ldrh	r3, [r3, #26]
   26f3e:	b29b      	uxth	r3, r3
   26f40:	001a      	movs	r2, r3
   26f42:	2304      	movs	r3, #4
   26f44:	4013      	ands	r3, r2
   26f46:	d006      	beq.n	26f56 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   26f48:	230f      	movs	r3, #15
   26f4a:	18fb      	adds	r3, r7, r3
   26f4c:	221e      	movs	r2, #30
   26f4e:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   26f50:	68bb      	ldr	r3, [r7, #8]
   26f52:	2204      	movs	r2, #4
   26f54:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   26f56:	687b      	ldr	r3, [r7, #4]
   26f58:	799b      	ldrb	r3, [r3, #6]
   26f5a:	2b01      	cmp	r3, #1
   26f5c:	d108      	bne.n	26f70 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   26f5e:	68bb      	ldr	r3, [r7, #8]
   26f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26f62:	b29b      	uxth	r3, r3
   26f64:	05db      	lsls	r3, r3, #23
   26f66:	0ddb      	lsrs	r3, r3, #23
   26f68:	b29a      	uxth	r2, r3
   26f6a:	683b      	ldr	r3, [r7, #0]
   26f6c:	801a      	strh	r2, [r3, #0]
   26f6e:	e005      	b.n	26f7c <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   26f70:	68bb      	ldr	r3, [r7, #8]
   26f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26f74:	b2db      	uxtb	r3, r3
   26f76:	b29a      	uxth	r2, r3
   26f78:	683b      	ldr	r3, [r7, #0]
   26f7a:	801a      	strh	r2, [r3, #0]
	return retval;
   26f7c:	230f      	movs	r3, #15
   26f7e:	18fb      	adds	r3, r7, r3
   26f80:	781b      	ldrb	r3, [r3, #0]
}
   26f82:	0018      	movs	r0, r3
   26f84:	46bd      	mov	sp, r7
   26f86:	b004      	add	sp, #16
   26f88:	bd80      	pop	{r7, pc}
   26f8a:	46c0      	nop			; (mov r8, r8)
   26f8c:	00026e99 	.word	0x00026e99

00026f90 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   26f90:	b590      	push	{r4, r7, lr}
   26f92:	b089      	sub	sp, #36	; 0x24
   26f94:	af00      	add	r7, sp, #0
   26f96:	6078      	str	r0, [r7, #4]
   26f98:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   26f9a:	230c      	movs	r3, #12
   26f9c:	18fb      	adds	r3, r7, r3
   26f9e:	2200      	movs	r2, #0
   26fa0:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   26fa2:	687b      	ldr	r3, [r7, #4]
   26fa4:	681b      	ldr	r3, [r3, #0]
   26fa6:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   26fa8:	687b      	ldr	r3, [r7, #4]
   26faa:	0018      	movs	r0, r3
   26fac:	4b24      	ldr	r3, [pc, #144]	; (27040 <spi_set_baudrate+0xb0>)
   26fae:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   26fb0:	46c0      	nop			; (mov r8, r8)
   26fb2:	687b      	ldr	r3, [r7, #4]
   26fb4:	0018      	movs	r0, r3
   26fb6:	4b23      	ldr	r3, [pc, #140]	; (27044 <spi_set_baudrate+0xb4>)
   26fb8:	4798      	blx	r3
   26fba:	1e03      	subs	r3, r0, #0
   26fbc:	d1f9      	bne.n	26fb2 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   26fbe:	687b      	ldr	r3, [r7, #4]
   26fc0:	681b      	ldr	r3, [r3, #0]
   26fc2:	0018      	movs	r0, r3
   26fc4:	4b20      	ldr	r3, [pc, #128]	; (27048 <spi_set_baudrate+0xb8>)
   26fc6:	4798      	blx	r3
   26fc8:	0003      	movs	r3, r0
   26fca:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   26fcc:	69bb      	ldr	r3, [r7, #24]
   26fce:	3314      	adds	r3, #20
   26fd0:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   26fd2:	697b      	ldr	r3, [r7, #20]
   26fd4:	b2db      	uxtb	r3, r3
   26fd6:	0018      	movs	r0, r3
   26fd8:	4b1c      	ldr	r3, [pc, #112]	; (2704c <spi_set_baudrate+0xbc>)
   26fda:	4798      	blx	r3
   26fdc:	0003      	movs	r3, r0
   26fde:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   26fe0:	230f      	movs	r3, #15
   26fe2:	18fc      	adds	r4, r7, r3
   26fe4:	230c      	movs	r3, #12
   26fe6:	18fa      	adds	r2, r7, r3
   26fe8:	6939      	ldr	r1, [r7, #16]
   26fea:	683b      	ldr	r3, [r7, #0]
   26fec:	0018      	movs	r0, r3
   26fee:	4b18      	ldr	r3, [pc, #96]	; (27050 <spi_set_baudrate+0xc0>)
   26ff0:	4798      	blx	r3
   26ff2:	0003      	movs	r3, r0
   26ff4:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   26ff6:	230f      	movs	r3, #15
   26ff8:	18fb      	adds	r3, r7, r3
   26ffa:	781b      	ldrb	r3, [r3, #0]
   26ffc:	2b00      	cmp	r3, #0
   26ffe:	d001      	beq.n	27004 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   27000:	2317      	movs	r3, #23
   27002:	e018      	b.n	27036 <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   27004:	230c      	movs	r3, #12
   27006:	18fb      	adds	r3, r7, r3
   27008:	881b      	ldrh	r3, [r3, #0]
   2700a:	b2da      	uxtb	r2, r3
   2700c:	69fb      	ldr	r3, [r7, #28]
   2700e:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   27010:	46c0      	nop			; (mov r8, r8)
   27012:	687b      	ldr	r3, [r7, #4]
   27014:	0018      	movs	r0, r3
   27016:	4b0b      	ldr	r3, [pc, #44]	; (27044 <spi_set_baudrate+0xb4>)
   27018:	4798      	blx	r3
   2701a:	1e03      	subs	r3, r0, #0
   2701c:	d1f9      	bne.n	27012 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   2701e:	687b      	ldr	r3, [r7, #4]
   27020:	0018      	movs	r0, r3
   27022:	4b0c      	ldr	r3, [pc, #48]	; (27054 <spi_set_baudrate+0xc4>)
   27024:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   27026:	46c0      	nop			; (mov r8, r8)
   27028:	687b      	ldr	r3, [r7, #4]
   2702a:	0018      	movs	r0, r3
   2702c:	4b05      	ldr	r3, [pc, #20]	; (27044 <spi_set_baudrate+0xb4>)
   2702e:	4798      	blx	r3
   27030:	1e03      	subs	r3, r0, #0
   27032:	d1f9      	bne.n	27028 <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   27034:	2300      	movs	r3, #0
}
   27036:	0018      	movs	r0, r3
   27038:	46bd      	mov	sp, r7
   2703a:	b009      	add	sp, #36	; 0x24
   2703c:	bd90      	pop	{r4, r7, pc}
   2703e:	46c0      	nop			; (mov r8, r8)
   27040:	00026ded 	.word	0x00026ded
   27044:	00026d7d 	.word	0x00026d7d
   27048:	000269e9 	.word	0x000269e9
   2704c:	0002939d 	.word	0x0002939d
   27050:	00026563 	.word	0x00026563
   27054:	00026d9d 	.word	0x00026d9d

00027058 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   27058:	b590      	push	{r4, r7, lr}
   2705a:	b093      	sub	sp, #76	; 0x4c
   2705c:	af00      	add	r7, sp, #0
   2705e:	6078      	str	r0, [r7, #4]
   27060:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   27062:	687b      	ldr	r3, [r7, #4]
   27064:	681b      	ldr	r3, [r3, #0]
   27066:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   27068:	687b      	ldr	r3, [r7, #4]
   2706a:	681b      	ldr	r3, [r3, #0]
   2706c:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   2706e:	231c      	movs	r3, #28
   27070:	18fb      	adds	r3, r7, r3
   27072:	0018      	movs	r0, r3
   27074:	4b75      	ldr	r3, [pc, #468]	; (2724c <_spi_set_config+0x1f4>)
   27076:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27078:	231c      	movs	r3, #28
   2707a:	18fb      	adds	r3, r7, r3
   2707c:	2200      	movs	r2, #0
   2707e:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   27080:	683b      	ldr	r3, [r7, #0]
   27082:	781b      	ldrb	r3, [r3, #0]
   27084:	2b00      	cmp	r3, #0
   27086:	d103      	bne.n	27090 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   27088:	231c      	movs	r3, #28
   2708a:	18fb      	adds	r3, r7, r3
   2708c:	2200      	movs	r2, #0
   2708e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   27090:	683b      	ldr	r3, [r7, #0]
   27092:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   27094:	230c      	movs	r3, #12
   27096:	18fb      	adds	r3, r7, r3
   27098:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2709a:	683b      	ldr	r3, [r7, #0]
   2709c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   2709e:	230c      	movs	r3, #12
   270a0:	18fb      	adds	r3, r7, r3
   270a2:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   270a4:	683b      	ldr	r3, [r7, #0]
   270a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   270a8:	230c      	movs	r3, #12
   270aa:	18fb      	adds	r3, r7, r3
   270ac:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   270ae:	683b      	ldr	r3, [r7, #0]
   270b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   270b2:	230c      	movs	r3, #12
   270b4:	18fb      	adds	r3, r7, r3
   270b6:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   270b8:	2347      	movs	r3, #71	; 0x47
   270ba:	18fb      	adds	r3, r7, r3
   270bc:	2200      	movs	r2, #0
   270be:	701a      	strb	r2, [r3, #0]
   270c0:	e02c      	b.n	2711c <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   270c2:	2347      	movs	r3, #71	; 0x47
   270c4:	18fb      	adds	r3, r7, r3
   270c6:	781a      	ldrb	r2, [r3, #0]
   270c8:	230c      	movs	r3, #12
   270ca:	18fb      	adds	r3, r7, r3
   270cc:	0092      	lsls	r2, r2, #2
   270ce:	58d3      	ldr	r3, [r2, r3]
   270d0:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   270d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   270d4:	2b00      	cmp	r3, #0
   270d6:	d109      	bne.n	270ec <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   270d8:	2347      	movs	r3, #71	; 0x47
   270da:	18fb      	adds	r3, r7, r3
   270dc:	781a      	ldrb	r2, [r3, #0]
   270de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   270e0:	0011      	movs	r1, r2
   270e2:	0018      	movs	r0, r3
   270e4:	4b5a      	ldr	r3, [pc, #360]	; (27250 <_spi_set_config+0x1f8>)
   270e6:	4798      	blx	r3
   270e8:	0003      	movs	r3, r0
   270ea:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   270ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   270ee:	3301      	adds	r3, #1
   270f0:	d00d      	beq.n	2710e <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   270f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   270f4:	b2da      	uxtb	r2, r3
   270f6:	231c      	movs	r3, #28
   270f8:	18fb      	adds	r3, r7, r3
   270fa:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   270fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   270fe:	0c1b      	lsrs	r3, r3, #16
   27100:	b2db      	uxtb	r3, r3
   27102:	221c      	movs	r2, #28
   27104:	18ba      	adds	r2, r7, r2
   27106:	0011      	movs	r1, r2
   27108:	0018      	movs	r0, r3
   2710a:	4b52      	ldr	r3, [pc, #328]	; (27254 <_spi_set_config+0x1fc>)
   2710c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   2710e:	2347      	movs	r3, #71	; 0x47
   27110:	18fb      	adds	r3, r7, r3
   27112:	781a      	ldrb	r2, [r3, #0]
   27114:	2347      	movs	r3, #71	; 0x47
   27116:	18fb      	adds	r3, r7, r3
   27118:	3201      	adds	r2, #1
   2711a:	701a      	strb	r2, [r3, #0]
   2711c:	2347      	movs	r3, #71	; 0x47
   2711e:	18fb      	adds	r3, r7, r3
   27120:	781b      	ldrb	r3, [r3, #0]
   27122:	2b03      	cmp	r3, #3
   27124:	d9cd      	bls.n	270c2 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   27126:	683b      	ldr	r3, [r7, #0]
   27128:	781a      	ldrb	r2, [r3, #0]
   2712a:	687b      	ldr	r3, [r7, #4]
   2712c:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   2712e:	683b      	ldr	r3, [r7, #0]
   27130:	7c1a      	ldrb	r2, [r3, #16]
   27132:	687b      	ldr	r3, [r7, #4]
   27134:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   27136:	683b      	ldr	r3, [r7, #0]
   27138:	7c9a      	ldrb	r2, [r3, #18]
   2713a:	687b      	ldr	r3, [r7, #4]
   2713c:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   2713e:	683b      	ldr	r3, [r7, #0]
   27140:	7d1a      	ldrb	r2, [r3, #20]
   27142:	687b      	ldr	r3, [r7, #4]
   27144:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   27146:	230a      	movs	r3, #10
   27148:	18fb      	adds	r3, r7, r3
   2714a:	2200      	movs	r2, #0
   2714c:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   2714e:	2300      	movs	r3, #0
   27150:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   27152:	2300      	movs	r3, #0
   27154:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   27156:	683b      	ldr	r3, [r7, #0]
   27158:	781b      	ldrb	r3, [r3, #0]
   2715a:	2b01      	cmp	r3, #1
   2715c:	d129      	bne.n	271b2 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2715e:	687b      	ldr	r3, [r7, #4]
   27160:	681b      	ldr	r3, [r3, #0]
   27162:	0018      	movs	r0, r3
   27164:	4b3c      	ldr	r3, [pc, #240]	; (27258 <_spi_set_config+0x200>)
   27166:	4798      	blx	r3
   27168:	0003      	movs	r3, r0
   2716a:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2716c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2716e:	3314      	adds	r3, #20
   27170:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   27172:	6abb      	ldr	r3, [r7, #40]	; 0x28
   27174:	b2db      	uxtb	r3, r3
   27176:	0018      	movs	r0, r3
   27178:	4b38      	ldr	r3, [pc, #224]	; (2725c <_spi_set_config+0x204>)
   2717a:	4798      	blx	r3
   2717c:	0003      	movs	r3, r0
   2717e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   27180:	683b      	ldr	r3, [r7, #0]
   27182:	699b      	ldr	r3, [r3, #24]
   27184:	2223      	movs	r2, #35	; 0x23
   27186:	18bc      	adds	r4, r7, r2
   27188:	220a      	movs	r2, #10
   2718a:	18ba      	adds	r2, r7, r2
   2718c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2718e:	0018      	movs	r0, r3
   27190:	4b33      	ldr	r3, [pc, #204]	; (27260 <_spi_set_config+0x208>)
   27192:	4798      	blx	r3
   27194:	0003      	movs	r3, r0
   27196:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   27198:	2323      	movs	r3, #35	; 0x23
   2719a:	18fb      	adds	r3, r7, r3
   2719c:	781b      	ldrb	r3, [r3, #0]
   2719e:	2b00      	cmp	r3, #0
   271a0:	d001      	beq.n	271a6 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   271a2:	2317      	movs	r3, #23
   271a4:	e04e      	b.n	27244 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   271a6:	230a      	movs	r3, #10
   271a8:	18fb      	adds	r3, r7, r3
   271aa:	881b      	ldrh	r3, [r3, #0]
   271ac:	b2da      	uxtb	r2, r3
   271ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   271b0:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   271b2:	683b      	ldr	r3, [r7, #0]
   271b4:	685b      	ldr	r3, [r3, #4]
   271b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   271b8:	4313      	orrs	r3, r2
   271ba:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   271bc:	683b      	ldr	r3, [r7, #0]
   271be:	689b      	ldr	r3, [r3, #8]
   271c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   271c2:	4313      	orrs	r3, r2
   271c4:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   271c6:	683b      	ldr	r3, [r7, #0]
   271c8:	68db      	ldr	r3, [r3, #12]
   271ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   271cc:	4313      	orrs	r3, r2
   271ce:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   271d0:	683b      	ldr	r3, [r7, #0]
   271d2:	7c1b      	ldrb	r3, [r3, #16]
   271d4:	001a      	movs	r2, r3
   271d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   271d8:	4313      	orrs	r3, r2
   271da:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   271dc:	683b      	ldr	r3, [r7, #0]
   271de:	7c5b      	ldrb	r3, [r3, #17]
   271e0:	2b00      	cmp	r3, #0
   271e2:	d103      	bne.n	271ec <_spi_set_config+0x194>
   271e4:	4b1f      	ldr	r3, [pc, #124]	; (27264 <_spi_set_config+0x20c>)
   271e6:	4798      	blx	r3
   271e8:	1e03      	subs	r3, r0, #0
   271ea:	d003      	beq.n	271f4 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   271ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   271ee:	2280      	movs	r2, #128	; 0x80
   271f0:	4313      	orrs	r3, r2
   271f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   271f4:	683b      	ldr	r3, [r7, #0]
   271f6:	7c9b      	ldrb	r3, [r3, #18]
   271f8:	2b00      	cmp	r3, #0
   271fa:	d004      	beq.n	27206 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   271fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   271fe:	2280      	movs	r2, #128	; 0x80
   27200:	0292      	lsls	r2, r2, #10
   27202:	4313      	orrs	r3, r2
   27204:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   27206:	683b      	ldr	r3, [r7, #0]
   27208:	7cdb      	ldrb	r3, [r3, #19]
   2720a:	2b00      	cmp	r3, #0
   2720c:	d004      	beq.n	27218 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   2720e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27210:	2280      	movs	r2, #128	; 0x80
   27212:	0092      	lsls	r2, r2, #2
   27214:	4313      	orrs	r3, r2
   27216:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   27218:	683b      	ldr	r3, [r7, #0]
   2721a:	7d1b      	ldrb	r3, [r3, #20]
   2721c:	2b00      	cmp	r3, #0
   2721e:	d004      	beq.n	2722a <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   27220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27222:	2280      	movs	r2, #128	; 0x80
   27224:	0192      	lsls	r2, r2, #6
   27226:	4313      	orrs	r3, r2
   27228:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   2722a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2722c:	681a      	ldr	r2, [r3, #0]
   2722e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27230:	431a      	orrs	r2, r3
   27232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27234:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   27236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27238:	685a      	ldr	r2, [r3, #4]
   2723a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2723c:	431a      	orrs	r2, r3
   2723e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27240:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   27242:	2300      	movs	r3, #0
}
   27244:	0018      	movs	r0, r3
   27246:	46bd      	mov	sp, r7
   27248:	b013      	add	sp, #76	; 0x4c
   2724a:	bd90      	pop	{r4, r7, pc}
   2724c:	00026b8d 	.word	0x00026b8d
   27250:	0002682d 	.word	0x0002682d
   27254:	000295d9 	.word	0x000295d9
   27258:	000269e9 	.word	0x000269e9
   2725c:	0002939d 	.word	0x0002939d
   27260:	00026563 	.word	0x00026563
   27264:	00026d01 	.word	0x00026d01

00027268 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   27268:	b590      	push	{r4, r7, lr}
   2726a:	b08b      	sub	sp, #44	; 0x2c
   2726c:	af00      	add	r7, sp, #0
   2726e:	60f8      	str	r0, [r7, #12]
   27270:	60b9      	str	r1, [r7, #8]
   27272:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   27274:	68fb      	ldr	r3, [r7, #12]
   27276:	68ba      	ldr	r2, [r7, #8]
   27278:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   2727a:	68fb      	ldr	r3, [r7, #12]
   2727c:	681b      	ldr	r3, [r3, #0]
   2727e:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   27280:	6a3b      	ldr	r3, [r7, #32]
   27282:	681b      	ldr	r3, [r3, #0]
   27284:	2202      	movs	r2, #2
   27286:	4013      	ands	r3, r2
   27288:	d001      	beq.n	2728e <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   2728a:	231c      	movs	r3, #28
   2728c:	e09c      	b.n	273c8 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   2728e:	6a3b      	ldr	r3, [r7, #32]
   27290:	681b      	ldr	r3, [r3, #0]
   27292:	2201      	movs	r2, #1
   27294:	4013      	ands	r3, r2
   27296:	d001      	beq.n	2729c <spi_init+0x34>
		return STATUS_BUSY;
   27298:	2305      	movs	r3, #5
   2729a:	e095      	b.n	273c8 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2729c:	68fb      	ldr	r3, [r7, #12]
   2729e:	681b      	ldr	r3, [r3, #0]
   272a0:	0018      	movs	r0, r3
   272a2:	4b4b      	ldr	r3, [pc, #300]	; (273d0 <spi_init+0x168>)
   272a4:	4798      	blx	r3
   272a6:	0003      	movs	r3, r0
   272a8:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   272aa:	69fb      	ldr	r3, [r7, #28]
   272ac:	3302      	adds	r3, #2
   272ae:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   272b0:	69fb      	ldr	r3, [r7, #28]
   272b2:	3314      	adds	r3, #20
   272b4:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   272b6:	2201      	movs	r2, #1
   272b8:	69bb      	ldr	r3, [r7, #24]
   272ba:	409a      	lsls	r2, r3
   272bc:	0013      	movs	r3, r2
   272be:	0019      	movs	r1, r3
   272c0:	2002      	movs	r0, #2
   272c2:	4b44      	ldr	r3, [pc, #272]	; (273d4 <spi_init+0x16c>)
   272c4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   272c6:	2310      	movs	r3, #16
   272c8:	18fb      	adds	r3, r7, r3
   272ca:	0018      	movs	r0, r3
   272cc:	4b42      	ldr	r3, [pc, #264]	; (273d8 <spi_init+0x170>)
   272ce:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   272d0:	687b      	ldr	r3, [r7, #4]
   272d2:	2224      	movs	r2, #36	; 0x24
   272d4:	5c9a      	ldrb	r2, [r3, r2]
   272d6:	2310      	movs	r3, #16
   272d8:	18fb      	adds	r3, r7, r3
   272da:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   272dc:	697b      	ldr	r3, [r7, #20]
   272de:	b2db      	uxtb	r3, r3
   272e0:	2210      	movs	r2, #16
   272e2:	18ba      	adds	r2, r7, r2
   272e4:	0011      	movs	r1, r2
   272e6:	0018      	movs	r0, r3
   272e8:	4b3c      	ldr	r3, [pc, #240]	; (273dc <spi_init+0x174>)
   272ea:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   272ec:	697b      	ldr	r3, [r7, #20]
   272ee:	b2db      	uxtb	r3, r3
   272f0:	0018      	movs	r0, r3
   272f2:	4b3b      	ldr	r3, [pc, #236]	; (273e0 <spi_init+0x178>)
   272f4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   272f6:	687b      	ldr	r3, [r7, #4]
   272f8:	2224      	movs	r2, #36	; 0x24
   272fa:	5c9b      	ldrb	r3, [r3, r2]
   272fc:	2100      	movs	r1, #0
   272fe:	0018      	movs	r0, r3
   27300:	4b38      	ldr	r3, [pc, #224]	; (273e4 <spi_init+0x17c>)
   27302:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   27304:	687b      	ldr	r3, [r7, #4]
   27306:	781b      	ldrb	r3, [r3, #0]
   27308:	2b01      	cmp	r3, #1
   2730a:	d105      	bne.n	27318 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   2730c:	6a3b      	ldr	r3, [r7, #32]
   2730e:	681b      	ldr	r3, [r3, #0]
   27310:	220c      	movs	r2, #12
   27312:	431a      	orrs	r2, r3
   27314:	6a3b      	ldr	r3, [r7, #32]
   27316:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   27318:	2327      	movs	r3, #39	; 0x27
   2731a:	18fb      	adds	r3, r7, r3
   2731c:	2200      	movs	r2, #0
   2731e:	701a      	strb	r2, [r3, #0]
   27320:	e010      	b.n	27344 <spi_init+0xdc>
		module->callback[i]        = NULL;
   27322:	2327      	movs	r3, #39	; 0x27
   27324:	18fb      	adds	r3, r7, r3
   27326:	781b      	ldrb	r3, [r3, #0]
   27328:	68fa      	ldr	r2, [r7, #12]
   2732a:	3302      	adds	r3, #2
   2732c:	009b      	lsls	r3, r3, #2
   2732e:	18d3      	adds	r3, r2, r3
   27330:	3304      	adds	r3, #4
   27332:	2200      	movs	r2, #0
   27334:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   27336:	2327      	movs	r3, #39	; 0x27
   27338:	18fb      	adds	r3, r7, r3
   2733a:	781a      	ldrb	r2, [r3, #0]
   2733c:	2327      	movs	r3, #39	; 0x27
   2733e:	18fb      	adds	r3, r7, r3
   27340:	3201      	adds	r2, #1
   27342:	701a      	strb	r2, [r3, #0]
   27344:	2327      	movs	r3, #39	; 0x27
   27346:	18fb      	adds	r3, r7, r3
   27348:	781b      	ldrb	r3, [r3, #0]
   2734a:	2b06      	cmp	r3, #6
   2734c:	d9e9      	bls.n	27322 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   2734e:	68fb      	ldr	r3, [r7, #12]
   27350:	2200      	movs	r2, #0
   27352:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   27354:	68fb      	ldr	r3, [r7, #12]
   27356:	2200      	movs	r2, #0
   27358:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   2735a:	68fb      	ldr	r3, [r7, #12]
   2735c:	2200      	movs	r2, #0
   2735e:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   27360:	68fb      	ldr	r3, [r7, #12]
   27362:	2200      	movs	r2, #0
   27364:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   27366:	68fb      	ldr	r3, [r7, #12]
   27368:	2236      	movs	r2, #54	; 0x36
   2736a:	2100      	movs	r1, #0
   2736c:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   2736e:	68fb      	ldr	r3, [r7, #12]
   27370:	2237      	movs	r2, #55	; 0x37
   27372:	2100      	movs	r1, #0
   27374:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   27376:	68fb      	ldr	r3, [r7, #12]
   27378:	2238      	movs	r2, #56	; 0x38
   2737a:	2100      	movs	r1, #0
   2737c:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   2737e:	68fb      	ldr	r3, [r7, #12]
   27380:	2203      	movs	r2, #3
   27382:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   27384:	68fb      	ldr	r3, [r7, #12]
   27386:	2200      	movs	r2, #0
   27388:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   2738a:	68fb      	ldr	r3, [r7, #12]
   2738c:	681b      	ldr	r3, [r3, #0]
   2738e:	2213      	movs	r2, #19
   27390:	18bc      	adds	r4, r7, r2
   27392:	0018      	movs	r0, r3
   27394:	4b0e      	ldr	r3, [pc, #56]	; (273d0 <spi_init+0x168>)
   27396:	4798      	blx	r3
   27398:	0003      	movs	r3, r0
   2739a:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   2739c:	4a12      	ldr	r2, [pc, #72]	; (273e8 <spi_init+0x180>)
   2739e:	2313      	movs	r3, #19
   273a0:	18fb      	adds	r3, r7, r3
   273a2:	781b      	ldrb	r3, [r3, #0]
   273a4:	0011      	movs	r1, r2
   273a6:	0018      	movs	r0, r3
   273a8:	4b10      	ldr	r3, [pc, #64]	; (273ec <spi_init+0x184>)
   273aa:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   273ac:	2313      	movs	r3, #19
   273ae:	18fb      	adds	r3, r7, r3
   273b0:	781a      	ldrb	r2, [r3, #0]
   273b2:	4b0f      	ldr	r3, [pc, #60]	; (273f0 <spi_init+0x188>)
   273b4:	0092      	lsls	r2, r2, #2
   273b6:	68f9      	ldr	r1, [r7, #12]
   273b8:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   273ba:	687a      	ldr	r2, [r7, #4]
   273bc:	68fb      	ldr	r3, [r7, #12]
   273be:	0011      	movs	r1, r2
   273c0:	0018      	movs	r0, r3
   273c2:	4b0c      	ldr	r3, [pc, #48]	; (273f4 <spi_init+0x18c>)
   273c4:	4798      	blx	r3
   273c6:	0003      	movs	r3, r0
}
   273c8:	0018      	movs	r0, r3
   273ca:	46bd      	mov	sp, r7
   273cc:	b00b      	add	sp, #44	; 0x2c
   273ce:	bd90      	pop	{r4, r7, pc}
   273d0:	000269e9 	.word	0x000269e9
   273d4:	00026ca5 	.word	0x00026ca5
   273d8:	00026c8d 	.word	0x00026c8d
   273dc:	00029279 	.word	0x00029279
   273e0:	000292bd 	.word	0x000292bd
   273e4:	000267a1 	.word	0x000267a1
   273e8:	000278c1 	.word	0x000278c1
   273ec:	00026a4d 	.word	0x00026a4d
   273f0:	200059b8 	.word	0x200059b8
   273f4:	00027059 	.word	0x00027059

000273f8 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   273f8:	b590      	push	{r4, r7, lr}
   273fa:	b087      	sub	sp, #28
   273fc:	af00      	add	r7, sp, #0
   273fe:	60f8      	str	r0, [r7, #12]
   27400:	60b9      	str	r1, [r7, #8]
   27402:	0019      	movs	r1, r3
   27404:	1dbb      	adds	r3, r7, #6
   27406:	801a      	strh	r2, [r3, #0]
   27408:	1d3b      	adds	r3, r7, #4
   2740a:	1c0a      	adds	r2, r1, #0
   2740c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   2740e:	68fb      	ldr	r3, [r7, #12]
   27410:	2238      	movs	r2, #56	; 0x38
   27412:	5c9b      	ldrb	r3, [r3, r2]
   27414:	b2db      	uxtb	r3, r3
   27416:	2b05      	cmp	r3, #5
   27418:	d101      	bne.n	2741e <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   2741a:	2305      	movs	r3, #5
   2741c:	e07a      	b.n	27514 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   2741e:	1dbb      	adds	r3, r7, #6
   27420:	881b      	ldrh	r3, [r3, #0]
   27422:	2b00      	cmp	r3, #0
   27424:	d101      	bne.n	2742a <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   27426:	2317      	movs	r3, #23
   27428:	e074      	b.n	27514 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   2742a:	68fb      	ldr	r3, [r7, #12]
   2742c:	79db      	ldrb	r3, [r3, #7]
   2742e:	2201      	movs	r2, #1
   27430:	4053      	eors	r3, r2
   27432:	b2db      	uxtb	r3, r3
   27434:	2b00      	cmp	r3, #0
   27436:	d001      	beq.n	2743c <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   27438:	231c      	movs	r3, #28
   2743a:	e06b      	b.n	27514 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   2743c:	2316      	movs	r3, #22
   2743e:	18fb      	adds	r3, r7, r3
   27440:	2200      	movs	r2, #0
   27442:	801a      	strh	r2, [r3, #0]

	while (length--) {
   27444:	e05e      	b.n	27504 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   27446:	68fb      	ldr	r3, [r7, #12]
   27448:	795b      	ldrb	r3, [r3, #5]
   2744a:	2b01      	cmp	r3, #1
   2744c:	d112      	bne.n	27474 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   2744e:	46c0      	nop			; (mov r8, r8)
   27450:	68fb      	ldr	r3, [r7, #12]
   27452:	0018      	movs	r0, r3
   27454:	4b31      	ldr	r3, [pc, #196]	; (2751c <spi_read_buffer_wait+0x124>)
   27456:	4798      	blx	r3
   27458:	0003      	movs	r3, r0
   2745a:	001a      	movs	r2, r3
   2745c:	2301      	movs	r3, #1
   2745e:	4053      	eors	r3, r2
   27460:	b2db      	uxtb	r3, r3
   27462:	2b00      	cmp	r3, #0
   27464:	d1f4      	bne.n	27450 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   27466:	1d3b      	adds	r3, r7, #4
   27468:	881a      	ldrh	r2, [r3, #0]
   2746a:	68fb      	ldr	r3, [r7, #12]
   2746c:	0011      	movs	r1, r2
   2746e:	0018      	movs	r0, r3
   27470:	4b2b      	ldr	r3, [pc, #172]	; (27520 <spi_read_buffer_wait+0x128>)
   27472:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   27474:	46c0      	nop			; (mov r8, r8)
   27476:	68fb      	ldr	r3, [r7, #12]
   27478:	0018      	movs	r0, r3
   2747a:	4b2a      	ldr	r3, [pc, #168]	; (27524 <spi_read_buffer_wait+0x12c>)
   2747c:	4798      	blx	r3
   2747e:	0003      	movs	r3, r0
   27480:	001a      	movs	r2, r3
   27482:	2301      	movs	r3, #1
   27484:	4053      	eors	r3, r2
   27486:	b2db      	uxtb	r3, r3
   27488:	2b00      	cmp	r3, #0
   2748a:	d1f4      	bne.n	27476 <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   2748c:	2312      	movs	r3, #18
   2748e:	18fb      	adds	r3, r7, r3
   27490:	2200      	movs	r2, #0
   27492:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   27494:	2315      	movs	r3, #21
   27496:	18fc      	adds	r4, r7, r3
   27498:	2312      	movs	r3, #18
   2749a:	18fa      	adds	r2, r7, r3
   2749c:	68fb      	ldr	r3, [r7, #12]
   2749e:	0011      	movs	r1, r2
   274a0:	0018      	movs	r0, r3
   274a2:	4b21      	ldr	r3, [pc, #132]	; (27528 <spi_read_buffer_wait+0x130>)
   274a4:	4798      	blx	r3
   274a6:	0003      	movs	r3, r0
   274a8:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   274aa:	2315      	movs	r3, #21
   274ac:	18fb      	adds	r3, r7, r3
   274ae:	781b      	ldrb	r3, [r3, #0]
   274b0:	2b00      	cmp	r3, #0
   274b2:	d003      	beq.n	274bc <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   274b4:	2315      	movs	r3, #21
   274b6:	18fb      	adds	r3, r7, r3
   274b8:	781b      	ldrb	r3, [r3, #0]
   274ba:	e02b      	b.n	27514 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   274bc:	2316      	movs	r3, #22
   274be:	18fb      	adds	r3, r7, r3
   274c0:	881b      	ldrh	r3, [r3, #0]
   274c2:	2216      	movs	r2, #22
   274c4:	18ba      	adds	r2, r7, r2
   274c6:	1c59      	adds	r1, r3, #1
   274c8:	8011      	strh	r1, [r2, #0]
   274ca:	001a      	movs	r2, r3
   274cc:	68bb      	ldr	r3, [r7, #8]
   274ce:	189b      	adds	r3, r3, r2
   274d0:	2212      	movs	r2, #18
   274d2:	18ba      	adds	r2, r7, r2
   274d4:	8812      	ldrh	r2, [r2, #0]
   274d6:	b2d2      	uxtb	r2, r2
   274d8:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   274da:	68fb      	ldr	r3, [r7, #12]
   274dc:	799b      	ldrb	r3, [r3, #6]
   274de:	2b01      	cmp	r3, #1
   274e0:	d110      	bne.n	27504 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   274e2:	2316      	movs	r3, #22
   274e4:	18fb      	adds	r3, r7, r3
   274e6:	881b      	ldrh	r3, [r3, #0]
   274e8:	2216      	movs	r2, #22
   274ea:	18ba      	adds	r2, r7, r2
   274ec:	1c59      	adds	r1, r3, #1
   274ee:	8011      	strh	r1, [r2, #0]
   274f0:	001a      	movs	r2, r3
   274f2:	68bb      	ldr	r3, [r7, #8]
   274f4:	189b      	adds	r3, r3, r2
   274f6:	2212      	movs	r2, #18
   274f8:	18ba      	adds	r2, r7, r2
   274fa:	8812      	ldrh	r2, [r2, #0]
   274fc:	0a12      	lsrs	r2, r2, #8
   274fe:	b292      	uxth	r2, r2
   27500:	b2d2      	uxtb	r2, r2
   27502:	701a      	strb	r2, [r3, #0]
	while (length--) {
   27504:	1dbb      	adds	r3, r7, #6
   27506:	881b      	ldrh	r3, [r3, #0]
   27508:	1dba      	adds	r2, r7, #6
   2750a:	1e59      	subs	r1, r3, #1
   2750c:	8011      	strh	r1, [r2, #0]
   2750e:	2b00      	cmp	r3, #0
   27510:	d199      	bne.n	27446 <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   27512:	2300      	movs	r3, #0
}
   27514:	0018      	movs	r0, r3
   27516:	46bd      	mov	sp, r7
   27518:	b007      	add	sp, #28
   2751a:	bd90      	pop	{r4, r7, pc}
   2751c:	00026e71 	.word	0x00026e71
   27520:	00026ec1 	.word	0x00026ec1
   27524:	00026e99 	.word	0x00026e99
   27528:	00026f09 	.word	0x00026f09

0002752c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   2752c:	b580      	push	{r7, lr}
   2752e:	b086      	sub	sp, #24
   27530:	af00      	add	r7, sp, #0
   27532:	60f8      	str	r0, [r7, #12]
   27534:	60b9      	str	r1, [r7, #8]
   27536:	1dfb      	adds	r3, r7, #7
   27538:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   2753a:	68fb      	ldr	r3, [r7, #12]
   2753c:	795b      	ldrb	r3, [r3, #5]
   2753e:	2b01      	cmp	r3, #1
   27540:	d001      	beq.n	27546 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   27542:	2315      	movs	r3, #21
   27544:	e05c      	b.n	27600 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   27546:	68fb      	ldr	r3, [r7, #12]
   27548:	7a1b      	ldrb	r3, [r3, #8]
   2754a:	2201      	movs	r2, #1
   2754c:	4053      	eors	r3, r2
   2754e:	b2db      	uxtb	r3, r3
   27550:	2b00      	cmp	r3, #0
   27552:	d054      	beq.n	275fe <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   27554:	1dfb      	adds	r3, r7, #7
   27556:	781b      	ldrb	r3, [r3, #0]
   27558:	2b00      	cmp	r3, #0
   2755a:	d04a      	beq.n	275f2 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   2755c:	68bb      	ldr	r3, [r7, #8]
   2755e:	785b      	ldrb	r3, [r3, #1]
   27560:	2b00      	cmp	r3, #0
   27562:	d03f      	beq.n	275e4 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   27564:	68fb      	ldr	r3, [r7, #12]
   27566:	0018      	movs	r0, r3
   27568:	4b27      	ldr	r3, [pc, #156]	; (27608 <spi_select_slave+0xdc>)
   2756a:	4798      	blx	r3
   2756c:	0003      	movs	r3, r0
   2756e:	001a      	movs	r2, r3
   27570:	2301      	movs	r3, #1
   27572:	4053      	eors	r3, r2
   27574:	b2db      	uxtb	r3, r3
   27576:	2b00      	cmp	r3, #0
   27578:	d007      	beq.n	2758a <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   2757a:	68bb      	ldr	r3, [r7, #8]
   2757c:	781b      	ldrb	r3, [r3, #0]
   2757e:	2101      	movs	r1, #1
   27580:	0018      	movs	r0, r3
   27582:	4b22      	ldr	r3, [pc, #136]	; (2760c <spi_select_slave+0xe0>)
   27584:	4798      	blx	r3
					return STATUS_BUSY;
   27586:	2305      	movs	r3, #5
   27588:	e03a      	b.n	27600 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   2758a:	68bb      	ldr	r3, [r7, #8]
   2758c:	781b      	ldrb	r3, [r3, #0]
   2758e:	2100      	movs	r1, #0
   27590:	0018      	movs	r0, r3
   27592:	4b1e      	ldr	r3, [pc, #120]	; (2760c <spi_select_slave+0xe0>)
   27594:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   27596:	68bb      	ldr	r3, [r7, #8]
   27598:	789b      	ldrb	r3, [r3, #2]
   2759a:	b29a      	uxth	r2, r3
   2759c:	68fb      	ldr	r3, [r7, #12]
   2759e:	0011      	movs	r1, r2
   275a0:	0018      	movs	r0, r3
   275a2:	4b1b      	ldr	r3, [pc, #108]	; (27610 <spi_select_slave+0xe4>)
   275a4:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   275a6:	68fb      	ldr	r3, [r7, #12]
   275a8:	79db      	ldrb	r3, [r3, #7]
   275aa:	2201      	movs	r2, #1
   275ac:	4053      	eors	r3, r2
   275ae:	b2db      	uxtb	r3, r3
   275b0:	2b00      	cmp	r3, #0
   275b2:	d024      	beq.n	275fe <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   275b4:	46c0      	nop			; (mov r8, r8)
   275b6:	68fb      	ldr	r3, [r7, #12]
   275b8:	0018      	movs	r0, r3
   275ba:	4b16      	ldr	r3, [pc, #88]	; (27614 <spi_select_slave+0xe8>)
   275bc:	4798      	blx	r3
   275be:	0003      	movs	r3, r0
   275c0:	001a      	movs	r2, r3
   275c2:	2301      	movs	r3, #1
   275c4:	4053      	eors	r3, r2
   275c6:	b2db      	uxtb	r3, r3
   275c8:	2b00      	cmp	r3, #0
   275ca:	d1f4      	bne.n	275b6 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   275cc:	2316      	movs	r3, #22
   275ce:	18fb      	adds	r3, r7, r3
   275d0:	2200      	movs	r2, #0
   275d2:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   275d4:	2316      	movs	r3, #22
   275d6:	18fa      	adds	r2, r7, r3
   275d8:	68fb      	ldr	r3, [r7, #12]
   275da:	0011      	movs	r1, r2
   275dc:	0018      	movs	r0, r3
   275de:	4b0e      	ldr	r3, [pc, #56]	; (27618 <spi_select_slave+0xec>)
   275e0:	4798      	blx	r3
   275e2:	e00c      	b.n	275fe <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   275e4:	68bb      	ldr	r3, [r7, #8]
   275e6:	781b      	ldrb	r3, [r3, #0]
   275e8:	2100      	movs	r1, #0
   275ea:	0018      	movs	r0, r3
   275ec:	4b07      	ldr	r3, [pc, #28]	; (2760c <spi_select_slave+0xe0>)
   275ee:	4798      	blx	r3
   275f0:	e005      	b.n	275fe <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   275f2:	68bb      	ldr	r3, [r7, #8]
   275f4:	781b      	ldrb	r3, [r3, #0]
   275f6:	2101      	movs	r1, #1
   275f8:	0018      	movs	r0, r3
   275fa:	4b04      	ldr	r3, [pc, #16]	; (2760c <spi_select_slave+0xe0>)
   275fc:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   275fe:	2300      	movs	r3, #0
}
   27600:	0018      	movs	r0, r3
   27602:	46bd      	mov	sp, r7
   27604:	b006      	add	sp, #24
   27606:	bd80      	pop	{r7, pc}
   27608:	00026e71 	.word	0x00026e71
   2760c:	00026c39 	.word	0x00026c39
   27610:	00026ec1 	.word	0x00026ec1
   27614:	00026e99 	.word	0x00026e99
   27618:	00026f09 	.word	0x00026f09

0002761c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   2761c:	b580      	push	{r7, lr}
   2761e:	b086      	sub	sp, #24
   27620:	af00      	add	r7, sp, #0
   27622:	60f8      	str	r0, [r7, #12]
   27624:	60b9      	str	r1, [r7, #8]
   27626:	1dbb      	adds	r3, r7, #6
   27628:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   2762a:	68fb      	ldr	r3, [r7, #12]
   2762c:	2238      	movs	r2, #56	; 0x38
   2762e:	5c9b      	ldrb	r3, [r3, r2]
   27630:	b2db      	uxtb	r3, r3
   27632:	2b05      	cmp	r3, #5
   27634:	d101      	bne.n	2763a <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   27636:	2305      	movs	r3, #5
   27638:	e087      	b.n	2774a <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   2763a:	1dbb      	adds	r3, r7, #6
   2763c:	881b      	ldrh	r3, [r3, #0]
   2763e:	2b00      	cmp	r3, #0
   27640:	d101      	bne.n	27646 <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   27642:	2317      	movs	r3, #23
   27644:	e081      	b.n	2774a <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   27646:	2316      	movs	r3, #22
   27648:	18fb      	adds	r3, r7, r3
   2764a:	2200      	movs	r2, #0
   2764c:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   2764e:	2314      	movs	r3, #20
   27650:	18fb      	adds	r3, r7, r3
   27652:	1dba      	adds	r2, r7, #6
   27654:	8812      	ldrh	r2, [r2, #0]
   27656:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   27658:	e05f      	b.n	2771a <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   2765a:	46c0      	nop			; (mov r8, r8)
   2765c:	68fb      	ldr	r3, [r7, #12]
   2765e:	0018      	movs	r0, r3
   27660:	4b3c      	ldr	r3, [pc, #240]	; (27754 <spi_write_buffer_wait+0x138>)
   27662:	4798      	blx	r3
   27664:	0003      	movs	r3, r0
   27666:	001a      	movs	r2, r3
   27668:	2301      	movs	r3, #1
   2766a:	4053      	eors	r3, r2
   2766c:	b2db      	uxtb	r3, r3
   2766e:	2b00      	cmp	r3, #0
   27670:	d1f4      	bne.n	2765c <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   27672:	2316      	movs	r3, #22
   27674:	18fb      	adds	r3, r7, r3
   27676:	881b      	ldrh	r3, [r3, #0]
   27678:	2216      	movs	r2, #22
   2767a:	18ba      	adds	r2, r7, r2
   2767c:	1c59      	adds	r1, r3, #1
   2767e:	8011      	strh	r1, [r2, #0]
   27680:	001a      	movs	r2, r3
   27682:	68bb      	ldr	r3, [r7, #8]
   27684:	189b      	adds	r3, r3, r2
   27686:	781a      	ldrb	r2, [r3, #0]
   27688:	2312      	movs	r3, #18
   2768a:	18fb      	adds	r3, r7, r3
   2768c:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2768e:	68fb      	ldr	r3, [r7, #12]
   27690:	799b      	ldrb	r3, [r3, #6]
   27692:	2b01      	cmp	r3, #1
   27694:	d115      	bne.n	276c2 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   27696:	2316      	movs	r3, #22
   27698:	18fb      	adds	r3, r7, r3
   2769a:	881b      	ldrh	r3, [r3, #0]
   2769c:	2216      	movs	r2, #22
   2769e:	18ba      	adds	r2, r7, r2
   276a0:	1c59      	adds	r1, r3, #1
   276a2:	8011      	strh	r1, [r2, #0]
   276a4:	001a      	movs	r2, r3
   276a6:	68bb      	ldr	r3, [r7, #8]
   276a8:	189b      	adds	r3, r3, r2
   276aa:	781b      	ldrb	r3, [r3, #0]
   276ac:	021b      	lsls	r3, r3, #8
   276ae:	b21a      	sxth	r2, r3
   276b0:	2312      	movs	r3, #18
   276b2:	18fb      	adds	r3, r7, r3
   276b4:	2100      	movs	r1, #0
   276b6:	5e5b      	ldrsh	r3, [r3, r1]
   276b8:	4313      	orrs	r3, r2
   276ba:	b21a      	sxth	r2, r3
   276bc:	2312      	movs	r3, #18
   276be:	18fb      	adds	r3, r7, r3
   276c0:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   276c2:	2312      	movs	r3, #18
   276c4:	18fb      	adds	r3, r7, r3
   276c6:	881a      	ldrh	r2, [r3, #0]
   276c8:	68fb      	ldr	r3, [r7, #12]
   276ca:	0011      	movs	r1, r2
   276cc:	0018      	movs	r0, r3
   276ce:	4b22      	ldr	r3, [pc, #136]	; (27758 <spi_write_buffer_wait+0x13c>)
   276d0:	4798      	blx	r3

		if (module->receiver_enabled) {
   276d2:	68fb      	ldr	r3, [r7, #12]
   276d4:	79db      	ldrb	r3, [r3, #7]
   276d6:	2214      	movs	r2, #20
   276d8:	18ba      	adds	r2, r7, r2
   276da:	2114      	movs	r1, #20
   276dc:	1879      	adds	r1, r7, r1
   276de:	8809      	ldrh	r1, [r1, #0]
   276e0:	8011      	strh	r1, [r2, #0]
   276e2:	2b00      	cmp	r3, #0
   276e4:	d019      	beq.n	2771a <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   276e6:	46c0      	nop			; (mov r8, r8)
   276e8:	68fb      	ldr	r3, [r7, #12]
   276ea:	0018      	movs	r0, r3
   276ec:	4b1b      	ldr	r3, [pc, #108]	; (2775c <spi_write_buffer_wait+0x140>)
   276ee:	4798      	blx	r3
   276f0:	0003      	movs	r3, r0
   276f2:	001a      	movs	r2, r3
   276f4:	2301      	movs	r3, #1
   276f6:	4053      	eors	r3, r2
   276f8:	b2db      	uxtb	r3, r3
   276fa:	2b00      	cmp	r3, #0
   276fc:	d1f4      	bne.n	276e8 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   276fe:	2310      	movs	r3, #16
   27700:	18fa      	adds	r2, r7, r3
   27702:	68fb      	ldr	r3, [r7, #12]
   27704:	0011      	movs	r1, r2
   27706:	0018      	movs	r0, r3
   27708:	4b15      	ldr	r3, [pc, #84]	; (27760 <spi_write_buffer_wait+0x144>)
   2770a:	4798      	blx	r3
			flush_length--;
   2770c:	2314      	movs	r3, #20
   2770e:	18fb      	adds	r3, r7, r3
   27710:	881a      	ldrh	r2, [r3, #0]
   27712:	2314      	movs	r3, #20
   27714:	18fb      	adds	r3, r7, r3
   27716:	3a01      	subs	r2, #1
   27718:	801a      	strh	r2, [r3, #0]
	while (length--) {
   2771a:	1dbb      	adds	r3, r7, #6
   2771c:	881b      	ldrh	r3, [r3, #0]
   2771e:	1dba      	adds	r2, r7, #6
   27720:	1e59      	subs	r1, r3, #1
   27722:	8011      	strh	r1, [r2, #0]
   27724:	2b00      	cmp	r3, #0
   27726:	d198      	bne.n	2765a <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   27728:	68fb      	ldr	r3, [r7, #12]
   2772a:	795b      	ldrb	r3, [r3, #5]
   2772c:	2b01      	cmp	r3, #1
   2772e:	d10b      	bne.n	27748 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   27730:	46c0      	nop			; (mov r8, r8)
   27732:	68fb      	ldr	r3, [r7, #12]
   27734:	0018      	movs	r0, r3
   27736:	4b0b      	ldr	r3, [pc, #44]	; (27764 <spi_write_buffer_wait+0x148>)
   27738:	4798      	blx	r3
   2773a:	0003      	movs	r3, r0
   2773c:	001a      	movs	r2, r3
   2773e:	2301      	movs	r3, #1
   27740:	4053      	eors	r3, r2
   27742:	b2db      	uxtb	r3, r3
   27744:	2b00      	cmp	r3, #0
   27746:	d1f4      	bne.n	27732 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   27748:	2300      	movs	r3, #0
}
   2774a:	0018      	movs	r0, r3
   2774c:	46bd      	mov	sp, r7
   2774e:	b006      	add	sp, #24
   27750:	bd80      	pop	{r7, pc}
   27752:	46c0      	nop			; (mov r8, r8)
   27754:	00026e71 	.word	0x00026e71
   27758:	00026ec1 	.word	0x00026ec1
   2775c:	00026e99 	.word	0x00026e99
   27760:	00026f09 	.word	0x00026f09
   27764:	00026e49 	.word	0x00026e49

00027768 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   27768:	b580      	push	{r7, lr}
   2776a:	b084      	sub	sp, #16
   2776c:	af00      	add	r7, sp, #0
   2776e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27770:	687b      	ldr	r3, [r7, #4]
   27772:	681b      	ldr	r3, [r3, #0]
   27774:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   27776:	687b      	ldr	r3, [r7, #4]
   27778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2777a:	781b      	ldrb	r3, [r3, #0]
   2777c:	b2da      	uxtb	r2, r3
   2777e:	230e      	movs	r3, #14
   27780:	18fb      	adds	r3, r7, r3
   27782:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   27784:	687b      	ldr	r3, [r7, #4]
   27786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27788:	1c5a      	adds	r2, r3, #1
   2778a:	687b      	ldr	r3, [r7, #4]
   2778c:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2778e:	687b      	ldr	r3, [r7, #4]
   27790:	799b      	ldrb	r3, [r3, #6]
   27792:	2b01      	cmp	r3, #1
   27794:	d113      	bne.n	277be <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   27796:	687b      	ldr	r3, [r7, #4]
   27798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2779a:	781b      	ldrb	r3, [r3, #0]
   2779c:	b2db      	uxtb	r3, r3
   2779e:	021b      	lsls	r3, r3, #8
   277a0:	b21a      	sxth	r2, r3
   277a2:	230e      	movs	r3, #14
   277a4:	18fb      	adds	r3, r7, r3
   277a6:	2100      	movs	r1, #0
   277a8:	5e5b      	ldrsh	r3, [r3, r1]
   277aa:	4313      	orrs	r3, r2
   277ac:	b21a      	sxth	r2, r3
   277ae:	230e      	movs	r3, #14
   277b0:	18fb      	adds	r3, r7, r3
   277b2:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   277b4:	687b      	ldr	r3, [r7, #4]
   277b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   277b8:	1c5a      	adds	r2, r3, #1
   277ba:	687b      	ldr	r3, [r7, #4]
   277bc:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   277be:	230e      	movs	r3, #14
   277c0:	18fb      	adds	r3, r7, r3
   277c2:	881b      	ldrh	r3, [r3, #0]
   277c4:	05db      	lsls	r3, r3, #23
   277c6:	0dda      	lsrs	r2, r3, #23
   277c8:	68bb      	ldr	r3, [r7, #8]
   277ca:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   277cc:	687b      	ldr	r3, [r7, #4]
   277ce:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   277d0:	b29b      	uxth	r3, r3
   277d2:	3b01      	subs	r3, #1
   277d4:	b29a      	uxth	r2, r3
   277d6:	687b      	ldr	r3, [r7, #4]
   277d8:	869a      	strh	r2, [r3, #52]	; 0x34
}
   277da:	46c0      	nop			; (mov r8, r8)
   277dc:	46bd      	mov	sp, r7
   277de:	b004      	add	sp, #16
   277e0:	bd80      	pop	{r7, pc}
	...

000277e4 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   277e4:	b580      	push	{r7, lr}
   277e6:	b084      	sub	sp, #16
   277e8:	af00      	add	r7, sp, #0
   277ea:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   277ec:	687b      	ldr	r3, [r7, #4]
   277ee:	681b      	ldr	r3, [r3, #0]
   277f0:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   277f2:	4b08      	ldr	r3, [pc, #32]	; (27814 <_spi_write_dummy+0x30>)
   277f4:	881b      	ldrh	r3, [r3, #0]
   277f6:	001a      	movs	r2, r3
   277f8:	68fb      	ldr	r3, [r7, #12]
   277fa:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   277fc:	687b      	ldr	r3, [r7, #4]
   277fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   27800:	b29b      	uxth	r3, r3
   27802:	3b01      	subs	r3, #1
   27804:	b29a      	uxth	r2, r3
   27806:	687b      	ldr	r3, [r7, #4]
   27808:	865a      	strh	r2, [r3, #50]	; 0x32
}
   2780a:	46c0      	nop			; (mov r8, r8)
   2780c:	46bd      	mov	sp, r7
   2780e:	b004      	add	sp, #16
   27810:	bd80      	pop	{r7, pc}
   27812:	46c0      	nop			; (mov r8, r8)
   27814:	200059d0 	.word	0x200059d0

00027818 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   27818:	b580      	push	{r7, lr}
   2781a:	b084      	sub	sp, #16
   2781c:	af00      	add	r7, sp, #0
   2781e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27820:	687b      	ldr	r3, [r7, #4]
   27822:	681b      	ldr	r3, [r3, #0]
   27824:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   27826:	230a      	movs	r3, #10
   27828:	18fb      	adds	r3, r7, r3
   2782a:	2200      	movs	r2, #0
   2782c:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   2782e:	68fb      	ldr	r3, [r7, #12]
   27830:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   27832:	230a      	movs	r3, #10
   27834:	18fb      	adds	r3, r7, r3
   27836:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   27838:	687b      	ldr	r3, [r7, #4]
   2783a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2783c:	b29b      	uxth	r3, r3
   2783e:	3b01      	subs	r3, #1
   27840:	b29a      	uxth	r2, r3
   27842:	687b      	ldr	r3, [r7, #4]
   27844:	865a      	strh	r2, [r3, #50]	; 0x32
}
   27846:	46c0      	nop			; (mov r8, r8)
   27848:	46bd      	mov	sp, r7
   2784a:	b004      	add	sp, #16
   2784c:	bd80      	pop	{r7, pc}

0002784e <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   2784e:	b580      	push	{r7, lr}
   27850:	b084      	sub	sp, #16
   27852:	af00      	add	r7, sp, #0
   27854:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27856:	687b      	ldr	r3, [r7, #4]
   27858:	681b      	ldr	r3, [r3, #0]
   2785a:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   2785c:	68fb      	ldr	r3, [r7, #12]
   2785e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27860:	b29a      	uxth	r2, r3
   27862:	230a      	movs	r3, #10
   27864:	18fb      	adds	r3, r7, r3
   27866:	05d2      	lsls	r2, r2, #23
   27868:	0dd2      	lsrs	r2, r2, #23
   2786a:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   2786c:	687b      	ldr	r3, [r7, #4]
   2786e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27870:	220a      	movs	r2, #10
   27872:	18ba      	adds	r2, r7, r2
   27874:	8812      	ldrh	r2, [r2, #0]
   27876:	b2d2      	uxtb	r2, r2
   27878:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   2787a:	687b      	ldr	r3, [r7, #4]
   2787c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2787e:	1c5a      	adds	r2, r3, #1
   27880:	687b      	ldr	r3, [r7, #4]
   27882:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27884:	687b      	ldr	r3, [r7, #4]
   27886:	799b      	ldrb	r3, [r3, #6]
   27888:	2b01      	cmp	r3, #1
   2788a:	d10d      	bne.n	278a8 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   2788c:	687b      	ldr	r3, [r7, #4]
   2788e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27890:	220a      	movs	r2, #10
   27892:	18ba      	adds	r2, r7, r2
   27894:	8812      	ldrh	r2, [r2, #0]
   27896:	0a12      	lsrs	r2, r2, #8
   27898:	b292      	uxth	r2, r2
   2789a:	b2d2      	uxtb	r2, r2
   2789c:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   2789e:	687b      	ldr	r3, [r7, #4]
   278a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   278a2:	1c5a      	adds	r2, r3, #1
   278a4:	687b      	ldr	r3, [r7, #4]
   278a6:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   278a8:	687b      	ldr	r3, [r7, #4]
   278aa:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   278ac:	b29b      	uxth	r3, r3
   278ae:	3b01      	subs	r3, #1
   278b0:	b29a      	uxth	r2, r3
   278b2:	687b      	ldr	r3, [r7, #4]
   278b4:	861a      	strh	r2, [r3, #48]	; 0x30
}
   278b6:	46c0      	nop			; (mov r8, r8)
   278b8:	46bd      	mov	sp, r7
   278ba:	b004      	add	sp, #16
   278bc:	bd80      	pop	{r7, pc}
	...

000278c0 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   278c0:	b580      	push	{r7, lr}
   278c2:	b086      	sub	sp, #24
   278c4:	af00      	add	r7, sp, #0
   278c6:	0002      	movs	r2, r0
   278c8:	1dfb      	adds	r3, r7, #7
   278ca:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   278cc:	1dfb      	adds	r3, r7, #7
   278ce:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   278d0:	4b96      	ldr	r3, [pc, #600]	; (27b2c <_spi_interrupt_handler+0x26c>)
   278d2:	0092      	lsls	r2, r2, #2
   278d4:	58d3      	ldr	r3, [r2, r3]
   278d6:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   278d8:	697b      	ldr	r3, [r7, #20]
   278da:	681b      	ldr	r3, [r3, #0]
   278dc:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   278de:	697b      	ldr	r3, [r7, #20]
   278e0:	2237      	movs	r2, #55	; 0x37
   278e2:	5c9a      	ldrb	r2, [r3, r2]
   278e4:	697b      	ldr	r3, [r7, #20]
   278e6:	2136      	movs	r1, #54	; 0x36
   278e8:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   278ea:	230f      	movs	r3, #15
   278ec:	18fb      	adds	r3, r7, r3
   278ee:	400a      	ands	r2, r1
   278f0:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   278f2:	693b      	ldr	r3, [r7, #16]
   278f4:	7e1b      	ldrb	r3, [r3, #24]
   278f6:	b2da      	uxtb	r2, r3
   278f8:	230c      	movs	r3, #12
   278fa:	18fb      	adds	r3, r7, r3
   278fc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   278fe:	693b      	ldr	r3, [r7, #16]
   27900:	7d9b      	ldrb	r3, [r3, #22]
   27902:	b2db      	uxtb	r3, r3
   27904:	b29a      	uxth	r2, r3
   27906:	230c      	movs	r3, #12
   27908:	18fb      	adds	r3, r7, r3
   2790a:	210c      	movs	r1, #12
   2790c:	1879      	adds	r1, r7, r1
   2790e:	8809      	ldrh	r1, [r1, #0]
   27910:	400a      	ands	r2, r1
   27912:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   27914:	230c      	movs	r3, #12
   27916:	18fb      	adds	r3, r7, r3
   27918:	881b      	ldrh	r3, [r3, #0]
   2791a:	2201      	movs	r2, #1
   2791c:	4013      	ands	r3, r2
   2791e:	d038      	beq.n	27992 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   27920:	697b      	ldr	r3, [r7, #20]
   27922:	795b      	ldrb	r3, [r3, #5]
   27924:	2b01      	cmp	r3, #1
   27926:	d110      	bne.n	2794a <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   27928:	697b      	ldr	r3, [r7, #20]
   2792a:	7a5b      	ldrb	r3, [r3, #9]
   2792c:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   2792e:	2b00      	cmp	r3, #0
   27930:	d10b      	bne.n	2794a <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   27932:	697b      	ldr	r3, [r7, #20]
   27934:	0018      	movs	r0, r3
   27936:	4b7e      	ldr	r3, [pc, #504]	; (27b30 <_spi_interrupt_handler+0x270>)
   27938:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   2793a:	697b      	ldr	r3, [r7, #20]
   2793c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2793e:	b29b      	uxth	r3, r3
   27940:	2b00      	cmp	r3, #0
   27942:	d102      	bne.n	2794a <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   27944:	693b      	ldr	r3, [r7, #16]
   27946:	2201      	movs	r2, #1
   27948:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   2794a:	697b      	ldr	r3, [r7, #20]
   2794c:	795b      	ldrb	r3, [r3, #5]
		if (0
   2794e:	2b01      	cmp	r3, #1
   27950:	d11f      	bne.n	27992 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   27952:	697b      	ldr	r3, [r7, #20]
   27954:	7a5b      	ldrb	r3, [r3, #9]
   27956:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   27958:	2b00      	cmp	r3, #0
   2795a:	d01a      	beq.n	27992 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   2795c:	697b      	ldr	r3, [r7, #20]
   2795e:	0018      	movs	r0, r3
   27960:	4b74      	ldr	r3, [pc, #464]	; (27b34 <_spi_interrupt_handler+0x274>)
   27962:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   27964:	697b      	ldr	r3, [r7, #20]
   27966:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   27968:	b29b      	uxth	r3, r3
   2796a:	2b00      	cmp	r3, #0
   2796c:	d111      	bne.n	27992 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   2796e:	693b      	ldr	r3, [r7, #16]
   27970:	2201      	movs	r2, #1
   27972:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   27974:	697b      	ldr	r3, [r7, #20]
   27976:	7a5b      	ldrb	r3, [r3, #9]
   27978:	b2db      	uxtb	r3, r3
   2797a:	2b01      	cmp	r3, #1
   2797c:	d109      	bne.n	27992 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   2797e:	697b      	ldr	r3, [r7, #20]
   27980:	79db      	ldrb	r3, [r3, #7]
   27982:	2201      	movs	r2, #1
   27984:	4053      	eors	r3, r2
   27986:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   27988:	2b00      	cmp	r3, #0
   2798a:	d002      	beq.n	27992 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   2798c:	693b      	ldr	r3, [r7, #16]
   2798e:	2202      	movs	r2, #2
   27990:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   27992:	230c      	movs	r3, #12
   27994:	18fb      	adds	r3, r7, r3
   27996:	881b      	ldrh	r3, [r3, #0]
   27998:	2204      	movs	r2, #4
   2799a:	4013      	ands	r3, r2
   2799c:	d100      	bne.n	279a0 <_spi_interrupt_handler+0xe0>
   2799e:	e07e      	b.n	27a9e <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   279a0:	693b      	ldr	r3, [r7, #16]
   279a2:	8b5b      	ldrh	r3, [r3, #26]
   279a4:	b29b      	uxth	r3, r3
   279a6:	001a      	movs	r2, r3
   279a8:	2304      	movs	r3, #4
   279aa:	4013      	ands	r3, r2
   279ac:	d022      	beq.n	279f4 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   279ae:	697b      	ldr	r3, [r7, #20]
   279b0:	7a5b      	ldrb	r3, [r3, #9]
   279b2:	b2db      	uxtb	r3, r3
   279b4:	2b01      	cmp	r3, #1
   279b6:	d014      	beq.n	279e2 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   279b8:	697b      	ldr	r3, [r7, #20]
   279ba:	2238      	movs	r2, #56	; 0x38
   279bc:	211e      	movs	r1, #30
   279be:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   279c0:	697b      	ldr	r3, [r7, #20]
   279c2:	2203      	movs	r2, #3
   279c4:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   279c6:	693b      	ldr	r3, [r7, #16]
   279c8:	2205      	movs	r2, #5
   279ca:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   279cc:	230f      	movs	r3, #15
   279ce:	18fb      	adds	r3, r7, r3
   279d0:	781b      	ldrb	r3, [r3, #0]
   279d2:	2208      	movs	r2, #8
   279d4:	4013      	ands	r3, r2
   279d6:	d004      	beq.n	279e2 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   279d8:	697b      	ldr	r3, [r7, #20]
   279da:	699b      	ldr	r3, [r3, #24]
   279dc:	697a      	ldr	r2, [r7, #20]
   279de:	0010      	movs	r0, r2
   279e0:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   279e2:	693b      	ldr	r3, [r7, #16]
   279e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   279e6:	230a      	movs	r3, #10
   279e8:	18fb      	adds	r3, r7, r3
   279ea:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   279ec:	693b      	ldr	r3, [r7, #16]
   279ee:	2204      	movs	r2, #4
   279f0:	835a      	strh	r2, [r3, #26]
   279f2:	e054      	b.n	27a9e <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   279f4:	697b      	ldr	r3, [r7, #20]
   279f6:	7a5b      	ldrb	r3, [r3, #9]
   279f8:	b2db      	uxtb	r3, r3
   279fa:	2b01      	cmp	r3, #1
   279fc:	d11e      	bne.n	27a3c <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   279fe:	697b      	ldr	r3, [r7, #20]
   27a00:	0018      	movs	r0, r3
   27a02:	4b4d      	ldr	r3, [pc, #308]	; (27b38 <_spi_interrupt_handler+0x278>)
   27a04:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   27a06:	697b      	ldr	r3, [r7, #20]
   27a08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   27a0a:	b29b      	uxth	r3, r3
   27a0c:	2b00      	cmp	r3, #0
   27a0e:	d146      	bne.n	27a9e <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   27a10:	693b      	ldr	r3, [r7, #16]
   27a12:	2204      	movs	r2, #4
   27a14:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   27a16:	697b      	ldr	r3, [r7, #20]
   27a18:	2238      	movs	r2, #56	; 0x38
   27a1a:	2100      	movs	r1, #0
   27a1c:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   27a1e:	697b      	ldr	r3, [r7, #20]
   27a20:	2203      	movs	r2, #3
   27a22:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   27a24:	230f      	movs	r3, #15
   27a26:	18fb      	adds	r3, r7, r3
   27a28:	781b      	ldrb	r3, [r3, #0]
   27a2a:	2201      	movs	r2, #1
   27a2c:	4013      	ands	r3, r2
   27a2e:	d036      	beq.n	27a9e <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   27a30:	697b      	ldr	r3, [r7, #20]
   27a32:	68db      	ldr	r3, [r3, #12]
   27a34:	697a      	ldr	r2, [r7, #20]
   27a36:	0010      	movs	r0, r2
   27a38:	4798      	blx	r3
   27a3a:	e030      	b.n	27a9e <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   27a3c:	697b      	ldr	r3, [r7, #20]
   27a3e:	0018      	movs	r0, r3
   27a40:	4b3e      	ldr	r3, [pc, #248]	; (27b3c <_spi_interrupt_handler+0x27c>)
   27a42:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   27a44:	697b      	ldr	r3, [r7, #20]
   27a46:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   27a48:	b29b      	uxth	r3, r3
   27a4a:	2b00      	cmp	r3, #0
   27a4c:	d127      	bne.n	27a9e <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   27a4e:	697b      	ldr	r3, [r7, #20]
   27a50:	2238      	movs	r2, #56	; 0x38
   27a52:	2100      	movs	r1, #0
   27a54:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   27a56:	693b      	ldr	r3, [r7, #16]
   27a58:	2204      	movs	r2, #4
   27a5a:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   27a5c:	697b      	ldr	r3, [r7, #20]
   27a5e:	7a5b      	ldrb	r3, [r3, #9]
   27a60:	b2db      	uxtb	r3, r3
   27a62:	2b02      	cmp	r3, #2
   27a64:	d10b      	bne.n	27a7e <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   27a66:	230f      	movs	r3, #15
   27a68:	18fb      	adds	r3, r7, r3
   27a6a:	781b      	ldrb	r3, [r3, #0]
   27a6c:	2204      	movs	r2, #4
   27a6e:	4013      	ands	r3, r2
   27a70:	d015      	beq.n	27a9e <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   27a72:	697b      	ldr	r3, [r7, #20]
   27a74:	695b      	ldr	r3, [r3, #20]
   27a76:	697a      	ldr	r2, [r7, #20]
   27a78:	0010      	movs	r0, r2
   27a7a:	4798      	blx	r3
   27a7c:	e00f      	b.n	27a9e <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   27a7e:	697b      	ldr	r3, [r7, #20]
   27a80:	7a5b      	ldrb	r3, [r3, #9]
   27a82:	b2db      	uxtb	r3, r3
   27a84:	2b00      	cmp	r3, #0
   27a86:	d10a      	bne.n	27a9e <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   27a88:	230f      	movs	r3, #15
   27a8a:	18fb      	adds	r3, r7, r3
   27a8c:	781b      	ldrb	r3, [r3, #0]
   27a8e:	2202      	movs	r2, #2
   27a90:	4013      	ands	r3, r2
   27a92:	d004      	beq.n	27a9e <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   27a94:	697b      	ldr	r3, [r7, #20]
   27a96:	691b      	ldr	r3, [r3, #16]
   27a98:	697a      	ldr	r2, [r7, #20]
   27a9a:	0010      	movs	r0, r2
   27a9c:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   27a9e:	230c      	movs	r3, #12
   27aa0:	18fb      	adds	r3, r7, r3
   27aa2:	881b      	ldrh	r3, [r3, #0]
   27aa4:	2202      	movs	r2, #2
   27aa6:	4013      	ands	r3, r2
   27aa8:	d024      	beq.n	27af4 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   27aaa:	697b      	ldr	r3, [r7, #20]
   27aac:	795b      	ldrb	r3, [r3, #5]
   27aae:	2b01      	cmp	r3, #1
   27ab0:	d120      	bne.n	27af4 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   27ab2:	697b      	ldr	r3, [r7, #20]
   27ab4:	7a5b      	ldrb	r3, [r3, #9]
   27ab6:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   27ab8:	2b01      	cmp	r3, #1
   27aba:	d11b      	bne.n	27af4 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   27abc:	697b      	ldr	r3, [r7, #20]
   27abe:	79db      	ldrb	r3, [r3, #7]
   27ac0:	2201      	movs	r2, #1
   27ac2:	4053      	eors	r3, r2
   27ac4:	b2db      	uxtb	r3, r3
   27ac6:	2b00      	cmp	r3, #0
   27ac8:	d014      	beq.n	27af4 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   27aca:	693b      	ldr	r3, [r7, #16]
   27acc:	2202      	movs	r2, #2
   27ace:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   27ad0:	697b      	ldr	r3, [r7, #20]
   27ad2:	2203      	movs	r2, #3
   27ad4:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   27ad6:	697b      	ldr	r3, [r7, #20]
   27ad8:	2238      	movs	r2, #56	; 0x38
   27ada:	2100      	movs	r1, #0
   27adc:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   27ade:	230f      	movs	r3, #15
   27ae0:	18fb      	adds	r3, r7, r3
   27ae2:	781b      	ldrb	r3, [r3, #0]
   27ae4:	2201      	movs	r2, #1
   27ae6:	4013      	ands	r3, r2
   27ae8:	d004      	beq.n	27af4 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   27aea:	697b      	ldr	r3, [r7, #20]
   27aec:	68db      	ldr	r3, [r3, #12]
   27aee:	697a      	ldr	r2, [r7, #20]
   27af0:	0010      	movs	r0, r2
   27af2:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   27af4:	230c      	movs	r3, #12
   27af6:	18fb      	adds	r3, r7, r3
   27af8:	881b      	ldrh	r3, [r3, #0]
   27afa:	2280      	movs	r2, #128	; 0x80
   27afc:	4013      	ands	r3, r2
   27afe:	d010      	beq.n	27b22 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   27b00:	693b      	ldr	r3, [r7, #16]
   27b02:	2280      	movs	r2, #128	; 0x80
   27b04:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   27b06:	693b      	ldr	r3, [r7, #16]
   27b08:	2280      	movs	r2, #128	; 0x80
   27b0a:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   27b0c:	230f      	movs	r3, #15
   27b0e:	18fb      	adds	r3, r7, r3
   27b10:	781b      	ldrb	r3, [r3, #0]
   27b12:	2240      	movs	r2, #64	; 0x40
   27b14:	4013      	ands	r3, r2
   27b16:	d004      	beq.n	27b22 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   27b18:	697b      	ldr	r3, [r7, #20]
   27b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27b1c:	697a      	ldr	r2, [r7, #20]
   27b1e:	0010      	movs	r0, r2
   27b20:	4798      	blx	r3
		}
	}
#  endif
}
   27b22:	46c0      	nop			; (mov r8, r8)
   27b24:	46bd      	mov	sp, r7
   27b26:	b006      	add	sp, #24
   27b28:	bd80      	pop	{r7, pc}
   27b2a:	46c0      	nop			; (mov r8, r8)
   27b2c:	200059b8 	.word	0x200059b8
   27b30:	000277e5 	.word	0x000277e5
   27b34:	00027769 	.word	0x00027769
   27b38:	00027819 	.word	0x00027819
   27b3c:	0002784f 	.word	0x0002784f

00027b40 <system_gclk_chan_get_config_defaults>:
{
   27b40:	b580      	push	{r7, lr}
   27b42:	b082      	sub	sp, #8
   27b44:	af00      	add	r7, sp, #0
   27b46:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27b48:	687b      	ldr	r3, [r7, #4]
   27b4a:	2200      	movs	r2, #0
   27b4c:	701a      	strb	r2, [r3, #0]
}
   27b4e:	46c0      	nop			; (mov r8, r8)
   27b50:	46bd      	mov	sp, r7
   27b52:	b002      	add	sp, #8
   27b54:	bd80      	pop	{r7, pc}
	...

00027b58 <system_apb_clock_set_mask>:
{
   27b58:	b580      	push	{r7, lr}
   27b5a:	b082      	sub	sp, #8
   27b5c:	af00      	add	r7, sp, #0
   27b5e:	0002      	movs	r2, r0
   27b60:	6039      	str	r1, [r7, #0]
   27b62:	1dfb      	adds	r3, r7, #7
   27b64:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   27b66:	1dfb      	adds	r3, r7, #7
   27b68:	781b      	ldrb	r3, [r3, #0]
   27b6a:	2b01      	cmp	r3, #1
   27b6c:	d00a      	beq.n	27b84 <system_apb_clock_set_mask+0x2c>
   27b6e:	2b02      	cmp	r3, #2
   27b70:	d00f      	beq.n	27b92 <system_apb_clock_set_mask+0x3a>
   27b72:	2b00      	cmp	r3, #0
   27b74:	d114      	bne.n	27ba0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   27b76:	4b0e      	ldr	r3, [pc, #56]	; (27bb0 <system_apb_clock_set_mask+0x58>)
   27b78:	4a0d      	ldr	r2, [pc, #52]	; (27bb0 <system_apb_clock_set_mask+0x58>)
   27b7a:	6991      	ldr	r1, [r2, #24]
   27b7c:	683a      	ldr	r2, [r7, #0]
   27b7e:	430a      	orrs	r2, r1
   27b80:	619a      	str	r2, [r3, #24]
			break;
   27b82:	e00f      	b.n	27ba4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   27b84:	4b0a      	ldr	r3, [pc, #40]	; (27bb0 <system_apb_clock_set_mask+0x58>)
   27b86:	4a0a      	ldr	r2, [pc, #40]	; (27bb0 <system_apb_clock_set_mask+0x58>)
   27b88:	69d1      	ldr	r1, [r2, #28]
   27b8a:	683a      	ldr	r2, [r7, #0]
   27b8c:	430a      	orrs	r2, r1
   27b8e:	61da      	str	r2, [r3, #28]
			break;
   27b90:	e008      	b.n	27ba4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   27b92:	4b07      	ldr	r3, [pc, #28]	; (27bb0 <system_apb_clock_set_mask+0x58>)
   27b94:	4a06      	ldr	r2, [pc, #24]	; (27bb0 <system_apb_clock_set_mask+0x58>)
   27b96:	6a11      	ldr	r1, [r2, #32]
   27b98:	683a      	ldr	r2, [r7, #0]
   27b9a:	430a      	orrs	r2, r1
   27b9c:	621a      	str	r2, [r3, #32]
			break;
   27b9e:	e001      	b.n	27ba4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   27ba0:	2317      	movs	r3, #23
   27ba2:	e000      	b.n	27ba6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   27ba4:	2300      	movs	r3, #0
}
   27ba6:	0018      	movs	r0, r3
   27ba8:	46bd      	mov	sp, r7
   27baa:	b002      	add	sp, #8
   27bac:	bd80      	pop	{r7, pc}
   27bae:	46c0      	nop			; (mov r8, r8)
   27bb0:	40000400 	.word	0x40000400

00027bb4 <system_pinmux_get_config_defaults>:
{
   27bb4:	b580      	push	{r7, lr}
   27bb6:	b082      	sub	sp, #8
   27bb8:	af00      	add	r7, sp, #0
   27bba:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   27bbc:	687b      	ldr	r3, [r7, #4]
   27bbe:	2280      	movs	r2, #128	; 0x80
   27bc0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27bc2:	687b      	ldr	r3, [r7, #4]
   27bc4:	2200      	movs	r2, #0
   27bc6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   27bc8:	687b      	ldr	r3, [r7, #4]
   27bca:	2201      	movs	r2, #1
   27bcc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   27bce:	687b      	ldr	r3, [r7, #4]
   27bd0:	2200      	movs	r2, #0
   27bd2:	70da      	strb	r2, [r3, #3]
}
   27bd4:	46c0      	nop			; (mov r8, r8)
   27bd6:	46bd      	mov	sp, r7
   27bd8:	b002      	add	sp, #8
   27bda:	bd80      	pop	{r7, pc}

00027bdc <system_is_debugger_present>:
{
   27bdc:	b580      	push	{r7, lr}
   27bde:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   27be0:	4b05      	ldr	r3, [pc, #20]	; (27bf8 <system_is_debugger_present+0x1c>)
   27be2:	789b      	ldrb	r3, [r3, #2]
   27be4:	b2db      	uxtb	r3, r3
   27be6:	001a      	movs	r2, r3
   27be8:	2302      	movs	r3, #2
   27bea:	4013      	ands	r3, r2
   27bec:	1e5a      	subs	r2, r3, #1
   27bee:	4193      	sbcs	r3, r2
   27bf0:	b2db      	uxtb	r3, r3
}
   27bf2:	0018      	movs	r0, r3
   27bf4:	46bd      	mov	sp, r7
   27bf6:	bd80      	pop	{r7, pc}
   27bf8:	41002000 	.word	0x41002000

00027bfc <usart_is_syncing>:
{
   27bfc:	b580      	push	{r7, lr}
   27bfe:	b084      	sub	sp, #16
   27c00:	af00      	add	r7, sp, #0
   27c02:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   27c04:	687b      	ldr	r3, [r7, #4]
   27c06:	681b      	ldr	r3, [r3, #0]
   27c08:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   27c0a:	68fb      	ldr	r3, [r7, #12]
   27c0c:	69db      	ldr	r3, [r3, #28]
   27c0e:	1e5a      	subs	r2, r3, #1
   27c10:	4193      	sbcs	r3, r2
   27c12:	b2db      	uxtb	r3, r3
}
   27c14:	0018      	movs	r0, r3
   27c16:	46bd      	mov	sp, r7
   27c18:	b004      	add	sp, #16
   27c1a:	bd80      	pop	{r7, pc}

00027c1c <_usart_wait_for_sync>:
{
   27c1c:	b580      	push	{r7, lr}
   27c1e:	b082      	sub	sp, #8
   27c20:	af00      	add	r7, sp, #0
   27c22:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   27c24:	46c0      	nop			; (mov r8, r8)
   27c26:	687b      	ldr	r3, [r7, #4]
   27c28:	0018      	movs	r0, r3
   27c2a:	4b04      	ldr	r3, [pc, #16]	; (27c3c <_usart_wait_for_sync+0x20>)
   27c2c:	4798      	blx	r3
   27c2e:	1e03      	subs	r3, r0, #0
   27c30:	d1f9      	bne.n	27c26 <_usart_wait_for_sync+0xa>
}
   27c32:	46c0      	nop			; (mov r8, r8)
   27c34:	46bd      	mov	sp, r7
   27c36:	b002      	add	sp, #8
   27c38:	bd80      	pop	{r7, pc}
   27c3a:	46c0      	nop			; (mov r8, r8)
   27c3c:	00027bfd 	.word	0x00027bfd

00027c40 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   27c40:	b5b0      	push	{r4, r5, r7, lr}
   27c42:	b08c      	sub	sp, #48	; 0x30
   27c44:	af02      	add	r7, sp, #8
   27c46:	6078      	str	r0, [r7, #4]
   27c48:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   27c4a:	687b      	ldr	r3, [r7, #4]
   27c4c:	681b      	ldr	r3, [r3, #0]
   27c4e:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27c50:	687b      	ldr	r3, [r7, #4]
   27c52:	681b      	ldr	r3, [r3, #0]
   27c54:	0018      	movs	r0, r3
   27c56:	4bab      	ldr	r3, [pc, #684]	; (27f04 <_usart_set_config+0x2c4>)
   27c58:	4798      	blx	r3
   27c5a:	0003      	movs	r3, r0
   27c5c:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27c5e:	697b      	ldr	r3, [r7, #20]
   27c60:	3314      	adds	r3, #20
   27c62:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   27c64:	2300      	movs	r3, #0
   27c66:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   27c68:	2300      	movs	r3, #0
   27c6a:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   27c6c:	230a      	movs	r3, #10
   27c6e:	18fb      	adds	r3, r7, r3
   27c70:	2200      	movs	r2, #0
   27c72:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   27c74:	231f      	movs	r3, #31
   27c76:	18fb      	adds	r3, r7, r3
   27c78:	2200      	movs	r2, #0
   27c7a:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   27c7c:	231e      	movs	r3, #30
   27c7e:	18fb      	adds	r3, r7, r3
   27c80:	2210      	movs	r2, #16
   27c82:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   27c84:	683b      	ldr	r3, [r7, #0]
   27c86:	8a1b      	ldrh	r3, [r3, #16]
   27c88:	2280      	movs	r2, #128	; 0x80
   27c8a:	01d2      	lsls	r2, r2, #7
   27c8c:	4293      	cmp	r3, r2
   27c8e:	d01c      	beq.n	27cca <_usart_set_config+0x8a>
   27c90:	2280      	movs	r2, #128	; 0x80
   27c92:	01d2      	lsls	r2, r2, #7
   27c94:	4293      	cmp	r3, r2
   27c96:	dc06      	bgt.n	27ca6 <_usart_set_config+0x66>
   27c98:	2b00      	cmp	r3, #0
   27c9a:	d00d      	beq.n	27cb8 <_usart_set_config+0x78>
   27c9c:	2280      	movs	r2, #128	; 0x80
   27c9e:	0192      	lsls	r2, r2, #6
   27ca0:	4293      	cmp	r3, r2
   27ca2:	d024      	beq.n	27cee <_usart_set_config+0xae>
   27ca4:	e035      	b.n	27d12 <_usart_set_config+0xd2>
   27ca6:	22c0      	movs	r2, #192	; 0xc0
   27ca8:	01d2      	lsls	r2, r2, #7
   27caa:	4293      	cmp	r3, r2
   27cac:	d028      	beq.n	27d00 <_usart_set_config+0xc0>
   27cae:	2280      	movs	r2, #128	; 0x80
   27cb0:	0212      	lsls	r2, r2, #8
   27cb2:	4293      	cmp	r3, r2
   27cb4:	d012      	beq.n	27cdc <_usart_set_config+0x9c>
   27cb6:	e02c      	b.n	27d12 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   27cb8:	231f      	movs	r3, #31
   27cba:	18fb      	adds	r3, r7, r3
   27cbc:	2200      	movs	r2, #0
   27cbe:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   27cc0:	231e      	movs	r3, #30
   27cc2:	18fb      	adds	r3, r7, r3
   27cc4:	2210      	movs	r2, #16
   27cc6:	701a      	strb	r2, [r3, #0]
			break;
   27cc8:	e023      	b.n	27d12 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   27cca:	231f      	movs	r3, #31
   27ccc:	18fb      	adds	r3, r7, r3
   27cce:	2200      	movs	r2, #0
   27cd0:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   27cd2:	231e      	movs	r3, #30
   27cd4:	18fb      	adds	r3, r7, r3
   27cd6:	2208      	movs	r2, #8
   27cd8:	701a      	strb	r2, [r3, #0]
			break;
   27cda:	e01a      	b.n	27d12 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   27cdc:	231f      	movs	r3, #31
   27cde:	18fb      	adds	r3, r7, r3
   27ce0:	2200      	movs	r2, #0
   27ce2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   27ce4:	231e      	movs	r3, #30
   27ce6:	18fb      	adds	r3, r7, r3
   27ce8:	2203      	movs	r2, #3
   27cea:	701a      	strb	r2, [r3, #0]
			break;
   27cec:	e011      	b.n	27d12 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   27cee:	231f      	movs	r3, #31
   27cf0:	18fb      	adds	r3, r7, r3
   27cf2:	2201      	movs	r2, #1
   27cf4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   27cf6:	231e      	movs	r3, #30
   27cf8:	18fb      	adds	r3, r7, r3
   27cfa:	2210      	movs	r2, #16
   27cfc:	701a      	strb	r2, [r3, #0]
			break;
   27cfe:	e008      	b.n	27d12 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   27d00:	231f      	movs	r3, #31
   27d02:	18fb      	adds	r3, r7, r3
   27d04:	2201      	movs	r2, #1
   27d06:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   27d08:	231e      	movs	r3, #30
   27d0a:	18fb      	adds	r3, r7, r3
   27d0c:	2208      	movs	r2, #8
   27d0e:	701a      	strb	r2, [r3, #0]
			break;
   27d10:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   27d12:	683b      	ldr	r3, [r7, #0]
   27d14:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   27d16:	683b      	ldr	r3, [r7, #0]
   27d18:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   27d1a:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   27d1c:	683b      	ldr	r3, [r7, #0]
   27d1e:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   27d20:	4313      	orrs	r3, r2
		config->sample_rate |
   27d22:	683a      	ldr	r2, [r7, #0]
   27d24:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   27d26:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   27d28:	683a      	ldr	r2, [r7, #0]
   27d2a:	7e12      	ldrb	r2, [r2, #24]
   27d2c:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   27d2e:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   27d30:	683a      	ldr	r2, [r7, #0]
   27d32:	2126      	movs	r1, #38	; 0x26
   27d34:	5c52      	ldrb	r2, [r2, r1]
   27d36:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   27d38:	4313      	orrs	r3, r2
   27d3a:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   27d3c:	231d      	movs	r3, #29
   27d3e:	18fb      	adds	r3, r7, r3
   27d40:	2200      	movs	r2, #0
   27d42:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   27d44:	683b      	ldr	r3, [r7, #0]
   27d46:	685b      	ldr	r3, [r3, #4]
   27d48:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   27d4a:	68fb      	ldr	r3, [r7, #12]
   27d4c:	2b00      	cmp	r3, #0
   27d4e:	d01e      	beq.n	27d8e <_usart_set_config+0x14e>
   27d50:	2280      	movs	r2, #128	; 0x80
   27d52:	0552      	lsls	r2, r2, #21
   27d54:	4293      	cmp	r3, r2
   27d56:	d14f      	bne.n	27df8 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   27d58:	683b      	ldr	r3, [r7, #0]
   27d5a:	2227      	movs	r2, #39	; 0x27
   27d5c:	5c9b      	ldrb	r3, [r3, r2]
   27d5e:	2201      	movs	r2, #1
   27d60:	4053      	eors	r3, r2
   27d62:	b2db      	uxtb	r3, r3
   27d64:	2b00      	cmp	r3, #0
   27d66:	d046      	beq.n	27df6 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   27d68:	683b      	ldr	r3, [r7, #0]
   27d6a:	6a1d      	ldr	r5, [r3, #32]
   27d6c:	693b      	ldr	r3, [r7, #16]
   27d6e:	b2db      	uxtb	r3, r3
   27d70:	0018      	movs	r0, r3
   27d72:	4b65      	ldr	r3, [pc, #404]	; (27f08 <_usart_set_config+0x2c8>)
   27d74:	4798      	blx	r3
   27d76:	0001      	movs	r1, r0
   27d78:	231d      	movs	r3, #29
   27d7a:	18fc      	adds	r4, r7, r3
   27d7c:	230a      	movs	r3, #10
   27d7e:	18fb      	adds	r3, r7, r3
   27d80:	001a      	movs	r2, r3
   27d82:	0028      	movs	r0, r5
   27d84:	4b61      	ldr	r3, [pc, #388]	; (27f0c <_usart_set_config+0x2cc>)
   27d86:	4798      	blx	r3
   27d88:	0003      	movs	r3, r0
   27d8a:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   27d8c:	e033      	b.n	27df6 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   27d8e:	683b      	ldr	r3, [r7, #0]
   27d90:	2227      	movs	r2, #39	; 0x27
   27d92:	5c9b      	ldrb	r3, [r3, r2]
   27d94:	2b00      	cmp	r3, #0
   27d96:	d014      	beq.n	27dc2 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   27d98:	683b      	ldr	r3, [r7, #0]
   27d9a:	6a18      	ldr	r0, [r3, #32]
   27d9c:	683b      	ldr	r3, [r7, #0]
   27d9e:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   27da0:	231d      	movs	r3, #29
   27da2:	18fc      	adds	r4, r7, r3
   27da4:	231f      	movs	r3, #31
   27da6:	18fb      	adds	r3, r7, r3
   27da8:	781d      	ldrb	r5, [r3, #0]
   27daa:	230a      	movs	r3, #10
   27dac:	18fa      	adds	r2, r7, r3
   27dae:	231e      	movs	r3, #30
   27db0:	18fb      	adds	r3, r7, r3
   27db2:	781b      	ldrb	r3, [r3, #0]
   27db4:	9300      	str	r3, [sp, #0]
   27db6:	002b      	movs	r3, r5
   27db8:	4d55      	ldr	r5, [pc, #340]	; (27f10 <_usart_set_config+0x2d0>)
   27dba:	47a8      	blx	r5
   27dbc:	0003      	movs	r3, r0
   27dbe:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   27dc0:	e01a      	b.n	27df8 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   27dc2:	683b      	ldr	r3, [r7, #0]
   27dc4:	6a1d      	ldr	r5, [r3, #32]
   27dc6:	693b      	ldr	r3, [r7, #16]
   27dc8:	b2db      	uxtb	r3, r3
   27dca:	0018      	movs	r0, r3
   27dcc:	4b4e      	ldr	r3, [pc, #312]	; (27f08 <_usart_set_config+0x2c8>)
   27dce:	4798      	blx	r3
				status_code =
   27dd0:	231d      	movs	r3, #29
   27dd2:	18fc      	adds	r4, r7, r3
   27dd4:	231f      	movs	r3, #31
   27dd6:	18fb      	adds	r3, r7, r3
   27dd8:	7819      	ldrb	r1, [r3, #0]
   27dda:	230a      	movs	r3, #10
   27ddc:	18fa      	adds	r2, r7, r3
   27dde:	231e      	movs	r3, #30
   27de0:	18fb      	adds	r3, r7, r3
   27de2:	781b      	ldrb	r3, [r3, #0]
   27de4:	9300      	str	r3, [sp, #0]
   27de6:	000b      	movs	r3, r1
   27de8:	0001      	movs	r1, r0
   27dea:	0028      	movs	r0, r5
   27dec:	4d48      	ldr	r5, [pc, #288]	; (27f10 <_usart_set_config+0x2d0>)
   27dee:	47a8      	blx	r5
   27df0:	0003      	movs	r3, r0
   27df2:	7023      	strb	r3, [r4, #0]
			break;
   27df4:	e000      	b.n	27df8 <_usart_set_config+0x1b8>
			break;
   27df6:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   27df8:	231d      	movs	r3, #29
   27dfa:	18fb      	adds	r3, r7, r3
   27dfc:	781b      	ldrb	r3, [r3, #0]
   27dfe:	2b00      	cmp	r3, #0
   27e00:	d003      	beq.n	27e0a <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   27e02:	231d      	movs	r3, #29
   27e04:	18fb      	adds	r3, r7, r3
   27e06:	781b      	ldrb	r3, [r3, #0]
   27e08:	e077      	b.n	27efa <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   27e0a:	683b      	ldr	r3, [r7, #0]
   27e0c:	7e5b      	ldrb	r3, [r3, #25]
   27e0e:	2b00      	cmp	r3, #0
   27e10:	d003      	beq.n	27e1a <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   27e12:	683b      	ldr	r3, [r7, #0]
   27e14:	7e9a      	ldrb	r2, [r3, #26]
   27e16:	69bb      	ldr	r3, [r7, #24]
   27e18:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   27e1a:	687b      	ldr	r3, [r7, #4]
   27e1c:	0018      	movs	r0, r3
   27e1e:	4b3d      	ldr	r3, [pc, #244]	; (27f14 <_usart_set_config+0x2d4>)
   27e20:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   27e22:	230a      	movs	r3, #10
   27e24:	18fb      	adds	r3, r7, r3
   27e26:	881a      	ldrh	r2, [r3, #0]
   27e28:	69bb      	ldr	r3, [r7, #24]
   27e2a:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   27e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27e2e:	68fb      	ldr	r3, [r7, #12]
   27e30:	4313      	orrs	r3, r2
   27e32:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   27e34:	683b      	ldr	r3, [r7, #0]
   27e36:	2227      	movs	r2, #39	; 0x27
   27e38:	5c9b      	ldrb	r3, [r3, r2]
   27e3a:	2201      	movs	r2, #1
   27e3c:	4053      	eors	r3, r2
   27e3e:	b2db      	uxtb	r3, r3
   27e40:	2b00      	cmp	r3, #0
   27e42:	d003      	beq.n	27e4c <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   27e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27e46:	2204      	movs	r2, #4
   27e48:	4313      	orrs	r3, r2
   27e4a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   27e4c:	683b      	ldr	r3, [r7, #0]
   27e4e:	7e5b      	ldrb	r3, [r3, #25]
   27e50:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   27e52:	683b      	ldr	r3, [r7, #0]
   27e54:	7f1b      	ldrb	r3, [r3, #28]
   27e56:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   27e58:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   27e5a:	683b      	ldr	r3, [r7, #0]
   27e5c:	7f5b      	ldrb	r3, [r3, #29]
   27e5e:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   27e60:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   27e62:	683b      	ldr	r3, [r7, #0]
   27e64:	2124      	movs	r1, #36	; 0x24
   27e66:	5c5b      	ldrb	r3, [r3, r1]
   27e68:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   27e6a:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   27e6c:	683b      	ldr	r3, [r7, #0]
   27e6e:	2125      	movs	r1, #37	; 0x25
   27e70:	5c5b      	ldrb	r3, [r3, r1]
   27e72:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   27e74:	4313      	orrs	r3, r2
	ctrlb =  
   27e76:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   27e78:	683b      	ldr	r3, [r7, #0]
   27e7a:	7a9b      	ldrb	r3, [r3, #10]
   27e7c:	001a      	movs	r2, r3
   27e7e:	6a3b      	ldr	r3, [r7, #32]
   27e80:	4313      	orrs	r3, r2
   27e82:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   27e84:	683b      	ldr	r3, [r7, #0]
   27e86:	7adb      	ldrb	r3, [r3, #11]
   27e88:	001a      	movs	r2, r3
   27e8a:	6a3b      	ldr	r3, [r7, #32]
   27e8c:	4313      	orrs	r3, r2
   27e8e:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   27e90:	683b      	ldr	r3, [r7, #0]
   27e92:	891b      	ldrh	r3, [r3, #8]
   27e94:	2bff      	cmp	r3, #255	; 0xff
   27e96:	d00b      	beq.n	27eb0 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   27e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27e9a:	2280      	movs	r2, #128	; 0x80
   27e9c:	0452      	lsls	r2, r2, #17
   27e9e:	4313      	orrs	r3, r2
   27ea0:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   27ea2:	683b      	ldr	r3, [r7, #0]
   27ea4:	891b      	ldrh	r3, [r3, #8]
   27ea6:	001a      	movs	r2, r3
   27ea8:	6a3b      	ldr	r3, [r7, #32]
   27eaa:	4313      	orrs	r3, r2
   27eac:	623b      	str	r3, [r7, #32]
   27eae:	e008      	b.n	27ec2 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   27eb0:	683b      	ldr	r3, [r7, #0]
   27eb2:	7edb      	ldrb	r3, [r3, #27]
   27eb4:	2b00      	cmp	r3, #0
   27eb6:	d004      	beq.n	27ec2 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   27eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27eba:	2280      	movs	r2, #128	; 0x80
   27ebc:	04d2      	lsls	r2, r2, #19
   27ebe:	4313      	orrs	r3, r2
   27ec0:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   27ec2:	683b      	ldr	r3, [r7, #0]
   27ec4:	222c      	movs	r2, #44	; 0x2c
   27ec6:	5c9b      	ldrb	r3, [r3, r2]
   27ec8:	2b00      	cmp	r3, #0
   27eca:	d103      	bne.n	27ed4 <_usart_set_config+0x294>
   27ecc:	4b12      	ldr	r3, [pc, #72]	; (27f18 <_usart_set_config+0x2d8>)
   27ece:	4798      	blx	r3
   27ed0:	1e03      	subs	r3, r0, #0
   27ed2:	d003      	beq.n	27edc <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   27ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27ed6:	2280      	movs	r2, #128	; 0x80
   27ed8:	4313      	orrs	r3, r2
   27eda:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   27edc:	687b      	ldr	r3, [r7, #4]
   27ede:	0018      	movs	r0, r3
   27ee0:	4b0c      	ldr	r3, [pc, #48]	; (27f14 <_usart_set_config+0x2d4>)
   27ee2:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   27ee4:	69bb      	ldr	r3, [r7, #24]
   27ee6:	6a3a      	ldr	r2, [r7, #32]
   27ee8:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   27eea:	687b      	ldr	r3, [r7, #4]
   27eec:	0018      	movs	r0, r3
   27eee:	4b09      	ldr	r3, [pc, #36]	; (27f14 <_usart_set_config+0x2d4>)
   27ef0:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   27ef2:	69bb      	ldr	r3, [r7, #24]
   27ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27ef6:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   27ef8:	2300      	movs	r3, #0
}
   27efa:	0018      	movs	r0, r3
   27efc:	46bd      	mov	sp, r7
   27efe:	b00a      	add	sp, #40	; 0x28
   27f00:	bdb0      	pop	{r4, r5, r7, pc}
   27f02:	46c0      	nop			; (mov r8, r8)
   27f04:	000269e9 	.word	0x000269e9
   27f08:	0002939d 	.word	0x0002939d
   27f0c:	00026563 	.word	0x00026563
   27f10:	000265e1 	.word	0x000265e1
   27f14:	00027c1d 	.word	0x00027c1d
   27f18:	00027bdd 	.word	0x00027bdd

00027f1c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   27f1c:	b590      	push	{r4, r7, lr}
   27f1e:	b093      	sub	sp, #76	; 0x4c
   27f20:	af00      	add	r7, sp, #0
   27f22:	60f8      	str	r0, [r7, #12]
   27f24:	60b9      	str	r1, [r7, #8]
   27f26:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   27f28:	233b      	movs	r3, #59	; 0x3b
   27f2a:	18fb      	adds	r3, r7, r3
   27f2c:	2200      	movs	r2, #0
   27f2e:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   27f30:	68fb      	ldr	r3, [r7, #12]
   27f32:	68ba      	ldr	r2, [r7, #8]
   27f34:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   27f36:	68fb      	ldr	r3, [r7, #12]
   27f38:	681b      	ldr	r3, [r3, #0]
   27f3a:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27f3c:	68fb      	ldr	r3, [r7, #12]
   27f3e:	681b      	ldr	r3, [r3, #0]
   27f40:	0018      	movs	r0, r3
   27f42:	4b86      	ldr	r3, [pc, #536]	; (2815c <usart_init+0x240>)
   27f44:	4798      	blx	r3
   27f46:	0003      	movs	r3, r0
   27f48:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   27f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27f4c:	3302      	adds	r3, #2
   27f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27f52:	3314      	adds	r3, #20
   27f54:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   27f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27f58:	681b      	ldr	r3, [r3, #0]
   27f5a:	2201      	movs	r2, #1
   27f5c:	4013      	ands	r3, r2
   27f5e:	d001      	beq.n	27f64 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   27f60:	2305      	movs	r3, #5
   27f62:	e0f6      	b.n	28152 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   27f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27f66:	681b      	ldr	r3, [r3, #0]
   27f68:	2202      	movs	r2, #2
   27f6a:	4013      	ands	r3, r2
   27f6c:	d001      	beq.n	27f72 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   27f6e:	231c      	movs	r3, #28
   27f70:	e0ef      	b.n	28152 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   27f72:	2201      	movs	r2, #1
   27f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27f76:	409a      	lsls	r2, r3
   27f78:	0013      	movs	r3, r2
   27f7a:	0019      	movs	r1, r3
   27f7c:	2002      	movs	r0, #2
   27f7e:	4b78      	ldr	r3, [pc, #480]	; (28160 <usart_init+0x244>)
   27f80:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27f82:	2324      	movs	r3, #36	; 0x24
   27f84:	18fb      	adds	r3, r7, r3
   27f86:	0018      	movs	r0, r3
   27f88:	4b76      	ldr	r3, [pc, #472]	; (28164 <usart_init+0x248>)
   27f8a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   27f8c:	687b      	ldr	r3, [r7, #4]
   27f8e:	222d      	movs	r2, #45	; 0x2d
   27f90:	5c9a      	ldrb	r2, [r3, r2]
   27f92:	2324      	movs	r3, #36	; 0x24
   27f94:	18fb      	adds	r3, r7, r3
   27f96:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   27f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
   27f9a:	b2db      	uxtb	r3, r3
   27f9c:	2224      	movs	r2, #36	; 0x24
   27f9e:	18ba      	adds	r2, r7, r2
   27fa0:	0011      	movs	r1, r2
   27fa2:	0018      	movs	r0, r3
   27fa4:	4b70      	ldr	r3, [pc, #448]	; (28168 <usart_init+0x24c>)
   27fa6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   27fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   27faa:	b2db      	uxtb	r3, r3
   27fac:	0018      	movs	r0, r3
   27fae:	4b6f      	ldr	r3, [pc, #444]	; (2816c <usart_init+0x250>)
   27fb0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   27fb2:	687b      	ldr	r3, [r7, #4]
   27fb4:	222d      	movs	r2, #45	; 0x2d
   27fb6:	5c9b      	ldrb	r3, [r3, r2]
   27fb8:	2100      	movs	r1, #0
   27fba:	0018      	movs	r0, r3
   27fbc:	4b6c      	ldr	r3, [pc, #432]	; (28170 <usart_init+0x254>)
   27fbe:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   27fc0:	687b      	ldr	r3, [r7, #4]
   27fc2:	7ada      	ldrb	r2, [r3, #11]
   27fc4:	68fb      	ldr	r3, [r7, #12]
   27fc6:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   27fc8:	687b      	ldr	r3, [r7, #4]
   27fca:	2224      	movs	r2, #36	; 0x24
   27fcc:	5c9a      	ldrb	r2, [r3, r2]
   27fce:	68fb      	ldr	r3, [r7, #12]
   27fd0:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   27fd2:	687b      	ldr	r3, [r7, #4]
   27fd4:	2225      	movs	r2, #37	; 0x25
   27fd6:	5c9a      	ldrb	r2, [r3, r2]
   27fd8:	68fb      	ldr	r3, [r7, #12]
   27fda:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   27fdc:	687b      	ldr	r3, [r7, #4]
   27fde:	7eda      	ldrb	r2, [r3, #27]
   27fe0:	68fb      	ldr	r3, [r7, #12]
   27fe2:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   27fe4:	687b      	ldr	r3, [r7, #4]
   27fe6:	7f1a      	ldrb	r2, [r3, #28]
   27fe8:	68fb      	ldr	r3, [r7, #12]
   27fea:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   27fec:	233b      	movs	r3, #59	; 0x3b
   27fee:	18fc      	adds	r4, r7, r3
   27ff0:	687a      	ldr	r2, [r7, #4]
   27ff2:	68fb      	ldr	r3, [r7, #12]
   27ff4:	0011      	movs	r1, r2
   27ff6:	0018      	movs	r0, r3
   27ff8:	4b5e      	ldr	r3, [pc, #376]	; (28174 <usart_init+0x258>)
   27ffa:	4798      	blx	r3
   27ffc:	0003      	movs	r3, r0
   27ffe:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   28000:	233b      	movs	r3, #59	; 0x3b
   28002:	18fb      	adds	r3, r7, r3
   28004:	781b      	ldrb	r3, [r3, #0]
   28006:	2b00      	cmp	r3, #0
   28008:	d003      	beq.n	28012 <usart_init+0xf6>
		return status_code;
   2800a:	233b      	movs	r3, #59	; 0x3b
   2800c:	18fb      	adds	r3, r7, r3
   2800e:	781b      	ldrb	r3, [r3, #0]
   28010:	e09f      	b.n	28152 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   28012:	2320      	movs	r3, #32
   28014:	18fb      	adds	r3, r7, r3
   28016:	0018      	movs	r0, r3
   28018:	4b57      	ldr	r3, [pc, #348]	; (28178 <usart_init+0x25c>)
   2801a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2801c:	2320      	movs	r3, #32
   2801e:	18fb      	adds	r3, r7, r3
   28020:	2200      	movs	r2, #0
   28022:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   28024:	2320      	movs	r3, #32
   28026:	18fb      	adds	r3, r7, r3
   28028:	2200      	movs	r2, #0
   2802a:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   2802c:	687b      	ldr	r3, [r7, #4]
   2802e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   28030:	2310      	movs	r3, #16
   28032:	18fb      	adds	r3, r7, r3
   28034:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   28036:	687b      	ldr	r3, [r7, #4]
   28038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   2803a:	2310      	movs	r3, #16
   2803c:	18fb      	adds	r3, r7, r3
   2803e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   28040:	687b      	ldr	r3, [r7, #4]
   28042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   28044:	2310      	movs	r3, #16
   28046:	18fb      	adds	r3, r7, r3
   28048:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   2804a:	687b      	ldr	r3, [r7, #4]
   2804c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   2804e:	2310      	movs	r3, #16
   28050:	18fb      	adds	r3, r7, r3
   28052:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   28054:	2347      	movs	r3, #71	; 0x47
   28056:	18fb      	adds	r3, r7, r3
   28058:	2200      	movs	r2, #0
   2805a:	701a      	strb	r2, [r3, #0]
   2805c:	e02c      	b.n	280b8 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   2805e:	2347      	movs	r3, #71	; 0x47
   28060:	18fb      	adds	r3, r7, r3
   28062:	781a      	ldrb	r2, [r3, #0]
   28064:	2310      	movs	r3, #16
   28066:	18fb      	adds	r3, r7, r3
   28068:	0092      	lsls	r2, r2, #2
   2806a:	58d3      	ldr	r3, [r2, r3]
   2806c:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   2806e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28070:	2b00      	cmp	r3, #0
   28072:	d109      	bne.n	28088 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   28074:	2347      	movs	r3, #71	; 0x47
   28076:	18fb      	adds	r3, r7, r3
   28078:	781a      	ldrb	r2, [r3, #0]
   2807a:	68bb      	ldr	r3, [r7, #8]
   2807c:	0011      	movs	r1, r2
   2807e:	0018      	movs	r0, r3
   28080:	4b3e      	ldr	r3, [pc, #248]	; (2817c <usart_init+0x260>)
   28082:	4798      	blx	r3
   28084:	0003      	movs	r3, r0
   28086:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   28088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2808a:	3301      	adds	r3, #1
   2808c:	d00d      	beq.n	280aa <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   2808e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28090:	b2da      	uxtb	r2, r3
   28092:	2320      	movs	r3, #32
   28094:	18fb      	adds	r3, r7, r3
   28096:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   28098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2809a:	0c1b      	lsrs	r3, r3, #16
   2809c:	b2db      	uxtb	r3, r3
   2809e:	2220      	movs	r2, #32
   280a0:	18ba      	adds	r2, r7, r2
   280a2:	0011      	movs	r1, r2
   280a4:	0018      	movs	r0, r3
   280a6:	4b36      	ldr	r3, [pc, #216]	; (28180 <usart_init+0x264>)
   280a8:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   280aa:	2347      	movs	r3, #71	; 0x47
   280ac:	18fb      	adds	r3, r7, r3
   280ae:	781a      	ldrb	r2, [r3, #0]
   280b0:	2347      	movs	r3, #71	; 0x47
   280b2:	18fb      	adds	r3, r7, r3
   280b4:	3201      	adds	r2, #1
   280b6:	701a      	strb	r2, [r3, #0]
   280b8:	2347      	movs	r3, #71	; 0x47
   280ba:	18fb      	adds	r3, r7, r3
   280bc:	781b      	ldrb	r3, [r3, #0]
   280be:	2b03      	cmp	r3, #3
   280c0:	d9cd      	bls.n	2805e <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   280c2:	2300      	movs	r3, #0
   280c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   280c6:	e00a      	b.n	280de <usart_init+0x1c2>
		module->callback[i]            = NULL;
   280c8:	68fa      	ldr	r2, [r7, #12]
   280ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   280cc:	3302      	adds	r3, #2
   280ce:	009b      	lsls	r3, r3, #2
   280d0:	18d3      	adds	r3, r2, r3
   280d2:	3304      	adds	r3, #4
   280d4:	2200      	movs	r2, #0
   280d6:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   280d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   280da:	3301      	adds	r3, #1
   280dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   280de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   280e0:	2b05      	cmp	r3, #5
   280e2:	d9f1      	bls.n	280c8 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   280e4:	68fb      	ldr	r3, [r7, #12]
   280e6:	2200      	movs	r2, #0
   280e8:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   280ea:	68fb      	ldr	r3, [r7, #12]
   280ec:	2200      	movs	r2, #0
   280ee:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   280f0:	68fb      	ldr	r3, [r7, #12]
   280f2:	2200      	movs	r2, #0
   280f4:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   280f6:	68fb      	ldr	r3, [r7, #12]
   280f8:	2200      	movs	r2, #0
   280fa:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   280fc:	68fb      	ldr	r3, [r7, #12]
   280fe:	2230      	movs	r2, #48	; 0x30
   28100:	2100      	movs	r1, #0
   28102:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   28104:	68fb      	ldr	r3, [r7, #12]
   28106:	2231      	movs	r2, #49	; 0x31
   28108:	2100      	movs	r1, #0
   2810a:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   2810c:	68fb      	ldr	r3, [r7, #12]
   2810e:	2232      	movs	r2, #50	; 0x32
   28110:	2100      	movs	r1, #0
   28112:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   28114:	68fb      	ldr	r3, [r7, #12]
   28116:	2233      	movs	r2, #51	; 0x33
   28118:	2100      	movs	r1, #0
   2811a:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   2811c:	68fb      	ldr	r3, [r7, #12]
   2811e:	681b      	ldr	r3, [r3, #0]
   28120:	2227      	movs	r2, #39	; 0x27
   28122:	18bc      	adds	r4, r7, r2
   28124:	0018      	movs	r0, r3
   28126:	4b0d      	ldr	r3, [pc, #52]	; (2815c <usart_init+0x240>)
   28128:	4798      	blx	r3
   2812a:	0003      	movs	r3, r0
   2812c:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   2812e:	4a15      	ldr	r2, [pc, #84]	; (28184 <usart_init+0x268>)
   28130:	2327      	movs	r3, #39	; 0x27
   28132:	18fb      	adds	r3, r7, r3
   28134:	781b      	ldrb	r3, [r3, #0]
   28136:	0011      	movs	r1, r2
   28138:	0018      	movs	r0, r3
   2813a:	4b13      	ldr	r3, [pc, #76]	; (28188 <usart_init+0x26c>)
   2813c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   2813e:	2327      	movs	r3, #39	; 0x27
   28140:	18fb      	adds	r3, r7, r3
   28142:	781a      	ldrb	r2, [r3, #0]
   28144:	4b11      	ldr	r3, [pc, #68]	; (2818c <usart_init+0x270>)
   28146:	0092      	lsls	r2, r2, #2
   28148:	68f9      	ldr	r1, [r7, #12]
   2814a:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   2814c:	233b      	movs	r3, #59	; 0x3b
   2814e:	18fb      	adds	r3, r7, r3
   28150:	781b      	ldrb	r3, [r3, #0]
}
   28152:	0018      	movs	r0, r3
   28154:	46bd      	mov	sp, r7
   28156:	b013      	add	sp, #76	; 0x4c
   28158:	bd90      	pop	{r4, r7, pc}
   2815a:	46c0      	nop			; (mov r8, r8)
   2815c:	000269e9 	.word	0x000269e9
   28160:	00027b59 	.word	0x00027b59
   28164:	00027b41 	.word	0x00027b41
   28168:	00029279 	.word	0x00029279
   2816c:	000292bd 	.word	0x000292bd
   28170:	000267a1 	.word	0x000267a1
   28174:	00027c41 	.word	0x00027c41
   28178:	00027bb5 	.word	0x00027bb5
   2817c:	0002682d 	.word	0x0002682d
   28180:	000295d9 	.word	0x000295d9
   28184:	000283f9 	.word	0x000283f9
   28188:	00026a4d 	.word	0x00026a4d
   2818c:	200059b8 	.word	0x200059b8

00028190 <system_interrupt_enter_critical_section>:
{
   28190:	b580      	push	{r7, lr}
   28192:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   28194:	4b02      	ldr	r3, [pc, #8]	; (281a0 <system_interrupt_enter_critical_section+0x10>)
   28196:	4798      	blx	r3
}
   28198:	46c0      	nop			; (mov r8, r8)
   2819a:	46bd      	mov	sp, r7
   2819c:	bd80      	pop	{r7, pc}
   2819e:	46c0      	nop			; (mov r8, r8)
   281a0:	000255e5 	.word	0x000255e5

000281a4 <system_interrupt_leave_critical_section>:
{
   281a4:	b580      	push	{r7, lr}
   281a6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   281a8:	4b02      	ldr	r3, [pc, #8]	; (281b4 <system_interrupt_leave_critical_section+0x10>)
   281aa:	4798      	blx	r3
}
   281ac:	46c0      	nop			; (mov r8, r8)
   281ae:	46bd      	mov	sp, r7
   281b0:	bd80      	pop	{r7, pc}
   281b2:	46c0      	nop			; (mov r8, r8)
   281b4:	00025639 	.word	0x00025639

000281b8 <usart_is_syncing>:
{
   281b8:	b580      	push	{r7, lr}
   281ba:	b084      	sub	sp, #16
   281bc:	af00      	add	r7, sp, #0
   281be:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   281c0:	687b      	ldr	r3, [r7, #4]
   281c2:	681b      	ldr	r3, [r3, #0]
   281c4:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   281c6:	68fb      	ldr	r3, [r7, #12]
   281c8:	69db      	ldr	r3, [r3, #28]
   281ca:	1e5a      	subs	r2, r3, #1
   281cc:	4193      	sbcs	r3, r2
   281ce:	b2db      	uxtb	r3, r3
}
   281d0:	0018      	movs	r0, r3
   281d2:	46bd      	mov	sp, r7
   281d4:	b004      	add	sp, #16
   281d6:	bd80      	pop	{r7, pc}

000281d8 <_usart_wait_for_sync>:
{
   281d8:	b580      	push	{r7, lr}
   281da:	b082      	sub	sp, #8
   281dc:	af00      	add	r7, sp, #0
   281de:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   281e0:	46c0      	nop			; (mov r8, r8)
   281e2:	687b      	ldr	r3, [r7, #4]
   281e4:	0018      	movs	r0, r3
   281e6:	4b04      	ldr	r3, [pc, #16]	; (281f8 <_usart_wait_for_sync+0x20>)
   281e8:	4798      	blx	r3
   281ea:	1e03      	subs	r3, r0, #0
   281ec:	d1f9      	bne.n	281e2 <_usart_wait_for_sync+0xa>
}
   281ee:	46c0      	nop			; (mov r8, r8)
   281f0:	46bd      	mov	sp, r7
   281f2:	b002      	add	sp, #8
   281f4:	bd80      	pop	{r7, pc}
   281f6:	46c0      	nop			; (mov r8, r8)
   281f8:	000281b9 	.word	0x000281b9

000281fc <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   281fc:	b580      	push	{r7, lr}
   281fe:	b086      	sub	sp, #24
   28200:	af00      	add	r7, sp, #0
   28202:	60f8      	str	r0, [r7, #12]
   28204:	60b9      	str	r1, [r7, #8]
   28206:	1dbb      	adds	r3, r7, #6
   28208:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2820a:	68fb      	ldr	r3, [r7, #12]
   2820c:	681b      	ldr	r3, [r3, #0]
   2820e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   28210:	4b0f      	ldr	r3, [pc, #60]	; (28250 <_usart_write_buffer+0x54>)
   28212:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   28214:	68fb      	ldr	r3, [r7, #12]
   28216:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   28218:	b29b      	uxth	r3, r3
   2821a:	2b00      	cmp	r3, #0
   2821c:	d003      	beq.n	28226 <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   2821e:	4b0d      	ldr	r3, [pc, #52]	; (28254 <_usart_write_buffer+0x58>)
   28220:	4798      	blx	r3
		return STATUS_BUSY;
   28222:	2305      	movs	r3, #5
   28224:	e010      	b.n	28248 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   28226:	68fb      	ldr	r3, [r7, #12]
   28228:	1dba      	adds	r2, r7, #6
   2822a:	8812      	ldrh	r2, [r2, #0]
   2822c:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   2822e:	4b09      	ldr	r3, [pc, #36]	; (28254 <_usart_write_buffer+0x58>)
   28230:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   28232:	68fb      	ldr	r3, [r7, #12]
   28234:	68ba      	ldr	r2, [r7, #8]
   28236:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   28238:	68fb      	ldr	r3, [r7, #12]
   2823a:	2233      	movs	r2, #51	; 0x33
   2823c:	2105      	movs	r1, #5
   2823e:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   28240:	697b      	ldr	r3, [r7, #20]
   28242:	2201      	movs	r2, #1
   28244:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   28246:	2300      	movs	r3, #0
}
   28248:	0018      	movs	r0, r3
   2824a:	46bd      	mov	sp, r7
   2824c:	b006      	add	sp, #24
   2824e:	bd80      	pop	{r7, pc}
   28250:	00028191 	.word	0x00028191
   28254:	000281a5 	.word	0x000281a5

00028258 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   28258:	b580      	push	{r7, lr}
   2825a:	b086      	sub	sp, #24
   2825c:	af00      	add	r7, sp, #0
   2825e:	60f8      	str	r0, [r7, #12]
   28260:	60b9      	str	r1, [r7, #8]
   28262:	1dbb      	adds	r3, r7, #6
   28264:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   28266:	68fb      	ldr	r3, [r7, #12]
   28268:	681b      	ldr	r3, [r3, #0]
   2826a:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   2826c:	4b16      	ldr	r3, [pc, #88]	; (282c8 <_usart_read_buffer+0x70>)
   2826e:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   28270:	68fb      	ldr	r3, [r7, #12]
   28272:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28274:	b29b      	uxth	r3, r3
   28276:	2b00      	cmp	r3, #0
   28278:	d003      	beq.n	28282 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   2827a:	4b14      	ldr	r3, [pc, #80]	; (282cc <_usart_read_buffer+0x74>)
   2827c:	4798      	blx	r3
		return STATUS_BUSY;
   2827e:	2305      	movs	r3, #5
   28280:	e01e      	b.n	282c0 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   28282:	68fb      	ldr	r3, [r7, #12]
   28284:	1dba      	adds	r2, r7, #6
   28286:	8812      	ldrh	r2, [r2, #0]
   28288:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   2828a:	4b10      	ldr	r3, [pc, #64]	; (282cc <_usart_read_buffer+0x74>)
   2828c:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   2828e:	68fb      	ldr	r3, [r7, #12]
   28290:	68ba      	ldr	r2, [r7, #8]
   28292:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   28294:	68fb      	ldr	r3, [r7, #12]
   28296:	2232      	movs	r2, #50	; 0x32
   28298:	2105      	movs	r1, #5
   2829a:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   2829c:	697b      	ldr	r3, [r7, #20]
   2829e:	2204      	movs	r2, #4
   282a0:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   282a2:	68fb      	ldr	r3, [r7, #12]
   282a4:	7a1b      	ldrb	r3, [r3, #8]
   282a6:	2b00      	cmp	r3, #0
   282a8:	d002      	beq.n	282b0 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   282aa:	697b      	ldr	r3, [r7, #20]
   282ac:	2220      	movs	r2, #32
   282ae:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   282b0:	68fb      	ldr	r3, [r7, #12]
   282b2:	7a5b      	ldrb	r3, [r3, #9]
   282b4:	2b00      	cmp	r3, #0
   282b6:	d002      	beq.n	282be <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   282b8:	697b      	ldr	r3, [r7, #20]
   282ba:	2208      	movs	r2, #8
   282bc:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   282be:	2300      	movs	r3, #0
}
   282c0:	0018      	movs	r0, r3
   282c2:	46bd      	mov	sp, r7
   282c4:	b006      	add	sp, #24
   282c6:	bd80      	pop	{r7, pc}
   282c8:	00028191 	.word	0x00028191
   282cc:	000281a5 	.word	0x000281a5

000282d0 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   282d0:	b580      	push	{r7, lr}
   282d2:	b084      	sub	sp, #16
   282d4:	af00      	add	r7, sp, #0
   282d6:	60f8      	str	r0, [r7, #12]
   282d8:	60b9      	str	r1, [r7, #8]
   282da:	1dfb      	adds	r3, r7, #7
   282dc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   282de:	1dfb      	adds	r3, r7, #7
   282e0:	781b      	ldrb	r3, [r3, #0]
   282e2:	68fa      	ldr	r2, [r7, #12]
   282e4:	3302      	adds	r3, #2
   282e6:	009b      	lsls	r3, r3, #2
   282e8:	18d3      	adds	r3, r2, r3
   282ea:	3304      	adds	r3, #4
   282ec:	68ba      	ldr	r2, [r7, #8]
   282ee:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   282f0:	68fb      	ldr	r3, [r7, #12]
   282f2:	2230      	movs	r2, #48	; 0x30
   282f4:	5c9b      	ldrb	r3, [r3, r2]
   282f6:	b25a      	sxtb	r2, r3
   282f8:	1dfb      	adds	r3, r7, #7
   282fa:	781b      	ldrb	r3, [r3, #0]
   282fc:	2101      	movs	r1, #1
   282fe:	4099      	lsls	r1, r3
   28300:	000b      	movs	r3, r1
   28302:	b25b      	sxtb	r3, r3
   28304:	4313      	orrs	r3, r2
   28306:	b25b      	sxtb	r3, r3
   28308:	b2d9      	uxtb	r1, r3
   2830a:	68fb      	ldr	r3, [r7, #12]
   2830c:	2230      	movs	r2, #48	; 0x30
   2830e:	5499      	strb	r1, [r3, r2]
}
   28310:	46c0      	nop			; (mov r8, r8)
   28312:	46bd      	mov	sp, r7
   28314:	b004      	add	sp, #16
   28316:	bd80      	pop	{r7, pc}

00028318 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   28318:	b580      	push	{r7, lr}
   2831a:	b084      	sub	sp, #16
   2831c:	af00      	add	r7, sp, #0
   2831e:	60f8      	str	r0, [r7, #12]
   28320:	60b9      	str	r1, [r7, #8]
   28322:	1dbb      	adds	r3, r7, #6
   28324:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   28326:	1dbb      	adds	r3, r7, #6
   28328:	881b      	ldrh	r3, [r3, #0]
   2832a:	2b00      	cmp	r3, #0
   2832c:	d101      	bne.n	28332 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   2832e:	2317      	movs	r3, #23
   28330:	e010      	b.n	28354 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   28332:	68fb      	ldr	r3, [r7, #12]
   28334:	79db      	ldrb	r3, [r3, #7]
   28336:	2201      	movs	r2, #1
   28338:	4053      	eors	r3, r2
   2833a:	b2db      	uxtb	r3, r3
   2833c:	2b00      	cmp	r3, #0
   2833e:	d001      	beq.n	28344 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   28340:	231c      	movs	r3, #28
   28342:	e007      	b.n	28354 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   28344:	1dbb      	adds	r3, r7, #6
   28346:	881a      	ldrh	r2, [r3, #0]
   28348:	68b9      	ldr	r1, [r7, #8]
   2834a:	68fb      	ldr	r3, [r7, #12]
   2834c:	0018      	movs	r0, r3
   2834e:	4b03      	ldr	r3, [pc, #12]	; (2835c <usart_write_buffer_job+0x44>)
   28350:	4798      	blx	r3
   28352:	0003      	movs	r3, r0
}
   28354:	0018      	movs	r0, r3
   28356:	46bd      	mov	sp, r7
   28358:	b004      	add	sp, #16
   2835a:	bd80      	pop	{r7, pc}
   2835c:	000281fd 	.word	0x000281fd

00028360 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   28360:	b580      	push	{r7, lr}
   28362:	b084      	sub	sp, #16
   28364:	af00      	add	r7, sp, #0
   28366:	60f8      	str	r0, [r7, #12]
   28368:	60b9      	str	r1, [r7, #8]
   2836a:	1dbb      	adds	r3, r7, #6
   2836c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   2836e:	1dbb      	adds	r3, r7, #6
   28370:	881b      	ldrh	r3, [r3, #0]
   28372:	2b00      	cmp	r3, #0
   28374:	d101      	bne.n	2837a <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   28376:	2317      	movs	r3, #23
   28378:	e010      	b.n	2839c <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   2837a:	68fb      	ldr	r3, [r7, #12]
   2837c:	799b      	ldrb	r3, [r3, #6]
   2837e:	2201      	movs	r2, #1
   28380:	4053      	eors	r3, r2
   28382:	b2db      	uxtb	r3, r3
   28384:	2b00      	cmp	r3, #0
   28386:	d001      	beq.n	2838c <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   28388:	231c      	movs	r3, #28
   2838a:	e007      	b.n	2839c <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   2838c:	1dbb      	adds	r3, r7, #6
   2838e:	881a      	ldrh	r2, [r3, #0]
   28390:	68b9      	ldr	r1, [r7, #8]
   28392:	68fb      	ldr	r3, [r7, #12]
   28394:	0018      	movs	r0, r3
   28396:	4b03      	ldr	r3, [pc, #12]	; (283a4 <usart_read_buffer_job+0x44>)
   28398:	4798      	blx	r3
   2839a:	0003      	movs	r3, r0
}
   2839c:	0018      	movs	r0, r3
   2839e:	46bd      	mov	sp, r7
   283a0:	b004      	add	sp, #16
   283a2:	bd80      	pop	{r7, pc}
   283a4:	00028259 	.word	0x00028259

000283a8 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   283a8:	b580      	push	{r7, lr}
   283aa:	b084      	sub	sp, #16
   283ac:	af00      	add	r7, sp, #0
   283ae:	6078      	str	r0, [r7, #4]
   283b0:	000a      	movs	r2, r1
   283b2:	1cfb      	adds	r3, r7, #3
   283b4:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   283b6:	1cfb      	adds	r3, r7, #3
   283b8:	781b      	ldrb	r3, [r3, #0]
   283ba:	2b00      	cmp	r3, #0
   283bc:	d002      	beq.n	283c4 <usart_get_job_status+0x1c>
   283be:	2b01      	cmp	r3, #1
   283c0:	d007      	beq.n	283d2 <usart_get_job_status+0x2a>
   283c2:	e00d      	b.n	283e0 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   283c4:	230f      	movs	r3, #15
   283c6:	18fb      	adds	r3, r7, r3
   283c8:	687a      	ldr	r2, [r7, #4]
   283ca:	2132      	movs	r1, #50	; 0x32
   283cc:	5c52      	ldrb	r2, [r2, r1]
   283ce:	701a      	strb	r2, [r3, #0]
			break;
   283d0:	e00b      	b.n	283ea <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   283d2:	230f      	movs	r3, #15
   283d4:	18fb      	adds	r3, r7, r3
   283d6:	687a      	ldr	r2, [r7, #4]
   283d8:	2133      	movs	r1, #51	; 0x33
   283da:	5c52      	ldrb	r2, [r2, r1]
   283dc:	701a      	strb	r2, [r3, #0]
			break;
   283de:	e004      	b.n	283ea <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   283e0:	230f      	movs	r3, #15
   283e2:	18fb      	adds	r3, r7, r3
   283e4:	2217      	movs	r2, #23
   283e6:	701a      	strb	r2, [r3, #0]
			break;
   283e8:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   283ea:	230f      	movs	r3, #15
   283ec:	18fb      	adds	r3, r7, r3
   283ee:	781b      	ldrb	r3, [r3, #0]
}
   283f0:	0018      	movs	r0, r3
   283f2:	46bd      	mov	sp, r7
   283f4:	b004      	add	sp, #16
   283f6:	bd80      	pop	{r7, pc}

000283f8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   283f8:	b580      	push	{r7, lr}
   283fa:	b088      	sub	sp, #32
   283fc:	af00      	add	r7, sp, #0
   283fe:	0002      	movs	r2, r0
   28400:	1dfb      	adds	r3, r7, #7
   28402:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   28404:	1dfb      	adds	r3, r7, #7
   28406:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   28408:	4ba3      	ldr	r3, [pc, #652]	; (28698 <_usart_interrupt_handler+0x2a0>)
   2840a:	0092      	lsls	r2, r2, #2
   2840c:	58d3      	ldr	r3, [r2, r3]
   2840e:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   28410:	69bb      	ldr	r3, [r7, #24]
   28412:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   28414:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   28416:	69bb      	ldr	r3, [r7, #24]
   28418:	0018      	movs	r0, r3
   2841a:	4ba0      	ldr	r3, [pc, #640]	; (2869c <_usart_interrupt_handler+0x2a4>)
   2841c:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   2841e:	697b      	ldr	r3, [r7, #20]
   28420:	7e1b      	ldrb	r3, [r3, #24]
   28422:	b2da      	uxtb	r2, r3
   28424:	2312      	movs	r3, #18
   28426:	18fb      	adds	r3, r7, r3
   28428:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   2842a:	697b      	ldr	r3, [r7, #20]
   2842c:	7d9b      	ldrb	r3, [r3, #22]
   2842e:	b2db      	uxtb	r3, r3
   28430:	b29a      	uxth	r2, r3
   28432:	2312      	movs	r3, #18
   28434:	18fb      	adds	r3, r7, r3
   28436:	2112      	movs	r1, #18
   28438:	1879      	adds	r1, r7, r1
   2843a:	8809      	ldrh	r1, [r1, #0]
   2843c:	400a      	ands	r2, r1
   2843e:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   28440:	69bb      	ldr	r3, [r7, #24]
   28442:	2230      	movs	r2, #48	; 0x30
   28444:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   28446:	69ba      	ldr	r2, [r7, #24]
   28448:	2131      	movs	r1, #49	; 0x31
   2844a:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   2844c:	4013      	ands	r3, r2
   2844e:	b2da      	uxtb	r2, r3
   28450:	2310      	movs	r3, #16
   28452:	18fb      	adds	r3, r7, r3
   28454:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   28456:	2312      	movs	r3, #18
   28458:	18fb      	adds	r3, r7, r3
   2845a:	881b      	ldrh	r3, [r3, #0]
   2845c:	2201      	movs	r2, #1
   2845e:	4013      	ands	r3, r2
   28460:	d044      	beq.n	284ec <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   28462:	69bb      	ldr	r3, [r7, #24]
   28464:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   28466:	b29b      	uxth	r3, r3
   28468:	2b00      	cmp	r3, #0
   2846a:	d03c      	beq.n	284e6 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   2846c:	69bb      	ldr	r3, [r7, #24]
   2846e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28470:	781b      	ldrb	r3, [r3, #0]
   28472:	b2da      	uxtb	r2, r3
   28474:	231c      	movs	r3, #28
   28476:	18fb      	adds	r3, r7, r3
   28478:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   2847a:	69bb      	ldr	r3, [r7, #24]
   2847c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2847e:	1c5a      	adds	r2, r3, #1
   28480:	69bb      	ldr	r3, [r7, #24]
   28482:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   28484:	69bb      	ldr	r3, [r7, #24]
   28486:	795b      	ldrb	r3, [r3, #5]
   28488:	2b01      	cmp	r3, #1
   2848a:	d113      	bne.n	284b4 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   2848c:	69bb      	ldr	r3, [r7, #24]
   2848e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28490:	781b      	ldrb	r3, [r3, #0]
   28492:	b2db      	uxtb	r3, r3
   28494:	021b      	lsls	r3, r3, #8
   28496:	b21a      	sxth	r2, r3
   28498:	231c      	movs	r3, #28
   2849a:	18fb      	adds	r3, r7, r3
   2849c:	2100      	movs	r1, #0
   2849e:	5e5b      	ldrsh	r3, [r3, r1]
   284a0:	4313      	orrs	r3, r2
   284a2:	b21a      	sxth	r2, r3
   284a4:	231c      	movs	r3, #28
   284a6:	18fb      	adds	r3, r7, r3
   284a8:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   284aa:	69bb      	ldr	r3, [r7, #24]
   284ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   284ae:	1c5a      	adds	r2, r3, #1
   284b0:	69bb      	ldr	r3, [r7, #24]
   284b2:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   284b4:	231c      	movs	r3, #28
   284b6:	18fb      	adds	r3, r7, r3
   284b8:	881b      	ldrh	r3, [r3, #0]
   284ba:	05db      	lsls	r3, r3, #23
   284bc:	0ddb      	lsrs	r3, r3, #23
   284be:	b29a      	uxth	r2, r3
   284c0:	697b      	ldr	r3, [r7, #20]
   284c2:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   284c4:	69bb      	ldr	r3, [r7, #24]
   284c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   284c8:	b29b      	uxth	r3, r3
   284ca:	3b01      	subs	r3, #1
   284cc:	b29b      	uxth	r3, r3
   284ce:	69ba      	ldr	r2, [r7, #24]
   284d0:	1c19      	adds	r1, r3, #0
   284d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
   284d4:	2b00      	cmp	r3, #0
   284d6:	d109      	bne.n	284ec <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   284d8:	697b      	ldr	r3, [r7, #20]
   284da:	2201      	movs	r2, #1
   284dc:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   284de:	697b      	ldr	r3, [r7, #20]
   284e0:	2202      	movs	r2, #2
   284e2:	759a      	strb	r2, [r3, #22]
   284e4:	e002      	b.n	284ec <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   284e6:	697b      	ldr	r3, [r7, #20]
   284e8:	2201      	movs	r2, #1
   284ea:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   284ec:	2312      	movs	r3, #18
   284ee:	18fb      	adds	r3, r7, r3
   284f0:	881b      	ldrh	r3, [r3, #0]
   284f2:	2202      	movs	r2, #2
   284f4:	4013      	ands	r3, r2
   284f6:	d011      	beq.n	2851c <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   284f8:	697b      	ldr	r3, [r7, #20]
   284fa:	2202      	movs	r2, #2
   284fc:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   284fe:	69bb      	ldr	r3, [r7, #24]
   28500:	2233      	movs	r2, #51	; 0x33
   28502:	2100      	movs	r1, #0
   28504:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   28506:	2310      	movs	r3, #16
   28508:	18fb      	adds	r3, r7, r3
   2850a:	881b      	ldrh	r3, [r3, #0]
   2850c:	2201      	movs	r2, #1
   2850e:	4013      	ands	r3, r2
   28510:	d004      	beq.n	2851c <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   28512:	69bb      	ldr	r3, [r7, #24]
   28514:	68db      	ldr	r3, [r3, #12]
   28516:	69ba      	ldr	r2, [r7, #24]
   28518:	0010      	movs	r0, r2
   2851a:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   2851c:	2312      	movs	r3, #18
   2851e:	18fb      	adds	r3, r7, r3
   28520:	881b      	ldrh	r3, [r3, #0]
   28522:	2204      	movs	r2, #4
   28524:	4013      	ands	r3, r2
   28526:	d100      	bne.n	2852a <_usart_interrupt_handler+0x132>
   28528:	e0bd      	b.n	286a6 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   2852a:	69bb      	ldr	r3, [r7, #24]
   2852c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   2852e:	b29b      	uxth	r3, r3
   28530:	2b00      	cmp	r3, #0
   28532:	d100      	bne.n	28536 <_usart_interrupt_handler+0x13e>
   28534:	e0b4      	b.n	286a0 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   28536:	697b      	ldr	r3, [r7, #20]
   28538:	8b5b      	ldrh	r3, [r3, #26]
   2853a:	b29b      	uxth	r3, r3
   2853c:	b2da      	uxtb	r2, r3
   2853e:	231f      	movs	r3, #31
   28540:	18fb      	adds	r3, r7, r3
   28542:	213f      	movs	r1, #63	; 0x3f
   28544:	400a      	ands	r2, r1
   28546:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   28548:	231f      	movs	r3, #31
   2854a:	18fb      	adds	r3, r7, r3
   2854c:	781b      	ldrb	r3, [r3, #0]
   2854e:	2208      	movs	r2, #8
   28550:	4013      	ands	r3, r2
   28552:	d007      	beq.n	28564 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   28554:	231f      	movs	r3, #31
   28556:	18fb      	adds	r3, r7, r3
   28558:	221f      	movs	r2, #31
   2855a:	18ba      	adds	r2, r7, r2
   2855c:	7812      	ldrb	r2, [r2, #0]
   2855e:	2108      	movs	r1, #8
   28560:	438a      	bics	r2, r1
   28562:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   28564:	231f      	movs	r3, #31
   28566:	18fb      	adds	r3, r7, r3
   28568:	781b      	ldrb	r3, [r3, #0]
   2856a:	2b00      	cmp	r3, #0
   2856c:	d050      	beq.n	28610 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   2856e:	231f      	movs	r3, #31
   28570:	18fb      	adds	r3, r7, r3
   28572:	781b      	ldrb	r3, [r3, #0]
   28574:	2202      	movs	r2, #2
   28576:	4013      	ands	r3, r2
   28578:	d007      	beq.n	2858a <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   2857a:	69bb      	ldr	r3, [r7, #24]
   2857c:	2232      	movs	r2, #50	; 0x32
   2857e:	211a      	movs	r1, #26
   28580:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   28582:	697b      	ldr	r3, [r7, #20]
   28584:	2202      	movs	r2, #2
   28586:	835a      	strh	r2, [r3, #26]
   28588:	e036      	b.n	285f8 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   2858a:	231f      	movs	r3, #31
   2858c:	18fb      	adds	r3, r7, r3
   2858e:	781b      	ldrb	r3, [r3, #0]
   28590:	2204      	movs	r2, #4
   28592:	4013      	ands	r3, r2
   28594:	d007      	beq.n	285a6 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   28596:	69bb      	ldr	r3, [r7, #24]
   28598:	2232      	movs	r2, #50	; 0x32
   2859a:	211e      	movs	r1, #30
   2859c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   2859e:	697b      	ldr	r3, [r7, #20]
   285a0:	2204      	movs	r2, #4
   285a2:	835a      	strh	r2, [r3, #26]
   285a4:	e028      	b.n	285f8 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   285a6:	231f      	movs	r3, #31
   285a8:	18fb      	adds	r3, r7, r3
   285aa:	781b      	ldrb	r3, [r3, #0]
   285ac:	2201      	movs	r2, #1
   285ae:	4013      	ands	r3, r2
   285b0:	d007      	beq.n	285c2 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   285b2:	69bb      	ldr	r3, [r7, #24]
   285b4:	2232      	movs	r2, #50	; 0x32
   285b6:	2113      	movs	r1, #19
   285b8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   285ba:	697b      	ldr	r3, [r7, #20]
   285bc:	2201      	movs	r2, #1
   285be:	835a      	strh	r2, [r3, #26]
   285c0:	e01a      	b.n	285f8 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   285c2:	231f      	movs	r3, #31
   285c4:	18fb      	adds	r3, r7, r3
   285c6:	781b      	ldrb	r3, [r3, #0]
   285c8:	2210      	movs	r2, #16
   285ca:	4013      	ands	r3, r2
   285cc:	d007      	beq.n	285de <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   285ce:	69bb      	ldr	r3, [r7, #24]
   285d0:	2232      	movs	r2, #50	; 0x32
   285d2:	2142      	movs	r1, #66	; 0x42
   285d4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   285d6:	697b      	ldr	r3, [r7, #20]
   285d8:	2210      	movs	r2, #16
   285da:	835a      	strh	r2, [r3, #26]
   285dc:	e00c      	b.n	285f8 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   285de:	231f      	movs	r3, #31
   285e0:	18fb      	adds	r3, r7, r3
   285e2:	781b      	ldrb	r3, [r3, #0]
   285e4:	2220      	movs	r2, #32
   285e6:	4013      	ands	r3, r2
   285e8:	d006      	beq.n	285f8 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   285ea:	69bb      	ldr	r3, [r7, #24]
   285ec:	2232      	movs	r2, #50	; 0x32
   285ee:	2141      	movs	r1, #65	; 0x41
   285f0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   285f2:	697b      	ldr	r3, [r7, #20]
   285f4:	2220      	movs	r2, #32
   285f6:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   285f8:	2310      	movs	r3, #16
   285fa:	18fb      	adds	r3, r7, r3
   285fc:	881b      	ldrh	r3, [r3, #0]
   285fe:	2204      	movs	r2, #4
   28600:	4013      	ands	r3, r2
				if (callback_status
   28602:	d050      	beq.n	286a6 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   28604:	69bb      	ldr	r3, [r7, #24]
   28606:	695b      	ldr	r3, [r3, #20]
   28608:	69ba      	ldr	r2, [r7, #24]
   2860a:	0010      	movs	r0, r2
   2860c:	4798      	blx	r3
   2860e:	e04a      	b.n	286a6 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   28610:	697b      	ldr	r3, [r7, #20]
   28612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   28614:	b29a      	uxth	r2, r3
   28616:	230e      	movs	r3, #14
   28618:	18fb      	adds	r3, r7, r3
   2861a:	05d2      	lsls	r2, r2, #23
   2861c:	0dd2      	lsrs	r2, r2, #23
   2861e:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   28620:	69bb      	ldr	r3, [r7, #24]
   28622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28624:	220e      	movs	r2, #14
   28626:	18ba      	adds	r2, r7, r2
   28628:	8812      	ldrh	r2, [r2, #0]
   2862a:	b2d2      	uxtb	r2, r2
   2862c:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   2862e:	69bb      	ldr	r3, [r7, #24]
   28630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28632:	1c5a      	adds	r2, r3, #1
   28634:	69bb      	ldr	r3, [r7, #24]
   28636:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   28638:	69bb      	ldr	r3, [r7, #24]
   2863a:	795b      	ldrb	r3, [r3, #5]
   2863c:	2b01      	cmp	r3, #1
   2863e:	d10d      	bne.n	2865c <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   28640:	69bb      	ldr	r3, [r7, #24]
   28642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28644:	220e      	movs	r2, #14
   28646:	18ba      	adds	r2, r7, r2
   28648:	8812      	ldrh	r2, [r2, #0]
   2864a:	0a12      	lsrs	r2, r2, #8
   2864c:	b292      	uxth	r2, r2
   2864e:	b2d2      	uxtb	r2, r2
   28650:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   28652:	69bb      	ldr	r3, [r7, #24]
   28654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28656:	1c5a      	adds	r2, r3, #1
   28658:	69bb      	ldr	r3, [r7, #24]
   2865a:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   2865c:	69bb      	ldr	r3, [r7, #24]
   2865e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28660:	b29b      	uxth	r3, r3
   28662:	3b01      	subs	r3, #1
   28664:	b29b      	uxth	r3, r3
   28666:	69ba      	ldr	r2, [r7, #24]
   28668:	1c19      	adds	r1, r3, #0
   2866a:	8591      	strh	r1, [r2, #44]	; 0x2c
   2866c:	2b00      	cmp	r3, #0
   2866e:	d11a      	bne.n	286a6 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   28670:	697b      	ldr	r3, [r7, #20]
   28672:	2204      	movs	r2, #4
   28674:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   28676:	69bb      	ldr	r3, [r7, #24]
   28678:	2232      	movs	r2, #50	; 0x32
   2867a:	2100      	movs	r1, #0
   2867c:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   2867e:	2310      	movs	r3, #16
   28680:	18fb      	adds	r3, r7, r3
   28682:	881b      	ldrh	r3, [r3, #0]
   28684:	2202      	movs	r2, #2
   28686:	4013      	ands	r3, r2
					if (callback_status
   28688:	d00d      	beq.n	286a6 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   2868a:	69bb      	ldr	r3, [r7, #24]
   2868c:	691b      	ldr	r3, [r3, #16]
   2868e:	69ba      	ldr	r2, [r7, #24]
   28690:	0010      	movs	r0, r2
   28692:	4798      	blx	r3
   28694:	e007      	b.n	286a6 <_usart_interrupt_handler+0x2ae>
   28696:	46c0      	nop			; (mov r8, r8)
   28698:	200059b8 	.word	0x200059b8
   2869c:	000281d9 	.word	0x000281d9
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   286a0:	697b      	ldr	r3, [r7, #20]
   286a2:	2204      	movs	r2, #4
   286a4:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   286a6:	2312      	movs	r3, #18
   286a8:	18fb      	adds	r3, r7, r3
   286aa:	881b      	ldrh	r3, [r3, #0]
   286ac:	2210      	movs	r2, #16
   286ae:	4013      	ands	r3, r2
   286b0:	d010      	beq.n	286d4 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   286b2:	697b      	ldr	r3, [r7, #20]
   286b4:	2210      	movs	r2, #16
   286b6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   286b8:	697b      	ldr	r3, [r7, #20]
   286ba:	2210      	movs	r2, #16
   286bc:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   286be:	2310      	movs	r3, #16
   286c0:	18fb      	adds	r3, r7, r3
   286c2:	881b      	ldrh	r3, [r3, #0]
   286c4:	2210      	movs	r2, #16
   286c6:	4013      	ands	r3, r2
   286c8:	d004      	beq.n	286d4 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   286ca:	69bb      	ldr	r3, [r7, #24]
   286cc:	69db      	ldr	r3, [r3, #28]
   286ce:	69ba      	ldr	r2, [r7, #24]
   286d0:	0010      	movs	r0, r2
   286d2:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   286d4:	2312      	movs	r3, #18
   286d6:	18fb      	adds	r3, r7, r3
   286d8:	881b      	ldrh	r3, [r3, #0]
   286da:	2220      	movs	r2, #32
   286dc:	4013      	ands	r3, r2
   286de:	d010      	beq.n	28702 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   286e0:	697b      	ldr	r3, [r7, #20]
   286e2:	2220      	movs	r2, #32
   286e4:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   286e6:	697b      	ldr	r3, [r7, #20]
   286e8:	2220      	movs	r2, #32
   286ea:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   286ec:	2310      	movs	r3, #16
   286ee:	18fb      	adds	r3, r7, r3
   286f0:	881b      	ldrh	r3, [r3, #0]
   286f2:	2208      	movs	r2, #8
   286f4:	4013      	ands	r3, r2
   286f6:	d004      	beq.n	28702 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   286f8:	69bb      	ldr	r3, [r7, #24]
   286fa:	699b      	ldr	r3, [r3, #24]
   286fc:	69ba      	ldr	r2, [r7, #24]
   286fe:	0010      	movs	r0, r2
   28700:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   28702:	2312      	movs	r3, #18
   28704:	18fb      	adds	r3, r7, r3
   28706:	881b      	ldrh	r3, [r3, #0]
   28708:	2208      	movs	r2, #8
   2870a:	4013      	ands	r3, r2
   2870c:	d010      	beq.n	28730 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   2870e:	697b      	ldr	r3, [r7, #20]
   28710:	2208      	movs	r2, #8
   28712:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   28714:	697b      	ldr	r3, [r7, #20]
   28716:	2208      	movs	r2, #8
   28718:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   2871a:	2310      	movs	r3, #16
   2871c:	18fb      	adds	r3, r7, r3
   2871e:	881b      	ldrh	r3, [r3, #0]
   28720:	2220      	movs	r2, #32
   28722:	4013      	ands	r3, r2
   28724:	d004      	beq.n	28730 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   28726:	69bb      	ldr	r3, [r7, #24]
   28728:	6a1b      	ldr	r3, [r3, #32]
   2872a:	69ba      	ldr	r2, [r7, #24]
   2872c:	0010      	movs	r0, r2
   2872e:	4798      	blx	r3
		}
	}
#endif
}
   28730:	46c0      	nop			; (mov r8, r8)
   28732:	46bd      	mov	sp, r7
   28734:	b008      	add	sp, #32
   28736:	bd80      	pop	{r7, pc}

00028738 <system_gclk_gen_get_config_defaults>:
{
   28738:	b580      	push	{r7, lr}
   2873a:	b082      	sub	sp, #8
   2873c:	af00      	add	r7, sp, #0
   2873e:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   28740:	687b      	ldr	r3, [r7, #4]
   28742:	2201      	movs	r2, #1
   28744:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   28746:	687b      	ldr	r3, [r7, #4]
   28748:	2200      	movs	r2, #0
   2874a:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   2874c:	687b      	ldr	r3, [r7, #4]
   2874e:	2206      	movs	r2, #6
   28750:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   28752:	687b      	ldr	r3, [r7, #4]
   28754:	2200      	movs	r2, #0
   28756:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   28758:	687b      	ldr	r3, [r7, #4]
   2875a:	2200      	movs	r2, #0
   2875c:	725a      	strb	r2, [r3, #9]
}
   2875e:	46c0      	nop			; (mov r8, r8)
   28760:	46bd      	mov	sp, r7
   28762:	b002      	add	sp, #8
   28764:	bd80      	pop	{r7, pc}

00028766 <system_gclk_chan_get_config_defaults>:
{
   28766:	b580      	push	{r7, lr}
   28768:	b082      	sub	sp, #8
   2876a:	af00      	add	r7, sp, #0
   2876c:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2876e:	687b      	ldr	r3, [r7, #4]
   28770:	2200      	movs	r2, #0
   28772:	701a      	strb	r2, [r3, #0]
}
   28774:	46c0      	nop			; (mov r8, r8)
   28776:	46bd      	mov	sp, r7
   28778:	b002      	add	sp, #8
   2877a:	bd80      	pop	{r7, pc}

0002877c <system_clock_source_osc8m_get_config_defaults>:
{
   2877c:	b580      	push	{r7, lr}
   2877e:	b082      	sub	sp, #8
   28780:	af00      	add	r7, sp, #0
   28782:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   28784:	687b      	ldr	r3, [r7, #4]
   28786:	2203      	movs	r2, #3
   28788:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   2878a:	687b      	ldr	r3, [r7, #4]
   2878c:	2200      	movs	r2, #0
   2878e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   28790:	687b      	ldr	r3, [r7, #4]
   28792:	2201      	movs	r2, #1
   28794:	709a      	strb	r2, [r3, #2]
}
   28796:	46c0      	nop			; (mov r8, r8)
   28798:	46bd      	mov	sp, r7
   2879a:	b002      	add	sp, #8
   2879c:	bd80      	pop	{r7, pc}
	...

000287a0 <system_cpu_clock_set_divider>:
{
   287a0:	b580      	push	{r7, lr}
   287a2:	b082      	sub	sp, #8
   287a4:	af00      	add	r7, sp, #0
   287a6:	0002      	movs	r2, r0
   287a8:	1dfb      	adds	r3, r7, #7
   287aa:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   287ac:	4a03      	ldr	r2, [pc, #12]	; (287bc <system_cpu_clock_set_divider+0x1c>)
   287ae:	1dfb      	adds	r3, r7, #7
   287b0:	781b      	ldrb	r3, [r3, #0]
   287b2:	7213      	strb	r3, [r2, #8]
}
   287b4:	46c0      	nop			; (mov r8, r8)
   287b6:	46bd      	mov	sp, r7
   287b8:	b002      	add	sp, #8
   287ba:	bd80      	pop	{r7, pc}
   287bc:	40000400 	.word	0x40000400

000287c0 <system_apb_clock_set_divider>:
{
   287c0:	b580      	push	{r7, lr}
   287c2:	b082      	sub	sp, #8
   287c4:	af00      	add	r7, sp, #0
   287c6:	0002      	movs	r2, r0
   287c8:	1dfb      	adds	r3, r7, #7
   287ca:	701a      	strb	r2, [r3, #0]
   287cc:	1dbb      	adds	r3, r7, #6
   287ce:	1c0a      	adds	r2, r1, #0
   287d0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   287d2:	1dfb      	adds	r3, r7, #7
   287d4:	781b      	ldrb	r3, [r3, #0]
   287d6:	2b01      	cmp	r3, #1
   287d8:	d008      	beq.n	287ec <system_apb_clock_set_divider+0x2c>
   287da:	2b02      	cmp	r3, #2
   287dc:	d00b      	beq.n	287f6 <system_apb_clock_set_divider+0x36>
   287de:	2b00      	cmp	r3, #0
   287e0:	d10e      	bne.n	28800 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   287e2:	4a0b      	ldr	r2, [pc, #44]	; (28810 <system_apb_clock_set_divider+0x50>)
   287e4:	1dbb      	adds	r3, r7, #6
   287e6:	781b      	ldrb	r3, [r3, #0]
   287e8:	7253      	strb	r3, [r2, #9]
			break;
   287ea:	e00b      	b.n	28804 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   287ec:	4a08      	ldr	r2, [pc, #32]	; (28810 <system_apb_clock_set_divider+0x50>)
   287ee:	1dbb      	adds	r3, r7, #6
   287f0:	781b      	ldrb	r3, [r3, #0]
   287f2:	7293      	strb	r3, [r2, #10]
			break;
   287f4:	e006      	b.n	28804 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   287f6:	4a06      	ldr	r2, [pc, #24]	; (28810 <system_apb_clock_set_divider+0x50>)
   287f8:	1dbb      	adds	r3, r7, #6
   287fa:	781b      	ldrb	r3, [r3, #0]
   287fc:	72d3      	strb	r3, [r2, #11]
			break;
   287fe:	e001      	b.n	28804 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   28800:	2317      	movs	r3, #23
   28802:	e000      	b.n	28806 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   28804:	2300      	movs	r3, #0
}
   28806:	0018      	movs	r0, r3
   28808:	46bd      	mov	sp, r7
   2880a:	b002      	add	sp, #8
   2880c:	bd80      	pop	{r7, pc}
   2880e:	46c0      	nop			; (mov r8, r8)
   28810:	40000400 	.word	0x40000400

00028814 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   28814:	b580      	push	{r7, lr}
   28816:	b082      	sub	sp, #8
   28818:	af00      	add	r7, sp, #0
   2881a:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   2881c:	687b      	ldr	r3, [r7, #4]
   2881e:	2201      	movs	r2, #1
   28820:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   28822:	687b      	ldr	r3, [r7, #4]
   28824:	2200      	movs	r2, #0
   28826:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   28828:	687b      	ldr	r3, [r7, #4]
   2882a:	2200      	movs	r2, #0
   2882c:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   2882e:	687b      	ldr	r3, [r7, #4]
   28830:	2200      	movs	r2, #0
   28832:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   28834:	687b      	ldr	r3, [r7, #4]
   28836:	2200      	movs	r2, #0
   28838:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   2883a:	687b      	ldr	r3, [r7, #4]
   2883c:	4a0a      	ldr	r2, [pc, #40]	; (28868 <system_clock_source_dpll_get_config_defaults+0x54>)
   2883e:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   28840:	687b      	ldr	r3, [r7, #4]
   28842:	2280      	movs	r2, #128	; 0x80
   28844:	0212      	lsls	r2, r2, #8
   28846:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   28848:	687b      	ldr	r3, [r7, #4]
   2884a:	2201      	movs	r2, #1
   2884c:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   2884e:	687b      	ldr	r3, [r7, #4]
   28850:	2200      	movs	r2, #0
   28852:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   28854:	687b      	ldr	r3, [r7, #4]
   28856:	2200      	movs	r2, #0
   28858:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   2885a:	687b      	ldr	r3, [r7, #4]
   2885c:	2200      	movs	r2, #0
   2885e:	749a      	strb	r2, [r3, #18]
};
   28860:	46c0      	nop			; (mov r8, r8)
   28862:	46bd      	mov	sp, r7
   28864:	b002      	add	sp, #8
   28866:	bd80      	pop	{r7, pc}
   28868:	02dc6c00 	.word	0x02dc6c00

0002886c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   2886c:	b580      	push	{r7, lr}
   2886e:	b082      	sub	sp, #8
   28870:	af00      	add	r7, sp, #0
   28872:	0002      	movs	r2, r0
   28874:	1dfb      	adds	r3, r7, #7
   28876:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   28878:	4a08      	ldr	r2, [pc, #32]	; (2889c <system_flash_set_waitstates+0x30>)
   2887a:	1dfb      	adds	r3, r7, #7
   2887c:	781b      	ldrb	r3, [r3, #0]
   2887e:	210f      	movs	r1, #15
   28880:	400b      	ands	r3, r1
   28882:	b2d9      	uxtb	r1, r3
   28884:	6853      	ldr	r3, [r2, #4]
   28886:	200f      	movs	r0, #15
   28888:	4001      	ands	r1, r0
   2888a:	0049      	lsls	r1, r1, #1
   2888c:	201e      	movs	r0, #30
   2888e:	4383      	bics	r3, r0
   28890:	430b      	orrs	r3, r1
   28892:	6053      	str	r3, [r2, #4]
}
   28894:	46c0      	nop			; (mov r8, r8)
   28896:	46bd      	mov	sp, r7
   28898:	b002      	add	sp, #8
   2889a:	bd80      	pop	{r7, pc}
   2889c:	41004000 	.word	0x41004000

000288a0 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   288a0:	b580      	push	{r7, lr}
   288a2:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   288a4:	46c0      	nop			; (mov r8, r8)
   288a6:	4b04      	ldr	r3, [pc, #16]	; (288b8 <_system_dfll_wait_for_sync+0x18>)
   288a8:	68db      	ldr	r3, [r3, #12]
   288aa:	2210      	movs	r2, #16
   288ac:	4013      	ands	r3, r2
   288ae:	d0fa      	beq.n	288a6 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   288b0:	46c0      	nop			; (mov r8, r8)
   288b2:	46bd      	mov	sp, r7
   288b4:	bd80      	pop	{r7, pc}
   288b6:	46c0      	nop			; (mov r8, r8)
   288b8:	40000800 	.word	0x40000800

000288bc <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   288bc:	b580      	push	{r7, lr}
   288be:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   288c0:	4b0c      	ldr	r3, [pc, #48]	; (288f4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   288c2:	2202      	movs	r2, #2
   288c4:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   288c6:	4b0c      	ldr	r3, [pc, #48]	; (288f8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   288c8:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   288ca:	4a0a      	ldr	r2, [pc, #40]	; (288f4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   288cc:	4b0b      	ldr	r3, [pc, #44]	; (288fc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   288ce:	689b      	ldr	r3, [r3, #8]
   288d0:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   288d2:	4a08      	ldr	r2, [pc, #32]	; (288f4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   288d4:	4b09      	ldr	r3, [pc, #36]	; (288fc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   288d6:	685b      	ldr	r3, [r3, #4]
   288d8:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   288da:	4b06      	ldr	r3, [pc, #24]	; (288f4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   288dc:	2200      	movs	r2, #0
   288de:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   288e0:	4b05      	ldr	r3, [pc, #20]	; (288f8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   288e2:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   288e4:	4a03      	ldr	r2, [pc, #12]	; (288f4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   288e6:	4b05      	ldr	r3, [pc, #20]	; (288fc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   288e8:	681b      	ldr	r3, [r3, #0]
   288ea:	b29b      	uxth	r3, r3
   288ec:	8493      	strh	r3, [r2, #36]	; 0x24
}
   288ee:	46c0      	nop			; (mov r8, r8)
   288f0:	46bd      	mov	sp, r7
   288f2:	bd80      	pop	{r7, pc}
   288f4:	40000800 	.word	0x40000800
   288f8:	000288a1 	.word	0x000288a1
   288fc:	20004140 	.word	0x20004140

00028900 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   28900:	b580      	push	{r7, lr}
   28902:	b082      	sub	sp, #8
   28904:	af00      	add	r7, sp, #0
   28906:	0002      	movs	r2, r0
   28908:	1dfb      	adds	r3, r7, #7
   2890a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2890c:	1dfb      	adds	r3, r7, #7
   2890e:	781b      	ldrb	r3, [r3, #0]
   28910:	2b08      	cmp	r3, #8
   28912:	d841      	bhi.n	28998 <system_clock_source_get_hz+0x98>
   28914:	009a      	lsls	r2, r3, #2
   28916:	4b23      	ldr	r3, [pc, #140]	; (289a4 <system_clock_source_get_hz+0xa4>)
   28918:	18d3      	adds	r3, r2, r3
   2891a:	681b      	ldr	r3, [r3, #0]
   2891c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   2891e:	4b22      	ldr	r3, [pc, #136]	; (289a8 <system_clock_source_get_hz+0xa8>)
   28920:	691b      	ldr	r3, [r3, #16]
   28922:	e03a      	b.n	2899a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   28924:	4b21      	ldr	r3, [pc, #132]	; (289ac <system_clock_source_get_hz+0xac>)
   28926:	6a1b      	ldr	r3, [r3, #32]
   28928:	059b      	lsls	r3, r3, #22
   2892a:	0f9b      	lsrs	r3, r3, #30
   2892c:	b2db      	uxtb	r3, r3
   2892e:	001a      	movs	r2, r3
   28930:	4b1f      	ldr	r3, [pc, #124]	; (289b0 <system_clock_source_get_hz+0xb0>)
   28932:	40d3      	lsrs	r3, r2
   28934:	e031      	b.n	2899a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   28936:	2380      	movs	r3, #128	; 0x80
   28938:	021b      	lsls	r3, r3, #8
   2893a:	e02e      	b.n	2899a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   2893c:	2380      	movs	r3, #128	; 0x80
   2893e:	021b      	lsls	r3, r3, #8
   28940:	e02b      	b.n	2899a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   28942:	4b19      	ldr	r3, [pc, #100]	; (289a8 <system_clock_source_get_hz+0xa8>)
   28944:	695b      	ldr	r3, [r3, #20]
   28946:	e028      	b.n	2899a <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   28948:	4b17      	ldr	r3, [pc, #92]	; (289a8 <system_clock_source_get_hz+0xa8>)
   2894a:	681b      	ldr	r3, [r3, #0]
   2894c:	2202      	movs	r2, #2
   2894e:	4013      	ands	r3, r2
   28950:	d101      	bne.n	28956 <system_clock_source_get_hz+0x56>
			return 0;
   28952:	2300      	movs	r3, #0
   28954:	e021      	b.n	2899a <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   28956:	4b17      	ldr	r3, [pc, #92]	; (289b4 <system_clock_source_get_hz+0xb4>)
   28958:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   2895a:	4b13      	ldr	r3, [pc, #76]	; (289a8 <system_clock_source_get_hz+0xa8>)
   2895c:	681b      	ldr	r3, [r3, #0]
   2895e:	2224      	movs	r2, #36	; 0x24
   28960:	4013      	ands	r3, r2
   28962:	2b04      	cmp	r3, #4
   28964:	d109      	bne.n	2897a <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   28966:	2000      	movs	r0, #0
   28968:	4b13      	ldr	r3, [pc, #76]	; (289b8 <system_clock_source_get_hz+0xb8>)
   2896a:	4798      	blx	r3
   2896c:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   2896e:	4b0e      	ldr	r3, [pc, #56]	; (289a8 <system_clock_source_get_hz+0xa8>)
   28970:	689b      	ldr	r3, [r3, #8]
   28972:	041b      	lsls	r3, r3, #16
   28974:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   28976:	4353      	muls	r3, r2
   28978:	e00f      	b.n	2899a <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   2897a:	4b10      	ldr	r3, [pc, #64]	; (289bc <system_clock_source_get_hz+0xbc>)
   2897c:	e00d      	b.n	2899a <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   2897e:	4a0b      	ldr	r2, [pc, #44]	; (289ac <system_clock_source_get_hz+0xac>)
   28980:	2350      	movs	r3, #80	; 0x50
   28982:	5cd3      	ldrb	r3, [r2, r3]
   28984:	b2db      	uxtb	r3, r3
   28986:	001a      	movs	r2, r3
   28988:	2304      	movs	r3, #4
   2898a:	4013      	ands	r3, r2
   2898c:	d101      	bne.n	28992 <system_clock_source_get_hz+0x92>
			return 0;
   2898e:	2300      	movs	r3, #0
   28990:	e003      	b.n	2899a <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   28992:	4b05      	ldr	r3, [pc, #20]	; (289a8 <system_clock_source_get_hz+0xa8>)
   28994:	68db      	ldr	r3, [r3, #12]
   28996:	e000      	b.n	2899a <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   28998:	2300      	movs	r3, #0
	}
}
   2899a:	0018      	movs	r0, r3
   2899c:	46bd      	mov	sp, r7
   2899e:	b002      	add	sp, #8
   289a0:	bd80      	pop	{r7, pc}
   289a2:	46c0      	nop			; (mov r8, r8)
   289a4:	00038bb0 	.word	0x00038bb0
   289a8:	20004140 	.word	0x20004140
   289ac:	40000800 	.word	0x40000800
   289b0:	007a1200 	.word	0x007a1200
   289b4:	000288a1 	.word	0x000288a1
   289b8:	0002939d 	.word	0x0002939d
   289bc:	02dc6c00 	.word	0x02dc6c00

000289c0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   289c0:	b580      	push	{r7, lr}
   289c2:	b084      	sub	sp, #16
   289c4:	af00      	add	r7, sp, #0
   289c6:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   289c8:	4b1a      	ldr	r3, [pc, #104]	; (28a34 <system_clock_source_osc8m_set_config+0x74>)
   289ca:	6a1b      	ldr	r3, [r3, #32]
   289cc:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   289ce:	687b      	ldr	r3, [r7, #4]
   289d0:	781b      	ldrb	r3, [r3, #0]
   289d2:	1c1a      	adds	r2, r3, #0
   289d4:	2303      	movs	r3, #3
   289d6:	4013      	ands	r3, r2
   289d8:	b2da      	uxtb	r2, r3
   289da:	230d      	movs	r3, #13
   289dc:	18fb      	adds	r3, r7, r3
   289de:	2103      	movs	r1, #3
   289e0:	400a      	ands	r2, r1
   289e2:	0010      	movs	r0, r2
   289e4:	781a      	ldrb	r2, [r3, #0]
   289e6:	2103      	movs	r1, #3
   289e8:	438a      	bics	r2, r1
   289ea:	1c11      	adds	r1, r2, #0
   289ec:	1c02      	adds	r2, r0, #0
   289ee:	430a      	orrs	r2, r1
   289f0:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   289f2:	687b      	ldr	r3, [r7, #4]
   289f4:	789a      	ldrb	r2, [r3, #2]
   289f6:	230c      	movs	r3, #12
   289f8:	18fb      	adds	r3, r7, r3
   289fa:	01d0      	lsls	r0, r2, #7
   289fc:	781a      	ldrb	r2, [r3, #0]
   289fe:	217f      	movs	r1, #127	; 0x7f
   28a00:	400a      	ands	r2, r1
   28a02:	1c11      	adds	r1, r2, #0
   28a04:	1c02      	adds	r2, r0, #0
   28a06:	430a      	orrs	r2, r1
   28a08:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   28a0a:	687b      	ldr	r3, [r7, #4]
   28a0c:	785a      	ldrb	r2, [r3, #1]
   28a0e:	230c      	movs	r3, #12
   28a10:	18fb      	adds	r3, r7, r3
   28a12:	2101      	movs	r1, #1
   28a14:	400a      	ands	r2, r1
   28a16:	0190      	lsls	r0, r2, #6
   28a18:	781a      	ldrb	r2, [r3, #0]
   28a1a:	2140      	movs	r1, #64	; 0x40
   28a1c:	438a      	bics	r2, r1
   28a1e:	1c11      	adds	r1, r2, #0
   28a20:	1c02      	adds	r2, r0, #0
   28a22:	430a      	orrs	r2, r1
   28a24:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   28a26:	4b03      	ldr	r3, [pc, #12]	; (28a34 <system_clock_source_osc8m_set_config+0x74>)
   28a28:	68fa      	ldr	r2, [r7, #12]
   28a2a:	621a      	str	r2, [r3, #32]
}
   28a2c:	46c0      	nop			; (mov r8, r8)
   28a2e:	46bd      	mov	sp, r7
   28a30:	b004      	add	sp, #16
   28a32:	bd80      	pop	{r7, pc}
   28a34:	40000800 	.word	0x40000800

00028a38 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   28a38:	b580      	push	{r7, lr}
   28a3a:	b086      	sub	sp, #24
   28a3c:	af00      	add	r7, sp, #0
   28a3e:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   28a40:	687b      	ldr	r3, [r7, #4]
   28a42:	68db      	ldr	r3, [r3, #12]
   28a44:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   28a46:	687b      	ldr	r3, [r7, #4]
   28a48:	7d1b      	ldrb	r3, [r3, #20]
   28a4a:	2b01      	cmp	r3, #1
   28a4c:	d10a      	bne.n	28a64 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   28a4e:	687b      	ldr	r3, [r7, #4]
   28a50:	8a1b      	ldrh	r3, [r3, #16]
   28a52:	3301      	adds	r3, #1
   28a54:	005b      	lsls	r3, r3, #1
   28a56:	001a      	movs	r2, r3
   28a58:	4b36      	ldr	r3, [pc, #216]	; (28b34 <system_clock_source_dpll_set_config+0xfc>)
   28a5a:	0011      	movs	r1, r2
   28a5c:	6978      	ldr	r0, [r7, #20]
   28a5e:	4798      	blx	r3
   28a60:	0003      	movs	r3, r0
   28a62:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   28a64:	687b      	ldr	r3, [r7, #4]
   28a66:	689b      	ldr	r3, [r3, #8]
   28a68:	011a      	lsls	r2, r3, #4
   28a6a:	4b32      	ldr	r3, [pc, #200]	; (28b34 <system_clock_source_dpll_set_config+0xfc>)
   28a6c:	6979      	ldr	r1, [r7, #20]
   28a6e:	0010      	movs	r0, r2
   28a70:	4798      	blx	r3
   28a72:	0003      	movs	r3, r0
   28a74:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   28a76:	693b      	ldr	r3, [r7, #16]
   28a78:	b2da      	uxtb	r2, r3
   28a7a:	230f      	movs	r3, #15
   28a7c:	18fb      	adds	r3, r7, r3
   28a7e:	210f      	movs	r1, #15
   28a80:	400a      	ands	r2, r1
   28a82:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   28a84:	693b      	ldr	r3, [r7, #16]
   28a86:	091b      	lsrs	r3, r3, #4
   28a88:	3b01      	subs	r3, #1
   28a8a:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   28a8c:	492a      	ldr	r1, [pc, #168]	; (28b38 <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   28a8e:	687b      	ldr	r3, [r7, #4]
   28a90:	781b      	ldrb	r3, [r3, #0]
   28a92:	01db      	lsls	r3, r3, #7
   28a94:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   28a96:	687b      	ldr	r3, [r7, #4]
   28a98:	785b      	ldrb	r3, [r3, #1]
   28a9a:	019b      	lsls	r3, r3, #6
   28a9c:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   28a9e:	4313      	orrs	r3, r2
   28aa0:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   28aa2:	2344      	movs	r3, #68	; 0x44
   28aa4:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   28aa6:	4b24      	ldr	r3, [pc, #144]	; (28b38 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   28aa8:	220f      	movs	r2, #15
   28aaa:	18ba      	adds	r2, r7, r2
   28aac:	7812      	ldrb	r2, [r2, #0]
   28aae:	0412      	lsls	r2, r2, #16
   28ab0:	0011      	movs	r1, r2
   28ab2:	22f0      	movs	r2, #240	; 0xf0
   28ab4:	0312      	lsls	r2, r2, #12
   28ab6:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   28ab8:	693a      	ldr	r2, [r7, #16]
   28aba:	0512      	lsls	r2, r2, #20
   28abc:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   28abe:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   28ac0:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   28ac2:	4b1d      	ldr	r3, [pc, #116]	; (28b38 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   28ac4:	687a      	ldr	r2, [r7, #4]
   28ac6:	8a12      	ldrh	r2, [r2, #16]
   28ac8:	0412      	lsls	r2, r2, #16
   28aca:	0011      	movs	r1, r2
   28acc:	4a1b      	ldr	r2, [pc, #108]	; (28b3c <system_clock_source_dpll_set_config+0x104>)
   28ace:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   28ad0:	687a      	ldr	r2, [r7, #4]
   28ad2:	7892      	ldrb	r2, [r2, #2]
   28ad4:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   28ad6:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   28ad8:	687a      	ldr	r2, [r7, #4]
   28ada:	7cd2      	ldrb	r2, [r2, #19]
   28adc:	0212      	lsls	r2, r2, #8
   28ade:	0010      	movs	r0, r2
   28ae0:	22e0      	movs	r2, #224	; 0xe0
   28ae2:	00d2      	lsls	r2, r2, #3
   28ae4:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   28ae6:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   28ae8:	687a      	ldr	r2, [r7, #4]
   28aea:	7d12      	ldrb	r2, [r2, #20]
   28aec:	0112      	lsls	r2, r2, #4
   28aee:	0010      	movs	r0, r2
   28af0:	2230      	movs	r2, #48	; 0x30
   28af2:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   28af4:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   28af6:	687a      	ldr	r2, [r7, #4]
   28af8:	78d2      	ldrb	r2, [r2, #3]
   28afa:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   28afc:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   28afe:	687a      	ldr	r2, [r7, #4]
   28b00:	7912      	ldrb	r2, [r2, #4]
   28b02:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   28b04:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   28b06:	687a      	ldr	r2, [r7, #4]
   28b08:	7c92      	ldrb	r2, [r2, #18]
   28b0a:	0010      	movs	r0, r2
   28b0c:	2203      	movs	r2, #3
   28b0e:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   28b10:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   28b12:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   28b14:	693b      	ldr	r3, [r7, #16]
   28b16:	3301      	adds	r3, #1
   28b18:	011a      	lsls	r2, r3, #4
   28b1a:	230f      	movs	r3, #15
   28b1c:	18fb      	adds	r3, r7, r3
   28b1e:	781b      	ldrb	r3, [r3, #0]
   28b20:	18d3      	adds	r3, r2, r3
   28b22:	697a      	ldr	r2, [r7, #20]
   28b24:	4353      	muls	r3, r2
   28b26:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   28b28:	4b05      	ldr	r3, [pc, #20]	; (28b40 <system_clock_source_dpll_set_config+0x108>)
   28b2a:	60da      	str	r2, [r3, #12]
}
   28b2c:	46c0      	nop			; (mov r8, r8)
   28b2e:	46bd      	mov	sp, r7
   28b30:	b006      	add	sp, #24
   28b32:	bd80      	pop	{r7, pc}
   28b34:	00031e9d 	.word	0x00031e9d
   28b38:	40000800 	.word	0x40000800
   28b3c:	07ff0000 	.word	0x07ff0000
   28b40:	20004140 	.word	0x20004140

00028b44 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   28b44:	b580      	push	{r7, lr}
   28b46:	b082      	sub	sp, #8
   28b48:	af00      	add	r7, sp, #0
   28b4a:	0002      	movs	r2, r0
   28b4c:	1dfb      	adds	r3, r7, #7
   28b4e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   28b50:	1dfb      	adds	r3, r7, #7
   28b52:	781b      	ldrb	r3, [r3, #0]
   28b54:	2b08      	cmp	r3, #8
   28b56:	d83b      	bhi.n	28bd0 <system_clock_source_enable+0x8c>
   28b58:	009a      	lsls	r2, r3, #2
   28b5a:	4b21      	ldr	r3, [pc, #132]	; (28be0 <system_clock_source_enable+0x9c>)
   28b5c:	18d3      	adds	r3, r2, r3
   28b5e:	681b      	ldr	r3, [r3, #0]
   28b60:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   28b62:	4b20      	ldr	r3, [pc, #128]	; (28be4 <system_clock_source_enable+0xa0>)
   28b64:	4a1f      	ldr	r2, [pc, #124]	; (28be4 <system_clock_source_enable+0xa0>)
   28b66:	6a12      	ldr	r2, [r2, #32]
   28b68:	2102      	movs	r1, #2
   28b6a:	430a      	orrs	r2, r1
   28b6c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   28b6e:	2300      	movs	r3, #0
   28b70:	e031      	b.n	28bd6 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   28b72:	4b1c      	ldr	r3, [pc, #112]	; (28be4 <system_clock_source_enable+0xa0>)
   28b74:	4a1b      	ldr	r2, [pc, #108]	; (28be4 <system_clock_source_enable+0xa0>)
   28b76:	6992      	ldr	r2, [r2, #24]
   28b78:	2102      	movs	r1, #2
   28b7a:	430a      	orrs	r2, r1
   28b7c:	619a      	str	r2, [r3, #24]
		break;
   28b7e:	e029      	b.n	28bd4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   28b80:	4a18      	ldr	r2, [pc, #96]	; (28be4 <system_clock_source_enable+0xa0>)
   28b82:	4b18      	ldr	r3, [pc, #96]	; (28be4 <system_clock_source_enable+0xa0>)
   28b84:	8a1b      	ldrh	r3, [r3, #16]
   28b86:	b29b      	uxth	r3, r3
   28b88:	2102      	movs	r1, #2
   28b8a:	430b      	orrs	r3, r1
   28b8c:	b29b      	uxth	r3, r3
   28b8e:	8213      	strh	r3, [r2, #16]
		break;
   28b90:	e020      	b.n	28bd4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   28b92:	4a14      	ldr	r2, [pc, #80]	; (28be4 <system_clock_source_enable+0xa0>)
   28b94:	4b13      	ldr	r3, [pc, #76]	; (28be4 <system_clock_source_enable+0xa0>)
   28b96:	8a9b      	ldrh	r3, [r3, #20]
   28b98:	b29b      	uxth	r3, r3
   28b9a:	2102      	movs	r1, #2
   28b9c:	430b      	orrs	r3, r1
   28b9e:	b29b      	uxth	r3, r3
   28ba0:	8293      	strh	r3, [r2, #20]
		break;
   28ba2:	e017      	b.n	28bd4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   28ba4:	4b10      	ldr	r3, [pc, #64]	; (28be8 <system_clock_source_enable+0xa4>)
   28ba6:	681b      	ldr	r3, [r3, #0]
   28ba8:	2202      	movs	r2, #2
   28baa:	431a      	orrs	r2, r3
   28bac:	4b0e      	ldr	r3, [pc, #56]	; (28be8 <system_clock_source_enable+0xa4>)
   28bae:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   28bb0:	4b0e      	ldr	r3, [pc, #56]	; (28bec <system_clock_source_enable+0xa8>)
   28bb2:	4798      	blx	r3
		break;
   28bb4:	e00e      	b.n	28bd4 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   28bb6:	4a0b      	ldr	r2, [pc, #44]	; (28be4 <system_clock_source_enable+0xa0>)
   28bb8:	490a      	ldr	r1, [pc, #40]	; (28be4 <system_clock_source_enable+0xa0>)
   28bba:	2344      	movs	r3, #68	; 0x44
   28bbc:	5ccb      	ldrb	r3, [r1, r3]
   28bbe:	b2db      	uxtb	r3, r3
   28bc0:	2102      	movs	r1, #2
   28bc2:	430b      	orrs	r3, r1
   28bc4:	b2d9      	uxtb	r1, r3
   28bc6:	2344      	movs	r3, #68	; 0x44
   28bc8:	54d1      	strb	r1, [r2, r3]
		break;
   28bca:	e003      	b.n	28bd4 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   28bcc:	2300      	movs	r3, #0
   28bce:	e002      	b.n	28bd6 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   28bd0:	2317      	movs	r3, #23
   28bd2:	e000      	b.n	28bd6 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   28bd4:	2300      	movs	r3, #0
}
   28bd6:	0018      	movs	r0, r3
   28bd8:	46bd      	mov	sp, r7
   28bda:	b002      	add	sp, #8
   28bdc:	bd80      	pop	{r7, pc}
   28bde:	46c0      	nop			; (mov r8, r8)
   28be0:	00038bd4 	.word	0x00038bd4
   28be4:	40000800 	.word	0x40000800
   28be8:	20004140 	.word	0x20004140
   28bec:	000288bd 	.word	0x000288bd

00028bf0 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   28bf0:	b580      	push	{r7, lr}
   28bf2:	b084      	sub	sp, #16
   28bf4:	af00      	add	r7, sp, #0
   28bf6:	0002      	movs	r2, r0
   28bf8:	1dfb      	adds	r3, r7, #7
   28bfa:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   28bfc:	2300      	movs	r3, #0
   28bfe:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   28c00:	1dfb      	adds	r3, r7, #7
   28c02:	781b      	ldrb	r3, [r3, #0]
   28c04:	2b08      	cmp	r3, #8
   28c06:	d821      	bhi.n	28c4c <system_clock_source_is_ready+0x5c>
   28c08:	009a      	lsls	r2, r3, #2
   28c0a:	4b18      	ldr	r3, [pc, #96]	; (28c6c <system_clock_source_is_ready+0x7c>)
   28c0c:	18d3      	adds	r3, r2, r3
   28c0e:	681b      	ldr	r3, [r3, #0]
   28c10:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   28c12:	2308      	movs	r3, #8
   28c14:	60fb      	str	r3, [r7, #12]
		break;
   28c16:	e01b      	b.n	28c50 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   28c18:	2304      	movs	r3, #4
   28c1a:	60fb      	str	r3, [r7, #12]
		break;
   28c1c:	e018      	b.n	28c50 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   28c1e:	2301      	movs	r3, #1
   28c20:	60fb      	str	r3, [r7, #12]
		break;
   28c22:	e015      	b.n	28c50 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   28c24:	2302      	movs	r3, #2
   28c26:	60fb      	str	r3, [r7, #12]
		break;
   28c28:	e012      	b.n	28c50 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   28c2a:	2310      	movs	r3, #16
   28c2c:	60fb      	str	r3, [r7, #12]
		}
		break;
   28c2e:	e00f      	b.n	28c50 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   28c30:	4a0f      	ldr	r2, [pc, #60]	; (28c70 <system_clock_source_is_ready+0x80>)
   28c32:	2350      	movs	r3, #80	; 0x50
   28c34:	5cd3      	ldrb	r3, [r2, r3]
   28c36:	b2db      	uxtb	r3, r3
   28c38:	001a      	movs	r2, r3
   28c3a:	2303      	movs	r3, #3
   28c3c:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   28c3e:	3b03      	subs	r3, #3
   28c40:	425a      	negs	r2, r3
   28c42:	4153      	adcs	r3, r2
   28c44:	b2db      	uxtb	r3, r3
   28c46:	e00c      	b.n	28c62 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   28c48:	2301      	movs	r3, #1
   28c4a:	e00a      	b.n	28c62 <system_clock_source_is_ready+0x72>

	default:
		return false;
   28c4c:	2300      	movs	r3, #0
   28c4e:	e008      	b.n	28c62 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   28c50:	4b07      	ldr	r3, [pc, #28]	; (28c70 <system_clock_source_is_ready+0x80>)
   28c52:	68db      	ldr	r3, [r3, #12]
   28c54:	68fa      	ldr	r2, [r7, #12]
   28c56:	401a      	ands	r2, r3
   28c58:	68fb      	ldr	r3, [r7, #12]
   28c5a:	1ad3      	subs	r3, r2, r3
   28c5c:	425a      	negs	r2, r3
   28c5e:	4153      	adcs	r3, r2
   28c60:	b2db      	uxtb	r3, r3
}
   28c62:	0018      	movs	r0, r3
   28c64:	46bd      	mov	sp, r7
   28c66:	b004      	add	sp, #16
   28c68:	bd80      	pop	{r7, pc}
   28c6a:	46c0      	nop			; (mov r8, r8)
   28c6c:	00038bf8 	.word	0x00038bf8
   28c70:	40000800 	.word	0x40000800

00028c74 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   28c74:	b580      	push	{r7, lr}
   28c76:	b082      	sub	sp, #8
   28c78:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   28c7a:	003b      	movs	r3, r7
   28c7c:	2203      	movs	r2, #3
   28c7e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   28c80:	2300      	movs	r3, #0
   28c82:	607b      	str	r3, [r7, #4]
   28c84:	e009      	b.n	28c9a <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   28c86:	687b      	ldr	r3, [r7, #4]
   28c88:	b2db      	uxtb	r3, r3
   28c8a:	003a      	movs	r2, r7
   28c8c:	0011      	movs	r1, r2
   28c8e:	0018      	movs	r0, r3
   28c90:	4b05      	ldr	r3, [pc, #20]	; (28ca8 <_switch_peripheral_gclk+0x34>)
   28c92:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   28c94:	687b      	ldr	r3, [r7, #4]
   28c96:	3301      	adds	r3, #1
   28c98:	607b      	str	r3, [r7, #4]
   28c9a:	687b      	ldr	r3, [r7, #4]
   28c9c:	2b24      	cmp	r3, #36	; 0x24
   28c9e:	d9f2      	bls.n	28c86 <_switch_peripheral_gclk+0x12>
	}
}
   28ca0:	46c0      	nop			; (mov r8, r8)
   28ca2:	46bd      	mov	sp, r7
   28ca4:	b002      	add	sp, #8
   28ca6:	bd80      	pop	{r7, pc}
   28ca8:	00029279 	.word	0x00029279

00028cac <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   28cac:	b580      	push	{r7, lr}
   28cae:	b0a6      	sub	sp, #152	; 0x98
   28cb0:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   28cb2:	4b92      	ldr	r3, [pc, #584]	; (28efc <system_clock_init+0x250>)
   28cb4:	22c2      	movs	r2, #194	; 0xc2
   28cb6:	00d2      	lsls	r2, r2, #3
   28cb8:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   28cba:	2003      	movs	r0, #3
   28cbc:	4b90      	ldr	r3, [pc, #576]	; (28f00 <system_clock_init+0x254>)
   28cbe:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   28cc0:	4b90      	ldr	r3, [pc, #576]	; (28f04 <system_clock_init+0x258>)
   28cc2:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   28cc4:	2394      	movs	r3, #148	; 0x94
   28cc6:	18fb      	adds	r3, r7, r3
   28cc8:	0018      	movs	r0, r3
   28cca:	4b8f      	ldr	r3, [pc, #572]	; (28f08 <system_clock_init+0x25c>)
   28ccc:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   28cce:	2394      	movs	r3, #148	; 0x94
   28cd0:	18fb      	adds	r3, r7, r3
   28cd2:	2200      	movs	r2, #0
   28cd4:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   28cd6:	2394      	movs	r3, #148	; 0x94
   28cd8:	18fb      	adds	r3, r7, r3
   28cda:	2201      	movs	r2, #1
   28cdc:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   28cde:	2394      	movs	r3, #148	; 0x94
   28ce0:	18fb      	adds	r3, r7, r3
   28ce2:	2200      	movs	r2, #0
   28ce4:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   28ce6:	2394      	movs	r3, #148	; 0x94
   28ce8:	18fb      	adds	r3, r7, r3
   28cea:	0018      	movs	r0, r3
   28cec:	4b87      	ldr	r3, [pc, #540]	; (28f0c <system_clock_init+0x260>)
   28cee:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   28cf0:	2006      	movs	r0, #6
   28cf2:	4b87      	ldr	r3, [pc, #540]	; (28f10 <system_clock_init+0x264>)
   28cf4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   28cf6:	4b87      	ldr	r3, [pc, #540]	; (28f14 <system_clock_init+0x268>)
   28cf8:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   28cfa:	2360      	movs	r3, #96	; 0x60
   28cfc:	18fb      	adds	r3, r7, r3
   28cfe:	0018      	movs	r0, r3
   28d00:	4b85      	ldr	r3, [pc, #532]	; (28f18 <system_clock_init+0x26c>)
   28d02:	4798      	blx	r3
   28d04:	2360      	movs	r3, #96	; 0x60
   28d06:	18fb      	adds	r3, r7, r3
   28d08:	2206      	movs	r2, #6
   28d0a:	701a      	strb	r2, [r3, #0]
   28d0c:	2360      	movs	r3, #96	; 0x60
   28d0e:	18fb      	adds	r3, r7, r3
   28d10:	2208      	movs	r2, #8
   28d12:	605a      	str	r2, [r3, #4]
   28d14:	2360      	movs	r3, #96	; 0x60
   28d16:	18fb      	adds	r3, r7, r3
   28d18:	2200      	movs	r2, #0
   28d1a:	721a      	strb	r2, [r3, #8]
   28d1c:	2360      	movs	r3, #96	; 0x60
   28d1e:	18fb      	adds	r3, r7, r3
   28d20:	2200      	movs	r2, #0
   28d22:	725a      	strb	r2, [r3, #9]
   28d24:	2360      	movs	r3, #96	; 0x60
   28d26:	18fb      	adds	r3, r7, r3
   28d28:	0019      	movs	r1, r3
   28d2a:	2001      	movs	r0, #1
   28d2c:	4b7b      	ldr	r3, [pc, #492]	; (28f1c <system_clock_init+0x270>)
   28d2e:	4798      	blx	r3
   28d30:	2001      	movs	r0, #1
   28d32:	4b7b      	ldr	r3, [pc, #492]	; (28f20 <system_clock_init+0x274>)
   28d34:	4798      	blx	r3
   28d36:	2354      	movs	r3, #84	; 0x54
   28d38:	18fb      	adds	r3, r7, r3
   28d3a:	0018      	movs	r0, r3
   28d3c:	4b76      	ldr	r3, [pc, #472]	; (28f18 <system_clock_init+0x26c>)
   28d3e:	4798      	blx	r3
   28d40:	2354      	movs	r3, #84	; 0x54
   28d42:	18fb      	adds	r3, r7, r3
   28d44:	2203      	movs	r2, #3
   28d46:	701a      	strb	r2, [r3, #0]
   28d48:	2354      	movs	r3, #84	; 0x54
   28d4a:	18fb      	adds	r3, r7, r3
   28d4c:	2201      	movs	r2, #1
   28d4e:	605a      	str	r2, [r3, #4]
   28d50:	2354      	movs	r3, #84	; 0x54
   28d52:	18fb      	adds	r3, r7, r3
   28d54:	2201      	movs	r2, #1
   28d56:	721a      	strb	r2, [r3, #8]
   28d58:	2354      	movs	r3, #84	; 0x54
   28d5a:	18fb      	adds	r3, r7, r3
   28d5c:	2200      	movs	r2, #0
   28d5e:	725a      	strb	r2, [r3, #9]
   28d60:	2354      	movs	r3, #84	; 0x54
   28d62:	18fb      	adds	r3, r7, r3
   28d64:	0019      	movs	r1, r3
   28d66:	2002      	movs	r0, #2
   28d68:	4b6c      	ldr	r3, [pc, #432]	; (28f1c <system_clock_init+0x270>)
   28d6a:	4798      	blx	r3
   28d6c:	2002      	movs	r0, #2
   28d6e:	4b6c      	ldr	r3, [pc, #432]	; (28f20 <system_clock_init+0x274>)
   28d70:	4798      	blx	r3
   28d72:	233c      	movs	r3, #60	; 0x3c
   28d74:	18fb      	adds	r3, r7, r3
   28d76:	0018      	movs	r0, r3
   28d78:	4b67      	ldr	r3, [pc, #412]	; (28f18 <system_clock_init+0x26c>)
   28d7a:	4798      	blx	r3
   28d7c:	233c      	movs	r3, #60	; 0x3c
   28d7e:	18fb      	adds	r3, r7, r3
   28d80:	2203      	movs	r2, #3
   28d82:	701a      	strb	r2, [r3, #0]
   28d84:	233c      	movs	r3, #60	; 0x3c
   28d86:	18fb      	adds	r3, r7, r3
   28d88:	2220      	movs	r2, #32
   28d8a:	605a      	str	r2, [r3, #4]
   28d8c:	233c      	movs	r3, #60	; 0x3c
   28d8e:	18fb      	adds	r3, r7, r3
   28d90:	2200      	movs	r2, #0
   28d92:	721a      	strb	r2, [r3, #8]
   28d94:	233c      	movs	r3, #60	; 0x3c
   28d96:	18fb      	adds	r3, r7, r3
   28d98:	2200      	movs	r2, #0
   28d9a:	725a      	strb	r2, [r3, #9]
   28d9c:	233c      	movs	r3, #60	; 0x3c
   28d9e:	18fb      	adds	r3, r7, r3
   28da0:	0019      	movs	r1, r3
   28da2:	2004      	movs	r0, #4
   28da4:	4b5d      	ldr	r3, [pc, #372]	; (28f1c <system_clock_init+0x270>)
   28da6:	4798      	blx	r3
   28da8:	2004      	movs	r0, #4
   28daa:	4b5d      	ldr	r3, [pc, #372]	; (28f20 <system_clock_init+0x274>)
   28dac:	4798      	blx	r3
   28dae:	2330      	movs	r3, #48	; 0x30
   28db0:	18fb      	adds	r3, r7, r3
   28db2:	0018      	movs	r0, r3
   28db4:	4b58      	ldr	r3, [pc, #352]	; (28f18 <system_clock_init+0x26c>)
   28db6:	4798      	blx	r3
   28db8:	2330      	movs	r3, #48	; 0x30
   28dba:	18fb      	adds	r3, r7, r3
   28dbc:	2206      	movs	r2, #6
   28dbe:	701a      	strb	r2, [r3, #0]
   28dc0:	2330      	movs	r3, #48	; 0x30
   28dc2:	18fb      	adds	r3, r7, r3
   28dc4:	2201      	movs	r2, #1
   28dc6:	605a      	str	r2, [r3, #4]
   28dc8:	2330      	movs	r3, #48	; 0x30
   28dca:	18fb      	adds	r3, r7, r3
   28dcc:	2200      	movs	r2, #0
   28dce:	721a      	strb	r2, [r3, #8]
   28dd0:	2330      	movs	r3, #48	; 0x30
   28dd2:	18fb      	adds	r3, r7, r3
   28dd4:	2200      	movs	r2, #0
   28dd6:	725a      	strb	r2, [r3, #9]
   28dd8:	2330      	movs	r3, #48	; 0x30
   28dda:	18fb      	adds	r3, r7, r3
   28ddc:	0019      	movs	r1, r3
   28dde:	2005      	movs	r0, #5
   28de0:	4b4e      	ldr	r3, [pc, #312]	; (28f1c <system_clock_init+0x270>)
   28de2:	4798      	blx	r3
   28de4:	2005      	movs	r0, #5
   28de6:	4b4e      	ldr	r3, [pc, #312]	; (28f20 <system_clock_init+0x274>)
   28de8:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   28dea:	2390      	movs	r3, #144	; 0x90
   28dec:	18fb      	adds	r3, r7, r3
   28dee:	0018      	movs	r0, r3
   28df0:	4b4c      	ldr	r3, [pc, #304]	; (28f24 <system_clock_init+0x278>)
   28df2:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   28df4:	2390      	movs	r3, #144	; 0x90
   28df6:	18fb      	adds	r3, r7, r3
   28df8:	2201      	movs	r2, #1
   28dfa:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   28dfc:	2390      	movs	r3, #144	; 0x90
   28dfe:	18fb      	adds	r3, r7, r3
   28e00:	0019      	movs	r1, r3
   28e02:	2001      	movs	r0, #1
   28e04:	4b48      	ldr	r3, [pc, #288]	; (28f28 <system_clock_init+0x27c>)
   28e06:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   28e08:	2001      	movs	r0, #1
   28e0a:	4b48      	ldr	r3, [pc, #288]	; (28f2c <system_clock_init+0x280>)
   28e0c:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   28e0e:	2378      	movs	r3, #120	; 0x78
   28e10:	18fb      	adds	r3, r7, r3
   28e12:	0018      	movs	r0, r3
   28e14:	4b46      	ldr	r3, [pc, #280]	; (28f30 <system_clock_init+0x284>)
   28e16:	4798      	blx	r3

	dpll_config.on_demand        = false;
   28e18:	2378      	movs	r3, #120	; 0x78
   28e1a:	18fb      	adds	r3, r7, r3
   28e1c:	2200      	movs	r2, #0
   28e1e:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   28e20:	2378      	movs	r3, #120	; 0x78
   28e22:	18fb      	adds	r3, r7, r3
   28e24:	2200      	movs	r2, #0
   28e26:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   28e28:	2378      	movs	r3, #120	; 0x78
   28e2a:	18fb      	adds	r3, r7, r3
   28e2c:	2200      	movs	r2, #0
   28e2e:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   28e30:	2378      	movs	r3, #120	; 0x78
   28e32:	18fb      	adds	r3, r7, r3
   28e34:	2200      	movs	r2, #0
   28e36:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   28e38:	2378      	movs	r3, #120	; 0x78
   28e3a:	18fb      	adds	r3, r7, r3
   28e3c:	2200      	movs	r2, #0
   28e3e:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   28e40:	2378      	movs	r3, #120	; 0x78
   28e42:	18fb      	adds	r3, r7, r3
   28e44:	2200      	movs	r2, #0
   28e46:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   28e48:	2378      	movs	r3, #120	; 0x78
   28e4a:	18fb      	adds	r3, r7, r3
   28e4c:	2200      	movs	r2, #0
   28e4e:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   28e50:	2378      	movs	r3, #120	; 0x78
   28e52:	18fb      	adds	r3, r7, r3
   28e54:	2202      	movs	r2, #2
   28e56:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   28e58:	2378      	movs	r3, #120	; 0x78
   28e5a:	18fb      	adds	r3, r7, r3
   28e5c:	4a35      	ldr	r2, [pc, #212]	; (28f34 <system_clock_init+0x288>)
   28e5e:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   28e60:	2378      	movs	r3, #120	; 0x78
   28e62:	18fb      	adds	r3, r7, r3
   28e64:	2201      	movs	r2, #1
   28e66:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   28e68:	2378      	movs	r3, #120	; 0x78
   28e6a:	18fb      	adds	r3, r7, r3
   28e6c:	4a32      	ldr	r2, [pc, #200]	; (28f38 <system_clock_init+0x28c>)
   28e6e:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   28e70:	2378      	movs	r3, #120	; 0x78
   28e72:	18fb      	adds	r3, r7, r3
   28e74:	0018      	movs	r0, r3
   28e76:	4b31      	ldr	r3, [pc, #196]	; (28f3c <system_clock_init+0x290>)
   28e78:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   28e7a:	2008      	movs	r0, #8
   28e7c:	4b24      	ldr	r3, [pc, #144]	; (28f10 <system_clock_init+0x264>)
   28e7e:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   28e80:	46c0      	nop			; (mov r8, r8)
   28e82:	2008      	movs	r0, #8
   28e84:	4b2e      	ldr	r3, [pc, #184]	; (28f40 <system_clock_init+0x294>)
   28e86:	4798      	blx	r3
   28e88:	0003      	movs	r3, r0
   28e8a:	001a      	movs	r2, r3
   28e8c:	2301      	movs	r3, #1
   28e8e:	4053      	eors	r3, r2
   28e90:	b2db      	uxtb	r3, r3
   28e92:	2b00      	cmp	r3, #0
   28e94:	d1f5      	bne.n	28e82 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   28e96:	4919      	ldr	r1, [pc, #100]	; (28efc <system_clock_init+0x250>)
   28e98:	2244      	movs	r2, #68	; 0x44
   28e9a:	5c8b      	ldrb	r3, [r1, r2]
   28e9c:	2080      	movs	r0, #128	; 0x80
   28e9e:	4240      	negs	r0, r0
   28ea0:	4303      	orrs	r3, r0
   28ea2:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   28ea4:	2000      	movs	r0, #0
   28ea6:	4b27      	ldr	r3, [pc, #156]	; (28f44 <system_clock_init+0x298>)
   28ea8:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   28eaa:	2100      	movs	r1, #0
   28eac:	2000      	movs	r0, #0
   28eae:	4b26      	ldr	r3, [pc, #152]	; (28f48 <system_clock_init+0x29c>)
   28eb0:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   28eb2:	2100      	movs	r1, #0
   28eb4:	2001      	movs	r0, #1
   28eb6:	4b24      	ldr	r3, [pc, #144]	; (28f48 <system_clock_init+0x29c>)
   28eb8:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   28eba:	2100      	movs	r1, #0
   28ebc:	2002      	movs	r0, #2
   28ebe:	4b22      	ldr	r3, [pc, #136]	; (28f48 <system_clock_init+0x29c>)
   28ec0:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   28ec2:	003b      	movs	r3, r7
   28ec4:	0018      	movs	r0, r3
   28ec6:	4b14      	ldr	r3, [pc, #80]	; (28f18 <system_clock_init+0x26c>)
   28ec8:	4798      	blx	r3
   28eca:	003b      	movs	r3, r7
   28ecc:	2208      	movs	r2, #8
   28ece:	701a      	strb	r2, [r3, #0]
   28ed0:	003b      	movs	r3, r7
   28ed2:	2201      	movs	r2, #1
   28ed4:	605a      	str	r2, [r3, #4]
   28ed6:	003b      	movs	r3, r7
   28ed8:	2200      	movs	r2, #0
   28eda:	721a      	strb	r2, [r3, #8]
   28edc:	003b      	movs	r3, r7
   28ede:	2201      	movs	r2, #1
   28ee0:	725a      	strb	r2, [r3, #9]
   28ee2:	003b      	movs	r3, r7
   28ee4:	0019      	movs	r1, r3
   28ee6:	2000      	movs	r0, #0
   28ee8:	4b0c      	ldr	r3, [pc, #48]	; (28f1c <system_clock_init+0x270>)
   28eea:	4798      	blx	r3
   28eec:	2000      	movs	r0, #0
   28eee:	4b0c      	ldr	r3, [pc, #48]	; (28f20 <system_clock_init+0x274>)
   28ef0:	4798      	blx	r3
#endif
}
   28ef2:	46c0      	nop			; (mov r8, r8)
   28ef4:	46bd      	mov	sp, r7
   28ef6:	b026      	add	sp, #152	; 0x98
   28ef8:	bd80      	pop	{r7, pc}
   28efa:	46c0      	nop			; (mov r8, r8)
   28efc:	40000800 	.word	0x40000800
   28f00:	0002886d 	.word	0x0002886d
   28f04:	00028c75 	.word	0x00028c75
   28f08:	0002877d 	.word	0x0002877d
   28f0c:	000289c1 	.word	0x000289c1
   28f10:	00028b45 	.word	0x00028b45
   28f14:	00028ff1 	.word	0x00028ff1
   28f18:	00028739 	.word	0x00028739
   28f1c:	00029021 	.word	0x00029021
   28f20:	00029145 	.word	0x00029145
   28f24:	00028767 	.word	0x00028767
   28f28:	00029279 	.word	0x00029279
   28f2c:	000292bd 	.word	0x000292bd
   28f30:	00028815 	.word	0x00028815
   28f34:	000f4240 	.word	0x000f4240
   28f38:	02dc6c00 	.word	0x02dc6c00
   28f3c:	00028a39 	.word	0x00028a39
   28f40:	00028bf1 	.word	0x00028bf1
   28f44:	000287a1 	.word	0x000287a1
   28f48:	000287c1 	.word	0x000287c1

00028f4c <system_apb_clock_set_mask>:
{
   28f4c:	b580      	push	{r7, lr}
   28f4e:	b082      	sub	sp, #8
   28f50:	af00      	add	r7, sp, #0
   28f52:	0002      	movs	r2, r0
   28f54:	6039      	str	r1, [r7, #0]
   28f56:	1dfb      	adds	r3, r7, #7
   28f58:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   28f5a:	1dfb      	adds	r3, r7, #7
   28f5c:	781b      	ldrb	r3, [r3, #0]
   28f5e:	2b01      	cmp	r3, #1
   28f60:	d00a      	beq.n	28f78 <system_apb_clock_set_mask+0x2c>
   28f62:	2b02      	cmp	r3, #2
   28f64:	d00f      	beq.n	28f86 <system_apb_clock_set_mask+0x3a>
   28f66:	2b00      	cmp	r3, #0
   28f68:	d114      	bne.n	28f94 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   28f6a:	4b0e      	ldr	r3, [pc, #56]	; (28fa4 <system_apb_clock_set_mask+0x58>)
   28f6c:	4a0d      	ldr	r2, [pc, #52]	; (28fa4 <system_apb_clock_set_mask+0x58>)
   28f6e:	6991      	ldr	r1, [r2, #24]
   28f70:	683a      	ldr	r2, [r7, #0]
   28f72:	430a      	orrs	r2, r1
   28f74:	619a      	str	r2, [r3, #24]
			break;
   28f76:	e00f      	b.n	28f98 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28f78:	4b0a      	ldr	r3, [pc, #40]	; (28fa4 <system_apb_clock_set_mask+0x58>)
   28f7a:	4a0a      	ldr	r2, [pc, #40]	; (28fa4 <system_apb_clock_set_mask+0x58>)
   28f7c:	69d1      	ldr	r1, [r2, #28]
   28f7e:	683a      	ldr	r2, [r7, #0]
   28f80:	430a      	orrs	r2, r1
   28f82:	61da      	str	r2, [r3, #28]
			break;
   28f84:	e008      	b.n	28f98 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28f86:	4b07      	ldr	r3, [pc, #28]	; (28fa4 <system_apb_clock_set_mask+0x58>)
   28f88:	4a06      	ldr	r2, [pc, #24]	; (28fa4 <system_apb_clock_set_mask+0x58>)
   28f8a:	6a11      	ldr	r1, [r2, #32]
   28f8c:	683a      	ldr	r2, [r7, #0]
   28f8e:	430a      	orrs	r2, r1
   28f90:	621a      	str	r2, [r3, #32]
			break;
   28f92:	e001      	b.n	28f98 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28f94:	2317      	movs	r3, #23
   28f96:	e000      	b.n	28f9a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28f98:	2300      	movs	r3, #0
}
   28f9a:	0018      	movs	r0, r3
   28f9c:	46bd      	mov	sp, r7
   28f9e:	b002      	add	sp, #8
   28fa0:	bd80      	pop	{r7, pc}
   28fa2:	46c0      	nop			; (mov r8, r8)
   28fa4:	40000400 	.word	0x40000400

00028fa8 <system_interrupt_enter_critical_section>:
{
   28fa8:	b580      	push	{r7, lr}
   28faa:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   28fac:	4b02      	ldr	r3, [pc, #8]	; (28fb8 <system_interrupt_enter_critical_section+0x10>)
   28fae:	4798      	blx	r3
}
   28fb0:	46c0      	nop			; (mov r8, r8)
   28fb2:	46bd      	mov	sp, r7
   28fb4:	bd80      	pop	{r7, pc}
   28fb6:	46c0      	nop			; (mov r8, r8)
   28fb8:	000255e5 	.word	0x000255e5

00028fbc <system_interrupt_leave_critical_section>:
{
   28fbc:	b580      	push	{r7, lr}
   28fbe:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   28fc0:	4b02      	ldr	r3, [pc, #8]	; (28fcc <system_interrupt_leave_critical_section+0x10>)
   28fc2:	4798      	blx	r3
}
   28fc4:	46c0      	nop			; (mov r8, r8)
   28fc6:	46bd      	mov	sp, r7
   28fc8:	bd80      	pop	{r7, pc}
   28fca:	46c0      	nop			; (mov r8, r8)
   28fcc:	00025639 	.word	0x00025639

00028fd0 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   28fd0:	b580      	push	{r7, lr}
   28fd2:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   28fd4:	4b05      	ldr	r3, [pc, #20]	; (28fec <system_gclk_is_syncing+0x1c>)
   28fd6:	785b      	ldrb	r3, [r3, #1]
   28fd8:	b2db      	uxtb	r3, r3
   28fda:	b25b      	sxtb	r3, r3
   28fdc:	2b00      	cmp	r3, #0
   28fde:	da01      	bge.n	28fe4 <system_gclk_is_syncing+0x14>
		return true;
   28fe0:	2301      	movs	r3, #1
   28fe2:	e000      	b.n	28fe6 <system_gclk_is_syncing+0x16>
	}

	return false;
   28fe4:	2300      	movs	r3, #0
}
   28fe6:	0018      	movs	r0, r3
   28fe8:	46bd      	mov	sp, r7
   28fea:	bd80      	pop	{r7, pc}
   28fec:	40000c00 	.word	0x40000c00

00028ff0 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   28ff0:	b580      	push	{r7, lr}
   28ff2:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   28ff4:	2108      	movs	r1, #8
   28ff6:	2000      	movs	r0, #0
   28ff8:	4b07      	ldr	r3, [pc, #28]	; (29018 <system_gclk_init+0x28>)
   28ffa:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   28ffc:	4b07      	ldr	r3, [pc, #28]	; (2901c <system_gclk_init+0x2c>)
   28ffe:	2201      	movs	r2, #1
   29000:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   29002:	46c0      	nop			; (mov r8, r8)
   29004:	4b05      	ldr	r3, [pc, #20]	; (2901c <system_gclk_init+0x2c>)
   29006:	781b      	ldrb	r3, [r3, #0]
   29008:	b2db      	uxtb	r3, r3
   2900a:	001a      	movs	r2, r3
   2900c:	2301      	movs	r3, #1
   2900e:	4013      	ands	r3, r2
   29010:	d1f8      	bne.n	29004 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   29012:	46c0      	nop			; (mov r8, r8)
   29014:	46bd      	mov	sp, r7
   29016:	bd80      	pop	{r7, pc}
   29018:	00028f4d 	.word	0x00028f4d
   2901c:	40000c00 	.word	0x40000c00

00029020 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   29020:	b580      	push	{r7, lr}
   29022:	b086      	sub	sp, #24
   29024:	af00      	add	r7, sp, #0
   29026:	0002      	movs	r2, r0
   29028:	6039      	str	r1, [r7, #0]
   2902a:	1dfb      	adds	r3, r7, #7
   2902c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   2902e:	1dfb      	adds	r3, r7, #7
   29030:	781b      	ldrb	r3, [r3, #0]
   29032:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   29034:	1dfb      	adds	r3, r7, #7
   29036:	781b      	ldrb	r3, [r3, #0]
   29038:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   2903a:	683b      	ldr	r3, [r7, #0]
   2903c:	781b      	ldrb	r3, [r3, #0]
   2903e:	021b      	lsls	r3, r3, #8
   29040:	001a      	movs	r2, r3
   29042:	697b      	ldr	r3, [r7, #20]
   29044:	4313      	orrs	r3, r2
   29046:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   29048:	683b      	ldr	r3, [r7, #0]
   2904a:	785b      	ldrb	r3, [r3, #1]
   2904c:	2b00      	cmp	r3, #0
   2904e:	d004      	beq.n	2905a <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   29050:	697b      	ldr	r3, [r7, #20]
   29052:	2280      	movs	r2, #128	; 0x80
   29054:	02d2      	lsls	r2, r2, #11
   29056:	4313      	orrs	r3, r2
   29058:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   2905a:	683b      	ldr	r3, [r7, #0]
   2905c:	7a5b      	ldrb	r3, [r3, #9]
   2905e:	2b00      	cmp	r3, #0
   29060:	d004      	beq.n	2906c <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   29062:	697b      	ldr	r3, [r7, #20]
   29064:	2280      	movs	r2, #128	; 0x80
   29066:	0312      	lsls	r2, r2, #12
   29068:	4313      	orrs	r3, r2
   2906a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   2906c:	683b      	ldr	r3, [r7, #0]
   2906e:	685b      	ldr	r3, [r3, #4]
   29070:	2b01      	cmp	r3, #1
   29072:	d92c      	bls.n	290ce <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   29074:	683b      	ldr	r3, [r7, #0]
   29076:	685a      	ldr	r2, [r3, #4]
   29078:	683b      	ldr	r3, [r7, #0]
   2907a:	685b      	ldr	r3, [r3, #4]
   2907c:	3b01      	subs	r3, #1
   2907e:	4013      	ands	r3, r2
   29080:	d11a      	bne.n	290b8 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   29082:	2300      	movs	r3, #0
   29084:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   29086:	2302      	movs	r3, #2
   29088:	60bb      	str	r3, [r7, #8]
   2908a:	e005      	b.n	29098 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   2908c:	68fb      	ldr	r3, [r7, #12]
   2908e:	3301      	adds	r3, #1
   29090:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   29092:	68bb      	ldr	r3, [r7, #8]
   29094:	005b      	lsls	r3, r3, #1
   29096:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   29098:	683b      	ldr	r3, [r7, #0]
   2909a:	685a      	ldr	r2, [r3, #4]
   2909c:	68bb      	ldr	r3, [r7, #8]
   2909e:	429a      	cmp	r2, r3
   290a0:	d8f4      	bhi.n	2908c <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   290a2:	68fb      	ldr	r3, [r7, #12]
   290a4:	021b      	lsls	r3, r3, #8
   290a6:	693a      	ldr	r2, [r7, #16]
   290a8:	4313      	orrs	r3, r2
   290aa:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   290ac:	697b      	ldr	r3, [r7, #20]
   290ae:	2280      	movs	r2, #128	; 0x80
   290b0:	0352      	lsls	r2, r2, #13
   290b2:	4313      	orrs	r3, r2
   290b4:	617b      	str	r3, [r7, #20]
   290b6:	e00a      	b.n	290ce <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   290b8:	683b      	ldr	r3, [r7, #0]
   290ba:	685b      	ldr	r3, [r3, #4]
   290bc:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   290be:	693a      	ldr	r2, [r7, #16]
   290c0:	4313      	orrs	r3, r2
   290c2:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   290c4:	697b      	ldr	r3, [r7, #20]
   290c6:	2280      	movs	r2, #128	; 0x80
   290c8:	0292      	lsls	r2, r2, #10
   290ca:	4313      	orrs	r3, r2
   290cc:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   290ce:	683b      	ldr	r3, [r7, #0]
   290d0:	7a1b      	ldrb	r3, [r3, #8]
   290d2:	2b00      	cmp	r3, #0
   290d4:	d004      	beq.n	290e0 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   290d6:	697b      	ldr	r3, [r7, #20]
   290d8:	2280      	movs	r2, #128	; 0x80
   290da:	0392      	lsls	r2, r2, #14
   290dc:	4313      	orrs	r3, r2
   290de:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   290e0:	46c0      	nop			; (mov r8, r8)
   290e2:	4b13      	ldr	r3, [pc, #76]	; (29130 <system_gclk_gen_set_config+0x110>)
   290e4:	4798      	blx	r3
   290e6:	1e03      	subs	r3, r0, #0
   290e8:	d1fb      	bne.n	290e2 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   290ea:	4b12      	ldr	r3, [pc, #72]	; (29134 <system_gclk_gen_set_config+0x114>)
   290ec:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   290ee:	4a12      	ldr	r2, [pc, #72]	; (29138 <system_gclk_gen_set_config+0x118>)
   290f0:	1dfb      	adds	r3, r7, #7
   290f2:	781b      	ldrb	r3, [r3, #0]
   290f4:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   290f6:	46c0      	nop			; (mov r8, r8)
   290f8:	4b0d      	ldr	r3, [pc, #52]	; (29130 <system_gclk_gen_set_config+0x110>)
   290fa:	4798      	blx	r3
   290fc:	1e03      	subs	r3, r0, #0
   290fe:	d1fb      	bne.n	290f8 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   29100:	4b0e      	ldr	r3, [pc, #56]	; (2913c <system_gclk_gen_set_config+0x11c>)
   29102:	693a      	ldr	r2, [r7, #16]
   29104:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   29106:	46c0      	nop			; (mov r8, r8)
   29108:	4b09      	ldr	r3, [pc, #36]	; (29130 <system_gclk_gen_set_config+0x110>)
   2910a:	4798      	blx	r3
   2910c:	1e03      	subs	r3, r0, #0
   2910e:	d1fb      	bne.n	29108 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   29110:	4b0a      	ldr	r3, [pc, #40]	; (2913c <system_gclk_gen_set_config+0x11c>)
   29112:	4a0a      	ldr	r2, [pc, #40]	; (2913c <system_gclk_gen_set_config+0x11c>)
   29114:	6851      	ldr	r1, [r2, #4]
   29116:	2280      	movs	r2, #128	; 0x80
   29118:	0252      	lsls	r2, r2, #9
   2911a:	4011      	ands	r1, r2
   2911c:	697a      	ldr	r2, [r7, #20]
   2911e:	430a      	orrs	r2, r1
   29120:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   29122:	4b07      	ldr	r3, [pc, #28]	; (29140 <system_gclk_gen_set_config+0x120>)
   29124:	4798      	blx	r3
}
   29126:	46c0      	nop			; (mov r8, r8)
   29128:	46bd      	mov	sp, r7
   2912a:	b006      	add	sp, #24
   2912c:	bd80      	pop	{r7, pc}
   2912e:	46c0      	nop			; (mov r8, r8)
   29130:	00028fd1 	.word	0x00028fd1
   29134:	00028fa9 	.word	0x00028fa9
   29138:	40000c08 	.word	0x40000c08
   2913c:	40000c00 	.word	0x40000c00
   29140:	00028fbd 	.word	0x00028fbd

00029144 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   29144:	b580      	push	{r7, lr}
   29146:	b082      	sub	sp, #8
   29148:	af00      	add	r7, sp, #0
   2914a:	0002      	movs	r2, r0
   2914c:	1dfb      	adds	r3, r7, #7
   2914e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   29150:	46c0      	nop			; (mov r8, r8)
   29152:	4b0e      	ldr	r3, [pc, #56]	; (2918c <system_gclk_gen_enable+0x48>)
   29154:	4798      	blx	r3
   29156:	1e03      	subs	r3, r0, #0
   29158:	d1fb      	bne.n	29152 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2915a:	4b0d      	ldr	r3, [pc, #52]	; (29190 <system_gclk_gen_enable+0x4c>)
   2915c:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2915e:	4a0d      	ldr	r2, [pc, #52]	; (29194 <system_gclk_gen_enable+0x50>)
   29160:	1dfb      	adds	r3, r7, #7
   29162:	781b      	ldrb	r3, [r3, #0]
   29164:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   29166:	46c0      	nop			; (mov r8, r8)
   29168:	4b08      	ldr	r3, [pc, #32]	; (2918c <system_gclk_gen_enable+0x48>)
   2916a:	4798      	blx	r3
   2916c:	1e03      	subs	r3, r0, #0
   2916e:	d1fb      	bne.n	29168 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   29170:	4b09      	ldr	r3, [pc, #36]	; (29198 <system_gclk_gen_enable+0x54>)
   29172:	4a09      	ldr	r2, [pc, #36]	; (29198 <system_gclk_gen_enable+0x54>)
   29174:	6852      	ldr	r2, [r2, #4]
   29176:	2180      	movs	r1, #128	; 0x80
   29178:	0249      	lsls	r1, r1, #9
   2917a:	430a      	orrs	r2, r1
   2917c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2917e:	4b07      	ldr	r3, [pc, #28]	; (2919c <system_gclk_gen_enable+0x58>)
   29180:	4798      	blx	r3
}
   29182:	46c0      	nop			; (mov r8, r8)
   29184:	46bd      	mov	sp, r7
   29186:	b002      	add	sp, #8
   29188:	bd80      	pop	{r7, pc}
   2918a:	46c0      	nop			; (mov r8, r8)
   2918c:	00028fd1 	.word	0x00028fd1
   29190:	00028fa9 	.word	0x00028fa9
   29194:	40000c04 	.word	0x40000c04
   29198:	40000c00 	.word	0x40000c00
   2919c:	00028fbd 	.word	0x00028fbd

000291a0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   291a0:	b580      	push	{r7, lr}
   291a2:	b086      	sub	sp, #24
   291a4:	af00      	add	r7, sp, #0
   291a6:	0002      	movs	r2, r0
   291a8:	1dfb      	adds	r3, r7, #7
   291aa:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   291ac:	46c0      	nop			; (mov r8, r8)
   291ae:	4b2a      	ldr	r3, [pc, #168]	; (29258 <system_gclk_gen_get_hz+0xb8>)
   291b0:	4798      	blx	r3
   291b2:	1e03      	subs	r3, r0, #0
   291b4:	d1fb      	bne.n	291ae <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   291b6:	4b29      	ldr	r3, [pc, #164]	; (2925c <system_gclk_gen_get_hz+0xbc>)
   291b8:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   291ba:	4a29      	ldr	r2, [pc, #164]	; (29260 <system_gclk_gen_get_hz+0xc0>)
   291bc:	1dfb      	adds	r3, r7, #7
   291be:	781b      	ldrb	r3, [r3, #0]
   291c0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   291c2:	46c0      	nop			; (mov r8, r8)
   291c4:	4b24      	ldr	r3, [pc, #144]	; (29258 <system_gclk_gen_get_hz+0xb8>)
   291c6:	4798      	blx	r3
   291c8:	1e03      	subs	r3, r0, #0
   291ca:	d1fb      	bne.n	291c4 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   291cc:	4b25      	ldr	r3, [pc, #148]	; (29264 <system_gclk_gen_get_hz+0xc4>)
   291ce:	685b      	ldr	r3, [r3, #4]
   291d0:	04db      	lsls	r3, r3, #19
   291d2:	0edb      	lsrs	r3, r3, #27
   291d4:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   291d6:	0018      	movs	r0, r3
   291d8:	4b23      	ldr	r3, [pc, #140]	; (29268 <system_gclk_gen_get_hz+0xc8>)
   291da:	4798      	blx	r3
   291dc:	0003      	movs	r3, r0
   291de:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   291e0:	4a1f      	ldr	r2, [pc, #124]	; (29260 <system_gclk_gen_get_hz+0xc0>)
   291e2:	1dfb      	adds	r3, r7, #7
   291e4:	781b      	ldrb	r3, [r3, #0]
   291e6:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   291e8:	4b1e      	ldr	r3, [pc, #120]	; (29264 <system_gclk_gen_get_hz+0xc4>)
   291ea:	685b      	ldr	r3, [r3, #4]
   291ec:	02db      	lsls	r3, r3, #11
   291ee:	0fdb      	lsrs	r3, r3, #31
   291f0:	b2da      	uxtb	r2, r3
   291f2:	2313      	movs	r3, #19
   291f4:	18fb      	adds	r3, r7, r3
   291f6:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   291f8:	4a1c      	ldr	r2, [pc, #112]	; (2926c <system_gclk_gen_get_hz+0xcc>)
   291fa:	1dfb      	adds	r3, r7, #7
   291fc:	781b      	ldrb	r3, [r3, #0]
   291fe:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   29200:	46c0      	nop			; (mov r8, r8)
   29202:	4b15      	ldr	r3, [pc, #84]	; (29258 <system_gclk_gen_get_hz+0xb8>)
   29204:	4798      	blx	r3
   29206:	1e03      	subs	r3, r0, #0
   29208:	d1fb      	bne.n	29202 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   2920a:	4b16      	ldr	r3, [pc, #88]	; (29264 <system_gclk_gen_get_hz+0xc4>)
   2920c:	689b      	ldr	r3, [r3, #8]
   2920e:	021b      	lsls	r3, r3, #8
   29210:	0c1b      	lsrs	r3, r3, #16
   29212:	b29b      	uxth	r3, r3
   29214:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   29216:	4b16      	ldr	r3, [pc, #88]	; (29270 <system_gclk_gen_get_hz+0xd0>)
   29218:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   2921a:	2313      	movs	r3, #19
   2921c:	18fb      	adds	r3, r7, r3
   2921e:	781b      	ldrb	r3, [r3, #0]
   29220:	2b00      	cmp	r3, #0
   29222:	d109      	bne.n	29238 <system_gclk_gen_get_hz+0x98>
   29224:	68fb      	ldr	r3, [r7, #12]
   29226:	2b01      	cmp	r3, #1
   29228:	d906      	bls.n	29238 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   2922a:	4b12      	ldr	r3, [pc, #72]	; (29274 <system_gclk_gen_get_hz+0xd4>)
   2922c:	68f9      	ldr	r1, [r7, #12]
   2922e:	6978      	ldr	r0, [r7, #20]
   29230:	4798      	blx	r3
   29232:	0003      	movs	r3, r0
   29234:	617b      	str	r3, [r7, #20]
   29236:	e00a      	b.n	2924e <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   29238:	2313      	movs	r3, #19
   2923a:	18fb      	adds	r3, r7, r3
   2923c:	781b      	ldrb	r3, [r3, #0]
   2923e:	2b00      	cmp	r3, #0
   29240:	d005      	beq.n	2924e <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   29242:	68fb      	ldr	r3, [r7, #12]
   29244:	3301      	adds	r3, #1
   29246:	697a      	ldr	r2, [r7, #20]
   29248:	40da      	lsrs	r2, r3
   2924a:	0013      	movs	r3, r2
   2924c:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   2924e:	697b      	ldr	r3, [r7, #20]
}
   29250:	0018      	movs	r0, r3
   29252:	46bd      	mov	sp, r7
   29254:	b006      	add	sp, #24
   29256:	bd80      	pop	{r7, pc}
   29258:	00028fd1 	.word	0x00028fd1
   2925c:	00028fa9 	.word	0x00028fa9
   29260:	40000c04 	.word	0x40000c04
   29264:	40000c00 	.word	0x40000c00
   29268:	00028901 	.word	0x00028901
   2926c:	40000c08 	.word	0x40000c08
   29270:	00028fbd 	.word	0x00028fbd
   29274:	00031e9d 	.word	0x00031e9d

00029278 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   29278:	b580      	push	{r7, lr}
   2927a:	b084      	sub	sp, #16
   2927c:	af00      	add	r7, sp, #0
   2927e:	0002      	movs	r2, r0
   29280:	6039      	str	r1, [r7, #0]
   29282:	1dfb      	adds	r3, r7, #7
   29284:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   29286:	1dfb      	adds	r3, r7, #7
   29288:	781b      	ldrb	r3, [r3, #0]
   2928a:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   2928c:	683b      	ldr	r3, [r7, #0]
   2928e:	781b      	ldrb	r3, [r3, #0]
   29290:	021b      	lsls	r3, r3, #8
   29292:	001a      	movs	r2, r3
   29294:	68fb      	ldr	r3, [r7, #12]
   29296:	4313      	orrs	r3, r2
   29298:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   2929a:	1dfb      	adds	r3, r7, #7
   2929c:	781b      	ldrb	r3, [r3, #0]
   2929e:	0018      	movs	r0, r3
   292a0:	4b04      	ldr	r3, [pc, #16]	; (292b4 <system_gclk_chan_set_config+0x3c>)
   292a2:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   292a4:	4b04      	ldr	r3, [pc, #16]	; (292b8 <system_gclk_chan_set_config+0x40>)
   292a6:	68fa      	ldr	r2, [r7, #12]
   292a8:	b292      	uxth	r2, r2
   292aa:	805a      	strh	r2, [r3, #2]
}
   292ac:	46c0      	nop			; (mov r8, r8)
   292ae:	46bd      	mov	sp, r7
   292b0:	b004      	add	sp, #16
   292b2:	bd80      	pop	{r7, pc}
   292b4:	00029305 	.word	0x00029305
   292b8:	40000c00 	.word	0x40000c00

000292bc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   292bc:	b580      	push	{r7, lr}
   292be:	b082      	sub	sp, #8
   292c0:	af00      	add	r7, sp, #0
   292c2:	0002      	movs	r2, r0
   292c4:	1dfb      	adds	r3, r7, #7
   292c6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   292c8:	4b0a      	ldr	r3, [pc, #40]	; (292f4 <system_gclk_chan_enable+0x38>)
   292ca:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   292cc:	4a0a      	ldr	r2, [pc, #40]	; (292f8 <system_gclk_chan_enable+0x3c>)
   292ce:	1dfb      	adds	r3, r7, #7
   292d0:	781b      	ldrb	r3, [r3, #0]
   292d2:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   292d4:	4909      	ldr	r1, [pc, #36]	; (292fc <system_gclk_chan_enable+0x40>)
   292d6:	4b09      	ldr	r3, [pc, #36]	; (292fc <system_gclk_chan_enable+0x40>)
   292d8:	885b      	ldrh	r3, [r3, #2]
   292da:	b29b      	uxth	r3, r3
   292dc:	2280      	movs	r2, #128	; 0x80
   292de:	01d2      	lsls	r2, r2, #7
   292e0:	4313      	orrs	r3, r2
   292e2:	b29b      	uxth	r3, r3
   292e4:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   292e6:	4b06      	ldr	r3, [pc, #24]	; (29300 <system_gclk_chan_enable+0x44>)
   292e8:	4798      	blx	r3
}
   292ea:	46c0      	nop			; (mov r8, r8)
   292ec:	46bd      	mov	sp, r7
   292ee:	b002      	add	sp, #8
   292f0:	bd80      	pop	{r7, pc}
   292f2:	46c0      	nop			; (mov r8, r8)
   292f4:	00028fa9 	.word	0x00028fa9
   292f8:	40000c02 	.word	0x40000c02
   292fc:	40000c00 	.word	0x40000c00
   29300:	00028fbd 	.word	0x00028fbd

00029304 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   29304:	b580      	push	{r7, lr}
   29306:	b084      	sub	sp, #16
   29308:	af00      	add	r7, sp, #0
   2930a:	0002      	movs	r2, r0
   2930c:	1dfb      	adds	r3, r7, #7
   2930e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   29310:	4b1c      	ldr	r3, [pc, #112]	; (29384 <system_gclk_chan_disable+0x80>)
   29312:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   29314:	4a1c      	ldr	r2, [pc, #112]	; (29388 <system_gclk_chan_disable+0x84>)
   29316:	1dfb      	adds	r3, r7, #7
   29318:	781b      	ldrb	r3, [r3, #0]
   2931a:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   2931c:	4b1b      	ldr	r3, [pc, #108]	; (2938c <system_gclk_chan_disable+0x88>)
   2931e:	885b      	ldrh	r3, [r3, #2]
   29320:	051b      	lsls	r3, r3, #20
   29322:	0f1b      	lsrs	r3, r3, #28
   29324:	b2db      	uxtb	r3, r3
   29326:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   29328:	4a18      	ldr	r2, [pc, #96]	; (2938c <system_gclk_chan_disable+0x88>)
   2932a:	8853      	ldrh	r3, [r2, #2]
   2932c:	4918      	ldr	r1, [pc, #96]	; (29390 <system_gclk_chan_disable+0x8c>)
   2932e:	400b      	ands	r3, r1
   29330:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   29332:	4a16      	ldr	r2, [pc, #88]	; (2938c <system_gclk_chan_disable+0x88>)
   29334:	4b15      	ldr	r3, [pc, #84]	; (2938c <system_gclk_chan_disable+0x88>)
   29336:	885b      	ldrh	r3, [r3, #2]
   29338:	b29b      	uxth	r3, r3
   2933a:	4916      	ldr	r1, [pc, #88]	; (29394 <system_gclk_chan_disable+0x90>)
   2933c:	400b      	ands	r3, r1
   2933e:	b29b      	uxth	r3, r3
   29340:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   29342:	46c0      	nop			; (mov r8, r8)
   29344:	4b11      	ldr	r3, [pc, #68]	; (2938c <system_gclk_chan_disable+0x88>)
   29346:	885b      	ldrh	r3, [r3, #2]
   29348:	b29b      	uxth	r3, r3
   2934a:	001a      	movs	r2, r3
   2934c:	2380      	movs	r3, #128	; 0x80
   2934e:	01db      	lsls	r3, r3, #7
   29350:	4013      	ands	r3, r2
   29352:	d1f7      	bne.n	29344 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   29354:	4a0d      	ldr	r2, [pc, #52]	; (2938c <system_gclk_chan_disable+0x88>)
   29356:	68fb      	ldr	r3, [r7, #12]
   29358:	b2db      	uxtb	r3, r3
   2935a:	1c19      	adds	r1, r3, #0
   2935c:	230f      	movs	r3, #15
   2935e:	400b      	ands	r3, r1
   29360:	b2d9      	uxtb	r1, r3
   29362:	8853      	ldrh	r3, [r2, #2]
   29364:	1c08      	adds	r0, r1, #0
   29366:	210f      	movs	r1, #15
   29368:	4001      	ands	r1, r0
   2936a:	0208      	lsls	r0, r1, #8
   2936c:	4908      	ldr	r1, [pc, #32]	; (29390 <system_gclk_chan_disable+0x8c>)
   2936e:	400b      	ands	r3, r1
   29370:	1c19      	adds	r1, r3, #0
   29372:	1c03      	adds	r3, r0, #0
   29374:	430b      	orrs	r3, r1
   29376:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   29378:	4b07      	ldr	r3, [pc, #28]	; (29398 <system_gclk_chan_disable+0x94>)
   2937a:	4798      	blx	r3
}
   2937c:	46c0      	nop			; (mov r8, r8)
   2937e:	46bd      	mov	sp, r7
   29380:	b004      	add	sp, #16
   29382:	bd80      	pop	{r7, pc}
   29384:	00028fa9 	.word	0x00028fa9
   29388:	40000c02 	.word	0x40000c02
   2938c:	40000c00 	.word	0x40000c00
   29390:	fffff0ff 	.word	0xfffff0ff
   29394:	ffffbfff 	.word	0xffffbfff
   29398:	00028fbd 	.word	0x00028fbd

0002939c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   2939c:	b580      	push	{r7, lr}
   2939e:	b084      	sub	sp, #16
   293a0:	af00      	add	r7, sp, #0
   293a2:	0002      	movs	r2, r0
   293a4:	1dfb      	adds	r3, r7, #7
   293a6:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   293a8:	4b0d      	ldr	r3, [pc, #52]	; (293e0 <system_gclk_chan_get_hz+0x44>)
   293aa:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   293ac:	4a0d      	ldr	r2, [pc, #52]	; (293e4 <system_gclk_chan_get_hz+0x48>)
   293ae:	1dfb      	adds	r3, r7, #7
   293b0:	781b      	ldrb	r3, [r3, #0]
   293b2:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   293b4:	4b0c      	ldr	r3, [pc, #48]	; (293e8 <system_gclk_chan_get_hz+0x4c>)
   293b6:	885b      	ldrh	r3, [r3, #2]
   293b8:	051b      	lsls	r3, r3, #20
   293ba:	0f1b      	lsrs	r3, r3, #28
   293bc:	b2da      	uxtb	r2, r3
   293be:	230f      	movs	r3, #15
   293c0:	18fb      	adds	r3, r7, r3
   293c2:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   293c4:	4b09      	ldr	r3, [pc, #36]	; (293ec <system_gclk_chan_get_hz+0x50>)
   293c6:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   293c8:	230f      	movs	r3, #15
   293ca:	18fb      	adds	r3, r7, r3
   293cc:	781b      	ldrb	r3, [r3, #0]
   293ce:	0018      	movs	r0, r3
   293d0:	4b07      	ldr	r3, [pc, #28]	; (293f0 <system_gclk_chan_get_hz+0x54>)
   293d2:	4798      	blx	r3
   293d4:	0003      	movs	r3, r0
}
   293d6:	0018      	movs	r0, r3
   293d8:	46bd      	mov	sp, r7
   293da:	b004      	add	sp, #16
   293dc:	bd80      	pop	{r7, pc}
   293de:	46c0      	nop			; (mov r8, r8)
   293e0:	00028fa9 	.word	0x00028fa9
   293e4:	40000c02 	.word	0x40000c02
   293e8:	40000c00 	.word	0x40000c00
   293ec:	00028fbd 	.word	0x00028fbd
   293f0:	000291a1 	.word	0x000291a1

000293f4 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   293f4:	b580      	push	{r7, lr}
   293f6:	b084      	sub	sp, #16
   293f8:	af00      	add	r7, sp, #0
   293fa:	0002      	movs	r2, r0
   293fc:	1dfb      	adds	r3, r7, #7
   293fe:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   29400:	230f      	movs	r3, #15
   29402:	18fb      	adds	r3, r7, r3
   29404:	2200      	movs	r2, #0
   29406:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   29408:	1dfb      	adds	r3, r7, #7
   2940a:	781b      	ldrb	r3, [r3, #0]
   2940c:	2b7f      	cmp	r3, #127	; 0x7f
   2940e:	d80b      	bhi.n	29428 <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   29410:	4a13      	ldr	r2, [pc, #76]	; (29460 <system_interrupt_clear_pending+0x6c>)
   29412:	1dfb      	adds	r3, r7, #7
   29414:	781b      	ldrb	r3, [r3, #0]
   29416:	b25b      	sxtb	r3, r3
   29418:	2101      	movs	r1, #1
   2941a:	4099      	lsls	r1, r3
   2941c:	000b      	movs	r3, r1
   2941e:	0019      	movs	r1, r3
   29420:	23c0      	movs	r3, #192	; 0xc0
   29422:	005b      	lsls	r3, r3, #1
   29424:	50d1      	str	r1, [r2, r3]
   29426:	e014      	b.n	29452 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   29428:	1dfb      	adds	r3, r7, #7
   2942a:	781b      	ldrb	r3, [r3, #0]
   2942c:	b25b      	sxtb	r3, r3
   2942e:	330e      	adds	r3, #14
   29430:	d101      	bne.n	29436 <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   29432:	2317      	movs	r3, #23
   29434:	e010      	b.n	29458 <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   29436:	1dfb      	adds	r3, r7, #7
   29438:	781b      	ldrb	r3, [r3, #0]
   2943a:	b25b      	sxtb	r3, r3
   2943c:	3301      	adds	r3, #1
   2943e:	d104      	bne.n	2944a <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   29440:	4b08      	ldr	r3, [pc, #32]	; (29464 <system_interrupt_clear_pending+0x70>)
   29442:	2280      	movs	r2, #128	; 0x80
   29444:	0492      	lsls	r2, r2, #18
   29446:	605a      	str	r2, [r3, #4]
   29448:	e003      	b.n	29452 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   2944a:	230f      	movs	r3, #15
   2944c:	18fb      	adds	r3, r7, r3
   2944e:	2217      	movs	r2, #23
   29450:	701a      	strb	r2, [r3, #0]
	}

	return status;
   29452:	230f      	movs	r3, #15
   29454:	18fb      	adds	r3, r7, r3
   29456:	781b      	ldrb	r3, [r3, #0]
}
   29458:	0018      	movs	r0, r3
   2945a:	46bd      	mov	sp, r7
   2945c:	b004      	add	sp, #16
   2945e:	bd80      	pop	{r7, pc}
   29460:	e000e100 	.word	0xe000e100
   29464:	e000ed00 	.word	0xe000ed00

00029468 <system_pinmux_get_group_from_gpio_pin>:
{
   29468:	b580      	push	{r7, lr}
   2946a:	b084      	sub	sp, #16
   2946c:	af00      	add	r7, sp, #0
   2946e:	0002      	movs	r2, r0
   29470:	1dfb      	adds	r3, r7, #7
   29472:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   29474:	230f      	movs	r3, #15
   29476:	18fb      	adds	r3, r7, r3
   29478:	1dfa      	adds	r2, r7, #7
   2947a:	7812      	ldrb	r2, [r2, #0]
   2947c:	09d2      	lsrs	r2, r2, #7
   2947e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   29480:	230e      	movs	r3, #14
   29482:	18fb      	adds	r3, r7, r3
   29484:	1dfa      	adds	r2, r7, #7
   29486:	7812      	ldrb	r2, [r2, #0]
   29488:	0952      	lsrs	r2, r2, #5
   2948a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2948c:	4b0d      	ldr	r3, [pc, #52]	; (294c4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2948e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   29490:	230f      	movs	r3, #15
   29492:	18fb      	adds	r3, r7, r3
   29494:	781b      	ldrb	r3, [r3, #0]
   29496:	2b00      	cmp	r3, #0
   29498:	d10f      	bne.n	294ba <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2949a:	230f      	movs	r3, #15
   2949c:	18fb      	adds	r3, r7, r3
   2949e:	781b      	ldrb	r3, [r3, #0]
   294a0:	009b      	lsls	r3, r3, #2
   294a2:	2210      	movs	r2, #16
   294a4:	4694      	mov	ip, r2
   294a6:	44bc      	add	ip, r7
   294a8:	4463      	add	r3, ip
   294aa:	3b08      	subs	r3, #8
   294ac:	681a      	ldr	r2, [r3, #0]
   294ae:	230e      	movs	r3, #14
   294b0:	18fb      	adds	r3, r7, r3
   294b2:	781b      	ldrb	r3, [r3, #0]
   294b4:	01db      	lsls	r3, r3, #7
   294b6:	18d3      	adds	r3, r2, r3
   294b8:	e000      	b.n	294bc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   294ba:	2300      	movs	r3, #0
}
   294bc:	0018      	movs	r0, r3
   294be:	46bd      	mov	sp, r7
   294c0:	b004      	add	sp, #16
   294c2:	bd80      	pop	{r7, pc}
   294c4:	41004400 	.word	0x41004400

000294c8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   294c8:	b580      	push	{r7, lr}
   294ca:	b088      	sub	sp, #32
   294cc:	af00      	add	r7, sp, #0
   294ce:	60f8      	str	r0, [r7, #12]
   294d0:	60b9      	str	r1, [r7, #8]
   294d2:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   294d4:	2300      	movs	r3, #0
   294d6:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   294d8:	687b      	ldr	r3, [r7, #4]
   294da:	78db      	ldrb	r3, [r3, #3]
   294dc:	2201      	movs	r2, #1
   294de:	4053      	eors	r3, r2
   294e0:	b2db      	uxtb	r3, r3
   294e2:	2b00      	cmp	r3, #0
   294e4:	d035      	beq.n	29552 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   294e6:	687b      	ldr	r3, [r7, #4]
   294e8:	781b      	ldrb	r3, [r3, #0]
   294ea:	2b80      	cmp	r3, #128	; 0x80
   294ec:	d00b      	beq.n	29506 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   294ee:	69fb      	ldr	r3, [r7, #28]
   294f0:	2280      	movs	r2, #128	; 0x80
   294f2:	0252      	lsls	r2, r2, #9
   294f4:	4313      	orrs	r3, r2
   294f6:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   294f8:	687b      	ldr	r3, [r7, #4]
   294fa:	781b      	ldrb	r3, [r3, #0]
   294fc:	061b      	lsls	r3, r3, #24
   294fe:	001a      	movs	r2, r3
   29500:	69fb      	ldr	r3, [r7, #28]
   29502:	4313      	orrs	r3, r2
   29504:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   29506:	687b      	ldr	r3, [r7, #4]
   29508:	785b      	ldrb	r3, [r3, #1]
   2950a:	2b00      	cmp	r3, #0
   2950c:	d003      	beq.n	29516 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2950e:	687b      	ldr	r3, [r7, #4]
   29510:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   29512:	2b02      	cmp	r3, #2
   29514:	d110      	bne.n	29538 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   29516:	69fb      	ldr	r3, [r7, #28]
   29518:	2280      	movs	r2, #128	; 0x80
   2951a:	0292      	lsls	r2, r2, #10
   2951c:	4313      	orrs	r3, r2
   2951e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   29520:	687b      	ldr	r3, [r7, #4]
   29522:	789b      	ldrb	r3, [r3, #2]
   29524:	2b00      	cmp	r3, #0
   29526:	d004      	beq.n	29532 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   29528:	69fb      	ldr	r3, [r7, #28]
   2952a:	2280      	movs	r2, #128	; 0x80
   2952c:	02d2      	lsls	r2, r2, #11
   2952e:	4313      	orrs	r3, r2
   29530:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   29532:	68fb      	ldr	r3, [r7, #12]
   29534:	68ba      	ldr	r2, [r7, #8]
   29536:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29538:	687b      	ldr	r3, [r7, #4]
   2953a:	785b      	ldrb	r3, [r3, #1]
   2953c:	2b01      	cmp	r3, #1
   2953e:	d003      	beq.n	29548 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29540:	687b      	ldr	r3, [r7, #4]
   29542:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29544:	2b02      	cmp	r3, #2
   29546:	d107      	bne.n	29558 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   29548:	69fb      	ldr	r3, [r7, #28]
   2954a:	4a22      	ldr	r2, [pc, #136]	; (295d4 <_system_pinmux_config+0x10c>)
   2954c:	4013      	ands	r3, r2
   2954e:	61fb      	str	r3, [r7, #28]
   29550:	e002      	b.n	29558 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   29552:	68fb      	ldr	r3, [r7, #12]
   29554:	68ba      	ldr	r2, [r7, #8]
   29556:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   29558:	68bb      	ldr	r3, [r7, #8]
   2955a:	041b      	lsls	r3, r3, #16
   2955c:	0c1b      	lsrs	r3, r3, #16
   2955e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   29560:	68bb      	ldr	r3, [r7, #8]
   29562:	0c1b      	lsrs	r3, r3, #16
   29564:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29566:	69ba      	ldr	r2, [r7, #24]
   29568:	69fb      	ldr	r3, [r7, #28]
   2956a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   2956c:	22a0      	movs	r2, #160	; 0xa0
   2956e:	05d2      	lsls	r2, r2, #23
   29570:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29572:	68fb      	ldr	r3, [r7, #12]
   29574:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29576:	697a      	ldr	r2, [r7, #20]
   29578:	69fb      	ldr	r3, [r7, #28]
   2957a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   2957c:	22d0      	movs	r2, #208	; 0xd0
   2957e:	0612      	lsls	r2, r2, #24
   29580:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29582:	68fb      	ldr	r3, [r7, #12]
   29584:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   29586:	687b      	ldr	r3, [r7, #4]
   29588:	78db      	ldrb	r3, [r3, #3]
   2958a:	2201      	movs	r2, #1
   2958c:	4053      	eors	r3, r2
   2958e:	b2db      	uxtb	r3, r3
   29590:	2b00      	cmp	r3, #0
   29592:	d01a      	beq.n	295ca <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   29594:	69fa      	ldr	r2, [r7, #28]
   29596:	2380      	movs	r3, #128	; 0x80
   29598:	02db      	lsls	r3, r3, #11
   2959a:	4013      	ands	r3, r2
   2959c:	d00a      	beq.n	295b4 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   2959e:	687b      	ldr	r3, [r7, #4]
   295a0:	789b      	ldrb	r3, [r3, #2]
   295a2:	2b01      	cmp	r3, #1
   295a4:	d103      	bne.n	295ae <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   295a6:	68fb      	ldr	r3, [r7, #12]
   295a8:	68ba      	ldr	r2, [r7, #8]
   295aa:	619a      	str	r2, [r3, #24]
   295ac:	e002      	b.n	295b4 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   295ae:	68fb      	ldr	r3, [r7, #12]
   295b0:	68ba      	ldr	r2, [r7, #8]
   295b2:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   295b4:	687b      	ldr	r3, [r7, #4]
   295b6:	785b      	ldrb	r3, [r3, #1]
   295b8:	2b01      	cmp	r3, #1
   295ba:	d003      	beq.n	295c4 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   295bc:	687b      	ldr	r3, [r7, #4]
   295be:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   295c0:	2b02      	cmp	r3, #2
   295c2:	d102      	bne.n	295ca <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   295c4:	68fb      	ldr	r3, [r7, #12]
   295c6:	68ba      	ldr	r2, [r7, #8]
   295c8:	609a      	str	r2, [r3, #8]
		}
	}
}
   295ca:	46c0      	nop			; (mov r8, r8)
   295cc:	46bd      	mov	sp, r7
   295ce:	b008      	add	sp, #32
   295d0:	bd80      	pop	{r7, pc}
   295d2:	46c0      	nop			; (mov r8, r8)
   295d4:	fffbffff 	.word	0xfffbffff

000295d8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   295d8:	b580      	push	{r7, lr}
   295da:	b084      	sub	sp, #16
   295dc:	af00      	add	r7, sp, #0
   295de:	0002      	movs	r2, r0
   295e0:	6039      	str	r1, [r7, #0]
   295e2:	1dfb      	adds	r3, r7, #7
   295e4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   295e6:	1dfb      	adds	r3, r7, #7
   295e8:	781b      	ldrb	r3, [r3, #0]
   295ea:	0018      	movs	r0, r3
   295ec:	4b0a      	ldr	r3, [pc, #40]	; (29618 <system_pinmux_pin_set_config+0x40>)
   295ee:	4798      	blx	r3
   295f0:	0003      	movs	r3, r0
   295f2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   295f4:	1dfb      	adds	r3, r7, #7
   295f6:	781b      	ldrb	r3, [r3, #0]
   295f8:	221f      	movs	r2, #31
   295fa:	4013      	ands	r3, r2
   295fc:	2201      	movs	r2, #1
   295fe:	409a      	lsls	r2, r3
   29600:	0013      	movs	r3, r2
   29602:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   29604:	683a      	ldr	r2, [r7, #0]
   29606:	68b9      	ldr	r1, [r7, #8]
   29608:	68fb      	ldr	r3, [r7, #12]
   2960a:	0018      	movs	r0, r3
   2960c:	4b03      	ldr	r3, [pc, #12]	; (2961c <system_pinmux_pin_set_config+0x44>)
   2960e:	4798      	blx	r3
}
   29610:	46c0      	nop			; (mov r8, r8)
   29612:	46bd      	mov	sp, r7
   29614:	b004      	add	sp, #16
   29616:	bd80      	pop	{r7, pc}
   29618:	00029469 	.word	0x00029469
   2961c:	000294c9 	.word	0x000294c9

00029620 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   29620:	b580      	push	{r7, lr}
   29622:	af00      	add	r7, sp, #0
	return;
   29624:	46c0      	nop			; (mov r8, r8)
}
   29626:	46bd      	mov	sp, r7
   29628:	bd80      	pop	{r7, pc}
	...

0002962c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   2962c:	b580      	push	{r7, lr}
   2962e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   29630:	4b06      	ldr	r3, [pc, #24]	; (2964c <system_init+0x20>)
   29632:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   29634:	4b06      	ldr	r3, [pc, #24]	; (29650 <system_init+0x24>)
   29636:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   29638:	4b06      	ldr	r3, [pc, #24]	; (29654 <system_init+0x28>)
   2963a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   2963c:	4b06      	ldr	r3, [pc, #24]	; (29658 <system_init+0x2c>)
   2963e:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   29640:	4b06      	ldr	r3, [pc, #24]	; (2965c <system_init+0x30>)
   29642:	4798      	blx	r3
}
   29644:	46c0      	nop			; (mov r8, r8)
   29646:	46bd      	mov	sp, r7
   29648:	bd80      	pop	{r7, pc}
   2964a:	46c0      	nop			; (mov r8, r8)
   2964c:	00028cad 	.word	0x00028cad
   29650:	00025775 	.word	0x00025775
   29654:	00012eb1 	.word	0x00012eb1
   29658:	00025b4d 	.word	0x00025b4d
   2965c:	00029621 	.word	0x00029621

00029660 <system_gclk_chan_get_config_defaults>:
{
   29660:	b580      	push	{r7, lr}
   29662:	b082      	sub	sp, #8
   29664:	af00      	add	r7, sp, #0
   29666:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   29668:	687b      	ldr	r3, [r7, #4]
   2966a:	2200      	movs	r2, #0
   2966c:	701a      	strb	r2, [r3, #0]
}
   2966e:	46c0      	nop			; (mov r8, r8)
   29670:	46bd      	mov	sp, r7
   29672:	b002      	add	sp, #8
   29674:	bd80      	pop	{r7, pc}
	...

00029678 <system_apb_clock_set_mask>:
{
   29678:	b580      	push	{r7, lr}
   2967a:	b082      	sub	sp, #8
   2967c:	af00      	add	r7, sp, #0
   2967e:	0002      	movs	r2, r0
   29680:	6039      	str	r1, [r7, #0]
   29682:	1dfb      	adds	r3, r7, #7
   29684:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   29686:	1dfb      	adds	r3, r7, #7
   29688:	781b      	ldrb	r3, [r3, #0]
   2968a:	2b01      	cmp	r3, #1
   2968c:	d00a      	beq.n	296a4 <system_apb_clock_set_mask+0x2c>
   2968e:	2b02      	cmp	r3, #2
   29690:	d00f      	beq.n	296b2 <system_apb_clock_set_mask+0x3a>
   29692:	2b00      	cmp	r3, #0
   29694:	d114      	bne.n	296c0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   29696:	4b0e      	ldr	r3, [pc, #56]	; (296d0 <system_apb_clock_set_mask+0x58>)
   29698:	4a0d      	ldr	r2, [pc, #52]	; (296d0 <system_apb_clock_set_mask+0x58>)
   2969a:	6991      	ldr	r1, [r2, #24]
   2969c:	683a      	ldr	r2, [r7, #0]
   2969e:	430a      	orrs	r2, r1
   296a0:	619a      	str	r2, [r3, #24]
			break;
   296a2:	e00f      	b.n	296c4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   296a4:	4b0a      	ldr	r3, [pc, #40]	; (296d0 <system_apb_clock_set_mask+0x58>)
   296a6:	4a0a      	ldr	r2, [pc, #40]	; (296d0 <system_apb_clock_set_mask+0x58>)
   296a8:	69d1      	ldr	r1, [r2, #28]
   296aa:	683a      	ldr	r2, [r7, #0]
   296ac:	430a      	orrs	r2, r1
   296ae:	61da      	str	r2, [r3, #28]
			break;
   296b0:	e008      	b.n	296c4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   296b2:	4b07      	ldr	r3, [pc, #28]	; (296d0 <system_apb_clock_set_mask+0x58>)
   296b4:	4a06      	ldr	r2, [pc, #24]	; (296d0 <system_apb_clock_set_mask+0x58>)
   296b6:	6a11      	ldr	r1, [r2, #32]
   296b8:	683a      	ldr	r2, [r7, #0]
   296ba:	430a      	orrs	r2, r1
   296bc:	621a      	str	r2, [r3, #32]
			break;
   296be:	e001      	b.n	296c4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   296c0:	2317      	movs	r3, #23
   296c2:	e000      	b.n	296c6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   296c4:	2300      	movs	r3, #0
}
   296c6:	0018      	movs	r0, r3
   296c8:	46bd      	mov	sp, r7
   296ca:	b002      	add	sp, #8
   296cc:	bd80      	pop	{r7, pc}
   296ce:	46c0      	nop			; (mov r8, r8)
   296d0:	40000400 	.word	0x40000400

000296d4 <system_pinmux_get_config_defaults>:
{
   296d4:	b580      	push	{r7, lr}
   296d6:	b082      	sub	sp, #8
   296d8:	af00      	add	r7, sp, #0
   296da:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   296dc:	687b      	ldr	r3, [r7, #4]
   296de:	2280      	movs	r2, #128	; 0x80
   296e0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   296e2:	687b      	ldr	r3, [r7, #4]
   296e4:	2200      	movs	r2, #0
   296e6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   296e8:	687b      	ldr	r3, [r7, #4]
   296ea:	2201      	movs	r2, #1
   296ec:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   296ee:	687b      	ldr	r3, [r7, #4]
   296f0:	2200      	movs	r2, #0
   296f2:	70da      	strb	r2, [r3, #3]
}
   296f4:	46c0      	nop			; (mov r8, r8)
   296f6:	46bd      	mov	sp, r7
   296f8:	b002      	add	sp, #8
   296fa:	bd80      	pop	{r7, pc}

000296fc <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   296fc:	b580      	push	{r7, lr}
   296fe:	b084      	sub	sp, #16
   29700:	af00      	add	r7, sp, #0
   29702:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   29704:	2300      	movs	r3, #0
   29706:	60fb      	str	r3, [r7, #12]
   29708:	e00c      	b.n	29724 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   2970a:	4b0a      	ldr	r3, [pc, #40]	; (29734 <_tcc_get_inst_index+0x38>)
   2970c:	68fa      	ldr	r2, [r7, #12]
   2970e:	0092      	lsls	r2, r2, #2
   29710:	58d2      	ldr	r2, [r2, r3]
   29712:	687b      	ldr	r3, [r7, #4]
   29714:	429a      	cmp	r2, r3
   29716:	d102      	bne.n	2971e <_tcc_get_inst_index+0x22>
			return i;
   29718:	68fb      	ldr	r3, [r7, #12]
   2971a:	b2db      	uxtb	r3, r3
   2971c:	e006      	b.n	2972c <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2971e:	68fb      	ldr	r3, [r7, #12]
   29720:	3301      	adds	r3, #1
   29722:	60fb      	str	r3, [r7, #12]
   29724:	68fb      	ldr	r3, [r7, #12]
   29726:	2b02      	cmp	r3, #2
   29728:	d9ef      	bls.n	2970a <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   2972a:	2300      	movs	r3, #0
}
   2972c:	0018      	movs	r0, r3
   2972e:	46bd      	mov	sp, r7
   29730:	b004      	add	sp, #16
   29732:	bd80      	pop	{r7, pc}
   29734:	00038c1c 	.word	0x00038c1c

00029738 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   29738:	b590      	push	{r4, r7, lr}
   2973a:	b085      	sub	sp, #20
   2973c:	af00      	add	r7, sp, #0
   2973e:	6078      	str	r0, [r7, #4]
   29740:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   29742:	230f      	movs	r3, #15
   29744:	18fc      	adds	r4, r7, r3
   29746:	683b      	ldr	r3, [r7, #0]
   29748:	0018      	movs	r0, r3
   2974a:	4bad      	ldr	r3, [pc, #692]	; (29a00 <tcc_get_config_defaults+0x2c8>)
   2974c:	4798      	blx	r3
   2974e:	0003      	movs	r3, r0
   29750:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   29752:	687b      	ldr	r3, [r7, #4]
   29754:	2200      	movs	r2, #0
   29756:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   29758:	230f      	movs	r3, #15
   2975a:	18fb      	adds	r3, r7, r3
   2975c:	781a      	ldrb	r2, [r3, #0]
   2975e:	4ba9      	ldr	r3, [pc, #676]	; (29a04 <tcc_get_config_defaults+0x2cc>)
   29760:	0092      	lsls	r2, r2, #2
   29762:	58d2      	ldr	r2, [r2, r3]
   29764:	687b      	ldr	r3, [r7, #4]
   29766:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   29768:	687b      	ldr	r3, [r7, #4]
   2976a:	2200      	movs	r2, #0
   2976c:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   2976e:	687b      	ldr	r3, [r7, #4]
   29770:	2200      	movs	r2, #0
   29772:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   29774:	687b      	ldr	r3, [r7, #4]
   29776:	2200      	movs	r2, #0
   29778:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   2977a:	687b      	ldr	r3, [r7, #4]
   2977c:	2200      	movs	r2, #0
   2977e:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   29780:	687b      	ldr	r3, [r7, #4]
   29782:	2200      	movs	r2, #0
   29784:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   29786:	687b      	ldr	r3, [r7, #4]
   29788:	2200      	movs	r2, #0
   2978a:	61da      	str	r2, [r3, #28]
   2978c:	687b      	ldr	r3, [r7, #4]
   2978e:	2200      	movs	r2, #0
   29790:	621a      	str	r2, [r3, #32]
   29792:	687b      	ldr	r3, [r7, #4]
   29794:	2200      	movs	r2, #0
   29796:	625a      	str	r2, [r3, #36]	; 0x24
   29798:	687b      	ldr	r3, [r7, #4]
   2979a:	2200      	movs	r2, #0
   2979c:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2979e:	687b      	ldr	r3, [r7, #4]
   297a0:	2200      	movs	r2, #0
   297a2:	751a      	strb	r2, [r3, #20]
   297a4:	687b      	ldr	r3, [r7, #4]
   297a6:	2200      	movs	r2, #0
   297a8:	755a      	strb	r2, [r3, #21]
   297aa:	687b      	ldr	r3, [r7, #4]
   297ac:	2200      	movs	r2, #0
   297ae:	759a      	strb	r2, [r3, #22]
   297b0:	687b      	ldr	r3, [r7, #4]
   297b2:	2200      	movs	r2, #0
   297b4:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   297b6:	687b      	ldr	r3, [r7, #4]
   297b8:	2200      	movs	r2, #0
   297ba:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   297bc:	687b      	ldr	r3, [r7, #4]
   297be:	2200      	movs	r2, #0
   297c0:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   297c2:	687b      	ldr	r3, [r7, #4]
   297c4:	2200      	movs	r2, #0
   297c6:	741a      	strb	r2, [r3, #16]
   297c8:	687b      	ldr	r3, [r7, #4]
   297ca:	2200      	movs	r2, #0
   297cc:	745a      	strb	r2, [r3, #17]
   297ce:	687b      	ldr	r3, [r7, #4]
   297d0:	2200      	movs	r2, #0
   297d2:	749a      	strb	r2, [r3, #18]
   297d4:	687b      	ldr	r3, [r7, #4]
   297d6:	2200      	movs	r2, #0
   297d8:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   297da:	687b      	ldr	r3, [r7, #4]
   297dc:	222c      	movs	r2, #44	; 0x2c
   297de:	2100      	movs	r1, #0
   297e0:	5499      	strb	r1, [r3, r2]
   297e2:	687b      	ldr	r3, [r7, #4]
   297e4:	222d      	movs	r2, #45	; 0x2d
   297e6:	2100      	movs	r1, #0
   297e8:	5499      	strb	r1, [r3, r2]
   297ea:	687b      	ldr	r3, [r7, #4]
   297ec:	222e      	movs	r2, #46	; 0x2e
   297ee:	2100      	movs	r1, #0
   297f0:	5499      	strb	r1, [r3, r2]
   297f2:	687b      	ldr	r3, [r7, #4]
   297f4:	222f      	movs	r2, #47	; 0x2f
   297f6:	2100      	movs	r1, #0
   297f8:	5499      	strb	r1, [r3, r2]
   297fa:	687b      	ldr	r3, [r7, #4]
   297fc:	2230      	movs	r2, #48	; 0x30
   297fe:	2100      	movs	r1, #0
   29800:	5499      	strb	r1, [r3, r2]
   29802:	687b      	ldr	r3, [r7, #4]
   29804:	2231      	movs	r2, #49	; 0x31
   29806:	2100      	movs	r1, #0
   29808:	5499      	strb	r1, [r3, r2]
   2980a:	687b      	ldr	r3, [r7, #4]
   2980c:	2232      	movs	r2, #50	; 0x32
   2980e:	2100      	movs	r1, #0
   29810:	5499      	strb	r1, [r3, r2]
   29812:	687b      	ldr	r3, [r7, #4]
   29814:	2233      	movs	r2, #51	; 0x33
   29816:	2100      	movs	r1, #0
   29818:	5499      	strb	r1, [r3, r2]
   2981a:	687b      	ldr	r3, [r7, #4]
   2981c:	2234      	movs	r2, #52	; 0x34
   2981e:	2100      	movs	r1, #0
   29820:	5499      	strb	r1, [r3, r2]
   29822:	687b      	ldr	r3, [r7, #4]
   29824:	2235      	movs	r2, #53	; 0x35
   29826:	2100      	movs	r1, #0
   29828:	5499      	strb	r1, [r3, r2]
   2982a:	687b      	ldr	r3, [r7, #4]
   2982c:	2236      	movs	r2, #54	; 0x36
   2982e:	2100      	movs	r1, #0
   29830:	5499      	strb	r1, [r3, r2]
   29832:	687b      	ldr	r3, [r7, #4]
   29834:	2237      	movs	r2, #55	; 0x37
   29836:	2100      	movs	r1, #0
   29838:	5499      	strb	r1, [r3, r2]
   2983a:	687b      	ldr	r3, [r7, #4]
   2983c:	2238      	movs	r2, #56	; 0x38
   2983e:	2100      	movs	r1, #0
   29840:	5499      	strb	r1, [r3, r2]
   29842:	687b      	ldr	r3, [r7, #4]
   29844:	2239      	movs	r2, #57	; 0x39
   29846:	2100      	movs	r1, #0
   29848:	5499      	strb	r1, [r3, r2]
   2984a:	687b      	ldr	r3, [r7, #4]
   2984c:	223a      	movs	r2, #58	; 0x3a
   2984e:	2100      	movs	r1, #0
   29850:	5499      	strb	r1, [r3, r2]
   29852:	687b      	ldr	r3, [r7, #4]
   29854:	223b      	movs	r2, #59	; 0x3b
   29856:	2100      	movs	r1, #0
   29858:	5499      	strb	r1, [r3, r2]
   2985a:	687b      	ldr	r3, [r7, #4]
   2985c:	223c      	movs	r2, #60	; 0x3c
   2985e:	2100      	movs	r1, #0
   29860:	5499      	strb	r1, [r3, r2]
   29862:	687b      	ldr	r3, [r7, #4]
   29864:	223d      	movs	r2, #61	; 0x3d
   29866:	2100      	movs	r1, #0
   29868:	5499      	strb	r1, [r3, r2]
   2986a:	687b      	ldr	r3, [r7, #4]
   2986c:	223e      	movs	r2, #62	; 0x3e
   2986e:	2100      	movs	r1, #0
   29870:	5499      	strb	r1, [r3, r2]
   29872:	687b      	ldr	r3, [r7, #4]
   29874:	223f      	movs	r2, #63	; 0x3f
   29876:	2100      	movs	r1, #0
   29878:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   2987a:	687b      	ldr	r3, [r7, #4]
   2987c:	2240      	movs	r2, #64	; 0x40
   2987e:	2100      	movs	r1, #0
   29880:	5499      	strb	r1, [r3, r2]
   29882:	687b      	ldr	r3, [r7, #4]
   29884:	2241      	movs	r2, #65	; 0x41
   29886:	2100      	movs	r1, #0
   29888:	5499      	strb	r1, [r3, r2]
   2988a:	687b      	ldr	r3, [r7, #4]
   2988c:	2242      	movs	r2, #66	; 0x42
   2988e:	2100      	movs	r1, #0
   29890:	5499      	strb	r1, [r3, r2]
   29892:	687b      	ldr	r3, [r7, #4]
   29894:	2243      	movs	r2, #67	; 0x43
   29896:	2100      	movs	r1, #0
   29898:	5499      	strb	r1, [r3, r2]
   2989a:	687b      	ldr	r3, [r7, #4]
   2989c:	2244      	movs	r2, #68	; 0x44
   2989e:	2100      	movs	r1, #0
   298a0:	5499      	strb	r1, [r3, r2]
   298a2:	687b      	ldr	r3, [r7, #4]
   298a4:	2245      	movs	r2, #69	; 0x45
   298a6:	2100      	movs	r1, #0
   298a8:	5499      	strb	r1, [r3, r2]
   298aa:	687b      	ldr	r3, [r7, #4]
   298ac:	2246      	movs	r2, #70	; 0x46
   298ae:	2100      	movs	r1, #0
   298b0:	5499      	strb	r1, [r3, r2]
   298b2:	687b      	ldr	r3, [r7, #4]
   298b4:	2247      	movs	r2, #71	; 0x47
   298b6:	2100      	movs	r1, #0
   298b8:	5499      	strb	r1, [r3, r2]
   298ba:	687b      	ldr	r3, [r7, #4]
   298bc:	2248      	movs	r2, #72	; 0x48
   298be:	2100      	movs	r1, #0
   298c0:	5499      	strb	r1, [r3, r2]
   298c2:	687b      	ldr	r3, [r7, #4]
   298c4:	2249      	movs	r2, #73	; 0x49
   298c6:	2100      	movs	r1, #0
   298c8:	5499      	strb	r1, [r3, r2]
   298ca:	687b      	ldr	r3, [r7, #4]
   298cc:	224a      	movs	r2, #74	; 0x4a
   298ce:	2100      	movs	r1, #0
   298d0:	5499      	strb	r1, [r3, r2]
   298d2:	687b      	ldr	r3, [r7, #4]
   298d4:	224b      	movs	r2, #75	; 0x4b
   298d6:	2100      	movs	r1, #0
   298d8:	5499      	strb	r1, [r3, r2]
   298da:	687b      	ldr	r3, [r7, #4]
   298dc:	224c      	movs	r2, #76	; 0x4c
   298de:	2100      	movs	r1, #0
   298e0:	5499      	strb	r1, [r3, r2]
   298e2:	687b      	ldr	r3, [r7, #4]
   298e4:	224d      	movs	r2, #77	; 0x4d
   298e6:	2100      	movs	r1, #0
   298e8:	5499      	strb	r1, [r3, r2]
   298ea:	687b      	ldr	r3, [r7, #4]
   298ec:	224e      	movs	r2, #78	; 0x4e
   298ee:	2100      	movs	r1, #0
   298f0:	5499      	strb	r1, [r3, r2]
   298f2:	687b      	ldr	r3, [r7, #4]
   298f4:	224f      	movs	r2, #79	; 0x4f
   298f6:	2100      	movs	r1, #0
   298f8:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   298fa:	687b      	ldr	r3, [r7, #4]
   298fc:	2250      	movs	r2, #80	; 0x50
   298fe:	2100      	movs	r1, #0
   29900:	5499      	strb	r1, [r3, r2]
   29902:	687b      	ldr	r3, [r7, #4]
   29904:	2251      	movs	r2, #81	; 0x51
   29906:	2100      	movs	r1, #0
   29908:	5499      	strb	r1, [r3, r2]
   2990a:	687b      	ldr	r3, [r7, #4]
   2990c:	2252      	movs	r2, #82	; 0x52
   2990e:	2100      	movs	r1, #0
   29910:	5499      	strb	r1, [r3, r2]
   29912:	687b      	ldr	r3, [r7, #4]
   29914:	2253      	movs	r2, #83	; 0x53
   29916:	2100      	movs	r1, #0
   29918:	5499      	strb	r1, [r3, r2]
   2991a:	687b      	ldr	r3, [r7, #4]
   2991c:	2254      	movs	r2, #84	; 0x54
   2991e:	2100      	movs	r1, #0
   29920:	5499      	strb	r1, [r3, r2]
   29922:	687b      	ldr	r3, [r7, #4]
   29924:	2255      	movs	r2, #85	; 0x55
   29926:	2100      	movs	r1, #0
   29928:	5499      	strb	r1, [r3, r2]
   2992a:	687b      	ldr	r3, [r7, #4]
   2992c:	2256      	movs	r2, #86	; 0x56
   2992e:	2100      	movs	r1, #0
   29930:	5499      	strb	r1, [r3, r2]
   29932:	687b      	ldr	r3, [r7, #4]
   29934:	2257      	movs	r2, #87	; 0x57
   29936:	2100      	movs	r1, #0
   29938:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   2993a:	687b      	ldr	r3, [r7, #4]
   2993c:	2298      	movs	r2, #152	; 0x98
   2993e:	2100      	movs	r1, #0
   29940:	5499      	strb	r1, [r3, r2]
   29942:	687b      	ldr	r3, [r7, #4]
   29944:	2200      	movs	r2, #0
   29946:	659a      	str	r2, [r3, #88]	; 0x58
   29948:	687b      	ldr	r3, [r7, #4]
   2994a:	2200      	movs	r2, #0
   2994c:	679a      	str	r2, [r3, #120]	; 0x78
   2994e:	687b      	ldr	r3, [r7, #4]
   29950:	2299      	movs	r2, #153	; 0x99
   29952:	2100      	movs	r1, #0
   29954:	5499      	strb	r1, [r3, r2]
   29956:	687b      	ldr	r3, [r7, #4]
   29958:	2200      	movs	r2, #0
   2995a:	65da      	str	r2, [r3, #92]	; 0x5c
   2995c:	687b      	ldr	r3, [r7, #4]
   2995e:	2200      	movs	r2, #0
   29960:	67da      	str	r2, [r3, #124]	; 0x7c
   29962:	687b      	ldr	r3, [r7, #4]
   29964:	229a      	movs	r2, #154	; 0x9a
   29966:	2100      	movs	r1, #0
   29968:	5499      	strb	r1, [r3, r2]
   2996a:	687b      	ldr	r3, [r7, #4]
   2996c:	2200      	movs	r2, #0
   2996e:	661a      	str	r2, [r3, #96]	; 0x60
   29970:	687b      	ldr	r3, [r7, #4]
   29972:	2280      	movs	r2, #128	; 0x80
   29974:	2100      	movs	r1, #0
   29976:	5099      	str	r1, [r3, r2]
   29978:	687b      	ldr	r3, [r7, #4]
   2997a:	229b      	movs	r2, #155	; 0x9b
   2997c:	2100      	movs	r1, #0
   2997e:	5499      	strb	r1, [r3, r2]
   29980:	687b      	ldr	r3, [r7, #4]
   29982:	2200      	movs	r2, #0
   29984:	665a      	str	r2, [r3, #100]	; 0x64
   29986:	687b      	ldr	r3, [r7, #4]
   29988:	2284      	movs	r2, #132	; 0x84
   2998a:	2100      	movs	r1, #0
   2998c:	5099      	str	r1, [r3, r2]
   2998e:	687b      	ldr	r3, [r7, #4]
   29990:	229c      	movs	r2, #156	; 0x9c
   29992:	2100      	movs	r1, #0
   29994:	5499      	strb	r1, [r3, r2]
   29996:	687b      	ldr	r3, [r7, #4]
   29998:	2200      	movs	r2, #0
   2999a:	669a      	str	r2, [r3, #104]	; 0x68
   2999c:	687b      	ldr	r3, [r7, #4]
   2999e:	2288      	movs	r2, #136	; 0x88
   299a0:	2100      	movs	r1, #0
   299a2:	5099      	str	r1, [r3, r2]
   299a4:	687b      	ldr	r3, [r7, #4]
   299a6:	229d      	movs	r2, #157	; 0x9d
   299a8:	2100      	movs	r1, #0
   299aa:	5499      	strb	r1, [r3, r2]
   299ac:	687b      	ldr	r3, [r7, #4]
   299ae:	2200      	movs	r2, #0
   299b0:	66da      	str	r2, [r3, #108]	; 0x6c
   299b2:	687b      	ldr	r3, [r7, #4]
   299b4:	228c      	movs	r2, #140	; 0x8c
   299b6:	2100      	movs	r1, #0
   299b8:	5099      	str	r1, [r3, r2]
   299ba:	687b      	ldr	r3, [r7, #4]
   299bc:	229e      	movs	r2, #158	; 0x9e
   299be:	2100      	movs	r1, #0
   299c0:	5499      	strb	r1, [r3, r2]
   299c2:	687b      	ldr	r3, [r7, #4]
   299c4:	2200      	movs	r2, #0
   299c6:	671a      	str	r2, [r3, #112]	; 0x70
   299c8:	687b      	ldr	r3, [r7, #4]
   299ca:	2290      	movs	r2, #144	; 0x90
   299cc:	2100      	movs	r1, #0
   299ce:	5099      	str	r1, [r3, r2]
   299d0:	687b      	ldr	r3, [r7, #4]
   299d2:	229f      	movs	r2, #159	; 0x9f
   299d4:	2100      	movs	r1, #0
   299d6:	5499      	strb	r1, [r3, r2]
   299d8:	687b      	ldr	r3, [r7, #4]
   299da:	2200      	movs	r2, #0
   299dc:	675a      	str	r2, [r3, #116]	; 0x74
   299de:	687b      	ldr	r3, [r7, #4]
   299e0:	2294      	movs	r2, #148	; 0x94
   299e2:	2100      	movs	r1, #0
   299e4:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   299e6:	687b      	ldr	r3, [r7, #4]
   299e8:	22a0      	movs	r2, #160	; 0xa0
   299ea:	2101      	movs	r1, #1
   299ec:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   299ee:	687b      	ldr	r3, [r7, #4]
   299f0:	22a1      	movs	r2, #161	; 0xa1
   299f2:	2100      	movs	r1, #0
   299f4:	5499      	strb	r1, [r3, r2]
}
   299f6:	46c0      	nop			; (mov r8, r8)
   299f8:	46bd      	mov	sp, r7
   299fa:	b005      	add	sp, #20
   299fc:	bd90      	pop	{r4, r7, pc}
   299fe:	46c0      	nop			; (mov r8, r8)
   29a00:	000296fd 	.word	0x000296fd
   29a04:	00038c38 	.word	0x00038c38

00029a08 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   29a08:	b580      	push	{r7, lr}
   29a0a:	b086      	sub	sp, #24
   29a0c:	af00      	add	r7, sp, #0
   29a0e:	60b9      	str	r1, [r7, #8]
   29a10:	607a      	str	r2, [r7, #4]
   29a12:	230f      	movs	r3, #15
   29a14:	18fb      	adds	r3, r7, r3
   29a16:	1c02      	adds	r2, r0, #0
   29a18:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   29a1a:	2300      	movs	r3, #0
   29a1c:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   29a1e:	2300      	movs	r3, #0
   29a20:	613b      	str	r3, [r7, #16]
   29a22:	e01d      	b.n	29a60 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   29a24:	68ba      	ldr	r2, [r7, #8]
   29a26:	693b      	ldr	r3, [r7, #16]
   29a28:	18d3      	adds	r3, r2, r3
   29a2a:	3310      	adds	r3, #16
   29a2c:	781b      	ldrb	r3, [r3, #0]
   29a2e:	2b01      	cmp	r3, #1
   29a30:	d113      	bne.n	29a5a <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   29a32:	230f      	movs	r3, #15
   29a34:	18fb      	adds	r3, r7, r3
   29a36:	781b      	ldrb	r3, [r3, #0]
   29a38:	4a1b      	ldr	r2, [pc, #108]	; (29aa8 <_tcc_build_ctrla+0xa0>)
   29a3a:	5cd3      	ldrb	r3, [r2, r3]
   29a3c:	001a      	movs	r2, r3
   29a3e:	693b      	ldr	r3, [r7, #16]
   29a40:	429a      	cmp	r2, r3
   29a42:	da01      	bge.n	29a48 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   29a44:	2317      	movs	r3, #23
   29a46:	e02a      	b.n	29a9e <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   29a48:	2380      	movs	r3, #128	; 0x80
   29a4a:	045a      	lsls	r2, r3, #17
   29a4c:	693b      	ldr	r3, [r7, #16]
   29a4e:	409a      	lsls	r2, r3
   29a50:	0013      	movs	r3, r2
   29a52:	001a      	movs	r2, r3
   29a54:	697b      	ldr	r3, [r7, #20]
   29a56:	4313      	orrs	r3, r2
   29a58:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   29a5a:	693b      	ldr	r3, [r7, #16]
   29a5c:	3301      	adds	r3, #1
   29a5e:	613b      	str	r3, [r7, #16]
   29a60:	693b      	ldr	r3, [r7, #16]
   29a62:	2b03      	cmp	r3, #3
   29a64:	ddde      	ble.n	29a24 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   29a66:	68bb      	ldr	r3, [r7, #8]
   29a68:	22a1      	movs	r2, #161	; 0xa1
   29a6a:	5c9b      	ldrb	r3, [r3, r2]
   29a6c:	2b00      	cmp	r3, #0
   29a6e:	d004      	beq.n	29a7a <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   29a70:	697b      	ldr	r3, [r7, #20]
   29a72:	2280      	movs	r2, #128	; 0x80
   29a74:	0112      	lsls	r2, r2, #4
   29a76:	4313      	orrs	r3, r2
   29a78:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   29a7a:	68bb      	ldr	r3, [r7, #8]
   29a7c:	7b1b      	ldrb	r3, [r3, #12]
   29a7e:	031b      	lsls	r3, r3, #12
   29a80:	001a      	movs	r2, r3
   29a82:	697b      	ldr	r3, [r7, #20]
   29a84:	4313      	orrs	r3, r2
   29a86:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   29a88:	68bb      	ldr	r3, [r7, #8]
   29a8a:	7adb      	ldrb	r3, [r3, #11]
   29a8c:	021b      	lsls	r3, r3, #8
   29a8e:	001a      	movs	r2, r3
   29a90:	697b      	ldr	r3, [r7, #20]
   29a92:	4313      	orrs	r3, r2
   29a94:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   29a96:	687b      	ldr	r3, [r7, #4]
   29a98:	697a      	ldr	r2, [r7, #20]
   29a9a:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   29a9c:	2300      	movs	r3, #0
}
   29a9e:	0018      	movs	r0, r3
   29aa0:	46bd      	mov	sp, r7
   29aa2:	b006      	add	sp, #24
   29aa4:	bd80      	pop	{r7, pc}
   29aa6:	46c0      	nop			; (mov r8, r8)
   29aa8:	00038c44 	.word	0x00038c44

00029aac <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   29aac:	b580      	push	{r7, lr}
   29aae:	b086      	sub	sp, #24
   29ab0:	af00      	add	r7, sp, #0
   29ab2:	60b9      	str	r1, [r7, #8]
   29ab4:	607a      	str	r2, [r7, #4]
   29ab6:	230f      	movs	r3, #15
   29ab8:	18fb      	adds	r3, r7, r3
   29aba:	1c02      	adds	r2, r0, #0
   29abc:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   29abe:	2317      	movs	r3, #23
   29ac0:	18fb      	adds	r3, r7, r3
   29ac2:	2200      	movs	r2, #0
   29ac4:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   29ac6:	68bb      	ldr	r3, [r7, #8]
   29ac8:	7a1b      	ldrb	r3, [r3, #8]
   29aca:	2b00      	cmp	r3, #0
   29acc:	d007      	beq.n	29ade <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   29ace:	2317      	movs	r3, #23
   29ad0:	18fb      	adds	r3, r7, r3
   29ad2:	2217      	movs	r2, #23
   29ad4:	18ba      	adds	r2, r7, r2
   29ad6:	7812      	ldrb	r2, [r2, #0]
   29ad8:	2104      	movs	r1, #4
   29ada:	430a      	orrs	r2, r1
   29adc:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   29ade:	68bb      	ldr	r3, [r7, #8]
   29ae0:	7a5b      	ldrb	r3, [r3, #9]
   29ae2:	2b01      	cmp	r3, #1
   29ae4:	d107      	bne.n	29af6 <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   29ae6:	2317      	movs	r3, #23
   29ae8:	18fb      	adds	r3, r7, r3
   29aea:	2217      	movs	r2, #23
   29aec:	18ba      	adds	r2, r7, r2
   29aee:	7812      	ldrb	r2, [r2, #0]
   29af0:	2101      	movs	r1, #1
   29af2:	430a      	orrs	r2, r1
   29af4:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   29af6:	687b      	ldr	r3, [r7, #4]
   29af8:	2217      	movs	r2, #23
   29afa:	18ba      	adds	r2, r7, r2
   29afc:	7812      	ldrb	r2, [r2, #0]
   29afe:	701a      	strb	r2, [r3, #0]
}
   29b00:	46c0      	nop			; (mov r8, r8)
   29b02:	46bd      	mov	sp, r7
   29b04:	b006      	add	sp, #24
   29b06:	bd80      	pop	{r7, pc}

00029b08 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   29b08:	b580      	push	{r7, lr}
   29b0a:	b088      	sub	sp, #32
   29b0c:	af00      	add	r7, sp, #0
   29b0e:	60b9      	str	r1, [r7, #8]
   29b10:	607a      	str	r2, [r7, #4]
   29b12:	230f      	movs	r3, #15
   29b14:	18fb      	adds	r3, r7, r3
   29b16:	1c02      	adds	r2, r0, #0
   29b18:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   29b1a:	230f      	movs	r3, #15
   29b1c:	18fb      	adds	r3, r7, r3
   29b1e:	781a      	ldrb	r2, [r3, #0]
   29b20:	231b      	movs	r3, #27
   29b22:	18fb      	adds	r3, r7, r3
   29b24:	493e      	ldr	r1, [pc, #248]	; (29c20 <_tcc_build_faults+0x118>)
   29b26:	5c8a      	ldrb	r2, [r1, r2]
   29b28:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   29b2a:	2300      	movs	r3, #0
   29b2c:	61fb      	str	r3, [r7, #28]
   29b2e:	e06e      	b.n	29c0e <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   29b30:	69fa      	ldr	r2, [r7, #28]
   29b32:	0013      	movs	r3, r2
   29b34:	009b      	lsls	r3, r3, #2
   29b36:	189b      	adds	r3, r3, r2
   29b38:	005b      	lsls	r3, r3, #1
   29b3a:	3328      	adds	r3, #40	; 0x28
   29b3c:	68ba      	ldr	r2, [r7, #8]
   29b3e:	18d3      	adds	r3, r2, r3
   29b40:	3304      	adds	r3, #4
   29b42:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   29b44:	697b      	ldr	r3, [r7, #20]
   29b46:	7a5b      	ldrb	r3, [r3, #9]
   29b48:	221b      	movs	r2, #27
   29b4a:	18ba      	adds	r2, r7, r2
   29b4c:	7812      	ldrb	r2, [r2, #0]
   29b4e:	429a      	cmp	r2, r3
   29b50:	d801      	bhi.n	29b56 <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   29b52:	2317      	movs	r3, #23
   29b54:	e05f      	b.n	29c16 <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   29b56:	697b      	ldr	r3, [r7, #20]
   29b58:	781b      	ldrb	r3, [r3, #0]
   29b5a:	2b0f      	cmp	r3, #15
   29b5c:	d901      	bls.n	29b62 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   29b5e:	2317      	movs	r3, #23
   29b60:	e059      	b.n	29c16 <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   29b62:	697b      	ldr	r3, [r7, #20]
   29b64:	781b      	ldrb	r3, [r3, #0]
   29b66:	061b      	lsls	r3, r3, #24
   29b68:	001a      	movs	r2, r3
   29b6a:	23f0      	movs	r3, #240	; 0xf0
   29b6c:	051b      	lsls	r3, r3, #20
   29b6e:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   29b70:	697b      	ldr	r3, [r7, #20]
   29b72:	785b      	ldrb	r3, [r3, #1]
   29b74:	041b      	lsls	r3, r3, #16
   29b76:	0019      	movs	r1, r3
   29b78:	23ff      	movs	r3, #255	; 0xff
   29b7a:	041b      	lsls	r3, r3, #16
   29b7c:	400b      	ands	r3, r1
   29b7e:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   29b80:	697b      	ldr	r3, [r7, #20]
   29b82:	789b      	ldrb	r3, [r3, #2]
   29b84:	2b00      	cmp	r3, #0
   29b86:	d001      	beq.n	29b8c <_tcc_build_faults+0x84>
   29b88:	2380      	movs	r3, #128	; 0x80
   29b8a:	e000      	b.n	29b8e <_tcc_build_faults+0x86>
   29b8c:	2300      	movs	r3, #0
   29b8e:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   29b90:	697b      	ldr	r3, [r7, #20]
   29b92:	78db      	ldrb	r3, [r3, #3]
   29b94:	2b00      	cmp	r3, #0
   29b96:	d001      	beq.n	29b9c <_tcc_build_faults+0x94>
   29b98:	2308      	movs	r3, #8
   29b9a:	e000      	b.n	29b9e <_tcc_build_faults+0x96>
   29b9c:	2300      	movs	r3, #0
   29b9e:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   29ba0:	697b      	ldr	r3, [r7, #20]
   29ba2:	791b      	ldrb	r3, [r3, #4]
   29ba4:	2b00      	cmp	r3, #0
   29ba6:	d001      	beq.n	29bac <_tcc_build_faults+0xa4>
   29ba8:	2310      	movs	r3, #16
   29baa:	e000      	b.n	29bae <_tcc_build_faults+0xa6>
   29bac:	2300      	movs	r3, #0
   29bae:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   29bb0:	697b      	ldr	r3, [r7, #20]
   29bb2:	795b      	ldrb	r3, [r3, #5]
   29bb4:	0019      	movs	r1, r3
   29bb6:	2303      	movs	r3, #3
   29bb8:	400b      	ands	r3, r1
   29bba:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   29bbc:	697b      	ldr	r3, [r7, #20]
   29bbe:	799b      	ldrb	r3, [r3, #6]
   29bc0:	015b      	lsls	r3, r3, #5
   29bc2:	0019      	movs	r1, r3
   29bc4:	2360      	movs	r3, #96	; 0x60
   29bc6:	400b      	ands	r3, r1
   29bc8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   29bca:	697b      	ldr	r3, [r7, #20]
   29bcc:	79db      	ldrb	r3, [r3, #7]
   29bce:	021b      	lsls	r3, r3, #8
   29bd0:	0019      	movs	r1, r3
   29bd2:	23c0      	movs	r3, #192	; 0xc0
   29bd4:	009b      	lsls	r3, r3, #2
   29bd6:	400b      	ands	r3, r1
   29bd8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   29bda:	697b      	ldr	r3, [r7, #20]
   29bdc:	7a1b      	ldrb	r3, [r3, #8]
   29bde:	031b      	lsls	r3, r3, #12
   29be0:	0019      	movs	r1, r3
   29be2:	23e0      	movs	r3, #224	; 0xe0
   29be4:	01db      	lsls	r3, r3, #7
   29be6:	400b      	ands	r3, r1
   29be8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   29bea:	697b      	ldr	r3, [r7, #20]
   29bec:	7a5b      	ldrb	r3, [r3, #9]
   29bee:	029b      	lsls	r3, r3, #10
   29bf0:	0019      	movs	r1, r3
   29bf2:	23c0      	movs	r3, #192	; 0xc0
   29bf4:	011b      	lsls	r3, r3, #4
   29bf6:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   29bf8:	4313      	orrs	r3, r2
   29bfa:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   29bfc:	69fb      	ldr	r3, [r7, #28]
   29bfe:	009b      	lsls	r3, r3, #2
   29c00:	687a      	ldr	r2, [r7, #4]
   29c02:	18d3      	adds	r3, r2, r3
   29c04:	693a      	ldr	r2, [r7, #16]
   29c06:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   29c08:	69fb      	ldr	r3, [r7, #28]
   29c0a:	3301      	adds	r3, #1
   29c0c:	61fb      	str	r3, [r7, #28]
   29c0e:	69fb      	ldr	r3, [r7, #28]
   29c10:	2b01      	cmp	r3, #1
   29c12:	dd8d      	ble.n	29b30 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   29c14:	2300      	movs	r3, #0
}
   29c16:	0018      	movs	r0, r3
   29c18:	46bd      	mov	sp, r7
   29c1a:	b008      	add	sp, #32
   29c1c:	bd80      	pop	{r7, pc}
   29c1e:	46c0      	nop			; (mov r8, r8)
   29c20:	00038c44 	.word	0x00038c44

00029c24 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   29c24:	b580      	push	{r7, lr}
   29c26:	b088      	sub	sp, #32
   29c28:	af00      	add	r7, sp, #0
   29c2a:	60b9      	str	r1, [r7, #8]
   29c2c:	607a      	str	r2, [r7, #4]
   29c2e:	230f      	movs	r3, #15
   29c30:	18fb      	adds	r3, r7, r3
   29c32:	1c02      	adds	r2, r0, #0
   29c34:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   29c36:	230f      	movs	r3, #15
   29c38:	18fb      	adds	r3, r7, r3
   29c3a:	781a      	ldrb	r2, [r3, #0]
   29c3c:	2317      	movs	r3, #23
   29c3e:	18fb      	adds	r3, r7, r3
   29c40:	492d      	ldr	r1, [pc, #180]	; (29cf8 <_tcc_build_drvctrl+0xd4>)
   29c42:	5c8a      	ldrb	r2, [r1, r2]
   29c44:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   29c46:	2300      	movs	r3, #0
   29c48:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   29c4a:	2300      	movs	r3, #0
   29c4c:	61fb      	str	r3, [r7, #28]
   29c4e:	e048      	b.n	29ce2 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   29c50:	68ba      	ldr	r2, [r7, #8]
   29c52:	2150      	movs	r1, #80	; 0x50
   29c54:	69fb      	ldr	r3, [r7, #28]
   29c56:	18d3      	adds	r3, r2, r3
   29c58:	185b      	adds	r3, r3, r1
   29c5a:	781b      	ldrb	r3, [r3, #0]
   29c5c:	2b00      	cmp	r3, #0
   29c5e:	d010      	beq.n	29c82 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   29c60:	2317      	movs	r3, #23
   29c62:	18fb      	adds	r3, r7, r3
   29c64:	781a      	ldrb	r2, [r3, #0]
   29c66:	69fb      	ldr	r3, [r7, #28]
   29c68:	429a      	cmp	r2, r3
   29c6a:	d801      	bhi.n	29c70 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   29c6c:	2317      	movs	r3, #23
   29c6e:	e03f      	b.n	29cf0 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   29c70:	2380      	movs	r3, #128	; 0x80
   29c72:	025a      	lsls	r2, r3, #9
   29c74:	69fb      	ldr	r3, [r7, #28]
   29c76:	409a      	lsls	r2, r3
   29c78:	0013      	movs	r3, r2
   29c7a:	001a      	movs	r2, r3
   29c7c:	69bb      	ldr	r3, [r7, #24]
   29c7e:	4313      	orrs	r3, r2
   29c80:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   29c82:	68ba      	ldr	r2, [r7, #8]
   29c84:	69fb      	ldr	r3, [r7, #28]
   29c86:	331c      	adds	r3, #28
   29c88:	005b      	lsls	r3, r3, #1
   29c8a:	18d3      	adds	r3, r2, r3
   29c8c:	3309      	adds	r3, #9
   29c8e:	781b      	ldrb	r3, [r3, #0]
   29c90:	2b00      	cmp	r3, #0
   29c92:	d023      	beq.n	29cdc <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   29c94:	2317      	movs	r3, #23
   29c96:	18fb      	adds	r3, r7, r3
   29c98:	781a      	ldrb	r2, [r3, #0]
   29c9a:	69fb      	ldr	r3, [r7, #28]
   29c9c:	429a      	cmp	r2, r3
   29c9e:	d801      	bhi.n	29ca4 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   29ca0:	2317      	movs	r3, #23
   29ca2:	e025      	b.n	29cf0 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   29ca4:	68ba      	ldr	r2, [r7, #8]
   29ca6:	69fb      	ldr	r3, [r7, #28]
   29ca8:	331c      	adds	r3, #28
   29caa:	005b      	lsls	r3, r3, #1
   29cac:	18d3      	adds	r3, r2, r3
   29cae:	3309      	adds	r3, #9
   29cb0:	781b      	ldrb	r3, [r3, #0]
   29cb2:	2b02      	cmp	r3, #2
   29cb4:	d10a      	bne.n	29ccc <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   29cb6:	2302      	movs	r3, #2
   29cb8:	33ff      	adds	r3, #255	; 0xff
   29cba:	001a      	movs	r2, r3
   29cbc:	69fb      	ldr	r3, [r7, #28]
   29cbe:	409a      	lsls	r2, r3
   29cc0:	0013      	movs	r3, r2
   29cc2:	001a      	movs	r2, r3
   29cc4:	69bb      	ldr	r3, [r7, #24]
   29cc6:	4313      	orrs	r3, r2
   29cc8:	61bb      	str	r3, [r7, #24]
   29cca:	e007      	b.n	29cdc <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   29ccc:	2201      	movs	r2, #1
   29cce:	69fb      	ldr	r3, [r7, #28]
   29cd0:	409a      	lsls	r2, r3
   29cd2:	0013      	movs	r3, r2
   29cd4:	001a      	movs	r2, r3
   29cd6:	69bb      	ldr	r3, [r7, #24]
   29cd8:	4313      	orrs	r3, r2
   29cda:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   29cdc:	69fb      	ldr	r3, [r7, #28]
   29cde:	3301      	adds	r3, #1
   29ce0:	61fb      	str	r3, [r7, #28]
   29ce2:	69fb      	ldr	r3, [r7, #28]
   29ce4:	2b07      	cmp	r3, #7
   29ce6:	d9b3      	bls.n	29c50 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   29ce8:	687b      	ldr	r3, [r7, #4]
   29cea:	69ba      	ldr	r2, [r7, #24]
   29cec:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   29cee:	2300      	movs	r3, #0
}
   29cf0:	0018      	movs	r0, r3
   29cf2:	46bd      	mov	sp, r7
   29cf4:	b008      	add	sp, #32
   29cf6:	bd80      	pop	{r7, pc}
   29cf8:	00038c48 	.word	0x00038c48

00029cfc <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   29cfc:	b580      	push	{r7, lr}
   29cfe:	b088      	sub	sp, #32
   29d00:	af00      	add	r7, sp, #0
   29d02:	60b9      	str	r1, [r7, #8]
   29d04:	607a      	str	r2, [r7, #4]
   29d06:	230f      	movs	r3, #15
   29d08:	18fb      	adds	r3, r7, r3
   29d0a:	1c02      	adds	r2, r0, #0
   29d0c:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   29d0e:	230f      	movs	r3, #15
   29d10:	18fb      	adds	r3, r7, r3
   29d12:	781a      	ldrb	r2, [r3, #0]
   29d14:	2317      	movs	r3, #23
   29d16:	18fb      	adds	r3, r7, r3
   29d18:	491d      	ldr	r1, [pc, #116]	; (29d90 <_tcc_build_waves+0x94>)
   29d1a:	5c8a      	ldrb	r2, [r1, r2]
   29d1c:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   29d1e:	68bb      	ldr	r3, [r7, #8]
   29d20:	3310      	adds	r3, #16
   29d22:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   29d24:	693b      	ldr	r3, [r7, #16]
   29d26:	7a5b      	ldrb	r3, [r3, #9]
   29d28:	011b      	lsls	r3, r3, #4
   29d2a:	001a      	movs	r2, r3
   29d2c:	2330      	movs	r3, #48	; 0x30
   29d2e:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   29d30:	693b      	ldr	r3, [r7, #16]
   29d32:	7a1b      	ldrb	r3, [r3, #8]
   29d34:	0019      	movs	r1, r3
   29d36:	2307      	movs	r3, #7
   29d38:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   29d3a:	4313      	orrs	r3, r2
   29d3c:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   29d3e:	2300      	movs	r3, #0
   29d40:	61fb      	str	r3, [r7, #28]
   29d42:	e01a      	b.n	29d7a <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   29d44:	693a      	ldr	r2, [r7, #16]
   29d46:	69fb      	ldr	r3, [r7, #28]
   29d48:	18d3      	adds	r3, r2, r3
   29d4a:	3304      	adds	r3, #4
   29d4c:	781b      	ldrb	r3, [r3, #0]
   29d4e:	2b00      	cmp	r3, #0
   29d50:	d010      	beq.n	29d74 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   29d52:	2317      	movs	r3, #23
   29d54:	18fb      	adds	r3, r7, r3
   29d56:	781a      	ldrb	r2, [r3, #0]
   29d58:	69fb      	ldr	r3, [r7, #28]
   29d5a:	429a      	cmp	r2, r3
   29d5c:	dc01      	bgt.n	29d62 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   29d5e:	2317      	movs	r3, #23
   29d60:	e012      	b.n	29d88 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   29d62:	2380      	movs	r3, #128	; 0x80
   29d64:	025a      	lsls	r2, r3, #9
   29d66:	69fb      	ldr	r3, [r7, #28]
   29d68:	409a      	lsls	r2, r3
   29d6a:	0013      	movs	r3, r2
   29d6c:	001a      	movs	r2, r3
   29d6e:	69bb      	ldr	r3, [r7, #24]
   29d70:	4313      	orrs	r3, r2
   29d72:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   29d74:	69fb      	ldr	r3, [r7, #28]
   29d76:	3301      	adds	r3, #1
   29d78:	61fb      	str	r3, [r7, #28]
   29d7a:	69fb      	ldr	r3, [r7, #28]
   29d7c:	2b03      	cmp	r3, #3
   29d7e:	dde1      	ble.n	29d44 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   29d80:	687b      	ldr	r3, [r7, #4]
   29d82:	69ba      	ldr	r2, [r7, #24]
   29d84:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   29d86:	2300      	movs	r3, #0
}
   29d88:	0018      	movs	r0, r3
   29d8a:	46bd      	mov	sp, r7
   29d8c:	b008      	add	sp, #32
   29d8e:	bd80      	pop	{r7, pc}
   29d90:	00038c44 	.word	0x00038c44

00029d94 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   29d94:	b590      	push	{r4, r7, lr}
   29d96:	b091      	sub	sp, #68	; 0x44
   29d98:	af00      	add	r7, sp, #0
   29d9a:	60f8      	str	r0, [r7, #12]
   29d9c:	60b9      	str	r1, [r7, #8]
   29d9e:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   29da0:	233b      	movs	r3, #59	; 0x3b
   29da2:	18fc      	adds	r4, r7, r3
   29da4:	68bb      	ldr	r3, [r7, #8]
   29da6:	0018      	movs	r0, r3
   29da8:	4bc4      	ldr	r3, [pc, #784]	; (2a0bc <tcc_init+0x328>)
   29daa:	4798      	blx	r3
   29dac:	0003      	movs	r3, r0
   29dae:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   29db0:	233b      	movs	r3, #59	; 0x3b
   29db2:	18fb      	adds	r3, r7, r3
   29db4:	781a      	ldrb	r2, [r3, #0]
   29db6:	4bc2      	ldr	r3, [pc, #776]	; (2a0c0 <tcc_init+0x32c>)
   29db8:	0092      	lsls	r2, r2, #2
   29dba:	58d3      	ldr	r3, [r2, r3]
   29dbc:	0019      	movs	r1, r3
   29dbe:	2002      	movs	r0, #2
   29dc0:	4bc0      	ldr	r3, [pc, #768]	; (2a0c4 <tcc_init+0x330>)
   29dc2:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   29dc4:	68bb      	ldr	r3, [r7, #8]
   29dc6:	681b      	ldr	r3, [r3, #0]
   29dc8:	2202      	movs	r2, #2
   29dca:	4013      	ands	r3, r2
   29dcc:	d001      	beq.n	29dd2 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   29dce:	231c      	movs	r3, #28
   29dd0:	e1be      	b.n	2a150 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   29dd2:	68bb      	ldr	r3, [r7, #8]
   29dd4:	681b      	ldr	r3, [r3, #0]
   29dd6:	2201      	movs	r2, #1
   29dd8:	4013      	ands	r3, r2
   29dda:	d001      	beq.n	29de0 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   29ddc:	231c      	movs	r3, #28
   29dde:	e1b7      	b.n	2a150 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   29de0:	233b      	movs	r3, #59	; 0x3b
   29de2:	18fb      	adds	r3, r7, r3
   29de4:	781a      	ldrb	r2, [r3, #0]
   29de6:	4bb8      	ldr	r3, [pc, #736]	; (2a0c8 <tcc_init+0x334>)
   29de8:	0092      	lsls	r2, r2, #2
   29dea:	58d3      	ldr	r3, [r2, r3]
   29dec:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   29dee:	687b      	ldr	r3, [r7, #4]
   29df0:	681a      	ldr	r2, [r3, #0]
   29df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29df4:	429a      	cmp	r2, r3
   29df6:	d804      	bhi.n	29e02 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   29df8:	687b      	ldr	r3, [r7, #4]
   29dfa:	685a      	ldr	r2, [r3, #4]
   29dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29dfe:	429a      	cmp	r2, r3
   29e00:	d901      	bls.n	29e06 <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   29e02:	2317      	movs	r3, #23
   29e04:	e1a4      	b.n	2a150 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   29e06:	2300      	movs	r3, #0
   29e08:	63fb      	str	r3, [r7, #60]	; 0x3c
   29e0a:	e00e      	b.n	29e2a <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   29e0c:	687a      	ldr	r2, [r7, #4]
   29e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29e10:	3306      	adds	r3, #6
   29e12:	009b      	lsls	r3, r3, #2
   29e14:	18d3      	adds	r3, r2, r3
   29e16:	3304      	adds	r3, #4
   29e18:	681a      	ldr	r2, [r3, #0]
   29e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29e1c:	429a      	cmp	r2, r3
   29e1e:	d901      	bls.n	29e24 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   29e20:	2317      	movs	r3, #23
   29e22:	e195      	b.n	2a150 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   29e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29e26:	3301      	adds	r3, #1
   29e28:	63fb      	str	r3, [r7, #60]	; 0x3c
   29e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29e2c:	2b03      	cmp	r3, #3
   29e2e:	dded      	ble.n	29e0c <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   29e30:	2300      	movs	r3, #0
   29e32:	63fb      	str	r3, [r7, #60]	; 0x3c
   29e34:	e019      	b.n	29e6a <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   29e36:	687a      	ldr	r2, [r7, #4]
   29e38:	2198      	movs	r1, #152	; 0x98
   29e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29e3c:	18d3      	adds	r3, r2, r3
   29e3e:	185b      	adds	r3, r3, r1
   29e40:	781b      	ldrb	r3, [r3, #0]
   29e42:	2201      	movs	r2, #1
   29e44:	4053      	eors	r3, r2
   29e46:	b2db      	uxtb	r3, r3
   29e48:	2b00      	cmp	r3, #0
   29e4a:	d10a      	bne.n	29e62 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   29e4c:	233b      	movs	r3, #59	; 0x3b
   29e4e:	18fb      	adds	r3, r7, r3
   29e50:	781b      	ldrb	r3, [r3, #0]
   29e52:	4a9e      	ldr	r2, [pc, #632]	; (2a0cc <tcc_init+0x338>)
   29e54:	5cd3      	ldrb	r3, [r2, r3]
   29e56:	001a      	movs	r2, r3
   29e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29e5a:	429a      	cmp	r2, r3
   29e5c:	dc02      	bgt.n	29e64 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   29e5e:	2317      	movs	r3, #23
   29e60:	e176      	b.n	2a150 <tcc_init+0x3bc>
			continue;
   29e62:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   29e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29e66:	3301      	adds	r3, #1
   29e68:	63fb      	str	r3, [r7, #60]	; 0x3c
   29e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29e6c:	2b07      	cmp	r3, #7
   29e6e:	dde2      	ble.n	29e36 <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   29e70:	2300      	movs	r3, #0
   29e72:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   29e74:	2333      	movs	r3, #51	; 0x33
   29e76:	18fc      	adds	r4, r7, r3
   29e78:	232c      	movs	r3, #44	; 0x2c
   29e7a:	18fa      	adds	r2, r7, r3
   29e7c:	6879      	ldr	r1, [r7, #4]
   29e7e:	233b      	movs	r3, #59	; 0x3b
   29e80:	18fb      	adds	r3, r7, r3
   29e82:	781b      	ldrb	r3, [r3, #0]
   29e84:	0018      	movs	r0, r3
   29e86:	4b92      	ldr	r3, [pc, #584]	; (2a0d0 <tcc_init+0x33c>)
   29e88:	4798      	blx	r3
   29e8a:	0003      	movs	r3, r0
   29e8c:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   29e8e:	2333      	movs	r3, #51	; 0x33
   29e90:	18fb      	adds	r3, r7, r3
   29e92:	781b      	ldrb	r3, [r3, #0]
   29e94:	2b00      	cmp	r3, #0
   29e96:	d003      	beq.n	29ea0 <tcc_init+0x10c>
		return status;
   29e98:	2333      	movs	r3, #51	; 0x33
   29e9a:	18fb      	adds	r3, r7, r3
   29e9c:	781b      	ldrb	r3, [r3, #0]
   29e9e:	e157      	b.n	2a150 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   29ea0:	232b      	movs	r3, #43	; 0x2b
   29ea2:	18fa      	adds	r2, r7, r3
   29ea4:	6879      	ldr	r1, [r7, #4]
   29ea6:	233b      	movs	r3, #59	; 0x3b
   29ea8:	18fb      	adds	r3, r7, r3
   29eaa:	781b      	ldrb	r3, [r3, #0]
   29eac:	0018      	movs	r0, r3
   29eae:	4b89      	ldr	r3, [pc, #548]	; (2a0d4 <tcc_init+0x340>)
   29eb0:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   29eb2:	2333      	movs	r3, #51	; 0x33
   29eb4:	18fc      	adds	r4, r7, r3
   29eb6:	2320      	movs	r3, #32
   29eb8:	18fa      	adds	r2, r7, r3
   29eba:	6879      	ldr	r1, [r7, #4]
   29ebc:	233b      	movs	r3, #59	; 0x3b
   29ebe:	18fb      	adds	r3, r7, r3
   29ec0:	781b      	ldrb	r3, [r3, #0]
   29ec2:	0018      	movs	r0, r3
   29ec4:	4b84      	ldr	r3, [pc, #528]	; (2a0d8 <tcc_init+0x344>)
   29ec6:	4798      	blx	r3
   29ec8:	0003      	movs	r3, r0
   29eca:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   29ecc:	2333      	movs	r3, #51	; 0x33
   29ece:	18fb      	adds	r3, r7, r3
   29ed0:	781b      	ldrb	r3, [r3, #0]
   29ed2:	2b00      	cmp	r3, #0
   29ed4:	d003      	beq.n	29ede <tcc_init+0x14a>
		return status;
   29ed6:	2333      	movs	r3, #51	; 0x33
   29ed8:	18fb      	adds	r3, r7, r3
   29eda:	781b      	ldrb	r3, [r3, #0]
   29edc:	e138      	b.n	2a150 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   29ede:	2300      	movs	r3, #0
   29ee0:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   29ee2:	2333      	movs	r3, #51	; 0x33
   29ee4:	18fc      	adds	r4, r7, r3
   29ee6:	231c      	movs	r3, #28
   29ee8:	18fa      	adds	r2, r7, r3
   29eea:	6879      	ldr	r1, [r7, #4]
   29eec:	233b      	movs	r3, #59	; 0x3b
   29eee:	18fb      	adds	r3, r7, r3
   29ef0:	781b      	ldrb	r3, [r3, #0]
   29ef2:	0018      	movs	r0, r3
   29ef4:	4b79      	ldr	r3, [pc, #484]	; (2a0dc <tcc_init+0x348>)
   29ef6:	4798      	blx	r3
   29ef8:	0003      	movs	r3, r0
   29efa:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   29efc:	2333      	movs	r3, #51	; 0x33
   29efe:	18fb      	adds	r3, r7, r3
   29f00:	781b      	ldrb	r3, [r3, #0]
   29f02:	2b00      	cmp	r3, #0
   29f04:	d003      	beq.n	29f0e <tcc_init+0x17a>
		return status;
   29f06:	2333      	movs	r3, #51	; 0x33
   29f08:	18fb      	adds	r3, r7, r3
   29f0a:	781b      	ldrb	r3, [r3, #0]
   29f0c:	e120      	b.n	2a150 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   29f0e:	2333      	movs	r3, #51	; 0x33
   29f10:	18fc      	adds	r4, r7, r3
   29f12:	2318      	movs	r3, #24
   29f14:	18fa      	adds	r2, r7, r3
   29f16:	6879      	ldr	r1, [r7, #4]
   29f18:	233b      	movs	r3, #59	; 0x3b
   29f1a:	18fb      	adds	r3, r7, r3
   29f1c:	781b      	ldrb	r3, [r3, #0]
   29f1e:	0018      	movs	r0, r3
   29f20:	4b6f      	ldr	r3, [pc, #444]	; (2a0e0 <tcc_init+0x34c>)
   29f22:	4798      	blx	r3
   29f24:	0003      	movs	r3, r0
   29f26:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   29f28:	2333      	movs	r3, #51	; 0x33
   29f2a:	18fb      	adds	r3, r7, r3
   29f2c:	781b      	ldrb	r3, [r3, #0]
   29f2e:	2b00      	cmp	r3, #0
   29f30:	d003      	beq.n	29f3a <tcc_init+0x1a6>
		return status;
   29f32:	2333      	movs	r3, #51	; 0x33
   29f34:	18fb      	adds	r3, r7, r3
   29f36:	781b      	ldrb	r3, [r3, #0]
   29f38:	e10a      	b.n	2a150 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   29f3a:	2300      	movs	r3, #0
   29f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   29f3e:	e009      	b.n	29f54 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   29f40:	68fa      	ldr	r2, [r7, #12]
   29f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29f44:	009b      	lsls	r3, r3, #2
   29f46:	18d3      	adds	r3, r2, r3
   29f48:	3304      	adds	r3, #4
   29f4a:	2200      	movs	r2, #0
   29f4c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   29f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29f50:	3301      	adds	r3, #1
   29f52:	63fb      	str	r3, [r7, #60]	; 0x3c
   29f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29f56:	2b0b      	cmp	r3, #11
   29f58:	ddf2      	ble.n	29f40 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   29f5a:	68fb      	ldr	r3, [r7, #12]
   29f5c:	2200      	movs	r2, #0
   29f5e:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   29f60:	68fb      	ldr	r3, [r7, #12]
   29f62:	2200      	movs	r2, #0
   29f64:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   29f66:	233b      	movs	r3, #59	; 0x3b
   29f68:	18fb      	adds	r3, r7, r3
   29f6a:	781a      	ldrb	r2, [r3, #0]
   29f6c:	4b5d      	ldr	r3, [pc, #372]	; (2a0e4 <tcc_init+0x350>)
   29f6e:	0092      	lsls	r2, r2, #2
   29f70:	68f9      	ldr	r1, [r7, #12]
   29f72:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   29f74:	68fb      	ldr	r3, [r7, #12]
   29f76:	68ba      	ldr	r2, [r7, #8]
   29f78:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   29f7a:	687b      	ldr	r3, [r7, #4]
   29f7c:	22a0      	movs	r2, #160	; 0xa0
   29f7e:	5c99      	ldrb	r1, [r3, r2]
   29f80:	68fb      	ldr	r3, [r7, #12]
   29f82:	223c      	movs	r2, #60	; 0x3c
   29f84:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   29f86:	2314      	movs	r3, #20
   29f88:	18fb      	adds	r3, r7, r3
   29f8a:	0018      	movs	r0, r3
   29f8c:	4b56      	ldr	r3, [pc, #344]	; (2a0e8 <tcc_init+0x354>)
   29f8e:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   29f90:	687b      	ldr	r3, [r7, #4]
   29f92:	7a9a      	ldrb	r2, [r3, #10]
   29f94:	2314      	movs	r3, #20
   29f96:	18fb      	adds	r3, r7, r3
   29f98:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   29f9a:	233b      	movs	r3, #59	; 0x3b
   29f9c:	18fb      	adds	r3, r7, r3
   29f9e:	781b      	ldrb	r3, [r3, #0]
   29fa0:	4a52      	ldr	r2, [pc, #328]	; (2a0ec <tcc_init+0x358>)
   29fa2:	5cd3      	ldrb	r3, [r2, r3]
   29fa4:	2214      	movs	r2, #20
   29fa6:	18ba      	adds	r2, r7, r2
   29fa8:	0011      	movs	r1, r2
   29faa:	0018      	movs	r0, r3
   29fac:	4b50      	ldr	r3, [pc, #320]	; (2a0f0 <tcc_init+0x35c>)
   29fae:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   29fb0:	233b      	movs	r3, #59	; 0x3b
   29fb2:	18fb      	adds	r3, r7, r3
   29fb4:	781b      	ldrb	r3, [r3, #0]
   29fb6:	4a4d      	ldr	r2, [pc, #308]	; (2a0ec <tcc_init+0x358>)
   29fb8:	5cd3      	ldrb	r3, [r2, r3]
   29fba:	0018      	movs	r0, r3
   29fbc:	4b4d      	ldr	r3, [pc, #308]	; (2a0f4 <tcc_init+0x360>)
   29fbe:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   29fc0:	2300      	movs	r3, #0
   29fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   29fc4:	e02d      	b.n	2a022 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   29fc6:	687a      	ldr	r2, [r7, #4]
   29fc8:	2198      	movs	r1, #152	; 0x98
   29fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29fcc:	18d3      	adds	r3, r2, r3
   29fce:	185b      	adds	r3, r3, r1
   29fd0:	781b      	ldrb	r3, [r3, #0]
   29fd2:	2201      	movs	r2, #1
   29fd4:	4053      	eors	r3, r2
   29fd6:	b2db      	uxtb	r3, r3
   29fd8:	2b00      	cmp	r3, #0
   29fda:	d11e      	bne.n	2a01a <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   29fdc:	2310      	movs	r3, #16
   29fde:	18fb      	adds	r3, r7, r3
   29fe0:	0018      	movs	r0, r3
   29fe2:	4b45      	ldr	r3, [pc, #276]	; (2a0f8 <tcc_init+0x364>)
   29fe4:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   29fe6:	687b      	ldr	r3, [r7, #4]
   29fe8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   29fea:	321e      	adds	r2, #30
   29fec:	0092      	lsls	r2, r2, #2
   29fee:	58d3      	ldr	r3, [r2, r3]
   29ff0:	b2da      	uxtb	r2, r3
   29ff2:	2310      	movs	r3, #16
   29ff4:	18fb      	adds	r3, r7, r3
   29ff6:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   29ff8:	2310      	movs	r3, #16
   29ffa:	18fb      	adds	r3, r7, r3
   29ffc:	2201      	movs	r2, #1
   29ffe:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2a000:	687b      	ldr	r3, [r7, #4]
   2a002:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a004:	3216      	adds	r2, #22
   2a006:	0092      	lsls	r2, r2, #2
   2a008:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2a00a:	b2db      	uxtb	r3, r3
   2a00c:	2210      	movs	r2, #16
   2a00e:	18ba      	adds	r2, r7, r2
   2a010:	0011      	movs	r1, r2
   2a012:	0018      	movs	r0, r3
   2a014:	4b39      	ldr	r3, [pc, #228]	; (2a0fc <tcc_init+0x368>)
   2a016:	4798      	blx	r3
   2a018:	e000      	b.n	2a01c <tcc_init+0x288>
			continue;
   2a01a:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2a01c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a01e:	3301      	adds	r3, #1
   2a020:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a022:	233b      	movs	r3, #59	; 0x3b
   2a024:	18fb      	adds	r3, r7, r3
   2a026:	781b      	ldrb	r3, [r3, #0]
   2a028:	4a28      	ldr	r2, [pc, #160]	; (2a0cc <tcc_init+0x338>)
   2a02a:	5cd3      	ldrb	r3, [r2, r3]
   2a02c:	001a      	movs	r2, r3
   2a02e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a030:	429a      	cmp	r2, r3
   2a032:	dcc8      	bgt.n	29fc6 <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2a034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2a036:	68bb      	ldr	r3, [r7, #8]
   2a038:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2a03a:	46c0      	nop			; (mov r8, r8)
   2a03c:	68bb      	ldr	r3, [r7, #8]
   2a03e:	689b      	ldr	r3, [r3, #8]
   2a040:	2204      	movs	r2, #4
   2a042:	4013      	ands	r3, r2
   2a044:	d1fa      	bne.n	2a03c <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2a046:	68bb      	ldr	r3, [r7, #8]
   2a048:	22ff      	movs	r2, #255	; 0xff
   2a04a:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2a04c:	46c0      	nop			; (mov r8, r8)
   2a04e:	68bb      	ldr	r3, [r7, #8]
   2a050:	689b      	ldr	r3, [r3, #8]
   2a052:	2204      	movs	r2, #4
   2a054:	4013      	ands	r3, r2
   2a056:	d1fa      	bne.n	2a04e <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2a058:	232b      	movs	r3, #43	; 0x2b
   2a05a:	18fb      	adds	r3, r7, r3
   2a05c:	781a      	ldrb	r2, [r3, #0]
   2a05e:	68bb      	ldr	r3, [r7, #8]
   2a060:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2a062:	2320      	movs	r3, #32
   2a064:	18fb      	adds	r3, r7, r3
   2a066:	681a      	ldr	r2, [r3, #0]
   2a068:	68bb      	ldr	r3, [r7, #8]
   2a06a:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2a06c:	2320      	movs	r3, #32
   2a06e:	18fb      	adds	r3, r7, r3
   2a070:	685a      	ldr	r2, [r3, #4]
   2a072:	68bb      	ldr	r3, [r7, #8]
   2a074:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2a076:	69fa      	ldr	r2, [r7, #28]
   2a078:	68bb      	ldr	r3, [r7, #8]
   2a07a:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2a07c:	46c0      	nop			; (mov r8, r8)
   2a07e:	68bb      	ldr	r3, [r7, #8]
   2a080:	689b      	ldr	r3, [r3, #8]
   2a082:	4a1f      	ldr	r2, [pc, #124]	; (2a100 <tcc_init+0x36c>)
   2a084:	4013      	ands	r3, r2
   2a086:	d1fa      	bne.n	2a07e <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2a088:	69ba      	ldr	r2, [r7, #24]
   2a08a:	68bb      	ldr	r3, [r7, #8]
   2a08c:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2a08e:	46c0      	nop			; (mov r8, r8)
   2a090:	68bb      	ldr	r3, [r7, #8]
   2a092:	689b      	ldr	r3, [r3, #8]
   2a094:	2210      	movs	r2, #16
   2a096:	4013      	ands	r3, r2
   2a098:	d1fa      	bne.n	2a090 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2a09a:	687b      	ldr	r3, [r7, #4]
   2a09c:	681a      	ldr	r2, [r3, #0]
   2a09e:	68bb      	ldr	r3, [r7, #8]
   2a0a0:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2a0a2:	46c0      	nop			; (mov r8, r8)
   2a0a4:	68bb      	ldr	r3, [r7, #8]
   2a0a6:	689b      	ldr	r3, [r3, #8]
   2a0a8:	4a16      	ldr	r2, [pc, #88]	; (2a104 <tcc_init+0x370>)
   2a0aa:	4013      	ands	r3, r2
   2a0ac:	d1fa      	bne.n	2a0a4 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2a0ae:	687b      	ldr	r3, [r7, #4]
   2a0b0:	685a      	ldr	r2, [r3, #4]
   2a0b2:	68bb      	ldr	r3, [r7, #8]
   2a0b4:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2a0b6:	2300      	movs	r3, #0
   2a0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a0ba:	e03f      	b.n	2a13c <tcc_init+0x3a8>
   2a0bc:	000296fd 	.word	0x000296fd
   2a0c0:	00038c2c 	.word	0x00038c2c
   2a0c4:	00029679 	.word	0x00029679
   2a0c8:	00038c38 	.word	0x00038c38
   2a0cc:	00038c48 	.word	0x00038c48
   2a0d0:	00029a09 	.word	0x00029a09
   2a0d4:	00029aad 	.word	0x00029aad
   2a0d8:	00029b09 	.word	0x00029b09
   2a0dc:	00029c25 	.word	0x00029c25
   2a0e0:	00029cfd 	.word	0x00029cfd
   2a0e4:	200059d4 	.word	0x200059d4
   2a0e8:	00029661 	.word	0x00029661
   2a0ec:	00038c28 	.word	0x00038c28
   2a0f0:	00029279 	.word	0x00029279
   2a0f4:	000292bd 	.word	0x000292bd
   2a0f8:	000296d5 	.word	0x000296d5
   2a0fc:	000295d9 	.word	0x000295d9
   2a100:	00020040 	.word	0x00020040
   2a104:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2a108:	46c0      	nop			; (mov r8, r8)
   2a10a:	68bb      	ldr	r3, [r7, #8]
   2a10c:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2a10e:	4912      	ldr	r1, [pc, #72]	; (2a158 <tcc_init+0x3c4>)
   2a110:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a112:	4091      	lsls	r1, r2
   2a114:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2a116:	4013      	ands	r3, r2
   2a118:	d1f7      	bne.n	2a10a <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2a11a:	687a      	ldr	r2, [r7, #4]
   2a11c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a11e:	3306      	adds	r3, #6
   2a120:	009b      	lsls	r3, r3, #2
   2a122:	18d3      	adds	r3, r2, r3
   2a124:	3304      	adds	r3, #4
   2a126:	681a      	ldr	r2, [r3, #0]
   2a128:	68b9      	ldr	r1, [r7, #8]
   2a12a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a12c:	3310      	adds	r3, #16
   2a12e:	009b      	lsls	r3, r3, #2
   2a130:	18cb      	adds	r3, r1, r3
   2a132:	3304      	adds	r3, #4
   2a134:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2a136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a138:	3301      	adds	r3, #1
   2a13a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a13c:	233b      	movs	r3, #59	; 0x3b
   2a13e:	18fb      	adds	r3, r7, r3
   2a140:	781b      	ldrb	r3, [r3, #0]
   2a142:	4a06      	ldr	r2, [pc, #24]	; (2a15c <tcc_init+0x3c8>)
   2a144:	5cd3      	ldrb	r3, [r2, r3]
   2a146:	001a      	movs	r2, r3
   2a148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a14a:	429a      	cmp	r2, r3
   2a14c:	dcdc      	bgt.n	2a108 <tcc_init+0x374>
	}

	return STATUS_OK;
   2a14e:	2300      	movs	r3, #0
}
   2a150:	0018      	movs	r0, r3
   2a152:	46bd      	mov	sp, r7
   2a154:	b011      	add	sp, #68	; 0x44
   2a156:	bd90      	pop	{r4, r7, pc}
   2a158:	00080100 	.word	0x00080100
   2a15c:	00038c44 	.word	0x00038c44

0002a160 <system_interrupt_enable>:
{
   2a160:	b580      	push	{r7, lr}
   2a162:	b082      	sub	sp, #8
   2a164:	af00      	add	r7, sp, #0
   2a166:	0002      	movs	r2, r0
   2a168:	1dfb      	adds	r3, r7, #7
   2a16a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2a16c:	4b06      	ldr	r3, [pc, #24]	; (2a188 <system_interrupt_enable+0x28>)
   2a16e:	1dfa      	adds	r2, r7, #7
   2a170:	7812      	ldrb	r2, [r2, #0]
   2a172:	0011      	movs	r1, r2
   2a174:	221f      	movs	r2, #31
   2a176:	400a      	ands	r2, r1
   2a178:	2101      	movs	r1, #1
   2a17a:	4091      	lsls	r1, r2
   2a17c:	000a      	movs	r2, r1
   2a17e:	601a      	str	r2, [r3, #0]
}
   2a180:	46c0      	nop			; (mov r8, r8)
   2a182:	46bd      	mov	sp, r7
   2a184:	b002      	add	sp, #8
   2a186:	bd80      	pop	{r7, pc}
   2a188:	e000e100 	.word	0xe000e100

0002a18c <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2a18c:	b580      	push	{r7, lr}
   2a18e:	b082      	sub	sp, #8
   2a190:	af00      	add	r7, sp, #0
   2a192:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2a194:	4a04      	ldr	r2, [pc, #16]	; (2a1a8 <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2a196:	687b      	ldr	r3, [r7, #4]
   2a198:	18d3      	adds	r3, r2, r3
   2a19a:	781b      	ldrb	r3, [r3, #0]
   2a19c:	b25b      	sxtb	r3, r3
}
   2a19e:	0018      	movs	r0, r3
   2a1a0:	46bd      	mov	sp, r7
   2a1a2:	b002      	add	sp, #8
   2a1a4:	bd80      	pop	{r7, pc}
   2a1a6:	46c0      	nop			; (mov r8, r8)
   2a1a8:	20000110 	.word	0x20000110

0002a1ac <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2a1ac:	b580      	push	{r7, lr}
   2a1ae:	b084      	sub	sp, #16
   2a1b0:	af00      	add	r7, sp, #0
   2a1b2:	60f8      	str	r0, [r7, #12]
   2a1b4:	60b9      	str	r1, [r7, #8]
   2a1b6:	1dfb      	adds	r3, r7, #7
   2a1b8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2a1ba:	1dfb      	adds	r3, r7, #7
   2a1bc:	781b      	ldrb	r3, [r3, #0]
   2a1be:	68fa      	ldr	r2, [r7, #12]
   2a1c0:	009b      	lsls	r3, r3, #2
   2a1c2:	18d3      	adds	r3, r2, r3
   2a1c4:	3304      	adds	r3, #4
   2a1c6:	68ba      	ldr	r2, [r7, #8]
   2a1c8:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2a1ca:	68fb      	ldr	r3, [r7, #12]
   2a1cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2a1ce:	1dfb      	adds	r3, r7, #7
   2a1d0:	7819      	ldrb	r1, [r3, #0]
   2a1d2:	4b05      	ldr	r3, [pc, #20]	; (2a1e8 <tcc_register_callback+0x3c>)
   2a1d4:	0089      	lsls	r1, r1, #2
   2a1d6:	58cb      	ldr	r3, [r1, r3]
   2a1d8:	431a      	orrs	r2, r3
   2a1da:	68fb      	ldr	r3, [r7, #12]
   2a1dc:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2a1de:	2300      	movs	r3, #0
}
   2a1e0:	0018      	movs	r0, r3
   2a1e2:	46bd      	mov	sp, r7
   2a1e4:	b004      	add	sp, #16
   2a1e6:	bd80      	pop	{r7, pc}
   2a1e8:	00038c4c 	.word	0x00038c4c

0002a1ec <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2a1ec:	b580      	push	{r7, lr}
   2a1ee:	b082      	sub	sp, #8
   2a1f0:	af00      	add	r7, sp, #0
   2a1f2:	6078      	str	r0, [r7, #4]
   2a1f4:	000a      	movs	r2, r1
   2a1f6:	1cfb      	adds	r3, r7, #3
   2a1f8:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2a1fa:	687b      	ldr	r3, [r7, #4]
   2a1fc:	681b      	ldr	r3, [r3, #0]
   2a1fe:	0018      	movs	r0, r3
   2a200:	4b0f      	ldr	r3, [pc, #60]	; (2a240 <tcc_enable_callback+0x54>)
   2a202:	4798      	blx	r3
   2a204:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2a206:	0018      	movs	r0, r3
   2a208:	4b0e      	ldr	r3, [pc, #56]	; (2a244 <tcc_enable_callback+0x58>)
   2a20a:	4798      	blx	r3
   2a20c:	0003      	movs	r3, r0
   2a20e:	0018      	movs	r0, r3
   2a210:	4b0d      	ldr	r3, [pc, #52]	; (2a248 <tcc_enable_callback+0x5c>)
   2a212:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2a214:	687b      	ldr	r3, [r7, #4]
   2a216:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2a218:	1cfb      	adds	r3, r7, #3
   2a21a:	7819      	ldrb	r1, [r3, #0]
   2a21c:	4b0b      	ldr	r3, [pc, #44]	; (2a24c <tcc_enable_callback+0x60>)
   2a21e:	0089      	lsls	r1, r1, #2
   2a220:	58cb      	ldr	r3, [r1, r3]
   2a222:	431a      	orrs	r2, r3
   2a224:	687b      	ldr	r3, [r7, #4]
   2a226:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2a228:	687b      	ldr	r3, [r7, #4]
   2a22a:	681b      	ldr	r3, [r3, #0]
   2a22c:	1cfa      	adds	r2, r7, #3
   2a22e:	7811      	ldrb	r1, [r2, #0]
   2a230:	4a06      	ldr	r2, [pc, #24]	; (2a24c <tcc_enable_callback+0x60>)
   2a232:	0089      	lsls	r1, r1, #2
   2a234:	588a      	ldr	r2, [r1, r2]
   2a236:	629a      	str	r2, [r3, #40]	; 0x28
}
   2a238:	46c0      	nop			; (mov r8, r8)
   2a23a:	46bd      	mov	sp, r7
   2a23c:	b002      	add	sp, #8
   2a23e:	bd80      	pop	{r7, pc}
   2a240:	000296fd 	.word	0x000296fd
   2a244:	0002a18d 	.word	0x0002a18d
   2a248:	0002a161 	.word	0x0002a161
   2a24c:	00038c4c 	.word	0x00038c4c

0002a250 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2a250:	b580      	push	{r7, lr}
   2a252:	af00      	add	r7, sp, #0
   2a254:	2000      	movs	r0, #0
   2a256:	4b02      	ldr	r3, [pc, #8]	; (2a260 <TCC0_Handler+0x10>)
   2a258:	4798      	blx	r3
   2a25a:	46c0      	nop			; (mov r8, r8)
   2a25c:	46bd      	mov	sp, r7
   2a25e:	bd80      	pop	{r7, pc}
   2a260:	0002a28d 	.word	0x0002a28d

0002a264 <TCC1_Handler>:
   2a264:	b580      	push	{r7, lr}
   2a266:	af00      	add	r7, sp, #0
   2a268:	2001      	movs	r0, #1
   2a26a:	4b02      	ldr	r3, [pc, #8]	; (2a274 <TCC1_Handler+0x10>)
   2a26c:	4798      	blx	r3
   2a26e:	46c0      	nop			; (mov r8, r8)
   2a270:	46bd      	mov	sp, r7
   2a272:	bd80      	pop	{r7, pc}
   2a274:	0002a28d 	.word	0x0002a28d

0002a278 <TCC2_Handler>:
   2a278:	b580      	push	{r7, lr}
   2a27a:	af00      	add	r7, sp, #0
   2a27c:	2002      	movs	r0, #2
   2a27e:	4b02      	ldr	r3, [pc, #8]	; (2a288 <TCC2_Handler+0x10>)
   2a280:	4798      	blx	r3
   2a282:	46c0      	nop			; (mov r8, r8)
   2a284:	46bd      	mov	sp, r7
   2a286:	bd80      	pop	{r7, pc}
   2a288:	0002a28d 	.word	0x0002a28d

0002a28c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2a28c:	b580      	push	{r7, lr}
   2a28e:	b086      	sub	sp, #24
   2a290:	af00      	add	r7, sp, #0
   2a292:	0002      	movs	r2, r0
   2a294:	1dfb      	adds	r3, r7, #7
   2a296:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2a298:	1dfb      	adds	r3, r7, #7
   2a29a:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2a29c:	4b18      	ldr	r3, [pc, #96]	; (2a300 <_tcc_interrupt_handler+0x74>)
   2a29e:	0092      	lsls	r2, r2, #2
   2a2a0:	58d3      	ldr	r3, [r2, r3]
   2a2a2:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2a2a4:	693b      	ldr	r3, [r7, #16]
   2a2a6:	681b      	ldr	r3, [r3, #0]
   2a2a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2a2aa:	693b      	ldr	r3, [r7, #16]
   2a2ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2a2ae:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2a2b0:	693b      	ldr	r3, [r7, #16]
   2a2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2a2b4:	4013      	ands	r3, r2
   2a2b6:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a2b8:	2300      	movs	r3, #0
   2a2ba:	617b      	str	r3, [r7, #20]
   2a2bc:	e019      	b.n	2a2f2 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2a2be:	4b11      	ldr	r3, [pc, #68]	; (2a304 <_tcc_interrupt_handler+0x78>)
   2a2c0:	697a      	ldr	r2, [r7, #20]
   2a2c2:	0092      	lsls	r2, r2, #2
   2a2c4:	58d3      	ldr	r3, [r2, r3]
   2a2c6:	68fa      	ldr	r2, [r7, #12]
   2a2c8:	4013      	ands	r3, r2
   2a2ca:	d00f      	beq.n	2a2ec <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2a2cc:	693a      	ldr	r2, [r7, #16]
   2a2ce:	697b      	ldr	r3, [r7, #20]
   2a2d0:	009b      	lsls	r3, r3, #2
   2a2d2:	18d3      	adds	r3, r2, r3
   2a2d4:	3304      	adds	r3, #4
   2a2d6:	681b      	ldr	r3, [r3, #0]
   2a2d8:	693a      	ldr	r2, [r7, #16]
   2a2da:	0010      	movs	r0, r2
   2a2dc:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2a2de:	693b      	ldr	r3, [r7, #16]
   2a2e0:	681b      	ldr	r3, [r3, #0]
   2a2e2:	4a08      	ldr	r2, [pc, #32]	; (2a304 <_tcc_interrupt_handler+0x78>)
   2a2e4:	6979      	ldr	r1, [r7, #20]
   2a2e6:	0089      	lsls	r1, r1, #2
   2a2e8:	588a      	ldr	r2, [r1, r2]
   2a2ea:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a2ec:	697b      	ldr	r3, [r7, #20]
   2a2ee:	3301      	adds	r3, #1
   2a2f0:	617b      	str	r3, [r7, #20]
   2a2f2:	697b      	ldr	r3, [r7, #20]
   2a2f4:	2b0b      	cmp	r3, #11
   2a2f6:	dde2      	ble.n	2a2be <_tcc_interrupt_handler+0x32>
		}
	}
}
   2a2f8:	46c0      	nop			; (mov r8, r8)
   2a2fa:	46bd      	mov	sp, r7
   2a2fc:	b006      	add	sp, #24
   2a2fe:	bd80      	pop	{r7, pc}
   2a300:	200059d4 	.word	0x200059d4
   2a304:	00038c4c 	.word	0x00038c4c

0002a308 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2a308:	b580      	push	{r7, lr}
   2a30a:	b082      	sub	sp, #8
   2a30c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2a30e:	4b2f      	ldr	r3, [pc, #188]	; (2a3cc <Reset_Handler+0xc4>)
   2a310:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2a312:	4b2f      	ldr	r3, [pc, #188]	; (2a3d0 <Reset_Handler+0xc8>)
   2a314:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2a316:	687a      	ldr	r2, [r7, #4]
   2a318:	683b      	ldr	r3, [r7, #0]
   2a31a:	429a      	cmp	r2, r3
   2a31c:	d00c      	beq.n	2a338 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2a31e:	e007      	b.n	2a330 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2a320:	683b      	ldr	r3, [r7, #0]
   2a322:	1d1a      	adds	r2, r3, #4
   2a324:	603a      	str	r2, [r7, #0]
   2a326:	687a      	ldr	r2, [r7, #4]
   2a328:	1d11      	adds	r1, r2, #4
   2a32a:	6079      	str	r1, [r7, #4]
   2a32c:	6812      	ldr	r2, [r2, #0]
   2a32e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2a330:	683a      	ldr	r2, [r7, #0]
   2a332:	4b28      	ldr	r3, [pc, #160]	; (2a3d4 <Reset_Handler+0xcc>)
   2a334:	429a      	cmp	r2, r3
   2a336:	d3f3      	bcc.n	2a320 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2a338:	4b27      	ldr	r3, [pc, #156]	; (2a3d8 <Reset_Handler+0xd0>)
   2a33a:	603b      	str	r3, [r7, #0]
   2a33c:	e004      	b.n	2a348 <Reset_Handler+0x40>
                *pDest++ = 0;
   2a33e:	683b      	ldr	r3, [r7, #0]
   2a340:	1d1a      	adds	r2, r3, #4
   2a342:	603a      	str	r2, [r7, #0]
   2a344:	2200      	movs	r2, #0
   2a346:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2a348:	683a      	ldr	r2, [r7, #0]
   2a34a:	4b24      	ldr	r3, [pc, #144]	; (2a3dc <Reset_Handler+0xd4>)
   2a34c:	429a      	cmp	r2, r3
   2a34e:	d3f6      	bcc.n	2a33e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2a350:	4b23      	ldr	r3, [pc, #140]	; (2a3e0 <Reset_Handler+0xd8>)
   2a352:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2a354:	4b23      	ldr	r3, [pc, #140]	; (2a3e4 <Reset_Handler+0xdc>)
   2a356:	687a      	ldr	r2, [r7, #4]
   2a358:	21ff      	movs	r1, #255	; 0xff
   2a35a:	438a      	bics	r2, r1
   2a35c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2a35e:	4a22      	ldr	r2, [pc, #136]	; (2a3e8 <Reset_Handler+0xe0>)
   2a360:	2390      	movs	r3, #144	; 0x90
   2a362:	005b      	lsls	r3, r3, #1
   2a364:	2102      	movs	r1, #2
   2a366:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2a368:	4a20      	ldr	r2, [pc, #128]	; (2a3ec <Reset_Handler+0xe4>)
   2a36a:	78d3      	ldrb	r3, [r2, #3]
   2a36c:	2103      	movs	r1, #3
   2a36e:	438b      	bics	r3, r1
   2a370:	1c19      	adds	r1, r3, #0
   2a372:	2302      	movs	r3, #2
   2a374:	430b      	orrs	r3, r1
   2a376:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2a378:	4a1c      	ldr	r2, [pc, #112]	; (2a3ec <Reset_Handler+0xe4>)
   2a37a:	78d3      	ldrb	r3, [r2, #3]
   2a37c:	210c      	movs	r1, #12
   2a37e:	438b      	bics	r3, r1
   2a380:	1c19      	adds	r1, r3, #0
   2a382:	2308      	movs	r3, #8
   2a384:	430b      	orrs	r3, r1
   2a386:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2a388:	4a19      	ldr	r2, [pc, #100]	; (2a3f0 <Reset_Handler+0xe8>)
   2a38a:	7b93      	ldrb	r3, [r2, #14]
   2a38c:	2130      	movs	r1, #48	; 0x30
   2a38e:	438b      	bics	r3, r1
   2a390:	1c19      	adds	r1, r3, #0
   2a392:	2320      	movs	r3, #32
   2a394:	430b      	orrs	r3, r1
   2a396:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2a398:	4a15      	ldr	r2, [pc, #84]	; (2a3f0 <Reset_Handler+0xe8>)
   2a39a:	7b93      	ldrb	r3, [r2, #14]
   2a39c:	210c      	movs	r1, #12
   2a39e:	438b      	bics	r3, r1
   2a3a0:	1c19      	adds	r1, r3, #0
   2a3a2:	2308      	movs	r3, #8
   2a3a4:	430b      	orrs	r3, r1
   2a3a6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2a3a8:	4a11      	ldr	r2, [pc, #68]	; (2a3f0 <Reset_Handler+0xe8>)
   2a3aa:	7b93      	ldrb	r3, [r2, #14]
   2a3ac:	2103      	movs	r1, #3
   2a3ae:	438b      	bics	r3, r1
   2a3b0:	1c19      	adds	r1, r3, #0
   2a3b2:	2302      	movs	r3, #2
   2a3b4:	430b      	orrs	r3, r1
   2a3b6:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2a3b8:	4a0e      	ldr	r2, [pc, #56]	; (2a3f4 <Reset_Handler+0xec>)
   2a3ba:	6853      	ldr	r3, [r2, #4]
   2a3bc:	2180      	movs	r1, #128	; 0x80
   2a3be:	430b      	orrs	r3, r1
   2a3c0:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2a3c2:	4b0d      	ldr	r3, [pc, #52]	; (2a3f8 <Reset_Handler+0xf0>)
   2a3c4:	4798      	blx	r3

        /* Branch to main function */
        main();
   2a3c6:	4b0d      	ldr	r3, [pc, #52]	; (2a3fc <Reset_Handler+0xf4>)
   2a3c8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2a3ca:	e7fe      	b.n	2a3ca <Reset_Handler+0xc2>
   2a3cc:	000398d0 	.word	0x000398d0
   2a3d0:	20000000 	.word	0x20000000
   2a3d4:	200002e8 	.word	0x200002e8
   2a3d8:	200002f0 	.word	0x200002f0
   2a3dc:	20005a44 	.word	0x20005a44
   2a3e0:	00012000 	.word	0x00012000
   2a3e4:	e000ed00 	.word	0xe000ed00
   2a3e8:	41007000 	.word	0x41007000
   2a3ec:	41005000 	.word	0x41005000
   2a3f0:	41004800 	.word	0x41004800
   2a3f4:	41004000 	.word	0x41004000
   2a3f8:	00034275 	.word	0x00034275
   2a3fc:	00031c15 	.word	0x00031c15

0002a400 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2a400:	b580      	push	{r7, lr}
   2a402:	af00      	add	r7, sp, #0
  __asm volatile (
   2a404:	2004      	movs	r0, #4
   2a406:	4671      	mov	r1, lr
   2a408:	4208      	tst	r0, r1
   2a40a:	d002      	beq.n	2a412 <_MSP>
   2a40c:	f3ef 8009 	mrs	r0, PSP
   2a410:	e001      	b.n	2a416 <_HALT>

0002a412 <_MSP>:
   2a412:	f3ef 8008 	mrs	r0, MSP

0002a416 <_HALT>:
   2a416:	6941      	ldr	r1, [r0, #20]
   2a418:	e004      	b.n	2a424 <HardFault_HandlerC>
   2a41a:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2a41c:	46c0      	nop			; (mov r8, r8)
   2a41e:	46bd      	mov	sp, r7
   2a420:	bd80      	pop	{r7, pc}
	...

0002a424 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2a424:	b580      	push	{r7, lr}
   2a426:	b090      	sub	sp, #64	; 0x40
   2a428:	af00      	add	r7, sp, #0
   2a42a:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2a42c:	687b      	ldr	r3, [r7, #4]
   2a42e:	681b      	ldr	r3, [r3, #0]
   2a430:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2a432:	687b      	ldr	r3, [r7, #4]
   2a434:	685b      	ldr	r3, [r3, #4]
   2a436:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2a438:	687b      	ldr	r3, [r7, #4]
   2a43a:	689b      	ldr	r3, [r3, #8]
   2a43c:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2a43e:	687b      	ldr	r3, [r7, #4]
   2a440:	68db      	ldr	r3, [r3, #12]
   2a442:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2a444:	687b      	ldr	r3, [r7, #4]
   2a446:	691b      	ldr	r3, [r3, #16]
   2a448:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2a44a:	687b      	ldr	r3, [r7, #4]
   2a44c:	695b      	ldr	r3, [r3, #20]
   2a44e:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2a450:	687b      	ldr	r3, [r7, #4]
   2a452:	699b      	ldr	r3, [r3, #24]
   2a454:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2a456:	687b      	ldr	r3, [r7, #4]
   2a458:	69db      	ldr	r3, [r3, #28]
   2a45a:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2a45c:	4b0b      	ldr	r3, [pc, #44]	; (2a48c <HardFault_HandlerC+0x68>)
   2a45e:	681b      	ldr	r3, [r3, #0]
   2a460:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2a462:	4b0b      	ldr	r3, [pc, #44]	; (2a490 <HardFault_HandlerC+0x6c>)
   2a464:	681b      	ldr	r3, [r3, #0]
   2a466:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2a468:	4b0a      	ldr	r3, [pc, #40]	; (2a494 <HardFault_HandlerC+0x70>)
   2a46a:	681b      	ldr	r3, [r3, #0]
   2a46c:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2a46e:	4b0a      	ldr	r3, [pc, #40]	; (2a498 <HardFault_HandlerC+0x74>)
   2a470:	681b      	ldr	r3, [r3, #0]
   2a472:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2a474:	4b09      	ldr	r3, [pc, #36]	; (2a49c <HardFault_HandlerC+0x78>)
   2a476:	681b      	ldr	r3, [r3, #0]
   2a478:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2a47a:	4b09      	ldr	r3, [pc, #36]	; (2a4a0 <HardFault_HandlerC+0x7c>)
   2a47c:	681b      	ldr	r3, [r3, #0]
   2a47e:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2a480:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2a482:	46c0      	nop			; (mov r8, r8)
   2a484:	46bd      	mov	sp, r7
   2a486:	b010      	add	sp, #64	; 0x40
   2a488:	bd80      	pop	{r7, pc}
   2a48a:	46c0      	nop			; (mov r8, r8)
   2a48c:	e000ed28 	.word	0xe000ed28
   2a490:	e000ed2c 	.word	0xe000ed2c
   2a494:	e000ed30 	.word	0xe000ed30
   2a498:	e000ed3c 	.word	0xe000ed3c
   2a49c:	e000ed34 	.word	0xe000ed34
   2a4a0:	e000ed38 	.word	0xe000ed38

0002a4a4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2a4a4:	b580      	push	{r7, lr}
   2a4a6:	b086      	sub	sp, #24
   2a4a8:	af00      	add	r7, sp, #0
   2a4aa:	60f8      	str	r0, [r7, #12]
   2a4ac:	60b9      	str	r1, [r7, #8]
   2a4ae:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2a4b0:	2300      	movs	r3, #0
   2a4b2:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2a4b4:	68fb      	ldr	r3, [r7, #12]
   2a4b6:	2b00      	cmp	r3, #0
   2a4b8:	d012      	beq.n	2a4e0 <_read+0x3c>
		return -1;
   2a4ba:	2301      	movs	r3, #1
   2a4bc:	425b      	negs	r3, r3
   2a4be:	e013      	b.n	2a4e8 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2a4c0:	4b0b      	ldr	r3, [pc, #44]	; (2a4f0 <_read+0x4c>)
   2a4c2:	681a      	ldr	r2, [r3, #0]
   2a4c4:	4b0b      	ldr	r3, [pc, #44]	; (2a4f4 <_read+0x50>)
   2a4c6:	681b      	ldr	r3, [r3, #0]
   2a4c8:	68b9      	ldr	r1, [r7, #8]
   2a4ca:	0018      	movs	r0, r3
   2a4cc:	4790      	blx	r2
		ptr++;
   2a4ce:	68bb      	ldr	r3, [r7, #8]
   2a4d0:	3301      	adds	r3, #1
   2a4d2:	60bb      	str	r3, [r7, #8]
		nChars++;
   2a4d4:	697b      	ldr	r3, [r7, #20]
   2a4d6:	3301      	adds	r3, #1
   2a4d8:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2a4da:	687b      	ldr	r3, [r7, #4]
   2a4dc:	3b01      	subs	r3, #1
   2a4de:	607b      	str	r3, [r7, #4]
   2a4e0:	687b      	ldr	r3, [r7, #4]
   2a4e2:	2b00      	cmp	r3, #0
   2a4e4:	dcec      	bgt.n	2a4c0 <_read+0x1c>
	}
	return nChars;
   2a4e6:	697b      	ldr	r3, [r7, #20]
}
   2a4e8:	0018      	movs	r0, r3
   2a4ea:	46bd      	mov	sp, r7
   2a4ec:	b006      	add	sp, #24
   2a4ee:	bd80      	pop	{r7, pc}
   2a4f0:	200059e0 	.word	0x200059e0
   2a4f4:	200059e8 	.word	0x200059e8

0002a4f8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2a4f8:	b580      	push	{r7, lr}
   2a4fa:	b086      	sub	sp, #24
   2a4fc:	af00      	add	r7, sp, #0
   2a4fe:	60f8      	str	r0, [r7, #12]
   2a500:	60b9      	str	r1, [r7, #8]
   2a502:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2a504:	2300      	movs	r3, #0
   2a506:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2a508:	68fb      	ldr	r3, [r7, #12]
   2a50a:	2b01      	cmp	r3, #1
   2a50c:	d01d      	beq.n	2a54a <_write+0x52>
   2a50e:	68fb      	ldr	r3, [r7, #12]
   2a510:	2b02      	cmp	r3, #2
   2a512:	d01a      	beq.n	2a54a <_write+0x52>
   2a514:	68fb      	ldr	r3, [r7, #12]
   2a516:	2b03      	cmp	r3, #3
   2a518:	d017      	beq.n	2a54a <_write+0x52>
		return -1;
   2a51a:	2301      	movs	r3, #1
   2a51c:	425b      	negs	r3, r3
   2a51e:	e018      	b.n	2a552 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2a520:	4b0e      	ldr	r3, [pc, #56]	; (2a55c <_write+0x64>)
   2a522:	681a      	ldr	r2, [r3, #0]
   2a524:	4b0e      	ldr	r3, [pc, #56]	; (2a560 <_write+0x68>)
   2a526:	6818      	ldr	r0, [r3, #0]
   2a528:	68bb      	ldr	r3, [r7, #8]
   2a52a:	1c59      	adds	r1, r3, #1
   2a52c:	60b9      	str	r1, [r7, #8]
   2a52e:	781b      	ldrb	r3, [r3, #0]
   2a530:	0019      	movs	r1, r3
   2a532:	4790      	blx	r2
   2a534:	1e03      	subs	r3, r0, #0
   2a536:	da02      	bge.n	2a53e <_write+0x46>
			return -1;
   2a538:	2301      	movs	r3, #1
   2a53a:	425b      	negs	r3, r3
   2a53c:	e009      	b.n	2a552 <_write+0x5a>
		}
		++nChars;
   2a53e:	697b      	ldr	r3, [r7, #20]
   2a540:	3301      	adds	r3, #1
   2a542:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2a544:	687b      	ldr	r3, [r7, #4]
   2a546:	3b01      	subs	r3, #1
   2a548:	607b      	str	r3, [r7, #4]
   2a54a:	687b      	ldr	r3, [r7, #4]
   2a54c:	2b00      	cmp	r3, #0
   2a54e:	d1e7      	bne.n	2a520 <_write+0x28>
	}
	return nChars;
   2a550:	697b      	ldr	r3, [r7, #20]
}
   2a552:	0018      	movs	r0, r3
   2a554:	46bd      	mov	sp, r7
   2a556:	b006      	add	sp, #24
   2a558:	bd80      	pop	{r7, pc}
   2a55a:	46c0      	nop			; (mov r8, r8)
   2a55c:	200059e4 	.word	0x200059e4
   2a560:	200059e8 	.word	0x200059e8

0002a564 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2a564:	b580      	push	{r7, lr}
   2a566:	b084      	sub	sp, #16
   2a568:	af00      	add	r7, sp, #0
   2a56a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2a56c:	4b0a      	ldr	r3, [pc, #40]	; (2a598 <_sbrk+0x34>)
   2a56e:	681b      	ldr	r3, [r3, #0]
   2a570:	2b00      	cmp	r3, #0
   2a572:	d102      	bne.n	2a57a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2a574:	4b08      	ldr	r3, [pc, #32]	; (2a598 <_sbrk+0x34>)
   2a576:	4a09      	ldr	r2, [pc, #36]	; (2a59c <_sbrk+0x38>)
   2a578:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2a57a:	4b07      	ldr	r3, [pc, #28]	; (2a598 <_sbrk+0x34>)
   2a57c:	681b      	ldr	r3, [r3, #0]
   2a57e:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2a580:	4b05      	ldr	r3, [pc, #20]	; (2a598 <_sbrk+0x34>)
   2a582:	681a      	ldr	r2, [r3, #0]
   2a584:	687b      	ldr	r3, [r7, #4]
   2a586:	18d2      	adds	r2, r2, r3
   2a588:	4b03      	ldr	r3, [pc, #12]	; (2a598 <_sbrk+0x34>)
   2a58a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2a58c:	68fb      	ldr	r3, [r7, #12]
}
   2a58e:	0018      	movs	r0, r3
   2a590:	46bd      	mov	sp, r7
   2a592:	b004      	add	sp, #16
   2a594:	bd80      	pop	{r7, pc}
   2a596:	46c0      	nop			; (mov r8, r8)
   2a598:	20004158 	.word	0x20004158
   2a59c:	20007a48 	.word	0x20007a48

0002a5a0 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2a5a0:	b580      	push	{r7, lr}
   2a5a2:	b082      	sub	sp, #8
   2a5a4:	af00      	add	r7, sp, #0
   2a5a6:	6078      	str	r0, [r7, #4]
	return -1;
   2a5a8:	2301      	movs	r3, #1
   2a5aa:	425b      	negs	r3, r3
}
   2a5ac:	0018      	movs	r0, r3
   2a5ae:	46bd      	mov	sp, r7
   2a5b0:	b002      	add	sp, #8
   2a5b2:	bd80      	pop	{r7, pc}

0002a5b4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2a5b4:	b580      	push	{r7, lr}
   2a5b6:	b082      	sub	sp, #8
   2a5b8:	af00      	add	r7, sp, #0
   2a5ba:	6078      	str	r0, [r7, #4]
   2a5bc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2a5be:	683b      	ldr	r3, [r7, #0]
   2a5c0:	2280      	movs	r2, #128	; 0x80
   2a5c2:	0192      	lsls	r2, r2, #6
   2a5c4:	605a      	str	r2, [r3, #4]

	return 0;
   2a5c6:	2300      	movs	r3, #0
}
   2a5c8:	0018      	movs	r0, r3
   2a5ca:	46bd      	mov	sp, r7
   2a5cc:	b002      	add	sp, #8
   2a5ce:	bd80      	pop	{r7, pc}

0002a5d0 <_isatty>:

extern int _isatty(int file)
{
   2a5d0:	b580      	push	{r7, lr}
   2a5d2:	b082      	sub	sp, #8
   2a5d4:	af00      	add	r7, sp, #0
   2a5d6:	6078      	str	r0, [r7, #4]
	return 1;
   2a5d8:	2301      	movs	r3, #1
}
   2a5da:	0018      	movs	r0, r3
   2a5dc:	46bd      	mov	sp, r7
   2a5de:	b002      	add	sp, #8
   2a5e0:	bd80      	pop	{r7, pc}

0002a5e2 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2a5e2:	b580      	push	{r7, lr}
   2a5e4:	b084      	sub	sp, #16
   2a5e6:	af00      	add	r7, sp, #0
   2a5e8:	60f8      	str	r0, [r7, #12]
   2a5ea:	60b9      	str	r1, [r7, #8]
   2a5ec:	607a      	str	r2, [r7, #4]
	return 0;
   2a5ee:	2300      	movs	r3, #0
}
   2a5f0:	0018      	movs	r0, r3
   2a5f2:	46bd      	mov	sp, r7
   2a5f4:	b004      	add	sp, #16
   2a5f6:	bd80      	pop	{r7, pc}

0002a5f8 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2a5f8:	b580      	push	{r7, lr}
   2a5fa:	b082      	sub	sp, #8
   2a5fc:	af00      	add	r7, sp, #0
   2a5fe:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2a600:	687b      	ldr	r3, [r7, #4]
   2a602:	2200      	movs	r2, #0
   2a604:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2a606:	687b      	ldr	r3, [r7, #4]
   2a608:	2200      	movs	r2, #0
   2a60a:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2a60c:	687b      	ldr	r3, [r7, #4]
   2a60e:	2200      	movs	r2, #0
   2a610:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2a612:	687b      	ldr	r3, [r7, #4]
   2a614:	2200      	movs	r2, #0
   2a616:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2a618:	687b      	ldr	r3, [r7, #4]
   2a61a:	2201      	movs	r2, #1
   2a61c:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2a61e:	687b      	ldr	r3, [r7, #4]
   2a620:	2201      	movs	r2, #1
   2a622:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2a624:	687b      	ldr	r3, [r7, #4]
   2a626:	22fa      	movs	r2, #250	; 0xfa
   2a628:	00d2      	lsls	r2, r2, #3
   2a62a:	80da      	strh	r2, [r3, #6]
}
   2a62c:	46c0      	nop			; (mov r8, r8)
   2a62e:	46bd      	mov	sp, r7
   2a630:	b002      	add	sp, #8
   2a632:	bd80      	pop	{r7, pc}

0002a634 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2a634:	b580      	push	{r7, lr}
   2a636:	b086      	sub	sp, #24
   2a638:	af00      	add	r7, sp, #0
   2a63a:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2a63c:	230c      	movs	r3, #12
   2a63e:	18fb      	adds	r3, r7, r3
   2a640:	0018      	movs	r0, r3
   2a642:	4b23      	ldr	r3, [pc, #140]	; (2a6d0 <rtc_calendar_get_config_defaults+0x9c>)
   2a644:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2a646:	687b      	ldr	r3, [r7, #4]
   2a648:	22a0      	movs	r2, #160	; 0xa0
   2a64a:	0112      	lsls	r2, r2, #4
   2a64c:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2a64e:	687b      	ldr	r3, [r7, #4]
   2a650:	2200      	movs	r2, #0
   2a652:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2a654:	687b      	ldr	r3, [r7, #4]
   2a656:	2200      	movs	r2, #0
   2a658:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2a65a:	687b      	ldr	r3, [r7, #4]
   2a65c:	2200      	movs	r2, #0
   2a65e:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2a660:	687b      	ldr	r3, [r7, #4]
   2a662:	22fa      	movs	r2, #250	; 0xfa
   2a664:	00d2      	lsls	r2, r2, #3
   2a666:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2a668:	2317      	movs	r3, #23
   2a66a:	18fb      	adds	r3, r7, r3
   2a66c:	2200      	movs	r2, #0
   2a66e:	701a      	strb	r2, [r3, #0]
   2a670:	e025      	b.n	2a6be <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2a672:	2317      	movs	r3, #23
   2a674:	18fb      	adds	r3, r7, r3
   2a676:	781a      	ldrb	r2, [r3, #0]
   2a678:	6879      	ldr	r1, [r7, #4]
   2a67a:	2008      	movs	r0, #8
   2a67c:	0013      	movs	r3, r2
   2a67e:	009b      	lsls	r3, r3, #2
   2a680:	189b      	adds	r3, r3, r2
   2a682:	005b      	lsls	r3, r3, #1
   2a684:	18cb      	adds	r3, r1, r3
   2a686:	181a      	adds	r2, r3, r0
   2a688:	230c      	movs	r3, #12
   2a68a:	18fb      	adds	r3, r7, r3
   2a68c:	0010      	movs	r0, r2
   2a68e:	0019      	movs	r1, r3
   2a690:	2308      	movs	r3, #8
   2a692:	001a      	movs	r2, r3
   2a694:	4b0f      	ldr	r3, [pc, #60]	; (2a6d4 <rtc_calendar_get_config_defaults+0xa0>)
   2a696:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2a698:	2317      	movs	r3, #23
   2a69a:	18fb      	adds	r3, r7, r3
   2a69c:	781a      	ldrb	r2, [r3, #0]
   2a69e:	6879      	ldr	r1, [r7, #4]
   2a6a0:	0013      	movs	r3, r2
   2a6a2:	009b      	lsls	r3, r3, #2
   2a6a4:	189b      	adds	r3, r3, r2
   2a6a6:	005b      	lsls	r3, r3, #1
   2a6a8:	18cb      	adds	r3, r1, r3
   2a6aa:	3310      	adds	r3, #16
   2a6ac:	2206      	movs	r2, #6
   2a6ae:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2a6b0:	2317      	movs	r3, #23
   2a6b2:	18fb      	adds	r3, r7, r3
   2a6b4:	781a      	ldrb	r2, [r3, #0]
   2a6b6:	2317      	movs	r3, #23
   2a6b8:	18fb      	adds	r3, r7, r3
   2a6ba:	3201      	adds	r2, #1
   2a6bc:	701a      	strb	r2, [r3, #0]
   2a6be:	2317      	movs	r3, #23
   2a6c0:	18fb      	adds	r3, r7, r3
   2a6c2:	781b      	ldrb	r3, [r3, #0]
   2a6c4:	2b00      	cmp	r3, #0
   2a6c6:	d0d4      	beq.n	2a672 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2a6c8:	46c0      	nop			; (mov r8, r8)
   2a6ca:	46bd      	mov	sp, r7
   2a6cc:	b006      	add	sp, #24
   2a6ce:	bd80      	pop	{r7, pc}
   2a6d0:	0002a5f9 	.word	0x0002a5f9
   2a6d4:	000342e5 	.word	0x000342e5

0002a6d8 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2a6d8:	b580      	push	{r7, lr}
   2a6da:	b088      	sub	sp, #32
   2a6dc:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2a6de:	230c      	movs	r3, #12
   2a6e0:	18fb      	adds	r3, r7, r3
   2a6e2:	0018      	movs	r0, r3
   2a6e4:	4b1a      	ldr	r3, [pc, #104]	; (2a750 <configure_rtc_calendar+0x78>)
   2a6e6:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2a6e8:	1d3b      	adds	r3, r7, #4
   2a6ea:	0018      	movs	r0, r3
   2a6ec:	4b19      	ldr	r3, [pc, #100]	; (2a754 <configure_rtc_calendar+0x7c>)
   2a6ee:	4798      	blx	r3
	init_time.year   = 2014;
   2a6f0:	1d3b      	adds	r3, r7, #4
   2a6f2:	4a19      	ldr	r2, [pc, #100]	; (2a758 <configure_rtc_calendar+0x80>)
   2a6f4:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2a6f6:	1d3b      	adds	r3, r7, #4
   2a6f8:	2201      	movs	r2, #1
   2a6fa:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2a6fc:	1d3b      	adds	r3, r7, #4
   2a6fe:	2201      	movs	r2, #1
   2a700:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2a702:	1d3b      	adds	r3, r7, #4
   2a704:	2200      	movs	r2, #0
   2a706:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2a708:	1d3b      	adds	r3, r7, #4
   2a70a:	2200      	movs	r2, #0
   2a70c:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2a70e:	1d3b      	adds	r3, r7, #4
   2a710:	2204      	movs	r2, #4
   2a712:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2a714:	230c      	movs	r3, #12
   2a716:	18fb      	adds	r3, r7, r3
   2a718:	2201      	movs	r2, #1
   2a71a:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2a71c:	230c      	movs	r3, #12
   2a71e:	18fb      	adds	r3, r7, r3
   2a720:	1d3a      	adds	r2, r7, #4
   2a722:	3308      	adds	r3, #8
   2a724:	ca03      	ldmia	r2!, {r0, r1}
   2a726:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2a728:	230c      	movs	r3, #12
   2a72a:	18fb      	adds	r3, r7, r3
   2a72c:	2206      	movs	r2, #6
   2a72e:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2a730:	230c      	movs	r3, #12
   2a732:	18fa      	adds	r2, r7, r3
   2a734:	4909      	ldr	r1, [pc, #36]	; (2a75c <configure_rtc_calendar+0x84>)
   2a736:	4b0a      	ldr	r3, [pc, #40]	; (2a760 <configure_rtc_calendar+0x88>)
   2a738:	0018      	movs	r0, r3
   2a73a:	4b0a      	ldr	r3, [pc, #40]	; (2a764 <configure_rtc_calendar+0x8c>)
   2a73c:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2a73e:	4b08      	ldr	r3, [pc, #32]	; (2a760 <configure_rtc_calendar+0x88>)
   2a740:	0018      	movs	r0, r3
   2a742:	4b09      	ldr	r3, [pc, #36]	; (2a768 <configure_rtc_calendar+0x90>)
   2a744:	4798      	blx	r3
}
   2a746:	46c0      	nop			; (mov r8, r8)
   2a748:	46bd      	mov	sp, r7
   2a74a:	b008      	add	sp, #32
   2a74c:	bd80      	pop	{r7, pc}
   2a74e:	46c0      	nop			; (mov r8, r8)
   2a750:	0002a635 	.word	0x0002a635
   2a754:	0002a5f9 	.word	0x0002a5f9
   2a758:	000007de 	.word	0x000007de
   2a75c:	40001400 	.word	0x40001400
   2a760:	200059ec 	.word	0x200059ec
   2a764:	00026215 	.word	0x00026215
   2a768:	00025f41 	.word	0x00025f41

0002a76c <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2a76c:	b590      	push	{r4, r7, lr}
   2a76e:	b085      	sub	sp, #20
   2a770:	af00      	add	r7, sp, #0
   2a772:	0002      	movs	r2, r0
   2a774:	1dfb      	adds	r3, r7, #7
   2a776:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2a778:	4b1a      	ldr	r3, [pc, #104]	; (2a7e4 <disk_initialize+0x78>)
   2a77a:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2a77c:	1dfb      	adds	r3, r7, #7
   2a77e:	781b      	ldrb	r3, [r3, #0]
   2a780:	2b01      	cmp	r3, #1
   2a782:	d901      	bls.n	2a788 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2a784:	2301      	movs	r3, #1
   2a786:	e029      	b.n	2a7dc <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2a788:	2300      	movs	r3, #0
   2a78a:	60fb      	str	r3, [r7, #12]
   2a78c:	e010      	b.n	2a7b0 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2a78e:	230b      	movs	r3, #11
   2a790:	18fc      	adds	r4, r7, r3
   2a792:	1dfb      	adds	r3, r7, #7
   2a794:	781b      	ldrb	r3, [r3, #0]
   2a796:	0018      	movs	r0, r3
   2a798:	4b13      	ldr	r3, [pc, #76]	; (2a7e8 <disk_initialize+0x7c>)
   2a79a:	4798      	blx	r3
   2a79c:	0003      	movs	r3, r0
   2a79e:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2a7a0:	230b      	movs	r3, #11
   2a7a2:	18fb      	adds	r3, r7, r3
   2a7a4:	781b      	ldrb	r3, [r3, #0]
   2a7a6:	2b03      	cmp	r3, #3
   2a7a8:	d106      	bne.n	2a7b8 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2a7aa:	68fb      	ldr	r3, [r7, #12]
   2a7ac:	3301      	adds	r3, #1
   2a7ae:	60fb      	str	r3, [r7, #12]
   2a7b0:	68fb      	ldr	r3, [r7, #12]
   2a7b2:	2b01      	cmp	r3, #1
   2a7b4:	ddeb      	ble.n	2a78e <disk_initialize+0x22>
   2a7b6:	e000      	b.n	2a7ba <disk_initialize+0x4e>
			break;
   2a7b8:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2a7ba:	230b      	movs	r3, #11
   2a7bc:	18fb      	adds	r3, r7, r3
   2a7be:	781b      	ldrb	r3, [r3, #0]
   2a7c0:	2b00      	cmp	r3, #0
   2a7c2:	d001      	beq.n	2a7c8 <disk_initialize+0x5c>
		return STA_NOINIT;
   2a7c4:	2301      	movs	r3, #1
   2a7c6:	e009      	b.n	2a7dc <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2a7c8:	1dfb      	adds	r3, r7, #7
   2a7ca:	781b      	ldrb	r3, [r3, #0]
   2a7cc:	0018      	movs	r0, r3
   2a7ce:	4b07      	ldr	r3, [pc, #28]	; (2a7ec <disk_initialize+0x80>)
   2a7d0:	4798      	blx	r3
   2a7d2:	1e03      	subs	r3, r0, #0
   2a7d4:	d001      	beq.n	2a7da <disk_initialize+0x6e>
		return STA_PROTECT;
   2a7d6:	2304      	movs	r3, #4
   2a7d8:	e000      	b.n	2a7dc <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2a7da:	2300      	movs	r3, #0
}
   2a7dc:	0018      	movs	r0, r3
   2a7de:	46bd      	mov	sp, r7
   2a7e0:	b005      	add	sp, #20
   2a7e2:	bd90      	pop	{r4, r7, pc}
   2a7e4:	0002a6d9 	.word	0x0002a6d9
   2a7e8:	0002543d 	.word	0x0002543d
   2a7ec:	000254f5 	.word	0x000254f5

0002a7f0 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2a7f0:	b580      	push	{r7, lr}
   2a7f2:	b082      	sub	sp, #8
   2a7f4:	af00      	add	r7, sp, #0
   2a7f6:	0002      	movs	r2, r0
   2a7f8:	1dfb      	adds	r3, r7, #7
   2a7fa:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2a7fc:	1dfb      	adds	r3, r7, #7
   2a7fe:	781b      	ldrb	r3, [r3, #0]
   2a800:	0018      	movs	r0, r3
   2a802:	4b08      	ldr	r3, [pc, #32]	; (2a824 <disk_status+0x34>)
   2a804:	4798      	blx	r3
   2a806:	1e03      	subs	r3, r0, #0
   2a808:	d002      	beq.n	2a810 <disk_status+0x20>
   2a80a:	2b02      	cmp	r3, #2
   2a80c:	d002      	beq.n	2a814 <disk_status+0x24>
   2a80e:	e003      	b.n	2a818 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2a810:	2300      	movs	r3, #0
   2a812:	e002      	b.n	2a81a <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2a814:	2303      	movs	r3, #3
   2a816:	e000      	b.n	2a81a <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2a818:	2301      	movs	r3, #1
	}
}
   2a81a:	0018      	movs	r0, r3
   2a81c:	46bd      	mov	sp, r7
   2a81e:	b002      	add	sp, #8
   2a820:	bd80      	pop	{r7, pc}
   2a822:	46c0      	nop			; (mov r8, r8)
   2a824:	0002543d 	.word	0x0002543d

0002a828 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2a828:	b590      	push	{r4, r7, lr}
   2a82a:	b089      	sub	sp, #36	; 0x24
   2a82c:	af00      	add	r7, sp, #0
   2a82e:	60b9      	str	r1, [r7, #8]
   2a830:	607a      	str	r2, [r7, #4]
   2a832:	0019      	movs	r1, r3
   2a834:	230f      	movs	r3, #15
   2a836:	18fb      	adds	r3, r7, r3
   2a838:	1c02      	adds	r2, r0, #0
   2a83a:	701a      	strb	r2, [r3, #0]
   2a83c:	230e      	movs	r3, #14
   2a83e:	18fb      	adds	r3, r7, r3
   2a840:	1c0a      	adds	r2, r1, #0
   2a842:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2a844:	231b      	movs	r3, #27
   2a846:	18fc      	adds	r4, r7, r3
   2a848:	230f      	movs	r3, #15
   2a84a:	18fb      	adds	r3, r7, r3
   2a84c:	781b      	ldrb	r3, [r3, #0]
   2a84e:	0018      	movs	r0, r3
   2a850:	4b28      	ldr	r3, [pc, #160]	; (2a8f4 <disk_read+0xcc>)
   2a852:	4798      	blx	r3
   2a854:	0003      	movs	r3, r0
   2a856:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2a858:	231b      	movs	r3, #27
   2a85a:	18fb      	adds	r3, r7, r3
   2a85c:	781b      	ldrb	r3, [r3, #0]
   2a85e:	2b00      	cmp	r3, #0
   2a860:	d101      	bne.n	2a866 <disk_read+0x3e>
		return RES_ERROR;
   2a862:	2301      	movs	r3, #1
   2a864:	e042      	b.n	2a8ec <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2a866:	2314      	movs	r3, #20
   2a868:	18fa      	adds	r2, r7, r3
   2a86a:	230f      	movs	r3, #15
   2a86c:	18fb      	adds	r3, r7, r3
   2a86e:	781b      	ldrb	r3, [r3, #0]
   2a870:	0011      	movs	r1, r2
   2a872:	0018      	movs	r0, r3
   2a874:	4b20      	ldr	r3, [pc, #128]	; (2a8f8 <disk_read+0xd0>)
   2a876:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2a878:	230e      	movs	r3, #14
   2a87a:	18fb      	adds	r3, r7, r3
   2a87c:	781b      	ldrb	r3, [r3, #0]
   2a87e:	221b      	movs	r2, #27
   2a880:	18ba      	adds	r2, r7, r2
   2a882:	7812      	ldrb	r2, [r2, #0]
   2a884:	4353      	muls	r3, r2
   2a886:	001a      	movs	r2, r3
   2a888:	687b      	ldr	r3, [r7, #4]
   2a88a:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2a88c:	697b      	ldr	r3, [r7, #20]
   2a88e:	3301      	adds	r3, #1
   2a890:	211b      	movs	r1, #27
   2a892:	1879      	adds	r1, r7, r1
   2a894:	7809      	ldrb	r1, [r1, #0]
   2a896:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2a898:	429a      	cmp	r2, r3
   2a89a:	d901      	bls.n	2a8a0 <disk_read+0x78>
		return RES_PARERR;
   2a89c:	2304      	movs	r3, #4
   2a89e:	e025      	b.n	2a8ec <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2a8a0:	2300      	movs	r3, #0
   2a8a2:	61fb      	str	r3, [r7, #28]
   2a8a4:	e01b      	b.n	2a8de <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2a8a6:	231b      	movs	r3, #27
   2a8a8:	18fb      	adds	r3, r7, r3
   2a8aa:	781b      	ldrb	r3, [r3, #0]
   2a8ac:	69fa      	ldr	r2, [r7, #28]
   2a8ae:	435a      	muls	r2, r3
   2a8b0:	687b      	ldr	r3, [r7, #4]
   2a8b2:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2a8b4:	231b      	movs	r3, #27
   2a8b6:	18fb      	adds	r3, r7, r3
   2a8b8:	781b      	ldrb	r3, [r3, #0]
   2a8ba:	69fa      	ldr	r2, [r7, #28]
   2a8bc:	4353      	muls	r3, r2
   2a8be:	025b      	lsls	r3, r3, #9
   2a8c0:	68ba      	ldr	r2, [r7, #8]
   2a8c2:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2a8c4:	230f      	movs	r3, #15
   2a8c6:	18fb      	adds	r3, r7, r3
   2a8c8:	781b      	ldrb	r3, [r3, #0]
   2a8ca:	0018      	movs	r0, r3
   2a8cc:	4b0b      	ldr	r3, [pc, #44]	; (2a8fc <disk_read+0xd4>)
   2a8ce:	4798      	blx	r3
   2a8d0:	1e03      	subs	r3, r0, #0
   2a8d2:	d001      	beq.n	2a8d8 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2a8d4:	2301      	movs	r3, #1
   2a8d6:	e009      	b.n	2a8ec <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2a8d8:	69fb      	ldr	r3, [r7, #28]
   2a8da:	3301      	adds	r3, #1
   2a8dc:	61fb      	str	r3, [r7, #28]
   2a8de:	230e      	movs	r3, #14
   2a8e0:	18fb      	adds	r3, r7, r3
   2a8e2:	781a      	ldrb	r2, [r3, #0]
   2a8e4:	69fb      	ldr	r3, [r7, #28]
   2a8e6:	429a      	cmp	r2, r3
   2a8e8:	d8dd      	bhi.n	2a8a6 <disk_read+0x7e>
		}
	}

	return RES_OK;
   2a8ea:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2a8ec:	0018      	movs	r0, r3
   2a8ee:	46bd      	mov	sp, r7
   2a8f0:	b009      	add	sp, #36	; 0x24
   2a8f2:	bd90      	pop	{r4, r7, pc}
   2a8f4:	000254c9 	.word	0x000254c9
   2a8f8:	0002547d 	.word	0x0002547d
   2a8fc:	0002553d 	.word	0x0002553d

0002a900 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2a900:	b590      	push	{r4, r7, lr}
   2a902:	b089      	sub	sp, #36	; 0x24
   2a904:	af00      	add	r7, sp, #0
   2a906:	60b9      	str	r1, [r7, #8]
   2a908:	607a      	str	r2, [r7, #4]
   2a90a:	0019      	movs	r1, r3
   2a90c:	230f      	movs	r3, #15
   2a90e:	18fb      	adds	r3, r7, r3
   2a910:	1c02      	adds	r2, r0, #0
   2a912:	701a      	strb	r2, [r3, #0]
   2a914:	230e      	movs	r3, #14
   2a916:	18fb      	adds	r3, r7, r3
   2a918:	1c0a      	adds	r2, r1, #0
   2a91a:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2a91c:	231b      	movs	r3, #27
   2a91e:	18fc      	adds	r4, r7, r3
   2a920:	230f      	movs	r3, #15
   2a922:	18fb      	adds	r3, r7, r3
   2a924:	781b      	ldrb	r3, [r3, #0]
   2a926:	0018      	movs	r0, r3
   2a928:	4b28      	ldr	r3, [pc, #160]	; (2a9cc <disk_write+0xcc>)
   2a92a:	4798      	blx	r3
   2a92c:	0003      	movs	r3, r0
   2a92e:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2a930:	231b      	movs	r3, #27
   2a932:	18fb      	adds	r3, r7, r3
   2a934:	781b      	ldrb	r3, [r3, #0]
   2a936:	2b00      	cmp	r3, #0
   2a938:	d101      	bne.n	2a93e <disk_write+0x3e>
		return RES_ERROR;
   2a93a:	2301      	movs	r3, #1
   2a93c:	e042      	b.n	2a9c4 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2a93e:	2314      	movs	r3, #20
   2a940:	18fa      	adds	r2, r7, r3
   2a942:	230f      	movs	r3, #15
   2a944:	18fb      	adds	r3, r7, r3
   2a946:	781b      	ldrb	r3, [r3, #0]
   2a948:	0011      	movs	r1, r2
   2a94a:	0018      	movs	r0, r3
   2a94c:	4b20      	ldr	r3, [pc, #128]	; (2a9d0 <disk_write+0xd0>)
   2a94e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2a950:	230e      	movs	r3, #14
   2a952:	18fb      	adds	r3, r7, r3
   2a954:	781b      	ldrb	r3, [r3, #0]
   2a956:	221b      	movs	r2, #27
   2a958:	18ba      	adds	r2, r7, r2
   2a95a:	7812      	ldrb	r2, [r2, #0]
   2a95c:	4353      	muls	r3, r2
   2a95e:	001a      	movs	r2, r3
   2a960:	687b      	ldr	r3, [r7, #4]
   2a962:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2a964:	697b      	ldr	r3, [r7, #20]
   2a966:	3301      	adds	r3, #1
   2a968:	211b      	movs	r1, #27
   2a96a:	1879      	adds	r1, r7, r1
   2a96c:	7809      	ldrb	r1, [r1, #0]
   2a96e:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2a970:	429a      	cmp	r2, r3
   2a972:	d901      	bls.n	2a978 <disk_write+0x78>
		return RES_PARERR;
   2a974:	2304      	movs	r3, #4
   2a976:	e025      	b.n	2a9c4 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2a978:	2300      	movs	r3, #0
   2a97a:	61fb      	str	r3, [r7, #28]
   2a97c:	e01b      	b.n	2a9b6 <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2a97e:	231b      	movs	r3, #27
   2a980:	18fb      	adds	r3, r7, r3
   2a982:	781b      	ldrb	r3, [r3, #0]
   2a984:	69fa      	ldr	r2, [r7, #28]
   2a986:	435a      	muls	r2, r3
   2a988:	687b      	ldr	r3, [r7, #4]
   2a98a:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2a98c:	231b      	movs	r3, #27
   2a98e:	18fb      	adds	r3, r7, r3
   2a990:	781b      	ldrb	r3, [r3, #0]
   2a992:	69fa      	ldr	r2, [r7, #28]
   2a994:	4353      	muls	r3, r2
   2a996:	025b      	lsls	r3, r3, #9
   2a998:	68ba      	ldr	r2, [r7, #8]
   2a99a:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2a99c:	230f      	movs	r3, #15
   2a99e:	18fb      	adds	r3, r7, r3
   2a9a0:	781b      	ldrb	r3, [r3, #0]
   2a9a2:	0018      	movs	r0, r3
   2a9a4:	4b0b      	ldr	r3, [pc, #44]	; (2a9d4 <disk_write+0xd4>)
   2a9a6:	4798      	blx	r3
   2a9a8:	1e03      	subs	r3, r0, #0
   2a9aa:	d001      	beq.n	2a9b0 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2a9ac:	2301      	movs	r3, #1
   2a9ae:	e009      	b.n	2a9c4 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2a9b0:	69fb      	ldr	r3, [r7, #28]
   2a9b2:	3301      	adds	r3, #1
   2a9b4:	61fb      	str	r3, [r7, #28]
   2a9b6:	230e      	movs	r3, #14
   2a9b8:	18fb      	adds	r3, r7, r3
   2a9ba:	781a      	ldrb	r2, [r3, #0]
   2a9bc:	69fb      	ldr	r3, [r7, #28]
   2a9be:	429a      	cmp	r2, r3
   2a9c0:	d8dd      	bhi.n	2a97e <disk_write+0x7e>
		}
	}

	return RES_OK;
   2a9c2:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2a9c4:	0018      	movs	r0, r3
   2a9c6:	46bd      	mov	sp, r7
   2a9c8:	b009      	add	sp, #36	; 0x24
   2a9ca:	bd90      	pop	{r4, r7, pc}
   2a9cc:	000254c9 	.word	0x000254c9
   2a9d0:	0002547d 	.word	0x0002547d
   2a9d4:	00025591 	.word	0x00025591

0002a9d8 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2a9d8:	b590      	push	{r4, r7, lr}
   2a9da:	b085      	sub	sp, #20
   2a9dc:	af00      	add	r7, sp, #0
   2a9de:	603a      	str	r2, [r7, #0]
   2a9e0:	1dfb      	adds	r3, r7, #7
   2a9e2:	1c02      	adds	r2, r0, #0
   2a9e4:	701a      	strb	r2, [r3, #0]
   2a9e6:	1dbb      	adds	r3, r7, #6
   2a9e8:	1c0a      	adds	r2, r1, #0
   2a9ea:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2a9ec:	230f      	movs	r3, #15
   2a9ee:	18fb      	adds	r3, r7, r3
   2a9f0:	2204      	movs	r2, #4
   2a9f2:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2a9f4:	1dbb      	adds	r3, r7, #6
   2a9f6:	781b      	ldrb	r3, [r3, #0]
   2a9f8:	2b01      	cmp	r3, #1
   2a9fa:	d00f      	beq.n	2aa1c <disk_ioctl+0x44>
   2a9fc:	dc02      	bgt.n	2aa04 <disk_ioctl+0x2c>
   2a9fe:	2b00      	cmp	r3, #0
   2aa00:	d044      	beq.n	2aa8c <disk_ioctl+0xb4>
   2aa02:	e054      	b.n	2aaae <disk_ioctl+0xd6>
   2aa04:	2b02      	cmp	r3, #2
   2aa06:	d01a      	beq.n	2aa3e <disk_ioctl+0x66>
   2aa08:	2b03      	cmp	r3, #3
   2aa0a:	d150      	bne.n	2aaae <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2aa0c:	683b      	ldr	r3, [r7, #0]
   2aa0e:	2201      	movs	r2, #1
   2aa10:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2aa12:	230f      	movs	r3, #15
   2aa14:	18fb      	adds	r3, r7, r3
   2aa16:	2200      	movs	r2, #0
   2aa18:	701a      	strb	r2, [r3, #0]
		break;
   2aa1a:	e04c      	b.n	2aab6 <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2aa1c:	2308      	movs	r3, #8
   2aa1e:	18fa      	adds	r2, r7, r3
   2aa20:	1dfb      	adds	r3, r7, #7
   2aa22:	781b      	ldrb	r3, [r3, #0]
   2aa24:	0011      	movs	r1, r2
   2aa26:	0018      	movs	r0, r3
   2aa28:	4b26      	ldr	r3, [pc, #152]	; (2aac4 <disk_ioctl+0xec>)
   2aa2a:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2aa2c:	68bb      	ldr	r3, [r7, #8]
   2aa2e:	1c5a      	adds	r2, r3, #1
   2aa30:	683b      	ldr	r3, [r7, #0]
   2aa32:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2aa34:	230f      	movs	r3, #15
   2aa36:	18fb      	adds	r3, r7, r3
   2aa38:	2200      	movs	r2, #0
   2aa3a:	701a      	strb	r2, [r3, #0]
	}
	break;
   2aa3c:	e03b      	b.n	2aab6 <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2aa3e:	230e      	movs	r3, #14
   2aa40:	18fc      	adds	r4, r7, r3
   2aa42:	1dfb      	adds	r3, r7, #7
   2aa44:	781b      	ldrb	r3, [r3, #0]
   2aa46:	0018      	movs	r0, r3
   2aa48:	4b1f      	ldr	r3, [pc, #124]	; (2aac8 <disk_ioctl+0xf0>)
   2aa4a:	4798      	blx	r3
   2aa4c:	0003      	movs	r3, r0
   2aa4e:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2aa50:	230e      	movs	r3, #14
   2aa52:	18fb      	adds	r3, r7, r3
   2aa54:	781b      	ldrb	r3, [r3, #0]
   2aa56:	2b01      	cmp	r3, #1
   2aa58:	d010      	beq.n	2aa7c <disk_ioctl+0xa4>
   2aa5a:	230e      	movs	r3, #14
   2aa5c:	18fb      	adds	r3, r7, r3
   2aa5e:	781b      	ldrb	r3, [r3, #0]
   2aa60:	2b02      	cmp	r3, #2
   2aa62:	d00b      	beq.n	2aa7c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2aa64:	230e      	movs	r3, #14
   2aa66:	18fb      	adds	r3, r7, r3
   2aa68:	781b      	ldrb	r3, [r3, #0]
   2aa6a:	2b04      	cmp	r3, #4
   2aa6c:	d006      	beq.n	2aa7c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2aa6e:	230e      	movs	r3, #14
   2aa70:	18fb      	adds	r3, r7, r3
   2aa72:	781b      	ldrb	r3, [r3, #0]
   2aa74:	2b08      	cmp	r3, #8
   2aa76:	d001      	beq.n	2aa7c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2aa78:	2301      	movs	r3, #1
   2aa7a:	e01f      	b.n	2aabc <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2aa7c:	683b      	ldr	r3, [r7, #0]
   2aa7e:	2200      	movs	r2, #0
   2aa80:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2aa82:	230f      	movs	r3, #15
   2aa84:	18fb      	adds	r3, r7, r3
   2aa86:	2200      	movs	r2, #0
   2aa88:	701a      	strb	r2, [r3, #0]
	}
	break;
   2aa8a:	e014      	b.n	2aab6 <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2aa8c:	1dfb      	adds	r3, r7, #7
   2aa8e:	781b      	ldrb	r3, [r3, #0]
   2aa90:	0018      	movs	r0, r3
   2aa92:	4b0e      	ldr	r3, [pc, #56]	; (2aacc <disk_ioctl+0xf4>)
   2aa94:	4798      	blx	r3
   2aa96:	1e03      	subs	r3, r0, #0
   2aa98:	d104      	bne.n	2aaa4 <disk_ioctl+0xcc>
			res = RES_OK;
   2aa9a:	230f      	movs	r3, #15
   2aa9c:	18fb      	adds	r3, r7, r3
   2aa9e:	2200      	movs	r2, #0
   2aaa0:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2aaa2:	e008      	b.n	2aab6 <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2aaa4:	230f      	movs	r3, #15
   2aaa6:	18fb      	adds	r3, r7, r3
   2aaa8:	2203      	movs	r2, #3
   2aaaa:	701a      	strb	r2, [r3, #0]
		break;
   2aaac:	e003      	b.n	2aab6 <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2aaae:	230f      	movs	r3, #15
   2aab0:	18fb      	adds	r3, r7, r3
   2aab2:	2204      	movs	r2, #4
   2aab4:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2aab6:	230f      	movs	r3, #15
   2aab8:	18fb      	adds	r3, r7, r3
   2aaba:	781b      	ldrb	r3, [r3, #0]
}
   2aabc:	0018      	movs	r0, r3
   2aabe:	46bd      	mov	sp, r7
   2aac0:	b005      	add	sp, #20
   2aac2:	bd90      	pop	{r4, r7, pc}
   2aac4:	0002547d 	.word	0x0002547d
   2aac8:	000254c9 	.word	0x000254c9
   2aacc:	0002543d 	.word	0x0002543d

0002aad0 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2aad0:	b580      	push	{r7, lr}
   2aad2:	b084      	sub	sp, #16
   2aad4:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2aad6:	1d3a      	adds	r2, r7, #4
   2aad8:	4b12      	ldr	r3, [pc, #72]	; (2ab24 <get_fattime+0x54>)
   2aada:	0011      	movs	r1, r2
   2aadc:	0018      	movs	r0, r3
   2aade:	4b12      	ldr	r3, [pc, #72]	; (2ab28 <get_fattime+0x58>)
   2aae0:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2aae2:	1d3b      	adds	r3, r7, #4
   2aae4:	88db      	ldrh	r3, [r3, #6]
   2aae6:	4a11      	ldr	r2, [pc, #68]	; (2ab2c <get_fattime+0x5c>)
   2aae8:	4694      	mov	ip, r2
   2aaea:	4463      	add	r3, ip
   2aaec:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2aaee:	1d3b      	adds	r3, r7, #4
   2aaf0:	795b      	ldrb	r3, [r3, #5]
   2aaf2:	055b      	lsls	r3, r3, #21
   2aaf4:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2aaf6:	1d3b      	adds	r3, r7, #4
   2aaf8:	791b      	ldrb	r3, [r3, #4]
   2aafa:	041b      	lsls	r3, r3, #16
   2aafc:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2aafe:	1d3b      	adds	r3, r7, #4
   2ab00:	789b      	ldrb	r3, [r3, #2]
   2ab02:	02db      	lsls	r3, r3, #11
   2ab04:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2ab06:	1d3b      	adds	r3, r7, #4
   2ab08:	785b      	ldrb	r3, [r3, #1]
   2ab0a:	015b      	lsls	r3, r3, #5
   2ab0c:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2ab0e:	1d3a      	adds	r2, r7, #4
   2ab10:	7812      	ldrb	r2, [r2, #0]
   2ab12:	0852      	lsrs	r2, r2, #1
   2ab14:	b2d2      	uxtb	r2, r2
   2ab16:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2ab18:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2ab1a:	68fb      	ldr	r3, [r7, #12]
}
   2ab1c:	0018      	movs	r0, r3
   2ab1e:	46bd      	mov	sp, r7
   2ab20:	b004      	add	sp, #16
   2ab22:	bd80      	pop	{r7, pc}
   2ab24:	200059ec 	.word	0x200059ec
   2ab28:	000262a9 	.word	0x000262a9
   2ab2c:	fffff844 	.word	0xfffff844

0002ab30 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2ab30:	b580      	push	{r7, lr}
   2ab32:	b086      	sub	sp, #24
   2ab34:	af00      	add	r7, sp, #0
   2ab36:	60f8      	str	r0, [r7, #12]
   2ab38:	60b9      	str	r1, [r7, #8]
   2ab3a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2ab3c:	68fb      	ldr	r3, [r7, #12]
   2ab3e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2ab40:	68bb      	ldr	r3, [r7, #8]
   2ab42:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2ab44:	e007      	b.n	2ab56 <mem_cpy+0x26>
		*d++ = *s++;
   2ab46:	697b      	ldr	r3, [r7, #20]
   2ab48:	1c5a      	adds	r2, r3, #1
   2ab4a:	617a      	str	r2, [r7, #20]
   2ab4c:	693a      	ldr	r2, [r7, #16]
   2ab4e:	1c51      	adds	r1, r2, #1
   2ab50:	6139      	str	r1, [r7, #16]
   2ab52:	7812      	ldrb	r2, [r2, #0]
   2ab54:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2ab56:	687b      	ldr	r3, [r7, #4]
   2ab58:	1e5a      	subs	r2, r3, #1
   2ab5a:	607a      	str	r2, [r7, #4]
   2ab5c:	2b00      	cmp	r3, #0
   2ab5e:	d1f2      	bne.n	2ab46 <mem_cpy+0x16>
}
   2ab60:	46c0      	nop			; (mov r8, r8)
   2ab62:	46bd      	mov	sp, r7
   2ab64:	b006      	add	sp, #24
   2ab66:	bd80      	pop	{r7, pc}

0002ab68 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2ab68:	b580      	push	{r7, lr}
   2ab6a:	b086      	sub	sp, #24
   2ab6c:	af00      	add	r7, sp, #0
   2ab6e:	60f8      	str	r0, [r7, #12]
   2ab70:	60b9      	str	r1, [r7, #8]
   2ab72:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2ab74:	68fb      	ldr	r3, [r7, #12]
   2ab76:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2ab78:	e005      	b.n	2ab86 <mem_set+0x1e>
		*d++ = (BYTE)val;
   2ab7a:	697b      	ldr	r3, [r7, #20]
   2ab7c:	1c5a      	adds	r2, r3, #1
   2ab7e:	617a      	str	r2, [r7, #20]
   2ab80:	68ba      	ldr	r2, [r7, #8]
   2ab82:	b2d2      	uxtb	r2, r2
   2ab84:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2ab86:	687b      	ldr	r3, [r7, #4]
   2ab88:	1e5a      	subs	r2, r3, #1
   2ab8a:	607a      	str	r2, [r7, #4]
   2ab8c:	2b00      	cmp	r3, #0
   2ab8e:	d1f4      	bne.n	2ab7a <mem_set+0x12>
}
   2ab90:	46c0      	nop			; (mov r8, r8)
   2ab92:	46bd      	mov	sp, r7
   2ab94:	b006      	add	sp, #24
   2ab96:	bd80      	pop	{r7, pc}

0002ab98 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2ab98:	b580      	push	{r7, lr}
   2ab9a:	b088      	sub	sp, #32
   2ab9c:	af00      	add	r7, sp, #0
   2ab9e:	60f8      	str	r0, [r7, #12]
   2aba0:	60b9      	str	r1, [r7, #8]
   2aba2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2aba4:	68fb      	ldr	r3, [r7, #12]
   2aba6:	61fb      	str	r3, [r7, #28]
   2aba8:	68bb      	ldr	r3, [r7, #8]
   2abaa:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2abac:	2300      	movs	r3, #0
   2abae:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2abb0:	46c0      	nop			; (mov r8, r8)
   2abb2:	687b      	ldr	r3, [r7, #4]
   2abb4:	1e5a      	subs	r2, r3, #1
   2abb6:	607a      	str	r2, [r7, #4]
   2abb8:	2b00      	cmp	r3, #0
   2abba:	d00d      	beq.n	2abd8 <mem_cmp+0x40>
   2abbc:	69fb      	ldr	r3, [r7, #28]
   2abbe:	1c5a      	adds	r2, r3, #1
   2abc0:	61fa      	str	r2, [r7, #28]
   2abc2:	781b      	ldrb	r3, [r3, #0]
   2abc4:	0019      	movs	r1, r3
   2abc6:	69bb      	ldr	r3, [r7, #24]
   2abc8:	1c5a      	adds	r2, r3, #1
   2abca:	61ba      	str	r2, [r7, #24]
   2abcc:	781b      	ldrb	r3, [r3, #0]
   2abce:	1acb      	subs	r3, r1, r3
   2abd0:	617b      	str	r3, [r7, #20]
   2abd2:	697b      	ldr	r3, [r7, #20]
   2abd4:	2b00      	cmp	r3, #0
   2abd6:	d0ec      	beq.n	2abb2 <mem_cmp+0x1a>
	return r;
   2abd8:	697b      	ldr	r3, [r7, #20]
}
   2abda:	0018      	movs	r0, r3
   2abdc:	46bd      	mov	sp, r7
   2abde:	b008      	add	sp, #32
   2abe0:	bd80      	pop	{r7, pc}

0002abe2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2abe2:	b580      	push	{r7, lr}
   2abe4:	b082      	sub	sp, #8
   2abe6:	af00      	add	r7, sp, #0
   2abe8:	6078      	str	r0, [r7, #4]
   2abea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2abec:	e002      	b.n	2abf4 <chk_chr+0x12>
   2abee:	687b      	ldr	r3, [r7, #4]
   2abf0:	3301      	adds	r3, #1
   2abf2:	607b      	str	r3, [r7, #4]
   2abf4:	687b      	ldr	r3, [r7, #4]
   2abf6:	781b      	ldrb	r3, [r3, #0]
   2abf8:	2b00      	cmp	r3, #0
   2abfa:	d005      	beq.n	2ac08 <chk_chr+0x26>
   2abfc:	687b      	ldr	r3, [r7, #4]
   2abfe:	781b      	ldrb	r3, [r3, #0]
   2ac00:	001a      	movs	r2, r3
   2ac02:	683b      	ldr	r3, [r7, #0]
   2ac04:	429a      	cmp	r2, r3
   2ac06:	d1f2      	bne.n	2abee <chk_chr+0xc>
	return *str;
   2ac08:	687b      	ldr	r3, [r7, #4]
   2ac0a:	781b      	ldrb	r3, [r3, #0]
}
   2ac0c:	0018      	movs	r0, r3
   2ac0e:	46bd      	mov	sp, r7
   2ac10:	b002      	add	sp, #8
   2ac12:	bd80      	pop	{r7, pc}

0002ac14 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2ac14:	b590      	push	{r4, r7, lr}
   2ac16:	b085      	sub	sp, #20
   2ac18:	af00      	add	r7, sp, #0
   2ac1a:	6078      	str	r0, [r7, #4]
   2ac1c:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2ac1e:	687b      	ldr	r3, [r7, #4]
   2ac20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2ac22:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2ac24:	68fa      	ldr	r2, [r7, #12]
   2ac26:	683b      	ldr	r3, [r7, #0]
   2ac28:	429a      	cmp	r2, r3
   2ac2a:	d04e      	beq.n	2acca <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2ac2c:	687b      	ldr	r3, [r7, #4]
   2ac2e:	791b      	ldrb	r3, [r3, #4]
   2ac30:	2b00      	cmp	r3, #0
   2ac32:	d037      	beq.n	2aca4 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2ac34:	687b      	ldr	r3, [r7, #4]
   2ac36:	7858      	ldrb	r0, [r3, #1]
   2ac38:	687b      	ldr	r3, [r7, #4]
   2ac3a:	3330      	adds	r3, #48	; 0x30
   2ac3c:	0019      	movs	r1, r3
   2ac3e:	68fa      	ldr	r2, [r7, #12]
   2ac40:	2301      	movs	r3, #1
   2ac42:	4c24      	ldr	r4, [pc, #144]	; (2acd4 <move_window+0xc0>)
   2ac44:	47a0      	blx	r4
   2ac46:	1e03      	subs	r3, r0, #0
   2ac48:	d001      	beq.n	2ac4e <move_window+0x3a>
				return FR_DISK_ERR;
   2ac4a:	2301      	movs	r3, #1
   2ac4c:	e03e      	b.n	2accc <move_window+0xb8>
			fs->wflag = 0;
   2ac4e:	687b      	ldr	r3, [r7, #4]
   2ac50:	2200      	movs	r2, #0
   2ac52:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2ac54:	687b      	ldr	r3, [r7, #4]
   2ac56:	6a1a      	ldr	r2, [r3, #32]
   2ac58:	687b      	ldr	r3, [r7, #4]
   2ac5a:	69db      	ldr	r3, [r3, #28]
   2ac5c:	18d2      	adds	r2, r2, r3
   2ac5e:	68fb      	ldr	r3, [r7, #12]
   2ac60:	429a      	cmp	r2, r3
   2ac62:	d91f      	bls.n	2aca4 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2ac64:	230b      	movs	r3, #11
   2ac66:	18fb      	adds	r3, r7, r3
   2ac68:	687a      	ldr	r2, [r7, #4]
   2ac6a:	78d2      	ldrb	r2, [r2, #3]
   2ac6c:	701a      	strb	r2, [r3, #0]
   2ac6e:	e014      	b.n	2ac9a <move_window+0x86>
					wsect += fs->fsize;
   2ac70:	687b      	ldr	r3, [r7, #4]
   2ac72:	69db      	ldr	r3, [r3, #28]
   2ac74:	68fa      	ldr	r2, [r7, #12]
   2ac76:	18d3      	adds	r3, r2, r3
   2ac78:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2ac7a:	687b      	ldr	r3, [r7, #4]
   2ac7c:	7858      	ldrb	r0, [r3, #1]
   2ac7e:	687b      	ldr	r3, [r7, #4]
   2ac80:	3330      	adds	r3, #48	; 0x30
   2ac82:	0019      	movs	r1, r3
   2ac84:	68fa      	ldr	r2, [r7, #12]
   2ac86:	2301      	movs	r3, #1
   2ac88:	4c12      	ldr	r4, [pc, #72]	; (2acd4 <move_window+0xc0>)
   2ac8a:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2ac8c:	230b      	movs	r3, #11
   2ac8e:	18fb      	adds	r3, r7, r3
   2ac90:	781a      	ldrb	r2, [r3, #0]
   2ac92:	230b      	movs	r3, #11
   2ac94:	18fb      	adds	r3, r7, r3
   2ac96:	3a01      	subs	r2, #1
   2ac98:	701a      	strb	r2, [r3, #0]
   2ac9a:	230b      	movs	r3, #11
   2ac9c:	18fb      	adds	r3, r7, r3
   2ac9e:	781b      	ldrb	r3, [r3, #0]
   2aca0:	2b01      	cmp	r3, #1
   2aca2:	d8e5      	bhi.n	2ac70 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2aca4:	683b      	ldr	r3, [r7, #0]
   2aca6:	2b00      	cmp	r3, #0
   2aca8:	d00f      	beq.n	2acca <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2acaa:	687b      	ldr	r3, [r7, #4]
   2acac:	7858      	ldrb	r0, [r3, #1]
   2acae:	687b      	ldr	r3, [r7, #4]
   2acb0:	3330      	adds	r3, #48	; 0x30
   2acb2:	0019      	movs	r1, r3
   2acb4:	683a      	ldr	r2, [r7, #0]
   2acb6:	2301      	movs	r3, #1
   2acb8:	4c07      	ldr	r4, [pc, #28]	; (2acd8 <move_window+0xc4>)
   2acba:	47a0      	blx	r4
   2acbc:	1e03      	subs	r3, r0, #0
   2acbe:	d001      	beq.n	2acc4 <move_window+0xb0>
				return FR_DISK_ERR;
   2acc0:	2301      	movs	r3, #1
   2acc2:	e003      	b.n	2accc <move_window+0xb8>
			fs->winsect = sector;
   2acc4:	687b      	ldr	r3, [r7, #4]
   2acc6:	683a      	ldr	r2, [r7, #0]
   2acc8:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2acca:	2300      	movs	r3, #0
}
   2accc:	0018      	movs	r0, r3
   2acce:	46bd      	mov	sp, r7
   2acd0:	b005      	add	sp, #20
   2acd2:	bd90      	pop	{r4, r7, pc}
   2acd4:	0002a901 	.word	0x0002a901
   2acd8:	0002a829 	.word	0x0002a829

0002acdc <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2acdc:	b590      	push	{r4, r7, lr}
   2acde:	b085      	sub	sp, #20
   2ace0:	af00      	add	r7, sp, #0
   2ace2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2ace4:	230f      	movs	r3, #15
   2ace6:	18fc      	adds	r4, r7, r3
   2ace8:	687b      	ldr	r3, [r7, #4]
   2acea:	2100      	movs	r1, #0
   2acec:	0018      	movs	r0, r3
   2acee:	4b52      	ldr	r3, [pc, #328]	; (2ae38 <sync+0x15c>)
   2acf0:	4798      	blx	r3
   2acf2:	0003      	movs	r3, r0
   2acf4:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2acf6:	230f      	movs	r3, #15
   2acf8:	18fb      	adds	r3, r7, r3
   2acfa:	781b      	ldrb	r3, [r3, #0]
   2acfc:	2b00      	cmp	r3, #0
   2acfe:	d000      	beq.n	2ad02 <sync+0x26>
   2ad00:	e093      	b.n	2ae2a <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2ad02:	687b      	ldr	r3, [r7, #4]
   2ad04:	781b      	ldrb	r3, [r3, #0]
   2ad06:	2b03      	cmp	r3, #3
   2ad08:	d000      	beq.n	2ad0c <sync+0x30>
   2ad0a:	e081      	b.n	2ae10 <sync+0x134>
   2ad0c:	687b      	ldr	r3, [r7, #4]
   2ad0e:	795b      	ldrb	r3, [r3, #5]
   2ad10:	2b00      	cmp	r3, #0
   2ad12:	d07d      	beq.n	2ae10 <sync+0x134>
			fs->winsect = 0;
   2ad14:	687b      	ldr	r3, [r7, #4]
   2ad16:	2200      	movs	r2, #0
   2ad18:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2ad1a:	687b      	ldr	r3, [r7, #4]
   2ad1c:	3330      	adds	r3, #48	; 0x30
   2ad1e:	0018      	movs	r0, r3
   2ad20:	2380      	movs	r3, #128	; 0x80
   2ad22:	009b      	lsls	r3, r3, #2
   2ad24:	001a      	movs	r2, r3
   2ad26:	2100      	movs	r1, #0
   2ad28:	4b44      	ldr	r3, [pc, #272]	; (2ae3c <sync+0x160>)
   2ad2a:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2ad2c:	687b      	ldr	r3, [r7, #4]
   2ad2e:	4a44      	ldr	r2, [pc, #272]	; (2ae40 <sync+0x164>)
   2ad30:	2155      	movs	r1, #85	; 0x55
   2ad32:	5499      	strb	r1, [r3, r2]
   2ad34:	687b      	ldr	r3, [r7, #4]
   2ad36:	4a43      	ldr	r2, [pc, #268]	; (2ae44 <sync+0x168>)
   2ad38:	21aa      	movs	r1, #170	; 0xaa
   2ad3a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2ad3c:	687b      	ldr	r3, [r7, #4]
   2ad3e:	2230      	movs	r2, #48	; 0x30
   2ad40:	2152      	movs	r1, #82	; 0x52
   2ad42:	5499      	strb	r1, [r3, r2]
   2ad44:	687b      	ldr	r3, [r7, #4]
   2ad46:	2231      	movs	r2, #49	; 0x31
   2ad48:	2152      	movs	r1, #82	; 0x52
   2ad4a:	5499      	strb	r1, [r3, r2]
   2ad4c:	687b      	ldr	r3, [r7, #4]
   2ad4e:	2232      	movs	r2, #50	; 0x32
   2ad50:	2161      	movs	r1, #97	; 0x61
   2ad52:	5499      	strb	r1, [r3, r2]
   2ad54:	687b      	ldr	r3, [r7, #4]
   2ad56:	2233      	movs	r2, #51	; 0x33
   2ad58:	2141      	movs	r1, #65	; 0x41
   2ad5a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2ad5c:	687a      	ldr	r2, [r7, #4]
   2ad5e:	2385      	movs	r3, #133	; 0x85
   2ad60:	009b      	lsls	r3, r3, #2
   2ad62:	2172      	movs	r1, #114	; 0x72
   2ad64:	54d1      	strb	r1, [r2, r3]
   2ad66:	687b      	ldr	r3, [r7, #4]
   2ad68:	4a37      	ldr	r2, [pc, #220]	; (2ae48 <sync+0x16c>)
   2ad6a:	2172      	movs	r1, #114	; 0x72
   2ad6c:	5499      	strb	r1, [r3, r2]
   2ad6e:	687b      	ldr	r3, [r7, #4]
   2ad70:	4a36      	ldr	r2, [pc, #216]	; (2ae4c <sync+0x170>)
   2ad72:	2141      	movs	r1, #65	; 0x41
   2ad74:	5499      	strb	r1, [r3, r2]
   2ad76:	687b      	ldr	r3, [r7, #4]
   2ad78:	4a35      	ldr	r2, [pc, #212]	; (2ae50 <sync+0x174>)
   2ad7a:	2161      	movs	r1, #97	; 0x61
   2ad7c:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2ad7e:	687b      	ldr	r3, [r7, #4]
   2ad80:	691b      	ldr	r3, [r3, #16]
   2ad82:	b2d9      	uxtb	r1, r3
   2ad84:	687a      	ldr	r2, [r7, #4]
   2ad86:	2386      	movs	r3, #134	; 0x86
   2ad88:	009b      	lsls	r3, r3, #2
   2ad8a:	54d1      	strb	r1, [r2, r3]
   2ad8c:	687b      	ldr	r3, [r7, #4]
   2ad8e:	691b      	ldr	r3, [r3, #16]
   2ad90:	b29b      	uxth	r3, r3
   2ad92:	0a1b      	lsrs	r3, r3, #8
   2ad94:	b29b      	uxth	r3, r3
   2ad96:	b2d9      	uxtb	r1, r3
   2ad98:	687b      	ldr	r3, [r7, #4]
   2ad9a:	4a2e      	ldr	r2, [pc, #184]	; (2ae54 <sync+0x178>)
   2ad9c:	5499      	strb	r1, [r3, r2]
   2ad9e:	687b      	ldr	r3, [r7, #4]
   2ada0:	691b      	ldr	r3, [r3, #16]
   2ada2:	0c1b      	lsrs	r3, r3, #16
   2ada4:	b2d9      	uxtb	r1, r3
   2ada6:	687b      	ldr	r3, [r7, #4]
   2ada8:	4a2b      	ldr	r2, [pc, #172]	; (2ae58 <sync+0x17c>)
   2adaa:	5499      	strb	r1, [r3, r2]
   2adac:	687b      	ldr	r3, [r7, #4]
   2adae:	691b      	ldr	r3, [r3, #16]
   2adb0:	0e1b      	lsrs	r3, r3, #24
   2adb2:	b2d9      	uxtb	r1, r3
   2adb4:	687b      	ldr	r3, [r7, #4]
   2adb6:	4a29      	ldr	r2, [pc, #164]	; (2ae5c <sync+0x180>)
   2adb8:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2adba:	687b      	ldr	r3, [r7, #4]
   2adbc:	68db      	ldr	r3, [r3, #12]
   2adbe:	b2d9      	uxtb	r1, r3
   2adc0:	687a      	ldr	r2, [r7, #4]
   2adc2:	2387      	movs	r3, #135	; 0x87
   2adc4:	009b      	lsls	r3, r3, #2
   2adc6:	54d1      	strb	r1, [r2, r3]
   2adc8:	687b      	ldr	r3, [r7, #4]
   2adca:	68db      	ldr	r3, [r3, #12]
   2adcc:	b29b      	uxth	r3, r3
   2adce:	0a1b      	lsrs	r3, r3, #8
   2add0:	b29b      	uxth	r3, r3
   2add2:	b2d9      	uxtb	r1, r3
   2add4:	687b      	ldr	r3, [r7, #4]
   2add6:	4a22      	ldr	r2, [pc, #136]	; (2ae60 <sync+0x184>)
   2add8:	5499      	strb	r1, [r3, r2]
   2adda:	687b      	ldr	r3, [r7, #4]
   2addc:	68db      	ldr	r3, [r3, #12]
   2adde:	0c1b      	lsrs	r3, r3, #16
   2ade0:	b2d9      	uxtb	r1, r3
   2ade2:	687b      	ldr	r3, [r7, #4]
   2ade4:	4a1f      	ldr	r2, [pc, #124]	; (2ae64 <sync+0x188>)
   2ade6:	5499      	strb	r1, [r3, r2]
   2ade8:	687b      	ldr	r3, [r7, #4]
   2adea:	68db      	ldr	r3, [r3, #12]
   2adec:	0e1b      	lsrs	r3, r3, #24
   2adee:	b2d9      	uxtb	r1, r3
   2adf0:	687b      	ldr	r3, [r7, #4]
   2adf2:	4a1d      	ldr	r2, [pc, #116]	; (2ae68 <sync+0x18c>)
   2adf4:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2adf6:	687b      	ldr	r3, [r7, #4]
   2adf8:	7858      	ldrb	r0, [r3, #1]
   2adfa:	687b      	ldr	r3, [r7, #4]
   2adfc:	3330      	adds	r3, #48	; 0x30
   2adfe:	0019      	movs	r1, r3
   2ae00:	687b      	ldr	r3, [r7, #4]
   2ae02:	695a      	ldr	r2, [r3, #20]
   2ae04:	2301      	movs	r3, #1
   2ae06:	4c19      	ldr	r4, [pc, #100]	; (2ae6c <sync+0x190>)
   2ae08:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2ae0a:	687b      	ldr	r3, [r7, #4]
   2ae0c:	2200      	movs	r2, #0
   2ae0e:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2ae10:	687b      	ldr	r3, [r7, #4]
   2ae12:	785b      	ldrb	r3, [r3, #1]
   2ae14:	2200      	movs	r2, #0
   2ae16:	2100      	movs	r1, #0
   2ae18:	0018      	movs	r0, r3
   2ae1a:	4b15      	ldr	r3, [pc, #84]	; (2ae70 <sync+0x194>)
   2ae1c:	4798      	blx	r3
   2ae1e:	1e03      	subs	r3, r0, #0
   2ae20:	d003      	beq.n	2ae2a <sync+0x14e>
			res = FR_DISK_ERR;
   2ae22:	230f      	movs	r3, #15
   2ae24:	18fb      	adds	r3, r7, r3
   2ae26:	2201      	movs	r2, #1
   2ae28:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2ae2a:	230f      	movs	r3, #15
   2ae2c:	18fb      	adds	r3, r7, r3
   2ae2e:	781b      	ldrb	r3, [r3, #0]
}
   2ae30:	0018      	movs	r0, r3
   2ae32:	46bd      	mov	sp, r7
   2ae34:	b005      	add	sp, #20
   2ae36:	bd90      	pop	{r4, r7, pc}
   2ae38:	0002ac15 	.word	0x0002ac15
   2ae3c:	0002ab69 	.word	0x0002ab69
   2ae40:	0000022e 	.word	0x0000022e
   2ae44:	0000022f 	.word	0x0000022f
   2ae48:	00000215 	.word	0x00000215
   2ae4c:	00000216 	.word	0x00000216
   2ae50:	00000217 	.word	0x00000217
   2ae54:	00000219 	.word	0x00000219
   2ae58:	0000021a 	.word	0x0000021a
   2ae5c:	0000021b 	.word	0x0000021b
   2ae60:	0000021d 	.word	0x0000021d
   2ae64:	0000021e 	.word	0x0000021e
   2ae68:	0000021f 	.word	0x0000021f
   2ae6c:	0002a901 	.word	0x0002a901
   2ae70:	0002a9d9 	.word	0x0002a9d9

0002ae74 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2ae74:	b580      	push	{r7, lr}
   2ae76:	b082      	sub	sp, #8
   2ae78:	af00      	add	r7, sp, #0
   2ae7a:	6078      	str	r0, [r7, #4]
   2ae7c:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2ae7e:	683b      	ldr	r3, [r7, #0]
   2ae80:	3b02      	subs	r3, #2
   2ae82:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2ae84:	687b      	ldr	r3, [r7, #4]
   2ae86:	699b      	ldr	r3, [r3, #24]
   2ae88:	1e9a      	subs	r2, r3, #2
   2ae8a:	683b      	ldr	r3, [r7, #0]
   2ae8c:	429a      	cmp	r2, r3
   2ae8e:	d801      	bhi.n	2ae94 <clust2sect+0x20>
   2ae90:	2300      	movs	r3, #0
   2ae92:	e007      	b.n	2aea4 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2ae94:	687b      	ldr	r3, [r7, #4]
   2ae96:	789b      	ldrb	r3, [r3, #2]
   2ae98:	001a      	movs	r2, r3
   2ae9a:	683b      	ldr	r3, [r7, #0]
   2ae9c:	435a      	muls	r2, r3
   2ae9e:	687b      	ldr	r3, [r7, #4]
   2aea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2aea2:	18d3      	adds	r3, r2, r3
}
   2aea4:	0018      	movs	r0, r3
   2aea6:	46bd      	mov	sp, r7
   2aea8:	b002      	add	sp, #8
   2aeaa:	bd80      	pop	{r7, pc}

0002aeac <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2aeac:	b580      	push	{r7, lr}
   2aeae:	b086      	sub	sp, #24
   2aeb0:	af00      	add	r7, sp, #0
   2aeb2:	6078      	str	r0, [r7, #4]
   2aeb4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2aeb6:	683b      	ldr	r3, [r7, #0]
   2aeb8:	2b01      	cmp	r3, #1
   2aeba:	d904      	bls.n	2aec6 <get_fat+0x1a>
   2aebc:	687b      	ldr	r3, [r7, #4]
   2aebe:	699a      	ldr	r2, [r3, #24]
   2aec0:	683b      	ldr	r3, [r7, #0]
   2aec2:	429a      	cmp	r2, r3
   2aec4:	d801      	bhi.n	2aeca <get_fat+0x1e>
		return 1;
   2aec6:	2301      	movs	r3, #1
   2aec8:	e09f      	b.n	2b00a <get_fat+0x15e>

	switch (fs->fs_type) {
   2aeca:	687b      	ldr	r3, [r7, #4]
   2aecc:	781b      	ldrb	r3, [r3, #0]
   2aece:	2b02      	cmp	r3, #2
   2aed0:	d048      	beq.n	2af64 <get_fat+0xb8>
   2aed2:	2b03      	cmp	r3, #3
   2aed4:	d067      	beq.n	2afa6 <get_fat+0xfa>
   2aed6:	2b01      	cmp	r3, #1
   2aed8:	d000      	beq.n	2aedc <get_fat+0x30>
   2aeda:	e094      	b.n	2b006 <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2aedc:	683b      	ldr	r3, [r7, #0]
   2aede:	617b      	str	r3, [r7, #20]
   2aee0:	697b      	ldr	r3, [r7, #20]
   2aee2:	085b      	lsrs	r3, r3, #1
   2aee4:	697a      	ldr	r2, [r7, #20]
   2aee6:	18d3      	adds	r3, r2, r3
   2aee8:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2aeea:	687b      	ldr	r3, [r7, #4]
   2aeec:	6a1a      	ldr	r2, [r3, #32]
   2aeee:	697b      	ldr	r3, [r7, #20]
   2aef0:	0a5b      	lsrs	r3, r3, #9
   2aef2:	18d2      	adds	r2, r2, r3
   2aef4:	687b      	ldr	r3, [r7, #4]
   2aef6:	0011      	movs	r1, r2
   2aef8:	0018      	movs	r0, r3
   2aefa:	4b46      	ldr	r3, [pc, #280]	; (2b014 <get_fat+0x168>)
   2aefc:	4798      	blx	r3
   2aefe:	1e03      	subs	r3, r0, #0
   2af00:	d000      	beq.n	2af04 <get_fat+0x58>
   2af02:	e079      	b.n	2aff8 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2af04:	697b      	ldr	r3, [r7, #20]
   2af06:	05db      	lsls	r3, r3, #23
   2af08:	0ddb      	lsrs	r3, r3, #23
   2af0a:	687a      	ldr	r2, [r7, #4]
   2af0c:	2130      	movs	r1, #48	; 0x30
   2af0e:	18d3      	adds	r3, r2, r3
   2af10:	185b      	adds	r3, r3, r1
   2af12:	781b      	ldrb	r3, [r3, #0]
   2af14:	613b      	str	r3, [r7, #16]
   2af16:	697b      	ldr	r3, [r7, #20]
   2af18:	3301      	adds	r3, #1
   2af1a:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2af1c:	687b      	ldr	r3, [r7, #4]
   2af1e:	6a1a      	ldr	r2, [r3, #32]
   2af20:	697b      	ldr	r3, [r7, #20]
   2af22:	0a5b      	lsrs	r3, r3, #9
   2af24:	18d2      	adds	r2, r2, r3
   2af26:	687b      	ldr	r3, [r7, #4]
   2af28:	0011      	movs	r1, r2
   2af2a:	0018      	movs	r0, r3
   2af2c:	4b39      	ldr	r3, [pc, #228]	; (2b014 <get_fat+0x168>)
   2af2e:	4798      	blx	r3
   2af30:	1e03      	subs	r3, r0, #0
   2af32:	d163      	bne.n	2affc <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2af34:	697b      	ldr	r3, [r7, #20]
   2af36:	05db      	lsls	r3, r3, #23
   2af38:	0ddb      	lsrs	r3, r3, #23
   2af3a:	687a      	ldr	r2, [r7, #4]
   2af3c:	2130      	movs	r1, #48	; 0x30
   2af3e:	18d3      	adds	r3, r2, r3
   2af40:	185b      	adds	r3, r3, r1
   2af42:	781b      	ldrb	r3, [r3, #0]
   2af44:	021b      	lsls	r3, r3, #8
   2af46:	001a      	movs	r2, r3
   2af48:	693b      	ldr	r3, [r7, #16]
   2af4a:	4313      	orrs	r3, r2
   2af4c:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2af4e:	683b      	ldr	r3, [r7, #0]
   2af50:	2201      	movs	r2, #1
   2af52:	4013      	ands	r3, r2
   2af54:	d002      	beq.n	2af5c <get_fat+0xb0>
   2af56:	693b      	ldr	r3, [r7, #16]
   2af58:	091b      	lsrs	r3, r3, #4
   2af5a:	e056      	b.n	2b00a <get_fat+0x15e>
   2af5c:	693b      	ldr	r3, [r7, #16]
   2af5e:	051b      	lsls	r3, r3, #20
   2af60:	0d1b      	lsrs	r3, r3, #20
   2af62:	e052      	b.n	2b00a <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2af64:	687b      	ldr	r3, [r7, #4]
   2af66:	6a1a      	ldr	r2, [r3, #32]
   2af68:	683b      	ldr	r3, [r7, #0]
   2af6a:	0a1b      	lsrs	r3, r3, #8
   2af6c:	18d2      	adds	r2, r2, r3
   2af6e:	687b      	ldr	r3, [r7, #4]
   2af70:	0011      	movs	r1, r2
   2af72:	0018      	movs	r0, r3
   2af74:	4b27      	ldr	r3, [pc, #156]	; (2b014 <get_fat+0x168>)
   2af76:	4798      	blx	r3
   2af78:	1e03      	subs	r3, r0, #0
   2af7a:	d141      	bne.n	2b000 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2af7c:	683b      	ldr	r3, [r7, #0]
   2af7e:	005a      	lsls	r2, r3, #1
   2af80:	23ff      	movs	r3, #255	; 0xff
   2af82:	005b      	lsls	r3, r3, #1
   2af84:	4013      	ands	r3, r2
   2af86:	3330      	adds	r3, #48	; 0x30
   2af88:	687a      	ldr	r2, [r7, #4]
   2af8a:	18d3      	adds	r3, r2, r3
   2af8c:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2af8e:	68fb      	ldr	r3, [r7, #12]
   2af90:	3301      	adds	r3, #1
   2af92:	781b      	ldrb	r3, [r3, #0]
   2af94:	021b      	lsls	r3, r3, #8
   2af96:	b21a      	sxth	r2, r3
   2af98:	68fb      	ldr	r3, [r7, #12]
   2af9a:	781b      	ldrb	r3, [r3, #0]
   2af9c:	b21b      	sxth	r3, r3
   2af9e:	4313      	orrs	r3, r2
   2afa0:	b21b      	sxth	r3, r3
   2afa2:	b29b      	uxth	r3, r3
   2afa4:	e031      	b.n	2b00a <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2afa6:	687b      	ldr	r3, [r7, #4]
   2afa8:	6a1a      	ldr	r2, [r3, #32]
   2afaa:	683b      	ldr	r3, [r7, #0]
   2afac:	09db      	lsrs	r3, r3, #7
   2afae:	18d2      	adds	r2, r2, r3
   2afb0:	687b      	ldr	r3, [r7, #4]
   2afb2:	0011      	movs	r1, r2
   2afb4:	0018      	movs	r0, r3
   2afb6:	4b17      	ldr	r3, [pc, #92]	; (2b014 <get_fat+0x168>)
   2afb8:	4798      	blx	r3
   2afba:	1e03      	subs	r3, r0, #0
   2afbc:	d122      	bne.n	2b004 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2afbe:	683b      	ldr	r3, [r7, #0]
   2afc0:	009a      	lsls	r2, r3, #2
   2afc2:	23fe      	movs	r3, #254	; 0xfe
   2afc4:	005b      	lsls	r3, r3, #1
   2afc6:	4013      	ands	r3, r2
   2afc8:	3330      	adds	r3, #48	; 0x30
   2afca:	687a      	ldr	r2, [r7, #4]
   2afcc:	18d3      	adds	r3, r2, r3
   2afce:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2afd0:	68fb      	ldr	r3, [r7, #12]
   2afd2:	3303      	adds	r3, #3
   2afd4:	781b      	ldrb	r3, [r3, #0]
   2afd6:	061a      	lsls	r2, r3, #24
   2afd8:	68fb      	ldr	r3, [r7, #12]
   2afda:	3302      	adds	r3, #2
   2afdc:	781b      	ldrb	r3, [r3, #0]
   2afde:	041b      	lsls	r3, r3, #16
   2afe0:	4313      	orrs	r3, r2
   2afe2:	68fa      	ldr	r2, [r7, #12]
   2afe4:	3201      	adds	r2, #1
   2afe6:	7812      	ldrb	r2, [r2, #0]
   2afe8:	0212      	lsls	r2, r2, #8
   2afea:	4313      	orrs	r3, r2
   2afec:	68fa      	ldr	r2, [r7, #12]
   2afee:	7812      	ldrb	r2, [r2, #0]
   2aff0:	4313      	orrs	r3, r2
   2aff2:	011b      	lsls	r3, r3, #4
   2aff4:	091b      	lsrs	r3, r3, #4
   2aff6:	e008      	b.n	2b00a <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2aff8:	46c0      	nop			; (mov r8, r8)
   2affa:	e004      	b.n	2b006 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2affc:	46c0      	nop			; (mov r8, r8)
   2affe:	e002      	b.n	2b006 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2b000:	46c0      	nop			; (mov r8, r8)
   2b002:	e000      	b.n	2b006 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2b004:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2b006:	2301      	movs	r3, #1
   2b008:	425b      	negs	r3, r3
}
   2b00a:	0018      	movs	r0, r3
   2b00c:	46bd      	mov	sp, r7
   2b00e:	b006      	add	sp, #24
   2b010:	bd80      	pop	{r7, pc}
   2b012:	46c0      	nop			; (mov r8, r8)
   2b014:	0002ac15 	.word	0x0002ac15

0002b018 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2b018:	b590      	push	{r4, r7, lr}
   2b01a:	b089      	sub	sp, #36	; 0x24
   2b01c:	af00      	add	r7, sp, #0
   2b01e:	60f8      	str	r0, [r7, #12]
   2b020:	60b9      	str	r1, [r7, #8]
   2b022:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2b024:	68bb      	ldr	r3, [r7, #8]
   2b026:	2b01      	cmp	r3, #1
   2b028:	d904      	bls.n	2b034 <put_fat+0x1c>
   2b02a:	68fb      	ldr	r3, [r7, #12]
   2b02c:	699a      	ldr	r2, [r3, #24]
   2b02e:	68bb      	ldr	r3, [r7, #8]
   2b030:	429a      	cmp	r2, r3
   2b032:	d804      	bhi.n	2b03e <put_fat+0x26>
		res = FR_INT_ERR;
   2b034:	231f      	movs	r3, #31
   2b036:	18fb      	adds	r3, r7, r3
   2b038:	2202      	movs	r2, #2
   2b03a:	701a      	strb	r2, [r3, #0]
   2b03c:	e100      	b.n	2b240 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2b03e:	68fb      	ldr	r3, [r7, #12]
   2b040:	781b      	ldrb	r3, [r3, #0]
   2b042:	2b02      	cmp	r3, #2
   2b044:	d100      	bne.n	2b048 <put_fat+0x30>
   2b046:	e078      	b.n	2b13a <put_fat+0x122>
   2b048:	2b03      	cmp	r3, #3
   2b04a:	d100      	bne.n	2b04e <put_fat+0x36>
   2b04c:	e09e      	b.n	2b18c <put_fat+0x174>
   2b04e:	2b01      	cmp	r3, #1
   2b050:	d000      	beq.n	2b054 <put_fat+0x3c>
   2b052:	e0e6      	b.n	2b222 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2b054:	68bb      	ldr	r3, [r7, #8]
   2b056:	61bb      	str	r3, [r7, #24]
   2b058:	69bb      	ldr	r3, [r7, #24]
   2b05a:	085b      	lsrs	r3, r3, #1
   2b05c:	69ba      	ldr	r2, [r7, #24]
   2b05e:	18d3      	adds	r3, r2, r3
   2b060:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2b062:	68fb      	ldr	r3, [r7, #12]
   2b064:	6a1a      	ldr	r2, [r3, #32]
   2b066:	69bb      	ldr	r3, [r7, #24]
   2b068:	0a5b      	lsrs	r3, r3, #9
   2b06a:	18d2      	adds	r2, r2, r3
   2b06c:	231f      	movs	r3, #31
   2b06e:	18fc      	adds	r4, r7, r3
   2b070:	68fb      	ldr	r3, [r7, #12]
   2b072:	0011      	movs	r1, r2
   2b074:	0018      	movs	r0, r3
   2b076:	4b76      	ldr	r3, [pc, #472]	; (2b250 <put_fat+0x238>)
   2b078:	4798      	blx	r3
   2b07a:	0003      	movs	r3, r0
   2b07c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b07e:	231f      	movs	r3, #31
   2b080:	18fb      	adds	r3, r7, r3
   2b082:	781b      	ldrb	r3, [r3, #0]
   2b084:	2b00      	cmp	r3, #0
   2b086:	d000      	beq.n	2b08a <put_fat+0x72>
   2b088:	e0d0      	b.n	2b22c <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2b08a:	69bb      	ldr	r3, [r7, #24]
   2b08c:	05db      	lsls	r3, r3, #23
   2b08e:	0ddb      	lsrs	r3, r3, #23
   2b090:	3330      	adds	r3, #48	; 0x30
   2b092:	68fa      	ldr	r2, [r7, #12]
   2b094:	18d3      	adds	r3, r2, r3
   2b096:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2b098:	68bb      	ldr	r3, [r7, #8]
   2b09a:	2201      	movs	r2, #1
   2b09c:	4013      	ands	r3, r2
   2b09e:	d00d      	beq.n	2b0bc <put_fat+0xa4>
   2b0a0:	697b      	ldr	r3, [r7, #20]
   2b0a2:	781b      	ldrb	r3, [r3, #0]
   2b0a4:	b25b      	sxtb	r3, r3
   2b0a6:	220f      	movs	r2, #15
   2b0a8:	4013      	ands	r3, r2
   2b0aa:	b25a      	sxtb	r2, r3
   2b0ac:	687b      	ldr	r3, [r7, #4]
   2b0ae:	b2db      	uxtb	r3, r3
   2b0b0:	011b      	lsls	r3, r3, #4
   2b0b2:	b25b      	sxtb	r3, r3
   2b0b4:	4313      	orrs	r3, r2
   2b0b6:	b25b      	sxtb	r3, r3
   2b0b8:	b2db      	uxtb	r3, r3
   2b0ba:	e001      	b.n	2b0c0 <put_fat+0xa8>
   2b0bc:	687b      	ldr	r3, [r7, #4]
   2b0be:	b2db      	uxtb	r3, r3
   2b0c0:	697a      	ldr	r2, [r7, #20]
   2b0c2:	7013      	strb	r3, [r2, #0]
			bc++;
   2b0c4:	69bb      	ldr	r3, [r7, #24]
   2b0c6:	3301      	adds	r3, #1
   2b0c8:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2b0ca:	68fb      	ldr	r3, [r7, #12]
   2b0cc:	2201      	movs	r2, #1
   2b0ce:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2b0d0:	68fb      	ldr	r3, [r7, #12]
   2b0d2:	6a1a      	ldr	r2, [r3, #32]
   2b0d4:	69bb      	ldr	r3, [r7, #24]
   2b0d6:	0a5b      	lsrs	r3, r3, #9
   2b0d8:	18d2      	adds	r2, r2, r3
   2b0da:	231f      	movs	r3, #31
   2b0dc:	18fc      	adds	r4, r7, r3
   2b0de:	68fb      	ldr	r3, [r7, #12]
   2b0e0:	0011      	movs	r1, r2
   2b0e2:	0018      	movs	r0, r3
   2b0e4:	4b5a      	ldr	r3, [pc, #360]	; (2b250 <put_fat+0x238>)
   2b0e6:	4798      	blx	r3
   2b0e8:	0003      	movs	r3, r0
   2b0ea:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b0ec:	231f      	movs	r3, #31
   2b0ee:	18fb      	adds	r3, r7, r3
   2b0f0:	781b      	ldrb	r3, [r3, #0]
   2b0f2:	2b00      	cmp	r3, #0
   2b0f4:	d000      	beq.n	2b0f8 <put_fat+0xe0>
   2b0f6:	e09b      	b.n	2b230 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2b0f8:	69bb      	ldr	r3, [r7, #24]
   2b0fa:	05db      	lsls	r3, r3, #23
   2b0fc:	0ddb      	lsrs	r3, r3, #23
   2b0fe:	3330      	adds	r3, #48	; 0x30
   2b100:	68fa      	ldr	r2, [r7, #12]
   2b102:	18d3      	adds	r3, r2, r3
   2b104:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2b106:	68bb      	ldr	r3, [r7, #8]
   2b108:	2201      	movs	r2, #1
   2b10a:	4013      	ands	r3, r2
   2b10c:	d003      	beq.n	2b116 <put_fat+0xfe>
   2b10e:	687b      	ldr	r3, [r7, #4]
   2b110:	091b      	lsrs	r3, r3, #4
   2b112:	b2db      	uxtb	r3, r3
   2b114:	e00e      	b.n	2b134 <put_fat+0x11c>
   2b116:	697b      	ldr	r3, [r7, #20]
   2b118:	781b      	ldrb	r3, [r3, #0]
   2b11a:	b25b      	sxtb	r3, r3
   2b11c:	220f      	movs	r2, #15
   2b11e:	4393      	bics	r3, r2
   2b120:	b25a      	sxtb	r2, r3
   2b122:	687b      	ldr	r3, [r7, #4]
   2b124:	0a1b      	lsrs	r3, r3, #8
   2b126:	b25b      	sxtb	r3, r3
   2b128:	210f      	movs	r1, #15
   2b12a:	400b      	ands	r3, r1
   2b12c:	b25b      	sxtb	r3, r3
   2b12e:	4313      	orrs	r3, r2
   2b130:	b25b      	sxtb	r3, r3
   2b132:	b2db      	uxtb	r3, r3
   2b134:	697a      	ldr	r2, [r7, #20]
   2b136:	7013      	strb	r3, [r2, #0]
			break;
   2b138:	e07f      	b.n	2b23a <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2b13a:	68fb      	ldr	r3, [r7, #12]
   2b13c:	6a1a      	ldr	r2, [r3, #32]
   2b13e:	68bb      	ldr	r3, [r7, #8]
   2b140:	0a1b      	lsrs	r3, r3, #8
   2b142:	18d2      	adds	r2, r2, r3
   2b144:	231f      	movs	r3, #31
   2b146:	18fc      	adds	r4, r7, r3
   2b148:	68fb      	ldr	r3, [r7, #12]
   2b14a:	0011      	movs	r1, r2
   2b14c:	0018      	movs	r0, r3
   2b14e:	4b40      	ldr	r3, [pc, #256]	; (2b250 <put_fat+0x238>)
   2b150:	4798      	blx	r3
   2b152:	0003      	movs	r3, r0
   2b154:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b156:	231f      	movs	r3, #31
   2b158:	18fb      	adds	r3, r7, r3
   2b15a:	781b      	ldrb	r3, [r3, #0]
   2b15c:	2b00      	cmp	r3, #0
   2b15e:	d169      	bne.n	2b234 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2b160:	68bb      	ldr	r3, [r7, #8]
   2b162:	005a      	lsls	r2, r3, #1
   2b164:	23ff      	movs	r3, #255	; 0xff
   2b166:	005b      	lsls	r3, r3, #1
   2b168:	4013      	ands	r3, r2
   2b16a:	3330      	adds	r3, #48	; 0x30
   2b16c:	68fa      	ldr	r2, [r7, #12]
   2b16e:	18d3      	adds	r3, r2, r3
   2b170:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2b172:	687b      	ldr	r3, [r7, #4]
   2b174:	b2da      	uxtb	r2, r3
   2b176:	697b      	ldr	r3, [r7, #20]
   2b178:	701a      	strb	r2, [r3, #0]
   2b17a:	697b      	ldr	r3, [r7, #20]
   2b17c:	3301      	adds	r3, #1
   2b17e:	687a      	ldr	r2, [r7, #4]
   2b180:	b292      	uxth	r2, r2
   2b182:	0a12      	lsrs	r2, r2, #8
   2b184:	b292      	uxth	r2, r2
   2b186:	b2d2      	uxtb	r2, r2
   2b188:	701a      	strb	r2, [r3, #0]
			break;
   2b18a:	e056      	b.n	2b23a <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2b18c:	68fb      	ldr	r3, [r7, #12]
   2b18e:	6a1a      	ldr	r2, [r3, #32]
   2b190:	68bb      	ldr	r3, [r7, #8]
   2b192:	09db      	lsrs	r3, r3, #7
   2b194:	18d2      	adds	r2, r2, r3
   2b196:	231f      	movs	r3, #31
   2b198:	18fc      	adds	r4, r7, r3
   2b19a:	68fb      	ldr	r3, [r7, #12]
   2b19c:	0011      	movs	r1, r2
   2b19e:	0018      	movs	r0, r3
   2b1a0:	4b2b      	ldr	r3, [pc, #172]	; (2b250 <put_fat+0x238>)
   2b1a2:	4798      	blx	r3
   2b1a4:	0003      	movs	r3, r0
   2b1a6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b1a8:	231f      	movs	r3, #31
   2b1aa:	18fb      	adds	r3, r7, r3
   2b1ac:	781b      	ldrb	r3, [r3, #0]
   2b1ae:	2b00      	cmp	r3, #0
   2b1b0:	d142      	bne.n	2b238 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2b1b2:	68bb      	ldr	r3, [r7, #8]
   2b1b4:	009a      	lsls	r2, r3, #2
   2b1b6:	23fe      	movs	r3, #254	; 0xfe
   2b1b8:	005b      	lsls	r3, r3, #1
   2b1ba:	4013      	ands	r3, r2
   2b1bc:	3330      	adds	r3, #48	; 0x30
   2b1be:	68fa      	ldr	r2, [r7, #12]
   2b1c0:	18d3      	adds	r3, r2, r3
   2b1c2:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2b1c4:	697b      	ldr	r3, [r7, #20]
   2b1c6:	3303      	adds	r3, #3
   2b1c8:	781b      	ldrb	r3, [r3, #0]
   2b1ca:	061a      	lsls	r2, r3, #24
   2b1cc:	697b      	ldr	r3, [r7, #20]
   2b1ce:	3302      	adds	r3, #2
   2b1d0:	781b      	ldrb	r3, [r3, #0]
   2b1d2:	041b      	lsls	r3, r3, #16
   2b1d4:	4313      	orrs	r3, r2
   2b1d6:	697a      	ldr	r2, [r7, #20]
   2b1d8:	3201      	adds	r2, #1
   2b1da:	7812      	ldrb	r2, [r2, #0]
   2b1dc:	0212      	lsls	r2, r2, #8
   2b1de:	4313      	orrs	r3, r2
   2b1e0:	697a      	ldr	r2, [r7, #20]
   2b1e2:	7812      	ldrb	r2, [r2, #0]
   2b1e4:	4313      	orrs	r3, r2
   2b1e6:	0f1b      	lsrs	r3, r3, #28
   2b1e8:	071b      	lsls	r3, r3, #28
   2b1ea:	687a      	ldr	r2, [r7, #4]
   2b1ec:	4313      	orrs	r3, r2
   2b1ee:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2b1f0:	687b      	ldr	r3, [r7, #4]
   2b1f2:	b2da      	uxtb	r2, r3
   2b1f4:	697b      	ldr	r3, [r7, #20]
   2b1f6:	701a      	strb	r2, [r3, #0]
   2b1f8:	697b      	ldr	r3, [r7, #20]
   2b1fa:	3301      	adds	r3, #1
   2b1fc:	687a      	ldr	r2, [r7, #4]
   2b1fe:	b292      	uxth	r2, r2
   2b200:	0a12      	lsrs	r2, r2, #8
   2b202:	b292      	uxth	r2, r2
   2b204:	b2d2      	uxtb	r2, r2
   2b206:	701a      	strb	r2, [r3, #0]
   2b208:	697b      	ldr	r3, [r7, #20]
   2b20a:	3302      	adds	r3, #2
   2b20c:	687a      	ldr	r2, [r7, #4]
   2b20e:	0c12      	lsrs	r2, r2, #16
   2b210:	b2d2      	uxtb	r2, r2
   2b212:	701a      	strb	r2, [r3, #0]
   2b214:	697b      	ldr	r3, [r7, #20]
   2b216:	3303      	adds	r3, #3
   2b218:	687a      	ldr	r2, [r7, #4]
   2b21a:	0e12      	lsrs	r2, r2, #24
   2b21c:	b2d2      	uxtb	r2, r2
   2b21e:	701a      	strb	r2, [r3, #0]
			break;
   2b220:	e00b      	b.n	2b23a <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2b222:	231f      	movs	r3, #31
   2b224:	18fb      	adds	r3, r7, r3
   2b226:	2202      	movs	r2, #2
   2b228:	701a      	strb	r2, [r3, #0]
   2b22a:	e006      	b.n	2b23a <put_fat+0x222>
			if (res != FR_OK) break;
   2b22c:	46c0      	nop			; (mov r8, r8)
   2b22e:	e004      	b.n	2b23a <put_fat+0x222>
			if (res != FR_OK) break;
   2b230:	46c0      	nop			; (mov r8, r8)
   2b232:	e002      	b.n	2b23a <put_fat+0x222>
			if (res != FR_OK) break;
   2b234:	46c0      	nop			; (mov r8, r8)
   2b236:	e000      	b.n	2b23a <put_fat+0x222>
			if (res != FR_OK) break;
   2b238:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2b23a:	68fb      	ldr	r3, [r7, #12]
   2b23c:	2201      	movs	r2, #1
   2b23e:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2b240:	231f      	movs	r3, #31
   2b242:	18fb      	adds	r3, r7, r3
   2b244:	781b      	ldrb	r3, [r3, #0]
}
   2b246:	0018      	movs	r0, r3
   2b248:	46bd      	mov	sp, r7
   2b24a:	b009      	add	sp, #36	; 0x24
   2b24c:	bd90      	pop	{r4, r7, pc}
   2b24e:	46c0      	nop			; (mov r8, r8)
   2b250:	0002ac15 	.word	0x0002ac15

0002b254 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2b254:	b590      	push	{r4, r7, lr}
   2b256:	b085      	sub	sp, #20
   2b258:	af00      	add	r7, sp, #0
   2b25a:	6078      	str	r0, [r7, #4]
   2b25c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2b25e:	683b      	ldr	r3, [r7, #0]
   2b260:	2b01      	cmp	r3, #1
   2b262:	d904      	bls.n	2b26e <remove_chain+0x1a>
   2b264:	687b      	ldr	r3, [r7, #4]
   2b266:	699a      	ldr	r2, [r3, #24]
   2b268:	683b      	ldr	r3, [r7, #0]
   2b26a:	429a      	cmp	r2, r3
   2b26c:	d804      	bhi.n	2b278 <remove_chain+0x24>
		res = FR_INT_ERR;
   2b26e:	230f      	movs	r3, #15
   2b270:	18fb      	adds	r3, r7, r3
   2b272:	2202      	movs	r2, #2
   2b274:	701a      	strb	r2, [r3, #0]
   2b276:	e045      	b.n	2b304 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2b278:	230f      	movs	r3, #15
   2b27a:	18fb      	adds	r3, r7, r3
   2b27c:	2200      	movs	r2, #0
   2b27e:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2b280:	e037      	b.n	2b2f2 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2b282:	683a      	ldr	r2, [r7, #0]
   2b284:	687b      	ldr	r3, [r7, #4]
   2b286:	0011      	movs	r1, r2
   2b288:	0018      	movs	r0, r3
   2b28a:	4b22      	ldr	r3, [pc, #136]	; (2b314 <remove_chain+0xc0>)
   2b28c:	4798      	blx	r3
   2b28e:	0003      	movs	r3, r0
   2b290:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2b292:	68bb      	ldr	r3, [r7, #8]
   2b294:	2b00      	cmp	r3, #0
   2b296:	d032      	beq.n	2b2fe <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2b298:	68bb      	ldr	r3, [r7, #8]
   2b29a:	2b01      	cmp	r3, #1
   2b29c:	d104      	bne.n	2b2a8 <remove_chain+0x54>
   2b29e:	230f      	movs	r3, #15
   2b2a0:	18fb      	adds	r3, r7, r3
   2b2a2:	2202      	movs	r2, #2
   2b2a4:	701a      	strb	r2, [r3, #0]
   2b2a6:	e02d      	b.n	2b304 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2b2a8:	68bb      	ldr	r3, [r7, #8]
   2b2aa:	3301      	adds	r3, #1
   2b2ac:	d104      	bne.n	2b2b8 <remove_chain+0x64>
   2b2ae:	230f      	movs	r3, #15
   2b2b0:	18fb      	adds	r3, r7, r3
   2b2b2:	2201      	movs	r2, #1
   2b2b4:	701a      	strb	r2, [r3, #0]
   2b2b6:	e025      	b.n	2b304 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2b2b8:	230f      	movs	r3, #15
   2b2ba:	18fc      	adds	r4, r7, r3
   2b2bc:	6839      	ldr	r1, [r7, #0]
   2b2be:	687b      	ldr	r3, [r7, #4]
   2b2c0:	2200      	movs	r2, #0
   2b2c2:	0018      	movs	r0, r3
   2b2c4:	4b14      	ldr	r3, [pc, #80]	; (2b318 <remove_chain+0xc4>)
   2b2c6:	4798      	blx	r3
   2b2c8:	0003      	movs	r3, r0
   2b2ca:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b2cc:	230f      	movs	r3, #15
   2b2ce:	18fb      	adds	r3, r7, r3
   2b2d0:	781b      	ldrb	r3, [r3, #0]
   2b2d2:	2b00      	cmp	r3, #0
   2b2d4:	d115      	bne.n	2b302 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2b2d6:	687b      	ldr	r3, [r7, #4]
   2b2d8:	691b      	ldr	r3, [r3, #16]
   2b2da:	3301      	adds	r3, #1
   2b2dc:	d007      	beq.n	2b2ee <remove_chain+0x9a>
				fs->free_clust++;
   2b2de:	687b      	ldr	r3, [r7, #4]
   2b2e0:	691b      	ldr	r3, [r3, #16]
   2b2e2:	1c5a      	adds	r2, r3, #1
   2b2e4:	687b      	ldr	r3, [r7, #4]
   2b2e6:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2b2e8:	687b      	ldr	r3, [r7, #4]
   2b2ea:	2201      	movs	r2, #1
   2b2ec:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2b2ee:	68bb      	ldr	r3, [r7, #8]
   2b2f0:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2b2f2:	687b      	ldr	r3, [r7, #4]
   2b2f4:	699a      	ldr	r2, [r3, #24]
   2b2f6:	683b      	ldr	r3, [r7, #0]
   2b2f8:	429a      	cmp	r2, r3
   2b2fa:	d8c2      	bhi.n	2b282 <remove_chain+0x2e>
   2b2fc:	e002      	b.n	2b304 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2b2fe:	46c0      	nop			; (mov r8, r8)
   2b300:	e000      	b.n	2b304 <remove_chain+0xb0>
			if (res != FR_OK) break;
   2b302:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2b304:	230f      	movs	r3, #15
   2b306:	18fb      	adds	r3, r7, r3
   2b308:	781b      	ldrb	r3, [r3, #0]
}
   2b30a:	0018      	movs	r0, r3
   2b30c:	46bd      	mov	sp, r7
   2b30e:	b005      	add	sp, #20
   2b310:	bd90      	pop	{r4, r7, pc}
   2b312:	46c0      	nop			; (mov r8, r8)
   2b314:	0002aead 	.word	0x0002aead
   2b318:	0002b019 	.word	0x0002b019

0002b31c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2b31c:	b590      	push	{r4, r7, lr}
   2b31e:	b087      	sub	sp, #28
   2b320:	af00      	add	r7, sp, #0
   2b322:	6078      	str	r0, [r7, #4]
   2b324:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2b326:	683b      	ldr	r3, [r7, #0]
   2b328:	2b00      	cmp	r3, #0
   2b32a:	d10d      	bne.n	2b348 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2b32c:	687b      	ldr	r3, [r7, #4]
   2b32e:	68db      	ldr	r3, [r3, #12]
   2b330:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2b332:	693b      	ldr	r3, [r7, #16]
   2b334:	2b00      	cmp	r3, #0
   2b336:	d004      	beq.n	2b342 <create_chain+0x26>
   2b338:	687b      	ldr	r3, [r7, #4]
   2b33a:	699a      	ldr	r2, [r3, #24]
   2b33c:	693b      	ldr	r3, [r7, #16]
   2b33e:	429a      	cmp	r2, r3
   2b340:	d818      	bhi.n	2b374 <create_chain+0x58>
   2b342:	2301      	movs	r3, #1
   2b344:	613b      	str	r3, [r7, #16]
   2b346:	e015      	b.n	2b374 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2b348:	683a      	ldr	r2, [r7, #0]
   2b34a:	687b      	ldr	r3, [r7, #4]
   2b34c:	0011      	movs	r1, r2
   2b34e:	0018      	movs	r0, r3
   2b350:	4b3e      	ldr	r3, [pc, #248]	; (2b44c <create_chain+0x130>)
   2b352:	4798      	blx	r3
   2b354:	0003      	movs	r3, r0
   2b356:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2b358:	68bb      	ldr	r3, [r7, #8]
   2b35a:	2b01      	cmp	r3, #1
   2b35c:	d801      	bhi.n	2b362 <create_chain+0x46>
   2b35e:	2301      	movs	r3, #1
   2b360:	e070      	b.n	2b444 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2b362:	687b      	ldr	r3, [r7, #4]
   2b364:	699a      	ldr	r2, [r3, #24]
   2b366:	68bb      	ldr	r3, [r7, #8]
   2b368:	429a      	cmp	r2, r3
   2b36a:	d901      	bls.n	2b370 <create_chain+0x54>
   2b36c:	68bb      	ldr	r3, [r7, #8]
   2b36e:	e069      	b.n	2b444 <create_chain+0x128>
		scl = clst;
   2b370:	683b      	ldr	r3, [r7, #0]
   2b372:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2b374:	693b      	ldr	r3, [r7, #16]
   2b376:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2b378:	697b      	ldr	r3, [r7, #20]
   2b37a:	3301      	adds	r3, #1
   2b37c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2b37e:	687b      	ldr	r3, [r7, #4]
   2b380:	699a      	ldr	r2, [r3, #24]
   2b382:	697b      	ldr	r3, [r7, #20]
   2b384:	429a      	cmp	r2, r3
   2b386:	d807      	bhi.n	2b398 <create_chain+0x7c>
			ncl = 2;
   2b388:	2302      	movs	r3, #2
   2b38a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2b38c:	697a      	ldr	r2, [r7, #20]
   2b38e:	693b      	ldr	r3, [r7, #16]
   2b390:	429a      	cmp	r2, r3
   2b392:	d901      	bls.n	2b398 <create_chain+0x7c>
   2b394:	2300      	movs	r3, #0
   2b396:	e055      	b.n	2b444 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2b398:	697a      	ldr	r2, [r7, #20]
   2b39a:	687b      	ldr	r3, [r7, #4]
   2b39c:	0011      	movs	r1, r2
   2b39e:	0018      	movs	r0, r3
   2b3a0:	4b2a      	ldr	r3, [pc, #168]	; (2b44c <create_chain+0x130>)
   2b3a2:	4798      	blx	r3
   2b3a4:	0003      	movs	r3, r0
   2b3a6:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2b3a8:	68bb      	ldr	r3, [r7, #8]
   2b3aa:	2b00      	cmp	r3, #0
   2b3ac:	d00d      	beq.n	2b3ca <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2b3ae:	68bb      	ldr	r3, [r7, #8]
   2b3b0:	3301      	adds	r3, #1
   2b3b2:	d002      	beq.n	2b3ba <create_chain+0x9e>
   2b3b4:	68bb      	ldr	r3, [r7, #8]
   2b3b6:	2b01      	cmp	r3, #1
   2b3b8:	d101      	bne.n	2b3be <create_chain+0xa2>
			return cs;
   2b3ba:	68bb      	ldr	r3, [r7, #8]
   2b3bc:	e042      	b.n	2b444 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2b3be:	697a      	ldr	r2, [r7, #20]
   2b3c0:	693b      	ldr	r3, [r7, #16]
   2b3c2:	429a      	cmp	r2, r3
   2b3c4:	d1d8      	bne.n	2b378 <create_chain+0x5c>
   2b3c6:	2300      	movs	r3, #0
   2b3c8:	e03c      	b.n	2b444 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2b3ca:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2b3cc:	230f      	movs	r3, #15
   2b3ce:	18fc      	adds	r4, r7, r3
   2b3d0:	4a1f      	ldr	r2, [pc, #124]	; (2b450 <create_chain+0x134>)
   2b3d2:	6979      	ldr	r1, [r7, #20]
   2b3d4:	687b      	ldr	r3, [r7, #4]
   2b3d6:	0018      	movs	r0, r3
   2b3d8:	4b1e      	ldr	r3, [pc, #120]	; (2b454 <create_chain+0x138>)
   2b3da:	4798      	blx	r3
   2b3dc:	0003      	movs	r3, r0
   2b3de:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2b3e0:	230f      	movs	r3, #15
   2b3e2:	18fb      	adds	r3, r7, r3
   2b3e4:	781b      	ldrb	r3, [r3, #0]
   2b3e6:	2b00      	cmp	r3, #0
   2b3e8:	d10c      	bne.n	2b404 <create_chain+0xe8>
   2b3ea:	683b      	ldr	r3, [r7, #0]
   2b3ec:	2b00      	cmp	r3, #0
   2b3ee:	d009      	beq.n	2b404 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2b3f0:	230f      	movs	r3, #15
   2b3f2:	18fc      	adds	r4, r7, r3
   2b3f4:	697a      	ldr	r2, [r7, #20]
   2b3f6:	6839      	ldr	r1, [r7, #0]
   2b3f8:	687b      	ldr	r3, [r7, #4]
   2b3fa:	0018      	movs	r0, r3
   2b3fc:	4b15      	ldr	r3, [pc, #84]	; (2b454 <create_chain+0x138>)
   2b3fe:	4798      	blx	r3
   2b400:	0003      	movs	r3, r0
   2b402:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2b404:	230f      	movs	r3, #15
   2b406:	18fb      	adds	r3, r7, r3
   2b408:	781b      	ldrb	r3, [r3, #0]
   2b40a:	2b00      	cmp	r3, #0
   2b40c:	d10f      	bne.n	2b42e <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2b40e:	687b      	ldr	r3, [r7, #4]
   2b410:	697a      	ldr	r2, [r7, #20]
   2b412:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2b414:	687b      	ldr	r3, [r7, #4]
   2b416:	691b      	ldr	r3, [r3, #16]
   2b418:	3301      	adds	r3, #1
   2b41a:	d012      	beq.n	2b442 <create_chain+0x126>
			fs->free_clust--;
   2b41c:	687b      	ldr	r3, [r7, #4]
   2b41e:	691b      	ldr	r3, [r3, #16]
   2b420:	1e5a      	subs	r2, r3, #1
   2b422:	687b      	ldr	r3, [r7, #4]
   2b424:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2b426:	687b      	ldr	r3, [r7, #4]
   2b428:	2201      	movs	r2, #1
   2b42a:	715a      	strb	r2, [r3, #5]
   2b42c:	e009      	b.n	2b442 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2b42e:	230f      	movs	r3, #15
   2b430:	18fb      	adds	r3, r7, r3
   2b432:	781b      	ldrb	r3, [r3, #0]
   2b434:	2b01      	cmp	r3, #1
   2b436:	d102      	bne.n	2b43e <create_chain+0x122>
   2b438:	2301      	movs	r3, #1
   2b43a:	425b      	negs	r3, r3
   2b43c:	e000      	b.n	2b440 <create_chain+0x124>
   2b43e:	2301      	movs	r3, #1
   2b440:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2b442:	697b      	ldr	r3, [r7, #20]
}
   2b444:	0018      	movs	r0, r3
   2b446:	46bd      	mov	sp, r7
   2b448:	b007      	add	sp, #28
   2b44a:	bd90      	pop	{r4, r7, pc}
   2b44c:	0002aead 	.word	0x0002aead
   2b450:	0fffffff 	.word	0x0fffffff
   2b454:	0002b019 	.word	0x0002b019

0002b458 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2b458:	b580      	push	{r7, lr}
   2b45a:	b084      	sub	sp, #16
   2b45c:	af00      	add	r7, sp, #0
   2b45e:	6078      	str	r0, [r7, #4]
   2b460:	000a      	movs	r2, r1
   2b462:	1cbb      	adds	r3, r7, #2
   2b464:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2b466:	687b      	ldr	r3, [r7, #4]
   2b468:	1cba      	adds	r2, r7, #2
   2b46a:	8812      	ldrh	r2, [r2, #0]
   2b46c:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2b46e:	687b      	ldr	r3, [r7, #4]
   2b470:	689b      	ldr	r3, [r3, #8]
   2b472:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2b474:	68fb      	ldr	r3, [r7, #12]
   2b476:	2b01      	cmp	r3, #1
   2b478:	d005      	beq.n	2b486 <dir_sdi+0x2e>
   2b47a:	687b      	ldr	r3, [r7, #4]
   2b47c:	681b      	ldr	r3, [r3, #0]
   2b47e:	699a      	ldr	r2, [r3, #24]
   2b480:	68fb      	ldr	r3, [r7, #12]
   2b482:	429a      	cmp	r2, r3
   2b484:	d801      	bhi.n	2b48a <dir_sdi+0x32>
		return FR_INT_ERR;
   2b486:	2302      	movs	r3, #2
   2b488:	e075      	b.n	2b576 <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2b48a:	68fb      	ldr	r3, [r7, #12]
   2b48c:	2b00      	cmp	r3, #0
   2b48e:	d108      	bne.n	2b4a2 <dir_sdi+0x4a>
   2b490:	687b      	ldr	r3, [r7, #4]
   2b492:	681b      	ldr	r3, [r3, #0]
   2b494:	781b      	ldrb	r3, [r3, #0]
   2b496:	2b03      	cmp	r3, #3
   2b498:	d103      	bne.n	2b4a2 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2b49a:	687b      	ldr	r3, [r7, #4]
   2b49c:	681b      	ldr	r3, [r3, #0]
   2b49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b4a0:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2b4a2:	68fb      	ldr	r3, [r7, #12]
   2b4a4:	2b00      	cmp	r3, #0
   2b4a6:	d116      	bne.n	2b4d6 <dir_sdi+0x7e>
		dj->clust = clst;
   2b4a8:	687b      	ldr	r3, [r7, #4]
   2b4aa:	68fa      	ldr	r2, [r7, #12]
   2b4ac:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2b4ae:	687b      	ldr	r3, [r7, #4]
   2b4b0:	681b      	ldr	r3, [r3, #0]
   2b4b2:	891b      	ldrh	r3, [r3, #8]
   2b4b4:	1cba      	adds	r2, r7, #2
   2b4b6:	8812      	ldrh	r2, [r2, #0]
   2b4b8:	429a      	cmp	r2, r3
   2b4ba:	d301      	bcc.n	2b4c0 <dir_sdi+0x68>
			return FR_INT_ERR;
   2b4bc:	2302      	movs	r3, #2
   2b4be:	e05a      	b.n	2b576 <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2b4c0:	687b      	ldr	r3, [r7, #4]
   2b4c2:	681b      	ldr	r3, [r3, #0]
   2b4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b4c6:	1cba      	adds	r2, r7, #2
   2b4c8:	8812      	ldrh	r2, [r2, #0]
   2b4ca:	0912      	lsrs	r2, r2, #4
   2b4cc:	b292      	uxth	r2, r2
   2b4ce:	189a      	adds	r2, r3, r2
   2b4d0:	687b      	ldr	r3, [r7, #4]
   2b4d2:	611a      	str	r2, [r3, #16]
   2b4d4:	e042      	b.n	2b55c <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2b4d6:	687b      	ldr	r3, [r7, #4]
   2b4d8:	681b      	ldr	r3, [r3, #0]
   2b4da:	789b      	ldrb	r3, [r3, #2]
   2b4dc:	b29a      	uxth	r2, r3
   2b4de:	230a      	movs	r3, #10
   2b4e0:	18fb      	adds	r3, r7, r3
   2b4e2:	0112      	lsls	r2, r2, #4
   2b4e4:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2b4e6:	e020      	b.n	2b52a <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2b4e8:	687b      	ldr	r3, [r7, #4]
   2b4ea:	681b      	ldr	r3, [r3, #0]
   2b4ec:	68fa      	ldr	r2, [r7, #12]
   2b4ee:	0011      	movs	r1, r2
   2b4f0:	0018      	movs	r0, r3
   2b4f2:	4b23      	ldr	r3, [pc, #140]	; (2b580 <dir_sdi+0x128>)
   2b4f4:	4798      	blx	r3
   2b4f6:	0003      	movs	r3, r0
   2b4f8:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2b4fa:	68fb      	ldr	r3, [r7, #12]
   2b4fc:	3301      	adds	r3, #1
   2b4fe:	d101      	bne.n	2b504 <dir_sdi+0xac>
   2b500:	2301      	movs	r3, #1
   2b502:	e038      	b.n	2b576 <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2b504:	68fb      	ldr	r3, [r7, #12]
   2b506:	2b01      	cmp	r3, #1
   2b508:	d905      	bls.n	2b516 <dir_sdi+0xbe>
   2b50a:	687b      	ldr	r3, [r7, #4]
   2b50c:	681b      	ldr	r3, [r3, #0]
   2b50e:	699a      	ldr	r2, [r3, #24]
   2b510:	68fb      	ldr	r3, [r7, #12]
   2b512:	429a      	cmp	r2, r3
   2b514:	d801      	bhi.n	2b51a <dir_sdi+0xc2>
				return FR_INT_ERR;
   2b516:	2302      	movs	r3, #2
   2b518:	e02d      	b.n	2b576 <dir_sdi+0x11e>
			idx -= ic;
   2b51a:	1cbb      	adds	r3, r7, #2
   2b51c:	1cb9      	adds	r1, r7, #2
   2b51e:	220a      	movs	r2, #10
   2b520:	18ba      	adds	r2, r7, r2
   2b522:	8809      	ldrh	r1, [r1, #0]
   2b524:	8812      	ldrh	r2, [r2, #0]
   2b526:	1a8a      	subs	r2, r1, r2
   2b528:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2b52a:	1cba      	adds	r2, r7, #2
   2b52c:	230a      	movs	r3, #10
   2b52e:	18fb      	adds	r3, r7, r3
   2b530:	8812      	ldrh	r2, [r2, #0]
   2b532:	881b      	ldrh	r3, [r3, #0]
   2b534:	429a      	cmp	r2, r3
   2b536:	d2d7      	bcs.n	2b4e8 <dir_sdi+0x90>
		}
		dj->clust = clst;
   2b538:	687b      	ldr	r3, [r7, #4]
   2b53a:	68fa      	ldr	r2, [r7, #12]
   2b53c:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2b53e:	687b      	ldr	r3, [r7, #4]
   2b540:	681b      	ldr	r3, [r3, #0]
   2b542:	68fa      	ldr	r2, [r7, #12]
   2b544:	0011      	movs	r1, r2
   2b546:	0018      	movs	r0, r3
   2b548:	4b0e      	ldr	r3, [pc, #56]	; (2b584 <dir_sdi+0x12c>)
   2b54a:	4798      	blx	r3
   2b54c:	0002      	movs	r2, r0
   2b54e:	1cbb      	adds	r3, r7, #2
   2b550:	881b      	ldrh	r3, [r3, #0]
   2b552:	091b      	lsrs	r3, r3, #4
   2b554:	b29b      	uxth	r3, r3
   2b556:	18d2      	adds	r2, r2, r3
   2b558:	687b      	ldr	r3, [r7, #4]
   2b55a:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2b55c:	687b      	ldr	r3, [r7, #4]
   2b55e:	681b      	ldr	r3, [r3, #0]
   2b560:	3330      	adds	r3, #48	; 0x30
   2b562:	001a      	movs	r2, r3
   2b564:	1cbb      	adds	r3, r7, #2
   2b566:	881b      	ldrh	r3, [r3, #0]
   2b568:	210f      	movs	r1, #15
   2b56a:	400b      	ands	r3, r1
   2b56c:	015b      	lsls	r3, r3, #5
   2b56e:	18d2      	adds	r2, r2, r3
   2b570:	687b      	ldr	r3, [r7, #4]
   2b572:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2b574:	2300      	movs	r3, #0
}
   2b576:	0018      	movs	r0, r3
   2b578:	46bd      	mov	sp, r7
   2b57a:	b004      	add	sp, #16
   2b57c:	bd80      	pop	{r7, pc}
   2b57e:	46c0      	nop			; (mov r8, r8)
   2b580:	0002aead 	.word	0x0002aead
   2b584:	0002ae75 	.word	0x0002ae75

0002b588 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2b588:	b590      	push	{r4, r7, lr}
   2b58a:	b085      	sub	sp, #20
   2b58c:	af00      	add	r7, sp, #0
   2b58e:	6078      	str	r0, [r7, #4]
   2b590:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2b592:	687b      	ldr	r3, [r7, #4]
   2b594:	88da      	ldrh	r2, [r3, #6]
   2b596:	2308      	movs	r3, #8
   2b598:	18fb      	adds	r3, r7, r3
   2b59a:	3201      	adds	r2, #1
   2b59c:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2b59e:	2308      	movs	r3, #8
   2b5a0:	18fb      	adds	r3, r7, r3
   2b5a2:	881b      	ldrh	r3, [r3, #0]
   2b5a4:	2b00      	cmp	r3, #0
   2b5a6:	d003      	beq.n	2b5b0 <dir_next+0x28>
   2b5a8:	687b      	ldr	r3, [r7, #4]
   2b5aa:	691b      	ldr	r3, [r3, #16]
   2b5ac:	2b00      	cmp	r3, #0
   2b5ae:	d101      	bne.n	2b5b4 <dir_next+0x2c>
		return FR_NO_FILE;
   2b5b0:	2304      	movs	r3, #4
   2b5b2:	e0d2      	b.n	2b75a <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2b5b4:	2308      	movs	r3, #8
   2b5b6:	18fb      	adds	r3, r7, r3
   2b5b8:	881b      	ldrh	r3, [r3, #0]
   2b5ba:	220f      	movs	r2, #15
   2b5bc:	4013      	ands	r3, r2
   2b5be:	b29b      	uxth	r3, r3
   2b5c0:	2b00      	cmp	r3, #0
   2b5c2:	d000      	beq.n	2b5c6 <dir_next+0x3e>
   2b5c4:	e0b6      	b.n	2b734 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2b5c6:	687b      	ldr	r3, [r7, #4]
   2b5c8:	691b      	ldr	r3, [r3, #16]
   2b5ca:	1c5a      	adds	r2, r3, #1
   2b5cc:	687b      	ldr	r3, [r7, #4]
   2b5ce:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2b5d0:	687b      	ldr	r3, [r7, #4]
   2b5d2:	68db      	ldr	r3, [r3, #12]
   2b5d4:	2b00      	cmp	r3, #0
   2b5d6:	d10a      	bne.n	2b5ee <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2b5d8:	687b      	ldr	r3, [r7, #4]
   2b5da:	681b      	ldr	r3, [r3, #0]
   2b5dc:	891b      	ldrh	r3, [r3, #8]
   2b5de:	2208      	movs	r2, #8
   2b5e0:	18ba      	adds	r2, r7, r2
   2b5e2:	8812      	ldrh	r2, [r2, #0]
   2b5e4:	429a      	cmp	r2, r3
   2b5e6:	d200      	bcs.n	2b5ea <dir_next+0x62>
   2b5e8:	e0a4      	b.n	2b734 <dir_next+0x1ac>
				return FR_NO_FILE;
   2b5ea:	2304      	movs	r3, #4
   2b5ec:	e0b5      	b.n	2b75a <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2b5ee:	2308      	movs	r3, #8
   2b5f0:	18fb      	adds	r3, r7, r3
   2b5f2:	881b      	ldrh	r3, [r3, #0]
   2b5f4:	091b      	lsrs	r3, r3, #4
   2b5f6:	b29b      	uxth	r3, r3
   2b5f8:	001a      	movs	r2, r3
   2b5fa:	687b      	ldr	r3, [r7, #4]
   2b5fc:	681b      	ldr	r3, [r3, #0]
   2b5fe:	789b      	ldrb	r3, [r3, #2]
   2b600:	3b01      	subs	r3, #1
   2b602:	4013      	ands	r3, r2
   2b604:	d000      	beq.n	2b608 <dir_next+0x80>
   2b606:	e095      	b.n	2b734 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2b608:	687b      	ldr	r3, [r7, #4]
   2b60a:	681a      	ldr	r2, [r3, #0]
   2b60c:	687b      	ldr	r3, [r7, #4]
   2b60e:	68db      	ldr	r3, [r3, #12]
   2b610:	0019      	movs	r1, r3
   2b612:	0010      	movs	r0, r2
   2b614:	4b53      	ldr	r3, [pc, #332]	; (2b764 <dir_next+0x1dc>)
   2b616:	4798      	blx	r3
   2b618:	0003      	movs	r3, r0
   2b61a:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2b61c:	68fb      	ldr	r3, [r7, #12]
   2b61e:	2b01      	cmp	r3, #1
   2b620:	d801      	bhi.n	2b626 <dir_next+0x9e>
   2b622:	2302      	movs	r3, #2
   2b624:	e099      	b.n	2b75a <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2b626:	68fb      	ldr	r3, [r7, #12]
   2b628:	3301      	adds	r3, #1
   2b62a:	d101      	bne.n	2b630 <dir_next+0xa8>
   2b62c:	2301      	movs	r3, #1
   2b62e:	e094      	b.n	2b75a <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2b630:	687b      	ldr	r3, [r7, #4]
   2b632:	681b      	ldr	r3, [r3, #0]
   2b634:	699a      	ldr	r2, [r3, #24]
   2b636:	68fb      	ldr	r3, [r7, #12]
   2b638:	429a      	cmp	r2, r3
   2b63a:	d900      	bls.n	2b63e <dir_next+0xb6>
   2b63c:	e06d      	b.n	2b71a <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2b63e:	683b      	ldr	r3, [r7, #0]
   2b640:	2b00      	cmp	r3, #0
   2b642:	d101      	bne.n	2b648 <dir_next+0xc0>
   2b644:	2304      	movs	r3, #4
   2b646:	e088      	b.n	2b75a <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2b648:	687b      	ldr	r3, [r7, #4]
   2b64a:	681a      	ldr	r2, [r3, #0]
   2b64c:	687b      	ldr	r3, [r7, #4]
   2b64e:	68db      	ldr	r3, [r3, #12]
   2b650:	0019      	movs	r1, r3
   2b652:	0010      	movs	r0, r2
   2b654:	4b44      	ldr	r3, [pc, #272]	; (2b768 <dir_next+0x1e0>)
   2b656:	4798      	blx	r3
   2b658:	0003      	movs	r3, r0
   2b65a:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2b65c:	68fb      	ldr	r3, [r7, #12]
   2b65e:	2b00      	cmp	r3, #0
   2b660:	d101      	bne.n	2b666 <dir_next+0xde>
   2b662:	2307      	movs	r3, #7
   2b664:	e079      	b.n	2b75a <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2b666:	68fb      	ldr	r3, [r7, #12]
   2b668:	2b01      	cmp	r3, #1
   2b66a:	d101      	bne.n	2b670 <dir_next+0xe8>
   2b66c:	2302      	movs	r3, #2
   2b66e:	e074      	b.n	2b75a <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2b670:	68fb      	ldr	r3, [r7, #12]
   2b672:	3301      	adds	r3, #1
   2b674:	d101      	bne.n	2b67a <dir_next+0xf2>
   2b676:	2301      	movs	r3, #1
   2b678:	e06f      	b.n	2b75a <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2b67a:	687b      	ldr	r3, [r7, #4]
   2b67c:	681b      	ldr	r3, [r3, #0]
   2b67e:	2100      	movs	r1, #0
   2b680:	0018      	movs	r0, r3
   2b682:	4b3a      	ldr	r3, [pc, #232]	; (2b76c <dir_next+0x1e4>)
   2b684:	4798      	blx	r3
   2b686:	1e03      	subs	r3, r0, #0
   2b688:	d001      	beq.n	2b68e <dir_next+0x106>
   2b68a:	2301      	movs	r3, #1
   2b68c:	e065      	b.n	2b75a <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2b68e:	687b      	ldr	r3, [r7, #4]
   2b690:	681b      	ldr	r3, [r3, #0]
   2b692:	3330      	adds	r3, #48	; 0x30
   2b694:	0018      	movs	r0, r3
   2b696:	2380      	movs	r3, #128	; 0x80
   2b698:	009b      	lsls	r3, r3, #2
   2b69a:	001a      	movs	r2, r3
   2b69c:	2100      	movs	r1, #0
   2b69e:	4b34      	ldr	r3, [pc, #208]	; (2b770 <dir_next+0x1e8>)
   2b6a0:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2b6a2:	687b      	ldr	r3, [r7, #4]
   2b6a4:	681c      	ldr	r4, [r3, #0]
   2b6a6:	687b      	ldr	r3, [r7, #4]
   2b6a8:	681b      	ldr	r3, [r3, #0]
   2b6aa:	68fa      	ldr	r2, [r7, #12]
   2b6ac:	0011      	movs	r1, r2
   2b6ae:	0018      	movs	r0, r3
   2b6b0:	4b30      	ldr	r3, [pc, #192]	; (2b774 <dir_next+0x1ec>)
   2b6b2:	4798      	blx	r3
   2b6b4:	0003      	movs	r3, r0
   2b6b6:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2b6b8:	230b      	movs	r3, #11
   2b6ba:	18fb      	adds	r3, r7, r3
   2b6bc:	2200      	movs	r2, #0
   2b6be:	701a      	strb	r2, [r3, #0]
   2b6c0:	e019      	b.n	2b6f6 <dir_next+0x16e>
						dj->fs->wflag = 1;
   2b6c2:	687b      	ldr	r3, [r7, #4]
   2b6c4:	681b      	ldr	r3, [r3, #0]
   2b6c6:	2201      	movs	r2, #1
   2b6c8:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2b6ca:	687b      	ldr	r3, [r7, #4]
   2b6cc:	681b      	ldr	r3, [r3, #0]
   2b6ce:	2100      	movs	r1, #0
   2b6d0:	0018      	movs	r0, r3
   2b6d2:	4b26      	ldr	r3, [pc, #152]	; (2b76c <dir_next+0x1e4>)
   2b6d4:	4798      	blx	r3
   2b6d6:	1e03      	subs	r3, r0, #0
   2b6d8:	d001      	beq.n	2b6de <dir_next+0x156>
   2b6da:	2301      	movs	r3, #1
   2b6dc:	e03d      	b.n	2b75a <dir_next+0x1d2>
						dj->fs->winsect++;
   2b6de:	687b      	ldr	r3, [r7, #4]
   2b6e0:	681b      	ldr	r3, [r3, #0]
   2b6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2b6e4:	3201      	adds	r2, #1
   2b6e6:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2b6e8:	230b      	movs	r3, #11
   2b6ea:	18fb      	adds	r3, r7, r3
   2b6ec:	781a      	ldrb	r2, [r3, #0]
   2b6ee:	230b      	movs	r3, #11
   2b6f0:	18fb      	adds	r3, r7, r3
   2b6f2:	3201      	adds	r2, #1
   2b6f4:	701a      	strb	r2, [r3, #0]
   2b6f6:	687b      	ldr	r3, [r7, #4]
   2b6f8:	681b      	ldr	r3, [r3, #0]
   2b6fa:	789b      	ldrb	r3, [r3, #2]
   2b6fc:	220b      	movs	r2, #11
   2b6fe:	18ba      	adds	r2, r7, r2
   2b700:	7812      	ldrb	r2, [r2, #0]
   2b702:	429a      	cmp	r2, r3
   2b704:	d3dd      	bcc.n	2b6c2 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2b706:	687b      	ldr	r3, [r7, #4]
   2b708:	681b      	ldr	r3, [r3, #0]
   2b70a:	687a      	ldr	r2, [r7, #4]
   2b70c:	6812      	ldr	r2, [r2, #0]
   2b70e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2b710:	220b      	movs	r2, #11
   2b712:	18ba      	adds	r2, r7, r2
   2b714:	7812      	ldrb	r2, [r2, #0]
   2b716:	1a8a      	subs	r2, r1, r2
   2b718:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2b71a:	687b      	ldr	r3, [r7, #4]
   2b71c:	68fa      	ldr	r2, [r7, #12]
   2b71e:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2b720:	687b      	ldr	r3, [r7, #4]
   2b722:	681b      	ldr	r3, [r3, #0]
   2b724:	68fa      	ldr	r2, [r7, #12]
   2b726:	0011      	movs	r1, r2
   2b728:	0018      	movs	r0, r3
   2b72a:	4b12      	ldr	r3, [pc, #72]	; (2b774 <dir_next+0x1ec>)
   2b72c:	4798      	blx	r3
   2b72e:	0002      	movs	r2, r0
   2b730:	687b      	ldr	r3, [r7, #4]
   2b732:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2b734:	687b      	ldr	r3, [r7, #4]
   2b736:	2208      	movs	r2, #8
   2b738:	18ba      	adds	r2, r7, r2
   2b73a:	8812      	ldrh	r2, [r2, #0]
   2b73c:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2b73e:	687b      	ldr	r3, [r7, #4]
   2b740:	681b      	ldr	r3, [r3, #0]
   2b742:	3330      	adds	r3, #48	; 0x30
   2b744:	001a      	movs	r2, r3
   2b746:	2308      	movs	r3, #8
   2b748:	18fb      	adds	r3, r7, r3
   2b74a:	881b      	ldrh	r3, [r3, #0]
   2b74c:	210f      	movs	r1, #15
   2b74e:	400b      	ands	r3, r1
   2b750:	015b      	lsls	r3, r3, #5
   2b752:	18d2      	adds	r2, r2, r3
   2b754:	687b      	ldr	r3, [r7, #4]
   2b756:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2b758:	2300      	movs	r3, #0
}
   2b75a:	0018      	movs	r0, r3
   2b75c:	46bd      	mov	sp, r7
   2b75e:	b005      	add	sp, #20
   2b760:	bd90      	pop	{r4, r7, pc}
   2b762:	46c0      	nop			; (mov r8, r8)
   2b764:	0002aead 	.word	0x0002aead
   2b768:	0002b31d 	.word	0x0002b31d
   2b76c:	0002ac15 	.word	0x0002ac15
   2b770:	0002ab69 	.word	0x0002ab69
   2b774:	0002ae75 	.word	0x0002ae75

0002b778 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2b778:	b590      	push	{r4, r7, lr}
   2b77a:	b087      	sub	sp, #28
   2b77c:	af00      	add	r7, sp, #0
   2b77e:	6078      	str	r0, [r7, #4]
   2b780:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2b782:	683b      	ldr	r3, [r7, #0]
   2b784:	781b      	ldrb	r3, [r3, #0]
   2b786:	001a      	movs	r2, r3
   2b788:	2340      	movs	r3, #64	; 0x40
   2b78a:	439a      	bics	r2, r3
   2b78c:	0013      	movs	r3, r2
   2b78e:	1e5a      	subs	r2, r3, #1
   2b790:	0013      	movs	r3, r2
   2b792:	005b      	lsls	r3, r3, #1
   2b794:	189b      	adds	r3, r3, r2
   2b796:	009b      	lsls	r3, r3, #2
   2b798:	189b      	adds	r3, r3, r2
   2b79a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2b79c:	2300      	movs	r3, #0
   2b79e:	613b      	str	r3, [r7, #16]
   2b7a0:	230e      	movs	r3, #14
   2b7a2:	18fb      	adds	r3, r7, r3
   2b7a4:	2201      	movs	r2, #1
   2b7a6:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2b7a8:	4a31      	ldr	r2, [pc, #196]	; (2b870 <cmp_lfn+0xf8>)
   2b7aa:	693b      	ldr	r3, [r7, #16]
   2b7ac:	18d3      	adds	r3, r2, r3
   2b7ae:	781b      	ldrb	r3, [r3, #0]
   2b7b0:	3301      	adds	r3, #1
   2b7b2:	683a      	ldr	r2, [r7, #0]
   2b7b4:	18d3      	adds	r3, r2, r3
   2b7b6:	781b      	ldrb	r3, [r3, #0]
   2b7b8:	021b      	lsls	r3, r3, #8
   2b7ba:	b21a      	sxth	r2, r3
   2b7bc:	492c      	ldr	r1, [pc, #176]	; (2b870 <cmp_lfn+0xf8>)
   2b7be:	693b      	ldr	r3, [r7, #16]
   2b7c0:	18cb      	adds	r3, r1, r3
   2b7c2:	781b      	ldrb	r3, [r3, #0]
   2b7c4:	0019      	movs	r1, r3
   2b7c6:	683b      	ldr	r3, [r7, #0]
   2b7c8:	185b      	adds	r3, r3, r1
   2b7ca:	781b      	ldrb	r3, [r3, #0]
   2b7cc:	b21b      	sxth	r3, r3
   2b7ce:	4313      	orrs	r3, r2
   2b7d0:	b21a      	sxth	r2, r3
   2b7d2:	230c      	movs	r3, #12
   2b7d4:	18fb      	adds	r3, r7, r3
   2b7d6:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2b7d8:	230e      	movs	r3, #14
   2b7da:	18fb      	adds	r3, r7, r3
   2b7dc:	881b      	ldrh	r3, [r3, #0]
   2b7de:	2b00      	cmp	r3, #0
   2b7e0:	d01f      	beq.n	2b822 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2b7e2:	230e      	movs	r3, #14
   2b7e4:	18fc      	adds	r4, r7, r3
   2b7e6:	230c      	movs	r3, #12
   2b7e8:	18fb      	adds	r3, r7, r3
   2b7ea:	881b      	ldrh	r3, [r3, #0]
   2b7ec:	0018      	movs	r0, r3
   2b7ee:	4b21      	ldr	r3, [pc, #132]	; (2b874 <cmp_lfn+0xfc>)
   2b7f0:	4798      	blx	r3
   2b7f2:	0003      	movs	r3, r0
   2b7f4:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2b7f6:	697b      	ldr	r3, [r7, #20]
   2b7f8:	2bfe      	cmp	r3, #254	; 0xfe
   2b7fa:	d810      	bhi.n	2b81e <cmp_lfn+0xa6>
   2b7fc:	697b      	ldr	r3, [r7, #20]
   2b7fe:	1c5a      	adds	r2, r3, #1
   2b800:	617a      	str	r2, [r7, #20]
   2b802:	005b      	lsls	r3, r3, #1
   2b804:	687a      	ldr	r2, [r7, #4]
   2b806:	18d3      	adds	r3, r2, r3
   2b808:	881b      	ldrh	r3, [r3, #0]
   2b80a:	0018      	movs	r0, r3
   2b80c:	4b19      	ldr	r3, [pc, #100]	; (2b874 <cmp_lfn+0xfc>)
   2b80e:	4798      	blx	r3
   2b810:	0003      	movs	r3, r0
   2b812:	001a      	movs	r2, r3
   2b814:	230e      	movs	r3, #14
   2b816:	18fb      	adds	r3, r7, r3
   2b818:	881b      	ldrh	r3, [r3, #0]
   2b81a:	4293      	cmp	r3, r2
   2b81c:	d009      	beq.n	2b832 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2b81e:	2300      	movs	r3, #0
   2b820:	e022      	b.n	2b868 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2b822:	230c      	movs	r3, #12
   2b824:	18fb      	adds	r3, r7, r3
   2b826:	881b      	ldrh	r3, [r3, #0]
   2b828:	4a13      	ldr	r2, [pc, #76]	; (2b878 <cmp_lfn+0x100>)
   2b82a:	4293      	cmp	r3, r2
   2b82c:	d001      	beq.n	2b832 <cmp_lfn+0xba>
   2b82e:	2300      	movs	r3, #0
   2b830:	e01a      	b.n	2b868 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2b832:	693b      	ldr	r3, [r7, #16]
   2b834:	3301      	adds	r3, #1
   2b836:	613b      	str	r3, [r7, #16]
   2b838:	693b      	ldr	r3, [r7, #16]
   2b83a:	2b0c      	cmp	r3, #12
   2b83c:	d9b4      	bls.n	2b7a8 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2b83e:	683b      	ldr	r3, [r7, #0]
   2b840:	781b      	ldrb	r3, [r3, #0]
   2b842:	001a      	movs	r2, r3
   2b844:	2340      	movs	r3, #64	; 0x40
   2b846:	4013      	ands	r3, r2
   2b848:	d00d      	beq.n	2b866 <cmp_lfn+0xee>
   2b84a:	230e      	movs	r3, #14
   2b84c:	18fb      	adds	r3, r7, r3
   2b84e:	881b      	ldrh	r3, [r3, #0]
   2b850:	2b00      	cmp	r3, #0
   2b852:	d008      	beq.n	2b866 <cmp_lfn+0xee>
   2b854:	697b      	ldr	r3, [r7, #20]
   2b856:	005b      	lsls	r3, r3, #1
   2b858:	687a      	ldr	r2, [r7, #4]
   2b85a:	18d3      	adds	r3, r2, r3
   2b85c:	881b      	ldrh	r3, [r3, #0]
   2b85e:	2b00      	cmp	r3, #0
   2b860:	d001      	beq.n	2b866 <cmp_lfn+0xee>
		return 0;
   2b862:	2300      	movs	r3, #0
   2b864:	e000      	b.n	2b868 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2b866:	2301      	movs	r3, #1
}
   2b868:	0018      	movs	r0, r3
   2b86a:	46bd      	mov	sp, r7
   2b86c:	b007      	add	sp, #28
   2b86e:	bd90      	pop	{r4, r7, pc}
   2b870:	00038c7c 	.word	0x00038c7c
   2b874:	0002d825 	.word	0x0002d825
   2b878:	0000ffff 	.word	0x0000ffff

0002b87c <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2b87c:	b580      	push	{r7, lr}
   2b87e:	b088      	sub	sp, #32
   2b880:	af00      	add	r7, sp, #0
   2b882:	60f8      	str	r0, [r7, #12]
   2b884:	60b9      	str	r1, [r7, #8]
   2b886:	0019      	movs	r1, r3
   2b888:	1dfb      	adds	r3, r7, #7
   2b88a:	701a      	strb	r2, [r3, #0]
   2b88c:	1dbb      	adds	r3, r7, #6
   2b88e:	1c0a      	adds	r2, r1, #0
   2b890:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2b892:	68bb      	ldr	r3, [r7, #8]
   2b894:	330d      	adds	r3, #13
   2b896:	1dba      	adds	r2, r7, #6
   2b898:	7812      	ldrb	r2, [r2, #0]
   2b89a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2b89c:	68bb      	ldr	r3, [r7, #8]
   2b89e:	330b      	adds	r3, #11
   2b8a0:	220f      	movs	r2, #15
   2b8a2:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2b8a4:	68bb      	ldr	r3, [r7, #8]
   2b8a6:	330c      	adds	r3, #12
   2b8a8:	2200      	movs	r2, #0
   2b8aa:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2b8ac:	68bb      	ldr	r3, [r7, #8]
   2b8ae:	331a      	adds	r3, #26
   2b8b0:	2200      	movs	r2, #0
   2b8b2:	701a      	strb	r2, [r3, #0]
   2b8b4:	68bb      	ldr	r3, [r7, #8]
   2b8b6:	331b      	adds	r3, #27
   2b8b8:	2200      	movs	r2, #0
   2b8ba:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2b8bc:	1dfb      	adds	r3, r7, #7
   2b8be:	781b      	ldrb	r3, [r3, #0]
   2b8c0:	1e5a      	subs	r2, r3, #1
   2b8c2:	0013      	movs	r3, r2
   2b8c4:	005b      	lsls	r3, r3, #1
   2b8c6:	189b      	adds	r3, r3, r2
   2b8c8:	009b      	lsls	r3, r3, #2
   2b8ca:	189b      	adds	r3, r3, r2
   2b8cc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2b8ce:	2316      	movs	r3, #22
   2b8d0:	18fb      	adds	r3, r7, r3
   2b8d2:	2200      	movs	r2, #0
   2b8d4:	801a      	strh	r2, [r3, #0]
   2b8d6:	2300      	movs	r3, #0
   2b8d8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2b8da:	2316      	movs	r3, #22
   2b8dc:	18fb      	adds	r3, r7, r3
   2b8de:	881b      	ldrh	r3, [r3, #0]
   2b8e0:	4a28      	ldr	r2, [pc, #160]	; (2b984 <fit_lfn+0x108>)
   2b8e2:	4293      	cmp	r3, r2
   2b8e4:	d009      	beq.n	2b8fa <fit_lfn+0x7e>
   2b8e6:	69fb      	ldr	r3, [r7, #28]
   2b8e8:	1c5a      	adds	r2, r3, #1
   2b8ea:	61fa      	str	r2, [r7, #28]
   2b8ec:	005b      	lsls	r3, r3, #1
   2b8ee:	68fa      	ldr	r2, [r7, #12]
   2b8f0:	18d2      	adds	r2, r2, r3
   2b8f2:	2316      	movs	r3, #22
   2b8f4:	18fb      	adds	r3, r7, r3
   2b8f6:	8812      	ldrh	r2, [r2, #0]
   2b8f8:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2b8fa:	4a23      	ldr	r2, [pc, #140]	; (2b988 <fit_lfn+0x10c>)
   2b8fc:	69bb      	ldr	r3, [r7, #24]
   2b8fe:	18d3      	adds	r3, r2, r3
   2b900:	781b      	ldrb	r3, [r3, #0]
   2b902:	001a      	movs	r2, r3
   2b904:	68bb      	ldr	r3, [r7, #8]
   2b906:	189b      	adds	r3, r3, r2
   2b908:	2216      	movs	r2, #22
   2b90a:	18ba      	adds	r2, r7, r2
   2b90c:	8812      	ldrh	r2, [r2, #0]
   2b90e:	b2d2      	uxtb	r2, r2
   2b910:	701a      	strb	r2, [r3, #0]
   2b912:	4a1d      	ldr	r2, [pc, #116]	; (2b988 <fit_lfn+0x10c>)
   2b914:	69bb      	ldr	r3, [r7, #24]
   2b916:	18d3      	adds	r3, r2, r3
   2b918:	781b      	ldrb	r3, [r3, #0]
   2b91a:	3301      	adds	r3, #1
   2b91c:	68ba      	ldr	r2, [r7, #8]
   2b91e:	18d3      	adds	r3, r2, r3
   2b920:	2216      	movs	r2, #22
   2b922:	18ba      	adds	r2, r7, r2
   2b924:	8812      	ldrh	r2, [r2, #0]
   2b926:	0a12      	lsrs	r2, r2, #8
   2b928:	b292      	uxth	r2, r2
   2b92a:	b2d2      	uxtb	r2, r2
   2b92c:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2b92e:	2316      	movs	r3, #22
   2b930:	18fb      	adds	r3, r7, r3
   2b932:	881b      	ldrh	r3, [r3, #0]
   2b934:	2b00      	cmp	r3, #0
   2b936:	d104      	bne.n	2b942 <fit_lfn+0xc6>
   2b938:	2316      	movs	r3, #22
   2b93a:	18fb      	adds	r3, r7, r3
   2b93c:	2201      	movs	r2, #1
   2b93e:	4252      	negs	r2, r2
   2b940:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2b942:	69bb      	ldr	r3, [r7, #24]
   2b944:	3301      	adds	r3, #1
   2b946:	61bb      	str	r3, [r7, #24]
   2b948:	69bb      	ldr	r3, [r7, #24]
   2b94a:	2b0c      	cmp	r3, #12
   2b94c:	d9c5      	bls.n	2b8da <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2b94e:	2316      	movs	r3, #22
   2b950:	18fb      	adds	r3, r7, r3
   2b952:	881b      	ldrh	r3, [r3, #0]
   2b954:	4a0b      	ldr	r2, [pc, #44]	; (2b984 <fit_lfn+0x108>)
   2b956:	4293      	cmp	r3, r2
   2b958:	d006      	beq.n	2b968 <fit_lfn+0xec>
   2b95a:	69fb      	ldr	r3, [r7, #28]
   2b95c:	005b      	lsls	r3, r3, #1
   2b95e:	68fa      	ldr	r2, [r7, #12]
   2b960:	18d3      	adds	r3, r2, r3
   2b962:	881b      	ldrh	r3, [r3, #0]
   2b964:	2b00      	cmp	r3, #0
   2b966:	d105      	bne.n	2b974 <fit_lfn+0xf8>
   2b968:	1dfb      	adds	r3, r7, #7
   2b96a:	1dfa      	adds	r2, r7, #7
   2b96c:	7812      	ldrb	r2, [r2, #0]
   2b96e:	2140      	movs	r1, #64	; 0x40
   2b970:	430a      	orrs	r2, r1
   2b972:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2b974:	68bb      	ldr	r3, [r7, #8]
   2b976:	1dfa      	adds	r2, r7, #7
   2b978:	7812      	ldrb	r2, [r2, #0]
   2b97a:	701a      	strb	r2, [r3, #0]
}
   2b97c:	46c0      	nop			; (mov r8, r8)
   2b97e:	46bd      	mov	sp, r7
   2b980:	b008      	add	sp, #32
   2b982:	bd80      	pop	{r7, pc}
   2b984:	0000ffff 	.word	0x0000ffff
   2b988:	00038c7c 	.word	0x00038c7c

0002b98c <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2b98c:	b580      	push	{r7, lr}
   2b98e:	b08a      	sub	sp, #40	; 0x28
   2b990:	af00      	add	r7, sp, #0
   2b992:	60f8      	str	r0, [r7, #12]
   2b994:	60b9      	str	r1, [r7, #8]
   2b996:	607a      	str	r2, [r7, #4]
   2b998:	001a      	movs	r2, r3
   2b99a:	1cbb      	adds	r3, r7, #2
   2b99c:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2b99e:	68b9      	ldr	r1, [r7, #8]
   2b9a0:	68fb      	ldr	r3, [r7, #12]
   2b9a2:	220b      	movs	r2, #11
   2b9a4:	0018      	movs	r0, r3
   2b9a6:	4b38      	ldr	r3, [pc, #224]	; (2ba88 <gen_numname+0xfc>)
   2b9a8:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2b9aa:	1cbb      	adds	r3, r7, #2
   2b9ac:	881b      	ldrh	r3, [r3, #0]
   2b9ae:	2b05      	cmp	r3, #5
   2b9b0:	d911      	bls.n	2b9d6 <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2b9b2:	1cbb      	adds	r3, r7, #2
   2b9b4:	881b      	ldrh	r3, [r3, #0]
   2b9b6:	b29a      	uxth	r2, r3
   2b9b8:	0852      	lsrs	r2, r2, #1
   2b9ba:	03db      	lsls	r3, r3, #15
   2b9bc:	4313      	orrs	r3, r2
   2b9be:	b299      	uxth	r1, r3
   2b9c0:	687b      	ldr	r3, [r7, #4]
   2b9c2:	1c9a      	adds	r2, r3, #2
   2b9c4:	607a      	str	r2, [r7, #4]
   2b9c6:	881a      	ldrh	r2, [r3, #0]
   2b9c8:	1cbb      	adds	r3, r7, #2
   2b9ca:	188a      	adds	r2, r1, r2
   2b9cc:	801a      	strh	r2, [r3, #0]
   2b9ce:	687b      	ldr	r3, [r7, #4]
   2b9d0:	881b      	ldrh	r3, [r3, #0]
   2b9d2:	2b00      	cmp	r3, #0
   2b9d4:	d1ed      	bne.n	2b9b2 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2b9d6:	2307      	movs	r3, #7
   2b9d8:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2b9da:	1cbb      	adds	r3, r7, #2
   2b9dc:	881b      	ldrh	r3, [r3, #0]
   2b9de:	b2db      	uxtb	r3, r3
   2b9e0:	220f      	movs	r2, #15
   2b9e2:	4013      	ands	r3, r2
   2b9e4:	b2da      	uxtb	r2, r3
   2b9e6:	2327      	movs	r3, #39	; 0x27
   2b9e8:	18fb      	adds	r3, r7, r3
   2b9ea:	3230      	adds	r2, #48	; 0x30
   2b9ec:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2b9ee:	2327      	movs	r3, #39	; 0x27
   2b9f0:	18fb      	adds	r3, r7, r3
   2b9f2:	781b      	ldrb	r3, [r3, #0]
   2b9f4:	2b39      	cmp	r3, #57	; 0x39
   2b9f6:	d906      	bls.n	2ba06 <gen_numname+0x7a>
   2b9f8:	2327      	movs	r3, #39	; 0x27
   2b9fa:	18fb      	adds	r3, r7, r3
   2b9fc:	2227      	movs	r2, #39	; 0x27
   2b9fe:	18ba      	adds	r2, r7, r2
   2ba00:	7812      	ldrb	r2, [r2, #0]
   2ba02:	3207      	adds	r2, #7
   2ba04:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2ba06:	6a3b      	ldr	r3, [r7, #32]
   2ba08:	1e5a      	subs	r2, r3, #1
   2ba0a:	623a      	str	r2, [r7, #32]
   2ba0c:	2214      	movs	r2, #20
   2ba0e:	18ba      	adds	r2, r7, r2
   2ba10:	2127      	movs	r1, #39	; 0x27
   2ba12:	1879      	adds	r1, r7, r1
   2ba14:	7809      	ldrb	r1, [r1, #0]
   2ba16:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2ba18:	1cbb      	adds	r3, r7, #2
   2ba1a:	1cba      	adds	r2, r7, #2
   2ba1c:	8812      	ldrh	r2, [r2, #0]
   2ba1e:	0912      	lsrs	r2, r2, #4
   2ba20:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2ba22:	1cbb      	adds	r3, r7, #2
   2ba24:	881b      	ldrh	r3, [r3, #0]
   2ba26:	2b00      	cmp	r3, #0
   2ba28:	d1d7      	bne.n	2b9da <gen_numname+0x4e>
	ns[i] = '~';
   2ba2a:	2314      	movs	r3, #20
   2ba2c:	18fa      	adds	r2, r7, r3
   2ba2e:	6a3b      	ldr	r3, [r7, #32]
   2ba30:	18d3      	adds	r3, r2, r3
   2ba32:	227e      	movs	r2, #126	; 0x7e
   2ba34:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2ba36:	2300      	movs	r3, #0
   2ba38:	61fb      	str	r3, [r7, #28]
   2ba3a:	e002      	b.n	2ba42 <gen_numname+0xb6>
   2ba3c:	69fb      	ldr	r3, [r7, #28]
   2ba3e:	3301      	adds	r3, #1
   2ba40:	61fb      	str	r3, [r7, #28]
   2ba42:	69fa      	ldr	r2, [r7, #28]
   2ba44:	6a3b      	ldr	r3, [r7, #32]
   2ba46:	429a      	cmp	r2, r3
   2ba48:	d205      	bcs.n	2ba56 <gen_numname+0xca>
   2ba4a:	68fa      	ldr	r2, [r7, #12]
   2ba4c:	69fb      	ldr	r3, [r7, #28]
   2ba4e:	18d3      	adds	r3, r2, r3
   2ba50:	781b      	ldrb	r3, [r3, #0]
   2ba52:	2b20      	cmp	r3, #32
   2ba54:	d1f2      	bne.n	2ba3c <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2ba56:	69fb      	ldr	r3, [r7, #28]
   2ba58:	1c5a      	adds	r2, r3, #1
   2ba5a:	61fa      	str	r2, [r7, #28]
   2ba5c:	68fa      	ldr	r2, [r7, #12]
   2ba5e:	18d2      	adds	r2, r2, r3
   2ba60:	6a3b      	ldr	r3, [r7, #32]
   2ba62:	2b07      	cmp	r3, #7
   2ba64:	d806      	bhi.n	2ba74 <gen_numname+0xe8>
   2ba66:	6a3b      	ldr	r3, [r7, #32]
   2ba68:	1c59      	adds	r1, r3, #1
   2ba6a:	6239      	str	r1, [r7, #32]
   2ba6c:	2114      	movs	r1, #20
   2ba6e:	1879      	adds	r1, r7, r1
   2ba70:	5ccb      	ldrb	r3, [r1, r3]
   2ba72:	e000      	b.n	2ba76 <gen_numname+0xea>
   2ba74:	2320      	movs	r3, #32
   2ba76:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2ba78:	69fb      	ldr	r3, [r7, #28]
   2ba7a:	2b07      	cmp	r3, #7
   2ba7c:	d9eb      	bls.n	2ba56 <gen_numname+0xca>
}
   2ba7e:	46c0      	nop			; (mov r8, r8)
   2ba80:	46bd      	mov	sp, r7
   2ba82:	b00a      	add	sp, #40	; 0x28
   2ba84:	bd80      	pop	{r7, pc}
   2ba86:	46c0      	nop			; (mov r8, r8)
   2ba88:	0002ab31 	.word	0x0002ab31

0002ba8c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2ba8c:	b580      	push	{r7, lr}
   2ba8e:	b084      	sub	sp, #16
   2ba90:	af00      	add	r7, sp, #0
   2ba92:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2ba94:	230f      	movs	r3, #15
   2ba96:	18fb      	adds	r3, r7, r3
   2ba98:	2200      	movs	r2, #0
   2ba9a:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2ba9c:	230b      	movs	r3, #11
   2ba9e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2baa0:	230f      	movs	r3, #15
   2baa2:	18fb      	adds	r3, r7, r3
   2baa4:	781b      	ldrb	r3, [r3, #0]
   2baa6:	b2da      	uxtb	r2, r3
   2baa8:	0852      	lsrs	r2, r2, #1
   2baaa:	01db      	lsls	r3, r3, #7
   2baac:	4313      	orrs	r3, r2
   2baae:	b2d9      	uxtb	r1, r3
   2bab0:	687b      	ldr	r3, [r7, #4]
   2bab2:	1c5a      	adds	r2, r3, #1
   2bab4:	607a      	str	r2, [r7, #4]
   2bab6:	781a      	ldrb	r2, [r3, #0]
   2bab8:	230f      	movs	r3, #15
   2baba:	18fb      	adds	r3, r7, r3
   2babc:	188a      	adds	r2, r1, r2
   2babe:	701a      	strb	r2, [r3, #0]
   2bac0:	68bb      	ldr	r3, [r7, #8]
   2bac2:	3b01      	subs	r3, #1
   2bac4:	60bb      	str	r3, [r7, #8]
   2bac6:	68bb      	ldr	r3, [r7, #8]
   2bac8:	2b00      	cmp	r3, #0
   2baca:	d1e9      	bne.n	2baa0 <sum_sfn+0x14>
	return sum;
   2bacc:	230f      	movs	r3, #15
   2bace:	18fb      	adds	r3, r7, r3
   2bad0:	781b      	ldrb	r3, [r3, #0]
}
   2bad2:	0018      	movs	r0, r3
   2bad4:	46bd      	mov	sp, r7
   2bad6:	b004      	add	sp, #16
   2bad8:	bd80      	pop	{r7, pc}
	...

0002badc <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2badc:	b590      	push	{r4, r7, lr}
   2bade:	b087      	sub	sp, #28
   2bae0:	af00      	add	r7, sp, #0
   2bae2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2bae4:	2317      	movs	r3, #23
   2bae6:	18fc      	adds	r4, r7, r3
   2bae8:	687b      	ldr	r3, [r7, #4]
   2baea:	2100      	movs	r1, #0
   2baec:	0018      	movs	r0, r3
   2baee:	4b74      	ldr	r3, [pc, #464]	; (2bcc0 <dir_find+0x1e4>)
   2baf0:	4798      	blx	r3
   2baf2:	0003      	movs	r3, r0
   2baf4:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2baf6:	2317      	movs	r3, #23
   2baf8:	18fb      	adds	r3, r7, r3
   2bafa:	781b      	ldrb	r3, [r3, #0]
   2bafc:	2b00      	cmp	r3, #0
   2bafe:	d003      	beq.n	2bb08 <dir_find+0x2c>
   2bb00:	2317      	movs	r3, #23
   2bb02:	18fb      	adds	r3, r7, r3
   2bb04:	781b      	ldrb	r3, [r3, #0]
   2bb06:	e0d6      	b.n	2bcb6 <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2bb08:	2314      	movs	r3, #20
   2bb0a:	18fb      	adds	r3, r7, r3
   2bb0c:	22ff      	movs	r2, #255	; 0xff
   2bb0e:	701a      	strb	r2, [r3, #0]
   2bb10:	2315      	movs	r3, #21
   2bb12:	18fb      	adds	r3, r7, r3
   2bb14:	2214      	movs	r2, #20
   2bb16:	18ba      	adds	r2, r7, r2
   2bb18:	7812      	ldrb	r2, [r2, #0]
   2bb1a:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2bb1c:	687b      	ldr	r3, [r7, #4]
   2bb1e:	681a      	ldr	r2, [r3, #0]
   2bb20:	687b      	ldr	r3, [r7, #4]
   2bb22:	691b      	ldr	r3, [r3, #16]
   2bb24:	2117      	movs	r1, #23
   2bb26:	187c      	adds	r4, r7, r1
   2bb28:	0019      	movs	r1, r3
   2bb2a:	0010      	movs	r0, r2
   2bb2c:	4b65      	ldr	r3, [pc, #404]	; (2bcc4 <dir_find+0x1e8>)
   2bb2e:	4798      	blx	r3
   2bb30:	0003      	movs	r3, r0
   2bb32:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2bb34:	2317      	movs	r3, #23
   2bb36:	18fb      	adds	r3, r7, r3
   2bb38:	781b      	ldrb	r3, [r3, #0]
   2bb3a:	2b00      	cmp	r3, #0
   2bb3c:	d000      	beq.n	2bb40 <dir_find+0x64>
   2bb3e:	e0b2      	b.n	2bca6 <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2bb40:	687b      	ldr	r3, [r7, #4]
   2bb42:	695b      	ldr	r3, [r3, #20]
   2bb44:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2bb46:	2316      	movs	r3, #22
   2bb48:	18fb      	adds	r3, r7, r3
   2bb4a:	693a      	ldr	r2, [r7, #16]
   2bb4c:	7812      	ldrb	r2, [r2, #0]
   2bb4e:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2bb50:	2316      	movs	r3, #22
   2bb52:	18fb      	adds	r3, r7, r3
   2bb54:	781b      	ldrb	r3, [r3, #0]
   2bb56:	2b00      	cmp	r3, #0
   2bb58:	d104      	bne.n	2bb64 <dir_find+0x88>
   2bb5a:	2317      	movs	r3, #23
   2bb5c:	18fb      	adds	r3, r7, r3
   2bb5e:	2204      	movs	r2, #4
   2bb60:	701a      	strb	r2, [r3, #0]
   2bb62:	e0a5      	b.n	2bcb0 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2bb64:	693b      	ldr	r3, [r7, #16]
   2bb66:	330b      	adds	r3, #11
   2bb68:	781a      	ldrb	r2, [r3, #0]
   2bb6a:	230f      	movs	r3, #15
   2bb6c:	18fb      	adds	r3, r7, r3
   2bb6e:	213f      	movs	r1, #63	; 0x3f
   2bb70:	400a      	ands	r2, r1
   2bb72:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2bb74:	2316      	movs	r3, #22
   2bb76:	18fb      	adds	r3, r7, r3
   2bb78:	781b      	ldrb	r3, [r3, #0]
   2bb7a:	2be5      	cmp	r3, #229	; 0xe5
   2bb7c:	d00a      	beq.n	2bb94 <dir_find+0xb8>
   2bb7e:	230f      	movs	r3, #15
   2bb80:	18fb      	adds	r3, r7, r3
   2bb82:	781b      	ldrb	r3, [r3, #0]
   2bb84:	2208      	movs	r2, #8
   2bb86:	4013      	ands	r3, r2
   2bb88:	d009      	beq.n	2bb9e <dir_find+0xc2>
   2bb8a:	230f      	movs	r3, #15
   2bb8c:	18fb      	adds	r3, r7, r3
   2bb8e:	781b      	ldrb	r3, [r3, #0]
   2bb90:	2b0f      	cmp	r3, #15
   2bb92:	d004      	beq.n	2bb9e <dir_find+0xc2>
			ord = 0xFF;
   2bb94:	2315      	movs	r3, #21
   2bb96:	18fb      	adds	r3, r7, r3
   2bb98:	22ff      	movs	r2, #255	; 0xff
   2bb9a:	701a      	strb	r2, [r3, #0]
   2bb9c:	e073      	b.n	2bc86 <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2bb9e:	230f      	movs	r3, #15
   2bba0:	18fb      	adds	r3, r7, r3
   2bba2:	781b      	ldrb	r3, [r3, #0]
   2bba4:	2b0f      	cmp	r3, #15
   2bba6:	d145      	bne.n	2bc34 <dir_find+0x158>
				if (dj->lfn) {
   2bba8:	687b      	ldr	r3, [r7, #4]
   2bbaa:	69db      	ldr	r3, [r3, #28]
   2bbac:	2b00      	cmp	r3, #0
   2bbae:	d100      	bne.n	2bbb2 <dir_find+0xd6>
   2bbb0:	e069      	b.n	2bc86 <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2bbb2:	2316      	movs	r3, #22
   2bbb4:	18fb      	adds	r3, r7, r3
   2bbb6:	781b      	ldrb	r3, [r3, #0]
   2bbb8:	2240      	movs	r2, #64	; 0x40
   2bbba:	4013      	ands	r3, r2
   2bbbc:	d016      	beq.n	2bbec <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2bbbe:	2314      	movs	r3, #20
   2bbc0:	18fb      	adds	r3, r7, r3
   2bbc2:	693a      	ldr	r2, [r7, #16]
   2bbc4:	7b52      	ldrb	r2, [r2, #13]
   2bbc6:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2bbc8:	2316      	movs	r3, #22
   2bbca:	18fb      	adds	r3, r7, r3
   2bbcc:	2216      	movs	r2, #22
   2bbce:	18ba      	adds	r2, r7, r2
   2bbd0:	7812      	ldrb	r2, [r2, #0]
   2bbd2:	2140      	movs	r1, #64	; 0x40
   2bbd4:	438a      	bics	r2, r1
   2bbd6:	701a      	strb	r2, [r3, #0]
   2bbd8:	2315      	movs	r3, #21
   2bbda:	18fb      	adds	r3, r7, r3
   2bbdc:	2216      	movs	r2, #22
   2bbde:	18ba      	adds	r2, r7, r2
   2bbe0:	7812      	ldrb	r2, [r2, #0]
   2bbe2:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2bbe4:	687b      	ldr	r3, [r7, #4]
   2bbe6:	88da      	ldrh	r2, [r3, #6]
   2bbe8:	687b      	ldr	r3, [r7, #4]
   2bbea:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2bbec:	2316      	movs	r3, #22
   2bbee:	18fa      	adds	r2, r7, r3
   2bbf0:	2315      	movs	r3, #21
   2bbf2:	18fb      	adds	r3, r7, r3
   2bbf4:	7812      	ldrb	r2, [r2, #0]
   2bbf6:	781b      	ldrb	r3, [r3, #0]
   2bbf8:	429a      	cmp	r2, r3
   2bbfa:	d116      	bne.n	2bc2a <dir_find+0x14e>
   2bbfc:	693b      	ldr	r3, [r7, #16]
   2bbfe:	330d      	adds	r3, #13
   2bc00:	781b      	ldrb	r3, [r3, #0]
   2bc02:	2214      	movs	r2, #20
   2bc04:	18ba      	adds	r2, r7, r2
   2bc06:	7812      	ldrb	r2, [r2, #0]
   2bc08:	429a      	cmp	r2, r3
   2bc0a:	d10e      	bne.n	2bc2a <dir_find+0x14e>
   2bc0c:	687b      	ldr	r3, [r7, #4]
   2bc0e:	69db      	ldr	r3, [r3, #28]
   2bc10:	693a      	ldr	r2, [r7, #16]
   2bc12:	0011      	movs	r1, r2
   2bc14:	0018      	movs	r0, r3
   2bc16:	4b2c      	ldr	r3, [pc, #176]	; (2bcc8 <dir_find+0x1ec>)
   2bc18:	4798      	blx	r3
   2bc1a:	1e03      	subs	r3, r0, #0
   2bc1c:	d005      	beq.n	2bc2a <dir_find+0x14e>
   2bc1e:	2315      	movs	r3, #21
   2bc20:	18fb      	adds	r3, r7, r3
   2bc22:	781b      	ldrb	r3, [r3, #0]
   2bc24:	3b01      	subs	r3, #1
   2bc26:	b2da      	uxtb	r2, r3
   2bc28:	e000      	b.n	2bc2c <dir_find+0x150>
   2bc2a:	22ff      	movs	r2, #255	; 0xff
   2bc2c:	2315      	movs	r3, #21
   2bc2e:	18fb      	adds	r3, r7, r3
   2bc30:	701a      	strb	r2, [r3, #0]
   2bc32:	e028      	b.n	2bc86 <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2bc34:	2315      	movs	r3, #21
   2bc36:	18fb      	adds	r3, r7, r3
   2bc38:	781b      	ldrb	r3, [r3, #0]
   2bc3a:	2b00      	cmp	r3, #0
   2bc3c:	d10a      	bne.n	2bc54 <dir_find+0x178>
   2bc3e:	693b      	ldr	r3, [r7, #16]
   2bc40:	0018      	movs	r0, r3
   2bc42:	4b22      	ldr	r3, [pc, #136]	; (2bccc <dir_find+0x1f0>)
   2bc44:	4798      	blx	r3
   2bc46:	0003      	movs	r3, r0
   2bc48:	001a      	movs	r2, r3
   2bc4a:	2314      	movs	r3, #20
   2bc4c:	18fb      	adds	r3, r7, r3
   2bc4e:	781b      	ldrb	r3, [r3, #0]
   2bc50:	4293      	cmp	r3, r2
   2bc52:	d02a      	beq.n	2bcaa <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2bc54:	2315      	movs	r3, #21
   2bc56:	18fb      	adds	r3, r7, r3
   2bc58:	22ff      	movs	r2, #255	; 0xff
   2bc5a:	701a      	strb	r2, [r3, #0]
   2bc5c:	687b      	ldr	r3, [r7, #4]
   2bc5e:	2201      	movs	r2, #1
   2bc60:	4252      	negs	r2, r2
   2bc62:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2bc64:	687b      	ldr	r3, [r7, #4]
   2bc66:	699b      	ldr	r3, [r3, #24]
   2bc68:	330b      	adds	r3, #11
   2bc6a:	781b      	ldrb	r3, [r3, #0]
   2bc6c:	001a      	movs	r2, r3
   2bc6e:	2301      	movs	r3, #1
   2bc70:	4013      	ands	r3, r2
   2bc72:	d108      	bne.n	2bc86 <dir_find+0x1aa>
   2bc74:	687b      	ldr	r3, [r7, #4]
   2bc76:	6999      	ldr	r1, [r3, #24]
   2bc78:	693b      	ldr	r3, [r7, #16]
   2bc7a:	220b      	movs	r2, #11
   2bc7c:	0018      	movs	r0, r3
   2bc7e:	4b14      	ldr	r3, [pc, #80]	; (2bcd0 <dir_find+0x1f4>)
   2bc80:	4798      	blx	r3
   2bc82:	1e03      	subs	r3, r0, #0
   2bc84:	d013      	beq.n	2bcae <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2bc86:	2317      	movs	r3, #23
   2bc88:	18fc      	adds	r4, r7, r3
   2bc8a:	687b      	ldr	r3, [r7, #4]
   2bc8c:	2100      	movs	r1, #0
   2bc8e:	0018      	movs	r0, r3
   2bc90:	4b10      	ldr	r3, [pc, #64]	; (2bcd4 <dir_find+0x1f8>)
   2bc92:	4798      	blx	r3
   2bc94:	0003      	movs	r3, r0
   2bc96:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2bc98:	2317      	movs	r3, #23
   2bc9a:	18fb      	adds	r3, r7, r3
   2bc9c:	781b      	ldrb	r3, [r3, #0]
   2bc9e:	2b00      	cmp	r3, #0
   2bca0:	d100      	bne.n	2bca4 <dir_find+0x1c8>
   2bca2:	e73b      	b.n	2bb1c <dir_find+0x40>
   2bca4:	e004      	b.n	2bcb0 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2bca6:	46c0      	nop			; (mov r8, r8)
   2bca8:	e002      	b.n	2bcb0 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2bcaa:	46c0      	nop			; (mov r8, r8)
   2bcac:	e000      	b.n	2bcb0 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2bcae:	46c0      	nop			; (mov r8, r8)

	return res;
   2bcb0:	2317      	movs	r3, #23
   2bcb2:	18fb      	adds	r3, r7, r3
   2bcb4:	781b      	ldrb	r3, [r3, #0]
}
   2bcb6:	0018      	movs	r0, r3
   2bcb8:	46bd      	mov	sp, r7
   2bcba:	b007      	add	sp, #28
   2bcbc:	bd90      	pop	{r4, r7, pc}
   2bcbe:	46c0      	nop			; (mov r8, r8)
   2bcc0:	0002b459 	.word	0x0002b459
   2bcc4:	0002ac15 	.word	0x0002ac15
   2bcc8:	0002b779 	.word	0x0002b779
   2bccc:	0002ba8d 	.word	0x0002ba8d
   2bcd0:	0002ab99 	.word	0x0002ab99
   2bcd4:	0002b589 	.word	0x0002b589

0002bcd8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2bcd8:	b590      	push	{r4, r7, lr}
   2bcda:	b08d      	sub	sp, #52	; 0x34
   2bcdc:	af00      	add	r7, sp, #0
   2bcde:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2bce0:	687b      	ldr	r3, [r7, #4]
   2bce2:	699b      	ldr	r3, [r3, #24]
   2bce4:	627b      	str	r3, [r7, #36]	; 0x24
   2bce6:	687b      	ldr	r3, [r7, #4]
   2bce8:	69db      	ldr	r3, [r3, #28]
   2bcea:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2bcec:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2bcee:	230c      	movs	r3, #12
   2bcf0:	18fb      	adds	r3, r7, r3
   2bcf2:	220c      	movs	r2, #12
   2bcf4:	0018      	movs	r0, r3
   2bcf6:	4bc8      	ldr	r3, [pc, #800]	; (2c018 <dir_register+0x340>)
   2bcf8:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2bcfa:	230c      	movs	r3, #12
   2bcfc:	18fb      	adds	r3, r7, r3
   2bcfe:	7adb      	ldrb	r3, [r3, #11]
   2bd00:	001a      	movs	r2, r3
   2bd02:	2301      	movs	r3, #1
   2bd04:	4013      	ands	r3, r2
   2bd06:	d048      	beq.n	2bd9a <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2bd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2bd0a:	330b      	adds	r3, #11
   2bd0c:	2200      	movs	r2, #0
   2bd0e:	701a      	strb	r2, [r3, #0]
   2bd10:	687b      	ldr	r3, [r7, #4]
   2bd12:	2200      	movs	r2, #0
   2bd14:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2bd16:	232c      	movs	r3, #44	; 0x2c
   2bd18:	18fb      	adds	r3, r7, r3
   2bd1a:	2201      	movs	r2, #1
   2bd1c:	801a      	strh	r2, [r3, #0]
   2bd1e:	e01c      	b.n	2bd5a <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2bd20:	232c      	movs	r3, #44	; 0x2c
   2bd22:	18fb      	adds	r3, r7, r3
   2bd24:	881b      	ldrh	r3, [r3, #0]
   2bd26:	6a3a      	ldr	r2, [r7, #32]
   2bd28:	210c      	movs	r1, #12
   2bd2a:	1879      	adds	r1, r7, r1
   2bd2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2bd2e:	4cbb      	ldr	r4, [pc, #748]	; (2c01c <dir_register+0x344>)
   2bd30:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2bd32:	232f      	movs	r3, #47	; 0x2f
   2bd34:	18fc      	adds	r4, r7, r3
   2bd36:	687b      	ldr	r3, [r7, #4]
   2bd38:	0018      	movs	r0, r3
   2bd3a:	4bb9      	ldr	r3, [pc, #740]	; (2c020 <dir_register+0x348>)
   2bd3c:	4798      	blx	r3
   2bd3e:	0003      	movs	r3, r0
   2bd40:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2bd42:	232f      	movs	r3, #47	; 0x2f
   2bd44:	18fb      	adds	r3, r7, r3
   2bd46:	781b      	ldrb	r3, [r3, #0]
   2bd48:	2b00      	cmp	r3, #0
   2bd4a:	d10c      	bne.n	2bd66 <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2bd4c:	232c      	movs	r3, #44	; 0x2c
   2bd4e:	18fb      	adds	r3, r7, r3
   2bd50:	881a      	ldrh	r2, [r3, #0]
   2bd52:	232c      	movs	r3, #44	; 0x2c
   2bd54:	18fb      	adds	r3, r7, r3
   2bd56:	3201      	adds	r2, #1
   2bd58:	801a      	strh	r2, [r3, #0]
   2bd5a:	232c      	movs	r3, #44	; 0x2c
   2bd5c:	18fb      	adds	r3, r7, r3
   2bd5e:	881b      	ldrh	r3, [r3, #0]
   2bd60:	2b63      	cmp	r3, #99	; 0x63
   2bd62:	d9dd      	bls.n	2bd20 <dir_register+0x48>
   2bd64:	e000      	b.n	2bd68 <dir_register+0x90>
			if (res != FR_OK) break;
   2bd66:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2bd68:	232c      	movs	r3, #44	; 0x2c
   2bd6a:	18fb      	adds	r3, r7, r3
   2bd6c:	881b      	ldrh	r3, [r3, #0]
   2bd6e:	2b64      	cmp	r3, #100	; 0x64
   2bd70:	d101      	bne.n	2bd76 <dir_register+0x9e>
   2bd72:	2307      	movs	r3, #7
   2bd74:	e14c      	b.n	2c010 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2bd76:	232f      	movs	r3, #47	; 0x2f
   2bd78:	18fb      	adds	r3, r7, r3
   2bd7a:	781b      	ldrb	r3, [r3, #0]
   2bd7c:	2b04      	cmp	r3, #4
   2bd7e:	d003      	beq.n	2bd88 <dir_register+0xb0>
   2bd80:	232f      	movs	r3, #47	; 0x2f
   2bd82:	18fb      	adds	r3, r7, r3
   2bd84:	781b      	ldrb	r3, [r3, #0]
   2bd86:	e143      	b.n	2c010 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2bd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2bd8a:	330b      	adds	r3, #11
   2bd8c:	220c      	movs	r2, #12
   2bd8e:	18ba      	adds	r2, r7, r2
   2bd90:	7ad2      	ldrb	r2, [r2, #11]
   2bd92:	701a      	strb	r2, [r3, #0]
   2bd94:	687b      	ldr	r3, [r7, #4]
   2bd96:	6a3a      	ldr	r2, [r7, #32]
   2bd98:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2bd9a:	230c      	movs	r3, #12
   2bd9c:	18fb      	adds	r3, r7, r3
   2bd9e:	7adb      	ldrb	r3, [r3, #11]
   2bda0:	001a      	movs	r2, r3
   2bda2:	2302      	movs	r3, #2
   2bda4:	4013      	ands	r3, r2
   2bda6:	d023      	beq.n	2bdf0 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2bda8:	232a      	movs	r3, #42	; 0x2a
   2bdaa:	18fb      	adds	r3, r7, r3
   2bdac:	2200      	movs	r2, #0
   2bdae:	801a      	strh	r2, [r3, #0]
   2bdb0:	e006      	b.n	2bdc0 <dir_register+0xe8>
   2bdb2:	232a      	movs	r3, #42	; 0x2a
   2bdb4:	18fb      	adds	r3, r7, r3
   2bdb6:	881a      	ldrh	r2, [r3, #0]
   2bdb8:	232a      	movs	r3, #42	; 0x2a
   2bdba:	18fb      	adds	r3, r7, r3
   2bdbc:	3201      	adds	r2, #1
   2bdbe:	801a      	strh	r2, [r3, #0]
   2bdc0:	232a      	movs	r3, #42	; 0x2a
   2bdc2:	18fb      	adds	r3, r7, r3
   2bdc4:	881b      	ldrh	r3, [r3, #0]
   2bdc6:	005b      	lsls	r3, r3, #1
   2bdc8:	6a3a      	ldr	r2, [r7, #32]
   2bdca:	18d3      	adds	r3, r2, r3
   2bdcc:	881b      	ldrh	r3, [r3, #0]
   2bdce:	2b00      	cmp	r3, #0
   2bdd0:	d1ef      	bne.n	2bdb2 <dir_register+0xda>
		ne = (ne + 25) / 13;
   2bdd2:	232a      	movs	r3, #42	; 0x2a
   2bdd4:	18fb      	adds	r3, r7, r3
   2bdd6:	881b      	ldrh	r3, [r3, #0]
   2bdd8:	3319      	adds	r3, #25
   2bdda:	001a      	movs	r2, r3
   2bddc:	4b91      	ldr	r3, [pc, #580]	; (2c024 <dir_register+0x34c>)
   2bdde:	210d      	movs	r1, #13
   2bde0:	0010      	movs	r0, r2
   2bde2:	4798      	blx	r3
   2bde4:	0003      	movs	r3, r0
   2bde6:	001a      	movs	r2, r3
   2bde8:	232a      	movs	r3, #42	; 0x2a
   2bdea:	18fb      	adds	r3, r7, r3
   2bdec:	801a      	strh	r2, [r3, #0]
   2bdee:	e003      	b.n	2bdf8 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2bdf0:	232a      	movs	r3, #42	; 0x2a
   2bdf2:	18fb      	adds	r3, r7, r3
   2bdf4:	2201      	movs	r2, #1
   2bdf6:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2bdf8:	232f      	movs	r3, #47	; 0x2f
   2bdfa:	18fc      	adds	r4, r7, r3
   2bdfc:	687b      	ldr	r3, [r7, #4]
   2bdfe:	2100      	movs	r1, #0
   2be00:	0018      	movs	r0, r3
   2be02:	4b89      	ldr	r3, [pc, #548]	; (2c028 <dir_register+0x350>)
   2be04:	4798      	blx	r3
   2be06:	0003      	movs	r3, r0
   2be08:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2be0a:	232f      	movs	r3, #47	; 0x2f
   2be0c:	18fb      	adds	r3, r7, r3
   2be0e:	781b      	ldrb	r3, [r3, #0]
   2be10:	2b00      	cmp	r3, #0
   2be12:	d003      	beq.n	2be1c <dir_register+0x144>
   2be14:	232f      	movs	r3, #47	; 0x2f
   2be16:	18fb      	adds	r3, r7, r3
   2be18:	781b      	ldrb	r3, [r3, #0]
   2be1a:	e0f9      	b.n	2c010 <dir_register+0x338>
	n = is = 0;
   2be1c:	2328      	movs	r3, #40	; 0x28
   2be1e:	18fb      	adds	r3, r7, r3
   2be20:	2200      	movs	r2, #0
   2be22:	801a      	strh	r2, [r3, #0]
   2be24:	232c      	movs	r3, #44	; 0x2c
   2be26:	18fb      	adds	r3, r7, r3
   2be28:	2228      	movs	r2, #40	; 0x28
   2be2a:	18ba      	adds	r2, r7, r2
   2be2c:	8812      	ldrh	r2, [r2, #0]
   2be2e:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2be30:	687b      	ldr	r3, [r7, #4]
   2be32:	681a      	ldr	r2, [r3, #0]
   2be34:	687b      	ldr	r3, [r7, #4]
   2be36:	691b      	ldr	r3, [r3, #16]
   2be38:	212f      	movs	r1, #47	; 0x2f
   2be3a:	187c      	adds	r4, r7, r1
   2be3c:	0019      	movs	r1, r3
   2be3e:	0010      	movs	r0, r2
   2be40:	4b7a      	ldr	r3, [pc, #488]	; (2c02c <dir_register+0x354>)
   2be42:	4798      	blx	r3
   2be44:	0003      	movs	r3, r0
   2be46:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2be48:	232f      	movs	r3, #47	; 0x2f
   2be4a:	18fb      	adds	r3, r7, r3
   2be4c:	781b      	ldrb	r3, [r3, #0]
   2be4e:	2b00      	cmp	r3, #0
   2be50:	d13c      	bne.n	2becc <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2be52:	687b      	ldr	r3, [r7, #4]
   2be54:	695a      	ldr	r2, [r3, #20]
   2be56:	231f      	movs	r3, #31
   2be58:	18fb      	adds	r3, r7, r3
   2be5a:	7812      	ldrb	r2, [r2, #0]
   2be5c:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2be5e:	231f      	movs	r3, #31
   2be60:	18fb      	adds	r3, r7, r3
   2be62:	781b      	ldrb	r3, [r3, #0]
   2be64:	2be5      	cmp	r3, #229	; 0xe5
   2be66:	d004      	beq.n	2be72 <dir_register+0x19a>
   2be68:	231f      	movs	r3, #31
   2be6a:	18fb      	adds	r3, r7, r3
   2be6c:	781b      	ldrb	r3, [r3, #0]
   2be6e:	2b00      	cmp	r3, #0
   2be70:	d119      	bne.n	2bea6 <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2be72:	232c      	movs	r3, #44	; 0x2c
   2be74:	18fb      	adds	r3, r7, r3
   2be76:	881b      	ldrh	r3, [r3, #0]
   2be78:	2b00      	cmp	r3, #0
   2be7a:	d104      	bne.n	2be86 <dir_register+0x1ae>
   2be7c:	2328      	movs	r3, #40	; 0x28
   2be7e:	18fb      	adds	r3, r7, r3
   2be80:	687a      	ldr	r2, [r7, #4]
   2be82:	88d2      	ldrh	r2, [r2, #6]
   2be84:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2be86:	232c      	movs	r3, #44	; 0x2c
   2be88:	18fb      	adds	r3, r7, r3
   2be8a:	222c      	movs	r2, #44	; 0x2c
   2be8c:	18ba      	adds	r2, r7, r2
   2be8e:	8812      	ldrh	r2, [r2, #0]
   2be90:	3201      	adds	r2, #1
   2be92:	801a      	strh	r2, [r3, #0]
   2be94:	232c      	movs	r3, #44	; 0x2c
   2be96:	18fa      	adds	r2, r7, r3
   2be98:	232a      	movs	r3, #42	; 0x2a
   2be9a:	18fb      	adds	r3, r7, r3
   2be9c:	8812      	ldrh	r2, [r2, #0]
   2be9e:	881b      	ldrh	r3, [r3, #0]
   2bea0:	429a      	cmp	r2, r3
   2bea2:	d104      	bne.n	2beae <dir_register+0x1d6>
   2bea4:	e013      	b.n	2bece <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2bea6:	232c      	movs	r3, #44	; 0x2c
   2bea8:	18fb      	adds	r3, r7, r3
   2beaa:	2200      	movs	r2, #0
   2beac:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2beae:	232f      	movs	r3, #47	; 0x2f
   2beb0:	18fc      	adds	r4, r7, r3
   2beb2:	687b      	ldr	r3, [r7, #4]
   2beb4:	2101      	movs	r1, #1
   2beb6:	0018      	movs	r0, r3
   2beb8:	4b5d      	ldr	r3, [pc, #372]	; (2c030 <dir_register+0x358>)
   2beba:	4798      	blx	r3
   2bebc:	0003      	movs	r3, r0
   2bebe:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2bec0:	232f      	movs	r3, #47	; 0x2f
   2bec2:	18fb      	adds	r3, r7, r3
   2bec4:	781b      	ldrb	r3, [r3, #0]
   2bec6:	2b00      	cmp	r3, #0
   2bec8:	d0b2      	beq.n	2be30 <dir_register+0x158>
   2beca:	e000      	b.n	2bece <dir_register+0x1f6>
		if (res != FR_OK) break;
   2becc:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2bece:	232f      	movs	r3, #47	; 0x2f
   2bed0:	18fb      	adds	r3, r7, r3
   2bed2:	781b      	ldrb	r3, [r3, #0]
   2bed4:	2b00      	cmp	r3, #0
   2bed6:	d163      	bne.n	2bfa0 <dir_register+0x2c8>
   2bed8:	232a      	movs	r3, #42	; 0x2a
   2beda:	18fb      	adds	r3, r7, r3
   2bedc:	881b      	ldrh	r3, [r3, #0]
   2bede:	2b01      	cmp	r3, #1
   2bee0:	d95e      	bls.n	2bfa0 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2bee2:	232f      	movs	r3, #47	; 0x2f
   2bee4:	18fc      	adds	r4, r7, r3
   2bee6:	2328      	movs	r3, #40	; 0x28
   2bee8:	18fb      	adds	r3, r7, r3
   2beea:	881a      	ldrh	r2, [r3, #0]
   2beec:	687b      	ldr	r3, [r7, #4]
   2beee:	0011      	movs	r1, r2
   2bef0:	0018      	movs	r0, r3
   2bef2:	4b4d      	ldr	r3, [pc, #308]	; (2c028 <dir_register+0x350>)
   2bef4:	4798      	blx	r3
   2bef6:	0003      	movs	r3, r0
   2bef8:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2befa:	232f      	movs	r3, #47	; 0x2f
   2befc:	18fb      	adds	r3, r7, r3
   2befe:	781b      	ldrb	r3, [r3, #0]
   2bf00:	2b00      	cmp	r3, #0
   2bf02:	d14d      	bne.n	2bfa0 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2bf04:	687b      	ldr	r3, [r7, #4]
   2bf06:	699b      	ldr	r3, [r3, #24]
   2bf08:	221e      	movs	r2, #30
   2bf0a:	18bc      	adds	r4, r7, r2
   2bf0c:	0018      	movs	r0, r3
   2bf0e:	4b49      	ldr	r3, [pc, #292]	; (2c034 <dir_register+0x35c>)
   2bf10:	4798      	blx	r3
   2bf12:	0003      	movs	r3, r0
   2bf14:	7023      	strb	r3, [r4, #0]
			ne--;
   2bf16:	232a      	movs	r3, #42	; 0x2a
   2bf18:	18fb      	adds	r3, r7, r3
   2bf1a:	881a      	ldrh	r2, [r3, #0]
   2bf1c:	232a      	movs	r3, #42	; 0x2a
   2bf1e:	18fb      	adds	r3, r7, r3
   2bf20:	3a01      	subs	r2, #1
   2bf22:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2bf24:	687b      	ldr	r3, [r7, #4]
   2bf26:	681a      	ldr	r2, [r3, #0]
   2bf28:	687b      	ldr	r3, [r7, #4]
   2bf2a:	691b      	ldr	r3, [r3, #16]
   2bf2c:	212f      	movs	r1, #47	; 0x2f
   2bf2e:	187c      	adds	r4, r7, r1
   2bf30:	0019      	movs	r1, r3
   2bf32:	0010      	movs	r0, r2
   2bf34:	4b3d      	ldr	r3, [pc, #244]	; (2c02c <dir_register+0x354>)
   2bf36:	4798      	blx	r3
   2bf38:	0003      	movs	r3, r0
   2bf3a:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2bf3c:	232f      	movs	r3, #47	; 0x2f
   2bf3e:	18fb      	adds	r3, r7, r3
   2bf40:	781b      	ldrb	r3, [r3, #0]
   2bf42:	2b00      	cmp	r3, #0
   2bf44:	d12b      	bne.n	2bf9e <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2bf46:	687b      	ldr	r3, [r7, #4]
   2bf48:	69d8      	ldr	r0, [r3, #28]
   2bf4a:	687b      	ldr	r3, [r7, #4]
   2bf4c:	6959      	ldr	r1, [r3, #20]
   2bf4e:	232a      	movs	r3, #42	; 0x2a
   2bf50:	18fb      	adds	r3, r7, r3
   2bf52:	881b      	ldrh	r3, [r3, #0]
   2bf54:	b2da      	uxtb	r2, r3
   2bf56:	231e      	movs	r3, #30
   2bf58:	18fb      	adds	r3, r7, r3
   2bf5a:	781b      	ldrb	r3, [r3, #0]
   2bf5c:	4c36      	ldr	r4, [pc, #216]	; (2c038 <dir_register+0x360>)
   2bf5e:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2bf60:	687b      	ldr	r3, [r7, #4]
   2bf62:	681b      	ldr	r3, [r3, #0]
   2bf64:	2201      	movs	r2, #1
   2bf66:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2bf68:	232f      	movs	r3, #47	; 0x2f
   2bf6a:	18fc      	adds	r4, r7, r3
   2bf6c:	687b      	ldr	r3, [r7, #4]
   2bf6e:	2100      	movs	r1, #0
   2bf70:	0018      	movs	r0, r3
   2bf72:	4b2f      	ldr	r3, [pc, #188]	; (2c030 <dir_register+0x358>)
   2bf74:	4798      	blx	r3
   2bf76:	0003      	movs	r3, r0
   2bf78:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2bf7a:	232f      	movs	r3, #47	; 0x2f
   2bf7c:	18fb      	adds	r3, r7, r3
   2bf7e:	781b      	ldrb	r3, [r3, #0]
   2bf80:	2b00      	cmp	r3, #0
   2bf82:	d10d      	bne.n	2bfa0 <dir_register+0x2c8>
   2bf84:	232a      	movs	r3, #42	; 0x2a
   2bf86:	18fb      	adds	r3, r7, r3
   2bf88:	222a      	movs	r2, #42	; 0x2a
   2bf8a:	18ba      	adds	r2, r7, r2
   2bf8c:	8812      	ldrh	r2, [r2, #0]
   2bf8e:	3a01      	subs	r2, #1
   2bf90:	801a      	strh	r2, [r3, #0]
   2bf92:	232a      	movs	r3, #42	; 0x2a
   2bf94:	18fb      	adds	r3, r7, r3
   2bf96:	881b      	ldrh	r3, [r3, #0]
   2bf98:	2b00      	cmp	r3, #0
   2bf9a:	d1c3      	bne.n	2bf24 <dir_register+0x24c>
   2bf9c:	e000      	b.n	2bfa0 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2bf9e:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2bfa0:	232f      	movs	r3, #47	; 0x2f
   2bfa2:	18fb      	adds	r3, r7, r3
   2bfa4:	781b      	ldrb	r3, [r3, #0]
   2bfa6:	2b00      	cmp	r3, #0
   2bfa8:	d12f      	bne.n	2c00a <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2bfaa:	687b      	ldr	r3, [r7, #4]
   2bfac:	681a      	ldr	r2, [r3, #0]
   2bfae:	687b      	ldr	r3, [r7, #4]
   2bfb0:	691b      	ldr	r3, [r3, #16]
   2bfb2:	212f      	movs	r1, #47	; 0x2f
   2bfb4:	187c      	adds	r4, r7, r1
   2bfb6:	0019      	movs	r1, r3
   2bfb8:	0010      	movs	r0, r2
   2bfba:	4b1c      	ldr	r3, [pc, #112]	; (2c02c <dir_register+0x354>)
   2bfbc:	4798      	blx	r3
   2bfbe:	0003      	movs	r3, r0
   2bfc0:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2bfc2:	232f      	movs	r3, #47	; 0x2f
   2bfc4:	18fb      	adds	r3, r7, r3
   2bfc6:	781b      	ldrb	r3, [r3, #0]
   2bfc8:	2b00      	cmp	r3, #0
   2bfca:	d11e      	bne.n	2c00a <dir_register+0x332>
			dir = dj->dir;
   2bfcc:	687b      	ldr	r3, [r7, #4]
   2bfce:	695b      	ldr	r3, [r3, #20]
   2bfd0:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2bfd2:	69bb      	ldr	r3, [r7, #24]
   2bfd4:	2220      	movs	r2, #32
   2bfd6:	2100      	movs	r1, #0
   2bfd8:	0018      	movs	r0, r3
   2bfda:	4b18      	ldr	r3, [pc, #96]	; (2c03c <dir_register+0x364>)
   2bfdc:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2bfde:	687b      	ldr	r3, [r7, #4]
   2bfe0:	6999      	ldr	r1, [r3, #24]
   2bfe2:	69bb      	ldr	r3, [r7, #24]
   2bfe4:	220b      	movs	r2, #11
   2bfe6:	0018      	movs	r0, r3
   2bfe8:	4b0b      	ldr	r3, [pc, #44]	; (2c018 <dir_register+0x340>)
   2bfea:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2bfec:	69bb      	ldr	r3, [r7, #24]
   2bfee:	330c      	adds	r3, #12
   2bff0:	001a      	movs	r2, r3
   2bff2:	687b      	ldr	r3, [r7, #4]
   2bff4:	699b      	ldr	r3, [r3, #24]
   2bff6:	330b      	adds	r3, #11
   2bff8:	781b      	ldrb	r3, [r3, #0]
   2bffa:	2118      	movs	r1, #24
   2bffc:	400b      	ands	r3, r1
   2bffe:	b2db      	uxtb	r3, r3
   2c000:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2c002:	687b      	ldr	r3, [r7, #4]
   2c004:	681b      	ldr	r3, [r3, #0]
   2c006:	2201      	movs	r2, #1
   2c008:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2c00a:	232f      	movs	r3, #47	; 0x2f
   2c00c:	18fb      	adds	r3, r7, r3
   2c00e:	781b      	ldrb	r3, [r3, #0]
}
   2c010:	0018      	movs	r0, r3
   2c012:	46bd      	mov	sp, r7
   2c014:	b00d      	add	sp, #52	; 0x34
   2c016:	bd90      	pop	{r4, r7, pc}
   2c018:	0002ab31 	.word	0x0002ab31
   2c01c:	0002b98d 	.word	0x0002b98d
   2c020:	0002badd 	.word	0x0002badd
   2c024:	00031fb1 	.word	0x00031fb1
   2c028:	0002b459 	.word	0x0002b459
   2c02c:	0002ac15 	.word	0x0002ac15
   2c030:	0002b589 	.word	0x0002b589
   2c034:	0002ba8d 	.word	0x0002ba8d
   2c038:	0002b87d 	.word	0x0002b87d
   2c03c:	0002ab69 	.word	0x0002ab69

0002c040 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2c040:	b590      	push	{r4, r7, lr}
   2c042:	b08b      	sub	sp, #44	; 0x2c
   2c044:	af00      	add	r7, sp, #0
   2c046:	6078      	str	r0, [r7, #4]
   2c048:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2c04a:	683b      	ldr	r3, [r7, #0]
   2c04c:	681b      	ldr	r3, [r3, #0]
   2c04e:	613b      	str	r3, [r7, #16]
   2c050:	e002      	b.n	2c058 <create_name+0x18>
   2c052:	693b      	ldr	r3, [r7, #16]
   2c054:	3301      	adds	r3, #1
   2c056:	613b      	str	r3, [r7, #16]
   2c058:	693b      	ldr	r3, [r7, #16]
   2c05a:	781b      	ldrb	r3, [r3, #0]
   2c05c:	2b2f      	cmp	r3, #47	; 0x2f
   2c05e:	d0f8      	beq.n	2c052 <create_name+0x12>
   2c060:	693b      	ldr	r3, [r7, #16]
   2c062:	781b      	ldrb	r3, [r3, #0]
   2c064:	2b5c      	cmp	r3, #92	; 0x5c
   2c066:	d0f4      	beq.n	2c052 <create_name+0x12>
	lfn = dj->lfn;
   2c068:	687b      	ldr	r3, [r7, #4]
   2c06a:	69db      	ldr	r3, [r3, #28]
   2c06c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2c06e:	2300      	movs	r3, #0
   2c070:	617b      	str	r3, [r7, #20]
   2c072:	697b      	ldr	r3, [r7, #20]
   2c074:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2c076:	69bb      	ldr	r3, [r7, #24]
   2c078:	1c5a      	adds	r2, r3, #1
   2c07a:	61ba      	str	r2, [r7, #24]
   2c07c:	693a      	ldr	r2, [r7, #16]
   2c07e:	18d3      	adds	r3, r2, r3
   2c080:	781a      	ldrb	r2, [r3, #0]
   2c082:	2324      	movs	r3, #36	; 0x24
   2c084:	18fb      	adds	r3, r7, r3
   2c086:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2c088:	2324      	movs	r3, #36	; 0x24
   2c08a:	18fb      	adds	r3, r7, r3
   2c08c:	881b      	ldrh	r3, [r3, #0]
   2c08e:	2b1f      	cmp	r3, #31
   2c090:	d944      	bls.n	2c11c <create_name+0xdc>
   2c092:	2324      	movs	r3, #36	; 0x24
   2c094:	18fb      	adds	r3, r7, r3
   2c096:	881b      	ldrh	r3, [r3, #0]
   2c098:	2b2f      	cmp	r3, #47	; 0x2f
   2c09a:	d03f      	beq.n	2c11c <create_name+0xdc>
   2c09c:	2324      	movs	r3, #36	; 0x24
   2c09e:	18fb      	adds	r3, r7, r3
   2c0a0:	881b      	ldrh	r3, [r3, #0]
   2c0a2:	2b5c      	cmp	r3, #92	; 0x5c
   2c0a4:	d03a      	beq.n	2c11c <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2c0a6:	697b      	ldr	r3, [r7, #20]
   2c0a8:	2bfe      	cmp	r3, #254	; 0xfe
   2c0aa:	d901      	bls.n	2c0b0 <create_name+0x70>
			return FR_INVALID_NAME;
   2c0ac:	2306      	movs	r3, #6
   2c0ae:	e1e7      	b.n	2c480 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2c0b0:	2324      	movs	r3, #36	; 0x24
   2c0b2:	18fb      	adds	r3, r7, r3
   2c0b4:	2224      	movs	r2, #36	; 0x24
   2c0b6:	18ba      	adds	r2, r7, r2
   2c0b8:	8812      	ldrh	r2, [r2, #0]
   2c0ba:	21ff      	movs	r1, #255	; 0xff
   2c0bc:	400a      	ands	r2, r1
   2c0be:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2c0c0:	2324      	movs	r3, #36	; 0x24
   2c0c2:	18fc      	adds	r4, r7, r3
   2c0c4:	2324      	movs	r3, #36	; 0x24
   2c0c6:	18fb      	adds	r3, r7, r3
   2c0c8:	881b      	ldrh	r3, [r3, #0]
   2c0ca:	2101      	movs	r1, #1
   2c0cc:	0018      	movs	r0, r3
   2c0ce:	4bba      	ldr	r3, [pc, #744]	; (2c3b8 <create_name+0x378>)
   2c0d0:	4798      	blx	r3
   2c0d2:	0003      	movs	r3, r0
   2c0d4:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2c0d6:	2324      	movs	r3, #36	; 0x24
   2c0d8:	18fb      	adds	r3, r7, r3
   2c0da:	881b      	ldrh	r3, [r3, #0]
   2c0dc:	2b00      	cmp	r3, #0
   2c0de:	d101      	bne.n	2c0e4 <create_name+0xa4>
   2c0e0:	2306      	movs	r3, #6
   2c0e2:	e1cd      	b.n	2c480 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2c0e4:	2324      	movs	r3, #36	; 0x24
   2c0e6:	18fb      	adds	r3, r7, r3
   2c0e8:	881b      	ldrh	r3, [r3, #0]
   2c0ea:	2b7f      	cmp	r3, #127	; 0x7f
   2c0ec:	d80b      	bhi.n	2c106 <create_name+0xc6>
   2c0ee:	2324      	movs	r3, #36	; 0x24
   2c0f0:	18fb      	adds	r3, r7, r3
   2c0f2:	881a      	ldrh	r2, [r3, #0]
   2c0f4:	4bb1      	ldr	r3, [pc, #708]	; (2c3bc <create_name+0x37c>)
   2c0f6:	0011      	movs	r1, r2
   2c0f8:	0018      	movs	r0, r3
   2c0fa:	4bb1      	ldr	r3, [pc, #708]	; (2c3c0 <create_name+0x380>)
   2c0fc:	4798      	blx	r3
   2c0fe:	1e03      	subs	r3, r0, #0
   2c100:	d001      	beq.n	2c106 <create_name+0xc6>
			return FR_INVALID_NAME;
   2c102:	2306      	movs	r3, #6
   2c104:	e1bc      	b.n	2c480 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2c106:	697b      	ldr	r3, [r7, #20]
   2c108:	1c5a      	adds	r2, r3, #1
   2c10a:	617a      	str	r2, [r7, #20]
   2c10c:	005b      	lsls	r3, r3, #1
   2c10e:	68fa      	ldr	r2, [r7, #12]
   2c110:	18d3      	adds	r3, r2, r3
   2c112:	2224      	movs	r2, #36	; 0x24
   2c114:	18ba      	adds	r2, r7, r2
   2c116:	8812      	ldrh	r2, [r2, #0]
   2c118:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2c11a:	e7ac      	b.n	2c076 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2c11c:	693a      	ldr	r2, [r7, #16]
   2c11e:	69bb      	ldr	r3, [r7, #24]
   2c120:	18d2      	adds	r2, r2, r3
   2c122:	683b      	ldr	r3, [r7, #0]
   2c124:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2c126:	2324      	movs	r3, #36	; 0x24
   2c128:	18fb      	adds	r3, r7, r3
   2c12a:	881b      	ldrh	r3, [r3, #0]
   2c12c:	2b1f      	cmp	r3, #31
   2c12e:	d801      	bhi.n	2c134 <create_name+0xf4>
   2c130:	2204      	movs	r2, #4
   2c132:	e000      	b.n	2c136 <create_name+0xf6>
   2c134:	2200      	movs	r2, #0
   2c136:	2326      	movs	r3, #38	; 0x26
   2c138:	18fb      	adds	r3, r7, r3
   2c13a:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2c13c:	e017      	b.n	2c16e <create_name+0x12e>
		w = lfn[di-1];
   2c13e:	697b      	ldr	r3, [r7, #20]
   2c140:	4aa0      	ldr	r2, [pc, #640]	; (2c3c4 <create_name+0x384>)
   2c142:	4694      	mov	ip, r2
   2c144:	4463      	add	r3, ip
   2c146:	005b      	lsls	r3, r3, #1
   2c148:	68fa      	ldr	r2, [r7, #12]
   2c14a:	18d2      	adds	r2, r2, r3
   2c14c:	2324      	movs	r3, #36	; 0x24
   2c14e:	18fb      	adds	r3, r7, r3
   2c150:	8812      	ldrh	r2, [r2, #0]
   2c152:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2c154:	2324      	movs	r3, #36	; 0x24
   2c156:	18fb      	adds	r3, r7, r3
   2c158:	881b      	ldrh	r3, [r3, #0]
   2c15a:	2b20      	cmp	r3, #32
   2c15c:	d004      	beq.n	2c168 <create_name+0x128>
   2c15e:	2324      	movs	r3, #36	; 0x24
   2c160:	18fb      	adds	r3, r7, r3
   2c162:	881b      	ldrh	r3, [r3, #0]
   2c164:	2b2e      	cmp	r3, #46	; 0x2e
   2c166:	d106      	bne.n	2c176 <create_name+0x136>
		di--;
   2c168:	697b      	ldr	r3, [r7, #20]
   2c16a:	3b01      	subs	r3, #1
   2c16c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2c16e:	697b      	ldr	r3, [r7, #20]
   2c170:	2b00      	cmp	r3, #0
   2c172:	d1e4      	bne.n	2c13e <create_name+0xfe>
   2c174:	e000      	b.n	2c178 <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2c176:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2c178:	697b      	ldr	r3, [r7, #20]
   2c17a:	2b00      	cmp	r3, #0
   2c17c:	d101      	bne.n	2c182 <create_name+0x142>
   2c17e:	2306      	movs	r3, #6
   2c180:	e17e      	b.n	2c480 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2c182:	697b      	ldr	r3, [r7, #20]
   2c184:	005b      	lsls	r3, r3, #1
   2c186:	68fa      	ldr	r2, [r7, #12]
   2c188:	18d3      	adds	r3, r2, r3
   2c18a:	2200      	movs	r2, #0
   2c18c:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2c18e:	687b      	ldr	r3, [r7, #4]
   2c190:	699b      	ldr	r3, [r3, #24]
   2c192:	220b      	movs	r2, #11
   2c194:	2120      	movs	r1, #32
   2c196:	0018      	movs	r0, r3
   2c198:	4b8b      	ldr	r3, [pc, #556]	; (2c3c8 <create_name+0x388>)
   2c19a:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2c19c:	2300      	movs	r3, #0
   2c19e:	61bb      	str	r3, [r7, #24]
   2c1a0:	e002      	b.n	2c1a8 <create_name+0x168>
   2c1a2:	69bb      	ldr	r3, [r7, #24]
   2c1a4:	3301      	adds	r3, #1
   2c1a6:	61bb      	str	r3, [r7, #24]
   2c1a8:	69bb      	ldr	r3, [r7, #24]
   2c1aa:	005b      	lsls	r3, r3, #1
   2c1ac:	68fa      	ldr	r2, [r7, #12]
   2c1ae:	18d3      	adds	r3, r2, r3
   2c1b0:	881b      	ldrh	r3, [r3, #0]
   2c1b2:	2b20      	cmp	r3, #32
   2c1b4:	d0f5      	beq.n	2c1a2 <create_name+0x162>
   2c1b6:	69bb      	ldr	r3, [r7, #24]
   2c1b8:	005b      	lsls	r3, r3, #1
   2c1ba:	68fa      	ldr	r2, [r7, #12]
   2c1bc:	18d3      	adds	r3, r2, r3
   2c1be:	881b      	ldrh	r3, [r3, #0]
   2c1c0:	2b2e      	cmp	r3, #46	; 0x2e
   2c1c2:	d0ee      	beq.n	2c1a2 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2c1c4:	69bb      	ldr	r3, [r7, #24]
   2c1c6:	2b00      	cmp	r3, #0
   2c1c8:	d00b      	beq.n	2c1e2 <create_name+0x1a2>
   2c1ca:	2326      	movs	r3, #38	; 0x26
   2c1cc:	18fb      	adds	r3, r7, r3
   2c1ce:	2226      	movs	r2, #38	; 0x26
   2c1d0:	18ba      	adds	r2, r7, r2
   2c1d2:	7812      	ldrb	r2, [r2, #0]
   2c1d4:	2103      	movs	r1, #3
   2c1d6:	430a      	orrs	r2, r1
   2c1d8:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2c1da:	e002      	b.n	2c1e2 <create_name+0x1a2>
   2c1dc:	697b      	ldr	r3, [r7, #20]
   2c1de:	3b01      	subs	r3, #1
   2c1e0:	617b      	str	r3, [r7, #20]
   2c1e2:	697b      	ldr	r3, [r7, #20]
   2c1e4:	2b00      	cmp	r3, #0
   2c1e6:	d009      	beq.n	2c1fc <create_name+0x1bc>
   2c1e8:	697b      	ldr	r3, [r7, #20]
   2c1ea:	4a76      	ldr	r2, [pc, #472]	; (2c3c4 <create_name+0x384>)
   2c1ec:	4694      	mov	ip, r2
   2c1ee:	4463      	add	r3, ip
   2c1f0:	005b      	lsls	r3, r3, #1
   2c1f2:	68fa      	ldr	r2, [r7, #12]
   2c1f4:	18d3      	adds	r3, r2, r3
   2c1f6:	881b      	ldrh	r3, [r3, #0]
   2c1f8:	2b2e      	cmp	r3, #46	; 0x2e
   2c1fa:	d1ef      	bne.n	2c1dc <create_name+0x19c>

	b = i = 0; ni = 8;
   2c1fc:	2300      	movs	r3, #0
   2c1fe:	623b      	str	r3, [r7, #32]
   2c200:	2327      	movs	r3, #39	; 0x27
   2c202:	18fb      	adds	r3, r7, r3
   2c204:	2200      	movs	r2, #0
   2c206:	701a      	strb	r2, [r3, #0]
   2c208:	2308      	movs	r3, #8
   2c20a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2c20c:	69bb      	ldr	r3, [r7, #24]
   2c20e:	1c5a      	adds	r2, r3, #1
   2c210:	61ba      	str	r2, [r7, #24]
   2c212:	005b      	lsls	r3, r3, #1
   2c214:	68fa      	ldr	r2, [r7, #12]
   2c216:	18d2      	adds	r2, r2, r3
   2c218:	2324      	movs	r3, #36	; 0x24
   2c21a:	18fb      	adds	r3, r7, r3
   2c21c:	8812      	ldrh	r2, [r2, #0]
   2c21e:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2c220:	2324      	movs	r3, #36	; 0x24
   2c222:	18fb      	adds	r3, r7, r3
   2c224:	881b      	ldrh	r3, [r3, #0]
   2c226:	2b00      	cmp	r3, #0
   2c228:	d100      	bne.n	2c22c <create_name+0x1ec>
   2c22a:	e0c3      	b.n	2c3b4 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2c22c:	2324      	movs	r3, #36	; 0x24
   2c22e:	18fb      	adds	r3, r7, r3
   2c230:	881b      	ldrh	r3, [r3, #0]
   2c232:	2b20      	cmp	r3, #32
   2c234:	d008      	beq.n	2c248 <create_name+0x208>
   2c236:	2324      	movs	r3, #36	; 0x24
   2c238:	18fb      	adds	r3, r7, r3
   2c23a:	881b      	ldrh	r3, [r3, #0]
   2c23c:	2b2e      	cmp	r3, #46	; 0x2e
   2c23e:	d10c      	bne.n	2c25a <create_name+0x21a>
   2c240:	69ba      	ldr	r2, [r7, #24]
   2c242:	697b      	ldr	r3, [r7, #20]
   2c244:	429a      	cmp	r2, r3
   2c246:	d008      	beq.n	2c25a <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2c248:	2326      	movs	r3, #38	; 0x26
   2c24a:	18fb      	adds	r3, r7, r3
   2c24c:	2226      	movs	r2, #38	; 0x26
   2c24e:	18ba      	adds	r2, r7, r2
   2c250:	7812      	ldrb	r2, [r2, #0]
   2c252:	2103      	movs	r1, #3
   2c254:	430a      	orrs	r2, r1
   2c256:	701a      	strb	r2, [r3, #0]
   2c258:	e0ab      	b.n	2c3b2 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2c25a:	6a3a      	ldr	r2, [r7, #32]
   2c25c:	69fb      	ldr	r3, [r7, #28]
   2c25e:	429a      	cmp	r2, r3
   2c260:	d203      	bcs.n	2c26a <create_name+0x22a>
   2c262:	69ba      	ldr	r2, [r7, #24]
   2c264:	697b      	ldr	r3, [r7, #20]
   2c266:	429a      	cmp	r2, r3
   2c268:	d12a      	bne.n	2c2c0 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2c26a:	69fb      	ldr	r3, [r7, #28]
   2c26c:	2b0b      	cmp	r3, #11
   2c26e:	d108      	bne.n	2c282 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2c270:	2326      	movs	r3, #38	; 0x26
   2c272:	18fb      	adds	r3, r7, r3
   2c274:	2226      	movs	r2, #38	; 0x26
   2c276:	18ba      	adds	r2, r7, r2
   2c278:	7812      	ldrb	r2, [r2, #0]
   2c27a:	2103      	movs	r1, #3
   2c27c:	430a      	orrs	r2, r1
   2c27e:	701a      	strb	r2, [r3, #0]
   2c280:	e0a9      	b.n	2c3d6 <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2c282:	69ba      	ldr	r2, [r7, #24]
   2c284:	697b      	ldr	r3, [r7, #20]
   2c286:	429a      	cmp	r2, r3
   2c288:	d007      	beq.n	2c29a <create_name+0x25a>
   2c28a:	2326      	movs	r3, #38	; 0x26
   2c28c:	18fb      	adds	r3, r7, r3
   2c28e:	2226      	movs	r2, #38	; 0x26
   2c290:	18ba      	adds	r2, r7, r2
   2c292:	7812      	ldrb	r2, [r2, #0]
   2c294:	2103      	movs	r1, #3
   2c296:	430a      	orrs	r2, r1
   2c298:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2c29a:	69ba      	ldr	r2, [r7, #24]
   2c29c:	697b      	ldr	r3, [r7, #20]
   2c29e:	429a      	cmp	r2, r3
   2c2a0:	d900      	bls.n	2c2a4 <create_name+0x264>
   2c2a2:	e097      	b.n	2c3d4 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2c2a4:	697b      	ldr	r3, [r7, #20]
   2c2a6:	61bb      	str	r3, [r7, #24]
   2c2a8:	2308      	movs	r3, #8
   2c2aa:	623b      	str	r3, [r7, #32]
   2c2ac:	230b      	movs	r3, #11
   2c2ae:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2c2b0:	2327      	movs	r3, #39	; 0x27
   2c2b2:	18fb      	adds	r3, r7, r3
   2c2b4:	2227      	movs	r2, #39	; 0x27
   2c2b6:	18ba      	adds	r2, r7, r2
   2c2b8:	7812      	ldrb	r2, [r2, #0]
   2c2ba:	0092      	lsls	r2, r2, #2
   2c2bc:	701a      	strb	r2, [r3, #0]
   2c2be:	e078      	b.n	2c3b2 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2c2c0:	2324      	movs	r3, #36	; 0x24
   2c2c2:	18fb      	adds	r3, r7, r3
   2c2c4:	881b      	ldrh	r3, [r3, #0]
   2c2c6:	2b7f      	cmp	r3, #127	; 0x7f
   2c2c8:	d920      	bls.n	2c30c <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2c2ca:	2324      	movs	r3, #36	; 0x24
   2c2cc:	18fc      	adds	r4, r7, r3
   2c2ce:	2324      	movs	r3, #36	; 0x24
   2c2d0:	18fb      	adds	r3, r7, r3
   2c2d2:	881b      	ldrh	r3, [r3, #0]
   2c2d4:	2100      	movs	r1, #0
   2c2d6:	0018      	movs	r0, r3
   2c2d8:	4b37      	ldr	r3, [pc, #220]	; (2c3b8 <create_name+0x378>)
   2c2da:	4798      	blx	r3
   2c2dc:	0003      	movs	r3, r0
   2c2de:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2c2e0:	2324      	movs	r3, #36	; 0x24
   2c2e2:	18fb      	adds	r3, r7, r3
   2c2e4:	881b      	ldrh	r3, [r3, #0]
   2c2e6:	2b00      	cmp	r3, #0
   2c2e8:	d008      	beq.n	2c2fc <create_name+0x2bc>
   2c2ea:	2324      	movs	r3, #36	; 0x24
   2c2ec:	18fb      	adds	r3, r7, r3
   2c2ee:	881b      	ldrh	r3, [r3, #0]
   2c2f0:	3b80      	subs	r3, #128	; 0x80
   2c2f2:	4a36      	ldr	r2, [pc, #216]	; (2c3cc <create_name+0x38c>)
   2c2f4:	5cd2      	ldrb	r2, [r2, r3]
   2c2f6:	2324      	movs	r3, #36	; 0x24
   2c2f8:	18fb      	adds	r3, r7, r3
   2c2fa:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2c2fc:	2326      	movs	r3, #38	; 0x26
   2c2fe:	18fb      	adds	r3, r7, r3
   2c300:	2226      	movs	r2, #38	; 0x26
   2c302:	18ba      	adds	r2, r7, r2
   2c304:	7812      	ldrb	r2, [r2, #0]
   2c306:	2102      	movs	r1, #2
   2c308:	430a      	orrs	r2, r1
   2c30a:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2c30c:	2324      	movs	r3, #36	; 0x24
   2c30e:	18fb      	adds	r3, r7, r3
   2c310:	881b      	ldrh	r3, [r3, #0]
   2c312:	2b00      	cmp	r3, #0
   2c314:	d009      	beq.n	2c32a <create_name+0x2ea>
   2c316:	2324      	movs	r3, #36	; 0x24
   2c318:	18fb      	adds	r3, r7, r3
   2c31a:	881a      	ldrh	r2, [r3, #0]
   2c31c:	4b2c      	ldr	r3, [pc, #176]	; (2c3d0 <create_name+0x390>)
   2c31e:	0011      	movs	r1, r2
   2c320:	0018      	movs	r0, r3
   2c322:	4b27      	ldr	r3, [pc, #156]	; (2c3c0 <create_name+0x380>)
   2c324:	4798      	blx	r3
   2c326:	1e03      	subs	r3, r0, #0
   2c328:	d00c      	beq.n	2c344 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2c32a:	2324      	movs	r3, #36	; 0x24
   2c32c:	18fb      	adds	r3, r7, r3
   2c32e:	225f      	movs	r2, #95	; 0x5f
   2c330:	801a      	strh	r2, [r3, #0]
   2c332:	2326      	movs	r3, #38	; 0x26
   2c334:	18fb      	adds	r3, r7, r3
   2c336:	2226      	movs	r2, #38	; 0x26
   2c338:	18ba      	adds	r2, r7, r2
   2c33a:	7812      	ldrb	r2, [r2, #0]
   2c33c:	2103      	movs	r1, #3
   2c33e:	430a      	orrs	r2, r1
   2c340:	701a      	strb	r2, [r3, #0]
   2c342:	e02b      	b.n	2c39c <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2c344:	2324      	movs	r3, #36	; 0x24
   2c346:	18fb      	adds	r3, r7, r3
   2c348:	881b      	ldrh	r3, [r3, #0]
   2c34a:	2b40      	cmp	r3, #64	; 0x40
   2c34c:	d90d      	bls.n	2c36a <create_name+0x32a>
   2c34e:	2324      	movs	r3, #36	; 0x24
   2c350:	18fb      	adds	r3, r7, r3
   2c352:	881b      	ldrh	r3, [r3, #0]
   2c354:	2b5a      	cmp	r3, #90	; 0x5a
   2c356:	d808      	bhi.n	2c36a <create_name+0x32a>
					b |= 2;
   2c358:	2327      	movs	r3, #39	; 0x27
   2c35a:	18fb      	adds	r3, r7, r3
   2c35c:	2227      	movs	r2, #39	; 0x27
   2c35e:	18ba      	adds	r2, r7, r2
   2c360:	7812      	ldrb	r2, [r2, #0]
   2c362:	2102      	movs	r1, #2
   2c364:	430a      	orrs	r2, r1
   2c366:	701a      	strb	r2, [r3, #0]
   2c368:	e018      	b.n	2c39c <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2c36a:	2324      	movs	r3, #36	; 0x24
   2c36c:	18fb      	adds	r3, r7, r3
   2c36e:	881b      	ldrh	r3, [r3, #0]
   2c370:	2b60      	cmp	r3, #96	; 0x60
   2c372:	d913      	bls.n	2c39c <create_name+0x35c>
   2c374:	2324      	movs	r3, #36	; 0x24
   2c376:	18fb      	adds	r3, r7, r3
   2c378:	881b      	ldrh	r3, [r3, #0]
   2c37a:	2b7a      	cmp	r3, #122	; 0x7a
   2c37c:	d80e      	bhi.n	2c39c <create_name+0x35c>
						b |= 1; w -= 0x20;
   2c37e:	2327      	movs	r3, #39	; 0x27
   2c380:	18fb      	adds	r3, r7, r3
   2c382:	2227      	movs	r2, #39	; 0x27
   2c384:	18ba      	adds	r2, r7, r2
   2c386:	7812      	ldrb	r2, [r2, #0]
   2c388:	2101      	movs	r1, #1
   2c38a:	430a      	orrs	r2, r1
   2c38c:	701a      	strb	r2, [r3, #0]
   2c38e:	2324      	movs	r3, #36	; 0x24
   2c390:	18fb      	adds	r3, r7, r3
   2c392:	2224      	movs	r2, #36	; 0x24
   2c394:	18ba      	adds	r2, r7, r2
   2c396:	8812      	ldrh	r2, [r2, #0]
   2c398:	3a20      	subs	r2, #32
   2c39a:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2c39c:	687b      	ldr	r3, [r7, #4]
   2c39e:	699a      	ldr	r2, [r3, #24]
   2c3a0:	6a3b      	ldr	r3, [r7, #32]
   2c3a2:	1c59      	adds	r1, r3, #1
   2c3a4:	6239      	str	r1, [r7, #32]
   2c3a6:	18d3      	adds	r3, r2, r3
   2c3a8:	2224      	movs	r2, #36	; 0x24
   2c3aa:	18ba      	adds	r2, r7, r2
   2c3ac:	8812      	ldrh	r2, [r2, #0]
   2c3ae:	b2d2      	uxtb	r2, r2
   2c3b0:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2c3b2:	e72b      	b.n	2c20c <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2c3b4:	46c0      	nop			; (mov r8, r8)
   2c3b6:	e00e      	b.n	2c3d6 <create_name+0x396>
   2c3b8:	0002d779 	.word	0x0002d779
   2c3bc:	00038c8c 	.word	0x00038c8c
   2c3c0:	0002abe3 	.word	0x0002abe3
   2c3c4:	7fffffff 	.word	0x7fffffff
   2c3c8:	0002ab69 	.word	0x0002ab69
   2c3cc:	00038cd4 	.word	0x00038cd4
   2c3d0:	00038c98 	.word	0x00038c98
			if (si > di) break;			/* No extension */
   2c3d4:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2c3d6:	687b      	ldr	r3, [r7, #4]
   2c3d8:	699b      	ldr	r3, [r3, #24]
   2c3da:	781b      	ldrb	r3, [r3, #0]
   2c3dc:	2be5      	cmp	r3, #229	; 0xe5
   2c3de:	d103      	bne.n	2c3e8 <create_name+0x3a8>
   2c3e0:	687b      	ldr	r3, [r7, #4]
   2c3e2:	699b      	ldr	r3, [r3, #24]
   2c3e4:	2205      	movs	r2, #5
   2c3e6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2c3e8:	69fb      	ldr	r3, [r7, #28]
   2c3ea:	2b08      	cmp	r3, #8
   2c3ec:	d106      	bne.n	2c3fc <create_name+0x3bc>
   2c3ee:	2327      	movs	r3, #39	; 0x27
   2c3f0:	18fb      	adds	r3, r7, r3
   2c3f2:	2227      	movs	r2, #39	; 0x27
   2c3f4:	18ba      	adds	r2, r7, r2
   2c3f6:	7812      	ldrb	r2, [r2, #0]
   2c3f8:	0092      	lsls	r2, r2, #2
   2c3fa:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2c3fc:	2327      	movs	r3, #39	; 0x27
   2c3fe:	18fb      	adds	r3, r7, r3
   2c400:	781b      	ldrb	r3, [r3, #0]
   2c402:	220c      	movs	r2, #12
   2c404:	4013      	ands	r3, r2
   2c406:	2b0c      	cmp	r3, #12
   2c408:	d006      	beq.n	2c418 <create_name+0x3d8>
   2c40a:	2327      	movs	r3, #39	; 0x27
   2c40c:	18fb      	adds	r3, r7, r3
   2c40e:	781b      	ldrb	r3, [r3, #0]
   2c410:	2203      	movs	r2, #3
   2c412:	4013      	ands	r3, r2
   2c414:	2b03      	cmp	r3, #3
   2c416:	d107      	bne.n	2c428 <create_name+0x3e8>
		cf |= NS_LFN;
   2c418:	2326      	movs	r3, #38	; 0x26
   2c41a:	18fb      	adds	r3, r7, r3
   2c41c:	2226      	movs	r2, #38	; 0x26
   2c41e:	18ba      	adds	r2, r7, r2
   2c420:	7812      	ldrb	r2, [r2, #0]
   2c422:	2102      	movs	r1, #2
   2c424:	430a      	orrs	r2, r1
   2c426:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2c428:	2326      	movs	r3, #38	; 0x26
   2c42a:	18fb      	adds	r3, r7, r3
   2c42c:	781b      	ldrb	r3, [r3, #0]
   2c42e:	2202      	movs	r2, #2
   2c430:	4013      	ands	r3, r2
   2c432:	d11d      	bne.n	2c470 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2c434:	2327      	movs	r3, #39	; 0x27
   2c436:	18fb      	adds	r3, r7, r3
   2c438:	781b      	ldrb	r3, [r3, #0]
   2c43a:	2203      	movs	r2, #3
   2c43c:	4013      	ands	r3, r2
   2c43e:	2b01      	cmp	r3, #1
   2c440:	d107      	bne.n	2c452 <create_name+0x412>
   2c442:	2326      	movs	r3, #38	; 0x26
   2c444:	18fb      	adds	r3, r7, r3
   2c446:	2226      	movs	r2, #38	; 0x26
   2c448:	18ba      	adds	r2, r7, r2
   2c44a:	7812      	ldrb	r2, [r2, #0]
   2c44c:	2110      	movs	r1, #16
   2c44e:	430a      	orrs	r2, r1
   2c450:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2c452:	2327      	movs	r3, #39	; 0x27
   2c454:	18fb      	adds	r3, r7, r3
   2c456:	781b      	ldrb	r3, [r3, #0]
   2c458:	220c      	movs	r2, #12
   2c45a:	4013      	ands	r3, r2
   2c45c:	2b04      	cmp	r3, #4
   2c45e:	d107      	bne.n	2c470 <create_name+0x430>
   2c460:	2326      	movs	r3, #38	; 0x26
   2c462:	18fb      	adds	r3, r7, r3
   2c464:	2226      	movs	r2, #38	; 0x26
   2c466:	18ba      	adds	r2, r7, r2
   2c468:	7812      	ldrb	r2, [r2, #0]
   2c46a:	2108      	movs	r1, #8
   2c46c:	430a      	orrs	r2, r1
   2c46e:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2c470:	687b      	ldr	r3, [r7, #4]
   2c472:	699b      	ldr	r3, [r3, #24]
   2c474:	330b      	adds	r3, #11
   2c476:	2226      	movs	r2, #38	; 0x26
   2c478:	18ba      	adds	r2, r7, r2
   2c47a:	7812      	ldrb	r2, [r2, #0]
   2c47c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2c47e:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2c480:	0018      	movs	r0, r3
   2c482:	46bd      	mov	sp, r7
   2c484:	b00b      	add	sp, #44	; 0x2c
   2c486:	bd90      	pop	{r4, r7, pc}

0002c488 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2c488:	b590      	push	{r4, r7, lr}
   2c48a:	b085      	sub	sp, #20
   2c48c:	af00      	add	r7, sp, #0
   2c48e:	6078      	str	r0, [r7, #4]
   2c490:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2c492:	683b      	ldr	r3, [r7, #0]
   2c494:	781b      	ldrb	r3, [r3, #0]
   2c496:	2b2f      	cmp	r3, #47	; 0x2f
   2c498:	d003      	beq.n	2c4a2 <follow_path+0x1a>
   2c49a:	683b      	ldr	r3, [r7, #0]
   2c49c:	781b      	ldrb	r3, [r3, #0]
   2c49e:	2b5c      	cmp	r3, #92	; 0x5c
   2c4a0:	d102      	bne.n	2c4a8 <follow_path+0x20>
		path++;
   2c4a2:	683b      	ldr	r3, [r7, #0]
   2c4a4:	3301      	adds	r3, #1
   2c4a6:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2c4a8:	687b      	ldr	r3, [r7, #4]
   2c4aa:	2200      	movs	r2, #0
   2c4ac:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2c4ae:	683b      	ldr	r3, [r7, #0]
   2c4b0:	781b      	ldrb	r3, [r3, #0]
   2c4b2:	2b1f      	cmp	r3, #31
   2c4b4:	d80c      	bhi.n	2c4d0 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2c4b6:	230f      	movs	r3, #15
   2c4b8:	18fc      	adds	r4, r7, r3
   2c4ba:	687b      	ldr	r3, [r7, #4]
   2c4bc:	2100      	movs	r1, #0
   2c4be:	0018      	movs	r0, r3
   2c4c0:	4b3c      	ldr	r3, [pc, #240]	; (2c5b4 <follow_path+0x12c>)
   2c4c2:	4798      	blx	r3
   2c4c4:	0003      	movs	r3, r0
   2c4c6:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2c4c8:	687b      	ldr	r3, [r7, #4]
   2c4ca:	2200      	movs	r2, #0
   2c4cc:	615a      	str	r2, [r3, #20]
   2c4ce:	e06a      	b.n	2c5a6 <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2c4d0:	230f      	movs	r3, #15
   2c4d2:	18fc      	adds	r4, r7, r3
   2c4d4:	003a      	movs	r2, r7
   2c4d6:	687b      	ldr	r3, [r7, #4]
   2c4d8:	0011      	movs	r1, r2
   2c4da:	0018      	movs	r0, r3
   2c4dc:	4b36      	ldr	r3, [pc, #216]	; (2c5b8 <follow_path+0x130>)
   2c4de:	4798      	blx	r3
   2c4e0:	0003      	movs	r3, r0
   2c4e2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c4e4:	230f      	movs	r3, #15
   2c4e6:	18fb      	adds	r3, r7, r3
   2c4e8:	781b      	ldrb	r3, [r3, #0]
   2c4ea:	2b00      	cmp	r3, #0
   2c4ec:	d154      	bne.n	2c598 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2c4ee:	230f      	movs	r3, #15
   2c4f0:	18fc      	adds	r4, r7, r3
   2c4f2:	687b      	ldr	r3, [r7, #4]
   2c4f4:	0018      	movs	r0, r3
   2c4f6:	4b31      	ldr	r3, [pc, #196]	; (2c5bc <follow_path+0x134>)
   2c4f8:	4798      	blx	r3
   2c4fa:	0003      	movs	r3, r0
   2c4fc:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2c4fe:	687b      	ldr	r3, [r7, #4]
   2c500:	699a      	ldr	r2, [r3, #24]
   2c502:	230e      	movs	r3, #14
   2c504:	18fb      	adds	r3, r7, r3
   2c506:	7ad2      	ldrb	r2, [r2, #11]
   2c508:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2c50a:	230f      	movs	r3, #15
   2c50c:	18fb      	adds	r3, r7, r3
   2c50e:	781b      	ldrb	r3, [r3, #0]
   2c510:	2b00      	cmp	r3, #0
   2c512:	d00f      	beq.n	2c534 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2c514:	230f      	movs	r3, #15
   2c516:	18fb      	adds	r3, r7, r3
   2c518:	781b      	ldrb	r3, [r3, #0]
   2c51a:	2b04      	cmp	r3, #4
   2c51c:	d13e      	bne.n	2c59c <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2c51e:	230e      	movs	r3, #14
   2c520:	18fb      	adds	r3, r7, r3
   2c522:	781b      	ldrb	r3, [r3, #0]
   2c524:	2204      	movs	r2, #4
   2c526:	4013      	ands	r3, r2
   2c528:	d13a      	bne.n	2c5a0 <follow_path+0x118>
   2c52a:	230f      	movs	r3, #15
   2c52c:	18fb      	adds	r3, r7, r3
   2c52e:	2205      	movs	r2, #5
   2c530:	701a      	strb	r2, [r3, #0]
				}
				break;
   2c532:	e035      	b.n	2c5a0 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2c534:	230e      	movs	r3, #14
   2c536:	18fb      	adds	r3, r7, r3
   2c538:	781b      	ldrb	r3, [r3, #0]
   2c53a:	2204      	movs	r2, #4
   2c53c:	4013      	ands	r3, r2
   2c53e:	d131      	bne.n	2c5a4 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2c540:	687b      	ldr	r3, [r7, #4]
   2c542:	695b      	ldr	r3, [r3, #20]
   2c544:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2c546:	68bb      	ldr	r3, [r7, #8]
   2c548:	330b      	adds	r3, #11
   2c54a:	781b      	ldrb	r3, [r3, #0]
   2c54c:	001a      	movs	r2, r3
   2c54e:	2310      	movs	r3, #16
   2c550:	4013      	ands	r3, r2
   2c552:	d104      	bne.n	2c55e <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2c554:	230f      	movs	r3, #15
   2c556:	18fb      	adds	r3, r7, r3
   2c558:	2205      	movs	r2, #5
   2c55a:	701a      	strb	r2, [r3, #0]
   2c55c:	e023      	b.n	2c5a6 <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2c55e:	68bb      	ldr	r3, [r7, #8]
   2c560:	3315      	adds	r3, #21
   2c562:	781b      	ldrb	r3, [r3, #0]
   2c564:	021b      	lsls	r3, r3, #8
   2c566:	b21a      	sxth	r2, r3
   2c568:	68bb      	ldr	r3, [r7, #8]
   2c56a:	3314      	adds	r3, #20
   2c56c:	781b      	ldrb	r3, [r3, #0]
   2c56e:	b21b      	sxth	r3, r3
   2c570:	4313      	orrs	r3, r2
   2c572:	b21b      	sxth	r3, r3
   2c574:	b29b      	uxth	r3, r3
   2c576:	041b      	lsls	r3, r3, #16
   2c578:	68ba      	ldr	r2, [r7, #8]
   2c57a:	321b      	adds	r2, #27
   2c57c:	7812      	ldrb	r2, [r2, #0]
   2c57e:	0212      	lsls	r2, r2, #8
   2c580:	b211      	sxth	r1, r2
   2c582:	68ba      	ldr	r2, [r7, #8]
   2c584:	321a      	adds	r2, #26
   2c586:	7812      	ldrb	r2, [r2, #0]
   2c588:	b212      	sxth	r2, r2
   2c58a:	430a      	orrs	r2, r1
   2c58c:	b212      	sxth	r2, r2
   2c58e:	b292      	uxth	r2, r2
   2c590:	431a      	orrs	r2, r3
   2c592:	687b      	ldr	r3, [r7, #4]
   2c594:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2c596:	e79b      	b.n	2c4d0 <follow_path+0x48>
			if (res != FR_OK) break;
   2c598:	46c0      	nop			; (mov r8, r8)
   2c59a:	e004      	b.n	2c5a6 <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2c59c:	46c0      	nop			; (mov r8, r8)
   2c59e:	e002      	b.n	2c5a6 <follow_path+0x11e>
				break;
   2c5a0:	46c0      	nop			; (mov r8, r8)
   2c5a2:	e000      	b.n	2c5a6 <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2c5a4:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2c5a6:	230f      	movs	r3, #15
   2c5a8:	18fb      	adds	r3, r7, r3
   2c5aa:	781b      	ldrb	r3, [r3, #0]
}
   2c5ac:	0018      	movs	r0, r3
   2c5ae:	46bd      	mov	sp, r7
   2c5b0:	b005      	add	sp, #20
   2c5b2:	bd90      	pop	{r4, r7, pc}
   2c5b4:	0002b459 	.word	0x0002b459
   2c5b8:	0002c041 	.word	0x0002c041
   2c5bc:	0002badd 	.word	0x0002badd

0002c5c0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2c5c0:	b590      	push	{r4, r7, lr}
   2c5c2:	b083      	sub	sp, #12
   2c5c4:	af00      	add	r7, sp, #0
   2c5c6:	6078      	str	r0, [r7, #4]
   2c5c8:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2c5ca:	687b      	ldr	r3, [r7, #4]
   2c5cc:	7858      	ldrb	r0, [r3, #1]
   2c5ce:	687b      	ldr	r3, [r7, #4]
   2c5d0:	3330      	adds	r3, #48	; 0x30
   2c5d2:	0019      	movs	r1, r3
   2c5d4:	683a      	ldr	r2, [r7, #0]
   2c5d6:	2301      	movs	r3, #1
   2c5d8:	4c2a      	ldr	r4, [pc, #168]	; (2c684 <check_fs+0xc4>)
   2c5da:	47a0      	blx	r4
   2c5dc:	1e03      	subs	r3, r0, #0
   2c5de:	d001      	beq.n	2c5e4 <check_fs+0x24>
		return 3;
   2c5e0:	2303      	movs	r3, #3
   2c5e2:	e04b      	b.n	2c67c <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2c5e4:	687b      	ldr	r3, [r7, #4]
   2c5e6:	4a28      	ldr	r2, [pc, #160]	; (2c688 <check_fs+0xc8>)
   2c5e8:	4694      	mov	ip, r2
   2c5ea:	4463      	add	r3, ip
   2c5ec:	3301      	adds	r3, #1
   2c5ee:	781b      	ldrb	r3, [r3, #0]
   2c5f0:	021b      	lsls	r3, r3, #8
   2c5f2:	b21a      	sxth	r2, r3
   2c5f4:	687b      	ldr	r3, [r7, #4]
   2c5f6:	4924      	ldr	r1, [pc, #144]	; (2c688 <check_fs+0xc8>)
   2c5f8:	5c5b      	ldrb	r3, [r3, r1]
   2c5fa:	b21b      	sxth	r3, r3
   2c5fc:	4313      	orrs	r3, r2
   2c5fe:	b21b      	sxth	r3, r3
   2c600:	4a22      	ldr	r2, [pc, #136]	; (2c68c <check_fs+0xcc>)
   2c602:	4293      	cmp	r3, r2
   2c604:	d001      	beq.n	2c60a <check_fs+0x4a>
		return 2;
   2c606:	2302      	movs	r3, #2
   2c608:	e038      	b.n	2c67c <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2c60a:	687b      	ldr	r3, [r7, #4]
   2c60c:	3366      	adds	r3, #102	; 0x66
   2c60e:	3303      	adds	r3, #3
   2c610:	781b      	ldrb	r3, [r3, #0]
   2c612:	061a      	lsls	r2, r3, #24
   2c614:	687b      	ldr	r3, [r7, #4]
   2c616:	3366      	adds	r3, #102	; 0x66
   2c618:	3302      	adds	r3, #2
   2c61a:	781b      	ldrb	r3, [r3, #0]
   2c61c:	041b      	lsls	r3, r3, #16
   2c61e:	4313      	orrs	r3, r2
   2c620:	687a      	ldr	r2, [r7, #4]
   2c622:	3266      	adds	r2, #102	; 0x66
   2c624:	3201      	adds	r2, #1
   2c626:	7812      	ldrb	r2, [r2, #0]
   2c628:	0212      	lsls	r2, r2, #8
   2c62a:	4313      	orrs	r3, r2
   2c62c:	687a      	ldr	r2, [r7, #4]
   2c62e:	2166      	movs	r1, #102	; 0x66
   2c630:	5c52      	ldrb	r2, [r2, r1]
   2c632:	4313      	orrs	r3, r2
   2c634:	021b      	lsls	r3, r3, #8
   2c636:	0a1b      	lsrs	r3, r3, #8
   2c638:	4a15      	ldr	r2, [pc, #84]	; (2c690 <check_fs+0xd0>)
   2c63a:	4293      	cmp	r3, r2
   2c63c:	d101      	bne.n	2c642 <check_fs+0x82>
		return 0;
   2c63e:	2300      	movs	r3, #0
   2c640:	e01c      	b.n	2c67c <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2c642:	687b      	ldr	r3, [r7, #4]
   2c644:	3382      	adds	r3, #130	; 0x82
   2c646:	3303      	adds	r3, #3
   2c648:	781b      	ldrb	r3, [r3, #0]
   2c64a:	061a      	lsls	r2, r3, #24
   2c64c:	687b      	ldr	r3, [r7, #4]
   2c64e:	3382      	adds	r3, #130	; 0x82
   2c650:	3302      	adds	r3, #2
   2c652:	781b      	ldrb	r3, [r3, #0]
   2c654:	041b      	lsls	r3, r3, #16
   2c656:	4313      	orrs	r3, r2
   2c658:	687a      	ldr	r2, [r7, #4]
   2c65a:	3282      	adds	r2, #130	; 0x82
   2c65c:	3201      	adds	r2, #1
   2c65e:	7812      	ldrb	r2, [r2, #0]
   2c660:	0212      	lsls	r2, r2, #8
   2c662:	4313      	orrs	r3, r2
   2c664:	687a      	ldr	r2, [r7, #4]
   2c666:	2182      	movs	r1, #130	; 0x82
   2c668:	5c52      	ldrb	r2, [r2, r1]
   2c66a:	4313      	orrs	r3, r2
   2c66c:	021b      	lsls	r3, r3, #8
   2c66e:	0a1b      	lsrs	r3, r3, #8
   2c670:	4a07      	ldr	r2, [pc, #28]	; (2c690 <check_fs+0xd0>)
   2c672:	4293      	cmp	r3, r2
   2c674:	d101      	bne.n	2c67a <check_fs+0xba>
		return 0;
   2c676:	2300      	movs	r3, #0
   2c678:	e000      	b.n	2c67c <check_fs+0xbc>

	return 1;
   2c67a:	2301      	movs	r3, #1
}
   2c67c:	0018      	movs	r0, r3
   2c67e:	46bd      	mov	sp, r7
   2c680:	b003      	add	sp, #12
   2c682:	bd90      	pop	{r4, r7, pc}
   2c684:	0002a829 	.word	0x0002a829
   2c688:	0000022e 	.word	0x0000022e
   2c68c:	ffffaa55 	.word	0xffffaa55
   2c690:	00544146 	.word	0x00544146

0002c694 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2c694:	b590      	push	{r4, r7, lr}
   2c696:	b093      	sub	sp, #76	; 0x4c
   2c698:	af00      	add	r7, sp, #0
   2c69a:	60f8      	str	r0, [r7, #12]
   2c69c:	60b9      	str	r1, [r7, #8]
   2c69e:	1dfb      	adds	r3, r7, #7
   2c6a0:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2c6a2:	68fb      	ldr	r3, [r7, #12]
   2c6a4:	681b      	ldr	r3, [r3, #0]
   2c6a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2c6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2c6aa:	781b      	ldrb	r3, [r3, #0]
   2c6ac:	3b30      	subs	r3, #48	; 0x30
   2c6ae:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2c6b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2c6b2:	2b09      	cmp	r3, #9
   2c6b4:	d80b      	bhi.n	2c6ce <chk_mounted+0x3a>
   2c6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2c6b8:	3301      	adds	r3, #1
   2c6ba:	781b      	ldrb	r3, [r3, #0]
   2c6bc:	2b3a      	cmp	r3, #58	; 0x3a
   2c6be:	d106      	bne.n	2c6ce <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2c6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2c6c2:	3302      	adds	r3, #2
   2c6c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   2c6c6:	68fb      	ldr	r3, [r7, #12]
   2c6c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2c6ca:	601a      	str	r2, [r3, #0]
   2c6cc:	e001      	b.n	2c6d2 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2c6ce:	2300      	movs	r3, #0
   2c6d0:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2c6d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2c6d4:	2b07      	cmp	r3, #7
   2c6d6:	d901      	bls.n	2c6dc <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2c6d8:	230b      	movs	r3, #11
   2c6da:	e2af      	b.n	2cc3c <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2c6dc:	4bc5      	ldr	r3, [pc, #788]	; (2c9f4 <chk_mounted+0x360>)
   2c6de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2c6e0:	0092      	lsls	r2, r2, #2
   2c6e2:	58d3      	ldr	r3, [r2, r3]
   2c6e4:	62bb      	str	r3, [r7, #40]	; 0x28
   2c6e6:	68bb      	ldr	r3, [r7, #8]
   2c6e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c6ea:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2c6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c6ee:	2b00      	cmp	r3, #0
   2c6f0:	d101      	bne.n	2c6f6 <chk_mounted+0x62>
   2c6f2:	230c      	movs	r3, #12
   2c6f4:	e2a2      	b.n	2cc3c <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2c6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c6f8:	781b      	ldrb	r3, [r3, #0]
   2c6fa:	2b00      	cmp	r3, #0
   2c6fc:	d01c      	beq.n	2c738 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2c6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c700:	785b      	ldrb	r3, [r3, #1]
   2c702:	2227      	movs	r2, #39	; 0x27
   2c704:	18bc      	adds	r4, r7, r2
   2c706:	0018      	movs	r0, r3
   2c708:	4bbb      	ldr	r3, [pc, #748]	; (2c9f8 <chk_mounted+0x364>)
   2c70a:	4798      	blx	r3
   2c70c:	0003      	movs	r3, r0
   2c70e:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2c710:	2327      	movs	r3, #39	; 0x27
   2c712:	18fb      	adds	r3, r7, r3
   2c714:	781b      	ldrb	r3, [r3, #0]
   2c716:	2201      	movs	r2, #1
   2c718:	4013      	ands	r3, r2
   2c71a:	d10d      	bne.n	2c738 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2c71c:	1dfb      	adds	r3, r7, #7
   2c71e:	781b      	ldrb	r3, [r3, #0]
   2c720:	2b00      	cmp	r3, #0
   2c722:	d007      	beq.n	2c734 <chk_mounted+0xa0>
   2c724:	2327      	movs	r3, #39	; 0x27
   2c726:	18fb      	adds	r3, r7, r3
   2c728:	781b      	ldrb	r3, [r3, #0]
   2c72a:	2204      	movs	r2, #4
   2c72c:	4013      	ands	r3, r2
   2c72e:	d001      	beq.n	2c734 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2c730:	230a      	movs	r3, #10
   2c732:	e283      	b.n	2cc3c <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2c734:	2300      	movs	r3, #0
   2c736:	e281      	b.n	2cc3c <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2c738:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c73a:	2200      	movs	r2, #0
   2c73c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2c73e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2c740:	b2da      	uxtb	r2, r3
   2c742:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c744:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2c746:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c748:	785b      	ldrb	r3, [r3, #1]
   2c74a:	2227      	movs	r2, #39	; 0x27
   2c74c:	18bc      	adds	r4, r7, r2
   2c74e:	0018      	movs	r0, r3
   2c750:	4baa      	ldr	r3, [pc, #680]	; (2c9fc <chk_mounted+0x368>)
   2c752:	4798      	blx	r3
   2c754:	0003      	movs	r3, r0
   2c756:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2c758:	2327      	movs	r3, #39	; 0x27
   2c75a:	18fb      	adds	r3, r7, r3
   2c75c:	781b      	ldrb	r3, [r3, #0]
   2c75e:	2201      	movs	r2, #1
   2c760:	4013      	ands	r3, r2
   2c762:	d001      	beq.n	2c768 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2c764:	2303      	movs	r3, #3
   2c766:	e269      	b.n	2cc3c <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2c768:	1dfb      	adds	r3, r7, #7
   2c76a:	781b      	ldrb	r3, [r3, #0]
   2c76c:	2b00      	cmp	r3, #0
   2c76e:	d007      	beq.n	2c780 <chk_mounted+0xec>
   2c770:	2327      	movs	r3, #39	; 0x27
   2c772:	18fb      	adds	r3, r7, r3
   2c774:	781b      	ldrb	r3, [r3, #0]
   2c776:	2204      	movs	r2, #4
   2c778:	4013      	ands	r3, r2
   2c77a:	d001      	beq.n	2c780 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2c77c:	230a      	movs	r3, #10
   2c77e:	e25d      	b.n	2cc3c <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2c780:	2300      	movs	r3, #0
   2c782:	63fb      	str	r3, [r7, #60]	; 0x3c
   2c784:	2347      	movs	r3, #71	; 0x47
   2c786:	18fc      	adds	r4, r7, r3
   2c788:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2c78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c78c:	0011      	movs	r1, r2
   2c78e:	0018      	movs	r0, r3
   2c790:	4b9b      	ldr	r3, [pc, #620]	; (2ca00 <chk_mounted+0x36c>)
   2c792:	4798      	blx	r3
   2c794:	0003      	movs	r3, r0
   2c796:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2c798:	2347      	movs	r3, #71	; 0x47
   2c79a:	18fb      	adds	r3, r7, r3
   2c79c:	781b      	ldrb	r3, [r3, #0]
   2c79e:	2b01      	cmp	r3, #1
   2c7a0:	d13b      	bne.n	2c81a <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2c7a2:	2346      	movs	r3, #70	; 0x46
   2c7a4:	18fb      	adds	r3, r7, r3
   2c7a6:	2200      	movs	r2, #0
   2c7a8:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2c7aa:	2346      	movs	r3, #70	; 0x46
   2c7ac:	18fb      	adds	r3, r7, r3
   2c7ae:	781b      	ldrb	r3, [r3, #0]
   2c7b0:	2b00      	cmp	r3, #0
   2c7b2:	d006      	beq.n	2c7c2 <chk_mounted+0x12e>
   2c7b4:	2346      	movs	r3, #70	; 0x46
   2c7b6:	18fb      	adds	r3, r7, r3
   2c7b8:	781a      	ldrb	r2, [r3, #0]
   2c7ba:	2346      	movs	r3, #70	; 0x46
   2c7bc:	18fb      	adds	r3, r7, r3
   2c7be:	3a01      	subs	r2, #1
   2c7c0:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2c7c2:	2346      	movs	r3, #70	; 0x46
   2c7c4:	18fb      	adds	r3, r7, r3
   2c7c6:	781b      	ldrb	r3, [r3, #0]
   2c7c8:	011b      	lsls	r3, r3, #4
   2c7ca:	33bf      	adds	r3, #191	; 0xbf
   2c7cc:	33ff      	adds	r3, #255	; 0xff
   2c7ce:	3330      	adds	r3, #48	; 0x30
   2c7d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c7d2:	18d3      	adds	r3, r2, r3
   2c7d4:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2c7d6:	6a3b      	ldr	r3, [r7, #32]
   2c7d8:	3304      	adds	r3, #4
   2c7da:	781b      	ldrb	r3, [r3, #0]
   2c7dc:	2b00      	cmp	r3, #0
   2c7de:	d01c      	beq.n	2c81a <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2c7e0:	6a3b      	ldr	r3, [r7, #32]
   2c7e2:	330b      	adds	r3, #11
   2c7e4:	781b      	ldrb	r3, [r3, #0]
   2c7e6:	061a      	lsls	r2, r3, #24
   2c7e8:	6a3b      	ldr	r3, [r7, #32]
   2c7ea:	330a      	adds	r3, #10
   2c7ec:	781b      	ldrb	r3, [r3, #0]
   2c7ee:	041b      	lsls	r3, r3, #16
   2c7f0:	4313      	orrs	r3, r2
   2c7f2:	6a3a      	ldr	r2, [r7, #32]
   2c7f4:	3209      	adds	r2, #9
   2c7f6:	7812      	ldrb	r2, [r2, #0]
   2c7f8:	0212      	lsls	r2, r2, #8
   2c7fa:	4313      	orrs	r3, r2
   2c7fc:	6a3a      	ldr	r2, [r7, #32]
   2c7fe:	3208      	adds	r2, #8
   2c800:	7812      	ldrb	r2, [r2, #0]
   2c802:	4313      	orrs	r3, r2
   2c804:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2c806:	2347      	movs	r3, #71	; 0x47
   2c808:	18fc      	adds	r4, r7, r3
   2c80a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2c80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c80e:	0011      	movs	r1, r2
   2c810:	0018      	movs	r0, r3
   2c812:	4b7b      	ldr	r3, [pc, #492]	; (2ca00 <chk_mounted+0x36c>)
   2c814:	4798      	blx	r3
   2c816:	0003      	movs	r3, r0
   2c818:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2c81a:	2347      	movs	r3, #71	; 0x47
   2c81c:	18fb      	adds	r3, r7, r3
   2c81e:	781b      	ldrb	r3, [r3, #0]
   2c820:	2b03      	cmp	r3, #3
   2c822:	d101      	bne.n	2c828 <chk_mounted+0x194>
   2c824:	2301      	movs	r3, #1
   2c826:	e209      	b.n	2cc3c <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2c828:	2347      	movs	r3, #71	; 0x47
   2c82a:	18fb      	adds	r3, r7, r3
   2c82c:	781b      	ldrb	r3, [r3, #0]
   2c82e:	2b00      	cmp	r3, #0
   2c830:	d001      	beq.n	2c836 <chk_mounted+0x1a2>
   2c832:	230d      	movs	r3, #13
   2c834:	e202      	b.n	2cc3c <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2c836:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c838:	223c      	movs	r2, #60	; 0x3c
   2c83a:	5c9b      	ldrb	r3, [r3, r2]
   2c83c:	021b      	lsls	r3, r3, #8
   2c83e:	b21a      	sxth	r2, r3
   2c840:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c842:	213b      	movs	r1, #59	; 0x3b
   2c844:	5c5b      	ldrb	r3, [r3, r1]
   2c846:	b21b      	sxth	r3, r3
   2c848:	4313      	orrs	r3, r2
   2c84a:	b21a      	sxth	r2, r3
   2c84c:	2380      	movs	r3, #128	; 0x80
   2c84e:	009b      	lsls	r3, r3, #2
   2c850:	429a      	cmp	r2, r3
   2c852:	d001      	beq.n	2c858 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2c854:	230d      	movs	r3, #13
   2c856:	e1f1      	b.n	2cc3c <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2c858:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c85a:	2247      	movs	r2, #71	; 0x47
   2c85c:	5c9b      	ldrb	r3, [r3, r2]
   2c85e:	021b      	lsls	r3, r3, #8
   2c860:	b21a      	sxth	r2, r3
   2c862:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c864:	2146      	movs	r1, #70	; 0x46
   2c866:	5c5b      	ldrb	r3, [r3, r1]
   2c868:	b21b      	sxth	r3, r3
   2c86a:	4313      	orrs	r3, r2
   2c86c:	b21b      	sxth	r3, r3
   2c86e:	b29b      	uxth	r3, r3
   2c870:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2c872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2c874:	2b00      	cmp	r3, #0
   2c876:	d112      	bne.n	2c89e <chk_mounted+0x20a>
   2c878:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c87a:	2257      	movs	r2, #87	; 0x57
   2c87c:	5c9b      	ldrb	r3, [r3, r2]
   2c87e:	061a      	lsls	r2, r3, #24
   2c880:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c882:	2156      	movs	r1, #86	; 0x56
   2c884:	5c5b      	ldrb	r3, [r3, r1]
   2c886:	041b      	lsls	r3, r3, #16
   2c888:	4313      	orrs	r3, r2
   2c88a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c88c:	2155      	movs	r1, #85	; 0x55
   2c88e:	5c52      	ldrb	r2, [r2, r1]
   2c890:	0212      	lsls	r2, r2, #8
   2c892:	4313      	orrs	r3, r2
   2c894:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c896:	2154      	movs	r1, #84	; 0x54
   2c898:	5c52      	ldrb	r2, [r2, r1]
   2c89a:	4313      	orrs	r3, r2
   2c89c:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2c89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2c8a2:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2c8a4:	231f      	movs	r3, #31
   2c8a6:	18fb      	adds	r3, r7, r3
   2c8a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c8aa:	2140      	movs	r1, #64	; 0x40
   2c8ac:	5c52      	ldrb	r2, [r2, r1]
   2c8ae:	701a      	strb	r2, [r3, #0]
   2c8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8b2:	221f      	movs	r2, #31
   2c8b4:	18ba      	adds	r2, r7, r2
   2c8b6:	7812      	ldrb	r2, [r2, #0]
   2c8b8:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2c8ba:	231f      	movs	r3, #31
   2c8bc:	18fb      	adds	r3, r7, r3
   2c8be:	781b      	ldrb	r3, [r3, #0]
   2c8c0:	2b01      	cmp	r3, #1
   2c8c2:	d006      	beq.n	2c8d2 <chk_mounted+0x23e>
   2c8c4:	231f      	movs	r3, #31
   2c8c6:	18fb      	adds	r3, r7, r3
   2c8c8:	781b      	ldrb	r3, [r3, #0]
   2c8ca:	2b02      	cmp	r3, #2
   2c8cc:	d001      	beq.n	2c8d2 <chk_mounted+0x23e>
   2c8ce:	230d      	movs	r3, #13
   2c8d0:	e1b4      	b.n	2cc3c <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2c8d2:	231f      	movs	r3, #31
   2c8d4:	18fb      	adds	r3, r7, r3
   2c8d6:	781a      	ldrb	r2, [r3, #0]
   2c8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2c8da:	4353      	muls	r3, r2
   2c8dc:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2c8de:	231f      	movs	r3, #31
   2c8e0:	18fb      	adds	r3, r7, r3
   2c8e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c8e4:	213d      	movs	r1, #61	; 0x3d
   2c8e6:	5c52      	ldrb	r2, [r2, r1]
   2c8e8:	701a      	strb	r2, [r3, #0]
   2c8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8ec:	221f      	movs	r2, #31
   2c8ee:	18ba      	adds	r2, r7, r2
   2c8f0:	7812      	ldrb	r2, [r2, #0]
   2c8f2:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2c8f4:	231f      	movs	r3, #31
   2c8f6:	18fb      	adds	r3, r7, r3
   2c8f8:	781b      	ldrb	r3, [r3, #0]
   2c8fa:	2b00      	cmp	r3, #0
   2c8fc:	d008      	beq.n	2c910 <chk_mounted+0x27c>
   2c8fe:	231f      	movs	r3, #31
   2c900:	18fb      	adds	r3, r7, r3
   2c902:	781b      	ldrb	r3, [r3, #0]
   2c904:	221f      	movs	r2, #31
   2c906:	18ba      	adds	r2, r7, r2
   2c908:	7812      	ldrb	r2, [r2, #0]
   2c90a:	3a01      	subs	r2, #1
   2c90c:	4013      	ands	r3, r2
   2c90e:	d001      	beq.n	2c914 <chk_mounted+0x280>
   2c910:	230d      	movs	r3, #13
   2c912:	e193      	b.n	2cc3c <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2c914:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c916:	2242      	movs	r2, #66	; 0x42
   2c918:	5c9b      	ldrb	r3, [r3, r2]
   2c91a:	021b      	lsls	r3, r3, #8
   2c91c:	b21a      	sxth	r2, r3
   2c91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c920:	2141      	movs	r1, #65	; 0x41
   2c922:	5c5b      	ldrb	r3, [r3, r1]
   2c924:	b21b      	sxth	r3, r3
   2c926:	4313      	orrs	r3, r2
   2c928:	b21b      	sxth	r3, r3
   2c92a:	b29a      	uxth	r2, r3
   2c92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c92e:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2c930:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c932:	891b      	ldrh	r3, [r3, #8]
   2c934:	220f      	movs	r2, #15
   2c936:	4013      	ands	r3, r2
   2c938:	b29b      	uxth	r3, r3
   2c93a:	2b00      	cmp	r3, #0
   2c93c:	d001      	beq.n	2c942 <chk_mounted+0x2ae>
   2c93e:	230d      	movs	r3, #13
   2c940:	e17c      	b.n	2cc3c <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2c942:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c944:	2244      	movs	r2, #68	; 0x44
   2c946:	5c9b      	ldrb	r3, [r3, r2]
   2c948:	021b      	lsls	r3, r3, #8
   2c94a:	b21a      	sxth	r2, r3
   2c94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c94e:	2143      	movs	r1, #67	; 0x43
   2c950:	5c5b      	ldrb	r3, [r3, r1]
   2c952:	b21b      	sxth	r3, r3
   2c954:	4313      	orrs	r3, r2
   2c956:	b21b      	sxth	r3, r3
   2c958:	b29b      	uxth	r3, r3
   2c95a:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2c95c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2c95e:	2b00      	cmp	r3, #0
   2c960:	d112      	bne.n	2c988 <chk_mounted+0x2f4>
   2c962:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c964:	2253      	movs	r2, #83	; 0x53
   2c966:	5c9b      	ldrb	r3, [r3, r2]
   2c968:	061a      	lsls	r2, r3, #24
   2c96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c96c:	2152      	movs	r1, #82	; 0x52
   2c96e:	5c5b      	ldrb	r3, [r3, r1]
   2c970:	041b      	lsls	r3, r3, #16
   2c972:	4313      	orrs	r3, r2
   2c974:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c976:	2151      	movs	r1, #81	; 0x51
   2c978:	5c52      	ldrb	r2, [r2, r1]
   2c97a:	0212      	lsls	r2, r2, #8
   2c97c:	4313      	orrs	r3, r2
   2c97e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c980:	2150      	movs	r1, #80	; 0x50
   2c982:	5c52      	ldrb	r2, [r2, r1]
   2c984:	4313      	orrs	r3, r2
   2c986:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2c988:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c98a:	223f      	movs	r2, #63	; 0x3f
   2c98c:	5c9b      	ldrb	r3, [r3, r2]
   2c98e:	021b      	lsls	r3, r3, #8
   2c990:	b21a      	sxth	r2, r3
   2c992:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c994:	213e      	movs	r1, #62	; 0x3e
   2c996:	5c5b      	ldrb	r3, [r3, r1]
   2c998:	b21b      	sxth	r3, r3
   2c99a:	4313      	orrs	r3, r2
   2c99c:	b21a      	sxth	r2, r3
   2c99e:	231c      	movs	r3, #28
   2c9a0:	18fb      	adds	r3, r7, r3
   2c9a2:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2c9a4:	231c      	movs	r3, #28
   2c9a6:	18fb      	adds	r3, r7, r3
   2c9a8:	881b      	ldrh	r3, [r3, #0]
   2c9aa:	2b00      	cmp	r3, #0
   2c9ac:	d101      	bne.n	2c9b2 <chk_mounted+0x31e>
   2c9ae:	230d      	movs	r3, #13
   2c9b0:	e144      	b.n	2cc3c <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2c9b2:	231c      	movs	r3, #28
   2c9b4:	18fb      	adds	r3, r7, r3
   2c9b6:	881a      	ldrh	r2, [r3, #0]
   2c9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2c9ba:	18d3      	adds	r3, r2, r3
   2c9bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c9be:	8912      	ldrh	r2, [r2, #8]
   2c9c0:	0912      	lsrs	r2, r2, #4
   2c9c2:	b292      	uxth	r2, r2
   2c9c4:	189b      	adds	r3, r3, r2
   2c9c6:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2c9c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2c9ca:	69bb      	ldr	r3, [r7, #24]
   2c9cc:	429a      	cmp	r2, r3
   2c9ce:	d201      	bcs.n	2c9d4 <chk_mounted+0x340>
   2c9d0:	230d      	movs	r3, #13
   2c9d2:	e133      	b.n	2cc3c <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2c9d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2c9d6:	69bb      	ldr	r3, [r7, #24]
   2c9d8:	1ad2      	subs	r2, r2, r3
   2c9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c9dc:	789b      	ldrb	r3, [r3, #2]
   2c9de:	0019      	movs	r1, r3
   2c9e0:	4b08      	ldr	r3, [pc, #32]	; (2ca04 <chk_mounted+0x370>)
   2c9e2:	0010      	movs	r0, r2
   2c9e4:	4798      	blx	r3
   2c9e6:	0003      	movs	r3, r0
   2c9e8:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2c9ea:	697b      	ldr	r3, [r7, #20]
   2c9ec:	2b00      	cmp	r3, #0
   2c9ee:	d10b      	bne.n	2ca08 <chk_mounted+0x374>
   2c9f0:	230d      	movs	r3, #13
   2c9f2:	e123      	b.n	2cc3c <chk_mounted+0x5a8>
   2c9f4:	2000415c 	.word	0x2000415c
   2c9f8:	0002a7f1 	.word	0x0002a7f1
   2c9fc:	0002a76d 	.word	0x0002a76d
   2ca00:	0002c5c1 	.word	0x0002c5c1
   2ca04:	00031e9d 	.word	0x00031e9d
	fmt = FS_FAT12;
   2ca08:	2347      	movs	r3, #71	; 0x47
   2ca0a:	18fb      	adds	r3, r7, r3
   2ca0c:	2201      	movs	r2, #1
   2ca0e:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2ca10:	697b      	ldr	r3, [r7, #20]
   2ca12:	4a8c      	ldr	r2, [pc, #560]	; (2cc44 <chk_mounted+0x5b0>)
   2ca14:	4293      	cmp	r3, r2
   2ca16:	d903      	bls.n	2ca20 <chk_mounted+0x38c>
   2ca18:	2347      	movs	r3, #71	; 0x47
   2ca1a:	18fb      	adds	r3, r7, r3
   2ca1c:	2202      	movs	r2, #2
   2ca1e:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2ca20:	697b      	ldr	r3, [r7, #20]
   2ca22:	4a89      	ldr	r2, [pc, #548]	; (2cc48 <chk_mounted+0x5b4>)
   2ca24:	4293      	cmp	r3, r2
   2ca26:	d903      	bls.n	2ca30 <chk_mounted+0x39c>
   2ca28:	2347      	movs	r3, #71	; 0x47
   2ca2a:	18fb      	adds	r3, r7, r3
   2ca2c:	2203      	movs	r2, #3
   2ca2e:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2ca30:	697b      	ldr	r3, [r7, #20]
   2ca32:	1c9a      	adds	r2, r3, #2
   2ca34:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca36:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2ca38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2ca3a:	69bb      	ldr	r3, [r7, #24]
   2ca3c:	18d2      	adds	r2, r2, r3
   2ca3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca40:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2ca42:	231c      	movs	r3, #28
   2ca44:	18fb      	adds	r3, r7, r3
   2ca46:	881a      	ldrh	r2, [r3, #0]
   2ca48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ca4a:	18d2      	adds	r2, r2, r3
   2ca4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca4e:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2ca50:	2347      	movs	r3, #71	; 0x47
   2ca52:	18fb      	adds	r3, r7, r3
   2ca54:	781b      	ldrb	r3, [r3, #0]
   2ca56:	2b03      	cmp	r3, #3
   2ca58:	d11e      	bne.n	2ca98 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2ca5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca5c:	891b      	ldrh	r3, [r3, #8]
   2ca5e:	2b00      	cmp	r3, #0
   2ca60:	d001      	beq.n	2ca66 <chk_mounted+0x3d2>
   2ca62:	230d      	movs	r3, #13
   2ca64:	e0ea      	b.n	2cc3c <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2ca66:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca68:	225f      	movs	r2, #95	; 0x5f
   2ca6a:	5c9b      	ldrb	r3, [r3, r2]
   2ca6c:	061a      	lsls	r2, r3, #24
   2ca6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca70:	215e      	movs	r1, #94	; 0x5e
   2ca72:	5c5b      	ldrb	r3, [r3, r1]
   2ca74:	041b      	lsls	r3, r3, #16
   2ca76:	4313      	orrs	r3, r2
   2ca78:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ca7a:	215d      	movs	r1, #93	; 0x5d
   2ca7c:	5c52      	ldrb	r2, [r2, r1]
   2ca7e:	0212      	lsls	r2, r2, #8
   2ca80:	4313      	orrs	r3, r2
   2ca82:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ca84:	215c      	movs	r1, #92	; 0x5c
   2ca86:	5c52      	ldrb	r2, [r2, r1]
   2ca88:	431a      	orrs	r2, r3
   2ca8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca8c:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2ca8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca90:	699b      	ldr	r3, [r3, #24]
   2ca92:	009b      	lsls	r3, r3, #2
   2ca94:	633b      	str	r3, [r7, #48]	; 0x30
   2ca96:	e020      	b.n	2cada <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2ca98:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca9a:	891b      	ldrh	r3, [r3, #8]
   2ca9c:	2b00      	cmp	r3, #0
   2ca9e:	d101      	bne.n	2caa4 <chk_mounted+0x410>
   2caa0:	230d      	movs	r3, #13
   2caa2:	e0cb      	b.n	2cc3c <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2caa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2caa6:	6a1a      	ldr	r2, [r3, #32]
   2caa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2caaa:	18d2      	adds	r2, r2, r3
   2caac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2caae:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2cab0:	2347      	movs	r3, #71	; 0x47
   2cab2:	18fb      	adds	r3, r7, r3
   2cab4:	781b      	ldrb	r3, [r3, #0]
   2cab6:	2b02      	cmp	r3, #2
   2cab8:	d103      	bne.n	2cac2 <chk_mounted+0x42e>
   2caba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cabc:	699b      	ldr	r3, [r3, #24]
   2cabe:	005b      	lsls	r3, r3, #1
   2cac0:	e00a      	b.n	2cad8 <chk_mounted+0x444>
   2cac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cac4:	699a      	ldr	r2, [r3, #24]
   2cac6:	0013      	movs	r3, r2
   2cac8:	005b      	lsls	r3, r3, #1
   2caca:	189b      	adds	r3, r3, r2
   2cacc:	085a      	lsrs	r2, r3, #1
   2cace:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cad0:	699b      	ldr	r3, [r3, #24]
   2cad2:	2101      	movs	r1, #1
   2cad4:	400b      	ands	r3, r1
   2cad6:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2cad8:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2cada:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cadc:	69da      	ldr	r2, [r3, #28]
   2cade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2cae0:	495a      	ldr	r1, [pc, #360]	; (2cc4c <chk_mounted+0x5b8>)
   2cae2:	468c      	mov	ip, r1
   2cae4:	4463      	add	r3, ip
   2cae6:	0a5b      	lsrs	r3, r3, #9
   2cae8:	429a      	cmp	r2, r3
   2caea:	d201      	bcs.n	2caf0 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2caec:	230d      	movs	r3, #13
   2caee:	e0a5      	b.n	2cc3c <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2caf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2caf2:	2201      	movs	r2, #1
   2caf4:	4252      	negs	r2, r2
   2caf6:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2caf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cafa:	2200      	movs	r2, #0
   2cafc:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2cafe:	2347      	movs	r3, #71	; 0x47
   2cb00:	18fb      	adds	r3, r7, r3
   2cb02:	781b      	ldrb	r3, [r3, #0]
   2cb04:	2b03      	cmp	r3, #3
   2cb06:	d000      	beq.n	2cb0a <chk_mounted+0x476>
   2cb08:	e082      	b.n	2cc10 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2cb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cb0c:	2200      	movs	r2, #0
   2cb0e:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2cb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cb12:	2261      	movs	r2, #97	; 0x61
   2cb14:	5c9b      	ldrb	r3, [r3, r2]
   2cb16:	021b      	lsls	r3, r3, #8
   2cb18:	b21a      	sxth	r2, r3
   2cb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cb1c:	2160      	movs	r1, #96	; 0x60
   2cb1e:	5c5b      	ldrb	r3, [r3, r1]
   2cb20:	b21b      	sxth	r3, r3
   2cb22:	4313      	orrs	r3, r2
   2cb24:	b21b      	sxth	r3, r3
   2cb26:	b29b      	uxth	r3, r3
   2cb28:	001a      	movs	r2, r3
   2cb2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cb2c:	18d2      	adds	r2, r2, r3
   2cb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cb30:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2cb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cb34:	7858      	ldrb	r0, [r3, #1]
   2cb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cb38:	3330      	adds	r3, #48	; 0x30
   2cb3a:	0019      	movs	r1, r3
   2cb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cb3e:	695a      	ldr	r2, [r3, #20]
   2cb40:	2301      	movs	r3, #1
   2cb42:	4c43      	ldr	r4, [pc, #268]	; (2cc50 <chk_mounted+0x5bc>)
   2cb44:	47a0      	blx	r4
   2cb46:	1e03      	subs	r3, r0, #0
   2cb48:	d162      	bne.n	2cc10 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2cb4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cb4c:	4a41      	ldr	r2, [pc, #260]	; (2cc54 <chk_mounted+0x5c0>)
   2cb4e:	5c9b      	ldrb	r3, [r3, r2]
   2cb50:	021b      	lsls	r3, r3, #8
   2cb52:	b21a      	sxth	r2, r3
   2cb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cb56:	4940      	ldr	r1, [pc, #256]	; (2cc58 <chk_mounted+0x5c4>)
   2cb58:	5c5b      	ldrb	r3, [r3, r1]
   2cb5a:	b21b      	sxth	r3, r3
   2cb5c:	4313      	orrs	r3, r2
   2cb5e:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2cb60:	4a3e      	ldr	r2, [pc, #248]	; (2cc5c <chk_mounted+0x5c8>)
   2cb62:	4293      	cmp	r3, r2
   2cb64:	d154      	bne.n	2cc10 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2cb66:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cb68:	2233      	movs	r2, #51	; 0x33
   2cb6a:	5c9b      	ldrb	r3, [r3, r2]
   2cb6c:	061a      	lsls	r2, r3, #24
   2cb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cb70:	2132      	movs	r1, #50	; 0x32
   2cb72:	5c5b      	ldrb	r3, [r3, r1]
   2cb74:	041b      	lsls	r3, r3, #16
   2cb76:	4313      	orrs	r3, r2
   2cb78:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cb7a:	2131      	movs	r1, #49	; 0x31
   2cb7c:	5c52      	ldrb	r2, [r2, r1]
   2cb7e:	0212      	lsls	r2, r2, #8
   2cb80:	4313      	orrs	r3, r2
   2cb82:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cb84:	2130      	movs	r1, #48	; 0x30
   2cb86:	5c52      	ldrb	r2, [r2, r1]
   2cb88:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2cb8a:	4a35      	ldr	r2, [pc, #212]	; (2cc60 <chk_mounted+0x5cc>)
   2cb8c:	4293      	cmp	r3, r2
   2cb8e:	d13f      	bne.n	2cc10 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2cb90:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cb92:	4a34      	ldr	r2, [pc, #208]	; (2cc64 <chk_mounted+0x5d0>)
   2cb94:	5c9b      	ldrb	r3, [r3, r2]
   2cb96:	061a      	lsls	r2, r3, #24
   2cb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cb9a:	4933      	ldr	r1, [pc, #204]	; (2cc68 <chk_mounted+0x5d4>)
   2cb9c:	5c5b      	ldrb	r3, [r3, r1]
   2cb9e:	041b      	lsls	r3, r3, #16
   2cba0:	4313      	orrs	r3, r2
   2cba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cba4:	4931      	ldr	r1, [pc, #196]	; (2cc6c <chk_mounted+0x5d8>)
   2cba6:	5c52      	ldrb	r2, [r2, r1]
   2cba8:	0212      	lsls	r2, r2, #8
   2cbaa:	4313      	orrs	r3, r2
   2cbac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2cbae:	2285      	movs	r2, #133	; 0x85
   2cbb0:	0092      	lsls	r2, r2, #2
   2cbb2:	5c8a      	ldrb	r2, [r1, r2]
   2cbb4:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2cbb6:	4a2e      	ldr	r2, [pc, #184]	; (2cc70 <chk_mounted+0x5dc>)
   2cbb8:	4293      	cmp	r3, r2
   2cbba:	d129      	bne.n	2cc10 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2cbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cbbe:	4a2d      	ldr	r2, [pc, #180]	; (2cc74 <chk_mounted+0x5e0>)
   2cbc0:	5c9b      	ldrb	r3, [r3, r2]
   2cbc2:	061a      	lsls	r2, r3, #24
   2cbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cbc6:	492c      	ldr	r1, [pc, #176]	; (2cc78 <chk_mounted+0x5e4>)
   2cbc8:	5c5b      	ldrb	r3, [r3, r1]
   2cbca:	041b      	lsls	r3, r3, #16
   2cbcc:	4313      	orrs	r3, r2
   2cbce:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cbd0:	492a      	ldr	r1, [pc, #168]	; (2cc7c <chk_mounted+0x5e8>)
   2cbd2:	5c52      	ldrb	r2, [r2, r1]
   2cbd4:	0212      	lsls	r2, r2, #8
   2cbd6:	4313      	orrs	r3, r2
   2cbd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2cbda:	2287      	movs	r2, #135	; 0x87
   2cbdc:	0092      	lsls	r2, r2, #2
   2cbde:	5c8a      	ldrb	r2, [r1, r2]
   2cbe0:	431a      	orrs	r2, r3
   2cbe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cbe4:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2cbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cbe8:	4a25      	ldr	r2, [pc, #148]	; (2cc80 <chk_mounted+0x5ec>)
   2cbea:	5c9b      	ldrb	r3, [r3, r2]
   2cbec:	061a      	lsls	r2, r3, #24
   2cbee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cbf0:	4924      	ldr	r1, [pc, #144]	; (2cc84 <chk_mounted+0x5f0>)
   2cbf2:	5c5b      	ldrb	r3, [r3, r1]
   2cbf4:	041b      	lsls	r3, r3, #16
   2cbf6:	4313      	orrs	r3, r2
   2cbf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cbfa:	4923      	ldr	r1, [pc, #140]	; (2cc88 <chk_mounted+0x5f4>)
   2cbfc:	5c52      	ldrb	r2, [r2, r1]
   2cbfe:	0212      	lsls	r2, r2, #8
   2cc00:	4313      	orrs	r3, r2
   2cc02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2cc04:	2286      	movs	r2, #134	; 0x86
   2cc06:	0092      	lsls	r2, r2, #2
   2cc08:	5c8a      	ldrb	r2, [r1, r2]
   2cc0a:	431a      	orrs	r2, r3
   2cc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cc0e:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2cc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cc12:	2247      	movs	r2, #71	; 0x47
   2cc14:	18ba      	adds	r2, r7, r2
   2cc16:	7812      	ldrb	r2, [r2, #0]
   2cc18:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2cc1a:	4b1c      	ldr	r3, [pc, #112]	; (2cc8c <chk_mounted+0x5f8>)
   2cc1c:	881b      	ldrh	r3, [r3, #0]
   2cc1e:	3301      	adds	r3, #1
   2cc20:	b29a      	uxth	r2, r3
   2cc22:	4b1a      	ldr	r3, [pc, #104]	; (2cc8c <chk_mounted+0x5f8>)
   2cc24:	801a      	strh	r2, [r3, #0]
   2cc26:	4b19      	ldr	r3, [pc, #100]	; (2cc8c <chk_mounted+0x5f8>)
   2cc28:	881a      	ldrh	r2, [r3, #0]
   2cc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cc2c:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2cc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cc30:	2200      	movs	r2, #0
   2cc32:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2cc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cc36:	2200      	movs	r2, #0
   2cc38:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2cc3a:	2300      	movs	r3, #0
}
   2cc3c:	0018      	movs	r0, r3
   2cc3e:	46bd      	mov	sp, r7
   2cc40:	b013      	add	sp, #76	; 0x4c
   2cc42:	bd90      	pop	{r4, r7, pc}
   2cc44:	00000ff5 	.word	0x00000ff5
   2cc48:	0000fff5 	.word	0x0000fff5
   2cc4c:	000001ff 	.word	0x000001ff
   2cc50:	0002a829 	.word	0x0002a829
   2cc54:	0000022f 	.word	0x0000022f
   2cc58:	0000022e 	.word	0x0000022e
   2cc5c:	ffffaa55 	.word	0xffffaa55
   2cc60:	41615252 	.word	0x41615252
   2cc64:	00000217 	.word	0x00000217
   2cc68:	00000216 	.word	0x00000216
   2cc6c:	00000215 	.word	0x00000215
   2cc70:	61417272 	.word	0x61417272
   2cc74:	0000021f 	.word	0x0000021f
   2cc78:	0000021e 	.word	0x0000021e
   2cc7c:	0000021d 	.word	0x0000021d
   2cc80:	0000021b 	.word	0x0000021b
   2cc84:	0000021a 	.word	0x0000021a
   2cc88:	00000219 	.word	0x00000219
   2cc8c:	2000417c 	.word	0x2000417c

0002cc90 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2cc90:	b580      	push	{r7, lr}
   2cc92:	b082      	sub	sp, #8
   2cc94:	af00      	add	r7, sp, #0
   2cc96:	6078      	str	r0, [r7, #4]
   2cc98:	000a      	movs	r2, r1
   2cc9a:	1cbb      	adds	r3, r7, #2
   2cc9c:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2cc9e:	687b      	ldr	r3, [r7, #4]
   2cca0:	2b00      	cmp	r3, #0
   2cca2:	d009      	beq.n	2ccb8 <validate+0x28>
   2cca4:	687b      	ldr	r3, [r7, #4]
   2cca6:	781b      	ldrb	r3, [r3, #0]
   2cca8:	2b00      	cmp	r3, #0
   2ccaa:	d005      	beq.n	2ccb8 <validate+0x28>
   2ccac:	687b      	ldr	r3, [r7, #4]
   2ccae:	88db      	ldrh	r3, [r3, #6]
   2ccb0:	1cba      	adds	r2, r7, #2
   2ccb2:	8812      	ldrh	r2, [r2, #0]
   2ccb4:	429a      	cmp	r2, r3
   2ccb6:	d001      	beq.n	2ccbc <validate+0x2c>
		return FR_INVALID_OBJECT;
   2ccb8:	2309      	movs	r3, #9
   2ccba:	e00c      	b.n	2ccd6 <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2ccbc:	687b      	ldr	r3, [r7, #4]
   2ccbe:	785b      	ldrb	r3, [r3, #1]
   2ccc0:	0018      	movs	r0, r3
   2ccc2:	4b07      	ldr	r3, [pc, #28]	; (2cce0 <validate+0x50>)
   2ccc4:	4798      	blx	r3
   2ccc6:	0003      	movs	r3, r0
   2ccc8:	001a      	movs	r2, r3
   2ccca:	2301      	movs	r3, #1
   2cccc:	4013      	ands	r3, r2
   2ccce:	d001      	beq.n	2ccd4 <validate+0x44>
		return FR_NOT_READY;
   2ccd0:	2303      	movs	r3, #3
   2ccd2:	e000      	b.n	2ccd6 <validate+0x46>

	return FR_OK;
   2ccd4:	2300      	movs	r3, #0
}
   2ccd6:	0018      	movs	r0, r3
   2ccd8:	46bd      	mov	sp, r7
   2ccda:	b002      	add	sp, #8
   2ccdc:	bd80      	pop	{r7, pc}
   2ccde:	46c0      	nop			; (mov r8, r8)
   2cce0:	0002a7f1 	.word	0x0002a7f1

0002cce4 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2cce4:	b580      	push	{r7, lr}
   2cce6:	b084      	sub	sp, #16
   2cce8:	af00      	add	r7, sp, #0
   2ccea:	0002      	movs	r2, r0
   2ccec:	6039      	str	r1, [r7, #0]
   2ccee:	1dfb      	adds	r3, r7, #7
   2ccf0:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2ccf2:	1dfb      	adds	r3, r7, #7
   2ccf4:	781b      	ldrb	r3, [r3, #0]
   2ccf6:	2b07      	cmp	r3, #7
   2ccf8:	d901      	bls.n	2ccfe <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2ccfa:	230b      	movs	r3, #11
   2ccfc:	e018      	b.n	2cd30 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2ccfe:	1dfb      	adds	r3, r7, #7
   2cd00:	781a      	ldrb	r2, [r3, #0]
   2cd02:	4b0d      	ldr	r3, [pc, #52]	; (2cd38 <f_mount+0x54>)
   2cd04:	0092      	lsls	r2, r2, #2
   2cd06:	58d3      	ldr	r3, [r2, r3]
   2cd08:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2cd0a:	68fb      	ldr	r3, [r7, #12]
   2cd0c:	2b00      	cmp	r3, #0
   2cd0e:	d002      	beq.n	2cd16 <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2cd10:	68fb      	ldr	r3, [r7, #12]
   2cd12:	2200      	movs	r2, #0
   2cd14:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2cd16:	683b      	ldr	r3, [r7, #0]
   2cd18:	2b00      	cmp	r3, #0
   2cd1a:	d002      	beq.n	2cd22 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2cd1c:	683b      	ldr	r3, [r7, #0]
   2cd1e:	2200      	movs	r2, #0
   2cd20:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2cd22:	1dfb      	adds	r3, r7, #7
   2cd24:	781a      	ldrb	r2, [r3, #0]
   2cd26:	4b04      	ldr	r3, [pc, #16]	; (2cd38 <f_mount+0x54>)
   2cd28:	0092      	lsls	r2, r2, #2
   2cd2a:	6839      	ldr	r1, [r7, #0]
   2cd2c:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2cd2e:	2300      	movs	r3, #0
}
   2cd30:	0018      	movs	r0, r3
   2cd32:	46bd      	mov	sp, r7
   2cd34:	b004      	add	sp, #16
   2cd36:	bd80      	pop	{r7, pc}
   2cd38:	2000415c 	.word	0x2000415c

0002cd3c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2cd3c:	b590      	push	{r4, r7, lr}
   2cd3e:	4ce5      	ldr	r4, [pc, #916]	; (2d0d4 <f_open+0x398>)
   2cd40:	44a5      	add	sp, r4
   2cd42:	af00      	add	r7, sp, #0
   2cd44:	60f8      	str	r0, [r7, #12]
   2cd46:	60b9      	str	r1, [r7, #8]
   2cd48:	4be3      	ldr	r3, [pc, #908]	; (2d0d8 <f_open+0x39c>)
   2cd4a:	2194      	movs	r1, #148	; 0x94
   2cd4c:	0089      	lsls	r1, r1, #2
   2cd4e:	468c      	mov	ip, r1
   2cd50:	44bc      	add	ip, r7
   2cd52:	4463      	add	r3, ip
   2cd54:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2cd56:	68fb      	ldr	r3, [r7, #12]
   2cd58:	2200      	movs	r2, #0
   2cd5a:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2cd5c:	4bde      	ldr	r3, [pc, #888]	; (2d0d8 <f_open+0x39c>)
   2cd5e:	2294      	movs	r2, #148	; 0x94
   2cd60:	0092      	lsls	r2, r2, #2
   2cd62:	4694      	mov	ip, r2
   2cd64:	44bc      	add	ip, r7
   2cd66:	4463      	add	r3, ip
   2cd68:	4adb      	ldr	r2, [pc, #876]	; (2d0d8 <f_open+0x39c>)
   2cd6a:	2194      	movs	r1, #148	; 0x94
   2cd6c:	0089      	lsls	r1, r1, #2
   2cd6e:	468c      	mov	ip, r1
   2cd70:	44bc      	add	ip, r7
   2cd72:	4462      	add	r2, ip
   2cd74:	7812      	ldrb	r2, [r2, #0]
   2cd76:	211f      	movs	r1, #31
   2cd78:	400a      	ands	r2, r1
   2cd7a:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2cd7c:	4bd6      	ldr	r3, [pc, #856]	; (2d0d8 <f_open+0x39c>)
   2cd7e:	2294      	movs	r2, #148	; 0x94
   2cd80:	0092      	lsls	r2, r2, #2
   2cd82:	4694      	mov	ip, r2
   2cd84:	44bc      	add	ip, r7
   2cd86:	4463      	add	r3, ip
   2cd88:	781b      	ldrb	r3, [r3, #0]
   2cd8a:	2201      	movs	r2, #1
   2cd8c:	4393      	bics	r3, r2
   2cd8e:	b2da      	uxtb	r2, r3
   2cd90:	4bd2      	ldr	r3, [pc, #840]	; (2d0dc <f_open+0x3a0>)
   2cd92:	18fc      	adds	r4, r7, r3
   2cd94:	2387      	movs	r3, #135	; 0x87
   2cd96:	009b      	lsls	r3, r3, #2
   2cd98:	18f9      	adds	r1, r7, r3
   2cd9a:	2308      	movs	r3, #8
   2cd9c:	18fb      	adds	r3, r7, r3
   2cd9e:	0018      	movs	r0, r3
   2cda0:	4bcf      	ldr	r3, [pc, #828]	; (2d0e0 <f_open+0x3a4>)
   2cda2:	4798      	blx	r3
   2cda4:	0003      	movs	r3, r0
   2cda6:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2cda8:	2387      	movs	r3, #135	; 0x87
   2cdaa:	009b      	lsls	r3, r3, #2
   2cdac:	18fb      	adds	r3, r7, r3
   2cdae:	2284      	movs	r2, #132	; 0x84
   2cdb0:	0092      	lsls	r2, r2, #2
   2cdb2:	18ba      	adds	r2, r7, r2
   2cdb4:	619a      	str	r2, [r3, #24]
   2cdb6:	2387      	movs	r3, #135	; 0x87
   2cdb8:	009b      	lsls	r3, r3, #2
   2cdba:	18fb      	adds	r3, r7, r3
   2cdbc:	2210      	movs	r2, #16
   2cdbe:	18ba      	adds	r2, r7, r2
   2cdc0:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2cdc2:	4bc6      	ldr	r3, [pc, #792]	; (2d0dc <f_open+0x3a0>)
   2cdc4:	18fb      	adds	r3, r7, r3
   2cdc6:	781b      	ldrb	r3, [r3, #0]
   2cdc8:	2b00      	cmp	r3, #0
   2cdca:	d10b      	bne.n	2cde4 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2cdcc:	68ba      	ldr	r2, [r7, #8]
   2cdce:	4bc3      	ldr	r3, [pc, #780]	; (2d0dc <f_open+0x3a0>)
   2cdd0:	18fc      	adds	r4, r7, r3
   2cdd2:	2387      	movs	r3, #135	; 0x87
   2cdd4:	009b      	lsls	r3, r3, #2
   2cdd6:	18fb      	adds	r3, r7, r3
   2cdd8:	0011      	movs	r1, r2
   2cdda:	0018      	movs	r0, r3
   2cddc:	4bc1      	ldr	r3, [pc, #772]	; (2d0e4 <f_open+0x3a8>)
   2cdde:	4798      	blx	r3
   2cde0:	0003      	movs	r3, r0
   2cde2:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2cde4:	2387      	movs	r3, #135	; 0x87
   2cde6:	009b      	lsls	r3, r3, #2
   2cde8:	18fb      	adds	r3, r7, r3
   2cdea:	695b      	ldr	r3, [r3, #20]
   2cdec:	2292      	movs	r2, #146	; 0x92
   2cdee:	0092      	lsls	r2, r2, #2
   2cdf0:	18ba      	adds	r2, r7, r2
   2cdf2:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2cdf4:	4bb9      	ldr	r3, [pc, #740]	; (2d0dc <f_open+0x3a0>)
   2cdf6:	18fb      	adds	r3, r7, r3
   2cdf8:	781b      	ldrb	r3, [r3, #0]
   2cdfa:	2b00      	cmp	r3, #0
   2cdfc:	d109      	bne.n	2ce12 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2cdfe:	2392      	movs	r3, #146	; 0x92
   2ce00:	009b      	lsls	r3, r3, #2
   2ce02:	18fb      	adds	r3, r7, r3
   2ce04:	681b      	ldr	r3, [r3, #0]
   2ce06:	2b00      	cmp	r3, #0
   2ce08:	d103      	bne.n	2ce12 <f_open+0xd6>
			res = FR_INVALID_NAME;
   2ce0a:	4bb4      	ldr	r3, [pc, #720]	; (2d0dc <f_open+0x3a0>)
   2ce0c:	18fb      	adds	r3, r7, r3
   2ce0e:	2206      	movs	r2, #6
   2ce10:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2ce12:	4bb1      	ldr	r3, [pc, #708]	; (2d0d8 <f_open+0x39c>)
   2ce14:	2294      	movs	r2, #148	; 0x94
   2ce16:	0092      	lsls	r2, r2, #2
   2ce18:	4694      	mov	ip, r2
   2ce1a:	44bc      	add	ip, r7
   2ce1c:	4463      	add	r3, ip
   2ce1e:	781b      	ldrb	r3, [r3, #0]
   2ce20:	221c      	movs	r2, #28
   2ce22:	4013      	ands	r3, r2
   2ce24:	d100      	bne.n	2ce28 <f_open+0xec>
   2ce26:	e141      	b.n	2d0ac <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2ce28:	4bac      	ldr	r3, [pc, #688]	; (2d0dc <f_open+0x3a0>)
   2ce2a:	18fb      	adds	r3, r7, r3
   2ce2c:	781b      	ldrb	r3, [r3, #0]
   2ce2e:	2b00      	cmp	r3, #0
   2ce30:	d027      	beq.n	2ce82 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2ce32:	4baa      	ldr	r3, [pc, #680]	; (2d0dc <f_open+0x3a0>)
   2ce34:	18fb      	adds	r3, r7, r3
   2ce36:	781b      	ldrb	r3, [r3, #0]
   2ce38:	2b04      	cmp	r3, #4
   2ce3a:	d109      	bne.n	2ce50 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2ce3c:	4ba7      	ldr	r3, [pc, #668]	; (2d0dc <f_open+0x3a0>)
   2ce3e:	18fc      	adds	r4, r7, r3
   2ce40:	2387      	movs	r3, #135	; 0x87
   2ce42:	009b      	lsls	r3, r3, #2
   2ce44:	18fb      	adds	r3, r7, r3
   2ce46:	0018      	movs	r0, r3
   2ce48:	4ba7      	ldr	r3, [pc, #668]	; (2d0e8 <f_open+0x3ac>)
   2ce4a:	4798      	blx	r3
   2ce4c:	0003      	movs	r3, r0
   2ce4e:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2ce50:	4ba1      	ldr	r3, [pc, #644]	; (2d0d8 <f_open+0x39c>)
   2ce52:	2294      	movs	r2, #148	; 0x94
   2ce54:	0092      	lsls	r2, r2, #2
   2ce56:	4694      	mov	ip, r2
   2ce58:	44bc      	add	ip, r7
   2ce5a:	4463      	add	r3, ip
   2ce5c:	4a9e      	ldr	r2, [pc, #632]	; (2d0d8 <f_open+0x39c>)
   2ce5e:	2194      	movs	r1, #148	; 0x94
   2ce60:	0089      	lsls	r1, r1, #2
   2ce62:	468c      	mov	ip, r1
   2ce64:	44bc      	add	ip, r7
   2ce66:	4462      	add	r2, ip
   2ce68:	7812      	ldrb	r2, [r2, #0]
   2ce6a:	2108      	movs	r1, #8
   2ce6c:	430a      	orrs	r2, r1
   2ce6e:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2ce70:	2387      	movs	r3, #135	; 0x87
   2ce72:	009b      	lsls	r3, r3, #2
   2ce74:	18fb      	adds	r3, r7, r3
   2ce76:	695b      	ldr	r3, [r3, #20]
   2ce78:	2292      	movs	r2, #146	; 0x92
   2ce7a:	0092      	lsls	r2, r2, #2
   2ce7c:	18ba      	adds	r2, r7, r2
   2ce7e:	6013      	str	r3, [r2, #0]
   2ce80:	e01c      	b.n	2cebc <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2ce82:	2392      	movs	r3, #146	; 0x92
   2ce84:	009b      	lsls	r3, r3, #2
   2ce86:	18fb      	adds	r3, r7, r3
   2ce88:	681b      	ldr	r3, [r3, #0]
   2ce8a:	330b      	adds	r3, #11
   2ce8c:	781b      	ldrb	r3, [r3, #0]
   2ce8e:	001a      	movs	r2, r3
   2ce90:	2311      	movs	r3, #17
   2ce92:	4013      	ands	r3, r2
   2ce94:	d004      	beq.n	2cea0 <f_open+0x164>
				res = FR_DENIED;
   2ce96:	4b91      	ldr	r3, [pc, #580]	; (2d0dc <f_open+0x3a0>)
   2ce98:	18fb      	adds	r3, r7, r3
   2ce9a:	2207      	movs	r2, #7
   2ce9c:	701a      	strb	r2, [r3, #0]
   2ce9e:	e00d      	b.n	2cebc <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2cea0:	4b8d      	ldr	r3, [pc, #564]	; (2d0d8 <f_open+0x39c>)
   2cea2:	2294      	movs	r2, #148	; 0x94
   2cea4:	0092      	lsls	r2, r2, #2
   2cea6:	4694      	mov	ip, r2
   2cea8:	44bc      	add	ip, r7
   2ceaa:	4463      	add	r3, ip
   2ceac:	781b      	ldrb	r3, [r3, #0]
   2ceae:	2204      	movs	r2, #4
   2ceb0:	4013      	ands	r3, r2
   2ceb2:	d003      	beq.n	2cebc <f_open+0x180>
					res = FR_EXIST;
   2ceb4:	4b89      	ldr	r3, [pc, #548]	; (2d0dc <f_open+0x3a0>)
   2ceb6:	18fb      	adds	r3, r7, r3
   2ceb8:	2208      	movs	r2, #8
   2ceba:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2cebc:	4b87      	ldr	r3, [pc, #540]	; (2d0dc <f_open+0x3a0>)
   2cebe:	18fb      	adds	r3, r7, r3
   2cec0:	781b      	ldrb	r3, [r3, #0]
   2cec2:	2b00      	cmp	r3, #0
   2cec4:	d000      	beq.n	2cec8 <f_open+0x18c>
   2cec6:	e12f      	b.n	2d128 <f_open+0x3ec>
   2cec8:	4b83      	ldr	r3, [pc, #524]	; (2d0d8 <f_open+0x39c>)
   2ceca:	2294      	movs	r2, #148	; 0x94
   2cecc:	0092      	lsls	r2, r2, #2
   2cece:	4694      	mov	ip, r2
   2ced0:	44bc      	add	ip, r7
   2ced2:	4463      	add	r3, ip
   2ced4:	781b      	ldrb	r3, [r3, #0]
   2ced6:	2208      	movs	r2, #8
   2ced8:	4013      	ands	r3, r2
   2ceda:	d100      	bne.n	2cede <f_open+0x1a2>
   2cedc:	e124      	b.n	2d128 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2cede:	4b83      	ldr	r3, [pc, #524]	; (2d0ec <f_open+0x3b0>)
   2cee0:	4798      	blx	r3
   2cee2:	0003      	movs	r3, r0
   2cee4:	2291      	movs	r2, #145	; 0x91
   2cee6:	0092      	lsls	r2, r2, #2
   2cee8:	18ba      	adds	r2, r7, r2
   2ceea:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2ceec:	2392      	movs	r3, #146	; 0x92
   2ceee:	009b      	lsls	r3, r3, #2
   2cef0:	18fb      	adds	r3, r7, r3
   2cef2:	681b      	ldr	r3, [r3, #0]
   2cef4:	330e      	adds	r3, #14
   2cef6:	2291      	movs	r2, #145	; 0x91
   2cef8:	0092      	lsls	r2, r2, #2
   2cefa:	18ba      	adds	r2, r7, r2
   2cefc:	6812      	ldr	r2, [r2, #0]
   2cefe:	b2d2      	uxtb	r2, r2
   2cf00:	701a      	strb	r2, [r3, #0]
   2cf02:	2392      	movs	r3, #146	; 0x92
   2cf04:	009b      	lsls	r3, r3, #2
   2cf06:	18fb      	adds	r3, r7, r3
   2cf08:	681b      	ldr	r3, [r3, #0]
   2cf0a:	330f      	adds	r3, #15
   2cf0c:	2291      	movs	r2, #145	; 0x91
   2cf0e:	0092      	lsls	r2, r2, #2
   2cf10:	18ba      	adds	r2, r7, r2
   2cf12:	6812      	ldr	r2, [r2, #0]
   2cf14:	b292      	uxth	r2, r2
   2cf16:	0a12      	lsrs	r2, r2, #8
   2cf18:	b292      	uxth	r2, r2
   2cf1a:	b2d2      	uxtb	r2, r2
   2cf1c:	701a      	strb	r2, [r3, #0]
   2cf1e:	2392      	movs	r3, #146	; 0x92
   2cf20:	009b      	lsls	r3, r3, #2
   2cf22:	18fb      	adds	r3, r7, r3
   2cf24:	681b      	ldr	r3, [r3, #0]
   2cf26:	3310      	adds	r3, #16
   2cf28:	2291      	movs	r2, #145	; 0x91
   2cf2a:	0092      	lsls	r2, r2, #2
   2cf2c:	18ba      	adds	r2, r7, r2
   2cf2e:	6812      	ldr	r2, [r2, #0]
   2cf30:	0c12      	lsrs	r2, r2, #16
   2cf32:	b2d2      	uxtb	r2, r2
   2cf34:	701a      	strb	r2, [r3, #0]
   2cf36:	2392      	movs	r3, #146	; 0x92
   2cf38:	009b      	lsls	r3, r3, #2
   2cf3a:	18fb      	adds	r3, r7, r3
   2cf3c:	681b      	ldr	r3, [r3, #0]
   2cf3e:	3311      	adds	r3, #17
   2cf40:	2291      	movs	r2, #145	; 0x91
   2cf42:	0092      	lsls	r2, r2, #2
   2cf44:	18ba      	adds	r2, r7, r2
   2cf46:	6812      	ldr	r2, [r2, #0]
   2cf48:	0e12      	lsrs	r2, r2, #24
   2cf4a:	b2d2      	uxtb	r2, r2
   2cf4c:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2cf4e:	2392      	movs	r3, #146	; 0x92
   2cf50:	009b      	lsls	r3, r3, #2
   2cf52:	18fb      	adds	r3, r7, r3
   2cf54:	681b      	ldr	r3, [r3, #0]
   2cf56:	330b      	adds	r3, #11
   2cf58:	2200      	movs	r2, #0
   2cf5a:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2cf5c:	2392      	movs	r3, #146	; 0x92
   2cf5e:	009b      	lsls	r3, r3, #2
   2cf60:	18fb      	adds	r3, r7, r3
   2cf62:	681b      	ldr	r3, [r3, #0]
   2cf64:	331c      	adds	r3, #28
   2cf66:	2200      	movs	r2, #0
   2cf68:	701a      	strb	r2, [r3, #0]
   2cf6a:	2392      	movs	r3, #146	; 0x92
   2cf6c:	009b      	lsls	r3, r3, #2
   2cf6e:	18fb      	adds	r3, r7, r3
   2cf70:	681b      	ldr	r3, [r3, #0]
   2cf72:	331d      	adds	r3, #29
   2cf74:	2200      	movs	r2, #0
   2cf76:	701a      	strb	r2, [r3, #0]
   2cf78:	2392      	movs	r3, #146	; 0x92
   2cf7a:	009b      	lsls	r3, r3, #2
   2cf7c:	18fb      	adds	r3, r7, r3
   2cf7e:	681b      	ldr	r3, [r3, #0]
   2cf80:	331e      	adds	r3, #30
   2cf82:	2200      	movs	r2, #0
   2cf84:	701a      	strb	r2, [r3, #0]
   2cf86:	2392      	movs	r3, #146	; 0x92
   2cf88:	009b      	lsls	r3, r3, #2
   2cf8a:	18fb      	adds	r3, r7, r3
   2cf8c:	681b      	ldr	r3, [r3, #0]
   2cf8e:	331f      	adds	r3, #31
   2cf90:	2200      	movs	r2, #0
   2cf92:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2cf94:	2392      	movs	r3, #146	; 0x92
   2cf96:	009b      	lsls	r3, r3, #2
   2cf98:	18fb      	adds	r3, r7, r3
   2cf9a:	681b      	ldr	r3, [r3, #0]
   2cf9c:	3315      	adds	r3, #21
   2cf9e:	781b      	ldrb	r3, [r3, #0]
   2cfa0:	021b      	lsls	r3, r3, #8
   2cfa2:	b21a      	sxth	r2, r3
   2cfa4:	2392      	movs	r3, #146	; 0x92
   2cfa6:	009b      	lsls	r3, r3, #2
   2cfa8:	18fb      	adds	r3, r7, r3
   2cfaa:	681b      	ldr	r3, [r3, #0]
   2cfac:	3314      	adds	r3, #20
   2cfae:	781b      	ldrb	r3, [r3, #0]
   2cfb0:	b21b      	sxth	r3, r3
   2cfb2:	4313      	orrs	r3, r2
   2cfb4:	b21b      	sxth	r3, r3
   2cfb6:	b29b      	uxth	r3, r3
   2cfb8:	041b      	lsls	r3, r3, #16
   2cfba:	2292      	movs	r2, #146	; 0x92
   2cfbc:	0092      	lsls	r2, r2, #2
   2cfbe:	18ba      	adds	r2, r7, r2
   2cfc0:	6812      	ldr	r2, [r2, #0]
   2cfc2:	321b      	adds	r2, #27
   2cfc4:	7812      	ldrb	r2, [r2, #0]
   2cfc6:	0212      	lsls	r2, r2, #8
   2cfc8:	b211      	sxth	r1, r2
   2cfca:	2292      	movs	r2, #146	; 0x92
   2cfcc:	0092      	lsls	r2, r2, #2
   2cfce:	18ba      	adds	r2, r7, r2
   2cfd0:	6812      	ldr	r2, [r2, #0]
   2cfd2:	321a      	adds	r2, #26
   2cfd4:	7812      	ldrb	r2, [r2, #0]
   2cfd6:	b212      	sxth	r2, r2
   2cfd8:	430a      	orrs	r2, r1
   2cfda:	b212      	sxth	r2, r2
   2cfdc:	b292      	uxth	r2, r2
   2cfde:	4313      	orrs	r3, r2
   2cfe0:	2290      	movs	r2, #144	; 0x90
   2cfe2:	0092      	lsls	r2, r2, #2
   2cfe4:	18ba      	adds	r2, r7, r2
   2cfe6:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2cfe8:	2392      	movs	r3, #146	; 0x92
   2cfea:	009b      	lsls	r3, r3, #2
   2cfec:	18fb      	adds	r3, r7, r3
   2cfee:	681b      	ldr	r3, [r3, #0]
   2cff0:	331a      	adds	r3, #26
   2cff2:	2200      	movs	r2, #0
   2cff4:	701a      	strb	r2, [r3, #0]
   2cff6:	2392      	movs	r3, #146	; 0x92
   2cff8:	009b      	lsls	r3, r3, #2
   2cffa:	18fb      	adds	r3, r7, r3
   2cffc:	681b      	ldr	r3, [r3, #0]
   2cffe:	331b      	adds	r3, #27
   2d000:	2200      	movs	r2, #0
   2d002:	701a      	strb	r2, [r3, #0]
   2d004:	2392      	movs	r3, #146	; 0x92
   2d006:	009b      	lsls	r3, r3, #2
   2d008:	18fb      	adds	r3, r7, r3
   2d00a:	681b      	ldr	r3, [r3, #0]
   2d00c:	3314      	adds	r3, #20
   2d00e:	2200      	movs	r2, #0
   2d010:	701a      	strb	r2, [r3, #0]
   2d012:	2392      	movs	r3, #146	; 0x92
   2d014:	009b      	lsls	r3, r3, #2
   2d016:	18fb      	adds	r3, r7, r3
   2d018:	681b      	ldr	r3, [r3, #0]
   2d01a:	3315      	adds	r3, #21
   2d01c:	2200      	movs	r2, #0
   2d01e:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2d020:	2387      	movs	r3, #135	; 0x87
   2d022:	009b      	lsls	r3, r3, #2
   2d024:	18fb      	adds	r3, r7, r3
   2d026:	681b      	ldr	r3, [r3, #0]
   2d028:	2201      	movs	r2, #1
   2d02a:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2d02c:	2390      	movs	r3, #144	; 0x90
   2d02e:	009b      	lsls	r3, r3, #2
   2d030:	18fb      	adds	r3, r7, r3
   2d032:	681b      	ldr	r3, [r3, #0]
   2d034:	2b00      	cmp	r3, #0
   2d036:	d100      	bne.n	2d03a <f_open+0x2fe>
   2d038:	e076      	b.n	2d128 <f_open+0x3ec>
				dw = dj.fs->winsect;
   2d03a:	2387      	movs	r3, #135	; 0x87
   2d03c:	009b      	lsls	r3, r3, #2
   2d03e:	18fb      	adds	r3, r7, r3
   2d040:	681b      	ldr	r3, [r3, #0]
   2d042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2d044:	2291      	movs	r2, #145	; 0x91
   2d046:	0092      	lsls	r2, r2, #2
   2d048:	18ba      	adds	r2, r7, r2
   2d04a:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2d04c:	2387      	movs	r3, #135	; 0x87
   2d04e:	009b      	lsls	r3, r3, #2
   2d050:	18fb      	adds	r3, r7, r3
   2d052:	681b      	ldr	r3, [r3, #0]
   2d054:	4a21      	ldr	r2, [pc, #132]	; (2d0dc <f_open+0x3a0>)
   2d056:	18bc      	adds	r4, r7, r2
   2d058:	2290      	movs	r2, #144	; 0x90
   2d05a:	0092      	lsls	r2, r2, #2
   2d05c:	18ba      	adds	r2, r7, r2
   2d05e:	6812      	ldr	r2, [r2, #0]
   2d060:	0011      	movs	r1, r2
   2d062:	0018      	movs	r0, r3
   2d064:	4b22      	ldr	r3, [pc, #136]	; (2d0f0 <f_open+0x3b4>)
   2d066:	4798      	blx	r3
   2d068:	0003      	movs	r3, r0
   2d06a:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2d06c:	4b1b      	ldr	r3, [pc, #108]	; (2d0dc <f_open+0x3a0>)
   2d06e:	18fb      	adds	r3, r7, r3
   2d070:	781b      	ldrb	r3, [r3, #0]
   2d072:	2b00      	cmp	r3, #0
   2d074:	d158      	bne.n	2d128 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2d076:	2387      	movs	r3, #135	; 0x87
   2d078:	009b      	lsls	r3, r3, #2
   2d07a:	18fb      	adds	r3, r7, r3
   2d07c:	681b      	ldr	r3, [r3, #0]
   2d07e:	2290      	movs	r2, #144	; 0x90
   2d080:	0092      	lsls	r2, r2, #2
   2d082:	18ba      	adds	r2, r7, r2
   2d084:	6812      	ldr	r2, [r2, #0]
   2d086:	3a01      	subs	r2, #1
   2d088:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2d08a:	2387      	movs	r3, #135	; 0x87
   2d08c:	009b      	lsls	r3, r3, #2
   2d08e:	18fb      	adds	r3, r7, r3
   2d090:	681b      	ldr	r3, [r3, #0]
   2d092:	4a12      	ldr	r2, [pc, #72]	; (2d0dc <f_open+0x3a0>)
   2d094:	18bc      	adds	r4, r7, r2
   2d096:	2291      	movs	r2, #145	; 0x91
   2d098:	0092      	lsls	r2, r2, #2
   2d09a:	18ba      	adds	r2, r7, r2
   2d09c:	6812      	ldr	r2, [r2, #0]
   2d09e:	0011      	movs	r1, r2
   2d0a0:	0018      	movs	r0, r3
   2d0a2:	4b14      	ldr	r3, [pc, #80]	; (2d0f4 <f_open+0x3b8>)
   2d0a4:	4798      	blx	r3
   2d0a6:	0003      	movs	r3, r0
   2d0a8:	7023      	strb	r3, [r4, #0]
   2d0aa:	e03d      	b.n	2d128 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2d0ac:	4b0b      	ldr	r3, [pc, #44]	; (2d0dc <f_open+0x3a0>)
   2d0ae:	18fb      	adds	r3, r7, r3
   2d0b0:	781b      	ldrb	r3, [r3, #0]
   2d0b2:	2b00      	cmp	r3, #0
   2d0b4:	d138      	bne.n	2d128 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2d0b6:	2392      	movs	r3, #146	; 0x92
   2d0b8:	009b      	lsls	r3, r3, #2
   2d0ba:	18fb      	adds	r3, r7, r3
   2d0bc:	681b      	ldr	r3, [r3, #0]
   2d0be:	330b      	adds	r3, #11
   2d0c0:	781b      	ldrb	r3, [r3, #0]
   2d0c2:	001a      	movs	r2, r3
   2d0c4:	2310      	movs	r3, #16
   2d0c6:	4013      	ands	r3, r2
   2d0c8:	d016      	beq.n	2d0f8 <f_open+0x3bc>
				res = FR_NO_FILE;
   2d0ca:	4b04      	ldr	r3, [pc, #16]	; (2d0dc <f_open+0x3a0>)
   2d0cc:	18fb      	adds	r3, r7, r3
   2d0ce:	2204      	movs	r2, #4
   2d0d0:	701a      	strb	r2, [r3, #0]
   2d0d2:	e029      	b.n	2d128 <f_open+0x3ec>
   2d0d4:	fffffdac 	.word	0xfffffdac
   2d0d8:	fffffdb7 	.word	0xfffffdb7
   2d0dc:	0000024f 	.word	0x0000024f
   2d0e0:	0002c695 	.word	0x0002c695
   2d0e4:	0002c489 	.word	0x0002c489
   2d0e8:	0002bcd9 	.word	0x0002bcd9
   2d0ec:	0002aad1 	.word	0x0002aad1
   2d0f0:	0002b255 	.word	0x0002b255
   2d0f4:	0002ac15 	.word	0x0002ac15
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2d0f8:	4b5a      	ldr	r3, [pc, #360]	; (2d264 <f_open+0x528>)
   2d0fa:	2294      	movs	r2, #148	; 0x94
   2d0fc:	0092      	lsls	r2, r2, #2
   2d0fe:	4694      	mov	ip, r2
   2d100:	44bc      	add	ip, r7
   2d102:	4463      	add	r3, ip
   2d104:	781b      	ldrb	r3, [r3, #0]
   2d106:	2202      	movs	r2, #2
   2d108:	4013      	ands	r3, r2
   2d10a:	d00d      	beq.n	2d128 <f_open+0x3ec>
   2d10c:	2392      	movs	r3, #146	; 0x92
   2d10e:	009b      	lsls	r3, r3, #2
   2d110:	18fb      	adds	r3, r7, r3
   2d112:	681b      	ldr	r3, [r3, #0]
   2d114:	330b      	adds	r3, #11
   2d116:	781b      	ldrb	r3, [r3, #0]
   2d118:	001a      	movs	r2, r3
   2d11a:	2301      	movs	r3, #1
   2d11c:	4013      	ands	r3, r2
   2d11e:	d003      	beq.n	2d128 <f_open+0x3ec>
					res = FR_DENIED;
   2d120:	4b51      	ldr	r3, [pc, #324]	; (2d268 <f_open+0x52c>)
   2d122:	18fb      	adds	r3, r7, r3
   2d124:	2207      	movs	r2, #7
   2d126:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2d128:	4b4f      	ldr	r3, [pc, #316]	; (2d268 <f_open+0x52c>)
   2d12a:	18fb      	adds	r3, r7, r3
   2d12c:	781b      	ldrb	r3, [r3, #0]
   2d12e:	2b00      	cmp	r3, #0
   2d130:	d126      	bne.n	2d180 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2d132:	4b4c      	ldr	r3, [pc, #304]	; (2d264 <f_open+0x528>)
   2d134:	2294      	movs	r2, #148	; 0x94
   2d136:	0092      	lsls	r2, r2, #2
   2d138:	4694      	mov	ip, r2
   2d13a:	44bc      	add	ip, r7
   2d13c:	4463      	add	r3, ip
   2d13e:	781b      	ldrb	r3, [r3, #0]
   2d140:	2208      	movs	r2, #8
   2d142:	4013      	ands	r3, r2
   2d144:	d00f      	beq.n	2d166 <f_open+0x42a>
			mode |= FA__WRITTEN;
   2d146:	4b47      	ldr	r3, [pc, #284]	; (2d264 <f_open+0x528>)
   2d148:	2294      	movs	r2, #148	; 0x94
   2d14a:	0092      	lsls	r2, r2, #2
   2d14c:	4694      	mov	ip, r2
   2d14e:	44bc      	add	ip, r7
   2d150:	4463      	add	r3, ip
   2d152:	4a44      	ldr	r2, [pc, #272]	; (2d264 <f_open+0x528>)
   2d154:	2194      	movs	r1, #148	; 0x94
   2d156:	0089      	lsls	r1, r1, #2
   2d158:	468c      	mov	ip, r1
   2d15a:	44bc      	add	ip, r7
   2d15c:	4462      	add	r2, ip
   2d15e:	7812      	ldrb	r2, [r2, #0]
   2d160:	2120      	movs	r1, #32
   2d162:	430a      	orrs	r2, r1
   2d164:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2d166:	2387      	movs	r3, #135	; 0x87
   2d168:	009b      	lsls	r3, r3, #2
   2d16a:	18fb      	adds	r3, r7, r3
   2d16c:	681b      	ldr	r3, [r3, #0]
   2d16e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d170:	68fb      	ldr	r3, [r7, #12]
   2d172:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2d174:	68fb      	ldr	r3, [r7, #12]
   2d176:	2292      	movs	r2, #146	; 0x92
   2d178:	0092      	lsls	r2, r2, #2
   2d17a:	18ba      	adds	r2, r7, r2
   2d17c:	6812      	ldr	r2, [r2, #0]
   2d17e:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2d180:	4b39      	ldr	r3, [pc, #228]	; (2d268 <f_open+0x52c>)
   2d182:	18fb      	adds	r3, r7, r3
   2d184:	781b      	ldrb	r3, [r3, #0]
   2d186:	2b00      	cmp	r3, #0
   2d188:	d163      	bne.n	2d252 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2d18a:	68fb      	ldr	r3, [r7, #12]
   2d18c:	4a35      	ldr	r2, [pc, #212]	; (2d264 <f_open+0x528>)
   2d18e:	2194      	movs	r1, #148	; 0x94
   2d190:	0089      	lsls	r1, r1, #2
   2d192:	468c      	mov	ip, r1
   2d194:	44bc      	add	ip, r7
   2d196:	4462      	add	r2, ip
   2d198:	7812      	ldrb	r2, [r2, #0]
   2d19a:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2d19c:	2392      	movs	r3, #146	; 0x92
   2d19e:	009b      	lsls	r3, r3, #2
   2d1a0:	18fb      	adds	r3, r7, r3
   2d1a2:	681b      	ldr	r3, [r3, #0]
   2d1a4:	3315      	adds	r3, #21
   2d1a6:	781b      	ldrb	r3, [r3, #0]
   2d1a8:	021b      	lsls	r3, r3, #8
   2d1aa:	b21a      	sxth	r2, r3
   2d1ac:	2392      	movs	r3, #146	; 0x92
   2d1ae:	009b      	lsls	r3, r3, #2
   2d1b0:	18fb      	adds	r3, r7, r3
   2d1b2:	681b      	ldr	r3, [r3, #0]
   2d1b4:	3314      	adds	r3, #20
   2d1b6:	781b      	ldrb	r3, [r3, #0]
   2d1b8:	b21b      	sxth	r3, r3
   2d1ba:	4313      	orrs	r3, r2
   2d1bc:	b21b      	sxth	r3, r3
   2d1be:	b29b      	uxth	r3, r3
   2d1c0:	041b      	lsls	r3, r3, #16
   2d1c2:	2292      	movs	r2, #146	; 0x92
   2d1c4:	0092      	lsls	r2, r2, #2
   2d1c6:	18ba      	adds	r2, r7, r2
   2d1c8:	6812      	ldr	r2, [r2, #0]
   2d1ca:	321b      	adds	r2, #27
   2d1cc:	7812      	ldrb	r2, [r2, #0]
   2d1ce:	0212      	lsls	r2, r2, #8
   2d1d0:	b211      	sxth	r1, r2
   2d1d2:	2292      	movs	r2, #146	; 0x92
   2d1d4:	0092      	lsls	r2, r2, #2
   2d1d6:	18ba      	adds	r2, r7, r2
   2d1d8:	6812      	ldr	r2, [r2, #0]
   2d1da:	321a      	adds	r2, #26
   2d1dc:	7812      	ldrb	r2, [r2, #0]
   2d1de:	b212      	sxth	r2, r2
   2d1e0:	430a      	orrs	r2, r1
   2d1e2:	b212      	sxth	r2, r2
   2d1e4:	b292      	uxth	r2, r2
   2d1e6:	431a      	orrs	r2, r3
   2d1e8:	68fb      	ldr	r3, [r7, #12]
   2d1ea:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2d1ec:	2392      	movs	r3, #146	; 0x92
   2d1ee:	009b      	lsls	r3, r3, #2
   2d1f0:	18fb      	adds	r3, r7, r3
   2d1f2:	681b      	ldr	r3, [r3, #0]
   2d1f4:	331f      	adds	r3, #31
   2d1f6:	781b      	ldrb	r3, [r3, #0]
   2d1f8:	061a      	lsls	r2, r3, #24
   2d1fa:	2392      	movs	r3, #146	; 0x92
   2d1fc:	009b      	lsls	r3, r3, #2
   2d1fe:	18fb      	adds	r3, r7, r3
   2d200:	681b      	ldr	r3, [r3, #0]
   2d202:	331e      	adds	r3, #30
   2d204:	781b      	ldrb	r3, [r3, #0]
   2d206:	041b      	lsls	r3, r3, #16
   2d208:	4313      	orrs	r3, r2
   2d20a:	2292      	movs	r2, #146	; 0x92
   2d20c:	0092      	lsls	r2, r2, #2
   2d20e:	18ba      	adds	r2, r7, r2
   2d210:	6812      	ldr	r2, [r2, #0]
   2d212:	321d      	adds	r2, #29
   2d214:	7812      	ldrb	r2, [r2, #0]
   2d216:	0212      	lsls	r2, r2, #8
   2d218:	4313      	orrs	r3, r2
   2d21a:	2292      	movs	r2, #146	; 0x92
   2d21c:	0092      	lsls	r2, r2, #2
   2d21e:	18ba      	adds	r2, r7, r2
   2d220:	6812      	ldr	r2, [r2, #0]
   2d222:	321c      	adds	r2, #28
   2d224:	7812      	ldrb	r2, [r2, #0]
   2d226:	431a      	orrs	r2, r3
   2d228:	68fb      	ldr	r3, [r7, #12]
   2d22a:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2d22c:	68fb      	ldr	r3, [r7, #12]
   2d22e:	2200      	movs	r2, #0
   2d230:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2d232:	68fb      	ldr	r3, [r7, #12]
   2d234:	2200      	movs	r2, #0
   2d236:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2d238:	2387      	movs	r3, #135	; 0x87
   2d23a:	009b      	lsls	r3, r3, #2
   2d23c:	18fb      	adds	r3, r7, r3
   2d23e:	681a      	ldr	r2, [r3, #0]
   2d240:	68fb      	ldr	r3, [r7, #12]
   2d242:	601a      	str	r2, [r3, #0]
   2d244:	2387      	movs	r3, #135	; 0x87
   2d246:	009b      	lsls	r3, r3, #2
   2d248:	18fb      	adds	r3, r7, r3
   2d24a:	681b      	ldr	r3, [r3, #0]
   2d24c:	88da      	ldrh	r2, [r3, #6]
   2d24e:	68fb      	ldr	r3, [r7, #12]
   2d250:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2d252:	4b05      	ldr	r3, [pc, #20]	; (2d268 <f_open+0x52c>)
   2d254:	18fb      	adds	r3, r7, r3
   2d256:	781b      	ldrb	r3, [r3, #0]
}
   2d258:	0018      	movs	r0, r3
   2d25a:	46bd      	mov	sp, r7
   2d25c:	2395      	movs	r3, #149	; 0x95
   2d25e:	009b      	lsls	r3, r3, #2
   2d260:	449d      	add	sp, r3
   2d262:	bd90      	pop	{r4, r7, pc}
   2d264:	fffffdb7 	.word	0xfffffdb7
   2d268:	0000024f 	.word	0x0000024f

0002d26c <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2d26c:	b590      	push	{r4, r7, lr}
   2d26e:	b08b      	sub	sp, #44	; 0x2c
   2d270:	af00      	add	r7, sp, #0
   2d272:	60f8      	str	r0, [r7, #12]
   2d274:	60b9      	str	r1, [r7, #8]
   2d276:	607a      	str	r2, [r7, #4]
   2d278:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2d27a:	68bb      	ldr	r3, [r7, #8]
   2d27c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2d27e:	683b      	ldr	r3, [r7, #0]
   2d280:	2200      	movs	r2, #0
   2d282:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2d284:	68fb      	ldr	r3, [r7, #12]
   2d286:	681a      	ldr	r2, [r3, #0]
   2d288:	68fb      	ldr	r3, [r7, #12]
   2d28a:	889b      	ldrh	r3, [r3, #4]
   2d28c:	2117      	movs	r1, #23
   2d28e:	187c      	adds	r4, r7, r1
   2d290:	0019      	movs	r1, r3
   2d292:	0010      	movs	r0, r2
   2d294:	4bc3      	ldr	r3, [pc, #780]	; (2d5a4 <f_write+0x338>)
   2d296:	4798      	blx	r3
   2d298:	0003      	movs	r3, r0
   2d29a:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2d29c:	2317      	movs	r3, #23
   2d29e:	18fb      	adds	r3, r7, r3
   2d2a0:	781b      	ldrb	r3, [r3, #0]
   2d2a2:	2b00      	cmp	r3, #0
   2d2a4:	d003      	beq.n	2d2ae <f_write+0x42>
   2d2a6:	2317      	movs	r3, #23
   2d2a8:	18fb      	adds	r3, r7, r3
   2d2aa:	781b      	ldrb	r3, [r3, #0]
   2d2ac:	e176      	b.n	2d59c <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2d2ae:	68fb      	ldr	r3, [r7, #12]
   2d2b0:	799b      	ldrb	r3, [r3, #6]
   2d2b2:	b25b      	sxtb	r3, r3
   2d2b4:	2b00      	cmp	r3, #0
   2d2b6:	da01      	bge.n	2d2bc <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2d2b8:	2302      	movs	r3, #2
   2d2ba:	e16f      	b.n	2d59c <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2d2bc:	68fb      	ldr	r3, [r7, #12]
   2d2be:	799b      	ldrb	r3, [r3, #6]
   2d2c0:	001a      	movs	r2, r3
   2d2c2:	2302      	movs	r3, #2
   2d2c4:	4013      	ands	r3, r2
   2d2c6:	d101      	bne.n	2d2cc <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2d2c8:	2307      	movs	r3, #7
   2d2ca:	e167      	b.n	2d59c <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2d2cc:	68fb      	ldr	r3, [r7, #12]
   2d2ce:	68da      	ldr	r2, [r3, #12]
   2d2d0:	687b      	ldr	r3, [r7, #4]
   2d2d2:	18d2      	adds	r2, r2, r3
   2d2d4:	68fb      	ldr	r3, [r7, #12]
   2d2d6:	68db      	ldr	r3, [r3, #12]
   2d2d8:	429a      	cmp	r2, r3
   2d2da:	d300      	bcc.n	2d2de <f_write+0x72>
   2d2dc:	e146      	b.n	2d56c <f_write+0x300>
   2d2de:	2300      	movs	r3, #0
   2d2e0:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2d2e2:	e143      	b.n	2d56c <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2d2e4:	68fb      	ldr	r3, [r7, #12]
   2d2e6:	689b      	ldr	r3, [r3, #8]
   2d2e8:	05db      	lsls	r3, r3, #23
   2d2ea:	0ddb      	lsrs	r3, r3, #23
   2d2ec:	d000      	beq.n	2d2f0 <f_write+0x84>
   2d2ee:	e0f6      	b.n	2d4de <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2d2f0:	68fb      	ldr	r3, [r7, #12]
   2d2f2:	689b      	ldr	r3, [r3, #8]
   2d2f4:	0a5b      	lsrs	r3, r3, #9
   2d2f6:	b2da      	uxtb	r2, r3
   2d2f8:	68fb      	ldr	r3, [r7, #12]
   2d2fa:	681b      	ldr	r3, [r3, #0]
   2d2fc:	789b      	ldrb	r3, [r3, #2]
   2d2fe:	3b01      	subs	r3, #1
   2d300:	b2d9      	uxtb	r1, r3
   2d302:	2316      	movs	r3, #22
   2d304:	18fb      	adds	r3, r7, r3
   2d306:	400a      	ands	r2, r1
   2d308:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2d30a:	2316      	movs	r3, #22
   2d30c:	18fb      	adds	r3, r7, r3
   2d30e:	781b      	ldrb	r3, [r3, #0]
   2d310:	2b00      	cmp	r3, #0
   2d312:	d140      	bne.n	2d396 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2d314:	68fb      	ldr	r3, [r7, #12]
   2d316:	689b      	ldr	r3, [r3, #8]
   2d318:	2b00      	cmp	r3, #0
   2d31a:	d111      	bne.n	2d340 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2d31c:	68fb      	ldr	r3, [r7, #12]
   2d31e:	691b      	ldr	r3, [r3, #16]
   2d320:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2d322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d324:	2b00      	cmp	r3, #0
   2d326:	d115      	bne.n	2d354 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2d328:	68fb      	ldr	r3, [r7, #12]
   2d32a:	681b      	ldr	r3, [r3, #0]
   2d32c:	2100      	movs	r1, #0
   2d32e:	0018      	movs	r0, r3
   2d330:	4b9d      	ldr	r3, [pc, #628]	; (2d5a8 <f_write+0x33c>)
   2d332:	4798      	blx	r3
   2d334:	0003      	movs	r3, r0
   2d336:	627b      	str	r3, [r7, #36]	; 0x24
   2d338:	68fb      	ldr	r3, [r7, #12]
   2d33a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2d33c:	611a      	str	r2, [r3, #16]
   2d33e:	e009      	b.n	2d354 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2d340:	68fb      	ldr	r3, [r7, #12]
   2d342:	681a      	ldr	r2, [r3, #0]
   2d344:	68fb      	ldr	r3, [r7, #12]
   2d346:	695b      	ldr	r3, [r3, #20]
   2d348:	0019      	movs	r1, r3
   2d34a:	0010      	movs	r0, r2
   2d34c:	4b96      	ldr	r3, [pc, #600]	; (2d5a8 <f_write+0x33c>)
   2d34e:	4798      	blx	r3
   2d350:	0003      	movs	r3, r0
   2d352:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2d354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d356:	2b00      	cmp	r3, #0
   2d358:	d100      	bne.n	2d35c <f_write+0xf0>
   2d35a:	e10c      	b.n	2d576 <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2d35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d35e:	2b01      	cmp	r3, #1
   2d360:	d109      	bne.n	2d376 <f_write+0x10a>
   2d362:	68fb      	ldr	r3, [r7, #12]
   2d364:	799b      	ldrb	r3, [r3, #6]
   2d366:	2280      	movs	r2, #128	; 0x80
   2d368:	4252      	negs	r2, r2
   2d36a:	4313      	orrs	r3, r2
   2d36c:	b2da      	uxtb	r2, r3
   2d36e:	68fb      	ldr	r3, [r7, #12]
   2d370:	719a      	strb	r2, [r3, #6]
   2d372:	2302      	movs	r3, #2
   2d374:	e112      	b.n	2d59c <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2d376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d378:	3301      	adds	r3, #1
   2d37a:	d109      	bne.n	2d390 <f_write+0x124>
   2d37c:	68fb      	ldr	r3, [r7, #12]
   2d37e:	799b      	ldrb	r3, [r3, #6]
   2d380:	2280      	movs	r2, #128	; 0x80
   2d382:	4252      	negs	r2, r2
   2d384:	4313      	orrs	r3, r2
   2d386:	b2da      	uxtb	r2, r3
   2d388:	68fb      	ldr	r3, [r7, #12]
   2d38a:	719a      	strb	r2, [r3, #6]
   2d38c:	2301      	movs	r3, #1
   2d38e:	e105      	b.n	2d59c <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2d390:	68fb      	ldr	r3, [r7, #12]
   2d392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2d394:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2d396:	68fb      	ldr	r3, [r7, #12]
   2d398:	681b      	ldr	r3, [r3, #0]
   2d39a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d39c:	68fb      	ldr	r3, [r7, #12]
   2d39e:	699b      	ldr	r3, [r3, #24]
   2d3a0:	429a      	cmp	r2, r3
   2d3a2:	d111      	bne.n	2d3c8 <f_write+0x15c>
   2d3a4:	68fb      	ldr	r3, [r7, #12]
   2d3a6:	681b      	ldr	r3, [r3, #0]
   2d3a8:	2100      	movs	r1, #0
   2d3aa:	0018      	movs	r0, r3
   2d3ac:	4b7f      	ldr	r3, [pc, #508]	; (2d5ac <f_write+0x340>)
   2d3ae:	4798      	blx	r3
   2d3b0:	1e03      	subs	r3, r0, #0
   2d3b2:	d009      	beq.n	2d3c8 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2d3b4:	68fb      	ldr	r3, [r7, #12]
   2d3b6:	799b      	ldrb	r3, [r3, #6]
   2d3b8:	2280      	movs	r2, #128	; 0x80
   2d3ba:	4252      	negs	r2, r2
   2d3bc:	4313      	orrs	r3, r2
   2d3be:	b2da      	uxtb	r2, r3
   2d3c0:	68fb      	ldr	r3, [r7, #12]
   2d3c2:	719a      	strb	r2, [r3, #6]
   2d3c4:	2301      	movs	r3, #1
   2d3c6:	e0e9      	b.n	2d59c <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2d3c8:	68fb      	ldr	r3, [r7, #12]
   2d3ca:	681a      	ldr	r2, [r3, #0]
   2d3cc:	68fb      	ldr	r3, [r7, #12]
   2d3ce:	695b      	ldr	r3, [r3, #20]
   2d3d0:	0019      	movs	r1, r3
   2d3d2:	0010      	movs	r0, r2
   2d3d4:	4b76      	ldr	r3, [pc, #472]	; (2d5b0 <f_write+0x344>)
   2d3d6:	4798      	blx	r3
   2d3d8:	0003      	movs	r3, r0
   2d3da:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2d3dc:	693b      	ldr	r3, [r7, #16]
   2d3de:	2b00      	cmp	r3, #0
   2d3e0:	d109      	bne.n	2d3f6 <f_write+0x18a>
   2d3e2:	68fb      	ldr	r3, [r7, #12]
   2d3e4:	799b      	ldrb	r3, [r3, #6]
   2d3e6:	2280      	movs	r2, #128	; 0x80
   2d3e8:	4252      	negs	r2, r2
   2d3ea:	4313      	orrs	r3, r2
   2d3ec:	b2da      	uxtb	r2, r3
   2d3ee:	68fb      	ldr	r3, [r7, #12]
   2d3f0:	719a      	strb	r2, [r3, #6]
   2d3f2:	2302      	movs	r3, #2
   2d3f4:	e0d2      	b.n	2d59c <f_write+0x330>
			sect += csect;
   2d3f6:	2316      	movs	r3, #22
   2d3f8:	18fb      	adds	r3, r7, r3
   2d3fa:	781b      	ldrb	r3, [r3, #0]
   2d3fc:	693a      	ldr	r2, [r7, #16]
   2d3fe:	18d3      	adds	r3, r2, r3
   2d400:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2d402:	687b      	ldr	r3, [r7, #4]
   2d404:	0a5b      	lsrs	r3, r3, #9
   2d406:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2d408:	69fb      	ldr	r3, [r7, #28]
   2d40a:	2b00      	cmp	r3, #0
   2d40c:	d048      	beq.n	2d4a0 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2d40e:	2316      	movs	r3, #22
   2d410:	18fb      	adds	r3, r7, r3
   2d412:	781a      	ldrb	r2, [r3, #0]
   2d414:	69fb      	ldr	r3, [r7, #28]
   2d416:	18d2      	adds	r2, r2, r3
   2d418:	68fb      	ldr	r3, [r7, #12]
   2d41a:	681b      	ldr	r3, [r3, #0]
   2d41c:	789b      	ldrb	r3, [r3, #2]
   2d41e:	429a      	cmp	r2, r3
   2d420:	d908      	bls.n	2d434 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2d422:	68fb      	ldr	r3, [r7, #12]
   2d424:	681b      	ldr	r3, [r3, #0]
   2d426:	789b      	ldrb	r3, [r3, #2]
   2d428:	001a      	movs	r2, r3
   2d42a:	2316      	movs	r3, #22
   2d42c:	18fb      	adds	r3, r7, r3
   2d42e:	781b      	ldrb	r3, [r3, #0]
   2d430:	1ad3      	subs	r3, r2, r3
   2d432:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2d434:	68fb      	ldr	r3, [r7, #12]
   2d436:	681b      	ldr	r3, [r3, #0]
   2d438:	7858      	ldrb	r0, [r3, #1]
   2d43a:	69fb      	ldr	r3, [r7, #28]
   2d43c:	b2db      	uxtb	r3, r3
   2d43e:	693a      	ldr	r2, [r7, #16]
   2d440:	69b9      	ldr	r1, [r7, #24]
   2d442:	4c5c      	ldr	r4, [pc, #368]	; (2d5b4 <f_write+0x348>)
   2d444:	47a0      	blx	r4
   2d446:	1e03      	subs	r3, r0, #0
   2d448:	d009      	beq.n	2d45e <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2d44a:	68fb      	ldr	r3, [r7, #12]
   2d44c:	799b      	ldrb	r3, [r3, #6]
   2d44e:	2280      	movs	r2, #128	; 0x80
   2d450:	4252      	negs	r2, r2
   2d452:	4313      	orrs	r3, r2
   2d454:	b2da      	uxtb	r2, r3
   2d456:	68fb      	ldr	r3, [r7, #12]
   2d458:	719a      	strb	r2, [r3, #6]
   2d45a:	2301      	movs	r3, #1
   2d45c:	e09e      	b.n	2d59c <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2d45e:	68fb      	ldr	r3, [r7, #12]
   2d460:	681b      	ldr	r3, [r3, #0]
   2d462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d464:	693b      	ldr	r3, [r7, #16]
   2d466:	1ad2      	subs	r2, r2, r3
   2d468:	69fb      	ldr	r3, [r7, #28]
   2d46a:	429a      	cmp	r2, r3
   2d46c:	d214      	bcs.n	2d498 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2d46e:	68fb      	ldr	r3, [r7, #12]
   2d470:	681b      	ldr	r3, [r3, #0]
   2d472:	3330      	adds	r3, #48	; 0x30
   2d474:	0018      	movs	r0, r3
   2d476:	68fb      	ldr	r3, [r7, #12]
   2d478:	681b      	ldr	r3, [r3, #0]
   2d47a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d47c:	693b      	ldr	r3, [r7, #16]
   2d47e:	1ad3      	subs	r3, r2, r3
   2d480:	025b      	lsls	r3, r3, #9
   2d482:	69ba      	ldr	r2, [r7, #24]
   2d484:	18d1      	adds	r1, r2, r3
   2d486:	2380      	movs	r3, #128	; 0x80
   2d488:	009b      	lsls	r3, r3, #2
   2d48a:	001a      	movs	r2, r3
   2d48c:	4b4a      	ldr	r3, [pc, #296]	; (2d5b8 <f_write+0x34c>)
   2d48e:	4798      	blx	r3
					fp->fs->wflag = 0;
   2d490:	68fb      	ldr	r3, [r7, #12]
   2d492:	681b      	ldr	r3, [r3, #0]
   2d494:	2200      	movs	r2, #0
   2d496:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2d498:	69fb      	ldr	r3, [r7, #28]
   2d49a:	025b      	lsls	r3, r3, #9
   2d49c:	623b      	str	r3, [r7, #32]
				continue;
   2d49e:	e051      	b.n	2d544 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2d4a0:	68fb      	ldr	r3, [r7, #12]
   2d4a2:	689a      	ldr	r2, [r3, #8]
   2d4a4:	68fb      	ldr	r3, [r7, #12]
   2d4a6:	68db      	ldr	r3, [r3, #12]
   2d4a8:	429a      	cmp	r2, r3
   2d4aa:	d315      	bcc.n	2d4d8 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2d4ac:	68fb      	ldr	r3, [r7, #12]
   2d4ae:	681b      	ldr	r3, [r3, #0]
   2d4b0:	2100      	movs	r1, #0
   2d4b2:	0018      	movs	r0, r3
   2d4b4:	4b3d      	ldr	r3, [pc, #244]	; (2d5ac <f_write+0x340>)
   2d4b6:	4798      	blx	r3
   2d4b8:	1e03      	subs	r3, r0, #0
   2d4ba:	d009      	beq.n	2d4d0 <f_write+0x264>
   2d4bc:	68fb      	ldr	r3, [r7, #12]
   2d4be:	799b      	ldrb	r3, [r3, #6]
   2d4c0:	2280      	movs	r2, #128	; 0x80
   2d4c2:	4252      	negs	r2, r2
   2d4c4:	4313      	orrs	r3, r2
   2d4c6:	b2da      	uxtb	r2, r3
   2d4c8:	68fb      	ldr	r3, [r7, #12]
   2d4ca:	719a      	strb	r2, [r3, #6]
   2d4cc:	2301      	movs	r3, #1
   2d4ce:	e065      	b.n	2d59c <f_write+0x330>
				fp->fs->winsect = sect;
   2d4d0:	68fb      	ldr	r3, [r7, #12]
   2d4d2:	681b      	ldr	r3, [r3, #0]
   2d4d4:	693a      	ldr	r2, [r7, #16]
   2d4d6:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2d4d8:	68fb      	ldr	r3, [r7, #12]
   2d4da:	693a      	ldr	r2, [r7, #16]
   2d4dc:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2d4de:	68fb      	ldr	r3, [r7, #12]
   2d4e0:	689b      	ldr	r3, [r3, #8]
   2d4e2:	05db      	lsls	r3, r3, #23
   2d4e4:	0ddb      	lsrs	r3, r3, #23
   2d4e6:	2280      	movs	r2, #128	; 0x80
   2d4e8:	0092      	lsls	r2, r2, #2
   2d4ea:	1ad3      	subs	r3, r2, r3
   2d4ec:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2d4ee:	6a3a      	ldr	r2, [r7, #32]
   2d4f0:	687b      	ldr	r3, [r7, #4]
   2d4f2:	429a      	cmp	r2, r3
   2d4f4:	d901      	bls.n	2d4fa <f_write+0x28e>
   2d4f6:	687b      	ldr	r3, [r7, #4]
   2d4f8:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2d4fa:	68fb      	ldr	r3, [r7, #12]
   2d4fc:	681a      	ldr	r2, [r3, #0]
   2d4fe:	68fb      	ldr	r3, [r7, #12]
   2d500:	699b      	ldr	r3, [r3, #24]
   2d502:	0019      	movs	r1, r3
   2d504:	0010      	movs	r0, r2
   2d506:	4b29      	ldr	r3, [pc, #164]	; (2d5ac <f_write+0x340>)
   2d508:	4798      	blx	r3
   2d50a:	1e03      	subs	r3, r0, #0
   2d50c:	d009      	beq.n	2d522 <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2d50e:	68fb      	ldr	r3, [r7, #12]
   2d510:	799b      	ldrb	r3, [r3, #6]
   2d512:	2280      	movs	r2, #128	; 0x80
   2d514:	4252      	negs	r2, r2
   2d516:	4313      	orrs	r3, r2
   2d518:	b2da      	uxtb	r2, r3
   2d51a:	68fb      	ldr	r3, [r7, #12]
   2d51c:	719a      	strb	r2, [r3, #6]
   2d51e:	2301      	movs	r3, #1
   2d520:	e03c      	b.n	2d59c <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2d522:	68fb      	ldr	r3, [r7, #12]
   2d524:	681a      	ldr	r2, [r3, #0]
   2d526:	68fb      	ldr	r3, [r7, #12]
   2d528:	689b      	ldr	r3, [r3, #8]
   2d52a:	05db      	lsls	r3, r3, #23
   2d52c:	0ddb      	lsrs	r3, r3, #23
   2d52e:	3330      	adds	r3, #48	; 0x30
   2d530:	18d3      	adds	r3, r2, r3
   2d532:	6a3a      	ldr	r2, [r7, #32]
   2d534:	69b9      	ldr	r1, [r7, #24]
   2d536:	0018      	movs	r0, r3
   2d538:	4b1f      	ldr	r3, [pc, #124]	; (2d5b8 <f_write+0x34c>)
   2d53a:	4798      	blx	r3
		fp->fs->wflag = 1;
   2d53c:	68fb      	ldr	r3, [r7, #12]
   2d53e:	681b      	ldr	r3, [r3, #0]
   2d540:	2201      	movs	r2, #1
   2d542:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2d544:	69ba      	ldr	r2, [r7, #24]
   2d546:	6a3b      	ldr	r3, [r7, #32]
   2d548:	18d3      	adds	r3, r2, r3
   2d54a:	61bb      	str	r3, [r7, #24]
   2d54c:	68fb      	ldr	r3, [r7, #12]
   2d54e:	689a      	ldr	r2, [r3, #8]
   2d550:	6a3b      	ldr	r3, [r7, #32]
   2d552:	18d2      	adds	r2, r2, r3
   2d554:	68fb      	ldr	r3, [r7, #12]
   2d556:	609a      	str	r2, [r3, #8]
   2d558:	683b      	ldr	r3, [r7, #0]
   2d55a:	681a      	ldr	r2, [r3, #0]
   2d55c:	6a3b      	ldr	r3, [r7, #32]
   2d55e:	18d2      	adds	r2, r2, r3
   2d560:	683b      	ldr	r3, [r7, #0]
   2d562:	601a      	str	r2, [r3, #0]
   2d564:	687a      	ldr	r2, [r7, #4]
   2d566:	6a3b      	ldr	r3, [r7, #32]
   2d568:	1ad3      	subs	r3, r2, r3
   2d56a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2d56c:	687b      	ldr	r3, [r7, #4]
   2d56e:	2b00      	cmp	r3, #0
   2d570:	d000      	beq.n	2d574 <f_write+0x308>
   2d572:	e6b7      	b.n	2d2e4 <f_write+0x78>
   2d574:	e000      	b.n	2d578 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2d576:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2d578:	68fb      	ldr	r3, [r7, #12]
   2d57a:	689a      	ldr	r2, [r3, #8]
   2d57c:	68fb      	ldr	r3, [r7, #12]
   2d57e:	68db      	ldr	r3, [r3, #12]
   2d580:	429a      	cmp	r2, r3
   2d582:	d903      	bls.n	2d58c <f_write+0x320>
   2d584:	68fb      	ldr	r3, [r7, #12]
   2d586:	689a      	ldr	r2, [r3, #8]
   2d588:	68fb      	ldr	r3, [r7, #12]
   2d58a:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2d58c:	68fb      	ldr	r3, [r7, #12]
   2d58e:	799b      	ldrb	r3, [r3, #6]
   2d590:	2220      	movs	r2, #32
   2d592:	4313      	orrs	r3, r2
   2d594:	b2da      	uxtb	r2, r3
   2d596:	68fb      	ldr	r3, [r7, #12]
   2d598:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2d59a:	2300      	movs	r3, #0
}
   2d59c:	0018      	movs	r0, r3
   2d59e:	46bd      	mov	sp, r7
   2d5a0:	b00b      	add	sp, #44	; 0x2c
   2d5a2:	bd90      	pop	{r4, r7, pc}
   2d5a4:	0002cc91 	.word	0x0002cc91
   2d5a8:	0002b31d 	.word	0x0002b31d
   2d5ac:	0002ac15 	.word	0x0002ac15
   2d5b0:	0002ae75 	.word	0x0002ae75
   2d5b4:	0002a901 	.word	0x0002a901
   2d5b8:	0002ab31 	.word	0x0002ab31

0002d5bc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2d5bc:	b590      	push	{r4, r7, lr}
   2d5be:	b087      	sub	sp, #28
   2d5c0:	af00      	add	r7, sp, #0
   2d5c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2d5c4:	687b      	ldr	r3, [r7, #4]
   2d5c6:	681a      	ldr	r2, [r3, #0]
   2d5c8:	687b      	ldr	r3, [r7, #4]
   2d5ca:	889b      	ldrh	r3, [r3, #4]
   2d5cc:	2117      	movs	r1, #23
   2d5ce:	187c      	adds	r4, r7, r1
   2d5d0:	0019      	movs	r1, r3
   2d5d2:	0010      	movs	r0, r2
   2d5d4:	4b55      	ldr	r3, [pc, #340]	; (2d72c <f_sync+0x170>)
   2d5d6:	4798      	blx	r3
   2d5d8:	0003      	movs	r3, r0
   2d5da:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2d5dc:	2317      	movs	r3, #23
   2d5de:	18fb      	adds	r3, r7, r3
   2d5e0:	781b      	ldrb	r3, [r3, #0]
   2d5e2:	2b00      	cmp	r3, #0
   2d5e4:	d000      	beq.n	2d5e8 <f_sync+0x2c>
   2d5e6:	e09a      	b.n	2d71e <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2d5e8:	687b      	ldr	r3, [r7, #4]
   2d5ea:	799b      	ldrb	r3, [r3, #6]
   2d5ec:	001a      	movs	r2, r3
   2d5ee:	2320      	movs	r3, #32
   2d5f0:	4013      	ands	r3, r2
   2d5f2:	d100      	bne.n	2d5f6 <f_sync+0x3a>
   2d5f4:	e093      	b.n	2d71e <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2d5f6:	687b      	ldr	r3, [r7, #4]
   2d5f8:	681a      	ldr	r2, [r3, #0]
   2d5fa:	687b      	ldr	r3, [r7, #4]
   2d5fc:	69db      	ldr	r3, [r3, #28]
   2d5fe:	2117      	movs	r1, #23
   2d600:	187c      	adds	r4, r7, r1
   2d602:	0019      	movs	r1, r3
   2d604:	0010      	movs	r0, r2
   2d606:	4b4a      	ldr	r3, [pc, #296]	; (2d730 <f_sync+0x174>)
   2d608:	4798      	blx	r3
   2d60a:	0003      	movs	r3, r0
   2d60c:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2d60e:	2317      	movs	r3, #23
   2d610:	18fb      	adds	r3, r7, r3
   2d612:	781b      	ldrb	r3, [r3, #0]
   2d614:	2b00      	cmp	r3, #0
   2d616:	d000      	beq.n	2d61a <f_sync+0x5e>
   2d618:	e081      	b.n	2d71e <f_sync+0x162>
				dir = fp->dir_ptr;
   2d61a:	687b      	ldr	r3, [r7, #4]
   2d61c:	6a1b      	ldr	r3, [r3, #32]
   2d61e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2d620:	693b      	ldr	r3, [r7, #16]
   2d622:	330b      	adds	r3, #11
   2d624:	693a      	ldr	r2, [r7, #16]
   2d626:	320b      	adds	r2, #11
   2d628:	7812      	ldrb	r2, [r2, #0]
   2d62a:	2120      	movs	r1, #32
   2d62c:	430a      	orrs	r2, r1
   2d62e:	b2d2      	uxtb	r2, r2
   2d630:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2d632:	693b      	ldr	r3, [r7, #16]
   2d634:	331c      	adds	r3, #28
   2d636:	001a      	movs	r2, r3
   2d638:	687b      	ldr	r3, [r7, #4]
   2d63a:	68db      	ldr	r3, [r3, #12]
   2d63c:	b2db      	uxtb	r3, r3
   2d63e:	7013      	strb	r3, [r2, #0]
   2d640:	693b      	ldr	r3, [r7, #16]
   2d642:	331d      	adds	r3, #29
   2d644:	001a      	movs	r2, r3
   2d646:	687b      	ldr	r3, [r7, #4]
   2d648:	68db      	ldr	r3, [r3, #12]
   2d64a:	b29b      	uxth	r3, r3
   2d64c:	0a1b      	lsrs	r3, r3, #8
   2d64e:	b29b      	uxth	r3, r3
   2d650:	b2db      	uxtb	r3, r3
   2d652:	7013      	strb	r3, [r2, #0]
   2d654:	693b      	ldr	r3, [r7, #16]
   2d656:	331e      	adds	r3, #30
   2d658:	001a      	movs	r2, r3
   2d65a:	687b      	ldr	r3, [r7, #4]
   2d65c:	68db      	ldr	r3, [r3, #12]
   2d65e:	0c1b      	lsrs	r3, r3, #16
   2d660:	b2db      	uxtb	r3, r3
   2d662:	7013      	strb	r3, [r2, #0]
   2d664:	693b      	ldr	r3, [r7, #16]
   2d666:	331f      	adds	r3, #31
   2d668:	001a      	movs	r2, r3
   2d66a:	687b      	ldr	r3, [r7, #4]
   2d66c:	68db      	ldr	r3, [r3, #12]
   2d66e:	0e1b      	lsrs	r3, r3, #24
   2d670:	b2db      	uxtb	r3, r3
   2d672:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2d674:	693b      	ldr	r3, [r7, #16]
   2d676:	331a      	adds	r3, #26
   2d678:	001a      	movs	r2, r3
   2d67a:	687b      	ldr	r3, [r7, #4]
   2d67c:	691b      	ldr	r3, [r3, #16]
   2d67e:	b2db      	uxtb	r3, r3
   2d680:	7013      	strb	r3, [r2, #0]
   2d682:	693b      	ldr	r3, [r7, #16]
   2d684:	331b      	adds	r3, #27
   2d686:	001a      	movs	r2, r3
   2d688:	687b      	ldr	r3, [r7, #4]
   2d68a:	691b      	ldr	r3, [r3, #16]
   2d68c:	b29b      	uxth	r3, r3
   2d68e:	0a1b      	lsrs	r3, r3, #8
   2d690:	b29b      	uxth	r3, r3
   2d692:	b2db      	uxtb	r3, r3
   2d694:	7013      	strb	r3, [r2, #0]
   2d696:	693b      	ldr	r3, [r7, #16]
   2d698:	3314      	adds	r3, #20
   2d69a:	001a      	movs	r2, r3
   2d69c:	687b      	ldr	r3, [r7, #4]
   2d69e:	691b      	ldr	r3, [r3, #16]
   2d6a0:	0c1b      	lsrs	r3, r3, #16
   2d6a2:	b2db      	uxtb	r3, r3
   2d6a4:	7013      	strb	r3, [r2, #0]
   2d6a6:	693b      	ldr	r3, [r7, #16]
   2d6a8:	3315      	adds	r3, #21
   2d6aa:	001a      	movs	r2, r3
   2d6ac:	687b      	ldr	r3, [r7, #4]
   2d6ae:	691b      	ldr	r3, [r3, #16]
   2d6b0:	0c1b      	lsrs	r3, r3, #16
   2d6b2:	b29b      	uxth	r3, r3
   2d6b4:	0a1b      	lsrs	r3, r3, #8
   2d6b6:	b29b      	uxth	r3, r3
   2d6b8:	b2db      	uxtb	r3, r3
   2d6ba:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2d6bc:	4b1d      	ldr	r3, [pc, #116]	; (2d734 <f_sync+0x178>)
   2d6be:	4798      	blx	r3
   2d6c0:	0003      	movs	r3, r0
   2d6c2:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2d6c4:	693b      	ldr	r3, [r7, #16]
   2d6c6:	3316      	adds	r3, #22
   2d6c8:	68fa      	ldr	r2, [r7, #12]
   2d6ca:	b2d2      	uxtb	r2, r2
   2d6cc:	701a      	strb	r2, [r3, #0]
   2d6ce:	693b      	ldr	r3, [r7, #16]
   2d6d0:	3317      	adds	r3, #23
   2d6d2:	68fa      	ldr	r2, [r7, #12]
   2d6d4:	b292      	uxth	r2, r2
   2d6d6:	0a12      	lsrs	r2, r2, #8
   2d6d8:	b292      	uxth	r2, r2
   2d6da:	b2d2      	uxtb	r2, r2
   2d6dc:	701a      	strb	r2, [r3, #0]
   2d6de:	693b      	ldr	r3, [r7, #16]
   2d6e0:	3318      	adds	r3, #24
   2d6e2:	68fa      	ldr	r2, [r7, #12]
   2d6e4:	0c12      	lsrs	r2, r2, #16
   2d6e6:	b2d2      	uxtb	r2, r2
   2d6e8:	701a      	strb	r2, [r3, #0]
   2d6ea:	693b      	ldr	r3, [r7, #16]
   2d6ec:	3319      	adds	r3, #25
   2d6ee:	68fa      	ldr	r2, [r7, #12]
   2d6f0:	0e12      	lsrs	r2, r2, #24
   2d6f2:	b2d2      	uxtb	r2, r2
   2d6f4:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2d6f6:	687b      	ldr	r3, [r7, #4]
   2d6f8:	799b      	ldrb	r3, [r3, #6]
   2d6fa:	2220      	movs	r2, #32
   2d6fc:	4393      	bics	r3, r2
   2d6fe:	b2da      	uxtb	r2, r3
   2d700:	687b      	ldr	r3, [r7, #4]
   2d702:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2d704:	687b      	ldr	r3, [r7, #4]
   2d706:	681b      	ldr	r3, [r3, #0]
   2d708:	2201      	movs	r2, #1
   2d70a:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2d70c:	687b      	ldr	r3, [r7, #4]
   2d70e:	681b      	ldr	r3, [r3, #0]
   2d710:	2217      	movs	r2, #23
   2d712:	18bc      	adds	r4, r7, r2
   2d714:	0018      	movs	r0, r3
   2d716:	4b08      	ldr	r3, [pc, #32]	; (2d738 <f_sync+0x17c>)
   2d718:	4798      	blx	r3
   2d71a:	0003      	movs	r3, r0
   2d71c:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2d71e:	2317      	movs	r3, #23
   2d720:	18fb      	adds	r3, r7, r3
   2d722:	781b      	ldrb	r3, [r3, #0]
}
   2d724:	0018      	movs	r0, r3
   2d726:	46bd      	mov	sp, r7
   2d728:	b007      	add	sp, #28
   2d72a:	bd90      	pop	{r4, r7, pc}
   2d72c:	0002cc91 	.word	0x0002cc91
   2d730:	0002ac15 	.word	0x0002ac15
   2d734:	0002aad1 	.word	0x0002aad1
   2d738:	0002acdd 	.word	0x0002acdd

0002d73c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2d73c:	b590      	push	{r4, r7, lr}
   2d73e:	b085      	sub	sp, #20
   2d740:	af00      	add	r7, sp, #0
   2d742:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2d744:	230f      	movs	r3, #15
   2d746:	18fc      	adds	r4, r7, r3
   2d748:	687b      	ldr	r3, [r7, #4]
   2d74a:	0018      	movs	r0, r3
   2d74c:	4b09      	ldr	r3, [pc, #36]	; (2d774 <f_close+0x38>)
   2d74e:	4798      	blx	r3
   2d750:	0003      	movs	r3, r0
   2d752:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2d754:	230f      	movs	r3, #15
   2d756:	18fb      	adds	r3, r7, r3
   2d758:	781b      	ldrb	r3, [r3, #0]
   2d75a:	2b00      	cmp	r3, #0
   2d75c:	d102      	bne.n	2d764 <f_close+0x28>
   2d75e:	687b      	ldr	r3, [r7, #4]
   2d760:	2200      	movs	r2, #0
   2d762:	601a      	str	r2, [r3, #0]
	return res;
   2d764:	230f      	movs	r3, #15
   2d766:	18fb      	adds	r3, r7, r3
   2d768:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2d76a:	0018      	movs	r0, r3
   2d76c:	46bd      	mov	sp, r7
   2d76e:	b005      	add	sp, #20
   2d770:	bd90      	pop	{r4, r7, pc}
   2d772:	46c0      	nop			; (mov r8, r8)
   2d774:	0002d5bd 	.word	0x0002d5bd

0002d778 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   2d778:	b580      	push	{r7, lr}
   2d77a:	b084      	sub	sp, #16
   2d77c:	af00      	add	r7, sp, #0
   2d77e:	0002      	movs	r2, r0
   2d780:	6039      	str	r1, [r7, #0]
   2d782:	1dbb      	adds	r3, r7, #6
   2d784:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   2d786:	1dbb      	adds	r3, r7, #6
   2d788:	881b      	ldrh	r3, [r3, #0]
   2d78a:	2b7f      	cmp	r3, #127	; 0x7f
   2d78c:	d805      	bhi.n	2d79a <ff_convert+0x22>
		c = src;
   2d78e:	230e      	movs	r3, #14
   2d790:	18fb      	adds	r3, r7, r3
   2d792:	1dba      	adds	r2, r7, #6
   2d794:	8812      	ldrh	r2, [r2, #0]
   2d796:	801a      	strh	r2, [r3, #0]
   2d798:	e03a      	b.n	2d810 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   2d79a:	683b      	ldr	r3, [r7, #0]
   2d79c:	2b00      	cmp	r3, #0
   2d79e:	d010      	beq.n	2d7c2 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   2d7a0:	1dbb      	adds	r3, r7, #6
   2d7a2:	881b      	ldrh	r3, [r3, #0]
   2d7a4:	2bff      	cmp	r3, #255	; 0xff
   2d7a6:	d807      	bhi.n	2d7b8 <ff_convert+0x40>
   2d7a8:	1dbb      	adds	r3, r7, #6
   2d7aa:	881b      	ldrh	r3, [r3, #0]
   2d7ac:	3b80      	subs	r3, #128	; 0x80
   2d7ae:	001a      	movs	r2, r3
   2d7b0:	4b1b      	ldr	r3, [pc, #108]	; (2d820 <ff_convert+0xa8>)
   2d7b2:	0052      	lsls	r2, r2, #1
   2d7b4:	5ad2      	ldrh	r2, [r2, r3]
   2d7b6:	e000      	b.n	2d7ba <ff_convert+0x42>
   2d7b8:	2200      	movs	r2, #0
   2d7ba:	230e      	movs	r3, #14
   2d7bc:	18fb      	adds	r3, r7, r3
   2d7be:	801a      	strh	r2, [r3, #0]
   2d7c0:	e026      	b.n	2d810 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   2d7c2:	230e      	movs	r3, #14
   2d7c4:	18fb      	adds	r3, r7, r3
   2d7c6:	2200      	movs	r2, #0
   2d7c8:	801a      	strh	r2, [r3, #0]
   2d7ca:	e010      	b.n	2d7ee <ff_convert+0x76>
				if (src == Tbl[c]) break;
   2d7cc:	230e      	movs	r3, #14
   2d7ce:	18fb      	adds	r3, r7, r3
   2d7d0:	881a      	ldrh	r2, [r3, #0]
   2d7d2:	4b13      	ldr	r3, [pc, #76]	; (2d820 <ff_convert+0xa8>)
   2d7d4:	0052      	lsls	r2, r2, #1
   2d7d6:	5ad3      	ldrh	r3, [r2, r3]
   2d7d8:	1dba      	adds	r2, r7, #6
   2d7da:	8812      	ldrh	r2, [r2, #0]
   2d7dc:	429a      	cmp	r2, r3
   2d7de:	d00c      	beq.n	2d7fa <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   2d7e0:	230e      	movs	r3, #14
   2d7e2:	18fb      	adds	r3, r7, r3
   2d7e4:	881a      	ldrh	r2, [r3, #0]
   2d7e6:	230e      	movs	r3, #14
   2d7e8:	18fb      	adds	r3, r7, r3
   2d7ea:	3201      	adds	r2, #1
   2d7ec:	801a      	strh	r2, [r3, #0]
   2d7ee:	230e      	movs	r3, #14
   2d7f0:	18fb      	adds	r3, r7, r3
   2d7f2:	881b      	ldrh	r3, [r3, #0]
   2d7f4:	2b7f      	cmp	r3, #127	; 0x7f
   2d7f6:	d9e9      	bls.n	2d7cc <ff_convert+0x54>
   2d7f8:	e000      	b.n	2d7fc <ff_convert+0x84>
				if (src == Tbl[c]) break;
   2d7fa:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   2d7fc:	230e      	movs	r3, #14
   2d7fe:	18fb      	adds	r3, r7, r3
   2d800:	881b      	ldrh	r3, [r3, #0]
   2d802:	3380      	adds	r3, #128	; 0x80
   2d804:	b29a      	uxth	r2, r3
   2d806:	230e      	movs	r3, #14
   2d808:	18fb      	adds	r3, r7, r3
   2d80a:	21ff      	movs	r1, #255	; 0xff
   2d80c:	400a      	ands	r2, r1
   2d80e:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   2d810:	230e      	movs	r3, #14
   2d812:	18fb      	adds	r3, r7, r3
   2d814:	881b      	ldrh	r3, [r3, #0]
}
   2d816:	0018      	movs	r0, r3
   2d818:	46bd      	mov	sp, r7
   2d81a:	b004      	add	sp, #16
   2d81c:	bd80      	pop	{r7, pc}
   2d81e:	46c0      	nop			; (mov r8, r8)
   2d820:	00038d54 	.word	0x00038d54

0002d824 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   2d824:	b580      	push	{r7, lr}
   2d826:	b084      	sub	sp, #16
   2d828:	af00      	add	r7, sp, #0
   2d82a:	0002      	movs	r2, r0
   2d82c:	1dbb      	adds	r3, r7, #6
   2d82e:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   2d830:	2300      	movs	r3, #0
   2d832:	60fb      	str	r3, [r7, #12]
   2d834:	e002      	b.n	2d83c <ff_wtoupper+0x18>
   2d836:	68fb      	ldr	r3, [r7, #12]
   2d838:	3301      	adds	r3, #1
   2d83a:	60fb      	str	r3, [r7, #12]
   2d83c:	4b0f      	ldr	r3, [pc, #60]	; (2d87c <ff_wtoupper+0x58>)
   2d83e:	68fa      	ldr	r2, [r7, #12]
   2d840:	0052      	lsls	r2, r2, #1
   2d842:	5ad3      	ldrh	r3, [r2, r3]
   2d844:	2b00      	cmp	r3, #0
   2d846:	d007      	beq.n	2d858 <ff_wtoupper+0x34>
   2d848:	4b0c      	ldr	r3, [pc, #48]	; (2d87c <ff_wtoupper+0x58>)
   2d84a:	68fa      	ldr	r2, [r7, #12]
   2d84c:	0052      	lsls	r2, r2, #1
   2d84e:	5ad3      	ldrh	r3, [r2, r3]
   2d850:	1dba      	adds	r2, r7, #6
   2d852:	8812      	ldrh	r2, [r2, #0]
   2d854:	429a      	cmp	r2, r3
   2d856:	d1ee      	bne.n	2d836 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   2d858:	4b08      	ldr	r3, [pc, #32]	; (2d87c <ff_wtoupper+0x58>)
   2d85a:	68fa      	ldr	r2, [r7, #12]
   2d85c:	0052      	lsls	r2, r2, #1
   2d85e:	5ad3      	ldrh	r3, [r2, r3]
   2d860:	2b00      	cmp	r3, #0
   2d862:	d004      	beq.n	2d86e <ff_wtoupper+0x4a>
   2d864:	4b06      	ldr	r3, [pc, #24]	; (2d880 <ff_wtoupper+0x5c>)
   2d866:	68fa      	ldr	r2, [r7, #12]
   2d868:	0052      	lsls	r2, r2, #1
   2d86a:	5ad3      	ldrh	r3, [r2, r3]
   2d86c:	e001      	b.n	2d872 <ff_wtoupper+0x4e>
   2d86e:	1dbb      	adds	r3, r7, #6
   2d870:	881b      	ldrh	r3, [r3, #0]
}
   2d872:	0018      	movs	r0, r3
   2d874:	46bd      	mov	sp, r7
   2d876:	b004      	add	sp, #16
   2d878:	bd80      	pop	{r7, pc}
   2d87a:	46c0      	nop			; (mov r8, r8)
   2d87c:	00038e54 	.word	0x00038e54
   2d880:	00039034 	.word	0x00039034

0002d884 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2d884:	b580      	push	{r7, lr}
   2d886:	b084      	sub	sp, #16
   2d888:	af00      	add	r7, sp, #0
   2d88a:	60f8      	str	r0, [r7, #12]
   2d88c:	60b9      	str	r1, [r7, #8]
   2d88e:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2d890:	68fb      	ldr	r3, [r7, #12]
   2d892:	68ba      	ldr	r2, [r7, #8]
   2d894:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2d896:	68fb      	ldr	r3, [r7, #12]
   2d898:	687a      	ldr	r2, [r7, #4]
   2d89a:	601a      	str	r2, [r3, #0]
}
   2d89c:	46c0      	nop			; (mov r8, r8)
   2d89e:	46bd      	mov	sp, r7
   2d8a0:	b004      	add	sp, #16
   2d8a2:	bd80      	pop	{r7, pc}

0002d8a4 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2d8a4:	b580      	push	{r7, lr}
   2d8a6:	b082      	sub	sp, #8
   2d8a8:	af00      	add	r7, sp, #0
   2d8aa:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2d8ac:	687b      	ldr	r3, [r7, #4]
   2d8ae:	681b      	ldr	r3, [r3, #0]
   2d8b0:	4a07      	ldr	r2, [pc, #28]	; (2d8d0 <getNextPacketId+0x2c>)
   2d8b2:	4293      	cmp	r3, r2
   2d8b4:	d003      	beq.n	2d8be <getNextPacketId+0x1a>
   2d8b6:	687b      	ldr	r3, [r7, #4]
   2d8b8:	681b      	ldr	r3, [r3, #0]
   2d8ba:	1c5a      	adds	r2, r3, #1
   2d8bc:	e000      	b.n	2d8c0 <getNextPacketId+0x1c>
   2d8be:	2201      	movs	r2, #1
   2d8c0:	687b      	ldr	r3, [r7, #4]
   2d8c2:	601a      	str	r2, [r3, #0]
   2d8c4:	687b      	ldr	r3, [r7, #4]
   2d8c6:	681b      	ldr	r3, [r3, #0]
}
   2d8c8:	0018      	movs	r0, r3
   2d8ca:	46bd      	mov	sp, r7
   2d8cc:	b002      	add	sp, #8
   2d8ce:	bd80      	pop	{r7, pc}
   2d8d0:	0000ffff 	.word	0x0000ffff

0002d8d4 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2d8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d8d6:	b087      	sub	sp, #28
   2d8d8:	af00      	add	r7, sp, #0
   2d8da:	60f8      	str	r0, [r7, #12]
   2d8dc:	60b9      	str	r1, [r7, #8]
   2d8de:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2d8e0:	2301      	movs	r3, #1
   2d8e2:	425b      	negs	r3, r3
   2d8e4:	617b      	str	r3, [r7, #20]
        sent = 0;
   2d8e6:	2300      	movs	r3, #0
   2d8e8:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2d8ea:	e01a      	b.n	2d922 <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2d8ec:	68fb      	ldr	r3, [r7, #12]
   2d8ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2d8f0:	68dc      	ldr	r4, [r3, #12]
   2d8f2:	68fb      	ldr	r3, [r7, #12]
   2d8f4:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2d8f6:	68fb      	ldr	r3, [r7, #12]
   2d8f8:	691a      	ldr	r2, [r3, #16]
   2d8fa:	693b      	ldr	r3, [r7, #16]
   2d8fc:	18d6      	adds	r6, r2, r3
   2d8fe:	687b      	ldr	r3, [r7, #4]
   2d900:	0018      	movs	r0, r3
   2d902:	4b1a      	ldr	r3, [pc, #104]	; (2d96c <sendPacket+0x98>)
   2d904:	4798      	blx	r3
   2d906:	0003      	movs	r3, r0
   2d908:	68ba      	ldr	r2, [r7, #8]
   2d90a:	0031      	movs	r1, r6
   2d90c:	0028      	movs	r0, r5
   2d90e:	47a0      	blx	r4
   2d910:	0003      	movs	r3, r0
   2d912:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2d914:	697b      	ldr	r3, [r7, #20]
   2d916:	2b00      	cmp	r3, #0
   2d918:	db0e      	blt.n	2d938 <sendPacket+0x64>
            break;
        sent += rc;
   2d91a:	693a      	ldr	r2, [r7, #16]
   2d91c:	697b      	ldr	r3, [r7, #20]
   2d91e:	18d3      	adds	r3, r2, r3
   2d920:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2d922:	693a      	ldr	r2, [r7, #16]
   2d924:	68bb      	ldr	r3, [r7, #8]
   2d926:	429a      	cmp	r2, r3
   2d928:	da07      	bge.n	2d93a <sendPacket+0x66>
   2d92a:	687b      	ldr	r3, [r7, #4]
   2d92c:	0018      	movs	r0, r3
   2d92e:	4b10      	ldr	r3, [pc, #64]	; (2d970 <sendPacket+0x9c>)
   2d930:	4798      	blx	r3
   2d932:	1e03      	subs	r3, r0, #0
   2d934:	d0da      	beq.n	2d8ec <sendPacket+0x18>
   2d936:	e000      	b.n	2d93a <sendPacket+0x66>
            break;
   2d938:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2d93a:	693a      	ldr	r2, [r7, #16]
   2d93c:	68bb      	ldr	r3, [r7, #8]
   2d93e:	429a      	cmp	r2, r3
   2d940:	d10b      	bne.n	2d95a <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2d942:	68fb      	ldr	r3, [r7, #12]
   2d944:	3354      	adds	r3, #84	; 0x54
   2d946:	001a      	movs	r2, r3
   2d948:	68fb      	ldr	r3, [r7, #12]
   2d94a:	699b      	ldr	r3, [r3, #24]
   2d94c:	0019      	movs	r1, r3
   2d94e:	0010      	movs	r0, r2
   2d950:	4b08      	ldr	r3, [pc, #32]	; (2d974 <sendPacket+0xa0>)
   2d952:	4798      	blx	r3
        rc = SUCCESS;
   2d954:	2300      	movs	r3, #0
   2d956:	617b      	str	r3, [r7, #20]
   2d958:	e002      	b.n	2d960 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2d95a:	2301      	movs	r3, #1
   2d95c:	425b      	negs	r3, r3
   2d95e:	617b      	str	r3, [r7, #20]
    return rc;
   2d960:	697b      	ldr	r3, [r7, #20]
}
   2d962:	0018      	movs	r0, r3
   2d964:	46bd      	mov	sp, r7
   2d966:	b007      	add	sp, #28
   2d968:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d96a:	46c0      	nop			; (mov r8, r8)
   2d96c:	0002e735 	.word	0x0002e735
   2d970:	0002e6b9 	.word	0x0002e6b9
   2d974:	0002e70d 	.word	0x0002e70d

0002d978 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2d978:	b580      	push	{r7, lr}
   2d97a:	b086      	sub	sp, #24
   2d97c:	af00      	add	r7, sp, #0
   2d97e:	60f8      	str	r0, [r7, #12]
   2d980:	60b9      	str	r1, [r7, #8]
   2d982:	607a      	str	r2, [r7, #4]
   2d984:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2d986:	68fb      	ldr	r3, [r7, #12]
   2d988:	68ba      	ldr	r2, [r7, #8]
   2d98a:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2d98c:	2300      	movs	r3, #0
   2d98e:	617b      	str	r3, [r7, #20]
   2d990:	e00a      	b.n	2d9a8 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2d992:	68fa      	ldr	r2, [r7, #12]
   2d994:	697b      	ldr	r3, [r7, #20]
   2d996:	3304      	adds	r3, #4
   2d998:	00db      	lsls	r3, r3, #3
   2d99a:	18d3      	adds	r3, r2, r3
   2d99c:	3304      	adds	r3, #4
   2d99e:	2200      	movs	r2, #0
   2d9a0:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2d9a2:	697b      	ldr	r3, [r7, #20]
   2d9a4:	3301      	adds	r3, #1
   2d9a6:	617b      	str	r3, [r7, #20]
   2d9a8:	697b      	ldr	r3, [r7, #20]
   2d9aa:	2b04      	cmp	r3, #4
   2d9ac:	ddf1      	ble.n	2d992 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2d9ae:	68fb      	ldr	r3, [r7, #12]
   2d9b0:	687a      	ldr	r2, [r7, #4]
   2d9b2:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2d9b4:	68fb      	ldr	r3, [r7, #12]
   2d9b6:	683a      	ldr	r2, [r7, #0]
   2d9b8:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2d9ba:	68fb      	ldr	r3, [r7, #12]
   2d9bc:	6a3a      	ldr	r2, [r7, #32]
   2d9be:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2d9c0:	68fb      	ldr	r3, [r7, #12]
   2d9c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2d9c4:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2d9c6:	68fb      	ldr	r3, [r7, #12]
   2d9c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d9ca:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2d9cc:	68fb      	ldr	r3, [r7, #12]
   2d9ce:	2200      	movs	r2, #0
   2d9d0:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2d9d2:	68fb      	ldr	r3, [r7, #12]
   2d9d4:	2200      	movs	r2, #0
   2d9d6:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2d9d8:	68fb      	ldr	r3, [r7, #12]
   2d9da:	2200      	movs	r2, #0
   2d9dc:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2d9de:	68fb      	ldr	r3, [r7, #12]
   2d9e0:	2201      	movs	r2, #1
   2d9e2:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2d9e4:	68fb      	ldr	r3, [r7, #12]
   2d9e6:	3354      	adds	r3, #84	; 0x54
   2d9e8:	0018      	movs	r0, r3
   2d9ea:	4b03      	ldr	r3, [pc, #12]	; (2d9f8 <MQTTClientInit+0x80>)
   2d9ec:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2d9ee:	46c0      	nop			; (mov r8, r8)
   2d9f0:	46bd      	mov	sp, r7
   2d9f2:	b006      	add	sp, #24
   2d9f4:	bd80      	pop	{r7, pc}
   2d9f6:	46c0      	nop			; (mov r8, r8)
   2d9f8:	0002e75d 	.word	0x0002e75d

0002d9fc <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2d9fc:	b590      	push	{r4, r7, lr}
   2d9fe:	b08b      	sub	sp, #44	; 0x2c
   2da00:	af00      	add	r7, sp, #0
   2da02:	60f8      	str	r0, [r7, #12]
   2da04:	60b9      	str	r1, [r7, #8]
   2da06:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2da08:	2301      	movs	r3, #1
   2da0a:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2da0c:	2300      	movs	r3, #0
   2da0e:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2da10:	2304      	movs	r3, #4
   2da12:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2da14:	68bb      	ldr	r3, [r7, #8]
   2da16:	2200      	movs	r2, #0
   2da18:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2da1a:	2301      	movs	r3, #1
   2da1c:	425b      	negs	r3, r3
   2da1e:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2da20:	6a3b      	ldr	r3, [r7, #32]
   2da22:	3301      	adds	r3, #1
   2da24:	623b      	str	r3, [r7, #32]
   2da26:	6a3a      	ldr	r2, [r7, #32]
   2da28:	69fb      	ldr	r3, [r7, #28]
   2da2a:	429a      	cmp	r2, r3
   2da2c:	dd03      	ble.n	2da36 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2da2e:	2301      	movs	r3, #1
   2da30:	425b      	negs	r3, r3
   2da32:	61bb      	str	r3, [r7, #24]
            goto exit;
   2da34:	e026      	b.n	2da84 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2da36:	68fb      	ldr	r3, [r7, #12]
   2da38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2da3a:	689c      	ldr	r4, [r3, #8]
   2da3c:	68fb      	ldr	r3, [r7, #12]
   2da3e:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2da40:	687b      	ldr	r3, [r7, #4]
   2da42:	2217      	movs	r2, #23
   2da44:	18b9      	adds	r1, r7, r2
   2da46:	2201      	movs	r2, #1
   2da48:	47a0      	blx	r4
   2da4a:	0003      	movs	r3, r0
   2da4c:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2da4e:	69bb      	ldr	r3, [r7, #24]
   2da50:	2b01      	cmp	r3, #1
   2da52:	d116      	bne.n	2da82 <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2da54:	68bb      	ldr	r3, [r7, #8]
   2da56:	681a      	ldr	r2, [r3, #0]
   2da58:	2317      	movs	r3, #23
   2da5a:	18fb      	adds	r3, r7, r3
   2da5c:	781b      	ldrb	r3, [r3, #0]
   2da5e:	0019      	movs	r1, r3
   2da60:	237f      	movs	r3, #127	; 0x7f
   2da62:	400b      	ands	r3, r1
   2da64:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2da66:	434b      	muls	r3, r1
   2da68:	18d2      	adds	r2, r2, r3
   2da6a:	68bb      	ldr	r3, [r7, #8]
   2da6c:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2da6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2da70:	01db      	lsls	r3, r3, #7
   2da72:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2da74:	2317      	movs	r3, #23
   2da76:	18fb      	adds	r3, r7, r3
   2da78:	781b      	ldrb	r3, [r3, #0]
   2da7a:	b25b      	sxtb	r3, r3
   2da7c:	2b00      	cmp	r3, #0
   2da7e:	dbcc      	blt.n	2da1a <decodePacket+0x1e>
   2da80:	e000      	b.n	2da84 <decodePacket+0x88>
            goto exit;
   2da82:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2da84:	6a3b      	ldr	r3, [r7, #32]
}
   2da86:	0018      	movs	r0, r3
   2da88:	46bd      	mov	sp, r7
   2da8a:	b00b      	add	sp, #44	; 0x2c
   2da8c:	bd90      	pop	{r4, r7, pc}
	...

0002da90 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2da90:	b5f0      	push	{r4, r5, r6, r7, lr}
   2da92:	46c6      	mov	lr, r8
   2da94:	b500      	push	{lr}
   2da96:	b086      	sub	sp, #24
   2da98:	af00      	add	r7, sp, #0
   2da9a:	6078      	str	r0, [r7, #4]
   2da9c:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2da9e:	2301      	movs	r3, #1
   2daa0:	425b      	negs	r3, r3
   2daa2:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2daa4:	2300      	movs	r3, #0
   2daa6:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2daa8:	2300      	movs	r3, #0
   2daaa:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2daac:	2300      	movs	r3, #0
   2daae:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2dab0:	687b      	ldr	r3, [r7, #4]
   2dab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2dab4:	689c      	ldr	r4, [r3, #8]
   2dab6:	687b      	ldr	r3, [r7, #4]
   2dab8:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2daba:	687b      	ldr	r3, [r7, #4]
   2dabc:	695e      	ldr	r6, [r3, #20]
   2dabe:	683b      	ldr	r3, [r7, #0]
   2dac0:	0018      	movs	r0, r3
   2dac2:	4b2b      	ldr	r3, [pc, #172]	; (2db70 <readPacket+0xe0>)
   2dac4:	4798      	blx	r3
   2dac6:	0003      	movs	r3, r0
   2dac8:	2201      	movs	r2, #1
   2daca:	0031      	movs	r1, r6
   2dacc:	0028      	movs	r0, r5
   2dace:	47a0      	blx	r4
   2dad0:	0003      	movs	r3, r0
   2dad2:	2b01      	cmp	r3, #1
   2dad4:	d141      	bne.n	2db5a <readPacket+0xca>
        goto exit;

    len = 1;
   2dad6:	2301      	movs	r3, #1
   2dad8:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2dada:	683b      	ldr	r3, [r7, #0]
   2dadc:	0018      	movs	r0, r3
   2dade:	4b24      	ldr	r3, [pc, #144]	; (2db70 <readPacket+0xe0>)
   2dae0:	4798      	blx	r3
   2dae2:	0002      	movs	r2, r0
   2dae4:	2308      	movs	r3, #8
   2dae6:	18f9      	adds	r1, r7, r3
   2dae8:	687b      	ldr	r3, [r7, #4]
   2daea:	0018      	movs	r0, r3
   2daec:	4b21      	ldr	r3, [pc, #132]	; (2db74 <readPacket+0xe4>)
   2daee:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2daf0:	687b      	ldr	r3, [r7, #4]
   2daf2:	695b      	ldr	r3, [r3, #20]
   2daf4:	3301      	adds	r3, #1
   2daf6:	68ba      	ldr	r2, [r7, #8]
   2daf8:	0011      	movs	r1, r2
   2dafa:	0018      	movs	r0, r3
   2dafc:	4b1e      	ldr	r3, [pc, #120]	; (2db78 <readPacket+0xe8>)
   2dafe:	4798      	blx	r3
   2db00:	0002      	movs	r2, r0
   2db02:	693b      	ldr	r3, [r7, #16]
   2db04:	189b      	adds	r3, r3, r2
   2db06:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2db08:	68bb      	ldr	r3, [r7, #8]
   2db0a:	2b00      	cmp	r3, #0
   2db0c:	dd17      	ble.n	2db3e <readPacket+0xae>
   2db0e:	687b      	ldr	r3, [r7, #4]
   2db10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2db12:	689c      	ldr	r4, [r3, #8]
   2db14:	687b      	ldr	r3, [r7, #4]
   2db16:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2db18:	687b      	ldr	r3, [r7, #4]
   2db1a:	695a      	ldr	r2, [r3, #20]
   2db1c:	693b      	ldr	r3, [r7, #16]
   2db1e:	18d6      	adds	r6, r2, r3
   2db20:	68bb      	ldr	r3, [r7, #8]
   2db22:	4698      	mov	r8, r3
   2db24:	683b      	ldr	r3, [r7, #0]
   2db26:	0018      	movs	r0, r3
   2db28:	4b11      	ldr	r3, [pc, #68]	; (2db70 <readPacket+0xe0>)
   2db2a:	4798      	blx	r3
   2db2c:	0003      	movs	r3, r0
   2db2e:	4642      	mov	r2, r8
   2db30:	0031      	movs	r1, r6
   2db32:	0028      	movs	r0, r5
   2db34:	47a0      	blx	r4
   2db36:	0002      	movs	r2, r0
   2db38:	68bb      	ldr	r3, [r7, #8]
   2db3a:	429a      	cmp	r2, r3
   2db3c:	d10f      	bne.n	2db5e <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2db3e:	687b      	ldr	r3, [r7, #4]
   2db40:	695b      	ldr	r3, [r3, #20]
   2db42:	781a      	ldrb	r2, [r3, #0]
   2db44:	230c      	movs	r3, #12
   2db46:	18fb      	adds	r3, r7, r3
   2db48:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2db4a:	230c      	movs	r3, #12
   2db4c:	18fb      	adds	r3, r7, r3
   2db4e:	781b      	ldrb	r3, [r3, #0]
   2db50:	061b      	lsls	r3, r3, #24
   2db52:	0f1b      	lsrs	r3, r3, #28
   2db54:	b2db      	uxtb	r3, r3
   2db56:	617b      	str	r3, [r7, #20]
   2db58:	e002      	b.n	2db60 <readPacket+0xd0>
        goto exit;
   2db5a:	46c0      	nop			; (mov r8, r8)
   2db5c:	e000      	b.n	2db60 <readPacket+0xd0>
        goto exit;
   2db5e:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2db60:	697b      	ldr	r3, [r7, #20]
}
   2db62:	0018      	movs	r0, r3
   2db64:	46bd      	mov	sp, r7
   2db66:	b006      	add	sp, #24
   2db68:	bc04      	pop	{r2}
   2db6a:	4690      	mov	r8, r2
   2db6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2db6e:	46c0      	nop			; (mov r8, r8)
   2db70:	0002e735 	.word	0x0002e735
   2db74:	0002d9fd 	.word	0x0002d9fd
   2db78:	0002f50d 	.word	0x0002f50d

0002db7c <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2db7c:	b580      	push	{r7, lr}
   2db7e:	b086      	sub	sp, #24
   2db80:	af00      	add	r7, sp, #0
   2db82:	6078      	str	r0, [r7, #4]
   2db84:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2db86:	687b      	ldr	r3, [r7, #4]
   2db88:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2db8a:	683b      	ldr	r3, [r7, #0]
   2db8c:	689b      	ldr	r3, [r3, #8]
   2db8e:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2db90:	683b      	ldr	r3, [r7, #0]
   2db92:	685b      	ldr	r3, [r3, #4]
   2db94:	001a      	movs	r2, r3
   2db96:	693b      	ldr	r3, [r7, #16]
   2db98:	189b      	adds	r3, r3, r2
   2db9a:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2db9c:	e039      	b.n	2dc12 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2db9e:	693b      	ldr	r3, [r7, #16]
   2dba0:	781b      	ldrb	r3, [r3, #0]
   2dba2:	2b2f      	cmp	r3, #47	; 0x2f
   2dba4:	d103      	bne.n	2dbae <isTopicMatched+0x32>
   2dba6:	697b      	ldr	r3, [r7, #20]
   2dba8:	781b      	ldrb	r3, [r3, #0]
   2dbaa:	2b2f      	cmp	r3, #47	; 0x2f
   2dbac:	d13a      	bne.n	2dc24 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2dbae:	697b      	ldr	r3, [r7, #20]
   2dbb0:	781b      	ldrb	r3, [r3, #0]
   2dbb2:	2b2b      	cmp	r3, #43	; 0x2b
   2dbb4:	d009      	beq.n	2dbca <isTopicMatched+0x4e>
   2dbb6:	697b      	ldr	r3, [r7, #20]
   2dbb8:	781b      	ldrb	r3, [r3, #0]
   2dbba:	2b23      	cmp	r3, #35	; 0x23
   2dbbc:	d005      	beq.n	2dbca <isTopicMatched+0x4e>
   2dbbe:	697b      	ldr	r3, [r7, #20]
   2dbc0:	781a      	ldrb	r2, [r3, #0]
   2dbc2:	693b      	ldr	r3, [r7, #16]
   2dbc4:	781b      	ldrb	r3, [r3, #0]
   2dbc6:	429a      	cmp	r2, r3
   2dbc8:	d12e      	bne.n	2dc28 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2dbca:	697b      	ldr	r3, [r7, #20]
   2dbcc:	781b      	ldrb	r3, [r3, #0]
   2dbce:	2b2b      	cmp	r3, #43	; 0x2b
   2dbd0:	d112      	bne.n	2dbf8 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2dbd2:	693b      	ldr	r3, [r7, #16]
   2dbd4:	3301      	adds	r3, #1
   2dbd6:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2dbd8:	e005      	b.n	2dbe6 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2dbda:	693b      	ldr	r3, [r7, #16]
   2dbdc:	3301      	adds	r3, #1
   2dbde:	613b      	str	r3, [r7, #16]
   2dbe0:	693b      	ldr	r3, [r7, #16]
   2dbe2:	3301      	adds	r3, #1
   2dbe4:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2dbe6:	68fa      	ldr	r2, [r7, #12]
   2dbe8:	68bb      	ldr	r3, [r7, #8]
   2dbea:	429a      	cmp	r2, r3
   2dbec:	d20b      	bcs.n	2dc06 <isTopicMatched+0x8a>
   2dbee:	68fb      	ldr	r3, [r7, #12]
   2dbf0:	781b      	ldrb	r3, [r3, #0]
   2dbf2:	2b2f      	cmp	r3, #47	; 0x2f
   2dbf4:	d1f1      	bne.n	2dbda <isTopicMatched+0x5e>
   2dbf6:	e006      	b.n	2dc06 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2dbf8:	697b      	ldr	r3, [r7, #20]
   2dbfa:	781b      	ldrb	r3, [r3, #0]
   2dbfc:	2b23      	cmp	r3, #35	; 0x23
   2dbfe:	d102      	bne.n	2dc06 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2dc00:	68bb      	ldr	r3, [r7, #8]
   2dc02:	3b01      	subs	r3, #1
   2dc04:	613b      	str	r3, [r7, #16]
        curf++;
   2dc06:	697b      	ldr	r3, [r7, #20]
   2dc08:	3301      	adds	r3, #1
   2dc0a:	617b      	str	r3, [r7, #20]
        curn++;
   2dc0c:	693b      	ldr	r3, [r7, #16]
   2dc0e:	3301      	adds	r3, #1
   2dc10:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2dc12:	697b      	ldr	r3, [r7, #20]
   2dc14:	781b      	ldrb	r3, [r3, #0]
   2dc16:	2b00      	cmp	r3, #0
   2dc18:	d007      	beq.n	2dc2a <isTopicMatched+0xae>
   2dc1a:	693a      	ldr	r2, [r7, #16]
   2dc1c:	68bb      	ldr	r3, [r7, #8]
   2dc1e:	429a      	cmp	r2, r3
   2dc20:	d3bd      	bcc.n	2db9e <isTopicMatched+0x22>
   2dc22:	e002      	b.n	2dc2a <isTopicMatched+0xae>
            break;
   2dc24:	46c0      	nop			; (mov r8, r8)
   2dc26:	e000      	b.n	2dc2a <isTopicMatched+0xae>
            break;
   2dc28:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2dc2a:	693a      	ldr	r2, [r7, #16]
   2dc2c:	68bb      	ldr	r3, [r7, #8]
   2dc2e:	429a      	cmp	r2, r3
   2dc30:	d105      	bne.n	2dc3e <isTopicMatched+0xc2>
   2dc32:	697b      	ldr	r3, [r7, #20]
   2dc34:	781b      	ldrb	r3, [r3, #0]
   2dc36:	2b00      	cmp	r3, #0
   2dc38:	d101      	bne.n	2dc3e <isTopicMatched+0xc2>
   2dc3a:	2301      	movs	r3, #1
   2dc3c:	e000      	b.n	2dc40 <isTopicMatched+0xc4>
   2dc3e:	2300      	movs	r3, #0
   2dc40:	b2db      	uxtb	r3, r3
}
   2dc42:	0018      	movs	r0, r3
   2dc44:	46bd      	mov	sp, r7
   2dc46:	b006      	add	sp, #24
   2dc48:	bd80      	pop	{r7, pc}
	...

0002dc4c <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2dc4c:	b580      	push	{r7, lr}
   2dc4e:	b08a      	sub	sp, #40	; 0x28
   2dc50:	af00      	add	r7, sp, #0
   2dc52:	60f8      	str	r0, [r7, #12]
   2dc54:	60b9      	str	r1, [r7, #8]
   2dc56:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2dc58:	2301      	movs	r3, #1
   2dc5a:	425b      	negs	r3, r3
   2dc5c:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2dc5e:	2300      	movs	r3, #0
   2dc60:	627b      	str	r3, [r7, #36]	; 0x24
   2dc62:	e044      	b.n	2dcee <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2dc64:	68fa      	ldr	r2, [r7, #12]
   2dc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dc68:	3304      	adds	r3, #4
   2dc6a:	00db      	lsls	r3, r3, #3
   2dc6c:	18d3      	adds	r3, r2, r3
   2dc6e:	3304      	adds	r3, #4
   2dc70:	681b      	ldr	r3, [r3, #0]
   2dc72:	2b00      	cmp	r3, #0
   2dc74:	d038      	beq.n	2dce8 <deliverMessage+0x9c>
   2dc76:	68fa      	ldr	r2, [r7, #12]
   2dc78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dc7a:	3304      	adds	r3, #4
   2dc7c:	00db      	lsls	r3, r3, #3
   2dc7e:	18d3      	adds	r3, r2, r3
   2dc80:	3304      	adds	r3, #4
   2dc82:	681a      	ldr	r2, [r3, #0]
   2dc84:	68bb      	ldr	r3, [r7, #8]
   2dc86:	0011      	movs	r1, r2
   2dc88:	0018      	movs	r0, r3
   2dc8a:	4b28      	ldr	r3, [pc, #160]	; (2dd2c <deliverMessage+0xe0>)
   2dc8c:	4798      	blx	r3
   2dc8e:	1e03      	subs	r3, r0, #0
   2dc90:	d10d      	bne.n	2dcae <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2dc92:	68fa      	ldr	r2, [r7, #12]
   2dc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dc96:	3304      	adds	r3, #4
   2dc98:	00db      	lsls	r3, r3, #3
   2dc9a:	18d3      	adds	r3, r2, r3
   2dc9c:	3304      	adds	r3, #4
   2dc9e:	681b      	ldr	r3, [r3, #0]
   2dca0:	68ba      	ldr	r2, [r7, #8]
   2dca2:	0011      	movs	r1, r2
   2dca4:	0018      	movs	r0, r3
   2dca6:	4b22      	ldr	r3, [pc, #136]	; (2dd30 <deliverMessage+0xe4>)
   2dca8:	4798      	blx	r3
   2dcaa:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2dcac:	d01c      	beq.n	2dce8 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2dcae:	68fa      	ldr	r2, [r7, #12]
   2dcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dcb2:	3304      	adds	r3, #4
   2dcb4:	00db      	lsls	r3, r3, #3
   2dcb6:	18d3      	adds	r3, r2, r3
   2dcb8:	3308      	adds	r3, #8
   2dcba:	681b      	ldr	r3, [r3, #0]
   2dcbc:	2b00      	cmp	r3, #0
   2dcbe:	d013      	beq.n	2dce8 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2dcc0:	687a      	ldr	r2, [r7, #4]
   2dcc2:	68b9      	ldr	r1, [r7, #8]
   2dcc4:	2318      	movs	r3, #24
   2dcc6:	18fb      	adds	r3, r7, r3
   2dcc8:	0018      	movs	r0, r3
   2dcca:	4b1a      	ldr	r3, [pc, #104]	; (2dd34 <deliverMessage+0xe8>)
   2dccc:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2dcce:	68fa      	ldr	r2, [r7, #12]
   2dcd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dcd2:	3304      	adds	r3, #4
   2dcd4:	00db      	lsls	r3, r3, #3
   2dcd6:	18d3      	adds	r3, r2, r3
   2dcd8:	3308      	adds	r3, #8
   2dcda:	681b      	ldr	r3, [r3, #0]
   2dcdc:	2218      	movs	r2, #24
   2dcde:	18ba      	adds	r2, r7, r2
   2dce0:	0010      	movs	r0, r2
   2dce2:	4798      	blx	r3
                rc = SUCCESS;
   2dce4:	2300      	movs	r3, #0
   2dce6:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2dce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dcea:	3301      	adds	r3, #1
   2dcec:	627b      	str	r3, [r7, #36]	; 0x24
   2dcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dcf0:	2b04      	cmp	r3, #4
   2dcf2:	ddb7      	ble.n	2dc64 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2dcf4:	6a3b      	ldr	r3, [r7, #32]
   2dcf6:	3301      	adds	r3, #1
   2dcf8:	d112      	bne.n	2dd20 <deliverMessage+0xd4>
   2dcfa:	68fb      	ldr	r3, [r7, #12]
   2dcfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2dcfe:	2b00      	cmp	r3, #0
   2dd00:	d00e      	beq.n	2dd20 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2dd02:	687a      	ldr	r2, [r7, #4]
   2dd04:	68b9      	ldr	r1, [r7, #8]
   2dd06:	2310      	movs	r3, #16
   2dd08:	18fb      	adds	r3, r7, r3
   2dd0a:	0018      	movs	r0, r3
   2dd0c:	4b09      	ldr	r3, [pc, #36]	; (2dd34 <deliverMessage+0xe8>)
   2dd0e:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2dd10:	68fb      	ldr	r3, [r7, #12]
   2dd12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2dd14:	2210      	movs	r2, #16
   2dd16:	18ba      	adds	r2, r7, r2
   2dd18:	0010      	movs	r0, r2
   2dd1a:	4798      	blx	r3
        rc = SUCCESS;
   2dd1c:	2300      	movs	r3, #0
   2dd1e:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2dd20:	6a3b      	ldr	r3, [r7, #32]
}
   2dd22:	0018      	movs	r0, r3
   2dd24:	46bd      	mov	sp, r7
   2dd26:	b00a      	add	sp, #40	; 0x28
   2dd28:	bd80      	pop	{r7, pc}
   2dd2a:	46c0      	nop			; (mov r8, r8)
   2dd2c:	0002f921 	.word	0x0002f921
   2dd30:	0002db7d 	.word	0x0002db7d
   2dd34:	0002d885 	.word	0x0002d885

0002dd38 <keepalive>:


int keepalive(MQTTClient* c)
{
   2dd38:	b580      	push	{r7, lr}
   2dd3a:	b088      	sub	sp, #32
   2dd3c:	af00      	add	r7, sp, #0
   2dd3e:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2dd40:	2301      	movs	r3, #1
   2dd42:	425b      	negs	r3, r3
   2dd44:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2dd46:	687b      	ldr	r3, [r7, #4]
   2dd48:	699b      	ldr	r3, [r3, #24]
   2dd4a:	2b00      	cmp	r3, #0
   2dd4c:	d102      	bne.n	2dd54 <keepalive+0x1c>
    {
        rc = SUCCESS;
   2dd4e:	2300      	movs	r3, #0
   2dd50:	61fb      	str	r3, [r7, #28]
        goto exit;
   2dd52:	e033      	b.n	2ddbc <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2dd54:	687b      	ldr	r3, [r7, #4]
   2dd56:	3354      	adds	r3, #84	; 0x54
   2dd58:	0018      	movs	r0, r3
   2dd5a:	4b1b      	ldr	r3, [pc, #108]	; (2ddc8 <keepalive+0x90>)
   2dd5c:	4798      	blx	r3
   2dd5e:	1e03      	subs	r3, r0, #0
   2dd60:	d02c      	beq.n	2ddbc <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2dd62:	687b      	ldr	r3, [r7, #4]
   2dd64:	7f1b      	ldrb	r3, [r3, #28]
   2dd66:	2b00      	cmp	r3, #0
   2dd68:	d128      	bne.n	2ddbc <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2dd6a:	230c      	movs	r3, #12
   2dd6c:	18fb      	adds	r3, r7, r3
   2dd6e:	0018      	movs	r0, r3
   2dd70:	4b16      	ldr	r3, [pc, #88]	; (2ddcc <keepalive+0x94>)
   2dd72:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2dd74:	23fa      	movs	r3, #250	; 0xfa
   2dd76:	009a      	lsls	r2, r3, #2
   2dd78:	230c      	movs	r3, #12
   2dd7a:	18fb      	adds	r3, r7, r3
   2dd7c:	0011      	movs	r1, r2
   2dd7e:	0018      	movs	r0, r3
   2dd80:	4b13      	ldr	r3, [pc, #76]	; (2ddd0 <keepalive+0x98>)
   2dd82:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2dd84:	687b      	ldr	r3, [r7, #4]
   2dd86:	691a      	ldr	r2, [r3, #16]
   2dd88:	687b      	ldr	r3, [r7, #4]
   2dd8a:	689b      	ldr	r3, [r3, #8]
   2dd8c:	0019      	movs	r1, r3
   2dd8e:	0010      	movs	r0, r2
   2dd90:	4b10      	ldr	r3, [pc, #64]	; (2ddd4 <keepalive+0x9c>)
   2dd92:	4798      	blx	r3
   2dd94:	0003      	movs	r3, r0
   2dd96:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2dd98:	69bb      	ldr	r3, [r7, #24]
   2dd9a:	2b00      	cmp	r3, #0
   2dd9c:	dd0e      	ble.n	2ddbc <keepalive+0x84>
   2dd9e:	230c      	movs	r3, #12
   2dda0:	18fa      	adds	r2, r7, r3
   2dda2:	69b9      	ldr	r1, [r7, #24]
   2dda4:	687b      	ldr	r3, [r7, #4]
   2dda6:	0018      	movs	r0, r3
   2dda8:	4b0b      	ldr	r3, [pc, #44]	; (2ddd8 <keepalive+0xa0>)
   2ddaa:	4798      	blx	r3
   2ddac:	0003      	movs	r3, r0
   2ddae:	61fb      	str	r3, [r7, #28]
   2ddb0:	69fb      	ldr	r3, [r7, #28]
   2ddb2:	2b00      	cmp	r3, #0
   2ddb4:	d102      	bne.n	2ddbc <keepalive+0x84>
                c->ping_outstanding = 1;
   2ddb6:	687b      	ldr	r3, [r7, #4]
   2ddb8:	2201      	movs	r2, #1
   2ddba:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2ddbc:	69fb      	ldr	r3, [r7, #28]
}
   2ddbe:	0018      	movs	r0, r3
   2ddc0:	46bd      	mov	sp, r7
   2ddc2:	b008      	add	sp, #32
   2ddc4:	bd80      	pop	{r7, pc}
   2ddc6:	46c0      	nop			; (mov r8, r8)
   2ddc8:	0002e6b9 	.word	0x0002e6b9
   2ddcc:	0002e75d 	.word	0x0002e75d
   2ddd0:	0002e6e5 	.word	0x0002e6e5
   2ddd4:	0002f331 	.word	0x0002f331
   2ddd8:	0002d8d5 	.word	0x0002d8d5

0002dddc <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2dddc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ddde:	b095      	sub	sp, #84	; 0x54
   2dde0:	af06      	add	r7, sp, #24
   2dde2:	6078      	str	r0, [r7, #4]
   2dde4:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2dde6:	683a      	ldr	r2, [r7, #0]
   2dde8:	687b      	ldr	r3, [r7, #4]
   2ddea:	0011      	movs	r1, r2
   2ddec:	0018      	movs	r0, r3
   2ddee:	4b70      	ldr	r3, [pc, #448]	; (2dfb0 <cycle+0x1d4>)
   2ddf0:	4798      	blx	r3
   2ddf2:	0002      	movs	r2, r0
   2ddf4:	232e      	movs	r3, #46	; 0x2e
   2ddf6:	18fb      	adds	r3, r7, r3
   2ddf8:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2ddfa:	2300      	movs	r3, #0
   2ddfc:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2ddfe:	2300      	movs	r3, #0
   2de00:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2de02:	232e      	movs	r3, #46	; 0x2e
   2de04:	18fb      	adds	r3, r7, r3
   2de06:	881b      	ldrh	r3, [r3, #0]
   2de08:	2b0d      	cmp	r3, #13
   2de0a:	d900      	bls.n	2de0e <cycle+0x32>
   2de0c:	e0bd      	b.n	2df8a <cycle+0x1ae>
   2de0e:	009a      	lsls	r2, r3, #2
   2de10:	4b68      	ldr	r3, [pc, #416]	; (2dfb4 <cycle+0x1d8>)
   2de12:	18d3      	adds	r3, r2, r3
   2de14:	681b      	ldr	r3, [r3, #0]
   2de16:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2de18:	687b      	ldr	r3, [r7, #4]
   2de1a:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2de1c:	687b      	ldr	r3, [r7, #4]
   2de1e:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2de20:	001e      	movs	r6, r3
   2de22:	2310      	movs	r3, #16
   2de24:	18fb      	adds	r3, r7, r3
   2de26:	1d1d      	adds	r5, r3, #4
   2de28:	2310      	movs	r3, #16
   2de2a:	18fb      	adds	r3, r7, r3
   2de2c:	1c5c      	adds	r4, r3, #1
   2de2e:	230c      	movs	r3, #12
   2de30:	18f9      	adds	r1, r7, r3
   2de32:	2310      	movs	r3, #16
   2de34:	18fb      	adds	r3, r7, r3
   2de36:	1c98      	adds	r0, r3, #2
   2de38:	9604      	str	r6, [sp, #16]
   2de3a:	9203      	str	r2, [sp, #12]
   2de3c:	2310      	movs	r3, #16
   2de3e:	18fb      	adds	r3, r7, r3
   2de40:	330c      	adds	r3, #12
   2de42:	9302      	str	r3, [sp, #8]
   2de44:	2310      	movs	r3, #16
   2de46:	18fb      	adds	r3, r7, r3
   2de48:	3308      	adds	r3, #8
   2de4a:	9301      	str	r3, [sp, #4]
   2de4c:	2320      	movs	r3, #32
   2de4e:	18fb      	adds	r3, r7, r3
   2de50:	9300      	str	r3, [sp, #0]
   2de52:	002b      	movs	r3, r5
   2de54:	0022      	movs	r2, r4
   2de56:	4c58      	ldr	r4, [pc, #352]	; (2dfb8 <cycle+0x1dc>)
   2de58:	47a0      	blx	r4
   2de5a:	0003      	movs	r3, r0
   2de5c:	2b01      	cmp	r3, #1
   2de5e:	d000      	beq.n	2de62 <cycle+0x86>
   2de60:	e098      	b.n	2df94 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2de62:	68fb      	ldr	r3, [r7, #12]
   2de64:	b2da      	uxtb	r2, r3
   2de66:	2310      	movs	r3, #16
   2de68:	18fb      	adds	r3, r7, r3
   2de6a:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2de6c:	2310      	movs	r3, #16
   2de6e:	18fa      	adds	r2, r7, r3
   2de70:	2320      	movs	r3, #32
   2de72:	18f9      	adds	r1, r7, r3
   2de74:	687b      	ldr	r3, [r7, #4]
   2de76:	0018      	movs	r0, r3
   2de78:	4b50      	ldr	r3, [pc, #320]	; (2dfbc <cycle+0x1e0>)
   2de7a:	4798      	blx	r3
            if (msg.qos != QOS0)
   2de7c:	2310      	movs	r3, #16
   2de7e:	18fb      	adds	r3, r7, r3
   2de80:	781b      	ldrb	r3, [r3, #0]
   2de82:	2b00      	cmp	r3, #0
   2de84:	d100      	bne.n	2de88 <cycle+0xac>
   2de86:	e07d      	b.n	2df84 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2de88:	2310      	movs	r3, #16
   2de8a:	18fb      	adds	r3, r7, r3
   2de8c:	781b      	ldrb	r3, [r3, #0]
   2de8e:	2b01      	cmp	r3, #1
   2de90:	d10f      	bne.n	2deb2 <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2de92:	687b      	ldr	r3, [r7, #4]
   2de94:	6918      	ldr	r0, [r3, #16]
   2de96:	687b      	ldr	r3, [r7, #4]
   2de98:	689b      	ldr	r3, [r3, #8]
   2de9a:	0019      	movs	r1, r3
   2de9c:	2310      	movs	r3, #16
   2de9e:	18fb      	adds	r3, r7, r3
   2dea0:	889b      	ldrh	r3, [r3, #4]
   2dea2:	9300      	str	r3, [sp, #0]
   2dea4:	2300      	movs	r3, #0
   2dea6:	2204      	movs	r2, #4
   2dea8:	4c45      	ldr	r4, [pc, #276]	; (2dfc0 <cycle+0x1e4>)
   2deaa:	47a0      	blx	r4
   2deac:	0003      	movs	r3, r0
   2deae:	637b      	str	r3, [r7, #52]	; 0x34
   2deb0:	e013      	b.n	2deda <cycle+0xfe>
                else if (msg.qos == QOS2)
   2deb2:	2310      	movs	r3, #16
   2deb4:	18fb      	adds	r3, r7, r3
   2deb6:	781b      	ldrb	r3, [r3, #0]
   2deb8:	2b02      	cmp	r3, #2
   2deba:	d10e      	bne.n	2deda <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2debc:	687b      	ldr	r3, [r7, #4]
   2debe:	6918      	ldr	r0, [r3, #16]
   2dec0:	687b      	ldr	r3, [r7, #4]
   2dec2:	689b      	ldr	r3, [r3, #8]
   2dec4:	0019      	movs	r1, r3
   2dec6:	2310      	movs	r3, #16
   2dec8:	18fb      	adds	r3, r7, r3
   2deca:	889b      	ldrh	r3, [r3, #4]
   2decc:	9300      	str	r3, [sp, #0]
   2dece:	2300      	movs	r3, #0
   2ded0:	2205      	movs	r2, #5
   2ded2:	4c3b      	ldr	r4, [pc, #236]	; (2dfc0 <cycle+0x1e4>)
   2ded4:	47a0      	blx	r4
   2ded6:	0003      	movs	r3, r0
   2ded8:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2deda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2dedc:	2b00      	cmp	r3, #0
   2dede:	dc03      	bgt.n	2dee8 <cycle+0x10c>
                    rc = FAILURE;
   2dee0:	2301      	movs	r3, #1
   2dee2:	425b      	negs	r3, r3
   2dee4:	633b      	str	r3, [r7, #48]	; 0x30
   2dee6:	e007      	b.n	2def8 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2dee8:	683a      	ldr	r2, [r7, #0]
   2deea:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2deec:	687b      	ldr	r3, [r7, #4]
   2deee:	0018      	movs	r0, r3
   2def0:	4b34      	ldr	r3, [pc, #208]	; (2dfc4 <cycle+0x1e8>)
   2def2:	4798      	blx	r3
   2def4:	0003      	movs	r3, r0
   2def6:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2def8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2defa:	3301      	adds	r3, #1
   2defc:	d142      	bne.n	2df84 <cycle+0x1a8>
                    goto exit; // there was a problem
   2defe:	46c0      	nop			; (mov r8, r8)
   2df00:	e049      	b.n	2df96 <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2df02:	687b      	ldr	r3, [r7, #4]
   2df04:	695c      	ldr	r4, [r3, #20]
   2df06:	687b      	ldr	r3, [r7, #4]
   2df08:	68db      	ldr	r3, [r3, #12]
   2df0a:	220a      	movs	r2, #10
   2df0c:	18ba      	adds	r2, r7, r2
   2df0e:	2109      	movs	r1, #9
   2df10:	1879      	adds	r1, r7, r1
   2df12:	2008      	movs	r0, #8
   2df14:	1838      	adds	r0, r7, r0
   2df16:	9300      	str	r3, [sp, #0]
   2df18:	0023      	movs	r3, r4
   2df1a:	4c2b      	ldr	r4, [pc, #172]	; (2dfc8 <cycle+0x1ec>)
   2df1c:	47a0      	blx	r4
   2df1e:	0003      	movs	r3, r0
   2df20:	2b01      	cmp	r3, #1
   2df22:	d003      	beq.n	2df2c <cycle+0x150>
                rc = FAILURE;
   2df24:	2301      	movs	r3, #1
   2df26:	425b      	negs	r3, r3
   2df28:	633b      	str	r3, [r7, #48]	; 0x30
   2df2a:	e023      	b.n	2df74 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2df2c:	687b      	ldr	r3, [r7, #4]
   2df2e:	6918      	ldr	r0, [r3, #16]
   2df30:	687b      	ldr	r3, [r7, #4]
   2df32:	689b      	ldr	r3, [r3, #8]
   2df34:	0019      	movs	r1, r3
   2df36:	230a      	movs	r3, #10
   2df38:	18fb      	adds	r3, r7, r3
   2df3a:	881b      	ldrh	r3, [r3, #0]
   2df3c:	9300      	str	r3, [sp, #0]
   2df3e:	2300      	movs	r3, #0
   2df40:	2206      	movs	r2, #6
   2df42:	4c1f      	ldr	r4, [pc, #124]	; (2dfc0 <cycle+0x1e4>)
   2df44:	47a0      	blx	r4
   2df46:	0003      	movs	r3, r0
   2df48:	637b      	str	r3, [r7, #52]	; 0x34
   2df4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2df4c:	2b00      	cmp	r3, #0
   2df4e:	dc03      	bgt.n	2df58 <cycle+0x17c>
                rc = FAILURE;
   2df50:	2301      	movs	r3, #1
   2df52:	425b      	negs	r3, r3
   2df54:	633b      	str	r3, [r7, #48]	; 0x30
   2df56:	e00d      	b.n	2df74 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2df58:	683a      	ldr	r2, [r7, #0]
   2df5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2df5c:	687b      	ldr	r3, [r7, #4]
   2df5e:	0018      	movs	r0, r3
   2df60:	4b18      	ldr	r3, [pc, #96]	; (2dfc4 <cycle+0x1e8>)
   2df62:	4798      	blx	r3
   2df64:	0003      	movs	r3, r0
   2df66:	633b      	str	r3, [r7, #48]	; 0x30
   2df68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2df6a:	2b00      	cmp	r3, #0
   2df6c:	d002      	beq.n	2df74 <cycle+0x198>
                rc = FAILURE; // there was a problem
   2df6e:	2301      	movs	r3, #1
   2df70:	425b      	negs	r3, r3
   2df72:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2df74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2df76:	3301      	adds	r3, #1
   2df78:	d106      	bne.n	2df88 <cycle+0x1ac>
                goto exit; // there was a problem
   2df7a:	e00c      	b.n	2df96 <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2df7c:	687b      	ldr	r3, [r7, #4]
   2df7e:	2200      	movs	r2, #0
   2df80:	771a      	strb	r2, [r3, #28]
            break;
   2df82:	e002      	b.n	2df8a <cycle+0x1ae>
            break;
   2df84:	46c0      	nop			; (mov r8, r8)
   2df86:	e000      	b.n	2df8a <cycle+0x1ae>
            break;
   2df88:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2df8a:	687b      	ldr	r3, [r7, #4]
   2df8c:	0018      	movs	r0, r3
   2df8e:	4b0f      	ldr	r3, [pc, #60]	; (2dfcc <cycle+0x1f0>)
   2df90:	4798      	blx	r3
   2df92:	e000      	b.n	2df96 <cycle+0x1ba>
                goto exit;
   2df94:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2df96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2df98:	2b00      	cmp	r3, #0
   2df9a:	d103      	bne.n	2dfa4 <cycle+0x1c8>
        rc = packet_type;
   2df9c:	232e      	movs	r3, #46	; 0x2e
   2df9e:	18fb      	adds	r3, r7, r3
   2dfa0:	881b      	ldrh	r3, [r3, #0]
   2dfa2:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2dfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2dfa6:	0018      	movs	r0, r3
   2dfa8:	46bd      	mov	sp, r7
   2dfaa:	b00f      	add	sp, #60	; 0x3c
   2dfac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2dfae:	46c0      	nop			; (mov r8, r8)
   2dfb0:	0002da91 	.word	0x0002da91
   2dfb4:	00039214 	.word	0x00039214
   2dfb8:	0002f355 	.word	0x0002f355
   2dfbc:	0002dc4d 	.word	0x0002dc4d
   2dfc0:	0002fb4d 	.word	0x0002fb4d
   2dfc4:	0002d8d5 	.word	0x0002d8d5
   2dfc8:	0002f459 	.word	0x0002f459
   2dfcc:	0002dd39 	.word	0x0002dd39

0002dfd0 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2dfd0:	b580      	push	{r7, lr}
   2dfd2:	b086      	sub	sp, #24
   2dfd4:	af00      	add	r7, sp, #0
   2dfd6:	6078      	str	r0, [r7, #4]
   2dfd8:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2dfda:	2300      	movs	r3, #0
   2dfdc:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2dfde:	2308      	movs	r3, #8
   2dfe0:	18fb      	adds	r3, r7, r3
   2dfe2:	0018      	movs	r0, r3
   2dfe4:	4b11      	ldr	r3, [pc, #68]	; (2e02c <MQTTYield+0x5c>)
   2dfe6:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2dfe8:	683a      	ldr	r2, [r7, #0]
   2dfea:	2308      	movs	r3, #8
   2dfec:	18fb      	adds	r3, r7, r3
   2dfee:	0011      	movs	r1, r2
   2dff0:	0018      	movs	r0, r3
   2dff2:	4b0f      	ldr	r3, [pc, #60]	; (2e030 <MQTTYield+0x60>)
   2dff4:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2dff6:	2308      	movs	r3, #8
   2dff8:	18fa      	adds	r2, r7, r3
   2dffa:	687b      	ldr	r3, [r7, #4]
   2dffc:	0011      	movs	r1, r2
   2dffe:	0018      	movs	r0, r3
   2e000:	4b0c      	ldr	r3, [pc, #48]	; (2e034 <MQTTYield+0x64>)
   2e002:	4798      	blx	r3
   2e004:	0003      	movs	r3, r0
   2e006:	3301      	adds	r3, #1
   2e008:	d103      	bne.n	2e012 <MQTTYield+0x42>
        {
            rc = FAILURE;
   2e00a:	2301      	movs	r3, #1
   2e00c:	425b      	negs	r3, r3
   2e00e:	617b      	str	r3, [r7, #20]
            break;
   2e010:	e006      	b.n	2e020 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2e012:	2308      	movs	r3, #8
   2e014:	18fb      	adds	r3, r7, r3
   2e016:	0018      	movs	r0, r3
   2e018:	4b07      	ldr	r3, [pc, #28]	; (2e038 <MQTTYield+0x68>)
   2e01a:	4798      	blx	r3
   2e01c:	1e03      	subs	r3, r0, #0
   2e01e:	d0ea      	beq.n	2dff6 <MQTTYield+0x26>
        
    return rc;
   2e020:	697b      	ldr	r3, [r7, #20]
}
   2e022:	0018      	movs	r0, r3
   2e024:	46bd      	mov	sp, r7
   2e026:	b006      	add	sp, #24
   2e028:	bd80      	pop	{r7, pc}
   2e02a:	46c0      	nop			; (mov r8, r8)
   2e02c:	0002e75d 	.word	0x0002e75d
   2e030:	0002e6e5 	.word	0x0002e6e5
   2e034:	0002dddd 	.word	0x0002dddd
   2e038:	0002e6b9 	.word	0x0002e6b9

0002e03c <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2e03c:	b580      	push	{r7, lr}
   2e03e:	b086      	sub	sp, #24
   2e040:	af00      	add	r7, sp, #0
   2e042:	60f8      	str	r0, [r7, #12]
   2e044:	60b9      	str	r1, [r7, #8]
   2e046:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2e048:	2301      	movs	r3, #1
   2e04a:	425b      	negs	r3, r3
   2e04c:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2e04e:	687b      	ldr	r3, [r7, #4]
   2e050:	0018      	movs	r0, r3
   2e052:	4b0b      	ldr	r3, [pc, #44]	; (2e080 <waitfor+0x44>)
   2e054:	4798      	blx	r3
   2e056:	1e03      	subs	r3, r0, #0
   2e058:	d10c      	bne.n	2e074 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2e05a:	687a      	ldr	r2, [r7, #4]
   2e05c:	68fb      	ldr	r3, [r7, #12]
   2e05e:	0011      	movs	r1, r2
   2e060:	0018      	movs	r0, r3
   2e062:	4b08      	ldr	r3, [pc, #32]	; (2e084 <waitfor+0x48>)
   2e064:	4798      	blx	r3
   2e066:	0003      	movs	r3, r0
   2e068:	617b      	str	r3, [r7, #20]
   2e06a:	697a      	ldr	r2, [r7, #20]
   2e06c:	68bb      	ldr	r3, [r7, #8]
   2e06e:	429a      	cmp	r2, r3
   2e070:	d1ed      	bne.n	2e04e <waitfor+0x12>
   2e072:	e000      	b.n	2e076 <waitfor+0x3a>
            break; // we timed out
   2e074:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2e076:	697b      	ldr	r3, [r7, #20]
}
   2e078:	0018      	movs	r0, r3
   2e07a:	46bd      	mov	sp, r7
   2e07c:	b006      	add	sp, #24
   2e07e:	bd80      	pop	{r7, pc}
   2e080:	0002e6b9 	.word	0x0002e6b9
   2e084:	0002dddd 	.word	0x0002dddd

0002e088 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2e088:	b590      	push	{r4, r7, lr}
   2e08a:	b09f      	sub	sp, #124	; 0x7c
   2e08c:	af00      	add	r7, sp, #0
   2e08e:	6078      	str	r0, [r7, #4]
   2e090:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2e092:	2301      	movs	r3, #1
   2e094:	425b      	negs	r3, r3
   2e096:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2e098:	230c      	movs	r3, #12
   2e09a:	18fa      	adds	r2, r7, r3
   2e09c:	4b41      	ldr	r3, [pc, #260]	; (2e1a4 <MQTTConnect+0x11c>)
   2e09e:	0010      	movs	r0, r2
   2e0a0:	0019      	movs	r1, r3
   2e0a2:	2358      	movs	r3, #88	; 0x58
   2e0a4:	001a      	movs	r2, r3
   2e0a6:	4b40      	ldr	r3, [pc, #256]	; (2e1a8 <MQTTConnect+0x120>)
   2e0a8:	4798      	blx	r3
    int len = 0;
   2e0aa:	2300      	movs	r3, #0
   2e0ac:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2e0ae:	687b      	ldr	r3, [r7, #4]
   2e0b0:	6a1b      	ldr	r3, [r3, #32]
   2e0b2:	2b00      	cmp	r3, #0
   2e0b4:	d166      	bne.n	2e184 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2e0b6:	2364      	movs	r3, #100	; 0x64
   2e0b8:	18fb      	adds	r3, r7, r3
   2e0ba:	0018      	movs	r0, r3
   2e0bc:	4b3b      	ldr	r3, [pc, #236]	; (2e1ac <MQTTConnect+0x124>)
   2e0be:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2e0c0:	687b      	ldr	r3, [r7, #4]
   2e0c2:	685a      	ldr	r2, [r3, #4]
   2e0c4:	2364      	movs	r3, #100	; 0x64
   2e0c6:	18fb      	adds	r3, r7, r3
   2e0c8:	0011      	movs	r1, r2
   2e0ca:	0018      	movs	r0, r3
   2e0cc:	4b38      	ldr	r3, [pc, #224]	; (2e1b0 <MQTTConnect+0x128>)
   2e0ce:	4798      	blx	r3

    if (options == 0)
   2e0d0:	683b      	ldr	r3, [r7, #0]
   2e0d2:	2b00      	cmp	r3, #0
   2e0d4:	d102      	bne.n	2e0dc <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2e0d6:	230c      	movs	r3, #12
   2e0d8:	18fb      	adds	r3, r7, r3
   2e0da:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2e0dc:	683b      	ldr	r3, [r7, #0]
   2e0de:	8b1b      	ldrh	r3, [r3, #24]
   2e0e0:	001a      	movs	r2, r3
   2e0e2:	687b      	ldr	r3, [r7, #4]
   2e0e4:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2e0e6:	687b      	ldr	r3, [r7, #4]
   2e0e8:	3354      	adds	r3, #84	; 0x54
   2e0ea:	001a      	movs	r2, r3
   2e0ec:	687b      	ldr	r3, [r7, #4]
   2e0ee:	699b      	ldr	r3, [r3, #24]
   2e0f0:	0019      	movs	r1, r3
   2e0f2:	0010      	movs	r0, r2
   2e0f4:	4b2f      	ldr	r3, [pc, #188]	; (2e1b4 <MQTTConnect+0x12c>)
   2e0f6:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2e0f8:	687b      	ldr	r3, [r7, #4]
   2e0fa:	6918      	ldr	r0, [r3, #16]
   2e0fc:	687b      	ldr	r3, [r7, #4]
   2e0fe:	689b      	ldr	r3, [r3, #8]
   2e100:	0019      	movs	r1, r3
   2e102:	683b      	ldr	r3, [r7, #0]
   2e104:	001a      	movs	r2, r3
   2e106:	4b2c      	ldr	r3, [pc, #176]	; (2e1b8 <MQTTConnect+0x130>)
   2e108:	4798      	blx	r3
   2e10a:	0003      	movs	r3, r0
   2e10c:	673b      	str	r3, [r7, #112]	; 0x70
   2e10e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2e110:	2b00      	cmp	r3, #0
   2e112:	dd39      	ble.n	2e188 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2e114:	2364      	movs	r3, #100	; 0x64
   2e116:	18fa      	adds	r2, r7, r3
   2e118:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2e11a:	687b      	ldr	r3, [r7, #4]
   2e11c:	0018      	movs	r0, r3
   2e11e:	4b27      	ldr	r3, [pc, #156]	; (2e1bc <MQTTConnect+0x134>)
   2e120:	4798      	blx	r3
   2e122:	0003      	movs	r3, r0
   2e124:	677b      	str	r3, [r7, #116]	; 0x74
   2e126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2e128:	2b00      	cmp	r3, #0
   2e12a:	d12f      	bne.n	2e18c <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2e12c:	2364      	movs	r3, #100	; 0x64
   2e12e:	18fa      	adds	r2, r7, r3
   2e130:	687b      	ldr	r3, [r7, #4]
   2e132:	2102      	movs	r1, #2
   2e134:	0018      	movs	r0, r3
   2e136:	4b22      	ldr	r3, [pc, #136]	; (2e1c0 <MQTTConnect+0x138>)
   2e138:	4798      	blx	r3
   2e13a:	0003      	movs	r3, r0
   2e13c:	2b02      	cmp	r3, #2
   2e13e:	d11d      	bne.n	2e17c <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2e140:	230b      	movs	r3, #11
   2e142:	18fb      	adds	r3, r7, r3
   2e144:	22ff      	movs	r2, #255	; 0xff
   2e146:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2e148:	230a      	movs	r3, #10
   2e14a:	18fb      	adds	r3, r7, r3
   2e14c:	2200      	movs	r2, #0
   2e14e:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2e150:	687b      	ldr	r3, [r7, #4]
   2e152:	695a      	ldr	r2, [r3, #20]
   2e154:	687b      	ldr	r3, [r7, #4]
   2e156:	68db      	ldr	r3, [r3, #12]
   2e158:	210b      	movs	r1, #11
   2e15a:	1879      	adds	r1, r7, r1
   2e15c:	200a      	movs	r0, #10
   2e15e:	1838      	adds	r0, r7, r0
   2e160:	4c18      	ldr	r4, [pc, #96]	; (2e1c4 <MQTTConnect+0x13c>)
   2e162:	47a0      	blx	r4
   2e164:	0003      	movs	r3, r0
   2e166:	2b01      	cmp	r3, #1
   2e168:	d104      	bne.n	2e174 <MQTTConnect+0xec>
            rc = connack_rc;
   2e16a:	230b      	movs	r3, #11
   2e16c:	18fb      	adds	r3, r7, r3
   2e16e:	781b      	ldrb	r3, [r3, #0]
   2e170:	677b      	str	r3, [r7, #116]	; 0x74
   2e172:	e00c      	b.n	2e18e <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2e174:	2301      	movs	r3, #1
   2e176:	425b      	negs	r3, r3
   2e178:	677b      	str	r3, [r7, #116]	; 0x74
   2e17a:	e008      	b.n	2e18e <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2e17c:	2301      	movs	r3, #1
   2e17e:	425b      	negs	r3, r3
   2e180:	677b      	str	r3, [r7, #116]	; 0x74
   2e182:	e004      	b.n	2e18e <MQTTConnect+0x106>
		goto exit;
   2e184:	46c0      	nop			; (mov r8, r8)
   2e186:	e002      	b.n	2e18e <MQTTConnect+0x106>
        goto exit;
   2e188:	46c0      	nop			; (mov r8, r8)
   2e18a:	e000      	b.n	2e18e <MQTTConnect+0x106>
        goto exit; // there was a problem
   2e18c:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2e18e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2e190:	2b00      	cmp	r3, #0
   2e192:	d102      	bne.n	2e19a <MQTTConnect+0x112>
        c->isconnected = 1;
   2e194:	687b      	ldr	r3, [r7, #4]
   2e196:	2201      	movs	r2, #1
   2e198:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2e19a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2e19c:	0018      	movs	r0, r3
   2e19e:	46bd      	mov	sp, r7
   2e1a0:	b01f      	add	sp, #124	; 0x7c
   2e1a2:	bd90      	pop	{r4, r7, pc}
   2e1a4:	0003924c 	.word	0x0003924c
   2e1a8:	000342e5 	.word	0x000342e5
   2e1ac:	0002e75d 	.word	0x0002e75d
   2e1b0:	0002e6e5 	.word	0x0002e6e5
   2e1b4:	0002e70d 	.word	0x0002e70d
   2e1b8:	0002ef39 	.word	0x0002ef39
   2e1bc:	0002d8d5 	.word	0x0002d8d5
   2e1c0:	0002e03d 	.word	0x0002e03d
   2e1c4:	0002f1b5 	.word	0x0002f1b5

0002e1c8 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2e1c8:	b5b0      	push	{r4, r5, r7, lr}
   2e1ca:	b096      	sub	sp, #88	; 0x58
   2e1cc:	af04      	add	r7, sp, #16
   2e1ce:	60f8      	str	r0, [r7, #12]
   2e1d0:	60b9      	str	r1, [r7, #8]
   2e1d2:	603b      	str	r3, [r7, #0]
   2e1d4:	1dfb      	adds	r3, r7, #7
   2e1d6:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2e1d8:	2301      	movs	r3, #1
   2e1da:	425b      	negs	r3, r3
   2e1dc:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2e1de:	2300      	movs	r3, #0
   2e1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2e1e2:	2324      	movs	r3, #36	; 0x24
   2e1e4:	18fb      	adds	r3, r7, r3
   2e1e6:	2200      	movs	r2, #0
   2e1e8:	601a      	str	r2, [r3, #0]
   2e1ea:	2324      	movs	r3, #36	; 0x24
   2e1ec:	18fb      	adds	r3, r7, r3
   2e1ee:	2200      	movs	r2, #0
   2e1f0:	605a      	str	r2, [r3, #4]
   2e1f2:	2324      	movs	r3, #36	; 0x24
   2e1f4:	18fb      	adds	r3, r7, r3
   2e1f6:	2200      	movs	r2, #0
   2e1f8:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2e1fa:	1dfb      	adds	r3, r7, #7
   2e1fc:	781b      	ldrb	r3, [r3, #0]
   2e1fe:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2e200:	2324      	movs	r3, #36	; 0x24
   2e202:	18fb      	adds	r3, r7, r3
   2e204:	68ba      	ldr	r2, [r7, #8]
   2e206:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2e208:	68fb      	ldr	r3, [r7, #12]
   2e20a:	6a1b      	ldr	r3, [r3, #32]
   2e20c:	2b00      	cmp	r3, #0
   2e20e:	d100      	bne.n	2e212 <MQTTSubscribe+0x4a>
   2e210:	e088      	b.n	2e324 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2e212:	2330      	movs	r3, #48	; 0x30
   2e214:	18fb      	adds	r3, r7, r3
   2e216:	0018      	movs	r0, r3
   2e218:	4b47      	ldr	r3, [pc, #284]	; (2e338 <MQTTSubscribe+0x170>)
   2e21a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2e21c:	68fb      	ldr	r3, [r7, #12]
   2e21e:	685a      	ldr	r2, [r3, #4]
   2e220:	2330      	movs	r3, #48	; 0x30
   2e222:	18fb      	adds	r3, r7, r3
   2e224:	0011      	movs	r1, r2
   2e226:	0018      	movs	r0, r3
   2e228:	4b44      	ldr	r3, [pc, #272]	; (2e33c <MQTTSubscribe+0x174>)
   2e22a:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2e22c:	68fb      	ldr	r3, [r7, #12]
   2e22e:	691c      	ldr	r4, [r3, #16]
   2e230:	68fb      	ldr	r3, [r7, #12]
   2e232:	689b      	ldr	r3, [r3, #8]
   2e234:	001d      	movs	r5, r3
   2e236:	68fb      	ldr	r3, [r7, #12]
   2e238:	0018      	movs	r0, r3
   2e23a:	4b41      	ldr	r3, [pc, #260]	; (2e340 <MQTTSubscribe+0x178>)
   2e23c:	4798      	blx	r3
   2e23e:	0003      	movs	r3, r0
   2e240:	b29a      	uxth	r2, r3
   2e242:	2320      	movs	r3, #32
   2e244:	18fb      	adds	r3, r7, r3
   2e246:	9302      	str	r3, [sp, #8]
   2e248:	2324      	movs	r3, #36	; 0x24
   2e24a:	18fb      	adds	r3, r7, r3
   2e24c:	9301      	str	r3, [sp, #4]
   2e24e:	2301      	movs	r3, #1
   2e250:	9300      	str	r3, [sp, #0]
   2e252:	0013      	movs	r3, r2
   2e254:	2200      	movs	r2, #0
   2e256:	0029      	movs	r1, r5
   2e258:	0020      	movs	r0, r4
   2e25a:	4c3a      	ldr	r4, [pc, #232]	; (2e344 <MQTTSubscribe+0x17c>)
   2e25c:	47a0      	blx	r4
   2e25e:	0003      	movs	r3, r0
   2e260:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2e262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e264:	2b00      	cmp	r3, #0
   2e266:	dd5f      	ble.n	2e328 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2e268:	2330      	movs	r3, #48	; 0x30
   2e26a:	18fa      	adds	r2, r7, r3
   2e26c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2e26e:	68fb      	ldr	r3, [r7, #12]
   2e270:	0018      	movs	r0, r3
   2e272:	4b35      	ldr	r3, [pc, #212]	; (2e348 <MQTTSubscribe+0x180>)
   2e274:	4798      	blx	r3
   2e276:	0003      	movs	r3, r0
   2e278:	647b      	str	r3, [r7, #68]	; 0x44
   2e27a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2e27c:	2b00      	cmp	r3, #0
   2e27e:	d155      	bne.n	2e32c <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2e280:	2330      	movs	r3, #48	; 0x30
   2e282:	18fa      	adds	r2, r7, r3
   2e284:	68fb      	ldr	r3, [r7, #12]
   2e286:	2109      	movs	r1, #9
   2e288:	0018      	movs	r0, r3
   2e28a:	4b30      	ldr	r3, [pc, #192]	; (2e34c <MQTTSubscribe+0x184>)
   2e28c:	4798      	blx	r3
   2e28e:	0003      	movs	r3, r0
   2e290:	2b09      	cmp	r3, #9
   2e292:	d143      	bne.n	2e31c <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2e294:	2300      	movs	r3, #0
   2e296:	61fb      	str	r3, [r7, #28]
   2e298:	2301      	movs	r3, #1
   2e29a:	425b      	negs	r3, r3
   2e29c:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2e29e:	68fb      	ldr	r3, [r7, #12]
   2e2a0:	695a      	ldr	r2, [r3, #20]
   2e2a2:	68fb      	ldr	r3, [r7, #12]
   2e2a4:	68db      	ldr	r3, [r3, #12]
   2e2a6:	001c      	movs	r4, r3
   2e2a8:	2318      	movs	r3, #24
   2e2aa:	18fb      	adds	r3, r7, r3
   2e2ac:	211c      	movs	r1, #28
   2e2ae:	1879      	adds	r1, r7, r1
   2e2b0:	2016      	movs	r0, #22
   2e2b2:	1838      	adds	r0, r7, r0
   2e2b4:	9401      	str	r4, [sp, #4]
   2e2b6:	9200      	str	r2, [sp, #0]
   2e2b8:	000a      	movs	r2, r1
   2e2ba:	2101      	movs	r1, #1
   2e2bc:	4c24      	ldr	r4, [pc, #144]	; (2e350 <MQTTSubscribe+0x188>)
   2e2be:	47a0      	blx	r4
   2e2c0:	0003      	movs	r3, r0
   2e2c2:	2b01      	cmp	r3, #1
   2e2c4:	d101      	bne.n	2e2ca <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2e2c6:	69bb      	ldr	r3, [r7, #24]
   2e2c8:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2e2ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2e2cc:	2b80      	cmp	r3, #128	; 0x80
   2e2ce:	d02e      	beq.n	2e32e <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e2d0:	2300      	movs	r3, #0
   2e2d2:	643b      	str	r3, [r7, #64]	; 0x40
   2e2d4:	e01e      	b.n	2e314 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2e2d6:	68fa      	ldr	r2, [r7, #12]
   2e2d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e2da:	3304      	adds	r3, #4
   2e2dc:	00db      	lsls	r3, r3, #3
   2e2de:	18d3      	adds	r3, r2, r3
   2e2e0:	3304      	adds	r3, #4
   2e2e2:	681b      	ldr	r3, [r3, #0]
   2e2e4:	2b00      	cmp	r3, #0
   2e2e6:	d112      	bne.n	2e30e <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2e2e8:	68fa      	ldr	r2, [r7, #12]
   2e2ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e2ec:	3304      	adds	r3, #4
   2e2ee:	00db      	lsls	r3, r3, #3
   2e2f0:	18d3      	adds	r3, r2, r3
   2e2f2:	3304      	adds	r3, #4
   2e2f4:	68ba      	ldr	r2, [r7, #8]
   2e2f6:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2e2f8:	68fa      	ldr	r2, [r7, #12]
   2e2fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e2fc:	3304      	adds	r3, #4
   2e2fe:	00db      	lsls	r3, r3, #3
   2e300:	18d3      	adds	r3, r2, r3
   2e302:	3308      	adds	r3, #8
   2e304:	683a      	ldr	r2, [r7, #0]
   2e306:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2e308:	2300      	movs	r3, #0
   2e30a:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2e30c:	e00f      	b.n	2e32e <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e30e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e310:	3301      	adds	r3, #1
   2e312:	643b      	str	r3, [r7, #64]	; 0x40
   2e314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e316:	2b04      	cmp	r3, #4
   2e318:	dddd      	ble.n	2e2d6 <MQTTSubscribe+0x10e>
   2e31a:	e008      	b.n	2e32e <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2e31c:	2301      	movs	r3, #1
   2e31e:	425b      	negs	r3, r3
   2e320:	647b      	str	r3, [r7, #68]	; 0x44
   2e322:	e004      	b.n	2e32e <MQTTSubscribe+0x166>
		goto exit;
   2e324:	46c0      	nop			; (mov r8, r8)
   2e326:	e002      	b.n	2e32e <MQTTSubscribe+0x166>
        goto exit;
   2e328:	46c0      	nop			; (mov r8, r8)
   2e32a:	e000      	b.n	2e32e <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2e32c:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2e32e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2e330:	0018      	movs	r0, r3
   2e332:	46bd      	mov	sp, r7
   2e334:	b012      	add	sp, #72	; 0x48
   2e336:	bdb0      	pop	{r4, r5, r7, pc}
   2e338:	0002e75d 	.word	0x0002e75d
   2e33c:	0002e6e5 	.word	0x0002e6e5
   2e340:	0002d8a5 	.word	0x0002d8a5
   2e344:	0002fc95 	.word	0x0002fc95
   2e348:	0002d8d5 	.word	0x0002d8d5
   2e34c:	0002e03d 	.word	0x0002e03d
   2e350:	0002fde5 	.word	0x0002fde5

0002e354 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2e354:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e356:	46ce      	mov	lr, r9
   2e358:	4647      	mov	r7, r8
   2e35a:	b580      	push	{r7, lr}
   2e35c:	b097      	sub	sp, #92	; 0x5c
   2e35e:	af08      	add	r7, sp, #32
   2e360:	60f8      	str	r0, [r7, #12]
   2e362:	60b9      	str	r1, [r7, #8]
   2e364:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2e366:	2301      	movs	r3, #1
   2e368:	425b      	negs	r3, r3
   2e36a:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2e36c:	2318      	movs	r3, #24
   2e36e:	18fb      	adds	r3, r7, r3
   2e370:	2200      	movs	r2, #0
   2e372:	601a      	str	r2, [r3, #0]
   2e374:	2318      	movs	r3, #24
   2e376:	18fb      	adds	r3, r7, r3
   2e378:	2200      	movs	r2, #0
   2e37a:	605a      	str	r2, [r3, #4]
   2e37c:	2318      	movs	r3, #24
   2e37e:	18fb      	adds	r3, r7, r3
   2e380:	2200      	movs	r2, #0
   2e382:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2e384:	2318      	movs	r3, #24
   2e386:	18fb      	adds	r3, r7, r3
   2e388:	68ba      	ldr	r2, [r7, #8]
   2e38a:	601a      	str	r2, [r3, #0]
    int len = 0;
   2e38c:	2300      	movs	r3, #0
   2e38e:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2e390:	68fb      	ldr	r3, [r7, #12]
   2e392:	6a1b      	ldr	r3, [r3, #32]
   2e394:	2b00      	cmp	r3, #0
   2e396:	d100      	bne.n	2e39a <MQTTPublish+0x46>
   2e398:	e0a0      	b.n	2e4dc <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2e39a:	2324      	movs	r3, #36	; 0x24
   2e39c:	18fb      	adds	r3, r7, r3
   2e39e:	0018      	movs	r0, r3
   2e3a0:	4b55      	ldr	r3, [pc, #340]	; (2e4f8 <MQTTPublish+0x1a4>)
   2e3a2:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2e3a4:	68fb      	ldr	r3, [r7, #12]
   2e3a6:	685a      	ldr	r2, [r3, #4]
   2e3a8:	2324      	movs	r3, #36	; 0x24
   2e3aa:	18fb      	adds	r3, r7, r3
   2e3ac:	0011      	movs	r1, r2
   2e3ae:	0018      	movs	r0, r3
   2e3b0:	4b52      	ldr	r3, [pc, #328]	; (2e4fc <MQTTPublish+0x1a8>)
   2e3b2:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2e3b4:	687b      	ldr	r3, [r7, #4]
   2e3b6:	781b      	ldrb	r3, [r3, #0]
   2e3b8:	2b01      	cmp	r3, #1
   2e3ba:	d003      	beq.n	2e3c4 <MQTTPublish+0x70>
   2e3bc:	687b      	ldr	r3, [r7, #4]
   2e3be:	781b      	ldrb	r3, [r3, #0]
   2e3c0:	2b02      	cmp	r3, #2
   2e3c2:	d107      	bne.n	2e3d4 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2e3c4:	68fb      	ldr	r3, [r7, #12]
   2e3c6:	0018      	movs	r0, r3
   2e3c8:	4b4d      	ldr	r3, [pc, #308]	; (2e500 <MQTTPublish+0x1ac>)
   2e3ca:	4798      	blx	r3
   2e3cc:	0003      	movs	r3, r0
   2e3ce:	b29a      	uxth	r2, r3
   2e3d0:	687b      	ldr	r3, [r7, #4]
   2e3d2:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2e3d4:	68fb      	ldr	r3, [r7, #12]
   2e3d6:	691b      	ldr	r3, [r3, #16]
   2e3d8:	469c      	mov	ip, r3
   2e3da:	68fb      	ldr	r3, [r7, #12]
   2e3dc:	689b      	ldr	r3, [r3, #8]
   2e3de:	001d      	movs	r5, r3
   2e3e0:	687b      	ldr	r3, [r7, #4]
   2e3e2:	781b      	ldrb	r3, [r3, #0]
   2e3e4:	001e      	movs	r6, r3
   2e3e6:	687b      	ldr	r3, [r7, #4]
   2e3e8:	785b      	ldrb	r3, [r3, #1]
   2e3ea:	4698      	mov	r8, r3
   2e3ec:	687b      	ldr	r3, [r7, #4]
   2e3ee:	889b      	ldrh	r3, [r3, #4]
   2e3f0:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2e3f2:	687b      	ldr	r3, [r7, #4]
   2e3f4:	689a      	ldr	r2, [r3, #8]
   2e3f6:	687b      	ldr	r3, [r7, #4]
   2e3f8:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2e3fa:	9306      	str	r3, [sp, #24]
   2e3fc:	9205      	str	r2, [sp, #20]
   2e3fe:	2318      	movs	r3, #24
   2e400:	18fa      	adds	r2, r7, r3
   2e402:	2308      	movs	r3, #8
   2e404:	446b      	add	r3, sp
   2e406:	ca13      	ldmia	r2!, {r0, r1, r4}
   2e408:	c313      	stmia	r3!, {r0, r1, r4}
   2e40a:	464b      	mov	r3, r9
   2e40c:	9301      	str	r3, [sp, #4]
   2e40e:	4643      	mov	r3, r8
   2e410:	9300      	str	r3, [sp, #0]
   2e412:	0033      	movs	r3, r6
   2e414:	2200      	movs	r2, #0
   2e416:	0029      	movs	r1, r5
   2e418:	4660      	mov	r0, ip
   2e41a:	4c3a      	ldr	r4, [pc, #232]	; (2e504 <MQTTPublish+0x1b0>)
   2e41c:	47a0      	blx	r4
   2e41e:	0003      	movs	r3, r0
   2e420:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2e422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e424:	2b00      	cmp	r3, #0
   2e426:	dd5b      	ble.n	2e4e0 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2e428:	2324      	movs	r3, #36	; 0x24
   2e42a:	18fa      	adds	r2, r7, r3
   2e42c:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2e42e:	68fb      	ldr	r3, [r7, #12]
   2e430:	0018      	movs	r0, r3
   2e432:	4b35      	ldr	r3, [pc, #212]	; (2e508 <MQTTPublish+0x1b4>)
   2e434:	4798      	blx	r3
   2e436:	0003      	movs	r3, r0
   2e438:	637b      	str	r3, [r7, #52]	; 0x34
   2e43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e43c:	2b00      	cmp	r3, #0
   2e43e:	d151      	bne.n	2e4e4 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2e440:	687b      	ldr	r3, [r7, #4]
   2e442:	781b      	ldrb	r3, [r3, #0]
   2e444:	2b01      	cmp	r3, #1
   2e446:	d122      	bne.n	2e48e <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2e448:	2324      	movs	r3, #36	; 0x24
   2e44a:	18fa      	adds	r2, r7, r3
   2e44c:	68fb      	ldr	r3, [r7, #12]
   2e44e:	2104      	movs	r1, #4
   2e450:	0018      	movs	r0, r3
   2e452:	4b2e      	ldr	r3, [pc, #184]	; (2e50c <MQTTPublish+0x1b8>)
   2e454:	4798      	blx	r3
   2e456:	0003      	movs	r3, r0
   2e458:	2b04      	cmp	r3, #4
   2e45a:	d114      	bne.n	2e486 <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2e45c:	68fb      	ldr	r3, [r7, #12]
   2e45e:	695c      	ldr	r4, [r3, #20]
   2e460:	68fb      	ldr	r3, [r7, #12]
   2e462:	68db      	ldr	r3, [r3, #12]
   2e464:	2216      	movs	r2, #22
   2e466:	18ba      	adds	r2, r7, r2
   2e468:	2115      	movs	r1, #21
   2e46a:	1879      	adds	r1, r7, r1
   2e46c:	2014      	movs	r0, #20
   2e46e:	1838      	adds	r0, r7, r0
   2e470:	9300      	str	r3, [sp, #0]
   2e472:	0023      	movs	r3, r4
   2e474:	4c26      	ldr	r4, [pc, #152]	; (2e510 <MQTTPublish+0x1bc>)
   2e476:	47a0      	blx	r4
   2e478:	0003      	movs	r3, r0
   2e47a:	2b01      	cmp	r3, #1
   2e47c:	d033      	beq.n	2e4e6 <MQTTPublish+0x192>
                rc = FAILURE;
   2e47e:	2301      	movs	r3, #1
   2e480:	425b      	negs	r3, r3
   2e482:	637b      	str	r3, [r7, #52]	; 0x34
   2e484:	e02f      	b.n	2e4e6 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2e486:	2301      	movs	r3, #1
   2e488:	425b      	negs	r3, r3
   2e48a:	637b      	str	r3, [r7, #52]	; 0x34
   2e48c:	e02b      	b.n	2e4e6 <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2e48e:	687b      	ldr	r3, [r7, #4]
   2e490:	781b      	ldrb	r3, [r3, #0]
   2e492:	2b02      	cmp	r3, #2
   2e494:	d127      	bne.n	2e4e6 <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2e496:	2324      	movs	r3, #36	; 0x24
   2e498:	18fa      	adds	r2, r7, r3
   2e49a:	68fb      	ldr	r3, [r7, #12]
   2e49c:	2107      	movs	r1, #7
   2e49e:	0018      	movs	r0, r3
   2e4a0:	4b1a      	ldr	r3, [pc, #104]	; (2e50c <MQTTPublish+0x1b8>)
   2e4a2:	4798      	blx	r3
   2e4a4:	0003      	movs	r3, r0
   2e4a6:	2b07      	cmp	r3, #7
   2e4a8:	d114      	bne.n	2e4d4 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2e4aa:	68fb      	ldr	r3, [r7, #12]
   2e4ac:	695c      	ldr	r4, [r3, #20]
   2e4ae:	68fb      	ldr	r3, [r7, #12]
   2e4b0:	68db      	ldr	r3, [r3, #12]
   2e4b2:	2212      	movs	r2, #18
   2e4b4:	18ba      	adds	r2, r7, r2
   2e4b6:	2111      	movs	r1, #17
   2e4b8:	1879      	adds	r1, r7, r1
   2e4ba:	2010      	movs	r0, #16
   2e4bc:	1838      	adds	r0, r7, r0
   2e4be:	9300      	str	r3, [sp, #0]
   2e4c0:	0023      	movs	r3, r4
   2e4c2:	4c13      	ldr	r4, [pc, #76]	; (2e510 <MQTTPublish+0x1bc>)
   2e4c4:	47a0      	blx	r4
   2e4c6:	0003      	movs	r3, r0
   2e4c8:	2b01      	cmp	r3, #1
   2e4ca:	d00c      	beq.n	2e4e6 <MQTTPublish+0x192>
                rc = FAILURE;
   2e4cc:	2301      	movs	r3, #1
   2e4ce:	425b      	negs	r3, r3
   2e4d0:	637b      	str	r3, [r7, #52]	; 0x34
   2e4d2:	e008      	b.n	2e4e6 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2e4d4:	2301      	movs	r3, #1
   2e4d6:	425b      	negs	r3, r3
   2e4d8:	637b      	str	r3, [r7, #52]	; 0x34
   2e4da:	e004      	b.n	2e4e6 <MQTTPublish+0x192>
		goto exit;
   2e4dc:	46c0      	nop			; (mov r8, r8)
   2e4de:	e002      	b.n	2e4e6 <MQTTPublish+0x192>
        goto exit;
   2e4e0:	46c0      	nop			; (mov r8, r8)
   2e4e2:	e000      	b.n	2e4e6 <MQTTPublish+0x192>
        goto exit; // there was a problem
   2e4e4:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2e4e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2e4e8:	0018      	movs	r0, r3
   2e4ea:	46bd      	mov	sp, r7
   2e4ec:	b00f      	add	sp, #60	; 0x3c
   2e4ee:	bc0c      	pop	{r2, r3}
   2e4f0:	4690      	mov	r8, r2
   2e4f2:	4699      	mov	r9, r3
   2e4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e4f6:	46c0      	nop			; (mov r8, r8)
   2e4f8:	0002e75d 	.word	0x0002e75d
   2e4fc:	0002e6e5 	.word	0x0002e6e5
   2e500:	0002d8a5 	.word	0x0002d8a5
   2e504:	0002f9e1 	.word	0x0002f9e1
   2e508:	0002d8d5 	.word	0x0002d8d5
   2e50c:	0002e03d 	.word	0x0002e03d
   2e510:	0002f459 	.word	0x0002f459

0002e514 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2e514:	b580      	push	{r7, lr}
   2e516:	b088      	sub	sp, #32
   2e518:	af00      	add	r7, sp, #0
   2e51a:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2e51c:	2301      	movs	r3, #1
   2e51e:	425b      	negs	r3, r3
   2e520:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2e522:	2300      	movs	r3, #0
   2e524:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2e526:	230c      	movs	r3, #12
   2e528:	18fb      	adds	r3, r7, r3
   2e52a:	0018      	movs	r0, r3
   2e52c:	4b13      	ldr	r3, [pc, #76]	; (2e57c <MQTTDisconnect+0x68>)
   2e52e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2e530:	687b      	ldr	r3, [r7, #4]
   2e532:	685a      	ldr	r2, [r3, #4]
   2e534:	230c      	movs	r3, #12
   2e536:	18fb      	adds	r3, r7, r3
   2e538:	0011      	movs	r1, r2
   2e53a:	0018      	movs	r0, r3
   2e53c:	4b10      	ldr	r3, [pc, #64]	; (2e580 <MQTTDisconnect+0x6c>)
   2e53e:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2e540:	687b      	ldr	r3, [r7, #4]
   2e542:	691a      	ldr	r2, [r3, #16]
   2e544:	687b      	ldr	r3, [r7, #4]
   2e546:	689b      	ldr	r3, [r3, #8]
   2e548:	0019      	movs	r1, r3
   2e54a:	0010      	movs	r0, r2
   2e54c:	4b0d      	ldr	r3, [pc, #52]	; (2e584 <MQTTDisconnect+0x70>)
   2e54e:	4798      	blx	r3
   2e550:	0003      	movs	r3, r0
   2e552:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2e554:	69bb      	ldr	r3, [r7, #24]
   2e556:	2b00      	cmp	r3, #0
   2e558:	dd08      	ble.n	2e56c <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2e55a:	230c      	movs	r3, #12
   2e55c:	18fa      	adds	r2, r7, r3
   2e55e:	69b9      	ldr	r1, [r7, #24]
   2e560:	687b      	ldr	r3, [r7, #4]
   2e562:	0018      	movs	r0, r3
   2e564:	4b08      	ldr	r3, [pc, #32]	; (2e588 <MQTTDisconnect+0x74>)
   2e566:	4798      	blx	r3
   2e568:	0003      	movs	r3, r0
   2e56a:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2e56c:	687b      	ldr	r3, [r7, #4]
   2e56e:	2200      	movs	r2, #0
   2e570:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2e572:	69fb      	ldr	r3, [r7, #28]
}
   2e574:	0018      	movs	r0, r3
   2e576:	46bd      	mov	sp, r7
   2e578:	b008      	add	sp, #32
   2e57a:	bd80      	pop	{r7, pc}
   2e57c:	0002e75d 	.word	0x0002e75d
   2e580:	0002e6e5 	.word	0x0002e6e5
   2e584:	0002f30d 	.word	0x0002f30d
   2e588:	0002d8d5 	.word	0x0002d8d5

0002e58c <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2e58c:	b580      	push	{r7, lr}
   2e58e:	b084      	sub	sp, #16
   2e590:	af00      	add	r7, sp, #0
   2e592:	0002      	movs	r2, r0
   2e594:	1dfb      	adds	r3, r7, #7
   2e596:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2e598:	2300      	movs	r3, #0
   2e59a:	60fb      	str	r3, [r7, #12]
   2e59c:	e01c      	b.n	2e5d8 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2e59e:	4a12      	ldr	r2, [pc, #72]	; (2e5e8 <isMQTTSocket+0x5c>)
   2e5a0:	68fb      	ldr	r3, [r7, #12]
   2e5a2:	2164      	movs	r1, #100	; 0x64
   2e5a4:	434b      	muls	r3, r1
   2e5a6:	18d3      	adds	r3, r2, r3
   2e5a8:	3360      	adds	r3, #96	; 0x60
   2e5aa:	681b      	ldr	r3, [r3, #0]
   2e5ac:	2b00      	cmp	r3, #0
   2e5ae:	d010      	beq.n	2e5d2 <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2e5b0:	4a0d      	ldr	r2, [pc, #52]	; (2e5e8 <isMQTTSocket+0x5c>)
   2e5b2:	68fb      	ldr	r3, [r7, #12]
   2e5b4:	2164      	movs	r1, #100	; 0x64
   2e5b6:	434b      	muls	r3, r1
   2e5b8:	18d3      	adds	r3, r2, r3
   2e5ba:	3360      	adds	r3, #96	; 0x60
   2e5bc:	681b      	ldr	r3, [r3, #0]
   2e5be:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2e5c0:	68bb      	ldr	r3, [r7, #8]
   2e5c2:	6a1a      	ldr	r2, [r3, #32]
   2e5c4:	1dfb      	adds	r3, r7, #7
   2e5c6:	781b      	ldrb	r3, [r3, #0]
   2e5c8:	b25b      	sxtb	r3, r3
   2e5ca:	429a      	cmp	r2, r3
   2e5cc:	d101      	bne.n	2e5d2 <isMQTTSocket+0x46>
				return true;
   2e5ce:	2301      	movs	r3, #1
   2e5d0:	e006      	b.n	2e5e0 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2e5d2:	68fb      	ldr	r3, [r7, #12]
   2e5d4:	3301      	adds	r3, #1
   2e5d6:	60fb      	str	r3, [r7, #12]
   2e5d8:	68fb      	ldr	r3, [r7, #12]
   2e5da:	2b06      	cmp	r3, #6
   2e5dc:	d9df      	bls.n	2e59e <isMQTTSocket+0x12>
		}
	}
	return false;
   2e5de:	2300      	movs	r3, #0
}
   2e5e0:	0018      	movs	r0, r3
   2e5e2:	46bd      	mov	sp, r7
   2e5e4:	b004      	add	sp, #16
   2e5e6:	bd80      	pop	{r7, pc}
   2e5e8:	20004298 	.word	0x20004298

0002e5ec <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2e5ec:	b580      	push	{r7, lr}
   2e5ee:	b082      	sub	sp, #8
   2e5f0:	af00      	add	r7, sp, #0
   2e5f2:	6078      	str	r0, [r7, #4]
   2e5f4:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2e5f6:	4b0d      	ldr	r3, [pc, #52]	; (2e62c <dnsResolveCallback+0x40>)
   2e5f8:	781b      	ldrb	r3, [r3, #0]
   2e5fa:	2201      	movs	r2, #1
   2e5fc:	4053      	eors	r3, r2
   2e5fe:	b2db      	uxtb	r3, r3
   2e600:	2b00      	cmp	r3, #0
   2e602:	d00e      	beq.n	2e622 <dnsResolveCallback+0x36>
   2e604:	4b0a      	ldr	r3, [pc, #40]	; (2e630 <dnsResolveCallback+0x44>)
   2e606:	681b      	ldr	r3, [r3, #0]
   2e608:	687a      	ldr	r2, [r7, #4]
   2e60a:	0011      	movs	r1, r2
   2e60c:	0018      	movs	r0, r3
   2e60e:	4b09      	ldr	r3, [pc, #36]	; (2e634 <dnsResolveCallback+0x48>)
   2e610:	4798      	blx	r3
   2e612:	1e03      	subs	r3, r0, #0
   2e614:	d105      	bne.n	2e622 <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2e616:	683a      	ldr	r2, [r7, #0]
   2e618:	4b07      	ldr	r3, [pc, #28]	; (2e638 <dnsResolveCallback+0x4c>)
   2e61a:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2e61c:	4b03      	ldr	r3, [pc, #12]	; (2e62c <dnsResolveCallback+0x40>)
   2e61e:	2201      	movs	r2, #1
   2e620:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2e622:	46c0      	nop			; (mov r8, r8)
   2e624:	46bd      	mov	sp, r7
   2e626:	b002      	add	sp, #8
   2e628:	bd80      	pop	{r7, pc}
   2e62a:	46c0      	nop			; (mov r8, r8)
   2e62c:	20004188 	.word	0x20004188
   2e630:	20004294 	.word	0x20004294
   2e634:	00034673 	.word	0x00034673
   2e638:	20004180 	.word	0x20004180

0002e63c <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2e63c:	b580      	push	{r7, lr}
   2e63e:	b084      	sub	sp, #16
   2e640:	af00      	add	r7, sp, #0
   2e642:	603a      	str	r2, [r7, #0]
   2e644:	1dfb      	adds	r3, r7, #7
   2e646:	1c02      	adds	r2, r0, #0
   2e648:	701a      	strb	r2, [r3, #0]
   2e64a:	1dbb      	adds	r3, r7, #6
   2e64c:	1c0a      	adds	r2, r1, #0
   2e64e:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2e650:	1dfb      	adds	r3, r7, #7
   2e652:	781b      	ldrb	r3, [r3, #0]
   2e654:	b25b      	sxtb	r3, r3
   2e656:	0018      	movs	r0, r3
   2e658:	4b12      	ldr	r3, [pc, #72]	; (2e6a4 <tcpClientSocketEventHandler+0x68>)
   2e65a:	4798      	blx	r3
   2e65c:	1e03      	subs	r3, r0, #0
   2e65e:	d01c      	beq.n	2e69a <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2e660:	1dbb      	adds	r3, r7, #6
   2e662:	781b      	ldrb	r3, [r3, #0]
   2e664:	2b06      	cmp	r3, #6
   2e666:	d00c      	beq.n	2e682 <tcpClientSocketEventHandler+0x46>
   2e668:	2b07      	cmp	r3, #7
   2e66a:	d006      	beq.n	2e67a <tcpClientSocketEventHandler+0x3e>
   2e66c:	2b05      	cmp	r3, #5
   2e66e:	d000      	beq.n	2e672 <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2e670:	e013      	b.n	2e69a <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2e672:	4b0d      	ldr	r3, [pc, #52]	; (2e6a8 <tcpClientSocketEventHandler+0x6c>)
   2e674:	2201      	movs	r2, #1
   2e676:	701a      	strb	r2, [r3, #0]
			break;
   2e678:	e00f      	b.n	2e69a <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2e67a:	4b0c      	ldr	r3, [pc, #48]	; (2e6ac <tcpClientSocketEventHandler+0x70>)
   2e67c:	2201      	movs	r2, #1
   2e67e:	701a      	strb	r2, [r3, #0]
			break;
   2e680:	e00b      	b.n	2e69a <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2e682:	683b      	ldr	r3, [r7, #0]
   2e684:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2e686:	68fb      	ldr	r3, [r7, #12]
   2e688:	2204      	movs	r2, #4
   2e68a:	5e9b      	ldrsh	r3, [r3, r2]
   2e68c:	001a      	movs	r2, r3
   2e68e:	4b08      	ldr	r3, [pc, #32]	; (2e6b0 <tcpClientSocketEventHandler+0x74>)
   2e690:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2e692:	4b08      	ldr	r3, [pc, #32]	; (2e6b4 <tcpClientSocketEventHandler+0x78>)
   2e694:	2201      	movs	r2, #1
   2e696:	701a      	strb	r2, [r3, #0]
			break;
   2e698:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2e69a:	46c0      	nop			; (mov r8, r8)
   2e69c:	46bd      	mov	sp, r7
   2e69e:	b004      	add	sp, #16
   2e6a0:	bd80      	pop	{r7, pc}
   2e6a2:	46c0      	nop			; (mov r8, r8)
   2e6a4:	0002e58d 	.word	0x0002e58d
   2e6a8:	20004189 	.word	0x20004189
   2e6ac:	2000418a 	.word	0x2000418a
   2e6b0:	20004184 	.word	0x20004184
   2e6b4:	2000418b 	.word	0x2000418b

0002e6b8 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2e6b8:	b580      	push	{r7, lr}
   2e6ba:	b082      	sub	sp, #8
   2e6bc:	af00      	add	r7, sp, #0
   2e6be:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2e6c0:	687b      	ldr	r3, [r7, #4]
   2e6c2:	3304      	adds	r3, #4
   2e6c4:	687a      	ldr	r2, [r7, #4]
   2e6c6:	0011      	movs	r1, r2
   2e6c8:	0018      	movs	r0, r3
   2e6ca:	4b05      	ldr	r3, [pc, #20]	; (2e6e0 <TimerIsExpired+0x28>)
   2e6cc:	4798      	blx	r3
   2e6ce:	0003      	movs	r3, r0
   2e6d0:	3b01      	subs	r3, #1
   2e6d2:	425a      	negs	r2, r3
   2e6d4:	4153      	adcs	r3, r2
   2e6d6:	b2db      	uxtb	r3, r3
}
   2e6d8:	0018      	movs	r0, r3
   2e6da:	46bd      	mov	sp, r7
   2e6dc:	b002      	add	sp, #8
   2e6de:	bd80      	pop	{r7, pc}
   2e6e0:	0001bf51 	.word	0x0001bf51

0002e6e4 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2e6e4:	b580      	push	{r7, lr}
   2e6e6:	b082      	sub	sp, #8
   2e6e8:	af00      	add	r7, sp, #0
   2e6ea:	6078      	str	r0, [r7, #4]
   2e6ec:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2e6ee:	687b      	ldr	r3, [r7, #4]
   2e6f0:	683a      	ldr	r2, [r7, #0]
   2e6f2:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2e6f4:	687b      	ldr	r3, [r7, #4]
   2e6f6:	3304      	adds	r3, #4
   2e6f8:	0018      	movs	r0, r3
   2e6fa:	4b03      	ldr	r3, [pc, #12]	; (2e708 <TimerCountdownMS+0x24>)
   2e6fc:	4798      	blx	r3
}
   2e6fe:	46c0      	nop			; (mov r8, r8)
   2e700:	46bd      	mov	sp, r7
   2e702:	b002      	add	sp, #8
   2e704:	bd80      	pop	{r7, pc}
   2e706:	46c0      	nop			; (mov r8, r8)
   2e708:	0001bee5 	.word	0x0001bee5

0002e70c <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   2e70c:	b580      	push	{r7, lr}
   2e70e:	b082      	sub	sp, #8
   2e710:	af00      	add	r7, sp, #0
   2e712:	6078      	str	r0, [r7, #4]
   2e714:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   2e716:	683b      	ldr	r3, [r7, #0]
   2e718:	22fa      	movs	r2, #250	; 0xfa
   2e71a:	0092      	lsls	r2, r2, #2
   2e71c:	435a      	muls	r2, r3
   2e71e:	687b      	ldr	r3, [r7, #4]
   2e720:	0011      	movs	r1, r2
   2e722:	0018      	movs	r0, r3
   2e724:	4b02      	ldr	r3, [pc, #8]	; (2e730 <TimerCountdown+0x24>)
   2e726:	4798      	blx	r3
}
   2e728:	46c0      	nop			; (mov r8, r8)
   2e72a:	46bd      	mov	sp, r7
   2e72c:	b002      	add	sp, #8
   2e72e:	bd80      	pop	{r7, pc}
   2e730:	0002e6e5 	.word	0x0002e6e5

0002e734 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   2e734:	b580      	push	{r7, lr}
   2e736:	b082      	sub	sp, #8
   2e738:	af00      	add	r7, sp, #0
   2e73a:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   2e73c:	687b      	ldr	r3, [r7, #4]
   2e73e:	3304      	adds	r3, #4
   2e740:	687a      	ldr	r2, [r7, #4]
   2e742:	0011      	movs	r1, r2
   2e744:	0018      	movs	r0, r3
   2e746:	4b04      	ldr	r3, [pc, #16]	; (2e758 <TimerLeftMS+0x24>)
   2e748:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   2e74a:	687b      	ldr	r3, [r7, #4]
   2e74c:	681b      	ldr	r3, [r3, #0]
}
   2e74e:	0018      	movs	r0, r3
   2e750:	46bd      	mov	sp, r7
   2e752:	b002      	add	sp, #8
   2e754:	bd80      	pop	{r7, pc}
   2e756:	46c0      	nop			; (mov r8, r8)
   2e758:	0001bf51 	.word	0x0001bf51

0002e75c <TimerInit>:


void TimerInit(Timer* timer) {
   2e75c:	b580      	push	{r7, lr}
   2e75e:	b082      	sub	sp, #8
   2e760:	af00      	add	r7, sp, #0
   2e762:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   2e764:	687b      	ldr	r3, [r7, #4]
   2e766:	2200      	movs	r2, #0
   2e768:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2e76a:	687b      	ldr	r3, [r7, #4]
   2e76c:	3304      	adds	r3, #4
   2e76e:	2208      	movs	r2, #8
   2e770:	2100      	movs	r1, #0
   2e772:	0018      	movs	r0, r3
   2e774:	4b02      	ldr	r3, [pc, #8]	; (2e780 <TimerInit+0x24>)
   2e776:	4798      	blx	r3
}
   2e778:	46c0      	nop			; (mov r8, r8)
   2e77a:	46bd      	mov	sp, r7
   2e77c:	b002      	add	sp, #8
   2e77e:	bd80      	pop	{r7, pc}
   2e780:	0003431b 	.word	0x0003431b

0002e784 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   2e784:	b590      	push	{r4, r7, lr}
   2e786:	b085      	sub	sp, #20
   2e788:	af00      	add	r7, sp, #0
   2e78a:	60f8      	str	r0, [r7, #12]
   2e78c:	60b9      	str	r1, [r7, #8]
   2e78e:	607a      	str	r2, [r7, #4]
   2e790:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   2e792:	683b      	ldr	r3, [r7, #0]
   2e794:	2b00      	cmp	r3, #0
   2e796:	d101      	bne.n	2e79c <WINC1500_read+0x18>
   2e798:	230a      	movs	r3, #10
   2e79a:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   2e79c:	4b2c      	ldr	r3, [pc, #176]	; (2e850 <WINC1500_read+0xcc>)
   2e79e:	681b      	ldr	r3, [r3, #0]
   2e7a0:	2b00      	cmp	r3, #0
   2e7a2:	d131      	bne.n	2e808 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   2e7a4:	4b2b      	ldr	r3, [pc, #172]	; (2e854 <WINC1500_read+0xd0>)
   2e7a6:	2200      	movs	r2, #0
   2e7a8:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   2e7aa:	68fb      	ldr	r3, [r7, #12]
   2e7ac:	681b      	ldr	r3, [r3, #0]
   2e7ae:	b258      	sxtb	r0, r3
   2e7b0:	683c      	ldr	r4, [r7, #0]
   2e7b2:	2380      	movs	r3, #128	; 0x80
   2e7b4:	005a      	lsls	r2, r3, #1
   2e7b6:	4928      	ldr	r1, [pc, #160]	; (2e858 <WINC1500_read+0xd4>)
   2e7b8:	0023      	movs	r3, r4
   2e7ba:	4c28      	ldr	r4, [pc, #160]	; (2e85c <WINC1500_read+0xd8>)
   2e7bc:	47a0      	blx	r4
   2e7be:	1e03      	subs	r3, r0, #0
   2e7c0:	d005      	beq.n	2e7ce <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   2e7c2:	2301      	movs	r3, #1
   2e7c4:	425b      	negs	r3, r3
   2e7c6:	e03e      	b.n	2e846 <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   2e7c8:	2000      	movs	r0, #0
   2e7ca:	4b25      	ldr	r3, [pc, #148]	; (2e860 <WINC1500_read+0xdc>)
   2e7cc:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   2e7ce:	4b21      	ldr	r3, [pc, #132]	; (2e854 <WINC1500_read+0xd0>)
   2e7d0:	781b      	ldrb	r3, [r3, #0]
   2e7d2:	2201      	movs	r2, #1
   2e7d4:	4053      	eors	r3, r2
   2e7d6:	b2db      	uxtb	r3, r3
   2e7d8:	2b00      	cmp	r3, #0
   2e7da:	d1f5      	bne.n	2e7c8 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   2e7dc:	4b21      	ldr	r3, [pc, #132]	; (2e864 <WINC1500_read+0xe0>)
   2e7de:	681b      	ldr	r3, [r3, #0]
   2e7e0:	2b00      	cmp	r3, #0
   2e7e2:	dd08      	ble.n	2e7f6 <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   2e7e4:	4b1f      	ldr	r3, [pc, #124]	; (2e864 <WINC1500_read+0xe0>)
   2e7e6:	681b      	ldr	r3, [r3, #0]
   2e7e8:	001a      	movs	r2, r3
   2e7ea:	4b19      	ldr	r3, [pc, #100]	; (2e850 <WINC1500_read+0xcc>)
   2e7ec:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   2e7ee:	4b1e      	ldr	r3, [pc, #120]	; (2e868 <WINC1500_read+0xe4>)
   2e7f0:	2200      	movs	r2, #0
   2e7f2:	601a      	str	r2, [r3, #0]
   2e7f4:	e008      	b.n	2e808 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   2e7f6:	4b16      	ldr	r3, [pc, #88]	; (2e850 <WINC1500_read+0xcc>)
   2e7f8:	2200      	movs	r2, #0
   2e7fa:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   2e7fc:	4b1a      	ldr	r3, [pc, #104]	; (2e868 <WINC1500_read+0xe4>)
   2e7fe:	2200      	movs	r2, #0
   2e800:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   2e802:	4b18      	ldr	r3, [pc, #96]	; (2e864 <WINC1500_read+0xe0>)
   2e804:	681b      	ldr	r3, [r3, #0]
   2e806:	e01e      	b.n	2e846 <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   2e808:	4b11      	ldr	r3, [pc, #68]	; (2e850 <WINC1500_read+0xcc>)
   2e80a:	681b      	ldr	r3, [r3, #0]
   2e80c:	001a      	movs	r2, r3
   2e80e:	687b      	ldr	r3, [r7, #4]
   2e810:	4293      	cmp	r3, r2
   2e812:	dd02      	ble.n	2e81a <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   2e814:	2301      	movs	r3, #1
   2e816:	425b      	negs	r3, r3
   2e818:	e015      	b.n	2e846 <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   2e81a:	4b13      	ldr	r3, [pc, #76]	; (2e868 <WINC1500_read+0xe4>)
   2e81c:	681a      	ldr	r2, [r3, #0]
   2e81e:	4b0e      	ldr	r3, [pc, #56]	; (2e858 <WINC1500_read+0xd4>)
   2e820:	18d1      	adds	r1, r2, r3
   2e822:	687a      	ldr	r2, [r7, #4]
   2e824:	68bb      	ldr	r3, [r7, #8]
   2e826:	0018      	movs	r0, r3
   2e828:	4b10      	ldr	r3, [pc, #64]	; (2e86c <WINC1500_read+0xe8>)
   2e82a:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   2e82c:	4b08      	ldr	r3, [pc, #32]	; (2e850 <WINC1500_read+0xcc>)
   2e82e:	681a      	ldr	r2, [r3, #0]
   2e830:	687b      	ldr	r3, [r7, #4]
   2e832:	1ad2      	subs	r2, r2, r3
   2e834:	4b06      	ldr	r3, [pc, #24]	; (2e850 <WINC1500_read+0xcc>)
   2e836:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   2e838:	4b0b      	ldr	r3, [pc, #44]	; (2e868 <WINC1500_read+0xe4>)
   2e83a:	681a      	ldr	r2, [r3, #0]
   2e83c:	687b      	ldr	r3, [r7, #4]
   2e83e:	18d2      	adds	r2, r2, r3
   2e840:	4b09      	ldr	r3, [pc, #36]	; (2e868 <WINC1500_read+0xe4>)
   2e842:	601a      	str	r2, [r3, #0]
  
  return len;
   2e844:	687b      	ldr	r3, [r7, #4]
}
   2e846:	0018      	movs	r0, r3
   2e848:	46bd      	mov	sp, r7
   2e84a:	b005      	add	sp, #20
   2e84c:	bd90      	pop	{r4, r7, pc}
   2e84e:	46c0      	nop			; (mov r8, r8)
   2e850:	20004290 	.word	0x20004290
   2e854:	2000418b 	.word	0x2000418b
   2e858:	2000418c 	.word	0x2000418c
   2e85c:	00024e39 	.word	0x00024e39
   2e860:	00021381 	.word	0x00021381
   2e864:	20004184 	.word	0x20004184
   2e868:	2000428c 	.word	0x2000428c
   2e86c:	000342e5 	.word	0x000342e5

0002e870 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   2e870:	b590      	push	{r4, r7, lr}
   2e872:	b085      	sub	sp, #20
   2e874:	af00      	add	r7, sp, #0
   2e876:	60f8      	str	r0, [r7, #12]
   2e878:	60b9      	str	r1, [r7, #8]
   2e87a:	607a      	str	r2, [r7, #4]
   2e87c:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   2e87e:	4b10      	ldr	r3, [pc, #64]	; (2e8c0 <WINC1500_write+0x50>)
   2e880:	2200      	movs	r2, #0
   2e882:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   2e884:	68fb      	ldr	r3, [r7, #12]
   2e886:	681b      	ldr	r3, [r3, #0]
   2e888:	b258      	sxtb	r0, r3
   2e88a:	687b      	ldr	r3, [r7, #4]
   2e88c:	b29a      	uxth	r2, r3
   2e88e:	68b9      	ldr	r1, [r7, #8]
   2e890:	2300      	movs	r3, #0
   2e892:	4c0c      	ldr	r4, [pc, #48]	; (2e8c4 <WINC1500_write+0x54>)
   2e894:	47a0      	blx	r4
   2e896:	1e03      	subs	r3, r0, #0
   2e898:	d005      	beq.n	2e8a6 <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   2e89a:	2301      	movs	r3, #1
   2e89c:	425b      	negs	r3, r3
   2e89e:	e00a      	b.n	2e8b6 <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   2e8a0:	2000      	movs	r0, #0
   2e8a2:	4b09      	ldr	r3, [pc, #36]	; (2e8c8 <WINC1500_write+0x58>)
   2e8a4:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   2e8a6:	4b06      	ldr	r3, [pc, #24]	; (2e8c0 <WINC1500_write+0x50>)
   2e8a8:	781b      	ldrb	r3, [r3, #0]
   2e8aa:	2201      	movs	r2, #1
   2e8ac:	4053      	eors	r3, r2
   2e8ae:	b2db      	uxtb	r3, r3
   2e8b0:	2b00      	cmp	r3, #0
   2e8b2:	d1f5      	bne.n	2e8a0 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   2e8b4:	687b      	ldr	r3, [r7, #4]
}
   2e8b6:	0018      	movs	r0, r3
   2e8b8:	46bd      	mov	sp, r7
   2e8ba:	b005      	add	sp, #20
   2e8bc:	bd90      	pop	{r4, r7, pc}
   2e8be:	46c0      	nop			; (mov r8, r8)
   2e8c0:	2000418a 	.word	0x2000418a
   2e8c4:	00024cd5 	.word	0x00024cd5
   2e8c8:	00021381 	.word	0x00021381

0002e8cc <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   2e8cc:	b580      	push	{r7, lr}
   2e8ce:	b082      	sub	sp, #8
   2e8d0:	af00      	add	r7, sp, #0
   2e8d2:	6078      	str	r0, [r7, #4]
	close(n->socket);
   2e8d4:	687b      	ldr	r3, [r7, #4]
   2e8d6:	681b      	ldr	r3, [r3, #0]
   2e8d8:	b25b      	sxtb	r3, r3
   2e8da:	0018      	movs	r0, r3
   2e8dc:	4b06      	ldr	r3, [pc, #24]	; (2e8f8 <WINC1500_disconnect+0x2c>)
   2e8de:	4798      	blx	r3
	n->socket=-1;
   2e8e0:	687b      	ldr	r3, [r7, #4]
   2e8e2:	2201      	movs	r2, #1
   2e8e4:	4252      	negs	r2, r2
   2e8e6:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   2e8e8:	4b04      	ldr	r3, [pc, #16]	; (2e8fc <WINC1500_disconnect+0x30>)
   2e8ea:	2200      	movs	r2, #0
   2e8ec:	701a      	strb	r2, [r3, #0]
}
   2e8ee:	46c0      	nop			; (mov r8, r8)
   2e8f0:	46bd      	mov	sp, r7
   2e8f2:	b002      	add	sp, #8
   2e8f4:	bd80      	pop	{r7, pc}
   2e8f6:	46c0      	nop			; (mov r8, r8)
   2e8f8:	00024fb9 	.word	0x00024fb9
   2e8fc:	20004189 	.word	0x20004189

0002e900 <NetworkInit>:


void NetworkInit(Network* n) {
   2e900:	b580      	push	{r7, lr}
   2e902:	b082      	sub	sp, #8
   2e904:	af00      	add	r7, sp, #0
   2e906:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   2e908:	687b      	ldr	r3, [r7, #4]
   2e90a:	2201      	movs	r2, #1
   2e90c:	4252      	negs	r2, r2
   2e90e:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   2e910:	687b      	ldr	r3, [r7, #4]
   2e912:	4a06      	ldr	r2, [pc, #24]	; (2e92c <NetworkInit+0x2c>)
   2e914:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   2e916:	687b      	ldr	r3, [r7, #4]
   2e918:	4a05      	ldr	r2, [pc, #20]	; (2e930 <NetworkInit+0x30>)
   2e91a:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   2e91c:	687b      	ldr	r3, [r7, #4]
   2e91e:	4a05      	ldr	r2, [pc, #20]	; (2e934 <NetworkInit+0x34>)
   2e920:	611a      	str	r2, [r3, #16]
}
   2e922:	46c0      	nop			; (mov r8, r8)
   2e924:	46bd      	mov	sp, r7
   2e926:	b002      	add	sp, #8
   2e928:	bd80      	pop	{r7, pc}
   2e92a:	46c0      	nop			; (mov r8, r8)
   2e92c:	0002e785 	.word	0x0002e785
   2e930:	0002e871 	.word	0x0002e871
   2e934:	0002e8cd 	.word	0x0002e8cd

0002e938 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   2e938:	b580      	push	{r7, lr}
   2e93a:	b088      	sub	sp, #32
   2e93c:	af00      	add	r7, sp, #0
   2e93e:	60f8      	str	r0, [r7, #12]
   2e940:	60b9      	str	r1, [r7, #8]
   2e942:	607a      	str	r2, [r7, #4]
   2e944:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   2e946:	4b37      	ldr	r3, [pc, #220]	; (2ea24 <ConnectNetwork+0xec>)
   2e948:	2200      	movs	r2, #0
   2e94a:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   2e94c:	4b36      	ldr	r3, [pc, #216]	; (2ea28 <ConnectNetwork+0xf0>)
   2e94e:	68ba      	ldr	r2, [r7, #8]
   2e950:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   2e952:	68bb      	ldr	r3, [r7, #8]
   2e954:	0018      	movs	r0, r3
   2e956:	4b35      	ldr	r3, [pc, #212]	; (2ea2c <ConnectNetwork+0xf4>)
   2e958:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   2e95a:	e002      	b.n	2e962 <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   2e95c:	2000      	movs	r0, #0
   2e95e:	4b34      	ldr	r3, [pc, #208]	; (2ea30 <ConnectNetwork+0xf8>)
   2e960:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   2e962:	4b30      	ldr	r3, [pc, #192]	; (2ea24 <ConnectNetwork+0xec>)
   2e964:	781b      	ldrb	r3, [r3, #0]
   2e966:	2201      	movs	r2, #1
   2e968:	4053      	eors	r3, r2
   2e96a:	b2db      	uxtb	r3, r3
   2e96c:	2b00      	cmp	r3, #0
   2e96e:	d1f5      	bne.n	2e95c <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   2e970:	4b30      	ldr	r3, [pc, #192]	; (2ea34 <ConnectNetwork+0xfc>)
   2e972:	681a      	ldr	r2, [r3, #0]
   2e974:	68fb      	ldr	r3, [r7, #12]
   2e976:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   2e978:	2310      	movs	r3, #16
   2e97a:	18fb      	adds	r3, r7, r3
   2e97c:	2202      	movs	r2, #2
   2e97e:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   2e980:	687b      	ldr	r3, [r7, #4]
   2e982:	b29b      	uxth	r3, r3
   2e984:	021b      	lsls	r3, r3, #8
   2e986:	b21a      	sxth	r2, r3
   2e988:	687b      	ldr	r3, [r7, #4]
   2e98a:	b29b      	uxth	r3, r3
   2e98c:	0a1b      	lsrs	r3, r3, #8
   2e98e:	b29b      	uxth	r3, r3
   2e990:	b21b      	sxth	r3, r3
   2e992:	4313      	orrs	r3, r2
   2e994:	b21b      	sxth	r3, r3
   2e996:	b29a      	uxth	r2, r3
   2e998:	2310      	movs	r3, #16
   2e99a:	18fb      	adds	r3, r7, r3
   2e99c:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   2e99e:	4b25      	ldr	r3, [pc, #148]	; (2ea34 <ConnectNetwork+0xfc>)
   2e9a0:	681b      	ldr	r3, [r3, #0]
   2e9a2:	001a      	movs	r2, r3
   2e9a4:	2310      	movs	r3, #16
   2e9a6:	18fb      	adds	r3, r7, r3
   2e9a8:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   2e9aa:	68fb      	ldr	r3, [r7, #12]
   2e9ac:	681b      	ldr	r3, [r3, #0]
   2e9ae:	2b00      	cmp	r3, #0
   2e9b0:	da0a      	bge.n	2e9c8 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   2e9b2:	683b      	ldr	r3, [r7, #0]
   2e9b4:	b2db      	uxtb	r3, r3
   2e9b6:	001a      	movs	r2, r3
   2e9b8:	2101      	movs	r1, #1
   2e9ba:	2002      	movs	r0, #2
   2e9bc:	4b1e      	ldr	r3, [pc, #120]	; (2ea38 <ConnectNetwork+0x100>)
   2e9be:	4798      	blx	r3
   2e9c0:	0003      	movs	r3, r0
   2e9c2:	001a      	movs	r2, r3
   2e9c4:	68fb      	ldr	r3, [r7, #12]
   2e9c6:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   2e9c8:	68fb      	ldr	r3, [r7, #12]
   2e9ca:	681b      	ldr	r3, [r3, #0]
   2e9cc:	3301      	adds	r3, #1
   2e9ce:	d108      	bne.n	2e9e2 <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   2e9d0:	68fb      	ldr	r3, [r7, #12]
   2e9d2:	681b      	ldr	r3, [r3, #0]
   2e9d4:	b25b      	sxtb	r3, r3
   2e9d6:	0018      	movs	r0, r3
   2e9d8:	4b18      	ldr	r3, [pc, #96]	; (2ea3c <ConnectNetwork+0x104>)
   2e9da:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   2e9dc:	2309      	movs	r3, #9
   2e9de:	425b      	negs	r3, r3
   2e9e0:	e01c      	b.n	2ea1c <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   2e9e2:	68fb      	ldr	r3, [r7, #12]
   2e9e4:	681b      	ldr	r3, [r3, #0]
   2e9e6:	b25b      	sxtb	r3, r3
   2e9e8:	2210      	movs	r2, #16
   2e9ea:	18b9      	adds	r1, r7, r2
   2e9ec:	2210      	movs	r2, #16
   2e9ee:	0018      	movs	r0, r3
   2e9f0:	4b13      	ldr	r3, [pc, #76]	; (2ea40 <ConnectNetwork+0x108>)
   2e9f2:	4798      	blx	r3
   2e9f4:	1e03      	subs	r3, r0, #0
   2e9f6:	d002      	beq.n	2e9fe <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   2e9f8:	2309      	movs	r3, #9
   2e9fa:	425b      	negs	r3, r3
   2e9fc:	e00e      	b.n	2ea1c <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   2e9fe:	4b11      	ldr	r3, [pc, #68]	; (2ea44 <ConnectNetwork+0x10c>)
   2ea00:	2200      	movs	r2, #0
   2ea02:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   2ea04:	e002      	b.n	2ea0c <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   2ea06:	2000      	movs	r0, #0
   2ea08:	4b09      	ldr	r3, [pc, #36]	; (2ea30 <ConnectNetwork+0xf8>)
   2ea0a:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   2ea0c:	4b0d      	ldr	r3, [pc, #52]	; (2ea44 <ConnectNetwork+0x10c>)
   2ea0e:	781b      	ldrb	r3, [r3, #0]
   2ea10:	2201      	movs	r2, #1
   2ea12:	4053      	eors	r3, r2
   2ea14:	b2db      	uxtb	r3, r3
   2ea16:	2b00      	cmp	r3, #0
   2ea18:	d1f5      	bne.n	2ea06 <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   2ea1a:	2300      	movs	r3, #0
   2ea1c:	0018      	movs	r0, r3
   2ea1e:	46bd      	mov	sp, r7
   2ea20:	b008      	add	sp, #32
   2ea22:	bd80      	pop	{r7, pc}
   2ea24:	20004188 	.word	0x20004188
   2ea28:	20004294 	.word	0x20004294
   2ea2c:	00025201 	.word	0x00025201
   2ea30:	00021381 	.word	0x00021381
   2ea34:	20004180 	.word	0x20004180
   2ea38:	000249ad 	.word	0x000249ad
   2ea3c:	00024fb9 	.word	0x00024fb9
   2ea40:	00024bc1 	.word	0x00024bc1
   2ea44:	20004189 	.word	0x20004189

0002ea48 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   2ea48:	b580      	push	{r7, lr}
   2ea4a:	b084      	sub	sp, #16
   2ea4c:	af00      	add	r7, sp, #0
   2ea4e:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   2ea50:	687b      	ldr	r3, [r7, #4]
   2ea52:	2b00      	cmp	r3, #0
   2ea54:	d022      	beq.n	2ea9c <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2ea56:	2300      	movs	r3, #0
   2ea58:	60fb      	str	r3, [r7, #12]
   2ea5a:	e01b      	b.n	2ea94 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   2ea5c:	4a11      	ldr	r2, [pc, #68]	; (2eaa4 <allocateClient+0x5c>)
   2ea5e:	68fb      	ldr	r3, [r7, #12]
   2ea60:	2164      	movs	r1, #100	; 0x64
   2ea62:	434b      	muls	r3, r1
   2ea64:	18d3      	adds	r3, r2, r3
   2ea66:	3360      	adds	r3, #96	; 0x60
   2ea68:	681b      	ldr	r3, [r3, #0]
   2ea6a:	2b00      	cmp	r3, #0
   2ea6c:	d10f      	bne.n	2ea8e <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   2ea6e:	4a0d      	ldr	r2, [pc, #52]	; (2eaa4 <allocateClient+0x5c>)
   2ea70:	68fb      	ldr	r3, [r7, #12]
   2ea72:	2164      	movs	r1, #100	; 0x64
   2ea74:	434b      	muls	r3, r1
   2ea76:	18d3      	adds	r3, r2, r3
   2ea78:	3360      	adds	r3, #96	; 0x60
   2ea7a:	687a      	ldr	r2, [r7, #4]
   2ea7c:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   2ea7e:	68fb      	ldr	r3, [r7, #12]
   2ea80:	2264      	movs	r2, #100	; 0x64
   2ea82:	435a      	muls	r2, r3
   2ea84:	4b07      	ldr	r3, [pc, #28]	; (2eaa4 <allocateClient+0x5c>)
   2ea86:	18d2      	adds	r2, r2, r3
   2ea88:	687b      	ldr	r3, [r7, #4]
   2ea8a:	61da      	str	r2, [r3, #28]
			return;
   2ea8c:	e007      	b.n	2ea9e <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2ea8e:	68fb      	ldr	r3, [r7, #12]
   2ea90:	3301      	adds	r3, #1
   2ea92:	60fb      	str	r3, [r7, #12]
   2ea94:	68fb      	ldr	r3, [r7, #12]
   2ea96:	2b06      	cmp	r3, #6
   2ea98:	d9e0      	bls.n	2ea5c <allocateClient+0x14>
   2ea9a:	e000      	b.n	2ea9e <allocateClient+0x56>
		return;
   2ea9c:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   2ea9e:	46bd      	mov	sp, r7
   2eaa0:	b004      	add	sp, #16
   2eaa2:	bd80      	pop	{r7, pc}
   2eaa4:	20004298 	.word	0x20004298

0002eaa8 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   2eaa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2eaaa:	b089      	sub	sp, #36	; 0x24
   2eaac:	af04      	add	r7, sp, #16
   2eaae:	6078      	str	r0, [r7, #4]
   2eab0:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   2eab2:	687b      	ldr	r3, [r7, #4]
   2eab4:	2b00      	cmp	r3, #0
   2eab6:	d00a      	beq.n	2eace <mqtt_init+0x26>
   2eab8:	683b      	ldr	r3, [r7, #0]
   2eaba:	2b00      	cmp	r3, #0
   2eabc:	d007      	beq.n	2eace <mqtt_init+0x26>
   2eabe:	683b      	ldr	r3, [r7, #0]
   2eac0:	691b      	ldr	r3, [r3, #16]
   2eac2:	2b00      	cmp	r3, #0
   2eac4:	d003      	beq.n	2eace <mqtt_init+0x26>
   2eac6:	683b      	ldr	r3, [r7, #0]
   2eac8:	689b      	ldr	r3, [r3, #8]
   2eaca:	2b00      	cmp	r3, #0
   2eacc:	d102      	bne.n	2ead4 <mqtt_init+0x2c>
		return FAILURE;
   2eace:	2301      	movs	r3, #1
   2ead0:	425b      	negs	r3, r3
   2ead2:	e034      	b.n	2eb3e <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   2ead4:	683b      	ldr	r3, [r7, #0]
   2ead6:	889b      	ldrh	r3, [r3, #4]
   2ead8:	001a      	movs	r2, r3
   2eada:	23fa      	movs	r3, #250	; 0xfa
   2eadc:	009b      	lsls	r3, r3, #2
   2eade:	4353      	muls	r3, r2
   2eae0:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   2eae2:	687b      	ldr	r3, [r7, #4]
   2eae4:	3320      	adds	r3, #32
   2eae6:	0018      	movs	r0, r3
   2eae8:	4b17      	ldr	r3, [pc, #92]	; (2eb48 <mqtt_init+0xa0>)
   2eaea:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   2eaec:	687b      	ldr	r3, [r7, #4]
   2eaee:	3304      	adds	r3, #4
   2eaf0:	6839      	ldr	r1, [r7, #0]
   2eaf2:	2218      	movs	r2, #24
   2eaf4:	0018      	movs	r0, r3
   2eaf6:	4b15      	ldr	r3, [pc, #84]	; (2eb4c <mqtt_init+0xa4>)
   2eaf8:	4798      	blx	r3
	allocateClient(module);
   2eafa:	687b      	ldr	r3, [r7, #4]
   2eafc:	0018      	movs	r0, r3
   2eafe:	4b14      	ldr	r3, [pc, #80]	; (2eb50 <mqtt_init+0xa8>)
   2eb00:	4798      	blx	r3
	
	if(module->client)
   2eb02:	687b      	ldr	r3, [r7, #4]
   2eb04:	69db      	ldr	r3, [r3, #28]
   2eb06:	2b00      	cmp	r3, #0
   2eb08:	d017      	beq.n	2eb3a <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   2eb0a:	687b      	ldr	r3, [r7, #4]
   2eb0c:	69d8      	ldr	r0, [r3, #28]
   2eb0e:	687b      	ldr	r3, [r7, #4]
   2eb10:	3320      	adds	r3, #32
   2eb12:	001c      	movs	r4, r3
   2eb14:	683b      	ldr	r3, [r7, #0]
   2eb16:	691e      	ldr	r6, [r3, #16]
   2eb18:	683b      	ldr	r3, [r7, #0]
   2eb1a:	695a      	ldr	r2, [r3, #20]
   2eb1c:	683b      	ldr	r3, [r7, #0]
   2eb1e:	6899      	ldr	r1, [r3, #8]
   2eb20:	683b      	ldr	r3, [r7, #0]
   2eb22:	68db      	ldr	r3, [r3, #12]
   2eb24:	68fd      	ldr	r5, [r7, #12]
   2eb26:	9302      	str	r3, [sp, #8]
   2eb28:	9101      	str	r1, [sp, #4]
   2eb2a:	9200      	str	r2, [sp, #0]
   2eb2c:	0033      	movs	r3, r6
   2eb2e:	002a      	movs	r2, r5
   2eb30:	0021      	movs	r1, r4
   2eb32:	4c08      	ldr	r4, [pc, #32]	; (2eb54 <mqtt_init+0xac>)
   2eb34:	47a0      	blx	r4
		return SUCCESS;
   2eb36:	2300      	movs	r3, #0
   2eb38:	e001      	b.n	2eb3e <mqtt_init+0x96>
	}
	else
		return FAILURE;
   2eb3a:	2301      	movs	r3, #1
   2eb3c:	425b      	negs	r3, r3
}
   2eb3e:	0018      	movs	r0, r3
   2eb40:	46bd      	mov	sp, r7
   2eb42:	b005      	add	sp, #20
   2eb44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2eb46:	46c0      	nop			; (mov r8, r8)
   2eb48:	0002e901 	.word	0x0002e901
   2eb4c:	000342e5 	.word	0x000342e5
   2eb50:	0002ea49 	.word	0x0002ea49
   2eb54:	0002d979 	.word	0x0002d979

0002eb58 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   2eb58:	b580      	push	{r7, lr}
   2eb5a:	b082      	sub	sp, #8
   2eb5c:	af00      	add	r7, sp, #0
   2eb5e:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   2eb60:	687b      	ldr	r3, [r7, #4]
   2eb62:	4a0c      	ldr	r2, [pc, #48]	; (2eb94 <mqtt_get_config_defaults+0x3c>)
   2eb64:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2eb66:	687b      	ldr	r3, [r7, #4]
   2eb68:	2200      	movs	r2, #0
   2eb6a:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   2eb6c:	687b      	ldr	r3, [r7, #4]
   2eb6e:	223c      	movs	r2, #60	; 0x3c
   2eb70:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   2eb72:	687b      	ldr	r3, [r7, #4]
   2eb74:	2200      	movs	r2, #0
   2eb76:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   2eb78:	687b      	ldr	r3, [r7, #4]
   2eb7a:	2200      	movs	r2, #0
   2eb7c:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   2eb7e:	687b      	ldr	r3, [r7, #4]
   2eb80:	2200      	movs	r2, #0
   2eb82:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   2eb84:	687b      	ldr	r3, [r7, #4]
   2eb86:	2200      	movs	r2, #0
   2eb88:	615a      	str	r2, [r3, #20]
}
   2eb8a:	46c0      	nop			; (mov r8, r8)
   2eb8c:	46bd      	mov	sp, r7
   2eb8e:	b002      	add	sp, #8
   2eb90:	bd80      	pop	{r7, pc}
   2eb92:	46c0      	nop			; (mov r8, r8)
   2eb94:	0000075b 	.word	0x0000075b

0002eb98 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   2eb98:	b580      	push	{r7, lr}
   2eb9a:	b082      	sub	sp, #8
   2eb9c:	af00      	add	r7, sp, #0
   2eb9e:	6078      	str	r0, [r7, #4]
   2eba0:	6039      	str	r1, [r7, #0]
	if(module)
   2eba2:	687b      	ldr	r3, [r7, #4]
   2eba4:	2b00      	cmp	r3, #0
   2eba6:	d004      	beq.n	2ebb2 <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   2eba8:	687b      	ldr	r3, [r7, #4]
   2ebaa:	683a      	ldr	r2, [r7, #0]
   2ebac:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   2ebae:	2300      	movs	r3, #0
   2ebb0:	e001      	b.n	2ebb6 <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   2ebb2:	2301      	movs	r3, #1
   2ebb4:	425b      	negs	r3, r3
}
   2ebb6:	0018      	movs	r0, r3
   2ebb8:	46bd      	mov	sp, r7
   2ebba:	b002      	add	sp, #8
   2ebbc:	bd80      	pop	{r7, pc}
	...

0002ebc0 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2ebc0:	b580      	push	{r7, lr}
   2ebc2:	b082      	sub	sp, #8
   2ebc4:	af00      	add	r7, sp, #0
   2ebc6:	603a      	str	r2, [r7, #0]
   2ebc8:	1dfb      	adds	r3, r7, #7
   2ebca:	1c02      	adds	r2, r0, #0
   2ebcc:	701a      	strb	r2, [r3, #0]
   2ebce:	1dbb      	adds	r3, r7, #6
   2ebd0:	1c0a      	adds	r2, r1, #0
   2ebd2:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   2ebd4:	683a      	ldr	r2, [r7, #0]
   2ebd6:	1dbb      	adds	r3, r7, #6
   2ebd8:	7819      	ldrb	r1, [r3, #0]
   2ebda:	1dfb      	adds	r3, r7, #7
   2ebdc:	781b      	ldrb	r3, [r3, #0]
   2ebde:	b25b      	sxtb	r3, r3
   2ebe0:	0018      	movs	r0, r3
   2ebe2:	4b03      	ldr	r3, [pc, #12]	; (2ebf0 <mqtt_socket_event_handler+0x30>)
   2ebe4:	4798      	blx	r3
}
   2ebe6:	46c0      	nop			; (mov r8, r8)
   2ebe8:	46bd      	mov	sp, r7
   2ebea:	b002      	add	sp, #8
   2ebec:	bd80      	pop	{r7, pc}
   2ebee:	46c0      	nop			; (mov r8, r8)
   2ebf0:	0002e63d 	.word	0x0002e63d

0002ebf4 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   2ebf4:	b580      	push	{r7, lr}
   2ebf6:	b082      	sub	sp, #8
   2ebf8:	af00      	add	r7, sp, #0
   2ebfa:	6078      	str	r0, [r7, #4]
   2ebfc:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   2ebfe:	683a      	ldr	r2, [r7, #0]
   2ec00:	687b      	ldr	r3, [r7, #4]
   2ec02:	0011      	movs	r1, r2
   2ec04:	0018      	movs	r0, r3
   2ec06:	4b03      	ldr	r3, [pc, #12]	; (2ec14 <mqtt_socket_resolve_handler+0x20>)
   2ec08:	4798      	blx	r3
}
   2ec0a:	46c0      	nop			; (mov r8, r8)
   2ec0c:	46bd      	mov	sp, r7
   2ec0e:	b002      	add	sp, #8
   2ec10:	bd80      	pop	{r7, pc}
   2ec12:	46c0      	nop			; (mov r8, r8)
   2ec14:	0002e5ed 	.word	0x0002e5ed

0002ec18 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   2ec18:	b590      	push	{r4, r7, lr}
   2ec1a:	b085      	sub	sp, #20
   2ec1c:	af00      	add	r7, sp, #0
   2ec1e:	6078      	str	r0, [r7, #4]
   2ec20:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   2ec22:	687b      	ldr	r3, [r7, #4]
   2ec24:	3320      	adds	r3, #32
   2ec26:	0018      	movs	r0, r3
   2ec28:	687b      	ldr	r3, [r7, #4]
   2ec2a:	889b      	ldrh	r3, [r3, #4]
   2ec2c:	001a      	movs	r2, r3
   2ec2e:	687b      	ldr	r3, [r7, #4]
   2ec30:	799b      	ldrb	r3, [r3, #6]
   2ec32:	6839      	ldr	r1, [r7, #0]
   2ec34:	4c09      	ldr	r4, [pc, #36]	; (2ec5c <mqtt_connect+0x44>)
   2ec36:	47a0      	blx	r4
   2ec38:	0003      	movs	r3, r0
   2ec3a:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   2ec3c:	687b      	ldr	r3, [r7, #4]
   2ec3e:	681b      	ldr	r3, [r3, #0]
   2ec40:	2b00      	cmp	r3, #0
   2ec42:	d006      	beq.n	2ec52 <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   2ec44:	687b      	ldr	r3, [r7, #4]
   2ec46:	681b      	ldr	r3, [r3, #0]
   2ec48:	220c      	movs	r2, #12
   2ec4a:	18ba      	adds	r2, r7, r2
   2ec4c:	6878      	ldr	r0, [r7, #4]
   2ec4e:	2100      	movs	r1, #0
   2ec50:	4798      	blx	r3
	return connResult.sock_connected.result;
   2ec52:	68fb      	ldr	r3, [r7, #12]
}
   2ec54:	0018      	movs	r0, r3
   2ec56:	46bd      	mov	sp, r7
   2ec58:	b005      	add	sp, #20
   2ec5a:	bd90      	pop	{r4, r7, pc}
   2ec5c:	0002e939 	.word	0x0002e939

0002ec60 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   2ec60:	b580      	push	{r7, lr}
   2ec62:	b09c      	sub	sp, #112	; 0x70
   2ec64:	af00      	add	r7, sp, #0
   2ec66:	60f8      	str	r0, [r7, #12]
   2ec68:	607a      	str	r2, [r7, #4]
   2ec6a:	603b      	str	r3, [r7, #0]
   2ec6c:	230b      	movs	r3, #11
   2ec6e:	18fb      	adds	r3, r7, r3
   2ec70:	1c0a      	adds	r2, r1, #0
   2ec72:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   2ec74:	2310      	movs	r3, #16
   2ec76:	18fa      	adds	r2, r7, r3
   2ec78:	4b31      	ldr	r3, [pc, #196]	; (2ed40 <mqtt_connect_broker+0xe0>)
   2ec7a:	0010      	movs	r0, r2
   2ec7c:	0019      	movs	r1, r3
   2ec7e:	2358      	movs	r3, #88	; 0x58
   2ec80:	001a      	movs	r2, r3
   2ec82:	4b30      	ldr	r3, [pc, #192]	; (2ed44 <mqtt_connect_broker+0xe4>)
   2ec84:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   2ec86:	2310      	movs	r3, #16
   2ec88:	18fb      	adds	r3, r7, r3
   2ec8a:	2204      	movs	r2, #4
   2ec8c:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   2ec8e:	2310      	movs	r3, #16
   2ec90:	18fb      	adds	r3, r7, r3
   2ec92:	6fba      	ldr	r2, [r7, #120]	; 0x78
   2ec94:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   2ec96:	2310      	movs	r3, #16
   2ec98:	18fb      	adds	r3, r7, r3
   2ec9a:	687a      	ldr	r2, [r7, #4]
   2ec9c:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   2ec9e:	2310      	movs	r3, #16
   2eca0:	18fb      	adds	r3, r7, r3
   2eca2:	683a      	ldr	r2, [r7, #0]
   2eca4:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   2eca6:	2310      	movs	r3, #16
   2eca8:	18fb      	adds	r3, r7, r3
   2ecaa:	220b      	movs	r2, #11
   2ecac:	18ba      	adds	r2, r7, r2
   2ecae:	7812      	ldrb	r2, [r2, #0]
   2ecb0:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   2ecb2:	2310      	movs	r3, #16
   2ecb4:	18fb      	adds	r3, r7, r3
   2ecb6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2ecb8:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   2ecba:	2310      	movs	r3, #16
   2ecbc:	18fb      	adds	r3, r7, r3
   2ecbe:	2280      	movs	r2, #128	; 0x80
   2ecc0:	18ba      	adds	r2, r7, r2
   2ecc2:	6812      	ldr	r2, [r2, #0]
   2ecc4:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   2ecc6:	2310      	movs	r3, #16
   2ecc8:	18fb      	adds	r3, r7, r3
   2ecca:	228c      	movs	r2, #140	; 0x8c
   2eccc:	18ba      	adds	r2, r7, r2
   2ecce:	213c      	movs	r1, #60	; 0x3c
   2ecd0:	7812      	ldrb	r2, [r2, #0]
   2ecd2:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   2ecd4:	2310      	movs	r3, #16
   2ecd6:	18fb      	adds	r3, r7, r3
   2ecd8:	2288      	movs	r2, #136	; 0x88
   2ecda:	18ba      	adds	r2, r7, r2
   2ecdc:	213d      	movs	r1, #61	; 0x3d
   2ecde:	7812      	ldrb	r2, [r2, #0]
   2ece0:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   2ece2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   2ece4:	2b00      	cmp	r3, #0
   2ece6:	d008      	beq.n	2ecfa <mqtt_connect_broker+0x9a>
   2ece8:	2380      	movs	r3, #128	; 0x80
   2ecea:	18fb      	adds	r3, r7, r3
   2ecec:	681b      	ldr	r3, [r3, #0]
   2ecee:	2b00      	cmp	r3, #0
   2ecf0:	d003      	beq.n	2ecfa <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   2ecf2:	2310      	movs	r3, #16
   2ecf4:	18fb      	adds	r3, r7, r3
   2ecf6:	2201      	movs	r2, #1
   2ecf8:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   2ecfa:	68fb      	ldr	r3, [r7, #12]
   2ecfc:	69db      	ldr	r3, [r3, #28]
   2ecfe:	2210      	movs	r2, #16
   2ed00:	18ba      	adds	r2, r7, r2
   2ed02:	0011      	movs	r1, r2
   2ed04:	0018      	movs	r0, r3
   2ed06:	4b10      	ldr	r3, [pc, #64]	; (2ed48 <mqtt_connect_broker+0xe8>)
   2ed08:	4798      	blx	r3
   2ed0a:	0003      	movs	r3, r0
   2ed0c:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   2ed0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2ed10:	b2da      	uxtb	r2, r3
   2ed12:	2368      	movs	r3, #104	; 0x68
   2ed14:	18fb      	adds	r3, r7, r3
   2ed16:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   2ed18:	68fb      	ldr	r3, [r7, #12]
   2ed1a:	681b      	ldr	r3, [r3, #0]
   2ed1c:	2b00      	cmp	r3, #0
   2ed1e:	d006      	beq.n	2ed2e <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   2ed20:	68fb      	ldr	r3, [r7, #12]
   2ed22:	681b      	ldr	r3, [r3, #0]
   2ed24:	2268      	movs	r2, #104	; 0x68
   2ed26:	18ba      	adds	r2, r7, r2
   2ed28:	68f8      	ldr	r0, [r7, #12]
   2ed2a:	2101      	movs	r1, #1
   2ed2c:	4798      	blx	r3
	
	module->isConnected = true;
   2ed2e:	68fb      	ldr	r3, [r7, #12]
   2ed30:	2234      	movs	r2, #52	; 0x34
   2ed32:	2101      	movs	r1, #1
   2ed34:	5499      	strb	r1, [r3, r2]
	return rc;
   2ed36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   2ed38:	0018      	movs	r0, r3
   2ed3a:	46bd      	mov	sp, r7
   2ed3c:	b01c      	add	sp, #112	; 0x70
   2ed3e:	bd80      	pop	{r7, pc}
   2ed40:	000392a4 	.word	0x000392a4
   2ed44:	000342e5 	.word	0x000342e5
   2ed48:	0002e089 	.word	0x0002e089

0002ed4c <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   2ed4c:	b580      	push	{r7, lr}
   2ed4e:	b084      	sub	sp, #16
   2ed50:	af00      	add	r7, sp, #0
   2ed52:	6078      	str	r0, [r7, #4]
   2ed54:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   2ed56:	687b      	ldr	r3, [r7, #4]
   2ed58:	69db      	ldr	r3, [r3, #28]
   2ed5a:	0018      	movs	r0, r3
   2ed5c:	4b0c      	ldr	r3, [pc, #48]	; (2ed90 <mqtt_disconnect+0x44>)
   2ed5e:	4798      	blx	r3
   2ed60:	0003      	movs	r3, r0
   2ed62:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   2ed64:	68fb      	ldr	r3, [r7, #12]
   2ed66:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   2ed68:	687b      	ldr	r3, [r7, #4]
   2ed6a:	681b      	ldr	r3, [r3, #0]
   2ed6c:	2b00      	cmp	r3, #0
   2ed6e:	d006      	beq.n	2ed7e <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   2ed70:	687b      	ldr	r3, [r7, #4]
   2ed72:	681b      	ldr	r3, [r3, #0]
   2ed74:	2208      	movs	r2, #8
   2ed76:	18ba      	adds	r2, r7, r2
   2ed78:	6878      	ldr	r0, [r7, #4]
   2ed7a:	2105      	movs	r1, #5
   2ed7c:	4798      	blx	r3
	
	module->isConnected = false;
   2ed7e:	687b      	ldr	r3, [r7, #4]
   2ed80:	2234      	movs	r2, #52	; 0x34
   2ed82:	2100      	movs	r1, #0
   2ed84:	5499      	strb	r1, [r3, r2]
	return rc;
   2ed86:	68fb      	ldr	r3, [r7, #12]
}
   2ed88:	0018      	movs	r0, r3
   2ed8a:	46bd      	mov	sp, r7
   2ed8c:	b004      	add	sp, #16
   2ed8e:	bd80      	pop	{r7, pc}
   2ed90:	0002e515 	.word	0x0002e515

0002ed94 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   2ed94:	b580      	push	{r7, lr}
   2ed96:	b08a      	sub	sp, #40	; 0x28
   2ed98:	af00      	add	r7, sp, #0
   2ed9a:	60f8      	str	r0, [r7, #12]
   2ed9c:	60b9      	str	r1, [r7, #8]
   2ed9e:	607a      	str	r2, [r7, #4]
   2eda0:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   2eda2:	2314      	movs	r3, #20
   2eda4:	18fb      	adds	r3, r7, r3
   2eda6:	2230      	movs	r2, #48	; 0x30
   2eda8:	18ba      	adds	r2, r7, r2
   2edaa:	7812      	ldrb	r2, [r2, #0]
   2edac:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   2edae:	2314      	movs	r3, #20
   2edb0:	18fb      	adds	r3, r7, r3
   2edb2:	687a      	ldr	r2, [r7, #4]
   2edb4:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   2edb6:	2314      	movs	r3, #20
   2edb8:	18fb      	adds	r3, r7, r3
   2edba:	683a      	ldr	r2, [r7, #0]
   2edbc:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   2edbe:	2314      	movs	r3, #20
   2edc0:	18fb      	adds	r3, r7, r3
   2edc2:	2234      	movs	r2, #52	; 0x34
   2edc4:	18ba      	adds	r2, r7, r2
   2edc6:	7812      	ldrb	r2, [r2, #0]
   2edc8:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   2edca:	68fb      	ldr	r3, [r7, #12]
   2edcc:	69db      	ldr	r3, [r3, #28]
   2edce:	2214      	movs	r2, #20
   2edd0:	18ba      	adds	r2, r7, r2
   2edd2:	68b9      	ldr	r1, [r7, #8]
   2edd4:	0018      	movs	r0, r3
   2edd6:	4b09      	ldr	r3, [pc, #36]	; (2edfc <mqtt_publish+0x68>)
   2edd8:	4798      	blx	r3
   2edda:	0003      	movs	r3, r0
   2eddc:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   2edde:	68fb      	ldr	r3, [r7, #12]
   2ede0:	681b      	ldr	r3, [r3, #0]
   2ede2:	2b00      	cmp	r3, #0
   2ede4:	d005      	beq.n	2edf2 <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   2ede6:	68fb      	ldr	r3, [r7, #12]
   2ede8:	681b      	ldr	r3, [r3, #0]
   2edea:	68f8      	ldr	r0, [r7, #12]
   2edec:	2200      	movs	r2, #0
   2edee:	2102      	movs	r1, #2
   2edf0:	4798      	blx	r3
	
	return rc;
   2edf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2edf4:	0018      	movs	r0, r3
   2edf6:	46bd      	mov	sp, r7
   2edf8:	b00a      	add	sp, #40	; 0x28
   2edfa:	bd80      	pop	{r7, pc}
   2edfc:	0002e355 	.word	0x0002e355

0002ee00 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   2ee00:	b590      	push	{r4, r7, lr}
   2ee02:	b087      	sub	sp, #28
   2ee04:	af00      	add	r7, sp, #0
   2ee06:	60f8      	str	r0, [r7, #12]
   2ee08:	60b9      	str	r1, [r7, #8]
   2ee0a:	603b      	str	r3, [r7, #0]
   2ee0c:	1dfb      	adds	r3, r7, #7
   2ee0e:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   2ee10:	68fb      	ldr	r3, [r7, #12]
   2ee12:	69d8      	ldr	r0, [r3, #28]
   2ee14:	683c      	ldr	r4, [r7, #0]
   2ee16:	1dfb      	adds	r3, r7, #7
   2ee18:	781a      	ldrb	r2, [r3, #0]
   2ee1a:	68b9      	ldr	r1, [r7, #8]
   2ee1c:	0023      	movs	r3, r4
   2ee1e:	4c09      	ldr	r4, [pc, #36]	; (2ee44 <mqtt_subscribe+0x44>)
   2ee20:	47a0      	blx	r4
   2ee22:	0003      	movs	r3, r0
   2ee24:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   2ee26:	68fb      	ldr	r3, [r7, #12]
   2ee28:	681b      	ldr	r3, [r3, #0]
   2ee2a:	2b00      	cmp	r3, #0
   2ee2c:	d005      	beq.n	2ee3a <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   2ee2e:	68fb      	ldr	r3, [r7, #12]
   2ee30:	681b      	ldr	r3, [r3, #0]
   2ee32:	68f8      	ldr	r0, [r7, #12]
   2ee34:	2200      	movs	r2, #0
   2ee36:	2103      	movs	r1, #3
   2ee38:	4798      	blx	r3
	
	return rc;
   2ee3a:	697b      	ldr	r3, [r7, #20]
}
   2ee3c:	0018      	movs	r0, r3
   2ee3e:	46bd      	mov	sp, r7
   2ee40:	b007      	add	sp, #28
   2ee42:	bd90      	pop	{r4, r7, pc}
   2ee44:	0002e1c9 	.word	0x0002e1c9

0002ee48 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   2ee48:	b580      	push	{r7, lr}
   2ee4a:	b082      	sub	sp, #8
   2ee4c:	af00      	add	r7, sp, #0
   2ee4e:	6078      	str	r0, [r7, #4]
   2ee50:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   2ee52:	687b      	ldr	r3, [r7, #4]
   2ee54:	69db      	ldr	r3, [r3, #28]
   2ee56:	683a      	ldr	r2, [r7, #0]
   2ee58:	0011      	movs	r1, r2
   2ee5a:	0018      	movs	r0, r3
   2ee5c:	4b03      	ldr	r3, [pc, #12]	; (2ee6c <mqtt_yield+0x24>)
   2ee5e:	4798      	blx	r3
   2ee60:	0003      	movs	r3, r0
   2ee62:	0018      	movs	r0, r3
   2ee64:	46bd      	mov	sp, r7
   2ee66:	b002      	add	sp, #8
   2ee68:	bd80      	pop	{r7, pc}
   2ee6a:	46c0      	nop			; (mov r8, r8)
   2ee6c:	0002dfd1 	.word	0x0002dfd1

0002ee70 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   2ee70:	b590      	push	{r4, r7, lr}
   2ee72:	b085      	sub	sp, #20
   2ee74:	af00      	add	r7, sp, #0
   2ee76:	6078      	str	r0, [r7, #4]
	int len = 0;
   2ee78:	2300      	movs	r3, #0
   2ee7a:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   2ee7c:	687b      	ldr	r3, [r7, #4]
   2ee7e:	7a1b      	ldrb	r3, [r3, #8]
   2ee80:	2b03      	cmp	r3, #3
   2ee82:	d102      	bne.n	2ee8a <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   2ee84:	230c      	movs	r3, #12
   2ee86:	60fb      	str	r3, [r7, #12]
   2ee88:	e005      	b.n	2ee96 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   2ee8a:	687b      	ldr	r3, [r7, #4]
   2ee8c:	7a1b      	ldrb	r3, [r3, #8]
   2ee8e:	2b04      	cmp	r3, #4
   2ee90:	d101      	bne.n	2ee96 <MQTTSerialize_connectLength+0x26>
		len = 10;
   2ee92:	230a      	movs	r3, #10
   2ee94:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   2ee96:	687b      	ldr	r3, [r7, #4]
   2ee98:	68d8      	ldr	r0, [r3, #12]
   2ee9a:	6919      	ldr	r1, [r3, #16]
   2ee9c:	695a      	ldr	r2, [r3, #20]
   2ee9e:	4b25      	ldr	r3, [pc, #148]	; (2ef34 <MQTTSerialize_connectLength+0xc4>)
   2eea0:	4798      	blx	r3
   2eea2:	0003      	movs	r3, r0
   2eea4:	3302      	adds	r3, #2
   2eea6:	68fa      	ldr	r2, [r7, #12]
   2eea8:	18d3      	adds	r3, r2, r3
   2eeaa:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   2eeac:	687b      	ldr	r3, [r7, #4]
   2eeae:	7edb      	ldrb	r3, [r3, #27]
   2eeb0:	2b00      	cmp	r3, #0
   2eeb2:	d013      	beq.n	2eedc <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   2eeb4:	687b      	ldr	r3, [r7, #4]
   2eeb6:	6a58      	ldr	r0, [r3, #36]	; 0x24
   2eeb8:	6a99      	ldr	r1, [r3, #40]	; 0x28
   2eeba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2eebc:	4b1d      	ldr	r3, [pc, #116]	; (2ef34 <MQTTSerialize_connectLength+0xc4>)
   2eebe:	4798      	blx	r3
   2eec0:	0003      	movs	r3, r0
   2eec2:	1c9c      	adds	r4, r3, #2
   2eec4:	687b      	ldr	r3, [r7, #4]
   2eec6:	6b18      	ldr	r0, [r3, #48]	; 0x30
   2eec8:	6b59      	ldr	r1, [r3, #52]	; 0x34
   2eeca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2eecc:	4b19      	ldr	r3, [pc, #100]	; (2ef34 <MQTTSerialize_connectLength+0xc4>)
   2eece:	4798      	blx	r3
   2eed0:	0003      	movs	r3, r0
   2eed2:	18e3      	adds	r3, r4, r3
   2eed4:	3302      	adds	r3, #2
   2eed6:	68fa      	ldr	r2, [r7, #12]
   2eed8:	18d3      	adds	r3, r2, r3
   2eeda:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   2eedc:	687b      	ldr	r3, [r7, #4]
   2eede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2eee0:	2b00      	cmp	r3, #0
   2eee2:	d103      	bne.n	2eeec <MQTTSerialize_connectLength+0x7c>
   2eee4:	687b      	ldr	r3, [r7, #4]
   2eee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2eee8:	2b00      	cmp	r3, #0
   2eeea:	d00a      	beq.n	2ef02 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   2eeec:	687b      	ldr	r3, [r7, #4]
   2eeee:	6c18      	ldr	r0, [r3, #64]	; 0x40
   2eef0:	6c59      	ldr	r1, [r3, #68]	; 0x44
   2eef2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   2eef4:	4b0f      	ldr	r3, [pc, #60]	; (2ef34 <MQTTSerialize_connectLength+0xc4>)
   2eef6:	4798      	blx	r3
   2eef8:	0003      	movs	r3, r0
   2eefa:	3302      	adds	r3, #2
   2eefc:	68fa      	ldr	r2, [r7, #12]
   2eefe:	18d3      	adds	r3, r2, r3
   2ef00:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   2ef02:	687b      	ldr	r3, [r7, #4]
   2ef04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2ef06:	2b00      	cmp	r3, #0
   2ef08:	d103      	bne.n	2ef12 <MQTTSerialize_connectLength+0xa2>
   2ef0a:	687b      	ldr	r3, [r7, #4]
   2ef0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2ef0e:	2b00      	cmp	r3, #0
   2ef10:	d00a      	beq.n	2ef28 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   2ef12:	687b      	ldr	r3, [r7, #4]
   2ef14:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   2ef16:	6d19      	ldr	r1, [r3, #80]	; 0x50
   2ef18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2ef1a:	4b06      	ldr	r3, [pc, #24]	; (2ef34 <MQTTSerialize_connectLength+0xc4>)
   2ef1c:	4798      	blx	r3
   2ef1e:	0003      	movs	r3, r0
   2ef20:	3302      	adds	r3, #2
   2ef22:	68fa      	ldr	r2, [r7, #12]
   2ef24:	18d3      	adds	r3, r2, r3
   2ef26:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   2ef28:	68fb      	ldr	r3, [r7, #12]
}
   2ef2a:	0018      	movs	r0, r3
   2ef2c:	46bd      	mov	sp, r7
   2ef2e:	b005      	add	sp, #20
   2ef30:	bd90      	pop	{r4, r7, pc}
   2ef32:	46c0      	nop			; (mov r8, r8)
   2ef34:	0002f8e1 	.word	0x0002f8e1

0002ef38 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   2ef38:	b590      	push	{r4, r7, lr}
   2ef3a:	b08b      	sub	sp, #44	; 0x2c
   2ef3c:	af00      	add	r7, sp, #0
   2ef3e:	60f8      	str	r0, [r7, #12]
   2ef40:	60b9      	str	r1, [r7, #8]
   2ef42:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   2ef44:	68fb      	ldr	r3, [r7, #12]
   2ef46:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   2ef48:	2300      	movs	r3, #0
   2ef4a:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   2ef4c:	2300      	movs	r3, #0
   2ef4e:	617b      	str	r3, [r7, #20]
	int len = 0;
   2ef50:	2300      	movs	r3, #0
   2ef52:	623b      	str	r3, [r7, #32]
	int rc = -1;
   2ef54:	2301      	movs	r3, #1
   2ef56:	425b      	negs	r3, r3
   2ef58:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   2ef5a:	687b      	ldr	r3, [r7, #4]
   2ef5c:	0018      	movs	r0, r3
   2ef5e:	4b8c      	ldr	r3, [pc, #560]	; (2f190 <MQTTSerialize_connect+0x258>)
   2ef60:	4798      	blx	r3
   2ef62:	0003      	movs	r3, r0
   2ef64:	623b      	str	r3, [r7, #32]
   2ef66:	6a3b      	ldr	r3, [r7, #32]
   2ef68:	0018      	movs	r0, r3
   2ef6a:	4b8a      	ldr	r3, [pc, #552]	; (2f194 <MQTTSerialize_connect+0x25c>)
   2ef6c:	4798      	blx	r3
   2ef6e:	0002      	movs	r2, r0
   2ef70:	68bb      	ldr	r3, [r7, #8]
   2ef72:	429a      	cmp	r2, r3
   2ef74:	dd03      	ble.n	2ef7e <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2ef76:	2302      	movs	r3, #2
   2ef78:	425b      	negs	r3, r3
   2ef7a:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   2ef7c:	e103      	b.n	2f186 <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   2ef7e:	2318      	movs	r3, #24
   2ef80:	18fb      	adds	r3, r7, r3
   2ef82:	2200      	movs	r2, #0
   2ef84:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   2ef86:	2318      	movs	r3, #24
   2ef88:	18fb      	adds	r3, r7, r3
   2ef8a:	781a      	ldrb	r2, [r3, #0]
   2ef8c:	210f      	movs	r1, #15
   2ef8e:	400a      	ands	r2, r1
   2ef90:	1c11      	adds	r1, r2, #0
   2ef92:	2210      	movs	r2, #16
   2ef94:	430a      	orrs	r2, r1
   2ef96:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2ef98:	2318      	movs	r3, #24
   2ef9a:	18fb      	adds	r3, r7, r3
   2ef9c:	781a      	ldrb	r2, [r3, #0]
   2ef9e:	231c      	movs	r3, #28
   2efa0:	18fb      	adds	r3, r7, r3
   2efa2:	0011      	movs	r1, r2
   2efa4:	0018      	movs	r0, r3
   2efa6:	4b7c      	ldr	r3, [pc, #496]	; (2f198 <MQTTSerialize_connect+0x260>)
   2efa8:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   2efaa:	69fb      	ldr	r3, [r7, #28]
   2efac:	6a3a      	ldr	r2, [r7, #32]
   2efae:	0011      	movs	r1, r2
   2efb0:	0018      	movs	r0, r3
   2efb2:	4b7a      	ldr	r3, [pc, #488]	; (2f19c <MQTTSerialize_connect+0x264>)
   2efb4:	4798      	blx	r3
   2efb6:	0002      	movs	r2, r0
   2efb8:	69fb      	ldr	r3, [r7, #28]
   2efba:	189b      	adds	r3, r3, r2
   2efbc:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   2efbe:	687b      	ldr	r3, [r7, #4]
   2efc0:	7a1b      	ldrb	r3, [r3, #8]
   2efc2:	2b04      	cmp	r3, #4
   2efc4:	d10d      	bne.n	2efe2 <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   2efc6:	4a76      	ldr	r2, [pc, #472]	; (2f1a0 <MQTTSerialize_connect+0x268>)
   2efc8:	231c      	movs	r3, #28
   2efca:	18fb      	adds	r3, r7, r3
   2efcc:	0011      	movs	r1, r2
   2efce:	0018      	movs	r0, r3
   2efd0:	4b74      	ldr	r3, [pc, #464]	; (2f1a4 <MQTTSerialize_connect+0x26c>)
   2efd2:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   2efd4:	231c      	movs	r3, #28
   2efd6:	18fb      	adds	r3, r7, r3
   2efd8:	2104      	movs	r1, #4
   2efda:	0018      	movs	r0, r3
   2efdc:	4b6e      	ldr	r3, [pc, #440]	; (2f198 <MQTTSerialize_connect+0x260>)
   2efde:	4798      	blx	r3
   2efe0:	e00c      	b.n	2effc <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   2efe2:	4a71      	ldr	r2, [pc, #452]	; (2f1a8 <MQTTSerialize_connect+0x270>)
   2efe4:	231c      	movs	r3, #28
   2efe6:	18fb      	adds	r3, r7, r3
   2efe8:	0011      	movs	r1, r2
   2efea:	0018      	movs	r0, r3
   2efec:	4b6d      	ldr	r3, [pc, #436]	; (2f1a4 <MQTTSerialize_connect+0x26c>)
   2efee:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   2eff0:	231c      	movs	r3, #28
   2eff2:	18fb      	adds	r3, r7, r3
   2eff4:	2103      	movs	r1, #3
   2eff6:	0018      	movs	r0, r3
   2eff8:	4b67      	ldr	r3, [pc, #412]	; (2f198 <MQTTSerialize_connect+0x260>)
   2effa:	4798      	blx	r3
	}

	flags.all = 0;
   2effc:	2314      	movs	r3, #20
   2effe:	18fb      	adds	r3, r7, r3
   2f000:	2200      	movs	r2, #0
   2f002:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   2f004:	687b      	ldr	r3, [r7, #4]
   2f006:	7e9b      	ldrb	r3, [r3, #26]
   2f008:	1c1a      	adds	r2, r3, #0
   2f00a:	2301      	movs	r3, #1
   2f00c:	4013      	ands	r3, r2
   2f00e:	b2da      	uxtb	r2, r3
   2f010:	2314      	movs	r3, #20
   2f012:	18fb      	adds	r3, r7, r3
   2f014:	2101      	movs	r1, #1
   2f016:	400a      	ands	r2, r1
   2f018:	1890      	adds	r0, r2, r2
   2f01a:	781a      	ldrb	r2, [r3, #0]
   2f01c:	2102      	movs	r1, #2
   2f01e:	438a      	bics	r2, r1
   2f020:	1c11      	adds	r1, r2, #0
   2f022:	1c02      	adds	r2, r0, #0
   2f024:	430a      	orrs	r2, r1
   2f026:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   2f028:	687b      	ldr	r3, [r7, #4]
   2f02a:	7edb      	ldrb	r3, [r3, #27]
   2f02c:	1e5a      	subs	r2, r3, #1
   2f02e:	4193      	sbcs	r3, r2
   2f030:	b2da      	uxtb	r2, r3
   2f032:	2314      	movs	r3, #20
   2f034:	18fb      	adds	r3, r7, r3
   2f036:	2101      	movs	r1, #1
   2f038:	400a      	ands	r2, r1
   2f03a:	0090      	lsls	r0, r2, #2
   2f03c:	781a      	ldrb	r2, [r3, #0]
   2f03e:	2104      	movs	r1, #4
   2f040:	438a      	bics	r2, r1
   2f042:	1c11      	adds	r1, r2, #0
   2f044:	1c02      	adds	r2, r0, #0
   2f046:	430a      	orrs	r2, r1
   2f048:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   2f04a:	2314      	movs	r3, #20
   2f04c:	18fb      	adds	r3, r7, r3
   2f04e:	781b      	ldrb	r3, [r3, #0]
   2f050:	2204      	movs	r2, #4
   2f052:	4013      	ands	r3, r2
   2f054:	b2db      	uxtb	r3, r3
   2f056:	2b00      	cmp	r3, #0
   2f058:	d025      	beq.n	2f0a6 <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   2f05a:	687b      	ldr	r3, [r7, #4]
   2f05c:	223d      	movs	r2, #61	; 0x3d
   2f05e:	5c9b      	ldrb	r3, [r3, r2]
   2f060:	1c1a      	adds	r2, r3, #0
   2f062:	2303      	movs	r3, #3
   2f064:	4013      	ands	r3, r2
   2f066:	b2da      	uxtb	r2, r3
   2f068:	2314      	movs	r3, #20
   2f06a:	18fb      	adds	r3, r7, r3
   2f06c:	2103      	movs	r1, #3
   2f06e:	400a      	ands	r2, r1
   2f070:	00d0      	lsls	r0, r2, #3
   2f072:	781a      	ldrb	r2, [r3, #0]
   2f074:	2118      	movs	r1, #24
   2f076:	438a      	bics	r2, r1
   2f078:	1c11      	adds	r1, r2, #0
   2f07a:	1c02      	adds	r2, r0, #0
   2f07c:	430a      	orrs	r2, r1
   2f07e:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   2f080:	687b      	ldr	r3, [r7, #4]
   2f082:	223c      	movs	r2, #60	; 0x3c
   2f084:	5c9b      	ldrb	r3, [r3, r2]
   2f086:	1c1a      	adds	r2, r3, #0
   2f088:	2301      	movs	r3, #1
   2f08a:	4013      	ands	r3, r2
   2f08c:	b2da      	uxtb	r2, r3
   2f08e:	2314      	movs	r3, #20
   2f090:	18fb      	adds	r3, r7, r3
   2f092:	2101      	movs	r1, #1
   2f094:	400a      	ands	r2, r1
   2f096:	0150      	lsls	r0, r2, #5
   2f098:	781a      	ldrb	r2, [r3, #0]
   2f09a:	2120      	movs	r1, #32
   2f09c:	438a      	bics	r2, r1
   2f09e:	1c11      	adds	r1, r2, #0
   2f0a0:	1c02      	adds	r2, r0, #0
   2f0a2:	430a      	orrs	r2, r1
   2f0a4:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   2f0a6:	687b      	ldr	r3, [r7, #4]
   2f0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2f0aa:	2b00      	cmp	r3, #0
   2f0ac:	d103      	bne.n	2f0b6 <MQTTSerialize_connect+0x17e>
   2f0ae:	687b      	ldr	r3, [r7, #4]
   2f0b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f0b2:	2b00      	cmp	r3, #0
   2f0b4:	d006      	beq.n	2f0c4 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   2f0b6:	2314      	movs	r3, #20
   2f0b8:	18fb      	adds	r3, r7, r3
   2f0ba:	781a      	ldrb	r2, [r3, #0]
   2f0bc:	2180      	movs	r1, #128	; 0x80
   2f0be:	4249      	negs	r1, r1
   2f0c0:	430a      	orrs	r2, r1
   2f0c2:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   2f0c4:	687b      	ldr	r3, [r7, #4]
   2f0c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f0c8:	2b00      	cmp	r3, #0
   2f0ca:	d103      	bne.n	2f0d4 <MQTTSerialize_connect+0x19c>
   2f0cc:	687b      	ldr	r3, [r7, #4]
   2f0ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2f0d0:	2b00      	cmp	r3, #0
   2f0d2:	d005      	beq.n	2f0e0 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   2f0d4:	2314      	movs	r3, #20
   2f0d6:	18fb      	adds	r3, r7, r3
   2f0d8:	781a      	ldrb	r2, [r3, #0]
   2f0da:	2140      	movs	r1, #64	; 0x40
   2f0dc:	430a      	orrs	r2, r1
   2f0de:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   2f0e0:	2314      	movs	r3, #20
   2f0e2:	18fb      	adds	r3, r7, r3
   2f0e4:	781a      	ldrb	r2, [r3, #0]
   2f0e6:	231c      	movs	r3, #28
   2f0e8:	18fb      	adds	r3, r7, r3
   2f0ea:	0011      	movs	r1, r2
   2f0ec:	0018      	movs	r0, r3
   2f0ee:	4b2a      	ldr	r3, [pc, #168]	; (2f198 <MQTTSerialize_connect+0x260>)
   2f0f0:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   2f0f2:	687b      	ldr	r3, [r7, #4]
   2f0f4:	8b1b      	ldrh	r3, [r3, #24]
   2f0f6:	001a      	movs	r2, r3
   2f0f8:	231c      	movs	r3, #28
   2f0fa:	18fb      	adds	r3, r7, r3
   2f0fc:	0011      	movs	r1, r2
   2f0fe:	0018      	movs	r0, r3
   2f100:	4b2a      	ldr	r3, [pc, #168]	; (2f1ac <MQTTSerialize_connect+0x274>)
   2f102:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   2f104:	687b      	ldr	r3, [r7, #4]
   2f106:	221c      	movs	r2, #28
   2f108:	18b8      	adds	r0, r7, r2
   2f10a:	68d9      	ldr	r1, [r3, #12]
   2f10c:	691a      	ldr	r2, [r3, #16]
   2f10e:	695b      	ldr	r3, [r3, #20]
   2f110:	4c27      	ldr	r4, [pc, #156]	; (2f1b0 <MQTTSerialize_connect+0x278>)
   2f112:	47a0      	blx	r4
	if (options->willFlag)
   2f114:	687b      	ldr	r3, [r7, #4]
   2f116:	7edb      	ldrb	r3, [r3, #27]
   2f118:	2b00      	cmp	r3, #0
   2f11a:	d00f      	beq.n	2f13c <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   2f11c:	687b      	ldr	r3, [r7, #4]
   2f11e:	221c      	movs	r2, #28
   2f120:	18b8      	adds	r0, r7, r2
   2f122:	6a59      	ldr	r1, [r3, #36]	; 0x24
   2f124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2f126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2f128:	4c21      	ldr	r4, [pc, #132]	; (2f1b0 <MQTTSerialize_connect+0x278>)
   2f12a:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   2f12c:	687b      	ldr	r3, [r7, #4]
   2f12e:	221c      	movs	r2, #28
   2f130:	18b8      	adds	r0, r7, r2
   2f132:	6b19      	ldr	r1, [r3, #48]	; 0x30
   2f134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2f136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2f138:	4c1d      	ldr	r4, [pc, #116]	; (2f1b0 <MQTTSerialize_connect+0x278>)
   2f13a:	47a0      	blx	r4
	}
	if (flags.bits.username)
   2f13c:	2314      	movs	r3, #20
   2f13e:	18fb      	adds	r3, r7, r3
   2f140:	781b      	ldrb	r3, [r3, #0]
   2f142:	227f      	movs	r2, #127	; 0x7f
   2f144:	4393      	bics	r3, r2
   2f146:	b2db      	uxtb	r3, r3
   2f148:	2b00      	cmp	r3, #0
   2f14a:	d007      	beq.n	2f15c <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   2f14c:	687b      	ldr	r3, [r7, #4]
   2f14e:	221c      	movs	r2, #28
   2f150:	18b8      	adds	r0, r7, r2
   2f152:	6c19      	ldr	r1, [r3, #64]	; 0x40
   2f154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2f156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f158:	4c15      	ldr	r4, [pc, #84]	; (2f1b0 <MQTTSerialize_connect+0x278>)
   2f15a:	47a0      	blx	r4
	if (flags.bits.password)
   2f15c:	2314      	movs	r3, #20
   2f15e:	18fb      	adds	r3, r7, r3
   2f160:	781b      	ldrb	r3, [r3, #0]
   2f162:	2240      	movs	r2, #64	; 0x40
   2f164:	4013      	ands	r3, r2
   2f166:	b2db      	uxtb	r3, r3
   2f168:	2b00      	cmp	r3, #0
   2f16a:	d007      	beq.n	2f17c <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   2f16c:	687b      	ldr	r3, [r7, #4]
   2f16e:	221c      	movs	r2, #28
   2f170:	18b8      	adds	r0, r7, r2
   2f172:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   2f174:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2f176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2f178:	4c0d      	ldr	r4, [pc, #52]	; (2f1b0 <MQTTSerialize_connect+0x278>)
   2f17a:	47a0      	blx	r4

	rc = ptr - buf;
   2f17c:	69fb      	ldr	r3, [r7, #28]
   2f17e:	001a      	movs	r2, r3
   2f180:	68fb      	ldr	r3, [r7, #12]
   2f182:	1ad3      	subs	r3, r2, r3
   2f184:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   2f186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f188:	0018      	movs	r0, r3
   2f18a:	46bd      	mov	sp, r7
   2f18c:	b00b      	add	sp, #44	; 0x2c
   2f18e:	bd90      	pop	{r4, r7, pc}
   2f190:	0002ee71 	.word	0x0002ee71
   2f194:	0002f605 	.word	0x0002f605
   2f198:	0002f727 	.word	0x0002f727
   2f19c:	0002f50d 	.word	0x0002f50d
   2f1a0:	000392fc 	.word	0x000392fc
   2f1a4:	0002f7a9 	.word	0x0002f7a9
   2f1a8:	00039304 	.word	0x00039304
   2f1ac:	0002f751 	.word	0x0002f751
   2f1b0:	0002f7f9 	.word	0x0002f7f9

0002f1b4 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   2f1b4:	b580      	push	{r7, lr}
   2f1b6:	b08a      	sub	sp, #40	; 0x28
   2f1b8:	af00      	add	r7, sp, #0
   2f1ba:	60f8      	str	r0, [r7, #12]
   2f1bc:	60b9      	str	r1, [r7, #8]
   2f1be:	607a      	str	r2, [r7, #4]
   2f1c0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2f1c2:	2300      	movs	r3, #0
   2f1c4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2f1c6:	687b      	ldr	r3, [r7, #4]
   2f1c8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2f1ca:	2300      	movs	r3, #0
   2f1cc:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2f1ce:	2300      	movs	r3, #0
   2f1d0:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   2f1d2:	2300      	movs	r3, #0
   2f1d4:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2f1d6:	2318      	movs	r3, #24
   2f1d8:	18fb      	adds	r3, r7, r3
   2f1da:	0018      	movs	r0, r3
   2f1dc:	4b25      	ldr	r3, [pc, #148]	; (2f274 <MQTTDeserialize_connack+0xc0>)
   2f1de:	4798      	blx	r3
   2f1e0:	0003      	movs	r3, r0
   2f1e2:	001a      	movs	r2, r3
   2f1e4:	231c      	movs	r3, #28
   2f1e6:	18fb      	adds	r3, r7, r3
   2f1e8:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   2f1ea:	231c      	movs	r3, #28
   2f1ec:	18fb      	adds	r3, r7, r3
   2f1ee:	781b      	ldrb	r3, [r3, #0]
   2f1f0:	220f      	movs	r2, #15
   2f1f2:	4393      	bics	r3, r2
   2f1f4:	b2db      	uxtb	r3, r3
   2f1f6:	2b20      	cmp	r3, #32
   2f1f8:	d134      	bne.n	2f264 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2f1fa:	69bb      	ldr	r3, [r7, #24]
   2f1fc:	2214      	movs	r2, #20
   2f1fe:	18ba      	adds	r2, r7, r2
   2f200:	0011      	movs	r1, r2
   2f202:	0018      	movs	r0, r3
   2f204:	4b1c      	ldr	r3, [pc, #112]	; (2f278 <MQTTDeserialize_connack+0xc4>)
   2f206:	4798      	blx	r3
   2f208:	0003      	movs	r3, r0
   2f20a:	627b      	str	r3, [r7, #36]	; 0x24
   2f20c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f20e:	69bb      	ldr	r3, [r7, #24]
   2f210:	189b      	adds	r3, r3, r2
   2f212:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2f214:	69bb      	ldr	r3, [r7, #24]
   2f216:	697a      	ldr	r2, [r7, #20]
   2f218:	189b      	adds	r3, r3, r2
   2f21a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   2f21c:	6a3b      	ldr	r3, [r7, #32]
   2f21e:	69ba      	ldr	r2, [r7, #24]
   2f220:	1a9b      	subs	r3, r3, r2
   2f222:	2b01      	cmp	r3, #1
   2f224:	dd20      	ble.n	2f268 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   2f226:	2318      	movs	r3, #24
   2f228:	18fb      	adds	r3, r7, r3
   2f22a:	0018      	movs	r0, r3
   2f22c:	4b11      	ldr	r3, [pc, #68]	; (2f274 <MQTTDeserialize_connack+0xc0>)
   2f22e:	4798      	blx	r3
   2f230:	0003      	movs	r3, r0
   2f232:	001a      	movs	r2, r3
   2f234:	2310      	movs	r3, #16
   2f236:	18fb      	adds	r3, r7, r3
   2f238:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   2f23a:	2310      	movs	r3, #16
   2f23c:	18fb      	adds	r3, r7, r3
   2f23e:	781b      	ldrb	r3, [r3, #0]
   2f240:	061b      	lsls	r3, r3, #24
   2f242:	0fdb      	lsrs	r3, r3, #31
   2f244:	b2db      	uxtb	r3, r3
   2f246:	001a      	movs	r2, r3
   2f248:	68fb      	ldr	r3, [r7, #12]
   2f24a:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   2f24c:	2318      	movs	r3, #24
   2f24e:	18fb      	adds	r3, r7, r3
   2f250:	0018      	movs	r0, r3
   2f252:	4b08      	ldr	r3, [pc, #32]	; (2f274 <MQTTDeserialize_connack+0xc0>)
   2f254:	4798      	blx	r3
   2f256:	0003      	movs	r3, r0
   2f258:	001a      	movs	r2, r3
   2f25a:	68bb      	ldr	r3, [r7, #8]
   2f25c:	701a      	strb	r2, [r3, #0]

	rc = 1;
   2f25e:	2301      	movs	r3, #1
   2f260:	627b      	str	r3, [r7, #36]	; 0x24
   2f262:	e002      	b.n	2f26a <MQTTDeserialize_connack+0xb6>
		goto exit;
   2f264:	46c0      	nop			; (mov r8, r8)
   2f266:	e000      	b.n	2f26a <MQTTDeserialize_connack+0xb6>
		goto exit;
   2f268:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f26c:	0018      	movs	r0, r3
   2f26e:	46bd      	mov	sp, r7
   2f270:	b00a      	add	sp, #40	; 0x28
   2f272:	bd80      	pop	{r7, pc}
   2f274:	0002f6fb 	.word	0x0002f6fb
   2f278:	0002f695 	.word	0x0002f695

0002f27c <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   2f27c:	b580      	push	{r7, lr}
   2f27e:	b088      	sub	sp, #32
   2f280:	af00      	add	r7, sp, #0
   2f282:	60f8      	str	r0, [r7, #12]
   2f284:	60b9      	str	r1, [r7, #8]
   2f286:	1dfb      	adds	r3, r7, #7
   2f288:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   2f28a:	2300      	movs	r3, #0
   2f28c:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   2f28e:	2301      	movs	r3, #1
   2f290:	425b      	negs	r3, r3
   2f292:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   2f294:	68fb      	ldr	r3, [r7, #12]
   2f296:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   2f298:	68bb      	ldr	r3, [r7, #8]
   2f29a:	2b01      	cmp	r3, #1
   2f29c:	dc03      	bgt.n	2f2a6 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2f29e:	2302      	movs	r3, #2
   2f2a0:	425b      	negs	r3, r3
   2f2a2:	61fb      	str	r3, [r7, #28]
		goto exit;
   2f2a4:	e029      	b.n	2f2fa <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   2f2a6:	2318      	movs	r3, #24
   2f2a8:	18fb      	adds	r3, r7, r3
   2f2aa:	2200      	movs	r2, #0
   2f2ac:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   2f2ae:	1dfb      	adds	r3, r7, #7
   2f2b0:	781b      	ldrb	r3, [r3, #0]
   2f2b2:	220f      	movs	r2, #15
   2f2b4:	4013      	ands	r3, r2
   2f2b6:	b2da      	uxtb	r2, r3
   2f2b8:	2318      	movs	r3, #24
   2f2ba:	18fb      	adds	r3, r7, r3
   2f2bc:	0110      	lsls	r0, r2, #4
   2f2be:	781a      	ldrb	r2, [r3, #0]
   2f2c0:	210f      	movs	r1, #15
   2f2c2:	400a      	ands	r2, r1
   2f2c4:	1c11      	adds	r1, r2, #0
   2f2c6:	1c02      	adds	r2, r0, #0
   2f2c8:	430a      	orrs	r2, r1
   2f2ca:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2f2cc:	2318      	movs	r3, #24
   2f2ce:	18fb      	adds	r3, r7, r3
   2f2d0:	781a      	ldrb	r2, [r3, #0]
   2f2d2:	2314      	movs	r3, #20
   2f2d4:	18fb      	adds	r3, r7, r3
   2f2d6:	0011      	movs	r1, r2
   2f2d8:	0018      	movs	r0, r3
   2f2da:	4b0a      	ldr	r3, [pc, #40]	; (2f304 <MQTTSerialize_zero+0x88>)
   2f2dc:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   2f2de:	697b      	ldr	r3, [r7, #20]
   2f2e0:	2100      	movs	r1, #0
   2f2e2:	0018      	movs	r0, r3
   2f2e4:	4b08      	ldr	r3, [pc, #32]	; (2f308 <MQTTSerialize_zero+0x8c>)
   2f2e6:	4798      	blx	r3
   2f2e8:	0002      	movs	r2, r0
   2f2ea:	697b      	ldr	r3, [r7, #20]
   2f2ec:	189b      	adds	r3, r3, r2
   2f2ee:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   2f2f0:	697b      	ldr	r3, [r7, #20]
   2f2f2:	001a      	movs	r2, r3
   2f2f4:	68fb      	ldr	r3, [r7, #12]
   2f2f6:	1ad3      	subs	r3, r2, r3
   2f2f8:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f2fa:	69fb      	ldr	r3, [r7, #28]
}
   2f2fc:	0018      	movs	r0, r3
   2f2fe:	46bd      	mov	sp, r7
   2f300:	b008      	add	sp, #32
   2f302:	bd80      	pop	{r7, pc}
   2f304:	0002f727 	.word	0x0002f727
   2f308:	0002f50d 	.word	0x0002f50d

0002f30c <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   2f30c:	b580      	push	{r7, lr}
   2f30e:	b082      	sub	sp, #8
   2f310:	af00      	add	r7, sp, #0
   2f312:	6078      	str	r0, [r7, #4]
   2f314:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   2f316:	6839      	ldr	r1, [r7, #0]
   2f318:	687b      	ldr	r3, [r7, #4]
   2f31a:	220e      	movs	r2, #14
   2f31c:	0018      	movs	r0, r3
   2f31e:	4b03      	ldr	r3, [pc, #12]	; (2f32c <MQTTSerialize_disconnect+0x20>)
   2f320:	4798      	blx	r3
   2f322:	0003      	movs	r3, r0
}
   2f324:	0018      	movs	r0, r3
   2f326:	46bd      	mov	sp, r7
   2f328:	b002      	add	sp, #8
   2f32a:	bd80      	pop	{r7, pc}
   2f32c:	0002f27d 	.word	0x0002f27d

0002f330 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   2f330:	b580      	push	{r7, lr}
   2f332:	b082      	sub	sp, #8
   2f334:	af00      	add	r7, sp, #0
   2f336:	6078      	str	r0, [r7, #4]
   2f338:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   2f33a:	6839      	ldr	r1, [r7, #0]
   2f33c:	687b      	ldr	r3, [r7, #4]
   2f33e:	220c      	movs	r2, #12
   2f340:	0018      	movs	r0, r3
   2f342:	4b03      	ldr	r3, [pc, #12]	; (2f350 <MQTTSerialize_pingreq+0x20>)
   2f344:	4798      	blx	r3
   2f346:	0003      	movs	r3, r0
}
   2f348:	0018      	movs	r0, r3
   2f34a:	46bd      	mov	sp, r7
   2f34c:	b002      	add	sp, #8
   2f34e:	bd80      	pop	{r7, pc}
   2f350:	0002f27d 	.word	0x0002f27d

0002f354 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   2f354:	b580      	push	{r7, lr}
   2f356:	b08a      	sub	sp, #40	; 0x28
   2f358:	af00      	add	r7, sp, #0
   2f35a:	60f8      	str	r0, [r7, #12]
   2f35c:	60b9      	str	r1, [r7, #8]
   2f35e:	607a      	str	r2, [r7, #4]
   2f360:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2f362:	2300      	movs	r3, #0
   2f364:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2f366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2f368:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2f36a:	2300      	movs	r3, #0
   2f36c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2f36e:	2300      	movs	r3, #0
   2f370:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   2f372:	2300      	movs	r3, #0
   2f374:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2f376:	2318      	movs	r3, #24
   2f378:	18fb      	adds	r3, r7, r3
   2f37a:	0018      	movs	r0, r3
   2f37c:	4b32      	ldr	r3, [pc, #200]	; (2f448 <MQTTDeserialize_publish+0xf4>)
   2f37e:	4798      	blx	r3
   2f380:	0003      	movs	r3, r0
   2f382:	001a      	movs	r2, r3
   2f384:	231c      	movs	r3, #28
   2f386:	18fb      	adds	r3, r7, r3
   2f388:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   2f38a:	231c      	movs	r3, #28
   2f38c:	18fb      	adds	r3, r7, r3
   2f38e:	781b      	ldrb	r3, [r3, #0]
   2f390:	220f      	movs	r2, #15
   2f392:	4393      	bics	r3, r2
   2f394:	b2db      	uxtb	r3, r3
   2f396:	2b30      	cmp	r3, #48	; 0x30
   2f398:	d150      	bne.n	2f43c <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   2f39a:	231c      	movs	r3, #28
   2f39c:	18fb      	adds	r3, r7, r3
   2f39e:	781b      	ldrb	r3, [r3, #0]
   2f3a0:	071b      	lsls	r3, r3, #28
   2f3a2:	0fdb      	lsrs	r3, r3, #31
   2f3a4:	b2db      	uxtb	r3, r3
   2f3a6:	001a      	movs	r2, r3
   2f3a8:	68fb      	ldr	r3, [r7, #12]
   2f3aa:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   2f3ac:	231c      	movs	r3, #28
   2f3ae:	18fb      	adds	r3, r7, r3
   2f3b0:	781b      	ldrb	r3, [r3, #0]
   2f3b2:	075b      	lsls	r3, r3, #29
   2f3b4:	0f9b      	lsrs	r3, r3, #30
   2f3b6:	b2db      	uxtb	r3, r3
   2f3b8:	001a      	movs	r2, r3
   2f3ba:	68bb      	ldr	r3, [r7, #8]
   2f3bc:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   2f3be:	231c      	movs	r3, #28
   2f3c0:	18fb      	adds	r3, r7, r3
   2f3c2:	781b      	ldrb	r3, [r3, #0]
   2f3c4:	07db      	lsls	r3, r3, #31
   2f3c6:	0fdb      	lsrs	r3, r3, #31
   2f3c8:	b2db      	uxtb	r3, r3
   2f3ca:	001a      	movs	r2, r3
   2f3cc:	687b      	ldr	r3, [r7, #4]
   2f3ce:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2f3d0:	69bb      	ldr	r3, [r7, #24]
   2f3d2:	2214      	movs	r2, #20
   2f3d4:	18ba      	adds	r2, r7, r2
   2f3d6:	0011      	movs	r1, r2
   2f3d8:	0018      	movs	r0, r3
   2f3da:	4b1c      	ldr	r3, [pc, #112]	; (2f44c <MQTTDeserialize_publish+0xf8>)
   2f3dc:	4798      	blx	r3
   2f3de:	0003      	movs	r3, r0
   2f3e0:	627b      	str	r3, [r7, #36]	; 0x24
   2f3e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f3e4:	69bb      	ldr	r3, [r7, #24]
   2f3e6:	189b      	adds	r3, r3, r2
   2f3e8:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2f3ea:	69bb      	ldr	r3, [r7, #24]
   2f3ec:	697a      	ldr	r2, [r7, #20]
   2f3ee:	189b      	adds	r3, r3, r2
   2f3f0:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2f3f2:	6a3a      	ldr	r2, [r7, #32]
   2f3f4:	2318      	movs	r3, #24
   2f3f6:	18f9      	adds	r1, r7, r3
   2f3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f3fa:	0018      	movs	r0, r3
   2f3fc:	4b14      	ldr	r3, [pc, #80]	; (2f450 <MQTTDeserialize_publish+0xfc>)
   2f3fe:	4798      	blx	r3
   2f400:	1e03      	subs	r3, r0, #0
   2f402:	d01c      	beq.n	2f43e <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   2f404:	6a3b      	ldr	r3, [r7, #32]
   2f406:	69ba      	ldr	r2, [r7, #24]
   2f408:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2f40a:	d418      	bmi.n	2f43e <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   2f40c:	68bb      	ldr	r3, [r7, #8]
   2f40e:	681b      	ldr	r3, [r3, #0]
   2f410:	2b00      	cmp	r3, #0
   2f412:	dd08      	ble.n	2f426 <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   2f414:	2318      	movs	r3, #24
   2f416:	18fb      	adds	r3, r7, r3
   2f418:	0018      	movs	r0, r3
   2f41a:	4b0e      	ldr	r3, [pc, #56]	; (2f454 <MQTTDeserialize_publish+0x100>)
   2f41c:	4798      	blx	r3
   2f41e:	0003      	movs	r3, r0
   2f420:	b29a      	uxth	r2, r3
   2f422:	683b      	ldr	r3, [r7, #0]
   2f424:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   2f426:	6a3b      	ldr	r3, [r7, #32]
   2f428:	69ba      	ldr	r2, [r7, #24]
   2f42a:	1a9a      	subs	r2, r3, r2
   2f42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f42e:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   2f430:	69ba      	ldr	r2, [r7, #24]
   2f432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f434:	601a      	str	r2, [r3, #0]
	rc = 1;
   2f436:	2301      	movs	r3, #1
   2f438:	627b      	str	r3, [r7, #36]	; 0x24
   2f43a:	e000      	b.n	2f43e <MQTTDeserialize_publish+0xea>
		goto exit;
   2f43c:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f440:	0018      	movs	r0, r3
   2f442:	46bd      	mov	sp, r7
   2f444:	b00a      	add	sp, #40	; 0x28
   2f446:	bd80      	pop	{r7, pc}
   2f448:	0002f6fb 	.word	0x0002f6fb
   2f44c:	0002f695 	.word	0x0002f695
   2f450:	0002f879 	.word	0x0002f879
   2f454:	0002f6c9 	.word	0x0002f6c9

0002f458 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   2f458:	b580      	push	{r7, lr}
   2f45a:	b08a      	sub	sp, #40	; 0x28
   2f45c:	af00      	add	r7, sp, #0
   2f45e:	60f8      	str	r0, [r7, #12]
   2f460:	60b9      	str	r1, [r7, #8]
   2f462:	607a      	str	r2, [r7, #4]
   2f464:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2f466:	2300      	movs	r3, #0
   2f468:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2f46a:	683b      	ldr	r3, [r7, #0]
   2f46c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2f46e:	2300      	movs	r3, #0
   2f470:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2f472:	2300      	movs	r3, #0
   2f474:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2f476:	2318      	movs	r3, #24
   2f478:	18fb      	adds	r3, r7, r3
   2f47a:	0018      	movs	r0, r3
   2f47c:	4b20      	ldr	r3, [pc, #128]	; (2f500 <MQTTDeserialize_ack+0xa8>)
   2f47e:	4798      	blx	r3
   2f480:	0003      	movs	r3, r0
   2f482:	001a      	movs	r2, r3
   2f484:	231c      	movs	r3, #28
   2f486:	18fb      	adds	r3, r7, r3
   2f488:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   2f48a:	231c      	movs	r3, #28
   2f48c:	18fb      	adds	r3, r7, r3
   2f48e:	781b      	ldrb	r3, [r3, #0]
   2f490:	071b      	lsls	r3, r3, #28
   2f492:	0fdb      	lsrs	r3, r3, #31
   2f494:	b2db      	uxtb	r3, r3
   2f496:	001a      	movs	r2, r3
   2f498:	68bb      	ldr	r3, [r7, #8]
   2f49a:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   2f49c:	231c      	movs	r3, #28
   2f49e:	18fb      	adds	r3, r7, r3
   2f4a0:	781b      	ldrb	r3, [r3, #0]
   2f4a2:	061b      	lsls	r3, r3, #24
   2f4a4:	0f1b      	lsrs	r3, r3, #28
   2f4a6:	b2db      	uxtb	r3, r3
   2f4a8:	001a      	movs	r2, r3
   2f4aa:	68fb      	ldr	r3, [r7, #12]
   2f4ac:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2f4ae:	69bb      	ldr	r3, [r7, #24]
   2f4b0:	2214      	movs	r2, #20
   2f4b2:	18ba      	adds	r2, r7, r2
   2f4b4:	0011      	movs	r1, r2
   2f4b6:	0018      	movs	r0, r3
   2f4b8:	4b12      	ldr	r3, [pc, #72]	; (2f504 <MQTTDeserialize_ack+0xac>)
   2f4ba:	4798      	blx	r3
   2f4bc:	0003      	movs	r3, r0
   2f4be:	627b      	str	r3, [r7, #36]	; 0x24
   2f4c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f4c2:	69bb      	ldr	r3, [r7, #24]
   2f4c4:	189b      	adds	r3, r3, r2
   2f4c6:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2f4c8:	69bb      	ldr	r3, [r7, #24]
   2f4ca:	697a      	ldr	r2, [r7, #20]
   2f4cc:	189b      	adds	r3, r3, r2
   2f4ce:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   2f4d0:	6a3b      	ldr	r3, [r7, #32]
   2f4d2:	69ba      	ldr	r2, [r7, #24]
   2f4d4:	1a9b      	subs	r3, r3, r2
   2f4d6:	2b01      	cmp	r3, #1
   2f4d8:	dd0b      	ble.n	2f4f2 <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   2f4da:	2318      	movs	r3, #24
   2f4dc:	18fb      	adds	r3, r7, r3
   2f4de:	0018      	movs	r0, r3
   2f4e0:	4b09      	ldr	r3, [pc, #36]	; (2f508 <MQTTDeserialize_ack+0xb0>)
   2f4e2:	4798      	blx	r3
   2f4e4:	0003      	movs	r3, r0
   2f4e6:	b29a      	uxth	r2, r3
   2f4e8:	687b      	ldr	r3, [r7, #4]
   2f4ea:	801a      	strh	r2, [r3, #0]

	rc = 1;
   2f4ec:	2301      	movs	r3, #1
   2f4ee:	627b      	str	r3, [r7, #36]	; 0x24
   2f4f0:	e000      	b.n	2f4f4 <MQTTDeserialize_ack+0x9c>
		goto exit;
   2f4f2:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f4f6:	0018      	movs	r0, r3
   2f4f8:	46bd      	mov	sp, r7
   2f4fa:	b00a      	add	sp, #40	; 0x28
   2f4fc:	bd80      	pop	{r7, pc}
   2f4fe:	46c0      	nop			; (mov r8, r8)
   2f500:	0002f6fb 	.word	0x0002f6fb
   2f504:	0002f695 	.word	0x0002f695
   2f508:	0002f6c9 	.word	0x0002f6c9

0002f50c <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   2f50c:	b580      	push	{r7, lr}
   2f50e:	b084      	sub	sp, #16
   2f510:	af00      	add	r7, sp, #0
   2f512:	6078      	str	r0, [r7, #4]
   2f514:	6039      	str	r1, [r7, #0]
	int rc = 0;
   2f516:	2300      	movs	r3, #0
   2f518:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   2f51a:	683b      	ldr	r3, [r7, #0]
   2f51c:	4a17      	ldr	r2, [pc, #92]	; (2f57c <MQTTPacket_encode+0x70>)
   2f51e:	4013      	ands	r3, r2
   2f520:	d504      	bpl.n	2f52c <MQTTPacket_encode+0x20>
   2f522:	3b01      	subs	r3, #1
   2f524:	2280      	movs	r2, #128	; 0x80
   2f526:	4252      	negs	r2, r2
   2f528:	4313      	orrs	r3, r2
   2f52a:	3301      	adds	r3, #1
   2f52c:	001a      	movs	r2, r3
   2f52e:	230b      	movs	r3, #11
   2f530:	18fb      	adds	r3, r7, r3
   2f532:	701a      	strb	r2, [r3, #0]
		length /= 128;
   2f534:	683b      	ldr	r3, [r7, #0]
   2f536:	2b00      	cmp	r3, #0
   2f538:	da00      	bge.n	2f53c <MQTTPacket_encode+0x30>
   2f53a:	337f      	adds	r3, #127	; 0x7f
   2f53c:	11db      	asrs	r3, r3, #7
   2f53e:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   2f540:	683b      	ldr	r3, [r7, #0]
   2f542:	2b00      	cmp	r3, #0
   2f544:	dd08      	ble.n	2f558 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   2f546:	230b      	movs	r3, #11
   2f548:	18fb      	adds	r3, r7, r3
   2f54a:	220b      	movs	r2, #11
   2f54c:	18ba      	adds	r2, r7, r2
   2f54e:	7812      	ldrb	r2, [r2, #0]
   2f550:	2180      	movs	r1, #128	; 0x80
   2f552:	4249      	negs	r1, r1
   2f554:	430a      	orrs	r2, r1
   2f556:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   2f558:	68fb      	ldr	r3, [r7, #12]
   2f55a:	1c5a      	adds	r2, r3, #1
   2f55c:	60fa      	str	r2, [r7, #12]
   2f55e:	001a      	movs	r2, r3
   2f560:	687b      	ldr	r3, [r7, #4]
   2f562:	189b      	adds	r3, r3, r2
   2f564:	220b      	movs	r2, #11
   2f566:	18ba      	adds	r2, r7, r2
   2f568:	7812      	ldrb	r2, [r2, #0]
   2f56a:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   2f56c:	683b      	ldr	r3, [r7, #0]
   2f56e:	2b00      	cmp	r3, #0
   2f570:	dcd3      	bgt.n	2f51a <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   2f572:	68fb      	ldr	r3, [r7, #12]
}
   2f574:	0018      	movs	r0, r3
   2f576:	46bd      	mov	sp, r7
   2f578:	b004      	add	sp, #16
   2f57a:	bd80      	pop	{r7, pc}
   2f57c:	8000007f 	.word	0x8000007f

0002f580 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   2f580:	b580      	push	{r7, lr}
   2f582:	b086      	sub	sp, #24
   2f584:	af00      	add	r7, sp, #0
   2f586:	6078      	str	r0, [r7, #4]
   2f588:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   2f58a:	2301      	movs	r3, #1
   2f58c:	617b      	str	r3, [r7, #20]
	int len = 0;
   2f58e:	2300      	movs	r3, #0
   2f590:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   2f592:	683b      	ldr	r3, [r7, #0]
   2f594:	2200      	movs	r2, #0
   2f596:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   2f598:	2301      	movs	r3, #1
   2f59a:	425b      	negs	r3, r3
   2f59c:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2f59e:	693b      	ldr	r3, [r7, #16]
   2f5a0:	3301      	adds	r3, #1
   2f5a2:	613b      	str	r3, [r7, #16]
   2f5a4:	693b      	ldr	r3, [r7, #16]
   2f5a6:	2b04      	cmp	r3, #4
   2f5a8:	dd03      	ble.n	2f5b2 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   2f5aa:	2301      	movs	r3, #1
   2f5ac:	425b      	negs	r3, r3
   2f5ae:	60fb      	str	r3, [r7, #12]
			goto exit;
   2f5b0:	e022      	b.n	2f5f8 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   2f5b2:	230b      	movs	r3, #11
   2f5b4:	18fa      	adds	r2, r7, r3
   2f5b6:	687b      	ldr	r3, [r7, #4]
   2f5b8:	2101      	movs	r1, #1
   2f5ba:	0010      	movs	r0, r2
   2f5bc:	4798      	blx	r3
   2f5be:	0003      	movs	r3, r0
   2f5c0:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   2f5c2:	68fb      	ldr	r3, [r7, #12]
   2f5c4:	2b01      	cmp	r3, #1
   2f5c6:	d116      	bne.n	2f5f6 <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   2f5c8:	683b      	ldr	r3, [r7, #0]
   2f5ca:	681a      	ldr	r2, [r3, #0]
   2f5cc:	230b      	movs	r3, #11
   2f5ce:	18fb      	adds	r3, r7, r3
   2f5d0:	781b      	ldrb	r3, [r3, #0]
   2f5d2:	0019      	movs	r1, r3
   2f5d4:	237f      	movs	r3, #127	; 0x7f
   2f5d6:	400b      	ands	r3, r1
   2f5d8:	6979      	ldr	r1, [r7, #20]
   2f5da:	434b      	muls	r3, r1
   2f5dc:	18d2      	adds	r2, r2, r3
   2f5de:	683b      	ldr	r3, [r7, #0]
   2f5e0:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   2f5e2:	697b      	ldr	r3, [r7, #20]
   2f5e4:	01db      	lsls	r3, r3, #7
   2f5e6:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   2f5e8:	230b      	movs	r3, #11
   2f5ea:	18fb      	adds	r3, r7, r3
   2f5ec:	781b      	ldrb	r3, [r3, #0]
   2f5ee:	b25b      	sxtb	r3, r3
   2f5f0:	2b00      	cmp	r3, #0
   2f5f2:	dbd1      	blt.n	2f598 <MQTTPacket_decode+0x18>
   2f5f4:	e000      	b.n	2f5f8 <MQTTPacket_decode+0x78>
			goto exit;
   2f5f6:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   2f5f8:	693b      	ldr	r3, [r7, #16]
}
   2f5fa:	0018      	movs	r0, r3
   2f5fc:	46bd      	mov	sp, r7
   2f5fe:	b006      	add	sp, #24
   2f600:	bd80      	pop	{r7, pc}
	...

0002f604 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   2f604:	b580      	push	{r7, lr}
   2f606:	b082      	sub	sp, #8
   2f608:	af00      	add	r7, sp, #0
   2f60a:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   2f60c:	687b      	ldr	r3, [r7, #4]
   2f60e:	3301      	adds	r3, #1
   2f610:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   2f612:	687b      	ldr	r3, [r7, #4]
   2f614:	2b7f      	cmp	r3, #127	; 0x7f
   2f616:	dc03      	bgt.n	2f620 <MQTTPacket_len+0x1c>
		rem_len += 1;
   2f618:	687b      	ldr	r3, [r7, #4]
   2f61a:	3301      	adds	r3, #1
   2f61c:	607b      	str	r3, [r7, #4]
   2f61e:	e012      	b.n	2f646 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   2f620:	687b      	ldr	r3, [r7, #4]
   2f622:	4a0b      	ldr	r2, [pc, #44]	; (2f650 <MQTTPacket_len+0x4c>)
   2f624:	4293      	cmp	r3, r2
   2f626:	dc03      	bgt.n	2f630 <MQTTPacket_len+0x2c>
		rem_len += 2;
   2f628:	687b      	ldr	r3, [r7, #4]
   2f62a:	3302      	adds	r3, #2
   2f62c:	607b      	str	r3, [r7, #4]
   2f62e:	e00a      	b.n	2f646 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   2f630:	687b      	ldr	r3, [r7, #4]
   2f632:	4a08      	ldr	r2, [pc, #32]	; (2f654 <MQTTPacket_len+0x50>)
   2f634:	4293      	cmp	r3, r2
   2f636:	dc03      	bgt.n	2f640 <MQTTPacket_len+0x3c>
		rem_len += 3;
   2f638:	687b      	ldr	r3, [r7, #4]
   2f63a:	3303      	adds	r3, #3
   2f63c:	607b      	str	r3, [r7, #4]
   2f63e:	e002      	b.n	2f646 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   2f640:	687b      	ldr	r3, [r7, #4]
   2f642:	3304      	adds	r3, #4
   2f644:	607b      	str	r3, [r7, #4]
	return rem_len;
   2f646:	687b      	ldr	r3, [r7, #4]
}
   2f648:	0018      	movs	r0, r3
   2f64a:	46bd      	mov	sp, r7
   2f64c:	b002      	add	sp, #8
   2f64e:	bd80      	pop	{r7, pc}
   2f650:	00003fff 	.word	0x00003fff
   2f654:	001ffffe 	.word	0x001ffffe

0002f658 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   2f658:	b580      	push	{r7, lr}
   2f65a:	b084      	sub	sp, #16
   2f65c:	af00      	add	r7, sp, #0
   2f65e:	6078      	str	r0, [r7, #4]
   2f660:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   2f662:	2300      	movs	r3, #0
   2f664:	60fb      	str	r3, [r7, #12]
   2f666:	e00a      	b.n	2f67e <bufchar+0x26>
		*c = *bufptr++;
   2f668:	4b09      	ldr	r3, [pc, #36]	; (2f690 <bufchar+0x38>)
   2f66a:	681b      	ldr	r3, [r3, #0]
   2f66c:	1c59      	adds	r1, r3, #1
   2f66e:	4a08      	ldr	r2, [pc, #32]	; (2f690 <bufchar+0x38>)
   2f670:	6011      	str	r1, [r2, #0]
   2f672:	781a      	ldrb	r2, [r3, #0]
   2f674:	687b      	ldr	r3, [r7, #4]
   2f676:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   2f678:	68fb      	ldr	r3, [r7, #12]
   2f67a:	3301      	adds	r3, #1
   2f67c:	60fb      	str	r3, [r7, #12]
   2f67e:	68fa      	ldr	r2, [r7, #12]
   2f680:	683b      	ldr	r3, [r7, #0]
   2f682:	429a      	cmp	r2, r3
   2f684:	dbf0      	blt.n	2f668 <bufchar+0x10>
	return count;
   2f686:	683b      	ldr	r3, [r7, #0]
}
   2f688:	0018      	movs	r0, r3
   2f68a:	46bd      	mov	sp, r7
   2f68c:	b004      	add	sp, #16
   2f68e:	bd80      	pop	{r7, pc}
   2f690:	20004554 	.word	0x20004554

0002f694 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   2f694:	b580      	push	{r7, lr}
   2f696:	b082      	sub	sp, #8
   2f698:	af00      	add	r7, sp, #0
   2f69a:	6078      	str	r0, [r7, #4]
   2f69c:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   2f69e:	4b07      	ldr	r3, [pc, #28]	; (2f6bc <MQTTPacket_decodeBuf+0x28>)
   2f6a0:	687a      	ldr	r2, [r7, #4]
   2f6a2:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   2f6a4:	683a      	ldr	r2, [r7, #0]
   2f6a6:	4b06      	ldr	r3, [pc, #24]	; (2f6c0 <MQTTPacket_decodeBuf+0x2c>)
   2f6a8:	0011      	movs	r1, r2
   2f6aa:	0018      	movs	r0, r3
   2f6ac:	4b05      	ldr	r3, [pc, #20]	; (2f6c4 <MQTTPacket_decodeBuf+0x30>)
   2f6ae:	4798      	blx	r3
   2f6b0:	0003      	movs	r3, r0
}
   2f6b2:	0018      	movs	r0, r3
   2f6b4:	46bd      	mov	sp, r7
   2f6b6:	b002      	add	sp, #8
   2f6b8:	bd80      	pop	{r7, pc}
   2f6ba:	46c0      	nop			; (mov r8, r8)
   2f6bc:	20004554 	.word	0x20004554
   2f6c0:	0002f659 	.word	0x0002f659
   2f6c4:	0002f581 	.word	0x0002f581

0002f6c8 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   2f6c8:	b580      	push	{r7, lr}
   2f6ca:	b084      	sub	sp, #16
   2f6cc:	af00      	add	r7, sp, #0
   2f6ce:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   2f6d0:	687b      	ldr	r3, [r7, #4]
   2f6d2:	681b      	ldr	r3, [r3, #0]
   2f6d4:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   2f6d6:	68fb      	ldr	r3, [r7, #12]
   2f6d8:	781b      	ldrb	r3, [r3, #0]
   2f6da:	021b      	lsls	r3, r3, #8
   2f6dc:	68fa      	ldr	r2, [r7, #12]
   2f6de:	3201      	adds	r2, #1
   2f6e0:	7812      	ldrb	r2, [r2, #0]
   2f6e2:	189b      	adds	r3, r3, r2
   2f6e4:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   2f6e6:	687b      	ldr	r3, [r7, #4]
   2f6e8:	681b      	ldr	r3, [r3, #0]
   2f6ea:	1c9a      	adds	r2, r3, #2
   2f6ec:	687b      	ldr	r3, [r7, #4]
   2f6ee:	601a      	str	r2, [r3, #0]
	return len;
   2f6f0:	68bb      	ldr	r3, [r7, #8]
}
   2f6f2:	0018      	movs	r0, r3
   2f6f4:	46bd      	mov	sp, r7
   2f6f6:	b004      	add	sp, #16
   2f6f8:	bd80      	pop	{r7, pc}

0002f6fa <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   2f6fa:	b580      	push	{r7, lr}
   2f6fc:	b084      	sub	sp, #16
   2f6fe:	af00      	add	r7, sp, #0
   2f700:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   2f702:	687b      	ldr	r3, [r7, #4]
   2f704:	681a      	ldr	r2, [r3, #0]
   2f706:	230f      	movs	r3, #15
   2f708:	18fb      	adds	r3, r7, r3
   2f70a:	7812      	ldrb	r2, [r2, #0]
   2f70c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   2f70e:	687b      	ldr	r3, [r7, #4]
   2f710:	681b      	ldr	r3, [r3, #0]
   2f712:	1c5a      	adds	r2, r3, #1
   2f714:	687b      	ldr	r3, [r7, #4]
   2f716:	601a      	str	r2, [r3, #0]
	return c;
   2f718:	230f      	movs	r3, #15
   2f71a:	18fb      	adds	r3, r7, r3
   2f71c:	781b      	ldrb	r3, [r3, #0]
}
   2f71e:	0018      	movs	r0, r3
   2f720:	46bd      	mov	sp, r7
   2f722:	b004      	add	sp, #16
   2f724:	bd80      	pop	{r7, pc}

0002f726 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   2f726:	b580      	push	{r7, lr}
   2f728:	b082      	sub	sp, #8
   2f72a:	af00      	add	r7, sp, #0
   2f72c:	6078      	str	r0, [r7, #4]
   2f72e:	000a      	movs	r2, r1
   2f730:	1cfb      	adds	r3, r7, #3
   2f732:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   2f734:	687b      	ldr	r3, [r7, #4]
   2f736:	681b      	ldr	r3, [r3, #0]
   2f738:	1cfa      	adds	r2, r7, #3
   2f73a:	7812      	ldrb	r2, [r2, #0]
   2f73c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   2f73e:	687b      	ldr	r3, [r7, #4]
   2f740:	681b      	ldr	r3, [r3, #0]
   2f742:	1c5a      	adds	r2, r3, #1
   2f744:	687b      	ldr	r3, [r7, #4]
   2f746:	601a      	str	r2, [r3, #0]
}
   2f748:	46c0      	nop			; (mov r8, r8)
   2f74a:	46bd      	mov	sp, r7
   2f74c:	b002      	add	sp, #8
   2f74e:	bd80      	pop	{r7, pc}

0002f750 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   2f750:	b580      	push	{r7, lr}
   2f752:	b082      	sub	sp, #8
   2f754:	af00      	add	r7, sp, #0
   2f756:	6078      	str	r0, [r7, #4]
   2f758:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   2f75a:	687b      	ldr	r3, [r7, #4]
   2f75c:	681a      	ldr	r2, [r3, #0]
   2f75e:	683b      	ldr	r3, [r7, #0]
   2f760:	2b00      	cmp	r3, #0
   2f762:	da00      	bge.n	2f766 <writeInt+0x16>
   2f764:	33ff      	adds	r3, #255	; 0xff
   2f766:	121b      	asrs	r3, r3, #8
   2f768:	b2db      	uxtb	r3, r3
   2f76a:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   2f76c:	687b      	ldr	r3, [r7, #4]
   2f76e:	681b      	ldr	r3, [r3, #0]
   2f770:	1c5a      	adds	r2, r3, #1
   2f772:	687b      	ldr	r3, [r7, #4]
   2f774:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   2f776:	687b      	ldr	r3, [r7, #4]
   2f778:	681a      	ldr	r2, [r3, #0]
   2f77a:	683b      	ldr	r3, [r7, #0]
   2f77c:	4908      	ldr	r1, [pc, #32]	; (2f7a0 <writeInt+0x50>)
   2f77e:	400b      	ands	r3, r1
   2f780:	d503      	bpl.n	2f78a <writeInt+0x3a>
   2f782:	3b01      	subs	r3, #1
   2f784:	4907      	ldr	r1, [pc, #28]	; (2f7a4 <writeInt+0x54>)
   2f786:	430b      	orrs	r3, r1
   2f788:	3301      	adds	r3, #1
   2f78a:	b2db      	uxtb	r3, r3
   2f78c:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   2f78e:	687b      	ldr	r3, [r7, #4]
   2f790:	681b      	ldr	r3, [r3, #0]
   2f792:	1c5a      	adds	r2, r3, #1
   2f794:	687b      	ldr	r3, [r7, #4]
   2f796:	601a      	str	r2, [r3, #0]
}
   2f798:	46c0      	nop			; (mov r8, r8)
   2f79a:	46bd      	mov	sp, r7
   2f79c:	b002      	add	sp, #8
   2f79e:	bd80      	pop	{r7, pc}
   2f7a0:	800000ff 	.word	0x800000ff
   2f7a4:	ffffff00 	.word	0xffffff00

0002f7a8 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   2f7a8:	b580      	push	{r7, lr}
   2f7aa:	b084      	sub	sp, #16
   2f7ac:	af00      	add	r7, sp, #0
   2f7ae:	6078      	str	r0, [r7, #4]
   2f7b0:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   2f7b2:	683b      	ldr	r3, [r7, #0]
   2f7b4:	0018      	movs	r0, r3
   2f7b6:	4b0d      	ldr	r3, [pc, #52]	; (2f7ec <writeCString+0x44>)
   2f7b8:	4798      	blx	r3
   2f7ba:	0003      	movs	r3, r0
   2f7bc:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   2f7be:	68fa      	ldr	r2, [r7, #12]
   2f7c0:	687b      	ldr	r3, [r7, #4]
   2f7c2:	0011      	movs	r1, r2
   2f7c4:	0018      	movs	r0, r3
   2f7c6:	4b0a      	ldr	r3, [pc, #40]	; (2f7f0 <writeCString+0x48>)
   2f7c8:	4798      	blx	r3
	memcpy(*pptr, string, len);
   2f7ca:	687b      	ldr	r3, [r7, #4]
   2f7cc:	681b      	ldr	r3, [r3, #0]
   2f7ce:	68fa      	ldr	r2, [r7, #12]
   2f7d0:	6839      	ldr	r1, [r7, #0]
   2f7d2:	0018      	movs	r0, r3
   2f7d4:	4b07      	ldr	r3, [pc, #28]	; (2f7f4 <writeCString+0x4c>)
   2f7d6:	4798      	blx	r3
	*pptr += len;
   2f7d8:	687b      	ldr	r3, [r7, #4]
   2f7da:	681a      	ldr	r2, [r3, #0]
   2f7dc:	68fb      	ldr	r3, [r7, #12]
   2f7de:	18d2      	adds	r2, r2, r3
   2f7e0:	687b      	ldr	r3, [r7, #4]
   2f7e2:	601a      	str	r2, [r3, #0]
}
   2f7e4:	46c0      	nop			; (mov r8, r8)
   2f7e6:	46bd      	mov	sp, r7
   2f7e8:	b004      	add	sp, #16
   2f7ea:	bd80      	pop	{r7, pc}
   2f7ec:	000346d3 	.word	0x000346d3
   2f7f0:	0002f751 	.word	0x0002f751
   2f7f4:	000342e5 	.word	0x000342e5

0002f7f8 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   2f7f8:	b580      	push	{r7, lr}
   2f7fa:	b084      	sub	sp, #16
   2f7fc:	af00      	add	r7, sp, #0
   2f7fe:	60f8      	str	r0, [r7, #12]
   2f800:	0038      	movs	r0, r7
   2f802:	6001      	str	r1, [r0, #0]
   2f804:	6042      	str	r2, [r0, #4]
   2f806:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   2f808:	003b      	movs	r3, r7
   2f80a:	685b      	ldr	r3, [r3, #4]
   2f80c:	2b00      	cmp	r3, #0
   2f80e:	dd17      	ble.n	2f840 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   2f810:	003b      	movs	r3, r7
   2f812:	685a      	ldr	r2, [r3, #4]
   2f814:	68fb      	ldr	r3, [r7, #12]
   2f816:	0011      	movs	r1, r2
   2f818:	0018      	movs	r0, r3
   2f81a:	4b14      	ldr	r3, [pc, #80]	; (2f86c <writeMQTTString+0x74>)
   2f81c:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   2f81e:	68fb      	ldr	r3, [r7, #12]
   2f820:	6818      	ldr	r0, [r3, #0]
   2f822:	003b      	movs	r3, r7
   2f824:	6899      	ldr	r1, [r3, #8]
   2f826:	003b      	movs	r3, r7
   2f828:	685b      	ldr	r3, [r3, #4]
   2f82a:	001a      	movs	r2, r3
   2f82c:	4b10      	ldr	r3, [pc, #64]	; (2f870 <writeMQTTString+0x78>)
   2f82e:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   2f830:	68fb      	ldr	r3, [r7, #12]
   2f832:	681a      	ldr	r2, [r3, #0]
   2f834:	003b      	movs	r3, r7
   2f836:	685b      	ldr	r3, [r3, #4]
   2f838:	18d2      	adds	r2, r2, r3
   2f83a:	68fb      	ldr	r3, [r7, #12]
   2f83c:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   2f83e:	e010      	b.n	2f862 <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   2f840:	003b      	movs	r3, r7
   2f842:	681b      	ldr	r3, [r3, #0]
   2f844:	2b00      	cmp	r3, #0
   2f846:	d007      	beq.n	2f858 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   2f848:	003b      	movs	r3, r7
   2f84a:	681a      	ldr	r2, [r3, #0]
   2f84c:	68fb      	ldr	r3, [r7, #12]
   2f84e:	0011      	movs	r1, r2
   2f850:	0018      	movs	r0, r3
   2f852:	4b08      	ldr	r3, [pc, #32]	; (2f874 <writeMQTTString+0x7c>)
   2f854:	4798      	blx	r3
}
   2f856:	e004      	b.n	2f862 <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   2f858:	68fb      	ldr	r3, [r7, #12]
   2f85a:	2100      	movs	r1, #0
   2f85c:	0018      	movs	r0, r3
   2f85e:	4b03      	ldr	r3, [pc, #12]	; (2f86c <writeMQTTString+0x74>)
   2f860:	4798      	blx	r3
}
   2f862:	46c0      	nop			; (mov r8, r8)
   2f864:	46bd      	mov	sp, r7
   2f866:	b004      	add	sp, #16
   2f868:	bd80      	pop	{r7, pc}
   2f86a:	46c0      	nop			; (mov r8, r8)
   2f86c:	0002f751 	.word	0x0002f751
   2f870:	000342e5 	.word	0x000342e5
   2f874:	0002f7a9 	.word	0x0002f7a9

0002f878 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   2f878:	b580      	push	{r7, lr}
   2f87a:	b086      	sub	sp, #24
   2f87c:	af00      	add	r7, sp, #0
   2f87e:	60f8      	str	r0, [r7, #12]
   2f880:	60b9      	str	r1, [r7, #8]
   2f882:	607a      	str	r2, [r7, #4]
	int rc = 0;
   2f884:	2300      	movs	r3, #0
   2f886:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   2f888:	687a      	ldr	r2, [r7, #4]
   2f88a:	68bb      	ldr	r3, [r7, #8]
   2f88c:	681b      	ldr	r3, [r3, #0]
   2f88e:	1ad3      	subs	r3, r2, r3
   2f890:	2b01      	cmp	r3, #1
   2f892:	dd1b      	ble.n	2f8cc <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   2f894:	68bb      	ldr	r3, [r7, #8]
   2f896:	0018      	movs	r0, r3
   2f898:	4b10      	ldr	r3, [pc, #64]	; (2f8dc <readMQTTLenString+0x64>)
   2f89a:	4798      	blx	r3
   2f89c:	0002      	movs	r2, r0
   2f89e:	68fb      	ldr	r3, [r7, #12]
   2f8a0:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   2f8a2:	68bb      	ldr	r3, [r7, #8]
   2f8a4:	681a      	ldr	r2, [r3, #0]
   2f8a6:	68fb      	ldr	r3, [r7, #12]
   2f8a8:	685b      	ldr	r3, [r3, #4]
   2f8aa:	18d2      	adds	r2, r2, r3
   2f8ac:	687b      	ldr	r3, [r7, #4]
   2f8ae:	429a      	cmp	r2, r3
   2f8b0:	d80c      	bhi.n	2f8cc <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   2f8b2:	68bb      	ldr	r3, [r7, #8]
   2f8b4:	681a      	ldr	r2, [r3, #0]
   2f8b6:	68fb      	ldr	r3, [r7, #12]
   2f8b8:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   2f8ba:	68bb      	ldr	r3, [r7, #8]
   2f8bc:	681a      	ldr	r2, [r3, #0]
   2f8be:	68fb      	ldr	r3, [r7, #12]
   2f8c0:	685b      	ldr	r3, [r3, #4]
   2f8c2:	18d2      	adds	r2, r2, r3
   2f8c4:	68bb      	ldr	r3, [r7, #8]
   2f8c6:	601a      	str	r2, [r3, #0]
			rc = 1;
   2f8c8:	2301      	movs	r3, #1
   2f8ca:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   2f8cc:	68fb      	ldr	r3, [r7, #12]
   2f8ce:	2200      	movs	r2, #0
   2f8d0:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   2f8d2:	697b      	ldr	r3, [r7, #20]
}
   2f8d4:	0018      	movs	r0, r3
   2f8d6:	46bd      	mov	sp, r7
   2f8d8:	b006      	add	sp, #24
   2f8da:	bd80      	pop	{r7, pc}
   2f8dc:	0002f6c9 	.word	0x0002f6c9

0002f8e0 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   2f8e0:	b580      	push	{r7, lr}
   2f8e2:	b086      	sub	sp, #24
   2f8e4:	af00      	add	r7, sp, #0
   2f8e6:	1d3b      	adds	r3, r7, #4
   2f8e8:	6018      	str	r0, [r3, #0]
   2f8ea:	6059      	str	r1, [r3, #4]
   2f8ec:	609a      	str	r2, [r3, #8]
	int rc = 0;
   2f8ee:	2300      	movs	r3, #0
   2f8f0:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   2f8f2:	1d3b      	adds	r3, r7, #4
   2f8f4:	681b      	ldr	r3, [r3, #0]
   2f8f6:	2b00      	cmp	r3, #0
   2f8f8:	d007      	beq.n	2f90a <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   2f8fa:	1d3b      	adds	r3, r7, #4
   2f8fc:	681b      	ldr	r3, [r3, #0]
   2f8fe:	0018      	movs	r0, r3
   2f900:	4b06      	ldr	r3, [pc, #24]	; (2f91c <MQTTstrlen+0x3c>)
   2f902:	4798      	blx	r3
   2f904:	0003      	movs	r3, r0
   2f906:	617b      	str	r3, [r7, #20]
   2f908:	e002      	b.n	2f910 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   2f90a:	1d3b      	adds	r3, r7, #4
   2f90c:	685b      	ldr	r3, [r3, #4]
   2f90e:	617b      	str	r3, [r7, #20]
	return rc;
   2f910:	697b      	ldr	r3, [r7, #20]
}
   2f912:	0018      	movs	r0, r3
   2f914:	46bd      	mov	sp, r7
   2f916:	b006      	add	sp, #24
   2f918:	bd80      	pop	{r7, pc}
   2f91a:	46c0      	nop			; (mov r8, r8)
   2f91c:	000346d3 	.word	0x000346d3

0002f920 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   2f920:	b580      	push	{r7, lr}
   2f922:	b086      	sub	sp, #24
   2f924:	af00      	add	r7, sp, #0
   2f926:	6078      	str	r0, [r7, #4]
   2f928:	6039      	str	r1, [r7, #0]
	int alen = 0,
   2f92a:	2300      	movs	r3, #0
   2f92c:	617b      	str	r3, [r7, #20]
		blen = 0;
   2f92e:	2300      	movs	r3, #0
   2f930:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   2f932:	687b      	ldr	r3, [r7, #4]
   2f934:	681b      	ldr	r3, [r3, #0]
   2f936:	2b00      	cmp	r3, #0
   2f938:	d00a      	beq.n	2f950 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   2f93a:	687b      	ldr	r3, [r7, #4]
   2f93c:	681b      	ldr	r3, [r3, #0]
   2f93e:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   2f940:	687b      	ldr	r3, [r7, #4]
   2f942:	681b      	ldr	r3, [r3, #0]
   2f944:	0018      	movs	r0, r3
   2f946:	4b12      	ldr	r3, [pc, #72]	; (2f990 <MQTTPacket_equals+0x70>)
   2f948:	4798      	blx	r3
   2f94a:	0003      	movs	r3, r0
   2f94c:	617b      	str	r3, [r7, #20]
   2f94e:	e005      	b.n	2f95c <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   2f950:	687b      	ldr	r3, [r7, #4]
   2f952:	689b      	ldr	r3, [r3, #8]
   2f954:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   2f956:	687b      	ldr	r3, [r7, #4]
   2f958:	685b      	ldr	r3, [r3, #4]
   2f95a:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   2f95c:	683b      	ldr	r3, [r7, #0]
   2f95e:	0018      	movs	r0, r3
   2f960:	4b0b      	ldr	r3, [pc, #44]	; (2f990 <MQTTPacket_equals+0x70>)
   2f962:	4798      	blx	r3
   2f964:	0003      	movs	r3, r0
   2f966:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   2f968:	697a      	ldr	r2, [r7, #20]
   2f96a:	68fb      	ldr	r3, [r7, #12]
   2f96c:	429a      	cmp	r2, r3
   2f96e:	d109      	bne.n	2f984 <MQTTPacket_equals+0x64>
   2f970:	697a      	ldr	r2, [r7, #20]
   2f972:	6839      	ldr	r1, [r7, #0]
   2f974:	693b      	ldr	r3, [r7, #16]
   2f976:	0018      	movs	r0, r3
   2f978:	4b06      	ldr	r3, [pc, #24]	; (2f994 <MQTTPacket_equals+0x74>)
   2f97a:	4798      	blx	r3
   2f97c:	1e03      	subs	r3, r0, #0
   2f97e:	d101      	bne.n	2f984 <MQTTPacket_equals+0x64>
   2f980:	2301      	movs	r3, #1
   2f982:	e000      	b.n	2f986 <MQTTPacket_equals+0x66>
   2f984:	2300      	movs	r3, #0
}
   2f986:	0018      	movs	r0, r3
   2f988:	46bd      	mov	sp, r7
   2f98a:	b006      	add	sp, #24
   2f98c:	bd80      	pop	{r7, pc}
   2f98e:	46c0      	nop			; (mov r8, r8)
   2f990:	000346d3 	.word	0x000346d3
   2f994:	000346e1 	.word	0x000346e1

0002f998 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   2f998:	b580      	push	{r7, lr}
   2f99a:	b086      	sub	sp, #24
   2f99c:	af00      	add	r7, sp, #0
   2f99e:	60f8      	str	r0, [r7, #12]
   2f9a0:	0038      	movs	r0, r7
   2f9a2:	6001      	str	r1, [r0, #0]
   2f9a4:	6042      	str	r2, [r0, #4]
   2f9a6:	6083      	str	r3, [r0, #8]
	int len = 0;
   2f9a8:	2300      	movs	r3, #0
   2f9aa:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   2f9ac:	003b      	movs	r3, r7
   2f9ae:	6818      	ldr	r0, [r3, #0]
   2f9b0:	6859      	ldr	r1, [r3, #4]
   2f9b2:	689a      	ldr	r2, [r3, #8]
   2f9b4:	4b09      	ldr	r3, [pc, #36]	; (2f9dc <MQTTSerialize_publishLength+0x44>)
   2f9b6:	4798      	blx	r3
   2f9b8:	0003      	movs	r3, r0
   2f9ba:	1c9a      	adds	r2, r3, #2
   2f9bc:	6a3b      	ldr	r3, [r7, #32]
   2f9be:	18d3      	adds	r3, r2, r3
   2f9c0:	697a      	ldr	r2, [r7, #20]
   2f9c2:	18d3      	adds	r3, r2, r3
   2f9c4:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   2f9c6:	68fb      	ldr	r3, [r7, #12]
   2f9c8:	2b00      	cmp	r3, #0
   2f9ca:	dd02      	ble.n	2f9d2 <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   2f9cc:	697b      	ldr	r3, [r7, #20]
   2f9ce:	3302      	adds	r3, #2
   2f9d0:	617b      	str	r3, [r7, #20]
	return len;
   2f9d2:	697b      	ldr	r3, [r7, #20]
}
   2f9d4:	0018      	movs	r0, r3
   2f9d6:	46bd      	mov	sp, r7
   2f9d8:	b006      	add	sp, #24
   2f9da:	bd80      	pop	{r7, pc}
   2f9dc:	0002f8e1 	.word	0x0002f8e1

0002f9e0 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   2f9e0:	b590      	push	{r4, r7, lr}
   2f9e2:	b08b      	sub	sp, #44	; 0x2c
   2f9e4:	af02      	add	r7, sp, #8
   2f9e6:	60f8      	str	r0, [r7, #12]
   2f9e8:	60b9      	str	r1, [r7, #8]
   2f9ea:	603b      	str	r3, [r7, #0]
   2f9ec:	1dfb      	adds	r3, r7, #7
   2f9ee:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   2f9f0:	68fb      	ldr	r3, [r7, #12]
   2f9f2:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   2f9f4:	2300      	movs	r3, #0
   2f9f6:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   2f9f8:	2300      	movs	r3, #0
   2f9fa:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   2f9fc:	2300      	movs	r3, #0
   2f9fe:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   2fa00:	2308      	movs	r3, #8
   2fa02:	2230      	movs	r2, #48	; 0x30
   2fa04:	4694      	mov	ip, r2
   2fa06:	44bc      	add	ip, r7
   2fa08:	4463      	add	r3, ip
   2fa0a:	6838      	ldr	r0, [r7, #0]
   2fa0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2fa0e:	9200      	str	r2, [sp, #0]
   2fa10:	6819      	ldr	r1, [r3, #0]
   2fa12:	685a      	ldr	r2, [r3, #4]
   2fa14:	689b      	ldr	r3, [r3, #8]
   2fa16:	4c46      	ldr	r4, [pc, #280]	; (2fb30 <MQTTSerialize_publish+0x150>)
   2fa18:	47a0      	blx	r4
   2fa1a:	0003      	movs	r3, r0
   2fa1c:	61bb      	str	r3, [r7, #24]
   2fa1e:	69bb      	ldr	r3, [r7, #24]
   2fa20:	0018      	movs	r0, r3
   2fa22:	4b44      	ldr	r3, [pc, #272]	; (2fb34 <MQTTSerialize_publish+0x154>)
   2fa24:	4798      	blx	r3
   2fa26:	0002      	movs	r2, r0
   2fa28:	68bb      	ldr	r3, [r7, #8]
   2fa2a:	429a      	cmp	r2, r3
   2fa2c:	dd03      	ble.n	2fa36 <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2fa2e:	2302      	movs	r3, #2
   2fa30:	425b      	negs	r3, r3
   2fa32:	61fb      	str	r3, [r7, #28]
		goto exit;
   2fa34:	e077      	b.n	2fb26 <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   2fa36:	2310      	movs	r3, #16
   2fa38:	18fb      	adds	r3, r7, r3
   2fa3a:	781a      	ldrb	r2, [r3, #0]
   2fa3c:	210f      	movs	r1, #15
   2fa3e:	400a      	ands	r2, r1
   2fa40:	1c11      	adds	r1, r2, #0
   2fa42:	2230      	movs	r2, #48	; 0x30
   2fa44:	430a      	orrs	r2, r1
   2fa46:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   2fa48:	1dfb      	adds	r3, r7, #7
   2fa4a:	781b      	ldrb	r3, [r3, #0]
   2fa4c:	2201      	movs	r2, #1
   2fa4e:	4013      	ands	r3, r2
   2fa50:	b2da      	uxtb	r2, r3
   2fa52:	2310      	movs	r3, #16
   2fa54:	18fb      	adds	r3, r7, r3
   2fa56:	2101      	movs	r1, #1
   2fa58:	400a      	ands	r2, r1
   2fa5a:	00d0      	lsls	r0, r2, #3
   2fa5c:	781a      	ldrb	r2, [r3, #0]
   2fa5e:	2108      	movs	r1, #8
   2fa60:	438a      	bics	r2, r1
   2fa62:	1c11      	adds	r1, r2, #0
   2fa64:	1c02      	adds	r2, r0, #0
   2fa66:	430a      	orrs	r2, r1
   2fa68:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   2fa6a:	683b      	ldr	r3, [r7, #0]
   2fa6c:	b2db      	uxtb	r3, r3
   2fa6e:	1c1a      	adds	r2, r3, #0
   2fa70:	2303      	movs	r3, #3
   2fa72:	4013      	ands	r3, r2
   2fa74:	b2da      	uxtb	r2, r3
   2fa76:	2310      	movs	r3, #16
   2fa78:	18fb      	adds	r3, r7, r3
   2fa7a:	2103      	movs	r1, #3
   2fa7c:	400a      	ands	r2, r1
   2fa7e:	1890      	adds	r0, r2, r2
   2fa80:	781a      	ldrb	r2, [r3, #0]
   2fa82:	2106      	movs	r1, #6
   2fa84:	438a      	bics	r2, r1
   2fa86:	1c11      	adds	r1, r2, #0
   2fa88:	1c02      	adds	r2, r0, #0
   2fa8a:	430a      	orrs	r2, r1
   2fa8c:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   2fa8e:	2330      	movs	r3, #48	; 0x30
   2fa90:	18fb      	adds	r3, r7, r3
   2fa92:	781b      	ldrb	r3, [r3, #0]
   2fa94:	2201      	movs	r2, #1
   2fa96:	4013      	ands	r3, r2
   2fa98:	b2da      	uxtb	r2, r3
   2fa9a:	2310      	movs	r3, #16
   2fa9c:	18fb      	adds	r3, r7, r3
   2fa9e:	2101      	movs	r1, #1
   2faa0:	400a      	ands	r2, r1
   2faa2:	0010      	movs	r0, r2
   2faa4:	781a      	ldrb	r2, [r3, #0]
   2faa6:	2101      	movs	r1, #1
   2faa8:	438a      	bics	r2, r1
   2faaa:	1c11      	adds	r1, r2, #0
   2faac:	1c02      	adds	r2, r0, #0
   2faae:	430a      	orrs	r2, r1
   2fab0:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2fab2:	2310      	movs	r3, #16
   2fab4:	18fb      	adds	r3, r7, r3
   2fab6:	781a      	ldrb	r2, [r3, #0]
   2fab8:	2314      	movs	r3, #20
   2faba:	18fb      	adds	r3, r7, r3
   2fabc:	0011      	movs	r1, r2
   2fabe:	0018      	movs	r0, r3
   2fac0:	4b1d      	ldr	r3, [pc, #116]	; (2fb38 <MQTTSerialize_publish+0x158>)
   2fac2:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   2fac4:	697b      	ldr	r3, [r7, #20]
   2fac6:	69ba      	ldr	r2, [r7, #24]
   2fac8:	0011      	movs	r1, r2
   2faca:	0018      	movs	r0, r3
   2facc:	4b1b      	ldr	r3, [pc, #108]	; (2fb3c <MQTTSerialize_publish+0x15c>)
   2face:	4798      	blx	r3
   2fad0:	0002      	movs	r2, r0
   2fad2:	697b      	ldr	r3, [r7, #20]
   2fad4:	189b      	adds	r3, r3, r2
   2fad6:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   2fad8:	2308      	movs	r3, #8
   2fada:	2230      	movs	r2, #48	; 0x30
   2fadc:	4694      	mov	ip, r2
   2fade:	44bc      	add	ip, r7
   2fae0:	4463      	add	r3, ip
   2fae2:	2214      	movs	r2, #20
   2fae4:	18b8      	adds	r0, r7, r2
   2fae6:	6819      	ldr	r1, [r3, #0]
   2fae8:	685a      	ldr	r2, [r3, #4]
   2faea:	689b      	ldr	r3, [r3, #8]
   2faec:	4c14      	ldr	r4, [pc, #80]	; (2fb40 <MQTTSerialize_publish+0x160>)
   2faee:	47a0      	blx	r4

	if (qos > 0)
   2faf0:	683b      	ldr	r3, [r7, #0]
   2faf2:	2b00      	cmp	r3, #0
   2faf4:	dd08      	ble.n	2fb08 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   2faf6:	2334      	movs	r3, #52	; 0x34
   2faf8:	18fb      	adds	r3, r7, r3
   2fafa:	881a      	ldrh	r2, [r3, #0]
   2fafc:	2314      	movs	r3, #20
   2fafe:	18fb      	adds	r3, r7, r3
   2fb00:	0011      	movs	r1, r2
   2fb02:	0018      	movs	r0, r3
   2fb04:	4b0f      	ldr	r3, [pc, #60]	; (2fb44 <MQTTSerialize_publish+0x164>)
   2fb06:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   2fb08:	697b      	ldr	r3, [r7, #20]
   2fb0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2fb0c:	6c79      	ldr	r1, [r7, #68]	; 0x44
   2fb0e:	0018      	movs	r0, r3
   2fb10:	4b0d      	ldr	r3, [pc, #52]	; (2fb48 <MQTTSerialize_publish+0x168>)
   2fb12:	4798      	blx	r3
	ptr += payloadlen;
   2fb14:	697a      	ldr	r2, [r7, #20]
   2fb16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2fb18:	18d3      	adds	r3, r2, r3
   2fb1a:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   2fb1c:	697b      	ldr	r3, [r7, #20]
   2fb1e:	001a      	movs	r2, r3
   2fb20:	68fb      	ldr	r3, [r7, #12]
   2fb22:	1ad3      	subs	r3, r2, r3
   2fb24:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fb26:	69fb      	ldr	r3, [r7, #28]
}
   2fb28:	0018      	movs	r0, r3
   2fb2a:	46bd      	mov	sp, r7
   2fb2c:	b009      	add	sp, #36	; 0x24
   2fb2e:	bd90      	pop	{r4, r7, pc}
   2fb30:	0002f999 	.word	0x0002f999
   2fb34:	0002f605 	.word	0x0002f605
   2fb38:	0002f727 	.word	0x0002f727
   2fb3c:	0002f50d 	.word	0x0002f50d
   2fb40:	0002f7f9 	.word	0x0002f7f9
   2fb44:	0002f751 	.word	0x0002f751
   2fb48:	000342e5 	.word	0x000342e5

0002fb4c <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   2fb4c:	b580      	push	{r7, lr}
   2fb4e:	b088      	sub	sp, #32
   2fb50:	af00      	add	r7, sp, #0
   2fb52:	60f8      	str	r0, [r7, #12]
   2fb54:	60b9      	str	r1, [r7, #8]
   2fb56:	0019      	movs	r1, r3
   2fb58:	1dfb      	adds	r3, r7, #7
   2fb5a:	701a      	strb	r2, [r3, #0]
   2fb5c:	1dbb      	adds	r3, r7, #6
   2fb5e:	1c0a      	adds	r2, r1, #0
   2fb60:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   2fb62:	2300      	movs	r3, #0
   2fb64:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   2fb66:	2300      	movs	r3, #0
   2fb68:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   2fb6a:	68fb      	ldr	r3, [r7, #12]
   2fb6c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   2fb6e:	68bb      	ldr	r3, [r7, #8]
   2fb70:	2b03      	cmp	r3, #3
   2fb72:	dc03      	bgt.n	2fb7c <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2fb74:	2302      	movs	r3, #2
   2fb76:	425b      	negs	r3, r3
   2fb78:	61fb      	str	r3, [r7, #28]
		goto exit;
   2fb7a:	e055      	b.n	2fc28 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   2fb7c:	1dfb      	adds	r3, r7, #7
   2fb7e:	781b      	ldrb	r3, [r3, #0]
   2fb80:	220f      	movs	r2, #15
   2fb82:	4013      	ands	r3, r2
   2fb84:	b2da      	uxtb	r2, r3
   2fb86:	2318      	movs	r3, #24
   2fb88:	18fb      	adds	r3, r7, r3
   2fb8a:	0110      	lsls	r0, r2, #4
   2fb8c:	781a      	ldrb	r2, [r3, #0]
   2fb8e:	210f      	movs	r1, #15
   2fb90:	400a      	ands	r2, r1
   2fb92:	1c11      	adds	r1, r2, #0
   2fb94:	1c02      	adds	r2, r0, #0
   2fb96:	430a      	orrs	r2, r1
   2fb98:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   2fb9a:	1dbb      	adds	r3, r7, #6
   2fb9c:	781b      	ldrb	r3, [r3, #0]
   2fb9e:	2201      	movs	r2, #1
   2fba0:	4013      	ands	r3, r2
   2fba2:	b2da      	uxtb	r2, r3
   2fba4:	2318      	movs	r3, #24
   2fba6:	18fb      	adds	r3, r7, r3
   2fba8:	2101      	movs	r1, #1
   2fbaa:	400a      	ands	r2, r1
   2fbac:	00d0      	lsls	r0, r2, #3
   2fbae:	781a      	ldrb	r2, [r3, #0]
   2fbb0:	2108      	movs	r1, #8
   2fbb2:	438a      	bics	r2, r1
   2fbb4:	1c11      	adds	r1, r2, #0
   2fbb6:	1c02      	adds	r2, r0, #0
   2fbb8:	430a      	orrs	r2, r1
   2fbba:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   2fbbc:	1dfb      	adds	r3, r7, #7
   2fbbe:	781b      	ldrb	r3, [r3, #0]
   2fbc0:	3b06      	subs	r3, #6
   2fbc2:	425a      	negs	r2, r3
   2fbc4:	4153      	adcs	r3, r2
   2fbc6:	b2db      	uxtb	r3, r3
   2fbc8:	1c1a      	adds	r2, r3, #0
   2fbca:	2303      	movs	r3, #3
   2fbcc:	4013      	ands	r3, r2
   2fbce:	b2da      	uxtb	r2, r3
   2fbd0:	2318      	movs	r3, #24
   2fbd2:	18fb      	adds	r3, r7, r3
   2fbd4:	2103      	movs	r1, #3
   2fbd6:	400a      	ands	r2, r1
   2fbd8:	1890      	adds	r0, r2, r2
   2fbda:	781a      	ldrb	r2, [r3, #0]
   2fbdc:	2106      	movs	r1, #6
   2fbde:	438a      	bics	r2, r1
   2fbe0:	1c11      	adds	r1, r2, #0
   2fbe2:	1c02      	adds	r2, r0, #0
   2fbe4:	430a      	orrs	r2, r1
   2fbe6:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2fbe8:	2318      	movs	r3, #24
   2fbea:	18fb      	adds	r3, r7, r3
   2fbec:	781a      	ldrb	r2, [r3, #0]
   2fbee:	2314      	movs	r3, #20
   2fbf0:	18fb      	adds	r3, r7, r3
   2fbf2:	0011      	movs	r1, r2
   2fbf4:	0018      	movs	r0, r3
   2fbf6:	4b0f      	ldr	r3, [pc, #60]	; (2fc34 <MQTTSerialize_ack+0xe8>)
   2fbf8:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   2fbfa:	697b      	ldr	r3, [r7, #20]
   2fbfc:	2102      	movs	r1, #2
   2fbfe:	0018      	movs	r0, r3
   2fc00:	4b0d      	ldr	r3, [pc, #52]	; (2fc38 <MQTTSerialize_ack+0xec>)
   2fc02:	4798      	blx	r3
   2fc04:	0002      	movs	r2, r0
   2fc06:	697b      	ldr	r3, [r7, #20]
   2fc08:	189b      	adds	r3, r3, r2
   2fc0a:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   2fc0c:	2328      	movs	r3, #40	; 0x28
   2fc0e:	18fb      	adds	r3, r7, r3
   2fc10:	881a      	ldrh	r2, [r3, #0]
   2fc12:	2314      	movs	r3, #20
   2fc14:	18fb      	adds	r3, r7, r3
   2fc16:	0011      	movs	r1, r2
   2fc18:	0018      	movs	r0, r3
   2fc1a:	4b08      	ldr	r3, [pc, #32]	; (2fc3c <MQTTSerialize_ack+0xf0>)
   2fc1c:	4798      	blx	r3
	rc = ptr - buf;
   2fc1e:	697b      	ldr	r3, [r7, #20]
   2fc20:	001a      	movs	r2, r3
   2fc22:	68fb      	ldr	r3, [r7, #12]
   2fc24:	1ad3      	subs	r3, r2, r3
   2fc26:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fc28:	69fb      	ldr	r3, [r7, #28]
}
   2fc2a:	0018      	movs	r0, r3
   2fc2c:	46bd      	mov	sp, r7
   2fc2e:	b008      	add	sp, #32
   2fc30:	bd80      	pop	{r7, pc}
   2fc32:	46c0      	nop			; (mov r8, r8)
   2fc34:	0002f727 	.word	0x0002f727
   2fc38:	0002f50d 	.word	0x0002f50d
   2fc3c:	0002f751 	.word	0x0002f751

0002fc40 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   2fc40:	b580      	push	{r7, lr}
   2fc42:	b084      	sub	sp, #16
   2fc44:	af00      	add	r7, sp, #0
   2fc46:	6078      	str	r0, [r7, #4]
   2fc48:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   2fc4a:	2302      	movs	r3, #2
   2fc4c:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   2fc4e:	2300      	movs	r3, #0
   2fc50:	60fb      	str	r3, [r7, #12]
   2fc52:	e014      	b.n	2fc7e <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   2fc54:	68fa      	ldr	r2, [r7, #12]
   2fc56:	0013      	movs	r3, r2
   2fc58:	005b      	lsls	r3, r3, #1
   2fc5a:	189b      	adds	r3, r3, r2
   2fc5c:	009b      	lsls	r3, r3, #2
   2fc5e:	001a      	movs	r2, r3
   2fc60:	683b      	ldr	r3, [r7, #0]
   2fc62:	189b      	adds	r3, r3, r2
   2fc64:	6818      	ldr	r0, [r3, #0]
   2fc66:	6859      	ldr	r1, [r3, #4]
   2fc68:	689a      	ldr	r2, [r3, #8]
   2fc6a:	4b09      	ldr	r3, [pc, #36]	; (2fc90 <MQTTSerialize_subscribeLength+0x50>)
   2fc6c:	4798      	blx	r3
   2fc6e:	0003      	movs	r3, r0
   2fc70:	3303      	adds	r3, #3
   2fc72:	68ba      	ldr	r2, [r7, #8]
   2fc74:	18d3      	adds	r3, r2, r3
   2fc76:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   2fc78:	68fb      	ldr	r3, [r7, #12]
   2fc7a:	3301      	adds	r3, #1
   2fc7c:	60fb      	str	r3, [r7, #12]
   2fc7e:	68fa      	ldr	r2, [r7, #12]
   2fc80:	687b      	ldr	r3, [r7, #4]
   2fc82:	429a      	cmp	r2, r3
   2fc84:	dbe6      	blt.n	2fc54 <MQTTSerialize_subscribeLength+0x14>
	return len;
   2fc86:	68bb      	ldr	r3, [r7, #8]
}
   2fc88:	0018      	movs	r0, r3
   2fc8a:	46bd      	mov	sp, r7
   2fc8c:	b004      	add	sp, #16
   2fc8e:	bd80      	pop	{r7, pc}
   2fc90:	0002f8e1 	.word	0x0002f8e1

0002fc94 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   2fc94:	b590      	push	{r4, r7, lr}
   2fc96:	b08b      	sub	sp, #44	; 0x2c
   2fc98:	af00      	add	r7, sp, #0
   2fc9a:	60f8      	str	r0, [r7, #12]
   2fc9c:	60b9      	str	r1, [r7, #8]
   2fc9e:	0019      	movs	r1, r3
   2fca0:	1dfb      	adds	r3, r7, #7
   2fca2:	701a      	strb	r2, [r3, #0]
   2fca4:	1d3b      	adds	r3, r7, #4
   2fca6:	1c0a      	adds	r2, r1, #0
   2fca8:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   2fcaa:	68fb      	ldr	r3, [r7, #12]
   2fcac:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   2fcae:	2300      	movs	r3, #0
   2fcb0:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   2fcb2:	2300      	movs	r3, #0
   2fcb4:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   2fcb6:	2300      	movs	r3, #0
   2fcb8:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   2fcba:	2300      	movs	r3, #0
   2fcbc:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   2fcbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2fcc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2fcc2:	0011      	movs	r1, r2
   2fcc4:	0018      	movs	r0, r3
   2fcc6:	4b41      	ldr	r3, [pc, #260]	; (2fdcc <MQTTSerialize_subscribe+0x138>)
   2fcc8:	4798      	blx	r3
   2fcca:	0003      	movs	r3, r0
   2fccc:	61fb      	str	r3, [r7, #28]
   2fcce:	69fb      	ldr	r3, [r7, #28]
   2fcd0:	0018      	movs	r0, r3
   2fcd2:	4b3f      	ldr	r3, [pc, #252]	; (2fdd0 <MQTTSerialize_subscribe+0x13c>)
   2fcd4:	4798      	blx	r3
   2fcd6:	0002      	movs	r2, r0
   2fcd8:	68bb      	ldr	r3, [r7, #8]
   2fcda:	429a      	cmp	r2, r3
   2fcdc:	dd03      	ble.n	2fce6 <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2fcde:	2302      	movs	r3, #2
   2fce0:	425b      	negs	r3, r3
   2fce2:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   2fce4:	e06c      	b.n	2fdc0 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   2fce6:	2314      	movs	r3, #20
   2fce8:	18fb      	adds	r3, r7, r3
   2fcea:	2200      	movs	r2, #0
   2fcec:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   2fcee:	2314      	movs	r3, #20
   2fcf0:	18fb      	adds	r3, r7, r3
   2fcf2:	781a      	ldrb	r2, [r3, #0]
   2fcf4:	210f      	movs	r1, #15
   2fcf6:	400a      	ands	r2, r1
   2fcf8:	1c11      	adds	r1, r2, #0
   2fcfa:	2280      	movs	r2, #128	; 0x80
   2fcfc:	4252      	negs	r2, r2
   2fcfe:	430a      	orrs	r2, r1
   2fd00:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   2fd02:	1dfb      	adds	r3, r7, #7
   2fd04:	781b      	ldrb	r3, [r3, #0]
   2fd06:	2201      	movs	r2, #1
   2fd08:	4013      	ands	r3, r2
   2fd0a:	b2da      	uxtb	r2, r3
   2fd0c:	2314      	movs	r3, #20
   2fd0e:	18fb      	adds	r3, r7, r3
   2fd10:	2101      	movs	r1, #1
   2fd12:	400a      	ands	r2, r1
   2fd14:	00d0      	lsls	r0, r2, #3
   2fd16:	781a      	ldrb	r2, [r3, #0]
   2fd18:	2108      	movs	r1, #8
   2fd1a:	438a      	bics	r2, r1
   2fd1c:	1c11      	adds	r1, r2, #0
   2fd1e:	1c02      	adds	r2, r0, #0
   2fd20:	430a      	orrs	r2, r1
   2fd22:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   2fd24:	2314      	movs	r3, #20
   2fd26:	18fb      	adds	r3, r7, r3
   2fd28:	781a      	ldrb	r2, [r3, #0]
   2fd2a:	2106      	movs	r1, #6
   2fd2c:	438a      	bics	r2, r1
   2fd2e:	1c11      	adds	r1, r2, #0
   2fd30:	2202      	movs	r2, #2
   2fd32:	430a      	orrs	r2, r1
   2fd34:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2fd36:	2314      	movs	r3, #20
   2fd38:	18fb      	adds	r3, r7, r3
   2fd3a:	781a      	ldrb	r2, [r3, #0]
   2fd3c:	2318      	movs	r3, #24
   2fd3e:	18fb      	adds	r3, r7, r3
   2fd40:	0011      	movs	r1, r2
   2fd42:	0018      	movs	r0, r3
   2fd44:	4b23      	ldr	r3, [pc, #140]	; (2fdd4 <MQTTSerialize_subscribe+0x140>)
   2fd46:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   2fd48:	69bb      	ldr	r3, [r7, #24]
   2fd4a:	69fa      	ldr	r2, [r7, #28]
   2fd4c:	0011      	movs	r1, r2
   2fd4e:	0018      	movs	r0, r3
   2fd50:	4b21      	ldr	r3, [pc, #132]	; (2fdd8 <MQTTSerialize_subscribe+0x144>)
   2fd52:	4798      	blx	r3
   2fd54:	0002      	movs	r2, r0
   2fd56:	69bb      	ldr	r3, [r7, #24]
   2fd58:	189b      	adds	r3, r3, r2
   2fd5a:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   2fd5c:	1d3b      	adds	r3, r7, #4
   2fd5e:	881a      	ldrh	r2, [r3, #0]
   2fd60:	2318      	movs	r3, #24
   2fd62:	18fb      	adds	r3, r7, r3
   2fd64:	0011      	movs	r1, r2
   2fd66:	0018      	movs	r0, r3
   2fd68:	4b1c      	ldr	r3, [pc, #112]	; (2fddc <MQTTSerialize_subscribe+0x148>)
   2fd6a:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   2fd6c:	2300      	movs	r3, #0
   2fd6e:	623b      	str	r3, [r7, #32]
   2fd70:	e01d      	b.n	2fdae <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   2fd72:	6a3a      	ldr	r2, [r7, #32]
   2fd74:	0013      	movs	r3, r2
   2fd76:	005b      	lsls	r3, r3, #1
   2fd78:	189b      	adds	r3, r3, r2
   2fd7a:	009b      	lsls	r3, r3, #2
   2fd7c:	001a      	movs	r2, r3
   2fd7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2fd80:	189b      	adds	r3, r3, r2
   2fd82:	2218      	movs	r2, #24
   2fd84:	18b8      	adds	r0, r7, r2
   2fd86:	6819      	ldr	r1, [r3, #0]
   2fd88:	685a      	ldr	r2, [r3, #4]
   2fd8a:	689b      	ldr	r3, [r3, #8]
   2fd8c:	4c14      	ldr	r4, [pc, #80]	; (2fde0 <MQTTSerialize_subscribe+0x14c>)
   2fd8e:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   2fd90:	6a3b      	ldr	r3, [r7, #32]
   2fd92:	009b      	lsls	r3, r3, #2
   2fd94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2fd96:	18d3      	adds	r3, r2, r3
   2fd98:	681b      	ldr	r3, [r3, #0]
   2fd9a:	b2da      	uxtb	r2, r3
   2fd9c:	2318      	movs	r3, #24
   2fd9e:	18fb      	adds	r3, r7, r3
   2fda0:	0011      	movs	r1, r2
   2fda2:	0018      	movs	r0, r3
   2fda4:	4b0b      	ldr	r3, [pc, #44]	; (2fdd4 <MQTTSerialize_subscribe+0x140>)
   2fda6:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   2fda8:	6a3b      	ldr	r3, [r7, #32]
   2fdaa:	3301      	adds	r3, #1
   2fdac:	623b      	str	r3, [r7, #32]
   2fdae:	6a3a      	ldr	r2, [r7, #32]
   2fdb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2fdb2:	429a      	cmp	r2, r3
   2fdb4:	dbdd      	blt.n	2fd72 <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   2fdb6:	69bb      	ldr	r3, [r7, #24]
   2fdb8:	001a      	movs	r2, r3
   2fdba:	68fb      	ldr	r3, [r7, #12]
   2fdbc:	1ad3      	subs	r3, r2, r3
   2fdbe:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fdc2:	0018      	movs	r0, r3
   2fdc4:	46bd      	mov	sp, r7
   2fdc6:	b00b      	add	sp, #44	; 0x2c
   2fdc8:	bd90      	pop	{r4, r7, pc}
   2fdca:	46c0      	nop			; (mov r8, r8)
   2fdcc:	0002fc41 	.word	0x0002fc41
   2fdd0:	0002f605 	.word	0x0002f605
   2fdd4:	0002f727 	.word	0x0002f727
   2fdd8:	0002f50d 	.word	0x0002f50d
   2fddc:	0002f751 	.word	0x0002f751
   2fde0:	0002f7f9 	.word	0x0002f7f9

0002fde4 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   2fde4:	b590      	push	{r4, r7, lr}
   2fde6:	b08b      	sub	sp, #44	; 0x2c
   2fde8:	af00      	add	r7, sp, #0
   2fdea:	60f8      	str	r0, [r7, #12]
   2fdec:	60b9      	str	r1, [r7, #8]
   2fdee:	607a      	str	r2, [r7, #4]
   2fdf0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2fdf2:	2300      	movs	r3, #0
   2fdf4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2fdf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2fdf8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2fdfa:	2300      	movs	r3, #0
   2fdfc:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2fdfe:	2300      	movs	r3, #0
   2fe00:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2fe02:	2318      	movs	r3, #24
   2fe04:	18fb      	adds	r3, r7, r3
   2fe06:	0018      	movs	r0, r3
   2fe08:	4b2c      	ldr	r3, [pc, #176]	; (2febc <MQTTDeserialize_suback+0xd8>)
   2fe0a:	4798      	blx	r3
   2fe0c:	0003      	movs	r3, r0
   2fe0e:	001a      	movs	r2, r3
   2fe10:	231c      	movs	r3, #28
   2fe12:	18fb      	adds	r3, r7, r3
   2fe14:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   2fe16:	231c      	movs	r3, #28
   2fe18:	18fb      	adds	r3, r7, r3
   2fe1a:	781b      	ldrb	r3, [r3, #0]
   2fe1c:	220f      	movs	r2, #15
   2fe1e:	4393      	bics	r3, r2
   2fe20:	b2db      	uxtb	r3, r3
   2fe22:	2b90      	cmp	r3, #144	; 0x90
   2fe24:	d142      	bne.n	2feac <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2fe26:	69bb      	ldr	r3, [r7, #24]
   2fe28:	2214      	movs	r2, #20
   2fe2a:	18ba      	adds	r2, r7, r2
   2fe2c:	0011      	movs	r1, r2
   2fe2e:	0018      	movs	r0, r3
   2fe30:	4b23      	ldr	r3, [pc, #140]	; (2fec0 <MQTTDeserialize_suback+0xdc>)
   2fe32:	4798      	blx	r3
   2fe34:	0003      	movs	r3, r0
   2fe36:	627b      	str	r3, [r7, #36]	; 0x24
   2fe38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2fe3a:	69bb      	ldr	r3, [r7, #24]
   2fe3c:	189b      	adds	r3, r3, r2
   2fe3e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2fe40:	69bb      	ldr	r3, [r7, #24]
   2fe42:	697a      	ldr	r2, [r7, #20]
   2fe44:	189b      	adds	r3, r3, r2
   2fe46:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   2fe48:	6a3b      	ldr	r3, [r7, #32]
   2fe4a:	69ba      	ldr	r2, [r7, #24]
   2fe4c:	1a9b      	subs	r3, r3, r2
   2fe4e:	2b01      	cmp	r3, #1
   2fe50:	dd2e      	ble.n	2feb0 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   2fe52:	2318      	movs	r3, #24
   2fe54:	18fb      	adds	r3, r7, r3
   2fe56:	0018      	movs	r0, r3
   2fe58:	4b1a      	ldr	r3, [pc, #104]	; (2fec4 <MQTTDeserialize_suback+0xe0>)
   2fe5a:	4798      	blx	r3
   2fe5c:	0003      	movs	r3, r0
   2fe5e:	b29a      	uxth	r2, r3
   2fe60:	68fb      	ldr	r3, [r7, #12]
   2fe62:	801a      	strh	r2, [r3, #0]

	*count = 0;
   2fe64:	687b      	ldr	r3, [r7, #4]
   2fe66:	2200      	movs	r2, #0
   2fe68:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   2fe6a:	e018      	b.n	2fe9e <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   2fe6c:	687b      	ldr	r3, [r7, #4]
   2fe6e:	681a      	ldr	r2, [r3, #0]
   2fe70:	68bb      	ldr	r3, [r7, #8]
   2fe72:	429a      	cmp	r2, r3
   2fe74:	dd03      	ble.n	2fe7e <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   2fe76:	2301      	movs	r3, #1
   2fe78:	425b      	negs	r3, r3
   2fe7a:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   2fe7c:	e019      	b.n	2feb2 <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   2fe7e:	687b      	ldr	r3, [r7, #4]
   2fe80:	681a      	ldr	r2, [r3, #0]
   2fe82:	1c51      	adds	r1, r2, #1
   2fe84:	687b      	ldr	r3, [r7, #4]
   2fe86:	6019      	str	r1, [r3, #0]
   2fe88:	0013      	movs	r3, r2
   2fe8a:	009b      	lsls	r3, r3, #2
   2fe8c:	683a      	ldr	r2, [r7, #0]
   2fe8e:	18d4      	adds	r4, r2, r3
   2fe90:	2318      	movs	r3, #24
   2fe92:	18fb      	adds	r3, r7, r3
   2fe94:	0018      	movs	r0, r3
   2fe96:	4b09      	ldr	r3, [pc, #36]	; (2febc <MQTTDeserialize_suback+0xd8>)
   2fe98:	4798      	blx	r3
   2fe9a:	0003      	movs	r3, r0
   2fe9c:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   2fe9e:	69ba      	ldr	r2, [r7, #24]
   2fea0:	6a3b      	ldr	r3, [r7, #32]
   2fea2:	429a      	cmp	r2, r3
   2fea4:	d3e2      	bcc.n	2fe6c <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   2fea6:	2301      	movs	r3, #1
   2fea8:	627b      	str	r3, [r7, #36]	; 0x24
   2feaa:	e002      	b.n	2feb2 <MQTTDeserialize_suback+0xce>
		goto exit;
   2feac:	46c0      	nop			; (mov r8, r8)
   2feae:	e000      	b.n	2feb2 <MQTTDeserialize_suback+0xce>
		goto exit;
   2feb0:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2feb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2feb4:	0018      	movs	r0, r3
   2feb6:	46bd      	mov	sp, r7
   2feb8:	b00b      	add	sp, #44	; 0x2c
   2feba:	bd90      	pop	{r4, r7, pc}
   2febc:	0002f6fb 	.word	0x0002f6fb
   2fec0:	0002f695 	.word	0x0002f695
   2fec4:	0002f6c9 	.word	0x0002f6c9

0002fec8 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   2fec8:	b580      	push	{r7, lr}
   2feca:	b082      	sub	sp, #8
   2fecc:	af00      	add	r7, sp, #0
   2fece:	6078      	str	r0, [r7, #4]
	config->port = 80;
   2fed0:	687b      	ldr	r3, [r7, #4]
   2fed2:	2250      	movs	r2, #80	; 0x50
   2fed4:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2fed6:	687b      	ldr	r3, [r7, #4]
   2fed8:	2200      	movs	r2, #0
   2feda:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   2fedc:	687b      	ldr	r3, [r7, #4]
   2fede:	4a0b      	ldr	r2, [pc, #44]	; (2ff0c <http_client_get_config_defaults+0x44>)
   2fee0:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   2fee2:	687b      	ldr	r3, [r7, #4]
   2fee4:	2200      	movs	r2, #0
   2fee6:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   2fee8:	687b      	ldr	r3, [r7, #4]
   2feea:	2200      	movs	r2, #0
   2feec:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   2feee:	687b      	ldr	r3, [r7, #4]
   2fef0:	2280      	movs	r2, #128	; 0x80
   2fef2:	0052      	lsls	r2, r2, #1
   2fef4:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   2fef6:	687b      	ldr	r3, [r7, #4]
   2fef8:	2252      	movs	r2, #82	; 0x52
   2fefa:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   2fefc:	687b      	ldr	r3, [r7, #4]
   2fefe:	4a04      	ldr	r2, [pc, #16]	; (2ff10 <http_client_get_config_defaults+0x48>)
   2ff00:	619a      	str	r2, [r3, #24]
}
   2ff02:	46c0      	nop			; (mov r8, r8)
   2ff04:	46bd      	mov	sp, r7
   2ff06:	b002      	add	sp, #8
   2ff08:	bd80      	pop	{r7, pc}
   2ff0a:	46c0      	nop			; (mov r8, r8)
   2ff0c:	00004e20 	.word	0x00004e20
   2ff10:	0003930c 	.word	0x0003930c

0002ff14 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   2ff14:	b590      	push	{r4, r7, lr}
   2ff16:	b083      	sub	sp, #12
   2ff18:	af00      	add	r7, sp, #0
   2ff1a:	6078      	str	r0, [r7, #4]
   2ff1c:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   2ff1e:	687b      	ldr	r3, [r7, #4]
   2ff20:	2b00      	cmp	r3, #0
   2ff22:	d002      	beq.n	2ff2a <http_client_init+0x16>
   2ff24:	683b      	ldr	r3, [r7, #0]
   2ff26:	2b00      	cmp	r3, #0
   2ff28:	d102      	bne.n	2ff30 <http_client_init+0x1c>
		return -EINVAL;
   2ff2a:	2316      	movs	r3, #22
   2ff2c:	425b      	negs	r3, r3
   2ff2e:	e058      	b.n	2ffe2 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   2ff30:	683b      	ldr	r3, [r7, #0]
   2ff32:	691b      	ldr	r3, [r3, #16]
   2ff34:	2b00      	cmp	r3, #0
   2ff36:	d102      	bne.n	2ff3e <http_client_init+0x2a>
		return -EINVAL;
   2ff38:	2316      	movs	r3, #22
   2ff3a:	425b      	negs	r3, r3
   2ff3c:	e051      	b.n	2ffe2 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   2ff3e:	683b      	ldr	r3, [r7, #0]
   2ff40:	685b      	ldr	r3, [r3, #4]
   2ff42:	2b00      	cmp	r3, #0
   2ff44:	d102      	bne.n	2ff4c <http_client_init+0x38>
		return -EINVAL;
   2ff46:	2316      	movs	r3, #22
   2ff48:	425b      	negs	r3, r3
   2ff4a:	e04a      	b.n	2ffe2 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   2ff4c:	683b      	ldr	r3, [r7, #0]
   2ff4e:	695b      	ldr	r3, [r3, #20]
   2ff50:	2b51      	cmp	r3, #81	; 0x51
   2ff52:	d802      	bhi.n	2ff5a <http_client_init+0x46>
		return -EINVAL;
   2ff54:	2316      	movs	r3, #22
   2ff56:	425b      	negs	r3, r3
   2ff58:	e043      	b.n	2ffe2 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   2ff5a:	687b      	ldr	r3, [r7, #4]
   2ff5c:	22e8      	movs	r2, #232	; 0xe8
   2ff5e:	2100      	movs	r1, #0
   2ff60:	0018      	movs	r0, r3
   2ff62:	4b22      	ldr	r3, [pc, #136]	; (2ffec <http_client_init+0xd8>)
   2ff64:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   2ff66:	687b      	ldr	r3, [r7, #4]
   2ff68:	3350      	adds	r3, #80	; 0x50
   2ff6a:	6839      	ldr	r1, [r7, #0]
   2ff6c:	221c      	movs	r2, #28
   2ff6e:	0018      	movs	r0, r3
   2ff70:	4b1f      	ldr	r3, [pc, #124]	; (2fff0 <http_client_init+0xdc>)
   2ff72:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   2ff74:	687b      	ldr	r3, [r7, #4]
   2ff76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2ff78:	2b00      	cmp	r3, #0
   2ff7a:	d115      	bne.n	2ffa8 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   2ff7c:	683b      	ldr	r3, [r7, #0]
   2ff7e:	691b      	ldr	r3, [r3, #16]
   2ff80:	0018      	movs	r0, r3
   2ff82:	4b1c      	ldr	r3, [pc, #112]	; (2fff4 <http_client_init+0xe0>)
   2ff84:	4798      	blx	r3
   2ff86:	0003      	movs	r3, r0
   2ff88:	001a      	movs	r2, r3
   2ff8a:	687b      	ldr	r3, [r7, #4]
   2ff8c:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   2ff8e:	687b      	ldr	r3, [r7, #4]
   2ff90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2ff92:	2b00      	cmp	r3, #0
   2ff94:	d102      	bne.n	2ff9c <http_client_init+0x88>
			return -ENOMEM;
   2ff96:	230c      	movs	r3, #12
   2ff98:	425b      	negs	r3, r3
   2ff9a:	e022      	b.n	2ffe2 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   2ff9c:	687b      	ldr	r3, [r7, #4]
   2ff9e:	2241      	movs	r2, #65	; 0x41
   2ffa0:	5c99      	ldrb	r1, [r3, r2]
   2ffa2:	2004      	movs	r0, #4
   2ffa4:	4301      	orrs	r1, r0
   2ffa6:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   2ffa8:	683b      	ldr	r3, [r7, #0]
   2ffaa:	891b      	ldrh	r3, [r3, #8]
   2ffac:	2b00      	cmp	r3, #0
   2ffae:	d010      	beq.n	2ffd2 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   2ffb0:	683b      	ldr	r3, [r7, #0]
   2ffb2:	6858      	ldr	r0, [r3, #4]
   2ffb4:	687a      	ldr	r2, [r7, #4]
   2ffb6:	4910      	ldr	r1, [pc, #64]	; (2fff8 <http_client_init+0xe4>)
   2ffb8:	2300      	movs	r3, #0
   2ffba:	4c10      	ldr	r4, [pc, #64]	; (2fffc <http_client_init+0xe8>)
   2ffbc:	47a0      	blx	r4
   2ffbe:	0002      	movs	r2, r0
   2ffc0:	687b      	ldr	r3, [r7, #4]
   2ffc2:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   2ffc4:	687b      	ldr	r3, [r7, #4]
   2ffc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2ffc8:	2b00      	cmp	r3, #0
   2ffca:	da02      	bge.n	2ffd2 <http_client_init+0xbe>
			return -ENOSPC;
   2ffcc:	231c      	movs	r3, #28
   2ffce:	425b      	negs	r3, r3
   2ffd0:	e007      	b.n	2ffe2 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   2ffd2:	687b      	ldr	r3, [r7, #4]
   2ffd4:	2200      	movs	r2, #0
   2ffd6:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   2ffd8:	687b      	ldr	r3, [r7, #4]
   2ffda:	22d8      	movs	r2, #216	; 0xd8
   2ffdc:	2100      	movs	r1, #0
   2ffde:	5099      	str	r1, [r3, r2]

	return 0;
   2ffe0:	2300      	movs	r3, #0
}
   2ffe2:	0018      	movs	r0, r3
   2ffe4:	46bd      	mov	sp, r7
   2ffe6:	b003      	add	sp, #12
   2ffe8:	bd90      	pop	{r4, r7, pc}
   2ffea:	46c0      	nop			; (mov r8, r8)
   2ffec:	0003431b 	.word	0x0003431b
   2fff0:	000342e5 	.word	0x000342e5
   2fff4:	000342bd 	.word	0x000342bd
   2fff8:	000302c5 	.word	0x000302c5
   2fffc:	00031969 	.word	0x00031969

00030000 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   30000:	b580      	push	{r7, lr}
   30002:	b082      	sub	sp, #8
   30004:	af00      	add	r7, sp, #0
   30006:	6078      	str	r0, [r7, #4]
   30008:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   3000a:	687b      	ldr	r3, [r7, #4]
   3000c:	2b00      	cmp	r3, #0
   3000e:	d102      	bne.n	30016 <http_client_register_callback+0x16>
		return -EINVAL;
   30010:	2316      	movs	r3, #22
   30012:	425b      	negs	r3, r3
   30014:	e003      	b.n	3001e <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   30016:	687b      	ldr	r3, [r7, #4]
   30018:	683a      	ldr	r2, [r7, #0]
   3001a:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   3001c:	2300      	movs	r3, #0
}
   3001e:	0018      	movs	r0, r3
   30020:	46bd      	mov	sp, r7
   30022:	b002      	add	sp, #8
   30024:	bd80      	pop	{r7, pc}
	...

00030028 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   30028:	b580      	push	{r7, lr}
   3002a:	b082      	sub	sp, #8
   3002c:	af00      	add	r7, sp, #0
   3002e:	6078      	str	r0, [r7, #4]
	switch (err) {
   30030:	687b      	ldr	r3, [r7, #4]
   30032:	330e      	adds	r3, #14
   30034:	2b0e      	cmp	r3, #14
   30036:	d825      	bhi.n	30084 <_hwerr_to_stderr+0x5c>
   30038:	009a      	lsls	r2, r3, #2
   3003a:	4b18      	ldr	r3, [pc, #96]	; (3009c <_hwerr_to_stderr+0x74>)
   3003c:	18d3      	adds	r3, r2, r3
   3003e:	681b      	ldr	r3, [r3, #0]
   30040:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   30042:	2305      	movs	r3, #5
   30044:	425b      	negs	r3, r3
   30046:	e024      	b.n	30092 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   30048:	2302      	movs	r3, #2
   3004a:	425b      	negs	r3, r3
   3004c:	e021      	b.n	30092 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   3004e:	2370      	movs	r3, #112	; 0x70
   30050:	425b      	negs	r3, r3
   30052:	e01e      	b.n	30092 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   30054:	230c      	movs	r3, #12
   30056:	425b      	negs	r3, r3
   30058:	e01b      	b.n	30092 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   3005a:	2316      	movs	r3, #22
   3005c:	425b      	negs	r3, r3
   3005e:	e018      	b.n	30092 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   30060:	230c      	movs	r3, #12
   30062:	425b      	negs	r3, r3
   30064:	e015      	b.n	30092 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   30066:	2305      	movs	r3, #5
   30068:	425b      	negs	r3, r3
   3006a:	e012      	b.n	30092 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   3006c:	2379      	movs	r3, #121	; 0x79
   3006e:	425b      	negs	r3, r3
   30070:	e00f      	b.n	30092 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   30072:	2368      	movs	r3, #104	; 0x68
   30074:	425b      	negs	r3, r3
   30076:	e00c      	b.n	30092 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   30078:	230b      	movs	r3, #11
   3007a:	425b      	negs	r3, r3
   3007c:	e009      	b.n	30092 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   3007e:	2310      	movs	r3, #16
   30080:	425b      	negs	r3, r3
   30082:	e006      	b.n	30092 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   30084:	687b      	ldr	r3, [r7, #4]
   30086:	2b00      	cmp	r3, #0
   30088:	da02      	bge.n	30090 <_hwerr_to_stderr+0x68>
				return -EIO;
   3008a:	2305      	movs	r3, #5
   3008c:	425b      	negs	r3, r3
   3008e:	e000      	b.n	30092 <_hwerr_to_stderr+0x6a>
			}
			return 0;
   30090:	2300      	movs	r3, #0
	}
}
   30092:	0018      	movs	r0, r3
   30094:	46bd      	mov	sp, r7
   30096:	b002      	add	sp, #8
   30098:	bd80      	pop	{r7, pc}
   3009a:	46c0      	nop			; (mov r8, r8)
   3009c:	00039448 	.word	0x00039448

000300a0 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   300a0:	b580      	push	{r7, lr}
   300a2:	b08a      	sub	sp, #40	; 0x28
   300a4:	af00      	add	r7, sp, #0
   300a6:	603a      	str	r2, [r7, #0]
   300a8:	1dfb      	adds	r3, r7, #7
   300aa:	1c02      	adds	r2, r0, #0
   300ac:	701a      	strb	r2, [r3, #0]
   300ae:	1dbb      	adds	r3, r7, #6
   300b0:	1c0a      	adds	r2, r1, #0
   300b2:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   300b4:	1dfb      	adds	r3, r7, #7
   300b6:	2200      	movs	r2, #0
   300b8:	569a      	ldrsb	r2, [r3, r2]
   300ba:	4b4b      	ldr	r3, [pc, #300]	; (301e8 <http_client_socket_event_handler+0x148>)
   300bc:	0092      	lsls	r2, r2, #2
   300be:	58d3      	ldr	r3, [r2, r3]
   300c0:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   300c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   300c4:	2b00      	cmp	r3, #0
   300c6:	d100      	bne.n	300ca <http_client_socket_event_handler+0x2a>
   300c8:	e08a      	b.n	301e0 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   300ca:	1dbb      	adds	r3, r7, #6
   300cc:	781b      	ldrb	r3, [r3, #0]
   300ce:	2b06      	cmp	r3, #6
   300d0:	d040      	beq.n	30154 <http_client_socket_event_handler+0xb4>
   300d2:	2b07      	cmp	r3, #7
   300d4:	d060      	beq.n	30198 <http_client_socket_event_handler+0xf8>
   300d6:	2b05      	cmp	r3, #5
   300d8:	d000      	beq.n	300dc <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   300da:	e082      	b.n	301e2 <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   300dc:	683b      	ldr	r3, [r7, #0]
   300de:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   300e0:	6a3b      	ldr	r3, [r7, #32]
   300e2:	785b      	ldrb	r3, [r3, #1]
   300e4:	b25b      	sxtb	r3, r3
   300e6:	001a      	movs	r2, r3
   300e8:	230c      	movs	r3, #12
   300ea:	18fb      	adds	r3, r7, r3
   300ec:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   300ee:	6a3b      	ldr	r3, [r7, #32]
   300f0:	785b      	ldrb	r3, [r3, #1]
   300f2:	b25b      	sxtb	r3, r3
   300f4:	2b00      	cmp	r3, #0
   300f6:	da0c      	bge.n	30112 <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   300f8:	6a3b      	ldr	r3, [r7, #32]
   300fa:	785b      	ldrb	r3, [r3, #1]
   300fc:	b25b      	sxtb	r3, r3
   300fe:	0018      	movs	r0, r3
   30100:	4b3a      	ldr	r3, [pc, #232]	; (301ec <http_client_socket_event_handler+0x14c>)
   30102:	4798      	blx	r3
   30104:	0002      	movs	r2, r0
   30106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30108:	0011      	movs	r1, r2
   3010a:	0018      	movs	r0, r3
   3010c:	4b38      	ldr	r3, [pc, #224]	; (301f0 <http_client_socket_event_handler+0x150>)
   3010e:	4798      	blx	r3
    	break;
   30110:	e067      	b.n	301e2 <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   30112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30116:	2b00      	cmp	r3, #0
   30118:	d006      	beq.n	30128 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   3011a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3011c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3011e:	220c      	movs	r2, #12
   30120:	18ba      	adds	r2, r7, r2
   30122:	6a78      	ldr	r0, [r7, #36]	; 0x24
   30124:	2100      	movs	r1, #0
   30126:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   30128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3012a:	2203      	movs	r2, #3
   3012c:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   3012e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30130:	6d58      	ldr	r0, [r3, #84]	; 0x54
   30132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30134:	6c99      	ldr	r1, [r3, #72]	; 0x48
   30136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30138:	2258      	movs	r2, #88	; 0x58
   3013a:	5a9b      	ldrh	r3, [r3, r2]
   3013c:	001a      	movs	r2, r3
   3013e:	4b2d      	ldr	r3, [pc, #180]	; (301f4 <http_client_socket_event_handler+0x154>)
   30140:	4798      	blx	r3
    		_http_client_recv_packet(module);
   30142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30144:	0018      	movs	r0, r3
   30146:	4b2c      	ldr	r3, [pc, #176]	; (301f8 <http_client_socket_event_handler+0x158>)
   30148:	4798      	blx	r3
			_http_client_request(module);
   3014a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3014c:	0018      	movs	r0, r3
   3014e:	4b2b      	ldr	r3, [pc, #172]	; (301fc <http_client_socket_event_handler+0x15c>)
   30150:	4798      	blx	r3
    	break;
   30152:	e046      	b.n	301e2 <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   30154:	683b      	ldr	r3, [r7, #0]
   30156:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   30158:	69fb      	ldr	r3, [r7, #28]
   3015a:	2204      	movs	r2, #4
   3015c:	5e9b      	ldrsh	r3, [r3, r2]
   3015e:	2b00      	cmp	r3, #0
   30160:	dd09      	ble.n	30176 <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   30162:	69fb      	ldr	r3, [r7, #28]
   30164:	2204      	movs	r2, #4
   30166:	5e9b      	ldrsh	r3, [r3, r2]
   30168:	001a      	movs	r2, r3
   3016a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3016c:	0011      	movs	r1, r2
   3016e:	0018      	movs	r0, r3
   30170:	4b23      	ldr	r3, [pc, #140]	; (30200 <http_client_socket_event_handler+0x160>)
   30172:	4798      	blx	r3
   30174:	e00b      	b.n	3018e <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   30176:	69fb      	ldr	r3, [r7, #28]
   30178:	2204      	movs	r2, #4
   3017a:	5e9b      	ldrsh	r3, [r3, r2]
   3017c:	0018      	movs	r0, r3
   3017e:	4b1b      	ldr	r3, [pc, #108]	; (301ec <http_client_socket_event_handler+0x14c>)
   30180:	4798      	blx	r3
   30182:	0002      	movs	r2, r0
   30184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30186:	0011      	movs	r1, r2
   30188:	0018      	movs	r0, r3
   3018a:	4b19      	ldr	r3, [pc, #100]	; (301f0 <http_client_socket_event_handler+0x150>)
   3018c:	4798      	blx	r3
		_http_client_recv_packet(module);
   3018e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30190:	0018      	movs	r0, r3
   30192:	4b19      	ldr	r3, [pc, #100]	; (301f8 <http_client_socket_event_handler+0x158>)
   30194:	4798      	blx	r3
		break;
   30196:	e024      	b.n	301e2 <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   30198:	231a      	movs	r3, #26
   3019a:	18fb      	adds	r3, r7, r3
   3019c:	683a      	ldr	r2, [r7, #0]
   3019e:	8812      	ldrh	r2, [r2, #0]
   301a0:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   301a2:	231a      	movs	r3, #26
   301a4:	18fb      	adds	r3, r7, r3
   301a6:	2200      	movs	r2, #0
   301a8:	5e9b      	ldrsh	r3, [r3, r2]
   301aa:	2b00      	cmp	r3, #0
   301ac:	da0d      	bge.n	301ca <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   301ae:	231a      	movs	r3, #26
   301b0:	18fb      	adds	r3, r7, r3
   301b2:	2200      	movs	r2, #0
   301b4:	5e9b      	ldrsh	r3, [r3, r2]
   301b6:	0018      	movs	r0, r3
   301b8:	4b0c      	ldr	r3, [pc, #48]	; (301ec <http_client_socket_event_handler+0x14c>)
   301ba:	4798      	blx	r3
   301bc:	0002      	movs	r2, r0
   301be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   301c0:	0011      	movs	r1, r2
   301c2:	0018      	movs	r0, r3
   301c4:	4b0a      	ldr	r3, [pc, #40]	; (301f0 <http_client_socket_event_handler+0x150>)
   301c6:	4798      	blx	r3
   301c8:	e003      	b.n	301d2 <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   301ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   301cc:	0018      	movs	r0, r3
   301ce:	4b0b      	ldr	r3, [pc, #44]	; (301fc <http_client_socket_event_handler+0x15c>)
   301d0:	4798      	blx	r3
		module->sending = 0;
   301d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   301d4:	2241      	movs	r2, #65	; 0x41
   301d6:	5c99      	ldrb	r1, [r3, r2]
   301d8:	2001      	movs	r0, #1
   301da:	4381      	bics	r1, r0
   301dc:	5499      	strb	r1, [r3, r2]
    	break;
   301de:	e000      	b.n	301e2 <http_client_socket_event_handler+0x142>
		return;
   301e0:	46c0      	nop			; (mov r8, r8)
	}

}
   301e2:	46bd      	mov	sp, r7
   301e4:	b00a      	add	sp, #40	; 0x28
   301e6:	bd80      	pop	{r7, pc}
   301e8:	20004558 	.word	0x20004558
   301ec:	00030029 	.word	0x00030029
   301f0:	0003069d 	.word	0x0003069d
   301f4:	000319f9 	.word	0x000319f9
   301f8:	00030f29 	.word	0x00030f29
   301fc:	000307f1 	.word	0x000307f1
   30200:	00030f8d 	.word	0x00030f8d

00030204 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   30204:	b580      	push	{r7, lr}
   30206:	b088      	sub	sp, #32
   30208:	af00      	add	r7, sp, #0
   3020a:	6078      	str	r0, [r7, #4]
   3020c:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   3020e:	2300      	movs	r3, #0
   30210:	61fb      	str	r3, [r7, #28]
   30212:	e048      	b.n	302a6 <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   30214:	4b27      	ldr	r3, [pc, #156]	; (302b4 <http_client_socket_resolve_handler+0xb0>)
   30216:	69fa      	ldr	r2, [r7, #28]
   30218:	0092      	lsls	r2, r2, #2
   3021a:	58d3      	ldr	r3, [r2, r3]
   3021c:	2b00      	cmp	r3, #0
   3021e:	d03f      	beq.n	302a0 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   30220:	4b24      	ldr	r3, [pc, #144]	; (302b4 <http_client_socket_resolve_handler+0xb0>)
   30222:	69fa      	ldr	r2, [r7, #28]
   30224:	0092      	lsls	r2, r2, #2
   30226:	58d3      	ldr	r3, [r2, r3]
   30228:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   3022a:	69bb      	ldr	r3, [r7, #24]
   3022c:	1c5a      	adds	r2, r3, #1
   3022e:	687b      	ldr	r3, [r7, #4]
   30230:	0011      	movs	r1, r2
   30232:	0018      	movs	r0, r3
   30234:	4b20      	ldr	r3, [pc, #128]	; (302b8 <http_client_socket_resolve_handler+0xb4>)
   30236:	4798      	blx	r3
   30238:	1e03      	subs	r3, r0, #0
   3023a:	d131      	bne.n	302a0 <http_client_socket_resolve_handler+0x9c>
   3023c:	69bb      	ldr	r3, [r7, #24]
   3023e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30240:	2b01      	cmp	r3, #1
   30242:	d12d      	bne.n	302a0 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   30244:	683b      	ldr	r3, [r7, #0]
   30246:	2b00      	cmp	r3, #0
   30248:	d107      	bne.n	3025a <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   3024a:	2376      	movs	r3, #118	; 0x76
   3024c:	425a      	negs	r2, r3
   3024e:	69bb      	ldr	r3, [r7, #24]
   30250:	0011      	movs	r1, r2
   30252:	0018      	movs	r0, r3
   30254:	4b19      	ldr	r3, [pc, #100]	; (302bc <http_client_socket_resolve_handler+0xb8>)
   30256:	4798      	blx	r3
					return;
   30258:	e028      	b.n	302ac <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   3025a:	2308      	movs	r3, #8
   3025c:	18fb      	adds	r3, r7, r3
   3025e:	2202      	movs	r2, #2
   30260:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   30262:	69bb      	ldr	r3, [r7, #24]
   30264:	2250      	movs	r2, #80	; 0x50
   30266:	5a9b      	ldrh	r3, [r3, r2]
   30268:	021b      	lsls	r3, r3, #8
   3026a:	b21a      	sxth	r2, r3
   3026c:	69bb      	ldr	r3, [r7, #24]
   3026e:	2150      	movs	r1, #80	; 0x50
   30270:	5a5b      	ldrh	r3, [r3, r1]
   30272:	0a1b      	lsrs	r3, r3, #8
   30274:	b29b      	uxth	r3, r3
   30276:	b21b      	sxth	r3, r3
   30278:	4313      	orrs	r3, r2
   3027a:	b21b      	sxth	r3, r3
   3027c:	b29a      	uxth	r2, r3
   3027e:	2308      	movs	r3, #8
   30280:	18fb      	adds	r3, r7, r3
   30282:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   30284:	2308      	movs	r3, #8
   30286:	18fb      	adds	r3, r7, r3
   30288:	683a      	ldr	r2, [r7, #0]
   3028a:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   3028c:	69bb      	ldr	r3, [r7, #24]
   3028e:	781b      	ldrb	r3, [r3, #0]
   30290:	b25b      	sxtb	r3, r3
   30292:	2208      	movs	r2, #8
   30294:	18b9      	adds	r1, r7, r2
   30296:	2210      	movs	r2, #16
   30298:	0018      	movs	r0, r3
   3029a:	4b09      	ldr	r3, [pc, #36]	; (302c0 <http_client_socket_resolve_handler+0xbc>)
   3029c:	4798      	blx	r3
				return;
   3029e:	e005      	b.n	302ac <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   302a0:	69fb      	ldr	r3, [r7, #28]
   302a2:	3301      	adds	r3, #1
   302a4:	61fb      	str	r3, [r7, #28]
   302a6:	69fb      	ldr	r3, [r7, #28]
   302a8:	2b06      	cmp	r3, #6
   302aa:	ddb3      	ble.n	30214 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   302ac:	46bd      	mov	sp, r7
   302ae:	b008      	add	sp, #32
   302b0:	bd80      	pop	{r7, pc}
   302b2:	46c0      	nop			; (mov r8, r8)
   302b4:	20004558 	.word	0x20004558
   302b8:	00034673 	.word	0x00034673
   302bc:	0003069d 	.word	0x0003069d
   302c0:	00024bc1 	.word	0x00024bc1

000302c4 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   302c4:	b580      	push	{r7, lr}
   302c6:	b086      	sub	sp, #24
   302c8:	af00      	add	r7, sp, #0
   302ca:	60f8      	str	r0, [r7, #12]
   302cc:	60b9      	str	r1, [r7, #8]
   302ce:	607a      	str	r2, [r7, #4]
   302d0:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   302d2:	687b      	ldr	r3, [r7, #4]
   302d4:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   302d6:	697b      	ldr	r3, [r7, #20]
   302d8:	2b00      	cmp	r3, #0
   302da:	d007      	beq.n	302ec <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   302dc:	233e      	movs	r3, #62	; 0x3e
   302de:	425a      	negs	r2, r3
   302e0:	697b      	ldr	r3, [r7, #20]
   302e2:	0011      	movs	r1, r2
   302e4:	0018      	movs	r0, r3
   302e6:	4b03      	ldr	r3, [pc, #12]	; (302f4 <http_client_timer_callback+0x30>)
   302e8:	4798      	blx	r3
   302ea:	e000      	b.n	302ee <http_client_timer_callback+0x2a>
		return;
   302ec:	46c0      	nop			; (mov r8, r8)
}
   302ee:	46bd      	mov	sp, r7
   302f0:	b006      	add	sp, #24
   302f2:	bd80      	pop	{r7, pc}
   302f4:	0003069d 	.word	0x0003069d

000302f8 <_is_ip>:

static int _is_ip(const char *host)
{
   302f8:	b580      	push	{r7, lr}
   302fa:	b084      	sub	sp, #16
   302fc:	af00      	add	r7, sp, #0
   302fe:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   30300:	2300      	movs	r3, #0
   30302:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   30304:	e03a      	b.n	3037c <_is_ip+0x84>
		ch = *host++;
   30306:	687b      	ldr	r3, [r7, #4]
   30308:	1c5a      	adds	r2, r3, #1
   3030a:	607a      	str	r2, [r7, #4]
   3030c:	220b      	movs	r2, #11
   3030e:	18ba      	adds	r2, r7, r2
   30310:	781b      	ldrb	r3, [r3, #0]
   30312:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   30314:	230b      	movs	r3, #11
   30316:	18fb      	adds	r3, r7, r3
   30318:	781b      	ldrb	r3, [r3, #0]
   3031a:	2b60      	cmp	r3, #96	; 0x60
   3031c:	d904      	bls.n	30328 <_is_ip+0x30>
   3031e:	230b      	movs	r3, #11
   30320:	18fb      	adds	r3, r7, r3
   30322:	781b      	ldrb	r3, [r3, #0]
   30324:	2b66      	cmp	r3, #102	; 0x66
   30326:	d913      	bls.n	30350 <_is_ip+0x58>
   30328:	230b      	movs	r3, #11
   3032a:	18fb      	adds	r3, r7, r3
   3032c:	781b      	ldrb	r3, [r3, #0]
   3032e:	2b40      	cmp	r3, #64	; 0x40
   30330:	d904      	bls.n	3033c <_is_ip+0x44>
   30332:	230b      	movs	r3, #11
   30334:	18fb      	adds	r3, r7, r3
   30336:	781b      	ldrb	r3, [r3, #0]
   30338:	2b46      	cmp	r3, #70	; 0x46
   3033a:	d909      	bls.n	30350 <_is_ip+0x58>
   3033c:	230b      	movs	r3, #11
   3033e:	18fb      	adds	r3, r7, r3
   30340:	781b      	ldrb	r3, [r3, #0]
   30342:	2b3a      	cmp	r3, #58	; 0x3a
   30344:	d004      	beq.n	30350 <_is_ip+0x58>
   30346:	230b      	movs	r3, #11
   30348:	18fb      	adds	r3, r7, r3
   3034a:	781b      	ldrb	r3, [r3, #0]
   3034c:	2b2f      	cmp	r3, #47	; 0x2f
   3034e:	d102      	bne.n	30356 <_is_ip+0x5e>
			isv6 = 1;
   30350:	2301      	movs	r3, #1
   30352:	60fb      	str	r3, [r7, #12]
   30354:	e012      	b.n	3037c <_is_ip+0x84>
		} else if (ch == '.') {
   30356:	230b      	movs	r3, #11
   30358:	18fb      	adds	r3, r7, r3
   3035a:	781b      	ldrb	r3, [r3, #0]
   3035c:	2b2e      	cmp	r3, #46	; 0x2e
   3035e:	d104      	bne.n	3036a <_is_ip+0x72>
			if (isv6) {
   30360:	68fb      	ldr	r3, [r7, #12]
   30362:	2b00      	cmp	r3, #0
   30364:	d00a      	beq.n	3037c <_is_ip+0x84>
				return 0;
   30366:	2300      	movs	r3, #0
   30368:	e00d      	b.n	30386 <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   3036a:	230b      	movs	r3, #11
   3036c:	18fb      	adds	r3, r7, r3
   3036e:	781b      	ldrb	r3, [r3, #0]
   30370:	2230      	movs	r2, #48	; 0x30
   30372:	4013      	ands	r3, r2
   30374:	2b30      	cmp	r3, #48	; 0x30
   30376:	d001      	beq.n	3037c <_is_ip+0x84>
			return 0;
   30378:	2300      	movs	r3, #0
   3037a:	e004      	b.n	30386 <_is_ip+0x8e>
	while (*host != '\0') {
   3037c:	687b      	ldr	r3, [r7, #4]
   3037e:	781b      	ldrb	r3, [r3, #0]
   30380:	2b00      	cmp	r3, #0
   30382:	d1c0      	bne.n	30306 <_is_ip+0xe>
		}
	}
	return 1;
   30384:	2301      	movs	r3, #1
}
   30386:	0018      	movs	r0, r3
   30388:	46bd      	mov	sp, r7
   3038a:	b004      	add	sp, #16
   3038c:	bd80      	pop	{r7, pc}
	...

00030390 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   30390:	b5b0      	push	{r4, r5, r7, lr}
   30392:	b08e      	sub	sp, #56	; 0x38
   30394:	af00      	add	r7, sp, #0
   30396:	60f8      	str	r0, [r7, #12]
   30398:	60b9      	str	r1, [r7, #8]
   3039a:	603b      	str	r3, [r7, #0]
   3039c:	1dfb      	adds	r3, r7, #7
   3039e:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   303a0:	2337      	movs	r3, #55	; 0x37
   303a2:	18fb      	adds	r3, r7, r3
   303a4:	2200      	movs	r2, #0
   303a6:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   303a8:	2300      	movs	r3, #0
   303aa:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   303ac:	2300      	movs	r3, #0
   303ae:	633b      	str	r3, [r7, #48]	; 0x30
   303b0:	2300      	movs	r3, #0
   303b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   303b4:	2300      	movs	r3, #0
   303b6:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   303b8:	68fb      	ldr	r3, [r7, #12]
   303ba:	2b00      	cmp	r3, #0
   303bc:	d102      	bne.n	303c4 <http_client_send_request+0x34>
		return -EINVAL;
   303be:	2316      	movs	r3, #22
   303c0:	425b      	negs	r3, r3
   303c2:	e145      	b.n	30650 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   303c4:	68fb      	ldr	r3, [r7, #12]
   303c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   303c8:	2b02      	cmp	r3, #2
   303ca:	d902      	bls.n	303d2 <http_client_send_request+0x42>
		return -EBUSY;
   303cc:	2310      	movs	r3, #16
   303ce:	425b      	negs	r3, r3
   303d0:	e13e      	b.n	30650 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   303d2:	49a1      	ldr	r1, [pc, #644]	; (30658 <http_client_send_request+0x2c8>)
   303d4:	68bb      	ldr	r3, [r7, #8]
   303d6:	2207      	movs	r2, #7
   303d8:	0018      	movs	r0, r3
   303da:	4ba0      	ldr	r3, [pc, #640]	; (3065c <http_client_send_request+0x2cc>)
   303dc:	4798      	blx	r3
   303de:	1e03      	subs	r3, r0, #0
   303e0:	d102      	bne.n	303e8 <http_client_send_request+0x58>
		i = 7;
   303e2:	2307      	movs	r3, #7
   303e4:	633b      	str	r3, [r7, #48]	; 0x30
   303e6:	e009      	b.n	303fc <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   303e8:	499d      	ldr	r1, [pc, #628]	; (30660 <http_client_send_request+0x2d0>)
   303ea:	68bb      	ldr	r3, [r7, #8]
   303ec:	2208      	movs	r2, #8
   303ee:	0018      	movs	r0, r3
   303f0:	4b9a      	ldr	r3, [pc, #616]	; (3065c <http_client_send_request+0x2cc>)
   303f2:	4798      	blx	r3
   303f4:	1e03      	subs	r3, r0, #0
   303f6:	d101      	bne.n	303fc <http_client_send_request+0x6c>
		i = 8;
   303f8:	2308      	movs	r3, #8
   303fa:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   303fc:	68fb      	ldr	r3, [r7, #12]
   303fe:	1c5c      	adds	r4, r3, #1
   30400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30402:	68ba      	ldr	r2, [r7, #8]
   30404:	18d5      	adds	r5, r2, r3
   30406:	68fb      	ldr	r3, [r7, #12]
   30408:	3301      	adds	r3, #1
   3040a:	0018      	movs	r0, r3
   3040c:	4b95      	ldr	r3, [pc, #596]	; (30664 <http_client_send_request+0x2d4>)
   3040e:	4798      	blx	r3
   30410:	0003      	movs	r3, r0
   30412:	001a      	movs	r2, r3
   30414:	0029      	movs	r1, r5
   30416:	0020      	movs	r0, r4
   30418:	4b90      	ldr	r3, [pc, #576]	; (3065c <http_client_send_request+0x2cc>)
   3041a:	4798      	blx	r3
   3041c:	0003      	movs	r3, r0
   3041e:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   30420:	e00d      	b.n	3043e <http_client_send_request+0xae>
		module->host[j++] = url[i];
   30422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   30424:	1c5a      	adds	r2, r3, #1
   30426:	62fa      	str	r2, [r7, #44]	; 0x2c
   30428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   3042a:	68b9      	ldr	r1, [r7, #8]
   3042c:	188a      	adds	r2, r1, r2
   3042e:	7811      	ldrb	r1, [r2, #0]
   30430:	68fa      	ldr	r2, [r7, #12]
   30432:	18d3      	adds	r3, r2, r3
   30434:	1c0a      	adds	r2, r1, #0
   30436:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   30438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   3043a:	3301      	adds	r3, #1
   3043c:	633b      	str	r3, [r7, #48]	; 0x30
   3043e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30440:	68ba      	ldr	r2, [r7, #8]
   30442:	18d3      	adds	r3, r2, r3
   30444:	781b      	ldrb	r3, [r3, #0]
   30446:	2b00      	cmp	r3, #0
   30448:	d005      	beq.n	30456 <http_client_send_request+0xc6>
   3044a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   3044c:	68ba      	ldr	r2, [r7, #8]
   3044e:	18d3      	adds	r3, r2, r3
   30450:	781b      	ldrb	r3, [r3, #0]
   30452:	2b2f      	cmp	r3, #47	; 0x2f
   30454:	d1e5      	bne.n	30422 <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   30456:	68fa      	ldr	r2, [r7, #12]
   30458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   3045a:	18d3      	adds	r3, r2, r3
   3045c:	3301      	adds	r3, #1
   3045e:	2200      	movs	r2, #0
   30460:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   30462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30464:	68ba      	ldr	r2, [r7, #8]
   30466:	18d3      	adds	r3, r2, r3
   30468:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   3046a:	68fb      	ldr	r3, [r7, #12]
   3046c:	3301      	adds	r3, #1
   3046e:	781b      	ldrb	r3, [r3, #0]
   30470:	2b00      	cmp	r3, #0
   30472:	d102      	bne.n	3047a <http_client_send_request+0xea>
		return -EINVAL;
   30474:	2316      	movs	r3, #22
   30476:	425b      	negs	r3, r3
   30478:	e0ea      	b.n	30650 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   3047a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3047c:	0018      	movs	r0, r3
   3047e:	4b79      	ldr	r3, [pc, #484]	; (30664 <http_client_send_request+0x2d4>)
   30480:	4798      	blx	r3
   30482:	0003      	movs	r3, r0
   30484:	2b3f      	cmp	r3, #63	; 0x3f
   30486:	d902      	bls.n	3048e <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   30488:	235b      	movs	r3, #91	; 0x5b
   3048a:	425b      	negs	r3, r3
   3048c:	e0e0      	b.n	30650 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   3048e:	68fb      	ldr	r3, [r7, #12]
   30490:	22d4      	movs	r2, #212	; 0xd4
   30492:	589b      	ldr	r3, [r3, r2]
   30494:	2b00      	cmp	r3, #0
   30496:	d005      	beq.n	304a4 <http_client_send_request+0x114>
		free(module->req.ext_header);
   30498:	68fb      	ldr	r3, [r7, #12]
   3049a:	22d4      	movs	r2, #212	; 0xd4
   3049c:	589b      	ldr	r3, [r3, r2]
   3049e:	0018      	movs	r0, r3
   304a0:	4b71      	ldr	r3, [pc, #452]	; (30668 <http_client_send_request+0x2d8>)
   304a2:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   304a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   304a6:	2b00      	cmp	r3, #0
   304a8:	d010      	beq.n	304cc <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   304aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   304ac:	0018      	movs	r0, r3
   304ae:	4b6f      	ldr	r3, [pc, #444]	; (3066c <http_client_send_request+0x2dc>)
   304b0:	4798      	blx	r3
   304b2:	0003      	movs	r3, r0
   304b4:	0019      	movs	r1, r3
   304b6:	68fb      	ldr	r3, [r7, #12]
   304b8:	22d4      	movs	r2, #212	; 0xd4
   304ba:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   304bc:	68fb      	ldr	r3, [r7, #12]
   304be:	22d4      	movs	r2, #212	; 0xd4
   304c0:	589b      	ldr	r3, [r3, r2]
   304c2:	2b00      	cmp	r3, #0
   304c4:	d106      	bne.n	304d4 <http_client_send_request+0x144>
			return -ENOMEM;
   304c6:	230c      	movs	r3, #12
   304c8:	425b      	negs	r3, r3
   304ca:	e0c1      	b.n	30650 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   304cc:	68fb      	ldr	r3, [r7, #12]
   304ce:	22d4      	movs	r2, #212	; 0xd4
   304d0:	2100      	movs	r1, #0
   304d2:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   304d4:	68fb      	ldr	r3, [r7, #12]
   304d6:	2241      	movs	r2, #65	; 0x41
   304d8:	5c99      	ldrb	r1, [r3, r2]
   304da:	2001      	movs	r0, #1
   304dc:	4381      	bics	r1, r0
   304de:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   304e0:	68fb      	ldr	r3, [r7, #12]
   304e2:	2200      	movs	r2, #0
   304e4:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   304e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   304e8:	781b      	ldrb	r3, [r3, #0]
   304ea:	2b2f      	cmp	r3, #47	; 0x2f
   304ec:	d107      	bne.n	304fe <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   304ee:	68fb      	ldr	r3, [r7, #12]
   304f0:	3370      	adds	r3, #112	; 0x70
   304f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   304f4:	0011      	movs	r1, r2
   304f6:	0018      	movs	r0, r3
   304f8:	4b5d      	ldr	r3, [pc, #372]	; (30670 <http_client_send_request+0x2e0>)
   304fa:	4798      	blx	r3
   304fc:	e00f      	b.n	3051e <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   304fe:	68fb      	ldr	r3, [r7, #12]
   30500:	2270      	movs	r2, #112	; 0x70
   30502:	212f      	movs	r1, #47	; 0x2f
   30504:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   30506:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30508:	781b      	ldrb	r3, [r3, #0]
   3050a:	2b00      	cmp	r3, #0
   3050c:	d007      	beq.n	3051e <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   3050e:	68fb      	ldr	r3, [r7, #12]
   30510:	3370      	adds	r3, #112	; 0x70
   30512:	3301      	adds	r3, #1
   30514:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30516:	0011      	movs	r1, r2
   30518:	0018      	movs	r0, r3
   3051a:	4b55      	ldr	r3, [pc, #340]	; (30670 <http_client_send_request+0x2e0>)
   3051c:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   3051e:	683b      	ldr	r3, [r7, #0]
   30520:	2b00      	cmp	r3, #0
   30522:	d007      	beq.n	30534 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   30524:	68fb      	ldr	r3, [r7, #12]
   30526:	33b0      	adds	r3, #176	; 0xb0
   30528:	6839      	ldr	r1, [r7, #0]
   3052a:	2218      	movs	r2, #24
   3052c:	0018      	movs	r0, r3
   3052e:	4b51      	ldr	r3, [pc, #324]	; (30674 <http_client_send_request+0x2e4>)
   30530:	4798      	blx	r3
   30532:	e006      	b.n	30542 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   30534:	68fb      	ldr	r3, [r7, #12]
   30536:	33b0      	adds	r3, #176	; 0xb0
   30538:	2218      	movs	r2, #24
   3053a:	2100      	movs	r1, #0
   3053c:	0018      	movs	r0, r3
   3053e:	4b4e      	ldr	r3, [pc, #312]	; (30678 <http_client_send_request+0x2e8>)
   30540:	4798      	blx	r3
	}

	module->req.method = method;
   30542:	68fb      	ldr	r3, [r7, #12]
   30544:	1dfa      	adds	r2, r7, #7
   30546:	21c8      	movs	r1, #200	; 0xc8
   30548:	7812      	ldrb	r2, [r2, #0]
   3054a:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   3054c:	68fb      	ldr	r3, [r7, #12]
   3054e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30550:	2b01      	cmp	r3, #1
   30552:	d003      	beq.n	3055c <http_client_send_request+0x1cc>
   30554:	d316      	bcc.n	30584 <http_client_send_request+0x1f4>
   30556:	2b02      	cmp	r3, #2
   30558:	d004      	beq.n	30564 <http_client_send_request+0x1d4>
   3055a:	e074      	b.n	30646 <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   3055c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3055e:	2b00      	cmp	r3, #0
   30560:	d100      	bne.n	30564 <http_client_send_request+0x1d4>
   30562:	e073      	b.n	3064c <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   30564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30566:	2b00      	cmp	r3, #0
   30568:	d107      	bne.n	3057a <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   3056a:	68fb      	ldr	r3, [r7, #12]
   3056c:	2203      	movs	r2, #3
   3056e:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   30570:	68fb      	ldr	r3, [r7, #12]
   30572:	0018      	movs	r0, r3
   30574:	4b41      	ldr	r3, [pc, #260]	; (3067c <http_client_send_request+0x2ec>)
   30576:	4798      	blx	r3
			break;
   30578:	e069      	b.n	3064e <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   3057a:	68fb      	ldr	r3, [r7, #12]
   3057c:	2100      	movs	r1, #0
   3057e:	0018      	movs	r0, r3
   30580:	4b3f      	ldr	r3, [pc, #252]	; (30680 <http_client_send_request+0x2f0>)
   30582:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   30584:	68fb      	ldr	r3, [r7, #12]
   30586:	2252      	movs	r2, #82	; 0x52
   30588:	5c9b      	ldrb	r3, [r3, r2]
   3058a:	2b00      	cmp	r3, #0
   3058c:	d007      	beq.n	3059e <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   3058e:	2337      	movs	r3, #55	; 0x37
   30590:	18fb      	adds	r3, r7, r3
   30592:	2237      	movs	r2, #55	; 0x37
   30594:	18ba      	adds	r2, r7, r2
   30596:	7812      	ldrb	r2, [r2, #0]
   30598:	2101      	movs	r1, #1
   3059a:	430a      	orrs	r2, r1
   3059c:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   3059e:	2337      	movs	r3, #55	; 0x37
   305a0:	18fb      	adds	r3, r7, r3
   305a2:	781b      	ldrb	r3, [r3, #0]
   305a4:	001a      	movs	r2, r3
   305a6:	2101      	movs	r1, #1
   305a8:	2002      	movs	r0, #2
   305aa:	4b36      	ldr	r3, [pc, #216]	; (30684 <http_client_send_request+0x2f4>)
   305ac:	4798      	blx	r3
   305ae:	0003      	movs	r3, r0
   305b0:	001a      	movs	r2, r3
   305b2:	68fb      	ldr	r3, [r7, #12]
   305b4:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   305b6:	68fb      	ldr	r3, [r7, #12]
   305b8:	781b      	ldrb	r3, [r3, #0]
   305ba:	b25b      	sxtb	r3, r3
   305bc:	2b00      	cmp	r3, #0
   305be:	db3f      	blt.n	30640 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   305c0:	68fb      	ldr	r3, [r7, #12]
   305c2:	781b      	ldrb	r3, [r3, #0]
   305c4:	b25b      	sxtb	r3, r3
   305c6:	001a      	movs	r2, r3
   305c8:	4b2f      	ldr	r3, [pc, #188]	; (30688 <http_client_send_request+0x2f8>)
   305ca:	0092      	lsls	r2, r2, #2
   305cc:	68f9      	ldr	r1, [r7, #12]
   305ce:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   305d0:	68fb      	ldr	r3, [r7, #12]
   305d2:	3301      	adds	r3, #1
   305d4:	0018      	movs	r0, r3
   305d6:	4b2d      	ldr	r3, [pc, #180]	; (3068c <http_client_send_request+0x2fc>)
   305d8:	4798      	blx	r3
   305da:	1e03      	subs	r3, r0, #0
   305dc:	d027      	beq.n	3062e <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   305de:	2314      	movs	r3, #20
   305e0:	18fb      	adds	r3, r7, r3
   305e2:	2202      	movs	r2, #2
   305e4:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   305e6:	68fb      	ldr	r3, [r7, #12]
   305e8:	2250      	movs	r2, #80	; 0x50
   305ea:	5a9b      	ldrh	r3, [r3, r2]
   305ec:	021b      	lsls	r3, r3, #8
   305ee:	b21a      	sxth	r2, r3
   305f0:	68fb      	ldr	r3, [r7, #12]
   305f2:	2150      	movs	r1, #80	; 0x50
   305f4:	5a5b      	ldrh	r3, [r3, r1]
   305f6:	0a1b      	lsrs	r3, r3, #8
   305f8:	b29b      	uxth	r3, r3
   305fa:	b21b      	sxth	r3, r3
   305fc:	4313      	orrs	r3, r2
   305fe:	b21b      	sxth	r3, r3
   30600:	b29a      	uxth	r2, r3
   30602:	2314      	movs	r3, #20
   30604:	18fb      	adds	r3, r7, r3
   30606:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   30608:	68fb      	ldr	r3, [r7, #12]
   3060a:	3301      	adds	r3, #1
   3060c:	0018      	movs	r0, r3
   3060e:	4b20      	ldr	r3, [pc, #128]	; (30690 <http_client_send_request+0x300>)
   30610:	4798      	blx	r3
   30612:	0002      	movs	r2, r0
   30614:	2314      	movs	r3, #20
   30616:	18fb      	adds	r3, r7, r3
   30618:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   3061a:	68fb      	ldr	r3, [r7, #12]
   3061c:	781b      	ldrb	r3, [r3, #0]
   3061e:	b25b      	sxtb	r3, r3
   30620:	2214      	movs	r2, #20
   30622:	18b9      	adds	r1, r7, r2
   30624:	2210      	movs	r2, #16
   30626:	0018      	movs	r0, r3
   30628:	4b1a      	ldr	r3, [pc, #104]	; (30694 <http_client_send_request+0x304>)
   3062a:	4798      	blx	r3
   3062c:	e004      	b.n	30638 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   3062e:	68fb      	ldr	r3, [r7, #12]
   30630:	3301      	adds	r3, #1
   30632:	0018      	movs	r0, r3
   30634:	4b18      	ldr	r3, [pc, #96]	; (30698 <http_client_send_request+0x308>)
   30636:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   30638:	68fb      	ldr	r3, [r7, #12]
   3063a:	2201      	movs	r2, #1
   3063c:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   3063e:	e006      	b.n	3064e <http_client_send_request+0x2be>
			return -ENOSPC;
   30640:	231c      	movs	r3, #28
   30642:	425b      	negs	r3, r3
   30644:	e004      	b.n	30650 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   30646:	230b      	movs	r3, #11
   30648:	425b      	negs	r3, r3
   3064a:	e001      	b.n	30650 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   3064c:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   3064e:	2300      	movs	r3, #0
}
   30650:	0018      	movs	r0, r3
   30652:	46bd      	mov	sp, r7
   30654:	b00e      	add	sp, #56	; 0x38
   30656:	bdb0      	pop	{r4, r5, r7, pc}
   30658:	00039318 	.word	0x00039318
   3065c:	000346e1 	.word	0x000346e1
   30660:	00039320 	.word	0x00039320
   30664:	000346d3 	.word	0x000346d3
   30668:	000342d1 	.word	0x000342d1
   3066c:	00034699 	.word	0x00034699
   30670:	00034687 	.word	0x00034687
   30674:	000342e5 	.word	0x000342e5
   30678:	0003431b 	.word	0x0003431b
   3067c:	000307f1 	.word	0x000307f1
   30680:	0003069d 	.word	0x0003069d
   30684:	000249ad 	.word	0x000249ad
   30688:	20004558 	.word	0x20004558
   3068c:	000302f9 	.word	0x000302f9
   30690:	000250f9 	.word	0x000250f9
   30694:	00024bc1 	.word	0x00024bc1
   30698:	00025201 	.word	0x00025201

0003069c <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   3069c:	b580      	push	{r7, lr}
   3069e:	b086      	sub	sp, #24
   306a0:	af00      	add	r7, sp, #0
   306a2:	6078      	str	r0, [r7, #4]
   306a4:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   306a6:	687b      	ldr	r3, [r7, #4]
   306a8:	22c0      	movs	r2, #192	; 0xc0
   306aa:	589b      	ldr	r3, [r3, r2]
   306ac:	2b00      	cmp	r3, #0
   306ae:	d007      	beq.n	306c0 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   306b0:	687b      	ldr	r3, [r7, #4]
   306b2:	22c0      	movs	r2, #192	; 0xc0
   306b4:	589b      	ldr	r3, [r3, r2]
   306b6:	687a      	ldr	r2, [r7, #4]
   306b8:	21c4      	movs	r1, #196	; 0xc4
   306ba:	5852      	ldr	r2, [r2, r1]
   306bc:	0010      	movs	r0, r2
   306be:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   306c0:	687b      	ldr	r3, [r7, #4]
   306c2:	33b0      	adds	r3, #176	; 0xb0
   306c4:	2218      	movs	r2, #24
   306c6:	2100      	movs	r1, #0
   306c8:	0018      	movs	r0, r3
   306ca:	4b24      	ldr	r3, [pc, #144]	; (3075c <_http_client_clear_conn+0xc0>)
   306cc:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   306ce:	687b      	ldr	r3, [r7, #4]
   306d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   306d2:	2b00      	cmp	r3, #0
   306d4:	d005      	beq.n	306e2 <_http_client_clear_conn+0x46>
		close(module->sock);
   306d6:	687b      	ldr	r3, [r7, #4]
   306d8:	781b      	ldrb	r3, [r3, #0]
   306da:	b25b      	sxtb	r3, r3
   306dc:	0018      	movs	r0, r3
   306de:	4b20      	ldr	r3, [pc, #128]	; (30760 <_http_client_clear_conn+0xc4>)
   306e0:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   306e2:	687b      	ldr	r3, [r7, #4]
   306e4:	781b      	ldrb	r3, [r3, #0]
   306e6:	b25b      	sxtb	r3, r3
   306e8:	001a      	movs	r2, r3
   306ea:	4b1e      	ldr	r3, [pc, #120]	; (30764 <_http_client_clear_conn+0xc8>)
   306ec:	0092      	lsls	r2, r2, #2
   306ee:	2100      	movs	r1, #0
   306f0:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   306f2:	687b      	ldr	r3, [r7, #4]
   306f4:	336c      	adds	r3, #108	; 0x6c
   306f6:	226c      	movs	r2, #108	; 0x6c
   306f8:	2100      	movs	r1, #0
   306fa:	0018      	movs	r0, r3
   306fc:	4b17      	ldr	r3, [pc, #92]	; (3075c <_http_client_clear_conn+0xc0>)
   306fe:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   30700:	687b      	ldr	r3, [r7, #4]
   30702:	33d8      	adds	r3, #216	; 0xd8
   30704:	2210      	movs	r2, #16
   30706:	2100      	movs	r1, #0
   30708:	0018      	movs	r0, r3
   3070a:	4b14      	ldr	r3, [pc, #80]	; (3075c <_http_client_clear_conn+0xc0>)
   3070c:	4798      	blx	r3
	module->req.state = STATE_INIT;
   3070e:	687b      	ldr	r3, [r7, #4]
   30710:	2200      	movs	r2, #0
   30712:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   30714:	687b      	ldr	r3, [r7, #4]
   30716:	22d8      	movs	r2, #216	; 0xd8
   30718:	2100      	movs	r1, #0
   3071a:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   3071c:	687b      	ldr	r3, [r7, #4]
   3071e:	2241      	movs	r2, #65	; 0x41
   30720:	5c99      	ldrb	r1, [r3, r2]
   30722:	2001      	movs	r0, #1
   30724:	4381      	bics	r1, r0
   30726:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   30728:	687b      	ldr	r3, [r7, #4]
   3072a:	2241      	movs	r2, #65	; 0x41
   3072c:	5c99      	ldrb	r1, [r3, r2]
   3072e:	2002      	movs	r0, #2
   30730:	4381      	bics	r1, r0
   30732:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   30734:	230c      	movs	r3, #12
   30736:	18fb      	adds	r3, r7, r3
   30738:	683a      	ldr	r2, [r7, #0]
   3073a:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   3073c:	687b      	ldr	r3, [r7, #4]
   3073e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30740:	2b00      	cmp	r3, #0
   30742:	d006      	beq.n	30752 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   30744:	687b      	ldr	r3, [r7, #4]
   30746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30748:	220c      	movs	r2, #12
   3074a:	18ba      	adds	r2, r7, r2
   3074c:	6878      	ldr	r0, [r7, #4]
   3074e:	2104      	movs	r1, #4
   30750:	4798      	blx	r3
	}
}
   30752:	46c0      	nop			; (mov r8, r8)
   30754:	46bd      	mov	sp, r7
   30756:	b006      	add	sp, #24
   30758:	bd80      	pop	{r7, pc}
   3075a:	46c0      	nop			; (mov r8, r8)
   3075c:	0003431b 	.word	0x0003431b
   30760:	00024fb9 	.word	0x00024fb9
   30764:	20004558 	.word	0x20004558

00030768 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   30768:	b590      	push	{r4, r7, lr}
   3076a:	b087      	sub	sp, #28
   3076c:	af00      	add	r7, sp, #0
   3076e:	60f8      	str	r0, [r7, #12]
   30770:	60b9      	str	r1, [r7, #8]
   30772:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   30774:	68fb      	ldr	r3, [r7, #12]
   30776:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   30778:	697b      	ldr	r3, [r7, #20]
   3077a:	2241      	movs	r2, #65	; 0x41
   3077c:	5c99      	ldrb	r1, [r3, r2]
   3077e:	2001      	movs	r0, #1
   30780:	4301      	orrs	r1, r0
   30782:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   30784:	697b      	ldr	r3, [r7, #20]
   30786:	2000      	movs	r0, #0
   30788:	5618      	ldrsb	r0, [r3, r0]
   3078a:	687b      	ldr	r3, [r7, #4]
   3078c:	b29a      	uxth	r2, r3
   3078e:	68b9      	ldr	r1, [r7, #8]
   30790:	2300      	movs	r3, #0
   30792:	4c14      	ldr	r4, [pc, #80]	; (307e4 <_http_client_send_wait+0x7c>)
   30794:	47a0      	blx	r4
   30796:	0003      	movs	r3, r0
   30798:	613b      	str	r3, [r7, #16]
   3079a:	693b      	ldr	r3, [r7, #16]
   3079c:	2b00      	cmp	r3, #0
   3079e:	da0f      	bge.n	307c0 <_http_client_send_wait+0x58>
		module->sending = 0;
   307a0:	697b      	ldr	r3, [r7, #20]
   307a2:	2241      	movs	r2, #65	; 0x41
   307a4:	5c99      	ldrb	r1, [r3, r2]
   307a6:	2001      	movs	r0, #1
   307a8:	4381      	bics	r1, r0
   307aa:	5499      	strb	r1, [r3, r2]
		return result;
   307ac:	693b      	ldr	r3, [r7, #16]
   307ae:	e014      	b.n	307da <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   307b0:	2000      	movs	r0, #0
   307b2:	4b0d      	ldr	r3, [pc, #52]	; (307e8 <_http_client_send_wait+0x80>)
   307b4:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   307b6:	697b      	ldr	r3, [r7, #20]
   307b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   307ba:	0018      	movs	r0, r3
   307bc:	4b0b      	ldr	r3, [pc, #44]	; (307ec <_http_client_send_wait+0x84>)
   307be:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   307c0:	697b      	ldr	r3, [r7, #20]
   307c2:	2241      	movs	r2, #65	; 0x41
   307c4:	5c9b      	ldrb	r3, [r3, r2]
   307c6:	2201      	movs	r2, #1
   307c8:	4013      	ands	r3, r2
   307ca:	b2db      	uxtb	r3, r3
   307cc:	2b00      	cmp	r3, #0
   307ce:	d003      	beq.n	307d8 <_http_client_send_wait+0x70>
   307d0:	697b      	ldr	r3, [r7, #20]
   307d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   307d4:	2b02      	cmp	r3, #2
   307d6:	d8eb      	bhi.n	307b0 <_http_client_send_wait+0x48>
	}

	return 0;
   307d8:	2300      	movs	r3, #0
}
   307da:	0018      	movs	r0, r3
   307dc:	46bd      	mov	sp, r7
   307de:	b007      	add	sp, #28
   307e0:	bd90      	pop	{r4, r7, pc}
   307e2:	46c0      	nop			; (mov r8, r8)
   307e4:	00024cd5 	.word	0x00024cd5
   307e8:	00021381 	.word	0x00021381
   307ec:	00031a75 	.word	0x00031a75

000307f0 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   307f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   307f2:	46c6      	mov	lr, r8
   307f4:	b500      	push	{lr}
   307f6:	b0a0      	sub	sp, #128	; 0x80
   307f8:	af02      	add	r7, sp, #8
   307fa:	61f8      	str	r0, [r7, #28]
   307fc:	4668      	mov	r0, sp
   307fe:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   30800:	2318      	movs	r3, #24
   30802:	2218      	movs	r2, #24
   30804:	18ba      	adds	r2, r7, r2
   30806:	18d0      	adds	r0, r2, r3
   30808:	4bbd      	ldr	r3, [pc, #756]	; (30b00 <_http_client_request+0x310>)
   3080a:	469c      	mov	ip, r3
   3080c:	4663      	mov	r3, ip
   3080e:	cb16      	ldmia	r3!, {r1, r2, r4}
   30810:	c016      	stmia	r0!, {r1, r2, r4}
   30812:	469c      	mov	ip, r3
   30814:	4663      	mov	r3, ip
   30816:	681b      	ldr	r3, [r3, #0]
   30818:	469c      	mov	ip, r3
   3081a:	4663      	mov	r3, ip
   3081c:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   3081e:	69f8      	ldr	r0, [r7, #28]
   30820:	6e40      	ldr	r0, [r0, #100]	; 0x64
   30822:	4684      	mov	ip, r0
   30824:	2301      	movs	r3, #1
   30826:	425b      	negs	r3, r3
   30828:	4698      	mov	r8, r3
   3082a:	44c4      	add	ip, r8
   3082c:	4663      	mov	r3, ip
   3082e:	66fb      	str	r3, [r7, #108]	; 0x6c
   30830:	6038      	str	r0, [r7, #0]
   30832:	2300      	movs	r3, #0
   30834:	607b      	str	r3, [r7, #4]
   30836:	6839      	ldr	r1, [r7, #0]
   30838:	687a      	ldr	r2, [r7, #4]
   3083a:	000b      	movs	r3, r1
   3083c:	0f5b      	lsrs	r3, r3, #29
   3083e:	469c      	mov	ip, r3
   30840:	0013      	movs	r3, r2
   30842:	00db      	lsls	r3, r3, #3
   30844:	617b      	str	r3, [r7, #20]
   30846:	4663      	mov	r3, ip
   30848:	697c      	ldr	r4, [r7, #20]
   3084a:	431c      	orrs	r4, r3
   3084c:	617c      	str	r4, [r7, #20]
   3084e:	000b      	movs	r3, r1
   30850:	00db      	lsls	r3, r3, #3
   30852:	613b      	str	r3, [r7, #16]
   30854:	0005      	movs	r5, r0
   30856:	2200      	movs	r2, #0
   30858:	0016      	movs	r6, r2
   3085a:	0f6a      	lsrs	r2, r5, #29
   3085c:	00f3      	lsls	r3, r6, #3
   3085e:	60fb      	str	r3, [r7, #12]
   30860:	68fb      	ldr	r3, [r7, #12]
   30862:	4313      	orrs	r3, r2
   30864:	60fb      	str	r3, [r7, #12]
   30866:	00eb      	lsls	r3, r5, #3
   30868:	60bb      	str	r3, [r7, #8]
   3086a:	1dc3      	adds	r3, r0, #7
   3086c:	08db      	lsrs	r3, r3, #3
   3086e:	00db      	lsls	r3, r3, #3
   30870:	466a      	mov	r2, sp
   30872:	1ad3      	subs	r3, r2, r3
   30874:	469d      	mov	sp, r3
   30876:	ab02      	add	r3, sp, #8
   30878:	3300      	adds	r3, #0
   3087a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   3087c:	69fb      	ldr	r3, [r7, #28]
   3087e:	2b00      	cmp	r3, #0
   30880:	d100      	bne.n	30884 <_http_client_request+0x94>
   30882:	e346      	b.n	30f12 <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   30884:	69fb      	ldr	r3, [r7, #28]
   30886:	2241      	movs	r2, #65	; 0x41
   30888:	5c9b      	ldrb	r3, [r3, r2]
   3088a:	2201      	movs	r2, #1
   3088c:	4013      	ands	r3, r2
   3088e:	b2db      	uxtb	r3, r3
   30890:	2b00      	cmp	r3, #0
   30892:	d000      	beq.n	30896 <_http_client_request+0xa6>
   30894:	e33f      	b.n	30f16 <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   30896:	69fb      	ldr	r3, [r7, #28]
   30898:	33b0      	adds	r3, #176	; 0xb0
   3089a:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   3089c:	69fb      	ldr	r3, [r7, #28]
   3089e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   308a0:	2b03      	cmp	r3, #3
   308a2:	d003      	beq.n	308ac <_http_client_request+0xbc>
   308a4:	2b04      	cmp	r3, #4
   308a6:	d100      	bne.n	308aa <_http_client_request+0xba>
   308a8:	e1b3      	b.n	30c12 <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   308aa:	e32f      	b.n	30f0c <_http_client_request+0x71c>
		module->req.content_length = 0;
   308ac:	69fb      	ldr	r3, [r7, #28]
   308ae:	22cc      	movs	r2, #204	; 0xcc
   308b0:	2100      	movs	r1, #0
   308b2:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   308b4:	69fb      	ldr	r3, [r7, #28]
   308b6:	22d0      	movs	r2, #208	; 0xd0
   308b8:	2100      	movs	r1, #0
   308ba:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   308bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   308be:	69fb      	ldr	r3, [r7, #28]
   308c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   308c2:	4c90      	ldr	r4, [pc, #576]	; (30b04 <_http_client_request+0x314>)
   308c4:	2334      	movs	r3, #52	; 0x34
   308c6:	2018      	movs	r0, #24
   308c8:	1838      	adds	r0, r7, r0
   308ca:	18c0      	adds	r0, r0, r3
   308cc:	69fb      	ldr	r3, [r7, #28]
   308ce:	9300      	str	r3, [sp, #0]
   308d0:	0023      	movs	r3, r4
   308d2:	4c8d      	ldr	r4, [pc, #564]	; (30b08 <_http_client_request+0x318>)
   308d4:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   308d6:	69fb      	ldr	r3, [r7, #28]
   308d8:	22c8      	movs	r2, #200	; 0xc8
   308da:	5c9b      	ldrb	r3, [r3, r2]
   308dc:	2b01      	cmp	r3, #1
   308de:	d10a      	bne.n	308f6 <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   308e0:	498a      	ldr	r1, [pc, #552]	; (30b0c <_http_client_request+0x31c>)
   308e2:	2334      	movs	r3, #52	; 0x34
   308e4:	2218      	movs	r2, #24
   308e6:	4694      	mov	ip, r2
   308e8:	44bc      	add	ip, r7
   308ea:	4463      	add	r3, ip
   308ec:	2204      	movs	r2, #4
   308ee:	0018      	movs	r0, r3
   308f0:	4b87      	ldr	r3, [pc, #540]	; (30b10 <_http_client_request+0x320>)
   308f2:	4798      	blx	r3
   308f4:	e04e      	b.n	30994 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   308f6:	69fb      	ldr	r3, [r7, #28]
   308f8:	22c8      	movs	r2, #200	; 0xc8
   308fa:	5c9b      	ldrb	r3, [r3, r2]
   308fc:	2b02      	cmp	r3, #2
   308fe:	d10a      	bne.n	30916 <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   30900:	4984      	ldr	r1, [pc, #528]	; (30b14 <_http_client_request+0x324>)
   30902:	2334      	movs	r3, #52	; 0x34
   30904:	2218      	movs	r2, #24
   30906:	4694      	mov	ip, r2
   30908:	44bc      	add	ip, r7
   3090a:	4463      	add	r3, ip
   3090c:	2205      	movs	r2, #5
   3090e:	0018      	movs	r0, r3
   30910:	4b7f      	ldr	r3, [pc, #508]	; (30b10 <_http_client_request+0x320>)
   30912:	4798      	blx	r3
   30914:	e03e      	b.n	30994 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   30916:	69fb      	ldr	r3, [r7, #28]
   30918:	22c8      	movs	r2, #200	; 0xc8
   3091a:	5c9b      	ldrb	r3, [r3, r2]
   3091c:	2b03      	cmp	r3, #3
   3091e:	d10a      	bne.n	30936 <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   30920:	497d      	ldr	r1, [pc, #500]	; (30b18 <_http_client_request+0x328>)
   30922:	2334      	movs	r3, #52	; 0x34
   30924:	2218      	movs	r2, #24
   30926:	4694      	mov	ip, r2
   30928:	44bc      	add	ip, r7
   3092a:	4463      	add	r3, ip
   3092c:	2207      	movs	r2, #7
   3092e:	0018      	movs	r0, r3
   30930:	4b77      	ldr	r3, [pc, #476]	; (30b10 <_http_client_request+0x320>)
   30932:	4798      	blx	r3
   30934:	e02e      	b.n	30994 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   30936:	69fb      	ldr	r3, [r7, #28]
   30938:	22c8      	movs	r2, #200	; 0xc8
   3093a:	5c9b      	ldrb	r3, [r3, r2]
   3093c:	2b04      	cmp	r3, #4
   3093e:	d10a      	bne.n	30956 <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   30940:	4976      	ldr	r1, [pc, #472]	; (30b1c <_http_client_request+0x32c>)
   30942:	2334      	movs	r3, #52	; 0x34
   30944:	2218      	movs	r2, #24
   30946:	4694      	mov	ip, r2
   30948:	44bc      	add	ip, r7
   3094a:	4463      	add	r3, ip
   3094c:	2204      	movs	r2, #4
   3094e:	0018      	movs	r0, r3
   30950:	4b6f      	ldr	r3, [pc, #444]	; (30b10 <_http_client_request+0x320>)
   30952:	4798      	blx	r3
   30954:	e01e      	b.n	30994 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   30956:	69fb      	ldr	r3, [r7, #28]
   30958:	22c8      	movs	r2, #200	; 0xc8
   3095a:	5c9b      	ldrb	r3, [r3, r2]
   3095c:	2b05      	cmp	r3, #5
   3095e:	d10a      	bne.n	30976 <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   30960:	496f      	ldr	r1, [pc, #444]	; (30b20 <_http_client_request+0x330>)
   30962:	2334      	movs	r3, #52	; 0x34
   30964:	2218      	movs	r2, #24
   30966:	4694      	mov	ip, r2
   30968:	44bc      	add	ip, r7
   3096a:	4463      	add	r3, ip
   3096c:	2208      	movs	r2, #8
   3096e:	0018      	movs	r0, r3
   30970:	4b67      	ldr	r3, [pc, #412]	; (30b10 <_http_client_request+0x320>)
   30972:	4798      	blx	r3
   30974:	e00e      	b.n	30994 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   30976:	69fb      	ldr	r3, [r7, #28]
   30978:	22c8      	movs	r2, #200	; 0xc8
   3097a:	5c9b      	ldrb	r3, [r3, r2]
   3097c:	2b06      	cmp	r3, #6
   3097e:	d109      	bne.n	30994 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   30980:	4968      	ldr	r1, [pc, #416]	; (30b24 <_http_client_request+0x334>)
   30982:	2334      	movs	r3, #52	; 0x34
   30984:	2218      	movs	r2, #24
   30986:	4694      	mov	ip, r2
   30988:	44bc      	add	ip, r7
   3098a:	4463      	add	r3, ip
   3098c:	2205      	movs	r2, #5
   3098e:	0018      	movs	r0, r3
   30990:	4b5f      	ldr	r3, [pc, #380]	; (30b10 <_http_client_request+0x320>)
   30992:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   30994:	69fb      	ldr	r3, [r7, #28]
   30996:	3370      	adds	r3, #112	; 0x70
   30998:	001c      	movs	r4, r3
   3099a:	69fb      	ldr	r3, [r7, #28]
   3099c:	3370      	adds	r3, #112	; 0x70
   3099e:	0018      	movs	r0, r3
   309a0:	4b61      	ldr	r3, [pc, #388]	; (30b28 <_http_client_request+0x338>)
   309a2:	4798      	blx	r3
   309a4:	0002      	movs	r2, r0
   309a6:	2334      	movs	r3, #52	; 0x34
   309a8:	2118      	movs	r1, #24
   309aa:	468c      	mov	ip, r1
   309ac:	44bc      	add	ip, r7
   309ae:	4463      	add	r3, ip
   309b0:	0021      	movs	r1, r4
   309b2:	0018      	movs	r0, r3
   309b4:	4b56      	ldr	r3, [pc, #344]	; (30b10 <_http_client_request+0x320>)
   309b6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   309b8:	495c      	ldr	r1, [pc, #368]	; (30b2c <_http_client_request+0x33c>)
   309ba:	2334      	movs	r3, #52	; 0x34
   309bc:	2218      	movs	r2, #24
   309be:	4694      	mov	ip, r2
   309c0:	44bc      	add	ip, r7
   309c2:	4463      	add	r3, ip
   309c4:	220b      	movs	r2, #11
   309c6:	0018      	movs	r0, r3
   309c8:	4b51      	ldr	r3, [pc, #324]	; (30b10 <_http_client_request+0x320>)
   309ca:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   309cc:	4958      	ldr	r1, [pc, #352]	; (30b30 <_http_client_request+0x340>)
   309ce:	2334      	movs	r3, #52	; 0x34
   309d0:	2218      	movs	r2, #24
   309d2:	4694      	mov	ip, r2
   309d4:	44bc      	add	ip, r7
   309d6:	4463      	add	r3, ip
   309d8:	220c      	movs	r2, #12
   309da:	0018      	movs	r0, r3
   309dc:	4b4c      	ldr	r3, [pc, #304]	; (30b10 <_http_client_request+0x320>)
   309de:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   309e0:	69fb      	ldr	r3, [r7, #28]
   309e2:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   309e4:	69fb      	ldr	r3, [r7, #28]
   309e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   309e8:	0018      	movs	r0, r3
   309ea:	4b4f      	ldr	r3, [pc, #316]	; (30b28 <_http_client_request+0x338>)
   309ec:	4798      	blx	r3
   309ee:	0002      	movs	r2, r0
   309f0:	2334      	movs	r3, #52	; 0x34
   309f2:	2118      	movs	r1, #24
   309f4:	468c      	mov	ip, r1
   309f6:	44bc      	add	ip, r7
   309f8:	4463      	add	r3, ip
   309fa:	0021      	movs	r1, r4
   309fc:	0018      	movs	r0, r3
   309fe:	4b44      	ldr	r3, [pc, #272]	; (30b10 <_http_client_request+0x320>)
   30a00:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   30a02:	494c      	ldr	r1, [pc, #304]	; (30b34 <_http_client_request+0x344>)
   30a04:	2334      	movs	r3, #52	; 0x34
   30a06:	2218      	movs	r2, #24
   30a08:	4694      	mov	ip, r2
   30a0a:	44bc      	add	ip, r7
   30a0c:	4463      	add	r3, ip
   30a0e:	2202      	movs	r2, #2
   30a10:	0018      	movs	r0, r3
   30a12:	4b3f      	ldr	r3, [pc, #252]	; (30b10 <_http_client_request+0x320>)
   30a14:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   30a16:	4948      	ldr	r1, [pc, #288]	; (30b38 <_http_client_request+0x348>)
   30a18:	2334      	movs	r3, #52	; 0x34
   30a1a:	2218      	movs	r2, #24
   30a1c:	4694      	mov	ip, r2
   30a1e:	44bc      	add	ip, r7
   30a20:	4463      	add	r3, ip
   30a22:	2206      	movs	r2, #6
   30a24:	0018      	movs	r0, r3
   30a26:	4b3a      	ldr	r3, [pc, #232]	; (30b10 <_http_client_request+0x320>)
   30a28:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   30a2a:	69fb      	ldr	r3, [r7, #28]
   30a2c:	1c5c      	adds	r4, r3, #1
   30a2e:	69fb      	ldr	r3, [r7, #28]
   30a30:	3301      	adds	r3, #1
   30a32:	0018      	movs	r0, r3
   30a34:	4b3c      	ldr	r3, [pc, #240]	; (30b28 <_http_client_request+0x338>)
   30a36:	4798      	blx	r3
   30a38:	0002      	movs	r2, r0
   30a3a:	2334      	movs	r3, #52	; 0x34
   30a3c:	2118      	movs	r1, #24
   30a3e:	468c      	mov	ip, r1
   30a40:	44bc      	add	ip, r7
   30a42:	4463      	add	r3, ip
   30a44:	0021      	movs	r1, r4
   30a46:	0018      	movs	r0, r3
   30a48:	4b31      	ldr	r3, [pc, #196]	; (30b10 <_http_client_request+0x320>)
   30a4a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   30a4c:	4939      	ldr	r1, [pc, #228]	; (30b34 <_http_client_request+0x344>)
   30a4e:	2334      	movs	r3, #52	; 0x34
   30a50:	2218      	movs	r2, #24
   30a52:	4694      	mov	ip, r2
   30a54:	44bc      	add	ip, r7
   30a56:	4463      	add	r3, ip
   30a58:	2202      	movs	r2, #2
   30a5a:	0018      	movs	r0, r3
   30a5c:	4b2c      	ldr	r3, [pc, #176]	; (30b10 <_http_client_request+0x320>)
   30a5e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   30a60:	4936      	ldr	r1, [pc, #216]	; (30b3c <_http_client_request+0x34c>)
   30a62:	2334      	movs	r3, #52	; 0x34
   30a64:	2218      	movs	r2, #24
   30a66:	4694      	mov	ip, r2
   30a68:	44bc      	add	ip, r7
   30a6a:	4463      	add	r3, ip
   30a6c:	2218      	movs	r2, #24
   30a6e:	0018      	movs	r0, r3
   30a70:	4b27      	ldr	r3, [pc, #156]	; (30b10 <_http_client_request+0x320>)
   30a72:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   30a74:	4932      	ldr	r1, [pc, #200]	; (30b40 <_http_client_request+0x350>)
   30a76:	2334      	movs	r3, #52	; 0x34
   30a78:	2218      	movs	r2, #24
   30a7a:	4694      	mov	ip, r2
   30a7c:	44bc      	add	ip, r7
   30a7e:	4463      	add	r3, ip
   30a80:	2213      	movs	r2, #19
   30a82:	0018      	movs	r0, r3
   30a84:	4b22      	ldr	r3, [pc, #136]	; (30b10 <_http_client_request+0x320>)
   30a86:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   30a88:	492e      	ldr	r1, [pc, #184]	; (30b44 <_http_client_request+0x354>)
   30a8a:	2334      	movs	r3, #52	; 0x34
   30a8c:	2218      	movs	r2, #24
   30a8e:	4694      	mov	ip, r2
   30a90:	44bc      	add	ip, r7
   30a92:	4463      	add	r3, ip
   30a94:	2217      	movs	r2, #23
   30a96:	0018      	movs	r0, r3
   30a98:	4b1d      	ldr	r3, [pc, #116]	; (30b10 <_http_client_request+0x320>)
   30a9a:	4798      	blx	r3
		if (entity->read != NULL) {
   30a9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30a9e:	68db      	ldr	r3, [r3, #12]
   30aa0:	2b00      	cmp	r3, #0
   30aa2:	d100      	bne.n	30aa6 <_http_client_request+0x2b6>
   30aa4:	e088      	b.n	30bb8 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   30aa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30aa8:	781b      	ldrb	r3, [r3, #0]
   30aaa:	2b00      	cmp	r3, #0
   30aac:	d00f      	beq.n	30ace <_http_client_request+0x2de>
				module->req.content_length = -1;
   30aae:	69fb      	ldr	r3, [r7, #28]
   30ab0:	21cc      	movs	r1, #204	; 0xcc
   30ab2:	2201      	movs	r2, #1
   30ab4:	4252      	negs	r2, r2
   30ab6:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   30ab8:	4923      	ldr	r1, [pc, #140]	; (30b48 <_http_client_request+0x358>)
   30aba:	2334      	movs	r3, #52	; 0x34
   30abc:	2218      	movs	r2, #24
   30abe:	4694      	mov	ip, r2
   30ac0:	44bc      	add	ip, r7
   30ac2:	4463      	add	r3, ip
   30ac4:	221c      	movs	r2, #28
   30ac6:	0018      	movs	r0, r3
   30ac8:	4b11      	ldr	r3, [pc, #68]	; (30b10 <_http_client_request+0x320>)
   30aca:	4798      	blx	r3
   30acc:	e074      	b.n	30bb8 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   30ace:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30ad0:	689b      	ldr	r3, [r3, #8]
   30ad2:	2b00      	cmp	r3, #0
   30ad4:	d070      	beq.n	30bb8 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   30ad6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30ad8:	689a      	ldr	r2, [r3, #8]
   30ada:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30adc:	695b      	ldr	r3, [r3, #20]
   30ade:	0018      	movs	r0, r3
   30ae0:	4790      	blx	r2
   30ae2:	0001      	movs	r1, r0
   30ae4:	69fb      	ldr	r3, [r7, #28]
   30ae6:	22cc      	movs	r2, #204	; 0xcc
   30ae8:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   30aea:	69fb      	ldr	r3, [r7, #28]
   30aec:	22cc      	movs	r2, #204	; 0xcc
   30aee:	589b      	ldr	r3, [r3, r2]
   30af0:	2b00      	cmp	r3, #0
   30af2:	da2b      	bge.n	30b4c <_http_client_request+0x35c>
					module->req.content_length = 0;
   30af4:	69fb      	ldr	r3, [r7, #28]
   30af6:	22cc      	movs	r2, #204	; 0xcc
   30af8:	2100      	movs	r1, #0
   30afa:	5099      	str	r1, [r3, r2]
   30afc:	e05c      	b.n	30bb8 <_http_client_request+0x3c8>
   30afe:	46c0      	nop			; (mov r8, r8)
   30b00:	00039408 	.word	0x00039408
   30b04:	00030769 	.word	0x00030769
   30b08:	000316d1 	.word	0x000316d1
   30b0c:	0003932c 	.word	0x0003932c
   30b10:	00031751 	.word	0x00031751
   30b14:	00039334 	.word	0x00039334
   30b18:	0003933c 	.word	0x0003933c
   30b1c:	00039344 	.word	0x00039344
   30b20:	0003934c 	.word	0x0003934c
   30b24:	00039358 	.word	0x00039358
   30b28:	000346d3 	.word	0x000346d3
   30b2c:	00039360 	.word	0x00039360
   30b30:	0003936c 	.word	0x0003936c
   30b34:	0003937c 	.word	0x0003937c
   30b38:	00039380 	.word	0x00039380
   30b3c:	00039388 	.word	0x00039388
   30b40:	000393a4 	.word	0x000393a4
   30b44:	000393b8 	.word	0x000393b8
   30b48:	000393d0 	.word	0x000393d0
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   30b4c:	69fb      	ldr	r3, [r7, #28]
   30b4e:	22cc      	movs	r2, #204	; 0xcc
   30b50:	589b      	ldr	r3, [r3, r2]
   30b52:	001a      	movs	r2, r3
   30b54:	49e0      	ldr	r1, [pc, #896]	; (30ed8 <_http_client_request+0x6e8>)
   30b56:	2328      	movs	r3, #40	; 0x28
   30b58:	2018      	movs	r0, #24
   30b5a:	4684      	mov	ip, r0
   30b5c:	44bc      	add	ip, r7
   30b5e:	4463      	add	r3, ip
   30b60:	0018      	movs	r0, r3
   30b62:	4bde      	ldr	r3, [pc, #888]	; (30edc <_http_client_request+0x6ec>)
   30b64:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   30b66:	49de      	ldr	r1, [pc, #888]	; (30ee0 <_http_client_request+0x6f0>)
   30b68:	2334      	movs	r3, #52	; 0x34
   30b6a:	2218      	movs	r2, #24
   30b6c:	4694      	mov	ip, r2
   30b6e:	44bc      	add	ip, r7
   30b70:	4463      	add	r3, ip
   30b72:	2210      	movs	r2, #16
   30b74:	0018      	movs	r0, r3
   30b76:	4bdb      	ldr	r3, [pc, #876]	; (30ee4 <_http_client_request+0x6f4>)
   30b78:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   30b7a:	2328      	movs	r3, #40	; 0x28
   30b7c:	2218      	movs	r2, #24
   30b7e:	4694      	mov	ip, r2
   30b80:	44bc      	add	ip, r7
   30b82:	4463      	add	r3, ip
   30b84:	0018      	movs	r0, r3
   30b86:	4bd8      	ldr	r3, [pc, #864]	; (30ee8 <_http_client_request+0x6f8>)
   30b88:	4798      	blx	r3
   30b8a:	0002      	movs	r2, r0
   30b8c:	2328      	movs	r3, #40	; 0x28
   30b8e:	2118      	movs	r1, #24
   30b90:	1879      	adds	r1, r7, r1
   30b92:	18c9      	adds	r1, r1, r3
   30b94:	2334      	movs	r3, #52	; 0x34
   30b96:	2018      	movs	r0, #24
   30b98:	4684      	mov	ip, r0
   30b9a:	44bc      	add	ip, r7
   30b9c:	4463      	add	r3, ip
   30b9e:	0018      	movs	r0, r3
   30ba0:	4bd0      	ldr	r3, [pc, #832]	; (30ee4 <_http_client_request+0x6f4>)
   30ba2:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   30ba4:	49d1      	ldr	r1, [pc, #836]	; (30eec <_http_client_request+0x6fc>)
   30ba6:	2334      	movs	r3, #52	; 0x34
   30ba8:	2218      	movs	r2, #24
   30baa:	4694      	mov	ip, r2
   30bac:	44bc      	add	ip, r7
   30bae:	4463      	add	r3, ip
   30bb0:	2202      	movs	r2, #2
   30bb2:	0018      	movs	r0, r3
   30bb4:	4bcb      	ldr	r3, [pc, #812]	; (30ee4 <_http_client_request+0x6f4>)
   30bb6:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   30bb8:	69fb      	ldr	r3, [r7, #28]
   30bba:	22d4      	movs	r2, #212	; 0xd4
   30bbc:	589b      	ldr	r3, [r3, r2]
   30bbe:	2b00      	cmp	r3, #0
   30bc0:	d012      	beq.n	30be8 <_http_client_request+0x3f8>
				module->req.ext_header,
   30bc2:	69fb      	ldr	r3, [r7, #28]
   30bc4:	22d4      	movs	r2, #212	; 0xd4
   30bc6:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   30bc8:	69fb      	ldr	r3, [r7, #28]
   30bca:	22d4      	movs	r2, #212	; 0xd4
   30bcc:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   30bce:	0018      	movs	r0, r3
   30bd0:	4bc5      	ldr	r3, [pc, #788]	; (30ee8 <_http_client_request+0x6f8>)
   30bd2:	4798      	blx	r3
   30bd4:	0002      	movs	r2, r0
   30bd6:	2334      	movs	r3, #52	; 0x34
   30bd8:	2118      	movs	r1, #24
   30bda:	468c      	mov	ip, r1
   30bdc:	44bc      	add	ip, r7
   30bde:	4463      	add	r3, ip
   30be0:	0021      	movs	r1, r4
   30be2:	0018      	movs	r0, r3
   30be4:	4bbf      	ldr	r3, [pc, #764]	; (30ee4 <_http_client_request+0x6f4>)
   30be6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   30be8:	49c0      	ldr	r1, [pc, #768]	; (30eec <_http_client_request+0x6fc>)
   30bea:	2334      	movs	r3, #52	; 0x34
   30bec:	2218      	movs	r2, #24
   30bee:	4694      	mov	ip, r2
   30bf0:	44bc      	add	ip, r7
   30bf2:	4463      	add	r3, ip
   30bf4:	2202      	movs	r2, #2
   30bf6:	0018      	movs	r0, r3
   30bf8:	4bba      	ldr	r3, [pc, #744]	; (30ee4 <_http_client_request+0x6f4>)
   30bfa:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   30bfc:	2334      	movs	r3, #52	; 0x34
   30bfe:	2218      	movs	r2, #24
   30c00:	4694      	mov	ip, r2
   30c02:	44bc      	add	ip, r7
   30c04:	4463      	add	r3, ip
   30c06:	0018      	movs	r0, r3
   30c08:	4bb9      	ldr	r3, [pc, #740]	; (30ef0 <_http_client_request+0x700>)
   30c0a:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   30c0c:	69fb      	ldr	r3, [r7, #28]
   30c0e:	2204      	movs	r2, #4
   30c10:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   30c12:	69fb      	ldr	r3, [r7, #28]
   30c14:	22cc      	movs	r2, #204	; 0xcc
   30c16:	589b      	ldr	r3, [r3, r2]
   30c18:	2b00      	cmp	r3, #0
   30c1a:	db00      	blt.n	30c1e <_http_client_request+0x42e>
   30c1c:	e0c6      	b.n	30dac <_http_client_request+0x5bc>
   30c1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30c20:	68db      	ldr	r3, [r3, #12]
   30c22:	2b00      	cmp	r3, #0
   30c24:	d100      	bne.n	30c28 <_http_client_request+0x438>
   30c26:	e0c1      	b.n	30dac <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   30c28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30c2a:	68dc      	ldr	r4, [r3, #12]
   30c2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30c2e:	6958      	ldr	r0, [r3, #20]
   30c30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30c32:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   30c34:	69fb      	ldr	r3, [r7, #28]
   30c36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   30c38:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   30c3a:	69fb      	ldr	r3, [r7, #28]
   30c3c:	22d0      	movs	r2, #208	; 0xd0
   30c3e:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   30c40:	002a      	movs	r2, r5
   30c42:	47a0      	blx	r4
   30c44:	0003      	movs	r3, r0
   30c46:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   30c48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30c4a:	2b00      	cmp	r3, #0
   30c4c:	da01      	bge.n	30c52 <_http_client_request+0x462>
				size = 0;
   30c4e:	2300      	movs	r3, #0
   30c50:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   30c52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30c54:	220a      	movs	r2, #10
   30c56:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   30c58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30c5a:	220d      	movs	r2, #13
   30c5c:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   30c5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30c60:	3305      	adds	r3, #5
   30c62:	6eba      	ldr	r2, [r7, #104]	; 0x68
   30c64:	210d      	movs	r1, #13
   30c66:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   30c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30c6a:	3306      	adds	r3, #6
   30c6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
   30c6e:	210a      	movs	r1, #10
   30c70:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   30c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30c74:	2b00      	cmp	r3, #0
   30c76:	db14      	blt.n	30ca2 <_http_client_request+0x4b2>
				ptr = buffer + 2;
   30c78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30c7a:	3302      	adds	r3, #2
   30c7c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   30c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30c80:	4a9c      	ldr	r2, [pc, #624]	; (30ef4 <_http_client_request+0x704>)
   30c82:	4013      	ands	r3, r2
   30c84:	d504      	bpl.n	30c90 <_http_client_request+0x4a0>
   30c86:	3b01      	subs	r3, #1
   30c88:	2210      	movs	r2, #16
   30c8a:	4252      	negs	r2, r2
   30c8c:	4313      	orrs	r3, r2
   30c8e:	3301      	adds	r3, #1
   30c90:	001a      	movs	r2, r3
   30c92:	2318      	movs	r3, #24
   30c94:	2118      	movs	r1, #24
   30c96:	468c      	mov	ip, r1
   30c98:	44bc      	add	ip, r7
   30c9a:	4463      	add	r3, ip
   30c9c:	5c9a      	ldrb	r2, [r3, r2]
   30c9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   30ca0:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   30ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30ca4:	2b0f      	cmp	r3, #15
   30ca6:	dd19      	ble.n	30cdc <_http_client_request+0x4ec>
				ptr = buffer + 1;
   30ca8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30caa:	3301      	adds	r3, #1
   30cac:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   30cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30cb0:	2b00      	cmp	r3, #0
   30cb2:	da00      	bge.n	30cb6 <_http_client_request+0x4c6>
   30cb4:	330f      	adds	r3, #15
   30cb6:	111b      	asrs	r3, r3, #4
   30cb8:	001a      	movs	r2, r3
   30cba:	4b8e      	ldr	r3, [pc, #568]	; (30ef4 <_http_client_request+0x704>)
   30cbc:	4013      	ands	r3, r2
   30cbe:	d504      	bpl.n	30cca <_http_client_request+0x4da>
   30cc0:	3b01      	subs	r3, #1
   30cc2:	2210      	movs	r2, #16
   30cc4:	4252      	negs	r2, r2
   30cc6:	4313      	orrs	r3, r2
   30cc8:	3301      	adds	r3, #1
   30cca:	001a      	movs	r2, r3
   30ccc:	2318      	movs	r3, #24
   30cce:	2118      	movs	r1, #24
   30cd0:	468c      	mov	ip, r1
   30cd2:	44bc      	add	ip, r7
   30cd4:	4463      	add	r3, ip
   30cd6:	5c9a      	ldrb	r2, [r3, r2]
   30cd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   30cda:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   30cdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30cde:	2bff      	cmp	r3, #255	; 0xff
   30ce0:	dd18      	ble.n	30d14 <_http_client_request+0x524>
				ptr = buffer;
   30ce2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30ce4:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   30ce6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30ce8:	2b00      	cmp	r3, #0
   30cea:	da00      	bge.n	30cee <_http_client_request+0x4fe>
   30cec:	33ff      	adds	r3, #255	; 0xff
   30cee:	121b      	asrs	r3, r3, #8
   30cf0:	001a      	movs	r2, r3
   30cf2:	4b80      	ldr	r3, [pc, #512]	; (30ef4 <_http_client_request+0x704>)
   30cf4:	4013      	ands	r3, r2
   30cf6:	d504      	bpl.n	30d02 <_http_client_request+0x512>
   30cf8:	3b01      	subs	r3, #1
   30cfa:	2210      	movs	r2, #16
   30cfc:	4252      	negs	r2, r2
   30cfe:	4313      	orrs	r3, r2
   30d00:	3301      	adds	r3, #1
   30d02:	001a      	movs	r2, r3
   30d04:	2318      	movs	r3, #24
   30d06:	2118      	movs	r1, #24
   30d08:	468c      	mov	ip, r1
   30d0a:	44bc      	add	ip, r7
   30d0c:	4463      	add	r3, ip
   30d0e:	5c9a      	ldrb	r2, [r3, r2]
   30d10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   30d12:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   30d14:	69fb      	ldr	r3, [r7, #28]
   30d16:	2000      	movs	r0, #0
   30d18:	5618      	ldrsb	r0, [r3, r0]
   30d1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   30d1c:	3303      	adds	r3, #3
   30d1e:	001a      	movs	r2, r3
   30d20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30d22:	1ad3      	subs	r3, r2, r3
   30d24:	b29a      	uxth	r2, r3
   30d26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30d28:	b29b      	uxth	r3, r3
   30d2a:	18d3      	adds	r3, r2, r3
   30d2c:	b29b      	uxth	r3, r3
   30d2e:	3304      	adds	r3, #4
   30d30:	b29a      	uxth	r2, r3
   30d32:	6f39      	ldr	r1, [r7, #112]	; 0x70
   30d34:	2300      	movs	r3, #0
   30d36:	4c70      	ldr	r4, [pc, #448]	; (30ef8 <_http_client_request+0x708>)
   30d38:	47a0      	blx	r4
   30d3a:	0003      	movs	r3, r0
   30d3c:	663b      	str	r3, [r7, #96]	; 0x60
   30d3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   30d40:	2b00      	cmp	r3, #0
   30d42:	da07      	bge.n	30d54 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   30d44:	2305      	movs	r3, #5
   30d46:	425a      	negs	r2, r3
   30d48:	69fb      	ldr	r3, [r7, #28]
   30d4a:	0011      	movs	r1, r2
   30d4c:	0018      	movs	r0, r3
   30d4e:	4b6b      	ldr	r3, [pc, #428]	; (30efc <_http_client_request+0x70c>)
   30d50:	4798      	blx	r3
				return;
   30d52:	e0e1      	b.n	30f18 <_http_client_request+0x728>
			module->req.sent_length += size;
   30d54:	69fb      	ldr	r3, [r7, #28]
   30d56:	22d0      	movs	r2, #208	; 0xd0
   30d58:	589a      	ldr	r2, [r3, r2]
   30d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30d5c:	18d2      	adds	r2, r2, r3
   30d5e:	69fb      	ldr	r3, [r7, #28]
   30d60:	21d0      	movs	r1, #208	; 0xd0
   30d62:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   30d64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30d66:	2b00      	cmp	r3, #0
   30d68:	d000      	beq.n	30d6c <_http_client_request+0x57c>
   30d6a:	e0c9      	b.n	30f00 <_http_client_request+0x710>
				if (module->req.entity.close) {
   30d6c:	69fb      	ldr	r3, [r7, #28]
   30d6e:	22c0      	movs	r2, #192	; 0xc0
   30d70:	589b      	ldr	r3, [r3, r2]
   30d72:	2b00      	cmp	r3, #0
   30d74:	d007      	beq.n	30d86 <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   30d76:	69fb      	ldr	r3, [r7, #28]
   30d78:	22c0      	movs	r2, #192	; 0xc0
   30d7a:	589b      	ldr	r3, [r3, r2]
   30d7c:	69fa      	ldr	r2, [r7, #28]
   30d7e:	21c4      	movs	r1, #196	; 0xc4
   30d80:	5852      	ldr	r2, [r2, r1]
   30d82:	0010      	movs	r0, r2
   30d84:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   30d86:	69fb      	ldr	r3, [r7, #28]
   30d88:	2202      	movs	r2, #2
   30d8a:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   30d8c:	69fb      	ldr	r3, [r7, #28]
   30d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30d90:	2b00      	cmp	r3, #0
   30d92:	d100      	bne.n	30d96 <_http_client_request+0x5a6>
   30d94:	e0b5      	b.n	30f02 <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   30d96:	69fb      	ldr	r3, [r7, #28]
   30d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30d9a:	220c      	movs	r2, #12
   30d9c:	2118      	movs	r1, #24
   30d9e:	468c      	mov	ip, r1
   30da0:	44bc      	add	ip, r7
   30da2:	4462      	add	r2, ip
   30da4:	69f8      	ldr	r0, [r7, #28]
   30da6:	2101      	movs	r1, #1
   30da8:	4798      	blx	r3
				break;
   30daa:	e0aa      	b.n	30f02 <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   30dac:	69fb      	ldr	r3, [r7, #28]
   30dae:	22cc      	movs	r2, #204	; 0xcc
   30db0:	589b      	ldr	r3, [r3, r2]
   30db2:	2b00      	cmp	r3, #0
   30db4:	dc00      	bgt.n	30db8 <_http_client_request+0x5c8>
   30db6:	e07c      	b.n	30eb2 <_http_client_request+0x6c2>
   30db8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30dba:	68db      	ldr	r3, [r3, #12]
   30dbc:	2b00      	cmp	r3, #0
   30dbe:	d100      	bne.n	30dc2 <_http_client_request+0x5d2>
   30dc0:	e077      	b.n	30eb2 <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   30dc2:	69fb      	ldr	r3, [r7, #28]
   30dc4:	22d0      	movs	r2, #208	; 0xd0
   30dc6:	589a      	ldr	r2, [r3, r2]
   30dc8:	69fb      	ldr	r3, [r7, #28]
   30dca:	21cc      	movs	r1, #204	; 0xcc
   30dcc:	585b      	ldr	r3, [r3, r1]
   30dce:	429a      	cmp	r2, r3
   30dd0:	db1f      	blt.n	30e12 <_http_client_request+0x622>
				if (module->req.entity.close) {
   30dd2:	69fb      	ldr	r3, [r7, #28]
   30dd4:	22c0      	movs	r2, #192	; 0xc0
   30dd6:	589b      	ldr	r3, [r3, r2]
   30dd8:	2b00      	cmp	r3, #0
   30dda:	d007      	beq.n	30dec <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   30ddc:	69fb      	ldr	r3, [r7, #28]
   30dde:	22c0      	movs	r2, #192	; 0xc0
   30de0:	589b      	ldr	r3, [r3, r2]
   30de2:	69fa      	ldr	r2, [r7, #28]
   30de4:	21c4      	movs	r1, #196	; 0xc4
   30de6:	5852      	ldr	r2, [r2, r1]
   30de8:	0010      	movs	r0, r2
   30dea:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   30dec:	69fb      	ldr	r3, [r7, #28]
   30dee:	2202      	movs	r2, #2
   30df0:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   30df2:	69fb      	ldr	r3, [r7, #28]
   30df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30df6:	2b00      	cmp	r3, #0
   30df8:	d100      	bne.n	30dfc <_http_client_request+0x60c>
   30dfa:	e084      	b.n	30f06 <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   30dfc:	69fb      	ldr	r3, [r7, #28]
   30dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30e00:	220c      	movs	r2, #12
   30e02:	2118      	movs	r1, #24
   30e04:	468c      	mov	ip, r1
   30e06:	44bc      	add	ip, r7
   30e08:	4462      	add	r2, ip
   30e0a:	69f8      	ldr	r0, [r7, #28]
   30e0c:	2101      	movs	r1, #1
   30e0e:	4798      	blx	r3
				break;
   30e10:	e079      	b.n	30f06 <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   30e12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30e14:	68dc      	ldr	r4, [r3, #12]
   30e16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30e18:	6958      	ldr	r0, [r3, #20]
   30e1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   30e1c:	69fb      	ldr	r3, [r7, #28]
   30e1e:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   30e20:	69fb      	ldr	r3, [r7, #28]
   30e22:	22d0      	movs	r2, #208	; 0xd0
   30e24:	589b      	ldr	r3, [r3, r2]
   30e26:	002a      	movs	r2, r5
   30e28:	47a0      	blx	r4
   30e2a:	0003      	movs	r3, r0
   30e2c:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   30e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30e30:	2b00      	cmp	r3, #0
   30e32:	da0d      	bge.n	30e50 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   30e34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30e36:	2b00      	cmp	r3, #0
   30e38:	d102      	bne.n	30e40 <_http_client_request+0x650>
   30e3a:	234d      	movs	r3, #77	; 0x4d
   30e3c:	425b      	negs	r3, r3
   30e3e:	e001      	b.n	30e44 <_http_client_request+0x654>
   30e40:	2305      	movs	r3, #5
   30e42:	425b      	negs	r3, r3
   30e44:	69fa      	ldr	r2, [r7, #28]
   30e46:	0019      	movs	r1, r3
   30e48:	0010      	movs	r0, r2
   30e4a:	4b2c      	ldr	r3, [pc, #176]	; (30efc <_http_client_request+0x70c>)
   30e4c:	4798      	blx	r3
			if (size < 0) {
   30e4e:	e057      	b.n	30f00 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   30e50:	69fb      	ldr	r3, [r7, #28]
   30e52:	22cc      	movs	r2, #204	; 0xcc
   30e54:	589a      	ldr	r2, [r3, r2]
   30e56:	69fb      	ldr	r3, [r7, #28]
   30e58:	21d0      	movs	r1, #208	; 0xd0
   30e5a:	585b      	ldr	r3, [r3, r1]
   30e5c:	1ad2      	subs	r2, r2, r3
   30e5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30e60:	429a      	cmp	r2, r3
   30e62:	da07      	bge.n	30e74 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   30e64:	69fb      	ldr	r3, [r7, #28]
   30e66:	22cc      	movs	r2, #204	; 0xcc
   30e68:	589a      	ldr	r2, [r3, r2]
   30e6a:	69fb      	ldr	r3, [r7, #28]
   30e6c:	21d0      	movs	r1, #208	; 0xd0
   30e6e:	585b      	ldr	r3, [r3, r1]
   30e70:	1ad3      	subs	r3, r2, r3
   30e72:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   30e74:	69fb      	ldr	r3, [r7, #28]
   30e76:	2000      	movs	r0, #0
   30e78:	5618      	ldrsb	r0, [r3, r0]
   30e7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   30e7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30e7e:	b29a      	uxth	r2, r3
   30e80:	2300      	movs	r3, #0
   30e82:	4c1d      	ldr	r4, [pc, #116]	; (30ef8 <_http_client_request+0x708>)
   30e84:	47a0      	blx	r4
   30e86:	0003      	movs	r3, r0
   30e88:	663b      	str	r3, [r7, #96]	; 0x60
   30e8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   30e8c:	2b00      	cmp	r3, #0
   30e8e:	da07      	bge.n	30ea0 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   30e90:	2305      	movs	r3, #5
   30e92:	425a      	negs	r2, r3
   30e94:	69fb      	ldr	r3, [r7, #28]
   30e96:	0011      	movs	r1, r2
   30e98:	0018      	movs	r0, r3
   30e9a:	4b18      	ldr	r3, [pc, #96]	; (30efc <_http_client_request+0x70c>)
   30e9c:	4798      	blx	r3
					return;
   30e9e:	e03b      	b.n	30f18 <_http_client_request+0x728>
				module->req.sent_length += size;
   30ea0:	69fb      	ldr	r3, [r7, #28]
   30ea2:	22d0      	movs	r2, #208	; 0xd0
   30ea4:	589a      	ldr	r2, [r3, r2]
   30ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30ea8:	18d2      	adds	r2, r2, r3
   30eaa:	69fb      	ldr	r3, [r7, #28]
   30eac:	21d0      	movs	r1, #208	; 0xd0
   30eae:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   30eb0:	e026      	b.n	30f00 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   30eb2:	69fb      	ldr	r3, [r7, #28]
   30eb4:	2202      	movs	r2, #2
   30eb6:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   30eb8:	69fb      	ldr	r3, [r7, #28]
   30eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30ebc:	2b00      	cmp	r3, #0
   30ebe:	d024      	beq.n	30f0a <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   30ec0:	69fb      	ldr	r3, [r7, #28]
   30ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30ec4:	220c      	movs	r2, #12
   30ec6:	2118      	movs	r1, #24
   30ec8:	468c      	mov	ip, r1
   30eca:	44bc      	add	ip, r7
   30ecc:	4462      	add	r2, ip
   30ece:	69f8      	ldr	r0, [r7, #28]
   30ed0:	2101      	movs	r1, #1
   30ed2:	4798      	blx	r3
			break;
   30ed4:	e019      	b.n	30f0a <_http_client_request+0x71a>
   30ed6:	46c0      	nop			; (mov r8, r8)
   30ed8:	000393f0 	.word	0x000393f0
   30edc:	000345d9 	.word	0x000345d9
   30ee0:	000393f4 	.word	0x000393f4
   30ee4:	00031751 	.word	0x00031751
   30ee8:	000346d3 	.word	0x000346d3
   30eec:	0003937c 	.word	0x0003937c
   30ef0:	0003178d 	.word	0x0003178d
   30ef4:	8000000f 	.word	0x8000000f
   30ef8:	00024cd5 	.word	0x00024cd5
   30efc:	0003069d 	.word	0x0003069d
		break;
   30f00:	e004      	b.n	30f0c <_http_client_request+0x71c>
				break;
   30f02:	46c0      	nop			; (mov r8, r8)
   30f04:	e002      	b.n	30f0c <_http_client_request+0x71c>
				break;
   30f06:	46c0      	nop			; (mov r8, r8)
   30f08:	e000      	b.n	30f0c <_http_client_request+0x71c>
			break;
   30f0a:	46c0      	nop			; (mov r8, r8)
   30f0c:	69bb      	ldr	r3, [r7, #24]
   30f0e:	469d      	mov	sp, r3
   30f10:	e004      	b.n	30f1c <_http_client_request+0x72c>
		return;
   30f12:	46c0      	nop			; (mov r8, r8)
   30f14:	e000      	b.n	30f18 <_http_client_request+0x728>
		return;
   30f16:	46c0      	nop			; (mov r8, r8)
   30f18:	69bb      	ldr	r3, [r7, #24]
   30f1a:	469d      	mov	sp, r3
	}
}
   30f1c:	46bd      	mov	sp, r7
   30f1e:	b01e      	add	sp, #120	; 0x78
   30f20:	bc04      	pop	{r2}
   30f22:	4690      	mov	r8, r2
   30f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30f26:	46c0      	nop			; (mov r8, r8)

00030f28 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   30f28:	b590      	push	{r4, r7, lr}
   30f2a:	b083      	sub	sp, #12
   30f2c:	af00      	add	r7, sp, #0
   30f2e:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   30f30:	687b      	ldr	r3, [r7, #4]
   30f32:	2b00      	cmp	r3, #0
   30f34:	d021      	beq.n	30f7a <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   30f36:	687b      	ldr	r3, [r7, #4]
   30f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   30f3a:	687b      	ldr	r3, [r7, #4]
   30f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   30f3e:	429a      	cmp	r2, r3
   30f40:	d307      	bcc.n	30f52 <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   30f42:	238b      	movs	r3, #139	; 0x8b
   30f44:	425a      	negs	r2, r3
   30f46:	687b      	ldr	r3, [r7, #4]
   30f48:	0011      	movs	r1, r2
   30f4a:	0018      	movs	r0, r3
   30f4c:	4b0d      	ldr	r3, [pc, #52]	; (30f84 <_http_client_recv_packet+0x5c>)
   30f4e:	4798      	blx	r3
		return;
   30f50:	e014      	b.n	30f7c <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   30f52:	687b      	ldr	r3, [r7, #4]
   30f54:	2000      	movs	r0, #0
   30f56:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   30f58:	687b      	ldr	r3, [r7, #4]
   30f5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   30f5c:	687b      	ldr	r3, [r7, #4]
   30f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   30f60:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   30f62:	687b      	ldr	r3, [r7, #4]
   30f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   30f66:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   30f68:	687b      	ldr	r3, [r7, #4]
   30f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   30f6c:	b29b      	uxth	r3, r3
   30f6e:	1ad3      	subs	r3, r2, r3
   30f70:	b29a      	uxth	r2, r3
   30f72:	2300      	movs	r3, #0
   30f74:	4c04      	ldr	r4, [pc, #16]	; (30f88 <_http_client_recv_packet+0x60>)
   30f76:	47a0      	blx	r4
   30f78:	e000      	b.n	30f7c <_http_client_recv_packet+0x54>
		return;
   30f7a:	46c0      	nop			; (mov r8, r8)
}
   30f7c:	46bd      	mov	sp, r7
   30f7e:	b003      	add	sp, #12
   30f80:	bd90      	pop	{r4, r7, pc}
   30f82:	46c0      	nop			; (mov r8, r8)
   30f84:	0003069d 	.word	0x0003069d
   30f88:	00024e39 	.word	0x00024e39

00030f8c <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   30f8c:	b580      	push	{r7, lr}
   30f8e:	b082      	sub	sp, #8
   30f90:	af00      	add	r7, sp, #0
   30f92:	6078      	str	r0, [r7, #4]
   30f94:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   30f96:	687b      	ldr	r3, [r7, #4]
   30f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   30f9a:	683b      	ldr	r3, [r7, #0]
   30f9c:	18d2      	adds	r2, r2, r3
   30f9e:	687b      	ldr	r3, [r7, #4]
   30fa0:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   30fa2:	687b      	ldr	r3, [r7, #4]
   30fa4:	2258      	movs	r2, #88	; 0x58
   30fa6:	5a9b      	ldrh	r3, [r3, r2]
   30fa8:	2b00      	cmp	r3, #0
   30faa:	d007      	beq.n	30fbc <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   30fac:	687b      	ldr	r3, [r7, #4]
   30fae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   30fb0:	687b      	ldr	r3, [r7, #4]
   30fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30fb4:	0019      	movs	r1, r3
   30fb6:	0010      	movs	r0, r2
   30fb8:	4b06      	ldr	r3, [pc, #24]	; (30fd4 <_http_client_recved_packet+0x48>)
   30fba:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   30fbc:	46c0      	nop			; (mov r8, r8)
   30fbe:	687b      	ldr	r3, [r7, #4]
   30fc0:	0018      	movs	r0, r3
   30fc2:	4b05      	ldr	r3, [pc, #20]	; (30fd8 <_http_client_recved_packet+0x4c>)
   30fc4:	4798      	blx	r3
   30fc6:	1e03      	subs	r3, r0, #0
   30fc8:	d1f9      	bne.n	30fbe <_http_client_recved_packet+0x32>
}
   30fca:	46c0      	nop			; (mov r8, r8)
   30fcc:	46bd      	mov	sp, r7
   30fce:	b002      	add	sp, #8
   30fd0:	bd80      	pop	{r7, pc}
   30fd2:	46c0      	nop			; (mov r8, r8)
   30fd4:	00031a49 	.word	0x00031a49
   30fd8:	00030fdd 	.word	0x00030fdd

00030fdc <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   30fdc:	b580      	push	{r7, lr}
   30fde:	b082      	sub	sp, #8
   30fe0:	af00      	add	r7, sp, #0
   30fe2:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   30fe4:	687b      	ldr	r3, [r7, #4]
   30fe6:	22d8      	movs	r2, #216	; 0xd8
   30fe8:	589b      	ldr	r3, [r3, r2]
   30fea:	2b00      	cmp	r3, #0
   30fec:	d002      	beq.n	30ff4 <_http_client_handle_response+0x18>
   30fee:	2b01      	cmp	r3, #1
   30ff0:	d006      	beq.n	31000 <_http_client_handle_response+0x24>
   30ff2:	e00b      	b.n	3100c <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   30ff4:	687b      	ldr	r3, [r7, #4]
   30ff6:	0018      	movs	r0, r3
   30ff8:	4b07      	ldr	r3, [pc, #28]	; (31018 <_http_client_handle_response+0x3c>)
   30ffa:	4798      	blx	r3
   30ffc:	0003      	movs	r3, r0
   30ffe:	e006      	b.n	3100e <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   31000:	687b      	ldr	r3, [r7, #4]
   31002:	0018      	movs	r0, r3
   31004:	4b05      	ldr	r3, [pc, #20]	; (3101c <_http_client_handle_response+0x40>)
   31006:	4798      	blx	r3
   31008:	0003      	movs	r3, r0
   3100a:	e000      	b.n	3100e <_http_client_handle_response+0x32>
	}
	return 0;
   3100c:	2300      	movs	r3, #0
}
   3100e:	0018      	movs	r0, r3
   31010:	46bd      	mov	sp, r7
   31012:	b002      	add	sp, #8
   31014:	bd80      	pop	{r7, pc}
   31016:	46c0      	nop			; (mov r8, r8)
   31018:	00031021 	.word	0x00031021
   3101c:	000314d9 	.word	0x000314d9

00031020 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   31020:	b590      	push	{r4, r7, lr}
   31022:	b08b      	sub	sp, #44	; 0x2c
   31024:	af00      	add	r7, sp, #0
   31026:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   31028:	687b      	ldr	r3, [r7, #4]
   3102a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3102c:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   3102e:	4b9a      	ldr	r3, [pc, #616]	; (31298 <_http_client_handle_header+0x278>)
   31030:	681a      	ldr	r2, [r3, #0]
   31032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31034:	0011      	movs	r1, r2
   31036:	0018      	movs	r0, r3
   31038:	4b98      	ldr	r3, [pc, #608]	; (3129c <_http_client_handle_header+0x27c>)
   3103a:	4798      	blx	r3
   3103c:	0003      	movs	r3, r0
   3103e:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   31040:	69bb      	ldr	r3, [r7, #24]
   31042:	2b00      	cmp	r3, #0
   31044:	d007      	beq.n	31056 <_http_client_handle_header+0x36>
   31046:	687b      	ldr	r3, [r7, #4]
   31048:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   3104a:	687b      	ldr	r3, [r7, #4]
   3104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3104e:	18d2      	adds	r2, r2, r3
   31050:	69bb      	ldr	r3, [r7, #24]
   31052:	429a      	cmp	r2, r3
   31054:	d807      	bhi.n	31066 <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   31056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   31058:	687b      	ldr	r3, [r7, #4]
   3105a:	0011      	movs	r1, r2
   3105c:	0018      	movs	r0, r3
   3105e:	4b90      	ldr	r3, [pc, #576]	; (312a0 <_http_client_handle_header+0x280>)
   31060:	4798      	blx	r3
			return 0;
   31062:	2300      	movs	r3, #0
   31064:	e114      	b.n	31290 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   31066:	4b8c      	ldr	r3, [pc, #560]	; (31298 <_http_client_handle_header+0x278>)
   31068:	681c      	ldr	r4, [r3, #0]
   3106a:	4b8b      	ldr	r3, [pc, #556]	; (31298 <_http_client_handle_header+0x278>)
   3106c:	681b      	ldr	r3, [r3, #0]
   3106e:	0018      	movs	r0, r3
   31070:	4b8c      	ldr	r3, [pc, #560]	; (312a4 <_http_client_handle_header+0x284>)
   31072:	4798      	blx	r3
   31074:	0002      	movs	r2, r0
   31076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31078:	0021      	movs	r1, r4
   3107a:	0018      	movs	r0, r3
   3107c:	4b8a      	ldr	r3, [pc, #552]	; (312a8 <_http_client_handle_header+0x288>)
   3107e:	4798      	blx	r3
   31080:	1e03      	subs	r3, r0, #0
   31082:	d15d      	bne.n	31140 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   31084:	4b84      	ldr	r3, [pc, #528]	; (31298 <_http_client_handle_header+0x278>)
   31086:	681b      	ldr	r3, [r3, #0]
   31088:	0018      	movs	r0, r3
   3108a:	4b86      	ldr	r3, [pc, #536]	; (312a4 <_http_client_handle_header+0x284>)
   3108c:	4798      	blx	r3
   3108e:	0002      	movs	r2, r0
   31090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31092:	189a      	adds	r2, r3, r2
   31094:	687b      	ldr	r3, [r7, #4]
   31096:	0011      	movs	r1, r2
   31098:	0018      	movs	r0, r3
   3109a:	4b81      	ldr	r3, [pc, #516]	; (312a0 <_http_client_handle_header+0x280>)
   3109c:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   3109e:	687b      	ldr	r3, [r7, #4]
   310a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   310a2:	2b00      	cmp	r3, #0
   310a4:	d046      	beq.n	31134 <_http_client_handle_header+0x114>
   310a6:	687b      	ldr	r3, [r7, #4]
   310a8:	22e4      	movs	r2, #228	; 0xe4
   310aa:	5a9b      	ldrh	r3, [r3, r2]
   310ac:	2b00      	cmp	r3, #0
   310ae:	d041      	beq.n	31134 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   310b0:	687b      	ldr	r3, [r7, #4]
   310b2:	22dc      	movs	r2, #220	; 0xdc
   310b4:	589b      	ldr	r3, [r3, r2]
   310b6:	2b00      	cmp	r3, #0
   310b8:	da19      	bge.n	310ee <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   310ba:	687b      	ldr	r3, [r7, #4]
   310bc:	22e4      	movs	r2, #228	; 0xe4
   310be:	5a9a      	ldrh	r2, [r3, r2]
   310c0:	230c      	movs	r3, #12
   310c2:	18fb      	adds	r3, r7, r3
   310c4:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   310c6:	230c      	movs	r3, #12
   310c8:	18fb      	adds	r3, r7, r3
   310ca:	2201      	movs	r2, #1
   310cc:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   310ce:	687b      	ldr	r3, [r7, #4]
   310d0:	22e0      	movs	r2, #224	; 0xe0
   310d2:	2100      	movs	r1, #0
   310d4:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   310d6:	230c      	movs	r3, #12
   310d8:	18fb      	adds	r3, r7, r3
   310da:	2200      	movs	r2, #0
   310dc:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   310de:	687b      	ldr	r3, [r7, #4]
   310e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   310e2:	220c      	movs	r2, #12
   310e4:	18ba      	adds	r2, r7, r2
   310e6:	6878      	ldr	r0, [r7, #4]
   310e8:	2102      	movs	r1, #2
   310ea:	4798      	blx	r3
   310ec:	e022      	b.n	31134 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   310ee:	687b      	ldr	r3, [r7, #4]
   310f0:	22dc      	movs	r2, #220	; 0xdc
   310f2:	589a      	ldr	r2, [r3, r2]
   310f4:	687b      	ldr	r3, [r7, #4]
   310f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   310f8:	429a      	cmp	r2, r3
   310fa:	dd1b      	ble.n	31134 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   310fc:	687b      	ldr	r3, [r7, #4]
   310fe:	22e4      	movs	r2, #228	; 0xe4
   31100:	5a9a      	ldrh	r2, [r3, r2]
   31102:	230c      	movs	r3, #12
   31104:	18fb      	adds	r3, r7, r3
   31106:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   31108:	687b      	ldr	r3, [r7, #4]
   3110a:	22dc      	movs	r2, #220	; 0xdc
   3110c:	589b      	ldr	r3, [r3, r2]
   3110e:	001a      	movs	r2, r3
   31110:	230c      	movs	r3, #12
   31112:	18fb      	adds	r3, r7, r3
   31114:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   31116:	230c      	movs	r3, #12
   31118:	18fb      	adds	r3, r7, r3
   3111a:	2200      	movs	r2, #0
   3111c:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   3111e:	687b      	ldr	r3, [r7, #4]
   31120:	22e0      	movs	r2, #224	; 0xe0
   31122:	2100      	movs	r1, #0
   31124:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   31126:	687b      	ldr	r3, [r7, #4]
   31128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3112a:	220c      	movs	r2, #12
   3112c:	18ba      	adds	r2, r7, r2
   3112e:	6878      	ldr	r0, [r7, #4]
   31130:	2102      	movs	r1, #2
   31132:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   31134:	687b      	ldr	r3, [r7, #4]
   31136:	22d8      	movs	r2, #216	; 0xd8
   31138:	2101      	movs	r1, #1
   3113a:	5099      	str	r1, [r3, r2]
			return 1;
   3113c:	2301      	movs	r3, #1
   3113e:	e0a7      	b.n	31290 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   31140:	495a      	ldr	r1, [pc, #360]	; (312ac <_http_client_handle_header+0x28c>)
   31142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31144:	2210      	movs	r2, #16
   31146:	0018      	movs	r0, r3
   31148:	4b57      	ldr	r3, [pc, #348]	; (312a8 <_http_client_handle_header+0x288>)
   3114a:	4798      	blx	r3
   3114c:	1e03      	subs	r3, r0, #0
   3114e:	d109      	bne.n	31164 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   31150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31152:	3310      	adds	r3, #16
   31154:	0018      	movs	r0, r3
   31156:	4b56      	ldr	r3, [pc, #344]	; (312b0 <_http_client_handle_header+0x290>)
   31158:	4798      	blx	r3
   3115a:	0001      	movs	r1, r0
   3115c:	687b      	ldr	r3, [r7, #4]
   3115e:	22dc      	movs	r2, #220	; 0xdc
   31160:	5099      	str	r1, [r3, r2]
   31162:	e08b      	b.n	3127c <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   31164:	4953      	ldr	r1, [pc, #332]	; (312b4 <_http_client_handle_header+0x294>)
   31166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31168:	2213      	movs	r2, #19
   3116a:	0018      	movs	r0, r3
   3116c:	4b4e      	ldr	r3, [pc, #312]	; (312a8 <_http_client_handle_header+0x288>)
   3116e:	4798      	blx	r3
   31170:	1e03      	subs	r3, r0, #0
   31172:	d127      	bne.n	311c4 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   31174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31176:	3313      	adds	r3, #19
   31178:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   3117a:	e01e      	b.n	311ba <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   3117c:	6a3b      	ldr	r3, [r7, #32]
   3117e:	781b      	ldrb	r3, [r3, #0]
   31180:	2b20      	cmp	r3, #32
   31182:	d103      	bne.n	3118c <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31184:	6a3b      	ldr	r3, [r7, #32]
   31186:	3301      	adds	r3, #1
   31188:	623b      	str	r3, [r7, #32]
   3118a:	e016      	b.n	311ba <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   3118c:	6a3b      	ldr	r3, [r7, #32]
   3118e:	781b      	ldrb	r3, [r3, #0]
   31190:	2b43      	cmp	r3, #67	; 0x43
   31192:	d003      	beq.n	3119c <_http_client_handle_header+0x17c>
   31194:	6a3b      	ldr	r3, [r7, #32]
   31196:	781b      	ldrb	r3, [r3, #0]
   31198:	2b63      	cmp	r3, #99	; 0x63
   3119a:	d105      	bne.n	311a8 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   3119c:	687b      	ldr	r3, [r7, #4]
   3119e:	21cc      	movs	r1, #204	; 0xcc
   311a0:	2201      	movs	r2, #1
   311a2:	4252      	negs	r2, r2
   311a4:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   311a6:	e069      	b.n	3127c <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   311a8:	2386      	movs	r3, #134	; 0x86
   311aa:	425a      	negs	r2, r3
   311ac:	687b      	ldr	r3, [r7, #4]
   311ae:	0011      	movs	r1, r2
   311b0:	0018      	movs	r0, r3
   311b2:	4b41      	ldr	r3, [pc, #260]	; (312b8 <_http_client_handle_header+0x298>)
   311b4:	4798      	blx	r3
					return 0;
   311b6:	2300      	movs	r3, #0
   311b8:	e06a      	b.n	31290 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   311ba:	69ba      	ldr	r2, [r7, #24]
   311bc:	6a3b      	ldr	r3, [r7, #32]
   311be:	429a      	cmp	r2, r3
   311c0:	d8dc      	bhi.n	3117c <_http_client_handle_header+0x15c>
   311c2:	e05b      	b.n	3127c <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   311c4:	493d      	ldr	r1, [pc, #244]	; (312bc <_http_client_handle_header+0x29c>)
   311c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   311c8:	220c      	movs	r2, #12
   311ca:	0018      	movs	r0, r3
   311cc:	4b36      	ldr	r3, [pc, #216]	; (312a8 <_http_client_handle_header+0x288>)
   311ce:	4798      	blx	r3
   311d0:	1e03      	subs	r3, r0, #0
   311d2:	d126      	bne.n	31222 <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   311d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   311d6:	330c      	adds	r3, #12
   311d8:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   311da:	e01d      	b.n	31218 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   311dc:	69fb      	ldr	r3, [r7, #28]
   311de:	781b      	ldrb	r3, [r3, #0]
   311e0:	2b20      	cmp	r3, #32
   311e2:	d103      	bne.n	311ec <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   311e4:	69fb      	ldr	r3, [r7, #28]
   311e6:	3301      	adds	r3, #1
   311e8:	61fb      	str	r3, [r7, #28]
   311ea:	e015      	b.n	31218 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   311ec:	69fb      	ldr	r3, [r7, #28]
   311ee:	781b      	ldrb	r3, [r3, #0]
   311f0:	2b4b      	cmp	r3, #75	; 0x4b
   311f2:	d003      	beq.n	311fc <_http_client_handle_header+0x1dc>
   311f4:	69fb      	ldr	r3, [r7, #28]
   311f6:	781b      	ldrb	r3, [r3, #0]
   311f8:	2b6b      	cmp	r3, #107	; 0x6b
   311fa:	d106      	bne.n	3120a <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   311fc:	687b      	ldr	r3, [r7, #4]
   311fe:	2241      	movs	r2, #65	; 0x41
   31200:	5c99      	ldrb	r1, [r3, r2]
   31202:	2002      	movs	r0, #2
   31204:	4301      	orrs	r1, r0
   31206:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   31208:	e038      	b.n	3127c <_http_client_handle_header+0x25c>
					module->permanent = 0;
   3120a:	687b      	ldr	r3, [r7, #4]
   3120c:	2241      	movs	r2, #65	; 0x41
   3120e:	5c99      	ldrb	r1, [r3, r2]
   31210:	2002      	movs	r0, #2
   31212:	4381      	bics	r1, r0
   31214:	5499      	strb	r1, [r3, r2]
				break;
   31216:	e031      	b.n	3127c <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31218:	69ba      	ldr	r2, [r7, #24]
   3121a:	69fb      	ldr	r3, [r7, #28]
   3121c:	429a      	cmp	r2, r3
   3121e:	d8dd      	bhi.n	311dc <_http_client_handle_header+0x1bc>
   31220:	e02c      	b.n	3127c <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   31222:	4927      	ldr	r1, [pc, #156]	; (312c0 <_http_client_handle_header+0x2a0>)
   31224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31226:	2205      	movs	r2, #5
   31228:	0018      	movs	r0, r3
   3122a:	4b1f      	ldr	r3, [pc, #124]	; (312a8 <_http_client_handle_header+0x288>)
   3122c:	4798      	blx	r3
   3122e:	1e03      	subs	r3, r0, #0
   31230:	d124      	bne.n	3127c <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   31232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31234:	3309      	adds	r3, #9
   31236:	0018      	movs	r0, r3
   31238:	4b1d      	ldr	r3, [pc, #116]	; (312b0 <_http_client_handle_header+0x290>)
   3123a:	4798      	blx	r3
   3123c:	0003      	movs	r3, r0
   3123e:	b299      	uxth	r1, r3
   31240:	687b      	ldr	r3, [r7, #4]
   31242:	22e4      	movs	r2, #228	; 0xe4
   31244:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   31246:	687b      	ldr	r3, [r7, #4]
   31248:	22dc      	movs	r2, #220	; 0xdc
   3124a:	2100      	movs	r1, #0
   3124c:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   3124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31250:	3305      	adds	r3, #5
   31252:	781b      	ldrb	r3, [r3, #0]
   31254:	2b31      	cmp	r3, #49	; 0x31
   31256:	d804      	bhi.n	31262 <_http_client_handle_header+0x242>
   31258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3125a:	3307      	adds	r3, #7
   3125c:	781b      	ldrb	r3, [r3, #0]
   3125e:	2b30      	cmp	r3, #48	; 0x30
   31260:	d906      	bls.n	31270 <_http_client_handle_header+0x250>
				module->permanent = 1;
   31262:	687b      	ldr	r3, [r7, #4]
   31264:	2241      	movs	r2, #65	; 0x41
   31266:	5c99      	ldrb	r1, [r3, r2]
   31268:	2002      	movs	r0, #2
   3126a:	4301      	orrs	r1, r0
   3126c:	5499      	strb	r1, [r3, r2]
   3126e:	e005      	b.n	3127c <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   31270:	687b      	ldr	r3, [r7, #4]
   31272:	2241      	movs	r2, #65	; 0x41
   31274:	5c99      	ldrb	r1, [r3, r2]
   31276:	2002      	movs	r0, #2
   31278:	4381      	bics	r1, r0
   3127a:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   3127c:	4b06      	ldr	r3, [pc, #24]	; (31298 <_http_client_handle_header+0x278>)
   3127e:	681b      	ldr	r3, [r3, #0]
   31280:	0018      	movs	r0, r3
   31282:	4b08      	ldr	r3, [pc, #32]	; (312a4 <_http_client_handle_header+0x284>)
   31284:	4798      	blx	r3
   31286:	0002      	movs	r2, r0
   31288:	69bb      	ldr	r3, [r7, #24]
   3128a:	189b      	adds	r3, r3, r2
   3128c:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   3128e:	e6ce      	b.n	3102e <_http_client_handle_header+0xe>
	}
}
   31290:	0018      	movs	r0, r3
   31292:	46bd      	mov	sp, r7
   31294:	b00b      	add	sp, #44	; 0x2c
   31296:	bd90      	pop	{r4, r7, pc}
   31298:	20000114 	.word	0x20000114
   3129c:	00034751 	.word	0x00034751
   312a0:	00031685 	.word	0x00031685
   312a4:	000346d3 	.word	0x000346d3
   312a8:	000346e1 	.word	0x000346e1
   312ac:	000393f4 	.word	0x000393f4
   312b0:	00034269 	.word	0x00034269
   312b4:	00039418 	.word	0x00039418
   312b8:	0003069d 	.word	0x0003069d
   312bc:	0003942c 	.word	0x0003942c
   312c0:	0003943c 	.word	0x0003943c

000312c4 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   312c4:	b580      	push	{r7, lr}
   312c6:	b088      	sub	sp, #32
   312c8:	af00      	add	r7, sp, #0
   312ca:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   312cc:	687b      	ldr	r3, [r7, #4]
   312ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   312d0:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   312d2:	2300      	movs	r3, #0
   312d4:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   312d6:	687b      	ldr	r3, [r7, #4]
   312d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   312da:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   312dc:	687b      	ldr	r3, [r7, #4]
   312de:	22e0      	movs	r2, #224	; 0xe0
   312e0:	589b      	ldr	r3, [r3, r2]
   312e2:	2b00      	cmp	r3, #0
   312e4:	db71      	blt.n	313ca <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   312e6:	687b      	ldr	r3, [r7, #4]
   312e8:	22e0      	movs	r2, #224	; 0xe0
   312ea:	589b      	ldr	r3, [r3, r2]
   312ec:	2b00      	cmp	r3, #0
   312ee:	d134      	bne.n	3135a <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   312f0:	687b      	ldr	r3, [r7, #4]
   312f2:	22d8      	movs	r2, #216	; 0xd8
   312f4:	2100      	movs	r1, #0
   312f6:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   312f8:	687b      	ldr	r3, [r7, #4]
   312fa:	22e4      	movs	r2, #228	; 0xe4
   312fc:	2100      	movs	r1, #0
   312fe:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   31300:	2308      	movs	r3, #8
   31302:	18fb      	adds	r3, r7, r3
   31304:	2201      	movs	r2, #1
   31306:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   31308:	2308      	movs	r3, #8
   3130a:	18fb      	adds	r3, r7, r3
   3130c:	2200      	movs	r2, #0
   3130e:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   31310:	2308      	movs	r3, #8
   31312:	18fb      	adds	r3, r7, r3
   31314:	2200      	movs	r2, #0
   31316:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   31318:	687b      	ldr	r3, [r7, #4]
   3131a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3131c:	2b00      	cmp	r3, #0
   3131e:	d006      	beq.n	3132e <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   31320:	687b      	ldr	r3, [r7, #4]
   31322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31324:	2208      	movs	r2, #8
   31326:	18ba      	adds	r2, r7, r2
   31328:	6878      	ldr	r0, [r7, #4]
   3132a:	2103      	movs	r1, #3
   3132c:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   3132e:	687b      	ldr	r3, [r7, #4]
   31330:	2241      	movs	r2, #65	; 0x41
   31332:	5c9b      	ldrb	r3, [r3, r2]
   31334:	2202      	movs	r2, #2
   31336:	4013      	ands	r3, r2
   31338:	b2db      	uxtb	r3, r3
   3133a:	2b00      	cmp	r3, #0
   3133c:	d105      	bne.n	3134a <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   3133e:	687b      	ldr	r3, [r7, #4]
   31340:	2100      	movs	r1, #0
   31342:	0018      	movs	r0, r3
   31344:	4b62      	ldr	r3, [pc, #392]	; (314d0 <_http_client_read_chuked_entity+0x20c>)
   31346:	4798      	blx	r3
					return;
   31348:	e0bf      	b.n	314ca <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   3134a:	697b      	ldr	r3, [r7, #20]
   3134c:	1c9a      	adds	r2, r3, #2
   3134e:	687b      	ldr	r3, [r7, #4]
   31350:	0011      	movs	r1, r2
   31352:	0018      	movs	r0, r3
   31354:	4b5f      	ldr	r3, [pc, #380]	; (314d4 <_http_client_read_chuked_entity+0x210>)
   31356:	4798      	blx	r3
   31358:	e0b2      	b.n	314c0 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   3135a:	687b      	ldr	r3, [r7, #4]
   3135c:	22e0      	movs	r2, #224	; 0xe0
   3135e:	589a      	ldr	r2, [r3, r2]
   31360:	69fb      	ldr	r3, [r7, #28]
   31362:	429a      	cmp	r2, r3
   31364:	dd00      	ble.n	31368 <_http_client_read_chuked_entity+0xa4>
   31366:	e0ab      	b.n	314c0 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   31368:	687b      	ldr	r3, [r7, #4]
   3136a:	22e0      	movs	r2, #224	; 0xe0
   3136c:	589b      	ldr	r3, [r3, r2]
   3136e:	001a      	movs	r2, r3
   31370:	2308      	movs	r3, #8
   31372:	18fb      	adds	r3, r7, r3
   31374:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   31376:	2308      	movs	r3, #8
   31378:	18fb      	adds	r3, r7, r3
   3137a:	697a      	ldr	r2, [r7, #20]
   3137c:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   3137e:	2308      	movs	r3, #8
   31380:	18fb      	adds	r3, r7, r3
   31382:	2200      	movs	r2, #0
   31384:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   31386:	687b      	ldr	r3, [r7, #4]
   31388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3138a:	2b00      	cmp	r3, #0
   3138c:	d006      	beq.n	3139c <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   3138e:	687b      	ldr	r3, [r7, #4]
   31390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31392:	2208      	movs	r2, #8
   31394:	18ba      	adds	r2, r7, r2
   31396:	6878      	ldr	r0, [r7, #4]
   31398:	2103      	movs	r1, #3
   3139a:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   3139c:	687b      	ldr	r3, [r7, #4]
   3139e:	22e0      	movs	r2, #224	; 0xe0
   313a0:	589b      	ldr	r3, [r3, r2]
   313a2:	3302      	adds	r3, #2
   313a4:	697a      	ldr	r2, [r7, #20]
   313a6:	18d2      	adds	r2, r2, r3
   313a8:	687b      	ldr	r3, [r7, #4]
   313aa:	0011      	movs	r1, r2
   313ac:	0018      	movs	r0, r3
   313ae:	4b49      	ldr	r3, [pc, #292]	; (314d4 <_http_client_read_chuked_entity+0x210>)
   313b0:	4798      	blx	r3
				length = (int)module->recved_size;
   313b2:	687b      	ldr	r3, [r7, #4]
   313b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   313b6:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   313b8:	687b      	ldr	r3, [r7, #4]
   313ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   313bc:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   313be:	687b      	ldr	r3, [r7, #4]
   313c0:	21e0      	movs	r1, #224	; 0xe0
   313c2:	2201      	movs	r2, #1
   313c4:	4252      	negs	r2, r2
   313c6:	505a      	str	r2, [r3, r1]
   313c8:	e07a      	b.n	314c0 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   313ca:	687b      	ldr	r3, [r7, #4]
   313cc:	22e0      	movs	r2, #224	; 0xe0
   313ce:	2100      	movs	r1, #0
   313d0:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   313d2:	e05a      	b.n	3148a <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   313d4:	697b      	ldr	r3, [r7, #20]
   313d6:	781b      	ldrb	r3, [r3, #0]
   313d8:	2b0a      	cmp	r3, #10
   313da:	d106      	bne.n	313ea <_http_client_read_chuked_entity+0x126>
					buffer++;
   313dc:	697b      	ldr	r3, [r7, #20]
   313de:	3301      	adds	r3, #1
   313e0:	617b      	str	r3, [r7, #20]
					length--;
   313e2:	69fb      	ldr	r3, [r7, #28]
   313e4:	3b01      	subs	r3, #1
   313e6:	61fb      	str	r3, [r7, #28]
					break;
   313e8:	e052      	b.n	31490 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   313ea:	69bb      	ldr	r3, [r7, #24]
   313ec:	2b00      	cmp	r3, #0
   313ee:	d145      	bne.n	3147c <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   313f0:	697b      	ldr	r3, [r7, #20]
   313f2:	781b      	ldrb	r3, [r3, #0]
   313f4:	2b2f      	cmp	r3, #47	; 0x2f
   313f6:	d910      	bls.n	3141a <_http_client_read_chuked_entity+0x156>
   313f8:	697b      	ldr	r3, [r7, #20]
   313fa:	781b      	ldrb	r3, [r3, #0]
   313fc:	2b39      	cmp	r3, #57	; 0x39
   313fe:	d80c      	bhi.n	3141a <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   31400:	687b      	ldr	r3, [r7, #4]
   31402:	22e0      	movs	r2, #224	; 0xe0
   31404:	589b      	ldr	r3, [r3, r2]
   31406:	011b      	lsls	r3, r3, #4
   31408:	697a      	ldr	r2, [r7, #20]
   3140a:	7812      	ldrb	r2, [r2, #0]
   3140c:	189b      	adds	r3, r3, r2
   3140e:	3b30      	subs	r3, #48	; 0x30
   31410:	001a      	movs	r2, r3
   31412:	687b      	ldr	r3, [r7, #4]
   31414:	21e0      	movs	r1, #224	; 0xe0
   31416:	505a      	str	r2, [r3, r1]
   31418:	e031      	b.n	3147e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   3141a:	697b      	ldr	r3, [r7, #20]
   3141c:	781b      	ldrb	r3, [r3, #0]
   3141e:	2b60      	cmp	r3, #96	; 0x60
   31420:	d910      	bls.n	31444 <_http_client_read_chuked_entity+0x180>
   31422:	697b      	ldr	r3, [r7, #20]
   31424:	781b      	ldrb	r3, [r3, #0]
   31426:	2b66      	cmp	r3, #102	; 0x66
   31428:	d80c      	bhi.n	31444 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   3142a:	687b      	ldr	r3, [r7, #4]
   3142c:	22e0      	movs	r2, #224	; 0xe0
   3142e:	589b      	ldr	r3, [r3, r2]
   31430:	011b      	lsls	r3, r3, #4
   31432:	697a      	ldr	r2, [r7, #20]
   31434:	7812      	ldrb	r2, [r2, #0]
   31436:	189b      	adds	r3, r3, r2
   31438:	3b61      	subs	r3, #97	; 0x61
   3143a:	001a      	movs	r2, r3
   3143c:	687b      	ldr	r3, [r7, #4]
   3143e:	21e0      	movs	r1, #224	; 0xe0
   31440:	505a      	str	r2, [r3, r1]
   31442:	e01c      	b.n	3147e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   31444:	697b      	ldr	r3, [r7, #20]
   31446:	781b      	ldrb	r3, [r3, #0]
   31448:	2b40      	cmp	r3, #64	; 0x40
   3144a:	d910      	bls.n	3146e <_http_client_read_chuked_entity+0x1aa>
   3144c:	697b      	ldr	r3, [r7, #20]
   3144e:	781b      	ldrb	r3, [r3, #0]
   31450:	2b46      	cmp	r3, #70	; 0x46
   31452:	d80c      	bhi.n	3146e <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   31454:	687b      	ldr	r3, [r7, #4]
   31456:	22e0      	movs	r2, #224	; 0xe0
   31458:	589b      	ldr	r3, [r3, r2]
   3145a:	011b      	lsls	r3, r3, #4
   3145c:	697a      	ldr	r2, [r7, #20]
   3145e:	7812      	ldrb	r2, [r2, #0]
   31460:	189b      	adds	r3, r3, r2
   31462:	3b41      	subs	r3, #65	; 0x41
   31464:	001a      	movs	r2, r3
   31466:	687b      	ldr	r3, [r7, #4]
   31468:	21e0      	movs	r1, #224	; 0xe0
   3146a:	505a      	str	r2, [r3, r1]
   3146c:	e007      	b.n	3147e <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   3146e:	697b      	ldr	r3, [r7, #20]
   31470:	781b      	ldrb	r3, [r3, #0]
   31472:	2b3b      	cmp	r3, #59	; 0x3b
   31474:	d103      	bne.n	3147e <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   31476:	2301      	movs	r3, #1
   31478:	61bb      	str	r3, [r7, #24]
   3147a:	e000      	b.n	3147e <_http_client_read_chuked_entity+0x1ba>
					continue;
   3147c:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   3147e:	697b      	ldr	r3, [r7, #20]
   31480:	3301      	adds	r3, #1
   31482:	617b      	str	r3, [r7, #20]
   31484:	69fb      	ldr	r3, [r7, #28]
   31486:	3b01      	subs	r3, #1
   31488:	61fb      	str	r3, [r7, #28]
   3148a:	69fb      	ldr	r3, [r7, #28]
   3148c:	2b00      	cmp	r3, #0
   3148e:	dca1      	bgt.n	313d4 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   31490:	687b      	ldr	r3, [r7, #4]
   31492:	22e0      	movs	r2, #224	; 0xe0
   31494:	589a      	ldr	r2, [r3, r2]
   31496:	687b      	ldr	r3, [r7, #4]
   31498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   3149a:	429a      	cmp	r2, r3
   3149c:	dd07      	ble.n	314ae <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   3149e:	238b      	movs	r3, #139	; 0x8b
   314a0:	425a      	negs	r2, r3
   314a2:	687b      	ldr	r3, [r7, #4]
   314a4:	0011      	movs	r1, r2
   314a6:	0018      	movs	r0, r3
   314a8:	4b09      	ldr	r3, [pc, #36]	; (314d0 <_http_client_read_chuked_entity+0x20c>)
   314aa:	4798      	blx	r3
				return;
   314ac:	e00d      	b.n	314ca <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   314ae:	69fb      	ldr	r3, [r7, #28]
   314b0:	2b00      	cmp	r3, #0
   314b2:	d105      	bne.n	314c0 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   314b4:	687b      	ldr	r3, [r7, #4]
   314b6:	21e0      	movs	r1, #224	; 0xe0
   314b8:	2201      	movs	r2, #1
   314ba:	4252      	negs	r2, r2
   314bc:	505a      	str	r2, [r3, r1]
				return;
   314be:	e004      	b.n	314ca <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   314c0:	687b      	ldr	r3, [r7, #4]
   314c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   314c4:	2b00      	cmp	r3, #0
   314c6:	d000      	beq.n	314ca <_http_client_read_chuked_entity+0x206>
   314c8:	e708      	b.n	312dc <_http_client_read_chuked_entity+0x18>
}
   314ca:	46bd      	mov	sp, r7
   314cc:	b008      	add	sp, #32
   314ce:	bd80      	pop	{r7, pc}
   314d0:	0003069d 	.word	0x0003069d
   314d4:	00031685 	.word	0x00031685

000314d8 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   314d8:	b580      	push	{r7, lr}
   314da:	b086      	sub	sp, #24
   314dc:	af00      	add	r7, sp, #0
   314de:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   314e0:	687b      	ldr	r3, [r7, #4]
   314e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   314e4:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   314e6:	687b      	ldr	r3, [r7, #4]
   314e8:	22dc      	movs	r2, #220	; 0xdc
   314ea:	589b      	ldr	r3, [r3, r2]
   314ec:	2b00      	cmp	r3, #0
   314ee:	db58      	blt.n	315a2 <_http_client_handle_entity+0xca>
   314f0:	687b      	ldr	r3, [r7, #4]
   314f2:	22dc      	movs	r2, #220	; 0xdc
   314f4:	589a      	ldr	r2, [r3, r2]
   314f6:	687b      	ldr	r3, [r7, #4]
   314f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   314fa:	429a      	cmp	r2, r3
   314fc:	dc51      	bgt.n	315a2 <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   314fe:	687b      	ldr	r3, [r7, #4]
   31500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31502:	0019      	movs	r1, r3
   31504:	687b      	ldr	r3, [r7, #4]
   31506:	22dc      	movs	r2, #220	; 0xdc
   31508:	589b      	ldr	r3, [r3, r2]
   3150a:	4299      	cmp	r1, r3
   3150c:	da00      	bge.n	31510 <_http_client_handle_entity+0x38>
   3150e:	e0a9      	b.n	31664 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   31510:	687b      	ldr	r3, [r7, #4]
   31512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31514:	2b00      	cmp	r3, #0
   31516:	d020      	beq.n	3155a <_http_client_handle_entity+0x82>
   31518:	687b      	ldr	r3, [r7, #4]
   3151a:	22e4      	movs	r2, #228	; 0xe4
   3151c:	5a9b      	ldrh	r3, [r3, r2]
   3151e:	2b00      	cmp	r3, #0
   31520:	d01b      	beq.n	3155a <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   31522:	687b      	ldr	r3, [r7, #4]
   31524:	22e4      	movs	r2, #228	; 0xe4
   31526:	5a9a      	ldrh	r2, [r3, r2]
   31528:	2308      	movs	r3, #8
   3152a:	18fb      	adds	r3, r7, r3
   3152c:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   3152e:	2308      	movs	r3, #8
   31530:	18fb      	adds	r3, r7, r3
   31532:	2200      	movs	r2, #0
   31534:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   31536:	687b      	ldr	r3, [r7, #4]
   31538:	22dc      	movs	r2, #220	; 0xdc
   3153a:	589b      	ldr	r3, [r3, r2]
   3153c:	001a      	movs	r2, r3
   3153e:	2308      	movs	r3, #8
   31540:	18fb      	adds	r3, r7, r3
   31542:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   31544:	2308      	movs	r3, #8
   31546:	18fb      	adds	r3, r7, r3
   31548:	697a      	ldr	r2, [r7, #20]
   3154a:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   3154c:	687b      	ldr	r3, [r7, #4]
   3154e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31550:	2208      	movs	r2, #8
   31552:	18ba      	adds	r2, r7, r2
   31554:	6878      	ldr	r0, [r7, #4]
   31556:	2102      	movs	r1, #2
   31558:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   3155a:	687b      	ldr	r3, [r7, #4]
   3155c:	22d8      	movs	r2, #216	; 0xd8
   3155e:	2100      	movs	r1, #0
   31560:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   31562:	687b      	ldr	r3, [r7, #4]
   31564:	22e4      	movs	r2, #228	; 0xe4
   31566:	2100      	movs	r1, #0
   31568:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   3156a:	687b      	ldr	r3, [r7, #4]
   3156c:	2241      	movs	r2, #65	; 0x41
   3156e:	5c9b      	ldrb	r3, [r3, r2]
   31570:	2202      	movs	r2, #2
   31572:	4013      	ands	r3, r2
   31574:	b2db      	uxtb	r3, r3
   31576:	2b00      	cmp	r3, #0
   31578:	d105      	bne.n	31586 <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   3157a:	687b      	ldr	r3, [r7, #4]
   3157c:	2100      	movs	r1, #0
   3157e:	0018      	movs	r0, r3
   31580:	4b3b      	ldr	r3, [pc, #236]	; (31670 <_http_client_handle_entity+0x198>)
   31582:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   31584:	e06e      	b.n	31664 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   31586:	687b      	ldr	r3, [r7, #4]
   31588:	22dc      	movs	r2, #220	; 0xdc
   3158a:	589b      	ldr	r3, [r3, r2]
   3158c:	001a      	movs	r2, r3
   3158e:	697b      	ldr	r3, [r7, #20]
   31590:	189a      	adds	r2, r3, r2
   31592:	687b      	ldr	r3, [r7, #4]
   31594:	0011      	movs	r1, r2
   31596:	0018      	movs	r0, r3
   31598:	4b36      	ldr	r3, [pc, #216]	; (31674 <_http_client_handle_entity+0x19c>)
   3159a:	4798      	blx	r3
				return module->recved_size;
   3159c:	687b      	ldr	r3, [r7, #4]
   3159e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   315a0:	e061      	b.n	31666 <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   315a2:	687b      	ldr	r3, [r7, #4]
   315a4:	22dc      	movs	r2, #220	; 0xdc
   315a6:	589b      	ldr	r3, [r3, r2]
   315a8:	2b00      	cmp	r3, #0
   315aa:	db57      	blt.n	3165c <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   315ac:	687b      	ldr	r3, [r7, #4]
   315ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   315b0:	2308      	movs	r3, #8
   315b2:	18fb      	adds	r3, r7, r3
   315b4:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   315b6:	2308      	movs	r3, #8
   315b8:	18fb      	adds	r3, r7, r3
   315ba:	697a      	ldr	r2, [r7, #20]
   315bc:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   315be:	687b      	ldr	r3, [r7, #4]
   315c0:	22e0      	movs	r2, #224	; 0xe0
   315c2:	589a      	ldr	r2, [r3, r2]
   315c4:	687b      	ldr	r3, [r7, #4]
   315c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   315c8:	18d2      	adds	r2, r2, r3
   315ca:	687b      	ldr	r3, [r7, #4]
   315cc:	21e0      	movs	r1, #224	; 0xe0
   315ce:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   315d0:	687b      	ldr	r3, [r7, #4]
   315d2:	22dc      	movs	r2, #220	; 0xdc
   315d4:	589a      	ldr	r2, [r3, r2]
   315d6:	687b      	ldr	r3, [r7, #4]
   315d8:	21e0      	movs	r1, #224	; 0xe0
   315da:	585b      	ldr	r3, [r3, r1]
   315dc:	429a      	cmp	r2, r3
   315de:	dc0c      	bgt.n	315fa <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   315e0:	687b      	ldr	r3, [r7, #4]
   315e2:	22d8      	movs	r2, #216	; 0xd8
   315e4:	2100      	movs	r1, #0
   315e6:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   315e8:	687b      	ldr	r3, [r7, #4]
   315ea:	22e4      	movs	r2, #228	; 0xe4
   315ec:	2100      	movs	r1, #0
   315ee:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   315f0:	2308      	movs	r3, #8
   315f2:	18fb      	adds	r3, r7, r3
   315f4:	2201      	movs	r2, #1
   315f6:	721a      	strb	r2, [r3, #8]
   315f8:	e003      	b.n	31602 <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   315fa:	2308      	movs	r3, #8
   315fc:	18fb      	adds	r3, r7, r3
   315fe:	2200      	movs	r2, #0
   31600:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   31602:	687b      	ldr	r3, [r7, #4]
   31604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31606:	2b00      	cmp	r3, #0
   31608:	d006      	beq.n	31618 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   3160a:	687b      	ldr	r3, [r7, #4]
   3160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3160e:	2208      	movs	r2, #8
   31610:	18ba      	adds	r2, r7, r2
   31612:	6878      	ldr	r0, [r7, #4]
   31614:	2103      	movs	r1, #3
   31616:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   31618:	2308      	movs	r3, #8
   3161a:	18fb      	adds	r3, r7, r3
   3161c:	7a1b      	ldrb	r3, [r3, #8]
   3161e:	2b01      	cmp	r3, #1
   31620:	d112      	bne.n	31648 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   31622:	687b      	ldr	r3, [r7, #4]
   31624:	2241      	movs	r2, #65	; 0x41
   31626:	5c9b      	ldrb	r3, [r3, r2]
   31628:	2202      	movs	r2, #2
   3162a:	4013      	ands	r3, r2
   3162c:	b2db      	uxtb	r3, r3
   3162e:	2b00      	cmp	r3, #0
   31630:	d10a      	bne.n	31648 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   31632:	4b11      	ldr	r3, [pc, #68]	; (31678 <_http_client_handle_entity+0x1a0>)
   31634:	0018      	movs	r0, r3
   31636:	4b11      	ldr	r3, [pc, #68]	; (3167c <_http_client_handle_entity+0x1a4>)
   31638:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   3163a:	687b      	ldr	r3, [r7, #4]
   3163c:	2100      	movs	r1, #0
   3163e:	0018      	movs	r0, r3
   31640:	4b0b      	ldr	r3, [pc, #44]	; (31670 <_http_client_handle_entity+0x198>)
   31642:	4798      	blx	r3
					return 0;
   31644:	2300      	movs	r3, #0
   31646:	e00e      	b.n	31666 <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   31648:	687b      	ldr	r3, [r7, #4]
   3164a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3164c:	697a      	ldr	r2, [r7, #20]
   3164e:	18d2      	adds	r2, r2, r3
   31650:	687b      	ldr	r3, [r7, #4]
   31652:	0011      	movs	r1, r2
   31654:	0018      	movs	r0, r3
   31656:	4b07      	ldr	r3, [pc, #28]	; (31674 <_http_client_handle_entity+0x19c>)
   31658:	4798      	blx	r3
   3165a:	e003      	b.n	31664 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   3165c:	687b      	ldr	r3, [r7, #4]
   3165e:	0018      	movs	r0, r3
   31660:	4b07      	ldr	r3, [pc, #28]	; (31680 <_http_client_handle_entity+0x1a8>)
   31662:	4798      	blx	r3
		}
	}

	return 0;
   31664:	2300      	movs	r3, #0
}
   31666:	0018      	movs	r0, r3
   31668:	46bd      	mov	sp, r7
   3166a:	b006      	add	sp, #24
   3166c:	bd80      	pop	{r7, pc}
   3166e:	46c0      	nop			; (mov r8, r8)
   31670:	0003069d 	.word	0x0003069d
   31674:	00031685 	.word	0x00031685
   31678:	00039444 	.word	0x00039444
   3167c:	0003453d 	.word	0x0003453d
   31680:	000312c5 	.word	0x000312c5

00031684 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   31684:	b580      	push	{r7, lr}
   31686:	b084      	sub	sp, #16
   31688:	af00      	add	r7, sp, #0
   3168a:	6078      	str	r0, [r7, #4]
   3168c:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   3168e:	687b      	ldr	r3, [r7, #4]
   31690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31692:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   31694:	687b      	ldr	r3, [r7, #4]
   31696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31698:	001a      	movs	r2, r3
   3169a:	683b      	ldr	r3, [r7, #0]
   3169c:	1ad2      	subs	r2, r2, r3
   3169e:	68fb      	ldr	r3, [r7, #12]
   316a0:	18d3      	adds	r3, r2, r3
   316a2:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   316a4:	68bb      	ldr	r3, [r7, #8]
   316a6:	2b00      	cmp	r3, #0
   316a8:	dd09      	ble.n	316be <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   316aa:	68ba      	ldr	r2, [r7, #8]
   316ac:	6839      	ldr	r1, [r7, #0]
   316ae:	68fb      	ldr	r3, [r7, #12]
   316b0:	0018      	movs	r0, r3
   316b2:	4b06      	ldr	r3, [pc, #24]	; (316cc <_http_client_move_buffer+0x48>)
   316b4:	4798      	blx	r3
		module->recved_size = remain;
   316b6:	68ba      	ldr	r2, [r7, #8]
   316b8:	687b      	ldr	r3, [r7, #4]
   316ba:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   316bc:	e002      	b.n	316c4 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   316be:	687b      	ldr	r3, [r7, #4]
   316c0:	2200      	movs	r2, #0
   316c2:	645a      	str	r2, [r3, #68]	; 0x44
}
   316c4:	46c0      	nop			; (mov r8, r8)
   316c6:	46bd      	mov	sp, r7
   316c8:	b004      	add	sp, #16
   316ca:	bd80      	pop	{r7, pc}
   316cc:	000342f7 	.word	0x000342f7

000316d0 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   316d0:	b580      	push	{r7, lr}
   316d2:	b084      	sub	sp, #16
   316d4:	af00      	add	r7, sp, #0
   316d6:	60f8      	str	r0, [r7, #12]
   316d8:	60b9      	str	r1, [r7, #8]
   316da:	607a      	str	r2, [r7, #4]
   316dc:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   316de:	68fb      	ldr	r3, [r7, #12]
   316e0:	687a      	ldr	r2, [r7, #4]
   316e2:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   316e4:	68fb      	ldr	r3, [r7, #12]
   316e6:	68ba      	ldr	r2, [r7, #8]
   316e8:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   316ea:	68fb      	ldr	r3, [r7, #12]
   316ec:	2200      	movs	r2, #0
   316ee:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   316f0:	68fb      	ldr	r3, [r7, #12]
   316f2:	683a      	ldr	r2, [r7, #0]
   316f4:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   316f6:	68fb      	ldr	r3, [r7, #12]
   316f8:	69ba      	ldr	r2, [r7, #24]
   316fa:	60da      	str	r2, [r3, #12]
}
   316fc:	46c0      	nop			; (mov r8, r8)
   316fe:	46bd      	mov	sp, r7
   31700:	b004      	add	sp, #16
   31702:	bd80      	pop	{r7, pc}

00031704 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   31704:	b580      	push	{r7, lr}
   31706:	b084      	sub	sp, #16
   31708:	af00      	add	r7, sp, #0
   3170a:	6078      	str	r0, [r7, #4]
   3170c:	000a      	movs	r2, r1
   3170e:	1cfb      	adds	r3, r7, #3
   31710:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   31712:	687b      	ldr	r3, [r7, #4]
   31714:	681a      	ldr	r2, [r3, #0]
   31716:	687b      	ldr	r3, [r7, #4]
   31718:	685b      	ldr	r3, [r3, #4]
   3171a:	1ad3      	subs	r3, r2, r3
   3171c:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   3171e:	68fb      	ldr	r3, [r7, #12]
   31720:	2b00      	cmp	r3, #0
   31722:	dc03      	bgt.n	3172c <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   31724:	687b      	ldr	r3, [r7, #4]
   31726:	0018      	movs	r0, r3
   31728:	4b08      	ldr	r3, [pc, #32]	; (3174c <stream_writer_send_8+0x48>)
   3172a:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   3172c:	687b      	ldr	r3, [r7, #4]
   3172e:	6919      	ldr	r1, [r3, #16]
   31730:	687b      	ldr	r3, [r7, #4]
   31732:	685b      	ldr	r3, [r3, #4]
   31734:	1c58      	adds	r0, r3, #1
   31736:	687a      	ldr	r2, [r7, #4]
   31738:	6050      	str	r0, [r2, #4]
   3173a:	18cb      	adds	r3, r1, r3
   3173c:	1cfa      	adds	r2, r7, #3
   3173e:	7812      	ldrb	r2, [r2, #0]
   31740:	701a      	strb	r2, [r3, #0]
}
   31742:	46c0      	nop			; (mov r8, r8)
   31744:	46bd      	mov	sp, r7
   31746:	b004      	add	sp, #16
   31748:	bd80      	pop	{r7, pc}
   3174a:	46c0      	nop			; (mov r8, r8)
   3174c:	0003178d 	.word	0x0003178d

00031750 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   31750:	b580      	push	{r7, lr}
   31752:	b084      	sub	sp, #16
   31754:	af00      	add	r7, sp, #0
   31756:	60f8      	str	r0, [r7, #12]
   31758:	60b9      	str	r1, [r7, #8]
   3175a:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   3175c:	e00d      	b.n	3177a <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   3175e:	68bb      	ldr	r3, [r7, #8]
   31760:	781b      	ldrb	r3, [r3, #0]
   31762:	b25a      	sxtb	r2, r3
   31764:	68fb      	ldr	r3, [r7, #12]
   31766:	0011      	movs	r1, r2
   31768:	0018      	movs	r0, r3
   3176a:	4b07      	ldr	r3, [pc, #28]	; (31788 <stream_writer_send_buffer+0x38>)
   3176c:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   3176e:	687b      	ldr	r3, [r7, #4]
   31770:	3b01      	subs	r3, #1
   31772:	607b      	str	r3, [r7, #4]
   31774:	68bb      	ldr	r3, [r7, #8]
   31776:	3301      	adds	r3, #1
   31778:	60bb      	str	r3, [r7, #8]
   3177a:	687b      	ldr	r3, [r7, #4]
   3177c:	2b00      	cmp	r3, #0
   3177e:	d1ee      	bne.n	3175e <stream_writer_send_buffer+0xe>
	}
}
   31780:	46c0      	nop			; (mov r8, r8)
   31782:	46bd      	mov	sp, r7
   31784:	b004      	add	sp, #16
   31786:	bd80      	pop	{r7, pc}
   31788:	00031705 	.word	0x00031705

0003178c <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   3178c:	b590      	push	{r4, r7, lr}
   3178e:	b083      	sub	sp, #12
   31790:	af00      	add	r7, sp, #0
   31792:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   31794:	687b      	ldr	r3, [r7, #4]
   31796:	685b      	ldr	r3, [r3, #4]
   31798:	2b00      	cmp	r3, #0
   3179a:	d00c      	beq.n	317b6 <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   3179c:	687b      	ldr	r3, [r7, #4]
   3179e:	689c      	ldr	r4, [r3, #8]
   317a0:	687b      	ldr	r3, [r7, #4]
   317a2:	68d8      	ldr	r0, [r3, #12]
   317a4:	687b      	ldr	r3, [r7, #4]
   317a6:	6919      	ldr	r1, [r3, #16]
   317a8:	687b      	ldr	r3, [r7, #4]
   317aa:	685b      	ldr	r3, [r3, #4]
   317ac:	001a      	movs	r2, r3
   317ae:	47a0      	blx	r4
		writer->written = 0;
   317b0:	687b      	ldr	r3, [r7, #4]
   317b2:	2200      	movs	r2, #0
   317b4:	605a      	str	r2, [r3, #4]
	}
}
   317b6:	46c0      	nop			; (mov r8, r8)
   317b8:	46bd      	mov	sp, r7
   317ba:	b003      	add	sp, #12
   317bc:	bd90      	pop	{r4, r7, pc}
	...

000317c0 <system_cpu_clock_get_hz>:
{
   317c0:	b580      	push	{r7, lr}
   317c2:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   317c4:	2000      	movs	r0, #0
   317c6:	4b05      	ldr	r3, [pc, #20]	; (317dc <system_cpu_clock_get_hz+0x1c>)
   317c8:	4798      	blx	r3
   317ca:	0002      	movs	r2, r0
   317cc:	4b04      	ldr	r3, [pc, #16]	; (317e0 <system_cpu_clock_get_hz+0x20>)
   317ce:	7a1b      	ldrb	r3, [r3, #8]
   317d0:	b2db      	uxtb	r3, r3
   317d2:	40da      	lsrs	r2, r3
   317d4:	0013      	movs	r3, r2
}
   317d6:	0018      	movs	r0, r3
   317d8:	46bd      	mov	sp, r7
   317da:	bd80      	pop	{r7, pc}
   317dc:	000291a1 	.word	0x000291a1
   317e0:	40000400 	.word	0x40000400

000317e4 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   317e4:	b580      	push	{r7, lr}
   317e6:	b084      	sub	sp, #16
   317e8:	af00      	add	r7, sp, #0
   317ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   317ec:	687b      	ldr	r3, [r7, #4]
   317ee:	681b      	ldr	r3, [r3, #0]
   317f0:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   317f2:	46c0      	nop			; (mov r8, r8)
   317f4:	68fb      	ldr	r3, [r7, #12]
   317f6:	689b      	ldr	r3, [r3, #8]
   317f8:	2202      	movs	r2, #2
   317fa:	4013      	ands	r3, r2
   317fc:	d1fa      	bne.n	317f4 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   317fe:	68fb      	ldr	r3, [r7, #12]
   31800:	681b      	ldr	r3, [r3, #0]
   31802:	2202      	movs	r2, #2
   31804:	431a      	orrs	r2, r3
   31806:	68fb      	ldr	r3, [r7, #12]
   31808:	601a      	str	r2, [r3, #0]
}
   3180a:	46c0      	nop			; (mov r8, r8)
   3180c:	46bd      	mov	sp, r7
   3180e:	b004      	add	sp, #16
   31810:	bd80      	pop	{r7, pc}
	...

00031814 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   31814:	b580      	push	{r7, lr}
   31816:	b082      	sub	sp, #8
   31818:	af00      	add	r7, sp, #0
   3181a:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   3181c:	4b04      	ldr	r3, [pc, #16]	; (31830 <sw_timer_tcc_callback+0x1c>)
   3181e:	681b      	ldr	r3, [r3, #0]
   31820:	1c5a      	adds	r2, r3, #1
   31822:	4b03      	ldr	r3, [pc, #12]	; (31830 <sw_timer_tcc_callback+0x1c>)
   31824:	601a      	str	r2, [r3, #0]
}
   31826:	46c0      	nop			; (mov r8, r8)
   31828:	46bd      	mov	sp, r7
   3182a:	b002      	add	sp, #8
   3182c:	bd80      	pop	{r7, pc}
   3182e:	46c0      	nop			; (mov r8, r8)
   31830:	20004574 	.word	0x20004574

00031834 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   31834:	b580      	push	{r7, lr}
   31836:	b082      	sub	sp, #8
   31838:	af00      	add	r7, sp, #0
   3183a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   3183c:	687b      	ldr	r3, [r7, #4]
   3183e:	2264      	movs	r2, #100	; 0x64
   31840:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   31842:	687b      	ldr	r3, [r7, #4]
   31844:	2200      	movs	r2, #0
   31846:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   31848:	687b      	ldr	r3, [r7, #4]
   3184a:	2200      	movs	r2, #0
   3184c:	705a      	strb	r2, [r3, #1]
}
   3184e:	46c0      	nop			; (mov r8, r8)
   31850:	46bd      	mov	sp, r7
   31852:	b002      	add	sp, #8
   31854:	bd80      	pop	{r7, pc}
	...

00031858 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   31858:	b590      	push	{r4, r7, lr}
   3185a:	b0b1      	sub	sp, #196	; 0xc4
   3185c:	af00      	add	r7, sp, #0
   3185e:	6078      	str	r0, [r7, #4]
   31860:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   31862:	230c      	movs	r3, #12
   31864:	18fb      	adds	r3, r7, r3
   31866:	4a2e      	ldr	r2, [pc, #184]	; (31920 <sw_timer_init+0xc8>)
   31868:	ca13      	ldmia	r2!, {r0, r1, r4}
   3186a:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   3186c:	683b      	ldr	r3, [r7, #0]
   3186e:	885b      	ldrh	r3, [r3, #2]
   31870:	001a      	movs	r2, r3
   31872:	687b      	ldr	r3, [r7, #4]
   31874:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   31876:	687b      	ldr	r3, [r7, #4]
   31878:	3314      	adds	r3, #20
   3187a:	22bc      	movs	r2, #188	; 0xbc
   3187c:	18ba      	adds	r2, r7, r2
   3187e:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   31880:	683b      	ldr	r3, [r7, #0]
   31882:	781b      	ldrb	r3, [r3, #0]
   31884:	001a      	movs	r2, r3
   31886:	230c      	movs	r3, #12
   31888:	18fb      	adds	r3, r7, r3
   3188a:	0092      	lsls	r2, r2, #2
   3188c:	58d2      	ldr	r2, [r2, r3]
   3188e:	2318      	movs	r3, #24
   31890:	18fb      	adds	r3, r7, r3
   31892:	0011      	movs	r1, r2
   31894:	0018      	movs	r0, r3
   31896:	4b23      	ldr	r3, [pc, #140]	; (31924 <sw_timer_init+0xcc>)
   31898:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   3189a:	4b23      	ldr	r3, [pc, #140]	; (31928 <sw_timer_init+0xd0>)
   3189c:	4798      	blx	r3
   3189e:	0004      	movs	r4, r0
   318a0:	683b      	ldr	r3, [r7, #0]
   318a2:	885b      	ldrh	r3, [r3, #2]
   318a4:	001a      	movs	r2, r3
   318a6:	4b21      	ldr	r3, [pc, #132]	; (3192c <sw_timer_init+0xd4>)
   318a8:	0011      	movs	r1, r2
   318aa:	22fa      	movs	r2, #250	; 0xfa
   318ac:	0210      	lsls	r0, r2, #8
   318ae:	4798      	blx	r3
   318b0:	0003      	movs	r3, r0
   318b2:	001a      	movs	r2, r3
   318b4:	4b1e      	ldr	r3, [pc, #120]	; (31930 <sw_timer_init+0xd8>)
   318b6:	0011      	movs	r1, r2
   318b8:	0020      	movs	r0, r4
   318ba:	4798      	blx	r3
   318bc:	0003      	movs	r3, r0
   318be:	001a      	movs	r2, r3
   318c0:	2318      	movs	r3, #24
   318c2:	18fb      	adds	r3, r7, r3
   318c4:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   318c6:	2318      	movs	r3, #24
   318c8:	18fb      	adds	r3, r7, r3
   318ca:	2205      	movs	r2, #5
   318cc:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   318ce:	683b      	ldr	r3, [r7, #0]
   318d0:	781b      	ldrb	r3, [r3, #0]
   318d2:	001a      	movs	r2, r3
   318d4:	230c      	movs	r3, #12
   318d6:	18fb      	adds	r3, r7, r3
   318d8:	0092      	lsls	r2, r2, #2
   318da:	58d1      	ldr	r1, [r2, r3]
   318dc:	2318      	movs	r3, #24
   318de:	18fa      	adds	r2, r7, r3
   318e0:	23bc      	movs	r3, #188	; 0xbc
   318e2:	18fb      	adds	r3, r7, r3
   318e4:	681b      	ldr	r3, [r3, #0]
   318e6:	0018      	movs	r0, r3
   318e8:	4b12      	ldr	r3, [pc, #72]	; (31934 <sw_timer_init+0xdc>)
   318ea:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   318ec:	683b      	ldr	r3, [r7, #0]
   318ee:	785b      	ldrb	r3, [r3, #1]
   318f0:	3308      	adds	r3, #8
   318f2:	b2da      	uxtb	r2, r3
   318f4:	4910      	ldr	r1, [pc, #64]	; (31938 <sw_timer_init+0xe0>)
   318f6:	23bc      	movs	r3, #188	; 0xbc
   318f8:	18fb      	adds	r3, r7, r3
   318fa:	681b      	ldr	r3, [r3, #0]
   318fc:	0018      	movs	r0, r3
   318fe:	4b0f      	ldr	r3, [pc, #60]	; (3193c <sw_timer_init+0xe4>)
   31900:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   31902:	683b      	ldr	r3, [r7, #0]
   31904:	785b      	ldrb	r3, [r3, #1]
   31906:	3308      	adds	r3, #8
   31908:	b2da      	uxtb	r2, r3
   3190a:	23bc      	movs	r3, #188	; 0xbc
   3190c:	18fb      	adds	r3, r7, r3
   3190e:	681b      	ldr	r3, [r3, #0]
   31910:	0011      	movs	r1, r2
   31912:	0018      	movs	r0, r3
   31914:	4b0a      	ldr	r3, [pc, #40]	; (31940 <sw_timer_init+0xe8>)
   31916:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   31918:	46c0      	nop			; (mov r8, r8)
   3191a:	46bd      	mov	sp, r7
   3191c:	b031      	add	sp, #196	; 0xc4
   3191e:	bd90      	pop	{r4, r7, pc}
   31920:	00039484 	.word	0x00039484
   31924:	00029739 	.word	0x00029739
   31928:	000317c1 	.word	0x000317c1
   3192c:	00031fb1 	.word	0x00031fb1
   31930:	00031e9d 	.word	0x00031e9d
   31934:	00029d95 	.word	0x00029d95
   31938:	00031815 	.word	0x00031815
   3193c:	0002a1ad 	.word	0x0002a1ad
   31940:	0002a1ed 	.word	0x0002a1ed

00031944 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   31944:	b580      	push	{r7, lr}
   31946:	b084      	sub	sp, #16
   31948:	af00      	add	r7, sp, #0
   3194a:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   3194c:	687b      	ldr	r3, [r7, #4]
   3194e:	3314      	adds	r3, #20
   31950:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   31952:	68fb      	ldr	r3, [r7, #12]
   31954:	0018      	movs	r0, r3
   31956:	4b03      	ldr	r3, [pc, #12]	; (31964 <sw_timer_enable+0x20>)
   31958:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   3195a:	46c0      	nop			; (mov r8, r8)
   3195c:	46bd      	mov	sp, r7
   3195e:	b004      	add	sp, #16
   31960:	bd80      	pop	{r7, pc}
   31962:	46c0      	nop			; (mov r8, r8)
   31964:	000317e5 	.word	0x000317e5

00031968 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   31968:	b580      	push	{r7, lr}
   3196a:	b086      	sub	sp, #24
   3196c:	af00      	add	r7, sp, #0
   3196e:	60f8      	str	r0, [r7, #12]
   31970:	60b9      	str	r1, [r7, #8]
   31972:	607a      	str	r2, [r7, #4]
   31974:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   31976:	2300      	movs	r3, #0
   31978:	617b      	str	r3, [r7, #20]
   3197a:	e032      	b.n	319e2 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   3197c:	68f9      	ldr	r1, [r7, #12]
   3197e:	697a      	ldr	r2, [r7, #20]
   31980:	0013      	movs	r3, r2
   31982:	009b      	lsls	r3, r3, #2
   31984:	189b      	adds	r3, r3, r2
   31986:	009b      	lsls	r3, r3, #2
   31988:	5c5b      	ldrb	r3, [r3, r1]
   3198a:	07db      	lsls	r3, r3, #31
   3198c:	0fdb      	lsrs	r3, r3, #31
   3198e:	b2db      	uxtb	r3, r3
   31990:	2b00      	cmp	r3, #0
   31992:	d123      	bne.n	319dc <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   31994:	697a      	ldr	r2, [r7, #20]
   31996:	0013      	movs	r3, r2
   31998:	009b      	lsls	r3, r3, #2
   3199a:	189b      	adds	r3, r3, r2
   3199c:	009b      	lsls	r3, r3, #2
   3199e:	68fa      	ldr	r2, [r7, #12]
   319a0:	18d3      	adds	r3, r2, r3
   319a2:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   319a4:	693b      	ldr	r3, [r7, #16]
   319a6:	68ba      	ldr	r2, [r7, #8]
   319a8:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   319aa:	693b      	ldr	r3, [r7, #16]
   319ac:	781a      	ldrb	r2, [r3, #0]
   319ae:	2102      	movs	r1, #2
   319b0:	438a      	bics	r2, r1
   319b2:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   319b4:	693b      	ldr	r3, [r7, #16]
   319b6:	687a      	ldr	r2, [r7, #4]
   319b8:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   319ba:	68fb      	ldr	r3, [r7, #12]
   319bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   319be:	4b0d      	ldr	r3, [pc, #52]	; (319f4 <sw_timer_register_callback+0x8c>)
   319c0:	0011      	movs	r1, r2
   319c2:	6838      	ldr	r0, [r7, #0]
   319c4:	4798      	blx	r3
   319c6:	0003      	movs	r3, r0
   319c8:	001a      	movs	r2, r3
   319ca:	693b      	ldr	r3, [r7, #16]
   319cc:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   319ce:	693b      	ldr	r3, [r7, #16]
   319d0:	781a      	ldrb	r2, [r3, #0]
   319d2:	2101      	movs	r1, #1
   319d4:	430a      	orrs	r2, r1
   319d6:	701a      	strb	r2, [r3, #0]
			return index;
   319d8:	697b      	ldr	r3, [r7, #20]
   319da:	e007      	b.n	319ec <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   319dc:	697b      	ldr	r3, [r7, #20]
   319de:	3301      	adds	r3, #1
   319e0:	617b      	str	r3, [r7, #20]
   319e2:	697b      	ldr	r3, [r7, #20]
   319e4:	2b00      	cmp	r3, #0
   319e6:	ddc9      	ble.n	3197c <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   319e8:	2301      	movs	r3, #1
   319ea:	425b      	negs	r3, r3
}
   319ec:	0018      	movs	r0, r3
   319ee:	46bd      	mov	sp, r7
   319f0:	b006      	add	sp, #24
   319f2:	bd80      	pop	{r7, pc}
   319f4:	00031e9d 	.word	0x00031e9d

000319f8 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   319f8:	b580      	push	{r7, lr}
   319fa:	b086      	sub	sp, #24
   319fc:	af00      	add	r7, sp, #0
   319fe:	60f8      	str	r0, [r7, #12]
   31a00:	60b9      	str	r1, [r7, #8]
   31a02:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   31a04:	68ba      	ldr	r2, [r7, #8]
   31a06:	0013      	movs	r3, r2
   31a08:	009b      	lsls	r3, r3, #2
   31a0a:	189b      	adds	r3, r3, r2
   31a0c:	009b      	lsls	r3, r3, #2
   31a0e:	68fa      	ldr	r2, [r7, #12]
   31a10:	18d3      	adds	r3, r2, r3
   31a12:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   31a14:	697b      	ldr	r3, [r7, #20]
   31a16:	781a      	ldrb	r2, [r3, #0]
   31a18:	2102      	movs	r1, #2
   31a1a:	430a      	orrs	r2, r1
   31a1c:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   31a1e:	68fb      	ldr	r3, [r7, #12]
   31a20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   31a22:	4b07      	ldr	r3, [pc, #28]	; (31a40 <sw_timer_enable_callback+0x48>)
   31a24:	0011      	movs	r1, r2
   31a26:	6878      	ldr	r0, [r7, #4]
   31a28:	4798      	blx	r3
   31a2a:	0003      	movs	r3, r0
   31a2c:	001a      	movs	r2, r3
   31a2e:	4b05      	ldr	r3, [pc, #20]	; (31a44 <sw_timer_enable_callback+0x4c>)
   31a30:	681b      	ldr	r3, [r3, #0]
   31a32:	18d2      	adds	r2, r2, r3
   31a34:	697b      	ldr	r3, [r7, #20]
   31a36:	611a      	str	r2, [r3, #16]
}
   31a38:	46c0      	nop			; (mov r8, r8)
   31a3a:	46bd      	mov	sp, r7
   31a3c:	b006      	add	sp, #24
   31a3e:	bd80      	pop	{r7, pc}
   31a40:	00031e9d 	.word	0x00031e9d
   31a44:	20004574 	.word	0x20004574

00031a48 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   31a48:	b580      	push	{r7, lr}
   31a4a:	b084      	sub	sp, #16
   31a4c:	af00      	add	r7, sp, #0
   31a4e:	6078      	str	r0, [r7, #4]
   31a50:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   31a52:	683a      	ldr	r2, [r7, #0]
   31a54:	0013      	movs	r3, r2
   31a56:	009b      	lsls	r3, r3, #2
   31a58:	189b      	adds	r3, r3, r2
   31a5a:	009b      	lsls	r3, r3, #2
   31a5c:	687a      	ldr	r2, [r7, #4]
   31a5e:	18d3      	adds	r3, r2, r3
   31a60:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   31a62:	68fb      	ldr	r3, [r7, #12]
   31a64:	781a      	ldrb	r2, [r3, #0]
   31a66:	2102      	movs	r1, #2
   31a68:	438a      	bics	r2, r1
   31a6a:	701a      	strb	r2, [r3, #0]
}
   31a6c:	46c0      	nop			; (mov r8, r8)
   31a6e:	46bd      	mov	sp, r7
   31a70:	b004      	add	sp, #16
   31a72:	bd80      	pop	{r7, pc}

00031a74 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   31a74:	b590      	push	{r4, r7, lr}
   31a76:	b085      	sub	sp, #20
   31a78:	af00      	add	r7, sp, #0
   31a7a:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   31a7c:	2300      	movs	r3, #0
   31a7e:	60fb      	str	r3, [r7, #12]
   31a80:	e053      	b.n	31b2a <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   31a82:	6879      	ldr	r1, [r7, #4]
   31a84:	68fa      	ldr	r2, [r7, #12]
   31a86:	0013      	movs	r3, r2
   31a88:	009b      	lsls	r3, r3, #2
   31a8a:	189b      	adds	r3, r3, r2
   31a8c:	009b      	lsls	r3, r3, #2
   31a8e:	5c5b      	ldrb	r3, [r3, r1]
   31a90:	07db      	lsls	r3, r3, #31
   31a92:	0fdb      	lsrs	r3, r3, #31
   31a94:	b2db      	uxtb	r3, r3
   31a96:	2b00      	cmp	r3, #0
   31a98:	d044      	beq.n	31b24 <sw_timer_task+0xb0>
   31a9a:	6879      	ldr	r1, [r7, #4]
   31a9c:	68fa      	ldr	r2, [r7, #12]
   31a9e:	0013      	movs	r3, r2
   31aa0:	009b      	lsls	r3, r3, #2
   31aa2:	189b      	adds	r3, r3, r2
   31aa4:	009b      	lsls	r3, r3, #2
   31aa6:	5c5b      	ldrb	r3, [r3, r1]
   31aa8:	079b      	lsls	r3, r3, #30
   31aaa:	0fdb      	lsrs	r3, r3, #31
   31aac:	b2db      	uxtb	r3, r3
   31aae:	2b00      	cmp	r3, #0
   31ab0:	d038      	beq.n	31b24 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   31ab2:	68fa      	ldr	r2, [r7, #12]
   31ab4:	0013      	movs	r3, r2
   31ab6:	009b      	lsls	r3, r3, #2
   31ab8:	189b      	adds	r3, r3, r2
   31aba:	009b      	lsls	r3, r3, #2
   31abc:	687a      	ldr	r2, [r7, #4]
   31abe:	18d3      	adds	r3, r2, r3
   31ac0:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   31ac2:	68bb      	ldr	r3, [r7, #8]
   31ac4:	691a      	ldr	r2, [r3, #16]
   31ac6:	4b1c      	ldr	r3, [pc, #112]	; (31b38 <sw_timer_task+0xc4>)
   31ac8:	681b      	ldr	r3, [r3, #0]
   31aca:	1ad3      	subs	r3, r2, r3
   31acc:	d52a      	bpl.n	31b24 <sw_timer_task+0xb0>
   31ace:	68bb      	ldr	r3, [r7, #8]
   31ad0:	781b      	ldrb	r3, [r3, #0]
   31ad2:	2204      	movs	r2, #4
   31ad4:	4013      	ands	r3, r2
   31ad6:	b2db      	uxtb	r3, r3
   31ad8:	2b00      	cmp	r3, #0
   31ada:	d123      	bne.n	31b24 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   31adc:	68bb      	ldr	r3, [r7, #8]
   31ade:	781a      	ldrb	r2, [r3, #0]
   31ae0:	2104      	movs	r1, #4
   31ae2:	430a      	orrs	r2, r1
   31ae4:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   31ae6:	68bb      	ldr	r3, [r7, #8]
   31ae8:	68db      	ldr	r3, [r3, #12]
   31aea:	2b00      	cmp	r3, #0
   31aec:	d007      	beq.n	31afe <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   31aee:	68bb      	ldr	r3, [r7, #8]
   31af0:	68da      	ldr	r2, [r3, #12]
   31af2:	4b11      	ldr	r3, [pc, #68]	; (31b38 <sw_timer_task+0xc4>)
   31af4:	681b      	ldr	r3, [r3, #0]
   31af6:	18d2      	adds	r2, r2, r3
   31af8:	68bb      	ldr	r3, [r7, #8]
   31afa:	611a      	str	r2, [r3, #16]
   31afc:	e004      	b.n	31b08 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   31afe:	68bb      	ldr	r3, [r7, #8]
   31b00:	781a      	ldrb	r2, [r3, #0]
   31b02:	2102      	movs	r1, #2
   31b04:	438a      	bics	r2, r1
   31b06:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   31b08:	68bb      	ldr	r3, [r7, #8]
   31b0a:	685c      	ldr	r4, [r3, #4]
   31b0c:	68bb      	ldr	r3, [r7, #8]
   31b0e:	689a      	ldr	r2, [r3, #8]
   31b10:	68bb      	ldr	r3, [r7, #8]
   31b12:	68db      	ldr	r3, [r3, #12]
   31b14:	68f9      	ldr	r1, [r7, #12]
   31b16:	6878      	ldr	r0, [r7, #4]
   31b18:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   31b1a:	68bb      	ldr	r3, [r7, #8]
   31b1c:	781a      	ldrb	r2, [r3, #0]
   31b1e:	2104      	movs	r1, #4
   31b20:	438a      	bics	r2, r1
   31b22:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   31b24:	68fb      	ldr	r3, [r7, #12]
   31b26:	3301      	adds	r3, #1
   31b28:	60fb      	str	r3, [r7, #12]
   31b2a:	68fb      	ldr	r3, [r7, #12]
   31b2c:	2b00      	cmp	r3, #0
   31b2e:	dda8      	ble.n	31a82 <sw_timer_task+0xe>
			}
		}
	}
}
   31b30:	46c0      	nop			; (mov r8, r8)
   31b32:	46bd      	mov	sp, r7
   31b34:	b005      	add	sp, #20
   31b36:	bd90      	pop	{r4, r7, pc}
   31b38:	20004574 	.word	0x20004574

00031b3c <system_interrupt_enable>:
{
   31b3c:	b580      	push	{r7, lr}
   31b3e:	b082      	sub	sp, #8
   31b40:	af00      	add	r7, sp, #0
   31b42:	0002      	movs	r2, r0
   31b44:	1dfb      	adds	r3, r7, #7
   31b46:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   31b48:	4b06      	ldr	r3, [pc, #24]	; (31b64 <system_interrupt_enable+0x28>)
   31b4a:	1dfa      	adds	r2, r7, #7
   31b4c:	7812      	ldrb	r2, [r2, #0]
   31b4e:	0011      	movs	r1, r2
   31b50:	221f      	movs	r2, #31
   31b52:	400a      	ands	r2, r1
   31b54:	2101      	movs	r1, #1
   31b56:	4091      	lsls	r1, r2
   31b58:	000a      	movs	r2, r1
   31b5a:	601a      	str	r2, [r3, #0]
}
   31b5c:	46c0      	nop			; (mov r8, r8)
   31b5e:	46bd      	mov	sp, r7
   31b60:	b002      	add	sp, #8
   31b62:	bd80      	pop	{r7, pc}
   31b64:	e000e100 	.word	0xe000e100

00031b68 <adc_is_syncing>:
{
   31b68:	b580      	push	{r7, lr}
   31b6a:	b084      	sub	sp, #16
   31b6c:	af00      	add	r7, sp, #0
   31b6e:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   31b70:	687b      	ldr	r3, [r7, #4]
   31b72:	681b      	ldr	r3, [r3, #0]
   31b74:	60fb      	str	r3, [r7, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   31b76:	68fb      	ldr	r3, [r7, #12]
   31b78:	7e5b      	ldrb	r3, [r3, #25]
   31b7a:	b2db      	uxtb	r3, r3
   31b7c:	b25b      	sxtb	r3, r3
   31b7e:	2b00      	cmp	r3, #0
   31b80:	da01      	bge.n	31b86 <adc_is_syncing+0x1e>
		return true;
   31b82:	2301      	movs	r3, #1
   31b84:	e000      	b.n	31b88 <adc_is_syncing+0x20>
	return false;
   31b86:	2300      	movs	r3, #0
}
   31b88:	0018      	movs	r0, r3
   31b8a:	46bd      	mov	sp, r7
   31b8c:	b004      	add	sp, #16
   31b8e:	bd80      	pop	{r7, pc}

00031b90 <adc_enable>:
{
   31b90:	b580      	push	{r7, lr}
   31b92:	b084      	sub	sp, #16
   31b94:	af00      	add	r7, sp, #0
   31b96:	6078      	str	r0, [r7, #4]
	Adc *const adc_module = module_inst->hw;
   31b98:	687b      	ldr	r3, [r7, #4]
   31b9a:	681b      	ldr	r3, [r3, #0]
   31b9c:	60fb      	str	r3, [r7, #12]
	while (adc_is_syncing(module_inst)) {
   31b9e:	46c0      	nop			; (mov r8, r8)
   31ba0:	687b      	ldr	r3, [r7, #4]
   31ba2:	0018      	movs	r0, r3
   31ba4:	4b10      	ldr	r3, [pc, #64]	; (31be8 <adc_enable+0x58>)
   31ba6:	4798      	blx	r3
   31ba8:	1e03      	subs	r3, r0, #0
   31baa:	d1f9      	bne.n	31ba0 <adc_enable+0x10>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
   31bac:	2017      	movs	r0, #23
   31bae:	4b0f      	ldr	r3, [pc, #60]	; (31bec <adc_enable+0x5c>)
   31bb0:	4798      	blx	r3
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
   31bb2:	68fb      	ldr	r3, [r7, #12]
   31bb4:	220f      	movs	r2, #15
   31bb6:	759a      	strb	r2, [r3, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
   31bb8:	68fb      	ldr	r3, [r7, #12]
   31bba:	220f      	movs	r2, #15
   31bbc:	761a      	strb	r2, [r3, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
   31bbe:	68fb      	ldr	r3, [r7, #12]
   31bc0:	781b      	ldrb	r3, [r3, #0]
   31bc2:	b2db      	uxtb	r3, r3
   31bc4:	2202      	movs	r2, #2
   31bc6:	4313      	orrs	r3, r2
   31bc8:	b2da      	uxtb	r2, r3
   31bca:	68fb      	ldr	r3, [r7, #12]
   31bcc:	701a      	strb	r2, [r3, #0]
	while (adc_is_syncing(module_inst)) {
   31bce:	46c0      	nop			; (mov r8, r8)
   31bd0:	687b      	ldr	r3, [r7, #4]
   31bd2:	0018      	movs	r0, r3
   31bd4:	4b04      	ldr	r3, [pc, #16]	; (31be8 <adc_enable+0x58>)
   31bd6:	4798      	blx	r3
   31bd8:	1e03      	subs	r3, r0, #0
   31bda:	d1f9      	bne.n	31bd0 <adc_enable+0x40>
	return STATUS_OK;
   31bdc:	2300      	movs	r3, #0
}
   31bde:	0018      	movs	r0, r3
   31be0:	46bd      	mov	sp, r7
   31be2:	b004      	add	sp, #16
   31be4:	bd80      	pop	{r7, pc}
   31be6:	46c0      	nop			; (mov r8, r8)
   31be8:	00031b69 	.word	0x00031b69
   31bec:	00031b3d 	.word	0x00031b3d

00031bf0 <port_get_config_defaults>:
{
   31bf0:	b580      	push	{r7, lr}
   31bf2:	b082      	sub	sp, #8
   31bf4:	af00      	add	r7, sp, #0
   31bf6:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   31bf8:	687b      	ldr	r3, [r7, #4]
   31bfa:	2200      	movs	r2, #0
   31bfc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   31bfe:	687b      	ldr	r3, [r7, #4]
   31c00:	2201      	movs	r2, #1
   31c02:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   31c04:	687b      	ldr	r3, [r7, #4]
   31c06:	2200      	movs	r2, #0
   31c08:	709a      	strb	r2, [r3, #2]
}
   31c0a:	46c0      	nop			; (mov r8, r8)
   31c0c:	46bd      	mov	sp, r7
   31c0e:	b002      	add	sp, #8
   31c10:	bd80      	pop	{r7, pc}
	...

00031c14 <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   31c14:	b580      	push	{r7, lr}
   31c16:	af00      	add	r7, sp, #0
    /* Initialize the board. */
   
	system_init();
   31c18:	4b08      	ldr	r3, [pc, #32]	; (31c3c <main+0x28>)
   31c1a:	4798      	blx	r3
    /* Initialize the UART console. */
    InitializeSerialConsole();
   31c1c:	4b08      	ldr	r3, [pc, #32]	; (31c40 <main+0x2c>)
   31c1e:	4798      	blx	r3
	configure_adc();
   31c20:	4b08      	ldr	r3, [pc, #32]	; (31c44 <main+0x30>)
   31c22:	4798      	blx	r3
	//WaterSensor_Init();
	configure_gpio();
   31c24:	4b08      	ldr	r3, [pc, #32]	; (31c48 <main+0x34>)
   31c26:	4798      	blx	r3
// 	config_port_pin.direction = PORT_PIN_DIR_OUTPUT; //Set pin as OUTPUT
// 	port_pin_set_config(PIN_PB02, &config_port_pin); //We assign the pin configuration to the PIN_PA23
		

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   31c28:	2001      	movs	r0, #1
   31c2a:	4b08      	ldr	r3, [pc, #32]	; (31c4c <main+0x38>)
   31c2c:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   31c2e:	4b08      	ldr	r3, [pc, #32]	; (31c50 <main+0x3c>)
   31c30:	4798      	blx	r3

    return 0;  // Will not get here
   31c32:	2300      	movs	r3, #0
}
   31c34:	0018      	movs	r0, r3
   31c36:	46bd      	mov	sp, r7
   31c38:	bd80      	pop	{r7, pc}
   31c3a:	46c0      	nop			; (mov r8, r8)
   31c3c:	0002962d 	.word	0x0002962d
   31c40:	0001d135 	.word	0x0001d135
   31c44:	00031e1d 	.word	0x00031e1d
   31c48:	00031e5d 	.word	0x00031e5d
   31c4c:	000177fd 	.word	0x000177fd
   31c50:	0001b78d 	.word	0x0001b78d

00031c54 <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   31c54:	b580      	push	{r7, lr}
   31c56:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   31c58:	4b0f      	ldr	r3, [pc, #60]	; (31c98 <vApplicationDaemonTaskStartupHook+0x44>)
   31c5a:	0018      	movs	r0, r3
   31c5c:	4b0f      	ldr	r3, [pc, #60]	; (31c9c <vApplicationDaemonTaskStartupHook+0x48>)
   31c5e:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   31c60:	4b0f      	ldr	r3, [pc, #60]	; (31ca0 <vApplicationDaemonTaskStartupHook+0x4c>)
   31c62:	0018      	movs	r0, r3
   31c64:	4b0d      	ldr	r3, [pc, #52]	; (31c9c <vApplicationDaemonTaskStartupHook+0x48>)
   31c66:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   31c68:	4b0e      	ldr	r3, [pc, #56]	; (31ca4 <vApplicationDaemonTaskStartupHook+0x50>)
   31c6a:	4798      	blx	r3
   31c6c:	1e03      	subs	r3, r0, #0
   31c6e:	d004      	beq.n	31c7a <vApplicationDaemonTaskStartupHook+0x26>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   31c70:	4b0d      	ldr	r3, [pc, #52]	; (31ca8 <vApplicationDaemonTaskStartupHook+0x54>)
   31c72:	0018      	movs	r0, r3
   31c74:	4b09      	ldr	r3, [pc, #36]	; (31c9c <vApplicationDaemonTaskStartupHook+0x48>)
   31c76:	4798      	blx	r3
   31c78:	e003      	b.n	31c82 <vApplicationDaemonTaskStartupHook+0x2e>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   31c7a:	4b0c      	ldr	r3, [pc, #48]	; (31cac <vApplicationDaemonTaskStartupHook+0x58>)
   31c7c:	0018      	movs	r0, r3
   31c7e:	4b07      	ldr	r3, [pc, #28]	; (31c9c <vApplicationDaemonTaskStartupHook+0x48>)
   31c80:	4798      	blx	r3
    SerialConsoleWriteString("Initializing distance sensor\r\n");
    InitializeDistanceSensor();
    SerialConsoleWriteString("Distance sensor initialized\r\n");
	*/

    StartTasks();
   31c82:	4b0b      	ldr	r3, [pc, #44]	; (31cb0 <vApplicationDaemonTaskStartupHook+0x5c>)
   31c84:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   31c86:	4b0b      	ldr	r3, [pc, #44]	; (31cb4 <vApplicationDaemonTaskStartupHook+0x60>)
   31c88:	681b      	ldr	r3, [r3, #0]
   31c8a:	0018      	movs	r0, r3
   31c8c:	4b0a      	ldr	r3, [pc, #40]	; (31cb8 <vApplicationDaemonTaskStartupHook+0x64>)
   31c8e:	4798      	blx	r3
}
   31c90:	46c0      	nop			; (mov r8, r8)
   31c92:	46bd      	mov	sp, r7
   31c94:	bd80      	pop	{r7, pc}
   31c96:	46c0      	nop			; (mov r8, r8)
   31c98:	00039490 	.word	0x00039490
   31c9c:	0001d1a5 	.word	0x0001d1a5
   31ca0:	000394b4 	.word	0x000394b4
   31ca4:	00014449 	.word	0x00014449
   31ca8:	000394cc 	.word	0x000394cc
   31cac:	000394f0 	.word	0x000394f0
   31cb0:	00031cbd 	.word	0x00031cbd
   31cb4:	2000457c 	.word	0x2000457c
   31cb8:	0001b631 	.word	0x0001b631

00031cbc <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   31cbc:	b590      	push	{r4, r7, lr}
   31cbe:	b083      	sub	sp, #12
   31cc0:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   31cc2:	4b35      	ldr	r3, [pc, #212]	; (31d98 <StartTasks+0xdc>)
   31cc4:	4798      	blx	r3
   31cc6:	0003      	movs	r3, r0
   31cc8:	4a34      	ldr	r2, [pc, #208]	; (31d9c <StartTasks+0xe0>)
   31cca:	4835      	ldr	r0, [pc, #212]	; (31da0 <StartTasks+0xe4>)
   31ccc:	2140      	movs	r1, #64	; 0x40
   31cce:	4c35      	ldr	r4, [pc, #212]	; (31da4 <StartTasks+0xe8>)
   31cd0:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   31cd2:	4b33      	ldr	r3, [pc, #204]	; (31da0 <StartTasks+0xe4>)
   31cd4:	0018      	movs	r0, r3
   31cd6:	4b34      	ldr	r3, [pc, #208]	; (31da8 <StartTasks+0xec>)
   31cd8:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   31cda:	23c8      	movs	r3, #200	; 0xc8
   31cdc:	005a      	lsls	r2, r3, #1
   31cde:	4933      	ldr	r1, [pc, #204]	; (31dac <StartTasks+0xf0>)
   31ce0:	4833      	ldr	r0, [pc, #204]	; (31db0 <StartTasks+0xf4>)
   31ce2:	4b34      	ldr	r3, [pc, #208]	; (31db4 <StartTasks+0xf8>)
   31ce4:	9301      	str	r3, [sp, #4]
   31ce6:	2304      	movs	r3, #4
   31ce8:	9300      	str	r3, [sp, #0]
   31cea:	2300      	movs	r3, #0
   31cec:	4c32      	ldr	r4, [pc, #200]	; (31db8 <StartTasks+0xfc>)
   31cee:	47a0      	blx	r4
   31cf0:	0003      	movs	r3, r0
   31cf2:	2b01      	cmp	r3, #1
   31cf4:	d003      	beq.n	31cfe <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   31cf6:	4b31      	ldr	r3, [pc, #196]	; (31dbc <StartTasks+0x100>)
   31cf8:	0018      	movs	r0, r3
   31cfa:	4b2b      	ldr	r3, [pc, #172]	; (31da8 <StartTasks+0xec>)
   31cfc:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   31cfe:	4b26      	ldr	r3, [pc, #152]	; (31d98 <StartTasks+0xdc>)
   31d00:	4798      	blx	r3
   31d02:	0003      	movs	r3, r0
   31d04:	4a2e      	ldr	r2, [pc, #184]	; (31dc0 <StartTasks+0x104>)
   31d06:	4826      	ldr	r0, [pc, #152]	; (31da0 <StartTasks+0xe4>)
   31d08:	2140      	movs	r1, #64	; 0x40
   31d0a:	4c26      	ldr	r4, [pc, #152]	; (31da4 <StartTasks+0xe8>)
   31d0c:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   31d0e:	4b24      	ldr	r3, [pc, #144]	; (31da0 <StartTasks+0xe4>)
   31d10:	0018      	movs	r0, r3
   31d12:	4b25      	ldr	r3, [pc, #148]	; (31da8 <StartTasks+0xec>)
   31d14:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   31d16:	23fa      	movs	r3, #250	; 0xfa
   31d18:	009a      	lsls	r2, r3, #2
   31d1a:	492a      	ldr	r1, [pc, #168]	; (31dc4 <StartTasks+0x108>)
   31d1c:	482a      	ldr	r0, [pc, #168]	; (31dc8 <StartTasks+0x10c>)
   31d1e:	4b2b      	ldr	r3, [pc, #172]	; (31dcc <StartTasks+0x110>)
   31d20:	9301      	str	r3, [sp, #4]
   31d22:	2303      	movs	r3, #3
   31d24:	9300      	str	r3, [sp, #0]
   31d26:	2300      	movs	r3, #0
   31d28:	4c23      	ldr	r4, [pc, #140]	; (31db8 <StartTasks+0xfc>)
   31d2a:	47a0      	blx	r4
   31d2c:	0003      	movs	r3, r0
   31d2e:	2b01      	cmp	r3, #1
   31d30:	d003      	beq.n	31d3a <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   31d32:	4b27      	ldr	r3, [pc, #156]	; (31dd0 <StartTasks+0x114>)
   31d34:	0018      	movs	r0, r3
   31d36:	4b1c      	ldr	r3, [pc, #112]	; (31da8 <StartTasks+0xec>)
   31d38:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   31d3a:	4b17      	ldr	r3, [pc, #92]	; (31d98 <StartTasks+0xdc>)
   31d3c:	4798      	blx	r3
   31d3e:	0003      	movs	r3, r0
   31d40:	4a24      	ldr	r2, [pc, #144]	; (31dd4 <StartTasks+0x118>)
   31d42:	4817      	ldr	r0, [pc, #92]	; (31da0 <StartTasks+0xe4>)
   31d44:	2140      	movs	r1, #64	; 0x40
   31d46:	4c17      	ldr	r4, [pc, #92]	; (31da4 <StartTasks+0xe8>)
   31d48:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   31d4a:	4b15      	ldr	r3, [pc, #84]	; (31da0 <StartTasks+0xe4>)
   31d4c:	0018      	movs	r0, r3
   31d4e:	4b16      	ldr	r3, [pc, #88]	; (31da8 <StartTasks+0xec>)
   31d50:	4798      	blx	r3
	
	if (xTaskCreate(vHydr8Task, "HYDR8_TASK", HYDR8_TASK_SIZE, NULL, HYDR8_PRIORITY, &hydr8TaskHandle) != pdPASS) {
   31d52:	23fa      	movs	r3, #250	; 0xfa
   31d54:	005a      	lsls	r2, r3, #1
   31d56:	4920      	ldr	r1, [pc, #128]	; (31dd8 <StartTasks+0x11c>)
   31d58:	4820      	ldr	r0, [pc, #128]	; (31ddc <StartTasks+0x120>)
   31d5a:	4b21      	ldr	r3, [pc, #132]	; (31de0 <StartTasks+0x124>)
   31d5c:	9301      	str	r3, [sp, #4]
   31d5e:	2304      	movs	r3, #4
   31d60:	9300      	str	r3, [sp, #0]
   31d62:	2300      	movs	r3, #0
   31d64:	4c14      	ldr	r4, [pc, #80]	; (31db8 <StartTasks+0xfc>)
   31d66:	47a0      	blx	r4
   31d68:	0003      	movs	r3, r0
   31d6a:	2b01      	cmp	r3, #1
   31d6c:	d003      	beq.n	31d76 <StartTasks+0xba>
		SerialConsoleWriteString("ERR: Hydr8 task could not be initialized!\r\n");
   31d6e:	4b1d      	ldr	r3, [pc, #116]	; (31de4 <StartTasks+0x128>)
   31d70:	0018      	movs	r0, r3
   31d72:	4b0d      	ldr	r3, [pc, #52]	; (31da8 <StartTasks+0xec>)
   31d74:	4798      	blx	r3
	}
	snprintf(bufferPrint, 64, "Heap after starting hydr8: %d\r\n", xPortGetFreeHeapSize());
   31d76:	4b08      	ldr	r3, [pc, #32]	; (31d98 <StartTasks+0xdc>)
   31d78:	4798      	blx	r3
   31d7a:	0003      	movs	r3, r0
   31d7c:	4a1a      	ldr	r2, [pc, #104]	; (31de8 <StartTasks+0x12c>)
   31d7e:	4808      	ldr	r0, [pc, #32]	; (31da0 <StartTasks+0xe4>)
   31d80:	2140      	movs	r1, #64	; 0x40
   31d82:	4c08      	ldr	r4, [pc, #32]	; (31da4 <StartTasks+0xe8>)
   31d84:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
   31d86:	4b06      	ldr	r3, [pc, #24]	; (31da0 <StartTasks+0xe4>)
   31d88:	0018      	movs	r0, r3
   31d8a:	4b07      	ldr	r3, [pc, #28]	; (31da8 <StartTasks+0xec>)
   31d8c:	4798      	blx	r3
//     if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
//         SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
//     }
//     snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
//     SerialConsoleWriteString(bufferPrint);
 }
   31d8e:	46c0      	nop			; (mov r8, r8)
   31d90:	46bd      	mov	sp, r7
   31d92:	b001      	add	sp, #4
   31d94:	bd90      	pop	{r4, r7, pc}
   31d96:	46c0      	nop			; (mov r8, r8)
   31d98:	00019771 	.word	0x00019771
   31d9c:	0003950c 	.word	0x0003950c
   31da0:	20005a00 	.word	0x20005a00
   31da4:	00034575 	.word	0x00034575
   31da8:	0001d1a5 	.word	0x0001d1a5
   31dac:	00039530 	.word	0x00039530
   31db0:	00013791 	.word	0x00013791
   31db4:	20004578 	.word	0x20004578
   31db8:	0001b1b5 	.word	0x0001b1b5
   31dbc:	0003953c 	.word	0x0003953c
   31dc0:	00039568 	.word	0x00039568
   31dc4:	00039588 	.word	0x00039588
   31dc8:	000164cd 	.word	0x000164cd
   31dcc:	20004580 	.word	0x20004580
   31dd0:	00039594 	.word	0x00039594
   31dd4:	000395c0 	.word	0x000395c0
   31dd8:	000395e0 	.word	0x000395e0
   31ddc:	00013e49 	.word	0x00013e49
   31de0:	20004584 	.word	0x20004584
   31de4:	000395ec 	.word	0x000395ec
   31de8:	00039618 	.word	0x00039618

00031dec <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   31dec:	b580      	push	{r7, lr}
   31dee:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   31df0:	4b02      	ldr	r3, [pc, #8]	; (31dfc <vApplicationMallocFailedHook+0x10>)
   31df2:	0018      	movs	r0, r3
   31df4:	4b02      	ldr	r3, [pc, #8]	; (31e00 <vApplicationMallocFailedHook+0x14>)
   31df6:	4798      	blx	r3
    while (1)
   31df8:	e7fe      	b.n	31df8 <vApplicationMallocFailedHook+0xc>
   31dfa:	46c0      	nop			; (mov r8, r8)
   31dfc:	00039638 	.word	0x00039638
   31e00:	0001d1a5 	.word	0x0001d1a5

00031e04 <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   31e04:	b580      	push	{r7, lr}
   31e06:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   31e08:	4b02      	ldr	r3, [pc, #8]	; (31e14 <vApplicationStackOverflowHook+0x10>)
   31e0a:	0018      	movs	r0, r3
   31e0c:	4b02      	ldr	r3, [pc, #8]	; (31e18 <vApplicationStackOverflowHook+0x14>)
   31e0e:	4798      	blx	r3
    while (1)
   31e10:	e7fe      	b.n	31e10 <vApplicationStackOverflowHook+0xc>
   31e12:	46c0      	nop			; (mov r8, r8)
   31e14:	00039664 	.word	0x00039664
   31e18:	0001d1a5 	.word	0x0001d1a5

00031e1c <configure_adc>:
{
    SysTick_Handler_MQTT();
}

void configure_adc(void)
{
   31e1c:	b580      	push	{r7, lr}
   31e1e:	b08c      	sub	sp, #48	; 0x30
   31e20:	af00      	add	r7, sp, #0
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
   31e22:	003b      	movs	r3, r7
   31e24:	0018      	movs	r0, r3
   31e26:	4b08      	ldr	r3, [pc, #32]	; (31e48 <configure_adc+0x2c>)
   31e28:	4798      	blx	r3
	#if (SAMC21)
	adc_init(&adc_instance, ADC1, &config_adc);
	#else
	adc_init(&adc_instance, ADC, &config_adc);
   31e2a:	003a      	movs	r2, r7
   31e2c:	4907      	ldr	r1, [pc, #28]	; (31e4c <configure_adc+0x30>)
   31e2e:	4b08      	ldr	r3, [pc, #32]	; (31e50 <configure_adc+0x34>)
   31e30:	0018      	movs	r0, r3
   31e32:	4b08      	ldr	r3, [pc, #32]	; (31e54 <configure_adc+0x38>)
   31e34:	4798      	blx	r3
	#endif
	adc_enable(&adc_instance);
   31e36:	4b06      	ldr	r3, [pc, #24]	; (31e50 <configure_adc+0x34>)
   31e38:	0018      	movs	r0, r3
   31e3a:	4b07      	ldr	r3, [pc, #28]	; (31e58 <configure_adc+0x3c>)
   31e3c:	4798      	blx	r3
}
   31e3e:	46c0      	nop			; (mov r8, r8)
   31e40:	46bd      	mov	sp, r7
   31e42:	b00c      	add	sp, #48	; 0x30
   31e44:	bd80      	pop	{r7, pc}
   31e46:	46c0      	nop			; (mov r8, r8)
   31e48:	00012219 	.word	0x00012219
   31e4c:	42004000 	.word	0x42004000
   31e50:	200045f4 	.word	0x200045f4
   31e54:	00012869 	.word	0x00012869
   31e58:	00031b91 	.word	0x00031b91

00031e5c <configure_gpio>:

void configure_gpio(void){
   31e5c:	b580      	push	{r7, lr}
   31e5e:	b082      	sub	sp, #8
   31e60:	af00      	add	r7, sp, #0
		struct port_config config_port_pin;//Define structure needed to configure a pin
		port_get_config_defaults(&config_port_pin); //Initialize structure with default configurations.
   31e62:	1d3b      	adds	r3, r7, #4
   31e64:	0018      	movs	r0, r3
   31e66:	4b0b      	ldr	r3, [pc, #44]	; (31e94 <configure_gpio+0x38>)
   31e68:	4798      	blx	r3
		config_port_pin.direction = PORT_PIN_DIR_OUTPUT; //Set pin as OUTPUT
   31e6a:	1d3b      	adds	r3, r7, #4
   31e6c:	2201      	movs	r2, #1
   31e6e:	701a      	strb	r2, [r3, #0]
		port_pin_set_config(PIN_PB02, &config_port_pin); //We assign the pin configuration to the PIN_PB02
   31e70:	1d3b      	adds	r3, r7, #4
   31e72:	0019      	movs	r1, r3
   31e74:	2022      	movs	r0, #34	; 0x22
   31e76:	4b08      	ldr	r3, [pc, #32]	; (31e98 <configure_gpio+0x3c>)
   31e78:	4798      	blx	r3
		
		config_port_pin.direction  = PORT_PIN_DIR_INPUT;
   31e7a:	1d3b      	adds	r3, r7, #4
   31e7c:	2200      	movs	r2, #0
   31e7e:	701a      	strb	r2, [r3, #0]
		port_pin_set_config(PIN_PA20, &config_port_pin);
   31e80:	1d3b      	adds	r3, r7, #4
   31e82:	0019      	movs	r1, r3
   31e84:	2014      	movs	r0, #20
   31e86:	4b04      	ldr	r3, [pc, #16]	; (31e98 <configure_gpio+0x3c>)
   31e88:	4798      	blx	r3
		
   31e8a:	46c0      	nop			; (mov r8, r8)
   31e8c:	46bd      	mov	sp, r7
   31e8e:	b002      	add	sp, #8
   31e90:	bd80      	pop	{r7, pc}
   31e92:	46c0      	nop			; (mov r8, r8)
   31e94:	00031bf1 	.word	0x00031bf1
   31e98:	00025de9 	.word	0x00025de9

00031e9c <__udivsi3>:
   31e9c:	2200      	movs	r2, #0
   31e9e:	0843      	lsrs	r3, r0, #1
   31ea0:	428b      	cmp	r3, r1
   31ea2:	d374      	bcc.n	31f8e <__udivsi3+0xf2>
   31ea4:	0903      	lsrs	r3, r0, #4
   31ea6:	428b      	cmp	r3, r1
   31ea8:	d35f      	bcc.n	31f6a <__udivsi3+0xce>
   31eaa:	0a03      	lsrs	r3, r0, #8
   31eac:	428b      	cmp	r3, r1
   31eae:	d344      	bcc.n	31f3a <__udivsi3+0x9e>
   31eb0:	0b03      	lsrs	r3, r0, #12
   31eb2:	428b      	cmp	r3, r1
   31eb4:	d328      	bcc.n	31f08 <__udivsi3+0x6c>
   31eb6:	0c03      	lsrs	r3, r0, #16
   31eb8:	428b      	cmp	r3, r1
   31eba:	d30d      	bcc.n	31ed8 <__udivsi3+0x3c>
   31ebc:	22ff      	movs	r2, #255	; 0xff
   31ebe:	0209      	lsls	r1, r1, #8
   31ec0:	ba12      	rev	r2, r2
   31ec2:	0c03      	lsrs	r3, r0, #16
   31ec4:	428b      	cmp	r3, r1
   31ec6:	d302      	bcc.n	31ece <__udivsi3+0x32>
   31ec8:	1212      	asrs	r2, r2, #8
   31eca:	0209      	lsls	r1, r1, #8
   31ecc:	d065      	beq.n	31f9a <__udivsi3+0xfe>
   31ece:	0b03      	lsrs	r3, r0, #12
   31ed0:	428b      	cmp	r3, r1
   31ed2:	d319      	bcc.n	31f08 <__udivsi3+0x6c>
   31ed4:	e000      	b.n	31ed8 <__udivsi3+0x3c>
   31ed6:	0a09      	lsrs	r1, r1, #8
   31ed8:	0bc3      	lsrs	r3, r0, #15
   31eda:	428b      	cmp	r3, r1
   31edc:	d301      	bcc.n	31ee2 <__udivsi3+0x46>
   31ede:	03cb      	lsls	r3, r1, #15
   31ee0:	1ac0      	subs	r0, r0, r3
   31ee2:	4152      	adcs	r2, r2
   31ee4:	0b83      	lsrs	r3, r0, #14
   31ee6:	428b      	cmp	r3, r1
   31ee8:	d301      	bcc.n	31eee <__udivsi3+0x52>
   31eea:	038b      	lsls	r3, r1, #14
   31eec:	1ac0      	subs	r0, r0, r3
   31eee:	4152      	adcs	r2, r2
   31ef0:	0b43      	lsrs	r3, r0, #13
   31ef2:	428b      	cmp	r3, r1
   31ef4:	d301      	bcc.n	31efa <__udivsi3+0x5e>
   31ef6:	034b      	lsls	r3, r1, #13
   31ef8:	1ac0      	subs	r0, r0, r3
   31efa:	4152      	adcs	r2, r2
   31efc:	0b03      	lsrs	r3, r0, #12
   31efe:	428b      	cmp	r3, r1
   31f00:	d301      	bcc.n	31f06 <__udivsi3+0x6a>
   31f02:	030b      	lsls	r3, r1, #12
   31f04:	1ac0      	subs	r0, r0, r3
   31f06:	4152      	adcs	r2, r2
   31f08:	0ac3      	lsrs	r3, r0, #11
   31f0a:	428b      	cmp	r3, r1
   31f0c:	d301      	bcc.n	31f12 <__udivsi3+0x76>
   31f0e:	02cb      	lsls	r3, r1, #11
   31f10:	1ac0      	subs	r0, r0, r3
   31f12:	4152      	adcs	r2, r2
   31f14:	0a83      	lsrs	r3, r0, #10
   31f16:	428b      	cmp	r3, r1
   31f18:	d301      	bcc.n	31f1e <__udivsi3+0x82>
   31f1a:	028b      	lsls	r3, r1, #10
   31f1c:	1ac0      	subs	r0, r0, r3
   31f1e:	4152      	adcs	r2, r2
   31f20:	0a43      	lsrs	r3, r0, #9
   31f22:	428b      	cmp	r3, r1
   31f24:	d301      	bcc.n	31f2a <__udivsi3+0x8e>
   31f26:	024b      	lsls	r3, r1, #9
   31f28:	1ac0      	subs	r0, r0, r3
   31f2a:	4152      	adcs	r2, r2
   31f2c:	0a03      	lsrs	r3, r0, #8
   31f2e:	428b      	cmp	r3, r1
   31f30:	d301      	bcc.n	31f36 <__udivsi3+0x9a>
   31f32:	020b      	lsls	r3, r1, #8
   31f34:	1ac0      	subs	r0, r0, r3
   31f36:	4152      	adcs	r2, r2
   31f38:	d2cd      	bcs.n	31ed6 <__udivsi3+0x3a>
   31f3a:	09c3      	lsrs	r3, r0, #7
   31f3c:	428b      	cmp	r3, r1
   31f3e:	d301      	bcc.n	31f44 <__udivsi3+0xa8>
   31f40:	01cb      	lsls	r3, r1, #7
   31f42:	1ac0      	subs	r0, r0, r3
   31f44:	4152      	adcs	r2, r2
   31f46:	0983      	lsrs	r3, r0, #6
   31f48:	428b      	cmp	r3, r1
   31f4a:	d301      	bcc.n	31f50 <__udivsi3+0xb4>
   31f4c:	018b      	lsls	r3, r1, #6
   31f4e:	1ac0      	subs	r0, r0, r3
   31f50:	4152      	adcs	r2, r2
   31f52:	0943      	lsrs	r3, r0, #5
   31f54:	428b      	cmp	r3, r1
   31f56:	d301      	bcc.n	31f5c <__udivsi3+0xc0>
   31f58:	014b      	lsls	r3, r1, #5
   31f5a:	1ac0      	subs	r0, r0, r3
   31f5c:	4152      	adcs	r2, r2
   31f5e:	0903      	lsrs	r3, r0, #4
   31f60:	428b      	cmp	r3, r1
   31f62:	d301      	bcc.n	31f68 <__udivsi3+0xcc>
   31f64:	010b      	lsls	r3, r1, #4
   31f66:	1ac0      	subs	r0, r0, r3
   31f68:	4152      	adcs	r2, r2
   31f6a:	08c3      	lsrs	r3, r0, #3
   31f6c:	428b      	cmp	r3, r1
   31f6e:	d301      	bcc.n	31f74 <__udivsi3+0xd8>
   31f70:	00cb      	lsls	r3, r1, #3
   31f72:	1ac0      	subs	r0, r0, r3
   31f74:	4152      	adcs	r2, r2
   31f76:	0883      	lsrs	r3, r0, #2
   31f78:	428b      	cmp	r3, r1
   31f7a:	d301      	bcc.n	31f80 <__udivsi3+0xe4>
   31f7c:	008b      	lsls	r3, r1, #2
   31f7e:	1ac0      	subs	r0, r0, r3
   31f80:	4152      	adcs	r2, r2
   31f82:	0843      	lsrs	r3, r0, #1
   31f84:	428b      	cmp	r3, r1
   31f86:	d301      	bcc.n	31f8c <__udivsi3+0xf0>
   31f88:	004b      	lsls	r3, r1, #1
   31f8a:	1ac0      	subs	r0, r0, r3
   31f8c:	4152      	adcs	r2, r2
   31f8e:	1a41      	subs	r1, r0, r1
   31f90:	d200      	bcs.n	31f94 <__udivsi3+0xf8>
   31f92:	4601      	mov	r1, r0
   31f94:	4152      	adcs	r2, r2
   31f96:	4610      	mov	r0, r2
   31f98:	4770      	bx	lr
   31f9a:	e7ff      	b.n	31f9c <__udivsi3+0x100>
   31f9c:	b501      	push	{r0, lr}
   31f9e:	2000      	movs	r0, #0
   31fa0:	f000 f8f0 	bl	32184 <__aeabi_idiv0>
   31fa4:	bd02      	pop	{r1, pc}
   31fa6:	46c0      	nop			; (mov r8, r8)

00031fa8 <__aeabi_uidivmod>:
   31fa8:	2900      	cmp	r1, #0
   31faa:	d0f7      	beq.n	31f9c <__udivsi3+0x100>
   31fac:	e776      	b.n	31e9c <__udivsi3>
   31fae:	4770      	bx	lr

00031fb0 <__divsi3>:
   31fb0:	4603      	mov	r3, r0
   31fb2:	430b      	orrs	r3, r1
   31fb4:	d47f      	bmi.n	320b6 <__divsi3+0x106>
   31fb6:	2200      	movs	r2, #0
   31fb8:	0843      	lsrs	r3, r0, #1
   31fba:	428b      	cmp	r3, r1
   31fbc:	d374      	bcc.n	320a8 <__divsi3+0xf8>
   31fbe:	0903      	lsrs	r3, r0, #4
   31fc0:	428b      	cmp	r3, r1
   31fc2:	d35f      	bcc.n	32084 <__divsi3+0xd4>
   31fc4:	0a03      	lsrs	r3, r0, #8
   31fc6:	428b      	cmp	r3, r1
   31fc8:	d344      	bcc.n	32054 <__divsi3+0xa4>
   31fca:	0b03      	lsrs	r3, r0, #12
   31fcc:	428b      	cmp	r3, r1
   31fce:	d328      	bcc.n	32022 <__divsi3+0x72>
   31fd0:	0c03      	lsrs	r3, r0, #16
   31fd2:	428b      	cmp	r3, r1
   31fd4:	d30d      	bcc.n	31ff2 <__divsi3+0x42>
   31fd6:	22ff      	movs	r2, #255	; 0xff
   31fd8:	0209      	lsls	r1, r1, #8
   31fda:	ba12      	rev	r2, r2
   31fdc:	0c03      	lsrs	r3, r0, #16
   31fde:	428b      	cmp	r3, r1
   31fe0:	d302      	bcc.n	31fe8 <__divsi3+0x38>
   31fe2:	1212      	asrs	r2, r2, #8
   31fe4:	0209      	lsls	r1, r1, #8
   31fe6:	d065      	beq.n	320b4 <__divsi3+0x104>
   31fe8:	0b03      	lsrs	r3, r0, #12
   31fea:	428b      	cmp	r3, r1
   31fec:	d319      	bcc.n	32022 <__divsi3+0x72>
   31fee:	e000      	b.n	31ff2 <__divsi3+0x42>
   31ff0:	0a09      	lsrs	r1, r1, #8
   31ff2:	0bc3      	lsrs	r3, r0, #15
   31ff4:	428b      	cmp	r3, r1
   31ff6:	d301      	bcc.n	31ffc <__divsi3+0x4c>
   31ff8:	03cb      	lsls	r3, r1, #15
   31ffa:	1ac0      	subs	r0, r0, r3
   31ffc:	4152      	adcs	r2, r2
   31ffe:	0b83      	lsrs	r3, r0, #14
   32000:	428b      	cmp	r3, r1
   32002:	d301      	bcc.n	32008 <__divsi3+0x58>
   32004:	038b      	lsls	r3, r1, #14
   32006:	1ac0      	subs	r0, r0, r3
   32008:	4152      	adcs	r2, r2
   3200a:	0b43      	lsrs	r3, r0, #13
   3200c:	428b      	cmp	r3, r1
   3200e:	d301      	bcc.n	32014 <__divsi3+0x64>
   32010:	034b      	lsls	r3, r1, #13
   32012:	1ac0      	subs	r0, r0, r3
   32014:	4152      	adcs	r2, r2
   32016:	0b03      	lsrs	r3, r0, #12
   32018:	428b      	cmp	r3, r1
   3201a:	d301      	bcc.n	32020 <__divsi3+0x70>
   3201c:	030b      	lsls	r3, r1, #12
   3201e:	1ac0      	subs	r0, r0, r3
   32020:	4152      	adcs	r2, r2
   32022:	0ac3      	lsrs	r3, r0, #11
   32024:	428b      	cmp	r3, r1
   32026:	d301      	bcc.n	3202c <__divsi3+0x7c>
   32028:	02cb      	lsls	r3, r1, #11
   3202a:	1ac0      	subs	r0, r0, r3
   3202c:	4152      	adcs	r2, r2
   3202e:	0a83      	lsrs	r3, r0, #10
   32030:	428b      	cmp	r3, r1
   32032:	d301      	bcc.n	32038 <__divsi3+0x88>
   32034:	028b      	lsls	r3, r1, #10
   32036:	1ac0      	subs	r0, r0, r3
   32038:	4152      	adcs	r2, r2
   3203a:	0a43      	lsrs	r3, r0, #9
   3203c:	428b      	cmp	r3, r1
   3203e:	d301      	bcc.n	32044 <__divsi3+0x94>
   32040:	024b      	lsls	r3, r1, #9
   32042:	1ac0      	subs	r0, r0, r3
   32044:	4152      	adcs	r2, r2
   32046:	0a03      	lsrs	r3, r0, #8
   32048:	428b      	cmp	r3, r1
   3204a:	d301      	bcc.n	32050 <__divsi3+0xa0>
   3204c:	020b      	lsls	r3, r1, #8
   3204e:	1ac0      	subs	r0, r0, r3
   32050:	4152      	adcs	r2, r2
   32052:	d2cd      	bcs.n	31ff0 <__divsi3+0x40>
   32054:	09c3      	lsrs	r3, r0, #7
   32056:	428b      	cmp	r3, r1
   32058:	d301      	bcc.n	3205e <__divsi3+0xae>
   3205a:	01cb      	lsls	r3, r1, #7
   3205c:	1ac0      	subs	r0, r0, r3
   3205e:	4152      	adcs	r2, r2
   32060:	0983      	lsrs	r3, r0, #6
   32062:	428b      	cmp	r3, r1
   32064:	d301      	bcc.n	3206a <__divsi3+0xba>
   32066:	018b      	lsls	r3, r1, #6
   32068:	1ac0      	subs	r0, r0, r3
   3206a:	4152      	adcs	r2, r2
   3206c:	0943      	lsrs	r3, r0, #5
   3206e:	428b      	cmp	r3, r1
   32070:	d301      	bcc.n	32076 <__divsi3+0xc6>
   32072:	014b      	lsls	r3, r1, #5
   32074:	1ac0      	subs	r0, r0, r3
   32076:	4152      	adcs	r2, r2
   32078:	0903      	lsrs	r3, r0, #4
   3207a:	428b      	cmp	r3, r1
   3207c:	d301      	bcc.n	32082 <__divsi3+0xd2>
   3207e:	010b      	lsls	r3, r1, #4
   32080:	1ac0      	subs	r0, r0, r3
   32082:	4152      	adcs	r2, r2
   32084:	08c3      	lsrs	r3, r0, #3
   32086:	428b      	cmp	r3, r1
   32088:	d301      	bcc.n	3208e <__divsi3+0xde>
   3208a:	00cb      	lsls	r3, r1, #3
   3208c:	1ac0      	subs	r0, r0, r3
   3208e:	4152      	adcs	r2, r2
   32090:	0883      	lsrs	r3, r0, #2
   32092:	428b      	cmp	r3, r1
   32094:	d301      	bcc.n	3209a <__divsi3+0xea>
   32096:	008b      	lsls	r3, r1, #2
   32098:	1ac0      	subs	r0, r0, r3
   3209a:	4152      	adcs	r2, r2
   3209c:	0843      	lsrs	r3, r0, #1
   3209e:	428b      	cmp	r3, r1
   320a0:	d301      	bcc.n	320a6 <__divsi3+0xf6>
   320a2:	004b      	lsls	r3, r1, #1
   320a4:	1ac0      	subs	r0, r0, r3
   320a6:	4152      	adcs	r2, r2
   320a8:	1a41      	subs	r1, r0, r1
   320aa:	d200      	bcs.n	320ae <__divsi3+0xfe>
   320ac:	4601      	mov	r1, r0
   320ae:	4152      	adcs	r2, r2
   320b0:	4610      	mov	r0, r2
   320b2:	4770      	bx	lr
   320b4:	e05d      	b.n	32172 <__divsi3+0x1c2>
   320b6:	0fca      	lsrs	r2, r1, #31
   320b8:	d000      	beq.n	320bc <__divsi3+0x10c>
   320ba:	4249      	negs	r1, r1
   320bc:	1003      	asrs	r3, r0, #32
   320be:	d300      	bcc.n	320c2 <__divsi3+0x112>
   320c0:	4240      	negs	r0, r0
   320c2:	4053      	eors	r3, r2
   320c4:	2200      	movs	r2, #0
   320c6:	469c      	mov	ip, r3
   320c8:	0903      	lsrs	r3, r0, #4
   320ca:	428b      	cmp	r3, r1
   320cc:	d32d      	bcc.n	3212a <__divsi3+0x17a>
   320ce:	0a03      	lsrs	r3, r0, #8
   320d0:	428b      	cmp	r3, r1
   320d2:	d312      	bcc.n	320fa <__divsi3+0x14a>
   320d4:	22fc      	movs	r2, #252	; 0xfc
   320d6:	0189      	lsls	r1, r1, #6
   320d8:	ba12      	rev	r2, r2
   320da:	0a03      	lsrs	r3, r0, #8
   320dc:	428b      	cmp	r3, r1
   320de:	d30c      	bcc.n	320fa <__divsi3+0x14a>
   320e0:	0189      	lsls	r1, r1, #6
   320e2:	1192      	asrs	r2, r2, #6
   320e4:	428b      	cmp	r3, r1
   320e6:	d308      	bcc.n	320fa <__divsi3+0x14a>
   320e8:	0189      	lsls	r1, r1, #6
   320ea:	1192      	asrs	r2, r2, #6
   320ec:	428b      	cmp	r3, r1
   320ee:	d304      	bcc.n	320fa <__divsi3+0x14a>
   320f0:	0189      	lsls	r1, r1, #6
   320f2:	d03a      	beq.n	3216a <__divsi3+0x1ba>
   320f4:	1192      	asrs	r2, r2, #6
   320f6:	e000      	b.n	320fa <__divsi3+0x14a>
   320f8:	0989      	lsrs	r1, r1, #6
   320fa:	09c3      	lsrs	r3, r0, #7
   320fc:	428b      	cmp	r3, r1
   320fe:	d301      	bcc.n	32104 <__divsi3+0x154>
   32100:	01cb      	lsls	r3, r1, #7
   32102:	1ac0      	subs	r0, r0, r3
   32104:	4152      	adcs	r2, r2
   32106:	0983      	lsrs	r3, r0, #6
   32108:	428b      	cmp	r3, r1
   3210a:	d301      	bcc.n	32110 <__divsi3+0x160>
   3210c:	018b      	lsls	r3, r1, #6
   3210e:	1ac0      	subs	r0, r0, r3
   32110:	4152      	adcs	r2, r2
   32112:	0943      	lsrs	r3, r0, #5
   32114:	428b      	cmp	r3, r1
   32116:	d301      	bcc.n	3211c <__divsi3+0x16c>
   32118:	014b      	lsls	r3, r1, #5
   3211a:	1ac0      	subs	r0, r0, r3
   3211c:	4152      	adcs	r2, r2
   3211e:	0903      	lsrs	r3, r0, #4
   32120:	428b      	cmp	r3, r1
   32122:	d301      	bcc.n	32128 <__divsi3+0x178>
   32124:	010b      	lsls	r3, r1, #4
   32126:	1ac0      	subs	r0, r0, r3
   32128:	4152      	adcs	r2, r2
   3212a:	08c3      	lsrs	r3, r0, #3
   3212c:	428b      	cmp	r3, r1
   3212e:	d301      	bcc.n	32134 <__divsi3+0x184>
   32130:	00cb      	lsls	r3, r1, #3
   32132:	1ac0      	subs	r0, r0, r3
   32134:	4152      	adcs	r2, r2
   32136:	0883      	lsrs	r3, r0, #2
   32138:	428b      	cmp	r3, r1
   3213a:	d301      	bcc.n	32140 <__divsi3+0x190>
   3213c:	008b      	lsls	r3, r1, #2
   3213e:	1ac0      	subs	r0, r0, r3
   32140:	4152      	adcs	r2, r2
   32142:	d2d9      	bcs.n	320f8 <__divsi3+0x148>
   32144:	0843      	lsrs	r3, r0, #1
   32146:	428b      	cmp	r3, r1
   32148:	d301      	bcc.n	3214e <__divsi3+0x19e>
   3214a:	004b      	lsls	r3, r1, #1
   3214c:	1ac0      	subs	r0, r0, r3
   3214e:	4152      	adcs	r2, r2
   32150:	1a41      	subs	r1, r0, r1
   32152:	d200      	bcs.n	32156 <__divsi3+0x1a6>
   32154:	4601      	mov	r1, r0
   32156:	4663      	mov	r3, ip
   32158:	4152      	adcs	r2, r2
   3215a:	105b      	asrs	r3, r3, #1
   3215c:	4610      	mov	r0, r2
   3215e:	d301      	bcc.n	32164 <__divsi3+0x1b4>
   32160:	4240      	negs	r0, r0
   32162:	2b00      	cmp	r3, #0
   32164:	d500      	bpl.n	32168 <__divsi3+0x1b8>
   32166:	4249      	negs	r1, r1
   32168:	4770      	bx	lr
   3216a:	4663      	mov	r3, ip
   3216c:	105b      	asrs	r3, r3, #1
   3216e:	d300      	bcc.n	32172 <__divsi3+0x1c2>
   32170:	4240      	negs	r0, r0
   32172:	b501      	push	{r0, lr}
   32174:	2000      	movs	r0, #0
   32176:	f000 f805 	bl	32184 <__aeabi_idiv0>
   3217a:	bd02      	pop	{r1, pc}

0003217c <__aeabi_idivmod>:
   3217c:	2900      	cmp	r1, #0
   3217e:	d0f8      	beq.n	32172 <__divsi3+0x1c2>
   32180:	e716      	b.n	31fb0 <__divsi3>
   32182:	4770      	bx	lr

00032184 <__aeabi_idiv0>:
   32184:	4770      	bx	lr
   32186:	46c0      	nop			; (mov r8, r8)

00032188 <__aeabi_cfrcmple>:
   32188:	4684      	mov	ip, r0
   3218a:	1c08      	adds	r0, r1, #0
   3218c:	4661      	mov	r1, ip
   3218e:	e7ff      	b.n	32190 <__aeabi_cfcmpeq>

00032190 <__aeabi_cfcmpeq>:
   32190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   32192:	f000 f8db 	bl	3234c <__lesf2>
   32196:	2800      	cmp	r0, #0
   32198:	d401      	bmi.n	3219e <__aeabi_cfcmpeq+0xe>
   3219a:	2100      	movs	r1, #0
   3219c:	42c8      	cmn	r0, r1
   3219e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000321a0 <__aeabi_fcmpeq>:
   321a0:	b510      	push	{r4, lr}
   321a2:	f000 f86d 	bl	32280 <__eqsf2>
   321a6:	4240      	negs	r0, r0
   321a8:	3001      	adds	r0, #1
   321aa:	bd10      	pop	{r4, pc}

000321ac <__aeabi_fcmplt>:
   321ac:	b510      	push	{r4, lr}
   321ae:	f000 f8cd 	bl	3234c <__lesf2>
   321b2:	2800      	cmp	r0, #0
   321b4:	db01      	blt.n	321ba <__aeabi_fcmplt+0xe>
   321b6:	2000      	movs	r0, #0
   321b8:	bd10      	pop	{r4, pc}
   321ba:	2001      	movs	r0, #1
   321bc:	bd10      	pop	{r4, pc}
   321be:	46c0      	nop			; (mov r8, r8)

000321c0 <__aeabi_fcmple>:
   321c0:	b510      	push	{r4, lr}
   321c2:	f000 f8c3 	bl	3234c <__lesf2>
   321c6:	2800      	cmp	r0, #0
   321c8:	dd01      	ble.n	321ce <__aeabi_fcmple+0xe>
   321ca:	2000      	movs	r0, #0
   321cc:	bd10      	pop	{r4, pc}
   321ce:	2001      	movs	r0, #1
   321d0:	bd10      	pop	{r4, pc}
   321d2:	46c0      	nop			; (mov r8, r8)

000321d4 <__aeabi_fcmpgt>:
   321d4:	b510      	push	{r4, lr}
   321d6:	f000 f879 	bl	322cc <__gesf2>
   321da:	2800      	cmp	r0, #0
   321dc:	dc01      	bgt.n	321e2 <__aeabi_fcmpgt+0xe>
   321de:	2000      	movs	r0, #0
   321e0:	bd10      	pop	{r4, pc}
   321e2:	2001      	movs	r0, #1
   321e4:	bd10      	pop	{r4, pc}
   321e6:	46c0      	nop			; (mov r8, r8)

000321e8 <__aeabi_fcmpge>:
   321e8:	b510      	push	{r4, lr}
   321ea:	f000 f86f 	bl	322cc <__gesf2>
   321ee:	2800      	cmp	r0, #0
   321f0:	da01      	bge.n	321f6 <__aeabi_fcmpge+0xe>
   321f2:	2000      	movs	r0, #0
   321f4:	bd10      	pop	{r4, pc}
   321f6:	2001      	movs	r0, #1
   321f8:	bd10      	pop	{r4, pc}
   321fa:	46c0      	nop			; (mov r8, r8)

000321fc <__aeabi_lmul>:
   321fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   321fe:	46ce      	mov	lr, r9
   32200:	4647      	mov	r7, r8
   32202:	0415      	lsls	r5, r2, #16
   32204:	0c2d      	lsrs	r5, r5, #16
   32206:	002e      	movs	r6, r5
   32208:	b580      	push	{r7, lr}
   3220a:	0407      	lsls	r7, r0, #16
   3220c:	0c14      	lsrs	r4, r2, #16
   3220e:	0c3f      	lsrs	r7, r7, #16
   32210:	4699      	mov	r9, r3
   32212:	0c03      	lsrs	r3, r0, #16
   32214:	437e      	muls	r6, r7
   32216:	435d      	muls	r5, r3
   32218:	4367      	muls	r7, r4
   3221a:	4363      	muls	r3, r4
   3221c:	197f      	adds	r7, r7, r5
   3221e:	0c34      	lsrs	r4, r6, #16
   32220:	19e4      	adds	r4, r4, r7
   32222:	469c      	mov	ip, r3
   32224:	42a5      	cmp	r5, r4
   32226:	d903      	bls.n	32230 <__aeabi_lmul+0x34>
   32228:	2380      	movs	r3, #128	; 0x80
   3222a:	025b      	lsls	r3, r3, #9
   3222c:	4698      	mov	r8, r3
   3222e:	44c4      	add	ip, r8
   32230:	464b      	mov	r3, r9
   32232:	4351      	muls	r1, r2
   32234:	4343      	muls	r3, r0
   32236:	0436      	lsls	r6, r6, #16
   32238:	0c36      	lsrs	r6, r6, #16
   3223a:	0c25      	lsrs	r5, r4, #16
   3223c:	0424      	lsls	r4, r4, #16
   3223e:	4465      	add	r5, ip
   32240:	19a4      	adds	r4, r4, r6
   32242:	1859      	adds	r1, r3, r1
   32244:	1949      	adds	r1, r1, r5
   32246:	0020      	movs	r0, r4
   32248:	bc0c      	pop	{r2, r3}
   3224a:	4690      	mov	r8, r2
   3224c:	4699      	mov	r9, r3
   3224e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00032250 <__aeabi_f2uiz>:
   32250:	219e      	movs	r1, #158	; 0x9e
   32252:	b510      	push	{r4, lr}
   32254:	05c9      	lsls	r1, r1, #23
   32256:	1c04      	adds	r4, r0, #0
   32258:	f7ff ffc6 	bl	321e8 <__aeabi_fcmpge>
   3225c:	2800      	cmp	r0, #0
   3225e:	d103      	bne.n	32268 <__aeabi_f2uiz+0x18>
   32260:	1c20      	adds	r0, r4, #0
   32262:	f000 fa51 	bl	32708 <__aeabi_f2iz>
   32266:	bd10      	pop	{r4, pc}
   32268:	219e      	movs	r1, #158	; 0x9e
   3226a:	1c20      	adds	r0, r4, #0
   3226c:	05c9      	lsls	r1, r1, #23
   3226e:	f000 f8af 	bl	323d0 <__aeabi_fsub>
   32272:	f000 fa49 	bl	32708 <__aeabi_f2iz>
   32276:	2380      	movs	r3, #128	; 0x80
   32278:	061b      	lsls	r3, r3, #24
   3227a:	469c      	mov	ip, r3
   3227c:	4460      	add	r0, ip
   3227e:	e7f2      	b.n	32266 <__aeabi_f2uiz+0x16>

00032280 <__eqsf2>:
   32280:	b570      	push	{r4, r5, r6, lr}
   32282:	0042      	lsls	r2, r0, #1
   32284:	0245      	lsls	r5, r0, #9
   32286:	024e      	lsls	r6, r1, #9
   32288:	004c      	lsls	r4, r1, #1
   3228a:	0fc3      	lsrs	r3, r0, #31
   3228c:	0a6d      	lsrs	r5, r5, #9
   3228e:	0e12      	lsrs	r2, r2, #24
   32290:	0a76      	lsrs	r6, r6, #9
   32292:	0e24      	lsrs	r4, r4, #24
   32294:	0fc9      	lsrs	r1, r1, #31
   32296:	2001      	movs	r0, #1
   32298:	2aff      	cmp	r2, #255	; 0xff
   3229a:	d006      	beq.n	322aa <__eqsf2+0x2a>
   3229c:	2cff      	cmp	r4, #255	; 0xff
   3229e:	d003      	beq.n	322a8 <__eqsf2+0x28>
   322a0:	42a2      	cmp	r2, r4
   322a2:	d101      	bne.n	322a8 <__eqsf2+0x28>
   322a4:	42b5      	cmp	r5, r6
   322a6:	d006      	beq.n	322b6 <__eqsf2+0x36>
   322a8:	bd70      	pop	{r4, r5, r6, pc}
   322aa:	2d00      	cmp	r5, #0
   322ac:	d1fc      	bne.n	322a8 <__eqsf2+0x28>
   322ae:	2cff      	cmp	r4, #255	; 0xff
   322b0:	d1fa      	bne.n	322a8 <__eqsf2+0x28>
   322b2:	2e00      	cmp	r6, #0
   322b4:	d1f8      	bne.n	322a8 <__eqsf2+0x28>
   322b6:	428b      	cmp	r3, r1
   322b8:	d006      	beq.n	322c8 <__eqsf2+0x48>
   322ba:	2001      	movs	r0, #1
   322bc:	2a00      	cmp	r2, #0
   322be:	d1f3      	bne.n	322a8 <__eqsf2+0x28>
   322c0:	0028      	movs	r0, r5
   322c2:	1e45      	subs	r5, r0, #1
   322c4:	41a8      	sbcs	r0, r5
   322c6:	e7ef      	b.n	322a8 <__eqsf2+0x28>
   322c8:	2000      	movs	r0, #0
   322ca:	e7ed      	b.n	322a8 <__eqsf2+0x28>

000322cc <__gesf2>:
   322cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   322ce:	0042      	lsls	r2, r0, #1
   322d0:	0245      	lsls	r5, r0, #9
   322d2:	024c      	lsls	r4, r1, #9
   322d4:	0fc3      	lsrs	r3, r0, #31
   322d6:	0048      	lsls	r0, r1, #1
   322d8:	0a6d      	lsrs	r5, r5, #9
   322da:	0e12      	lsrs	r2, r2, #24
   322dc:	0a64      	lsrs	r4, r4, #9
   322de:	0e00      	lsrs	r0, r0, #24
   322e0:	0fc9      	lsrs	r1, r1, #31
   322e2:	2aff      	cmp	r2, #255	; 0xff
   322e4:	d01e      	beq.n	32324 <__gesf2+0x58>
   322e6:	28ff      	cmp	r0, #255	; 0xff
   322e8:	d021      	beq.n	3232e <__gesf2+0x62>
   322ea:	2a00      	cmp	r2, #0
   322ec:	d10a      	bne.n	32304 <__gesf2+0x38>
   322ee:	426e      	negs	r6, r5
   322f0:	416e      	adcs	r6, r5
   322f2:	b2f6      	uxtb	r6, r6
   322f4:	2800      	cmp	r0, #0
   322f6:	d10f      	bne.n	32318 <__gesf2+0x4c>
   322f8:	2c00      	cmp	r4, #0
   322fa:	d10d      	bne.n	32318 <__gesf2+0x4c>
   322fc:	2000      	movs	r0, #0
   322fe:	2d00      	cmp	r5, #0
   32300:	d009      	beq.n	32316 <__gesf2+0x4a>
   32302:	e005      	b.n	32310 <__gesf2+0x44>
   32304:	2800      	cmp	r0, #0
   32306:	d101      	bne.n	3230c <__gesf2+0x40>
   32308:	2c00      	cmp	r4, #0
   3230a:	d001      	beq.n	32310 <__gesf2+0x44>
   3230c:	428b      	cmp	r3, r1
   3230e:	d011      	beq.n	32334 <__gesf2+0x68>
   32310:	2101      	movs	r1, #1
   32312:	4258      	negs	r0, r3
   32314:	4308      	orrs	r0, r1
   32316:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32318:	2e00      	cmp	r6, #0
   3231a:	d0f7      	beq.n	3230c <__gesf2+0x40>
   3231c:	2001      	movs	r0, #1
   3231e:	3901      	subs	r1, #1
   32320:	4308      	orrs	r0, r1
   32322:	e7f8      	b.n	32316 <__gesf2+0x4a>
   32324:	2d00      	cmp	r5, #0
   32326:	d0de      	beq.n	322e6 <__gesf2+0x1a>
   32328:	2002      	movs	r0, #2
   3232a:	4240      	negs	r0, r0
   3232c:	e7f3      	b.n	32316 <__gesf2+0x4a>
   3232e:	2c00      	cmp	r4, #0
   32330:	d0db      	beq.n	322ea <__gesf2+0x1e>
   32332:	e7f9      	b.n	32328 <__gesf2+0x5c>
   32334:	4282      	cmp	r2, r0
   32336:	dceb      	bgt.n	32310 <__gesf2+0x44>
   32338:	db04      	blt.n	32344 <__gesf2+0x78>
   3233a:	42a5      	cmp	r5, r4
   3233c:	d8e8      	bhi.n	32310 <__gesf2+0x44>
   3233e:	2000      	movs	r0, #0
   32340:	42a5      	cmp	r5, r4
   32342:	d2e8      	bcs.n	32316 <__gesf2+0x4a>
   32344:	2101      	movs	r1, #1
   32346:	1e58      	subs	r0, r3, #1
   32348:	4308      	orrs	r0, r1
   3234a:	e7e4      	b.n	32316 <__gesf2+0x4a>

0003234c <__lesf2>:
   3234c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3234e:	0042      	lsls	r2, r0, #1
   32350:	024d      	lsls	r5, r1, #9
   32352:	004c      	lsls	r4, r1, #1
   32354:	0246      	lsls	r6, r0, #9
   32356:	0a76      	lsrs	r6, r6, #9
   32358:	0e12      	lsrs	r2, r2, #24
   3235a:	0fc3      	lsrs	r3, r0, #31
   3235c:	0a6d      	lsrs	r5, r5, #9
   3235e:	0e24      	lsrs	r4, r4, #24
   32360:	0fc9      	lsrs	r1, r1, #31
   32362:	2aff      	cmp	r2, #255	; 0xff
   32364:	d016      	beq.n	32394 <__lesf2+0x48>
   32366:	2cff      	cmp	r4, #255	; 0xff
   32368:	d018      	beq.n	3239c <__lesf2+0x50>
   3236a:	2a00      	cmp	r2, #0
   3236c:	d10a      	bne.n	32384 <__lesf2+0x38>
   3236e:	4270      	negs	r0, r6
   32370:	4170      	adcs	r0, r6
   32372:	b2c0      	uxtb	r0, r0
   32374:	2c00      	cmp	r4, #0
   32376:	d015      	beq.n	323a4 <__lesf2+0x58>
   32378:	2800      	cmp	r0, #0
   3237a:	d005      	beq.n	32388 <__lesf2+0x3c>
   3237c:	2001      	movs	r0, #1
   3237e:	3901      	subs	r1, #1
   32380:	4308      	orrs	r0, r1
   32382:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32384:	2c00      	cmp	r4, #0
   32386:	d013      	beq.n	323b0 <__lesf2+0x64>
   32388:	4299      	cmp	r1, r3
   3238a:	d014      	beq.n	323b6 <__lesf2+0x6a>
   3238c:	2001      	movs	r0, #1
   3238e:	425b      	negs	r3, r3
   32390:	4318      	orrs	r0, r3
   32392:	e7f6      	b.n	32382 <__lesf2+0x36>
   32394:	2002      	movs	r0, #2
   32396:	2e00      	cmp	r6, #0
   32398:	d1f3      	bne.n	32382 <__lesf2+0x36>
   3239a:	e7e4      	b.n	32366 <__lesf2+0x1a>
   3239c:	2002      	movs	r0, #2
   3239e:	2d00      	cmp	r5, #0
   323a0:	d1ef      	bne.n	32382 <__lesf2+0x36>
   323a2:	e7e2      	b.n	3236a <__lesf2+0x1e>
   323a4:	2d00      	cmp	r5, #0
   323a6:	d1e7      	bne.n	32378 <__lesf2+0x2c>
   323a8:	2000      	movs	r0, #0
   323aa:	2e00      	cmp	r6, #0
   323ac:	d0e9      	beq.n	32382 <__lesf2+0x36>
   323ae:	e7ed      	b.n	3238c <__lesf2+0x40>
   323b0:	2d00      	cmp	r5, #0
   323b2:	d1e9      	bne.n	32388 <__lesf2+0x3c>
   323b4:	e7ea      	b.n	3238c <__lesf2+0x40>
   323b6:	42a2      	cmp	r2, r4
   323b8:	dc06      	bgt.n	323c8 <__lesf2+0x7c>
   323ba:	dbdf      	blt.n	3237c <__lesf2+0x30>
   323bc:	42ae      	cmp	r6, r5
   323be:	d803      	bhi.n	323c8 <__lesf2+0x7c>
   323c0:	2000      	movs	r0, #0
   323c2:	42ae      	cmp	r6, r5
   323c4:	d3da      	bcc.n	3237c <__lesf2+0x30>
   323c6:	e7dc      	b.n	32382 <__lesf2+0x36>
   323c8:	2001      	movs	r0, #1
   323ca:	4249      	negs	r1, r1
   323cc:	4308      	orrs	r0, r1
   323ce:	e7d8      	b.n	32382 <__lesf2+0x36>

000323d0 <__aeabi_fsub>:
   323d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   323d2:	464f      	mov	r7, r9
   323d4:	46d6      	mov	lr, sl
   323d6:	4646      	mov	r6, r8
   323d8:	0044      	lsls	r4, r0, #1
   323da:	b5c0      	push	{r6, r7, lr}
   323dc:	0fc2      	lsrs	r2, r0, #31
   323de:	0247      	lsls	r7, r0, #9
   323e0:	0248      	lsls	r0, r1, #9
   323e2:	0a40      	lsrs	r0, r0, #9
   323e4:	4684      	mov	ip, r0
   323e6:	4666      	mov	r6, ip
   323e8:	0a7b      	lsrs	r3, r7, #9
   323ea:	0048      	lsls	r0, r1, #1
   323ec:	0fc9      	lsrs	r1, r1, #31
   323ee:	469a      	mov	sl, r3
   323f0:	0e24      	lsrs	r4, r4, #24
   323f2:	0015      	movs	r5, r2
   323f4:	00db      	lsls	r3, r3, #3
   323f6:	0e00      	lsrs	r0, r0, #24
   323f8:	4689      	mov	r9, r1
   323fa:	00f6      	lsls	r6, r6, #3
   323fc:	28ff      	cmp	r0, #255	; 0xff
   323fe:	d100      	bne.n	32402 <__aeabi_fsub+0x32>
   32400:	e08f      	b.n	32522 <__aeabi_fsub+0x152>
   32402:	2101      	movs	r1, #1
   32404:	464f      	mov	r7, r9
   32406:	404f      	eors	r7, r1
   32408:	0039      	movs	r1, r7
   3240a:	4291      	cmp	r1, r2
   3240c:	d066      	beq.n	324dc <__aeabi_fsub+0x10c>
   3240e:	1a22      	subs	r2, r4, r0
   32410:	2a00      	cmp	r2, #0
   32412:	dc00      	bgt.n	32416 <__aeabi_fsub+0x46>
   32414:	e09d      	b.n	32552 <__aeabi_fsub+0x182>
   32416:	2800      	cmp	r0, #0
   32418:	d13d      	bne.n	32496 <__aeabi_fsub+0xc6>
   3241a:	2e00      	cmp	r6, #0
   3241c:	d100      	bne.n	32420 <__aeabi_fsub+0x50>
   3241e:	e08b      	b.n	32538 <__aeabi_fsub+0x168>
   32420:	1e51      	subs	r1, r2, #1
   32422:	2900      	cmp	r1, #0
   32424:	d000      	beq.n	32428 <__aeabi_fsub+0x58>
   32426:	e0b5      	b.n	32594 <__aeabi_fsub+0x1c4>
   32428:	2401      	movs	r4, #1
   3242a:	1b9b      	subs	r3, r3, r6
   3242c:	015a      	lsls	r2, r3, #5
   3242e:	d544      	bpl.n	324ba <__aeabi_fsub+0xea>
   32430:	019b      	lsls	r3, r3, #6
   32432:	099f      	lsrs	r7, r3, #6
   32434:	0038      	movs	r0, r7
   32436:	f001 fef9 	bl	3422c <__clzsi2>
   3243a:	3805      	subs	r0, #5
   3243c:	4087      	lsls	r7, r0
   3243e:	4284      	cmp	r4, r0
   32440:	dd00      	ble.n	32444 <__aeabi_fsub+0x74>
   32442:	e096      	b.n	32572 <__aeabi_fsub+0x1a2>
   32444:	1b04      	subs	r4, r0, r4
   32446:	003a      	movs	r2, r7
   32448:	2020      	movs	r0, #32
   3244a:	3401      	adds	r4, #1
   3244c:	40e2      	lsrs	r2, r4
   3244e:	1b04      	subs	r4, r0, r4
   32450:	40a7      	lsls	r7, r4
   32452:	003b      	movs	r3, r7
   32454:	1e5f      	subs	r7, r3, #1
   32456:	41bb      	sbcs	r3, r7
   32458:	2400      	movs	r4, #0
   3245a:	4313      	orrs	r3, r2
   3245c:	075a      	lsls	r2, r3, #29
   3245e:	d004      	beq.n	3246a <__aeabi_fsub+0x9a>
   32460:	220f      	movs	r2, #15
   32462:	401a      	ands	r2, r3
   32464:	2a04      	cmp	r2, #4
   32466:	d000      	beq.n	3246a <__aeabi_fsub+0x9a>
   32468:	3304      	adds	r3, #4
   3246a:	015a      	lsls	r2, r3, #5
   3246c:	d527      	bpl.n	324be <__aeabi_fsub+0xee>
   3246e:	3401      	adds	r4, #1
   32470:	2cff      	cmp	r4, #255	; 0xff
   32472:	d100      	bne.n	32476 <__aeabi_fsub+0xa6>
   32474:	e079      	b.n	3256a <__aeabi_fsub+0x19a>
   32476:	2201      	movs	r2, #1
   32478:	019b      	lsls	r3, r3, #6
   3247a:	0a5b      	lsrs	r3, r3, #9
   3247c:	b2e4      	uxtb	r4, r4
   3247e:	402a      	ands	r2, r5
   32480:	025b      	lsls	r3, r3, #9
   32482:	05e4      	lsls	r4, r4, #23
   32484:	0a58      	lsrs	r0, r3, #9
   32486:	07d2      	lsls	r2, r2, #31
   32488:	4320      	orrs	r0, r4
   3248a:	4310      	orrs	r0, r2
   3248c:	bc1c      	pop	{r2, r3, r4}
   3248e:	4690      	mov	r8, r2
   32490:	4699      	mov	r9, r3
   32492:	46a2      	mov	sl, r4
   32494:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32496:	2cff      	cmp	r4, #255	; 0xff
   32498:	d0e0      	beq.n	3245c <__aeabi_fsub+0x8c>
   3249a:	2180      	movs	r1, #128	; 0x80
   3249c:	04c9      	lsls	r1, r1, #19
   3249e:	430e      	orrs	r6, r1
   324a0:	2a1b      	cmp	r2, #27
   324a2:	dc7b      	bgt.n	3259c <__aeabi_fsub+0x1cc>
   324a4:	0031      	movs	r1, r6
   324a6:	2020      	movs	r0, #32
   324a8:	40d1      	lsrs	r1, r2
   324aa:	1a82      	subs	r2, r0, r2
   324ac:	4096      	lsls	r6, r2
   324ae:	1e72      	subs	r2, r6, #1
   324b0:	4196      	sbcs	r6, r2
   324b2:	430e      	orrs	r6, r1
   324b4:	1b9b      	subs	r3, r3, r6
   324b6:	015a      	lsls	r2, r3, #5
   324b8:	d4ba      	bmi.n	32430 <__aeabi_fsub+0x60>
   324ba:	075a      	lsls	r2, r3, #29
   324bc:	d1d0      	bne.n	32460 <__aeabi_fsub+0x90>
   324be:	2201      	movs	r2, #1
   324c0:	08df      	lsrs	r7, r3, #3
   324c2:	402a      	ands	r2, r5
   324c4:	2cff      	cmp	r4, #255	; 0xff
   324c6:	d133      	bne.n	32530 <__aeabi_fsub+0x160>
   324c8:	2f00      	cmp	r7, #0
   324ca:	d100      	bne.n	324ce <__aeabi_fsub+0xfe>
   324cc:	e0a8      	b.n	32620 <__aeabi_fsub+0x250>
   324ce:	2380      	movs	r3, #128	; 0x80
   324d0:	03db      	lsls	r3, r3, #15
   324d2:	433b      	orrs	r3, r7
   324d4:	025b      	lsls	r3, r3, #9
   324d6:	0a5b      	lsrs	r3, r3, #9
   324d8:	24ff      	movs	r4, #255	; 0xff
   324da:	e7d1      	b.n	32480 <__aeabi_fsub+0xb0>
   324dc:	1a21      	subs	r1, r4, r0
   324de:	2900      	cmp	r1, #0
   324e0:	dd4c      	ble.n	3257c <__aeabi_fsub+0x1ac>
   324e2:	2800      	cmp	r0, #0
   324e4:	d02a      	beq.n	3253c <__aeabi_fsub+0x16c>
   324e6:	2cff      	cmp	r4, #255	; 0xff
   324e8:	d0b8      	beq.n	3245c <__aeabi_fsub+0x8c>
   324ea:	2080      	movs	r0, #128	; 0x80
   324ec:	04c0      	lsls	r0, r0, #19
   324ee:	4306      	orrs	r6, r0
   324f0:	291b      	cmp	r1, #27
   324f2:	dd00      	ble.n	324f6 <__aeabi_fsub+0x126>
   324f4:	e0af      	b.n	32656 <__aeabi_fsub+0x286>
   324f6:	0030      	movs	r0, r6
   324f8:	2720      	movs	r7, #32
   324fa:	40c8      	lsrs	r0, r1
   324fc:	1a79      	subs	r1, r7, r1
   324fe:	408e      	lsls	r6, r1
   32500:	1e71      	subs	r1, r6, #1
   32502:	418e      	sbcs	r6, r1
   32504:	4306      	orrs	r6, r0
   32506:	199b      	adds	r3, r3, r6
   32508:	0159      	lsls	r1, r3, #5
   3250a:	d5d6      	bpl.n	324ba <__aeabi_fsub+0xea>
   3250c:	3401      	adds	r4, #1
   3250e:	2cff      	cmp	r4, #255	; 0xff
   32510:	d100      	bne.n	32514 <__aeabi_fsub+0x144>
   32512:	e085      	b.n	32620 <__aeabi_fsub+0x250>
   32514:	2201      	movs	r2, #1
   32516:	497a      	ldr	r1, [pc, #488]	; (32700 <__aeabi_fsub+0x330>)
   32518:	401a      	ands	r2, r3
   3251a:	085b      	lsrs	r3, r3, #1
   3251c:	400b      	ands	r3, r1
   3251e:	4313      	orrs	r3, r2
   32520:	e79c      	b.n	3245c <__aeabi_fsub+0x8c>
   32522:	2e00      	cmp	r6, #0
   32524:	d000      	beq.n	32528 <__aeabi_fsub+0x158>
   32526:	e770      	b.n	3240a <__aeabi_fsub+0x3a>
   32528:	e76b      	b.n	32402 <__aeabi_fsub+0x32>
   3252a:	1e3b      	subs	r3, r7, #0
   3252c:	d1c5      	bne.n	324ba <__aeabi_fsub+0xea>
   3252e:	2200      	movs	r2, #0
   32530:	027b      	lsls	r3, r7, #9
   32532:	0a5b      	lsrs	r3, r3, #9
   32534:	b2e4      	uxtb	r4, r4
   32536:	e7a3      	b.n	32480 <__aeabi_fsub+0xb0>
   32538:	0014      	movs	r4, r2
   3253a:	e78f      	b.n	3245c <__aeabi_fsub+0x8c>
   3253c:	2e00      	cmp	r6, #0
   3253e:	d04d      	beq.n	325dc <__aeabi_fsub+0x20c>
   32540:	1e48      	subs	r0, r1, #1
   32542:	2800      	cmp	r0, #0
   32544:	d157      	bne.n	325f6 <__aeabi_fsub+0x226>
   32546:	199b      	adds	r3, r3, r6
   32548:	2401      	movs	r4, #1
   3254a:	015a      	lsls	r2, r3, #5
   3254c:	d5b5      	bpl.n	324ba <__aeabi_fsub+0xea>
   3254e:	2402      	movs	r4, #2
   32550:	e7e0      	b.n	32514 <__aeabi_fsub+0x144>
   32552:	2a00      	cmp	r2, #0
   32554:	d125      	bne.n	325a2 <__aeabi_fsub+0x1d2>
   32556:	1c62      	adds	r2, r4, #1
   32558:	b2d2      	uxtb	r2, r2
   3255a:	2a01      	cmp	r2, #1
   3255c:	dd72      	ble.n	32644 <__aeabi_fsub+0x274>
   3255e:	1b9f      	subs	r7, r3, r6
   32560:	017a      	lsls	r2, r7, #5
   32562:	d535      	bpl.n	325d0 <__aeabi_fsub+0x200>
   32564:	1af7      	subs	r7, r6, r3
   32566:	000d      	movs	r5, r1
   32568:	e764      	b.n	32434 <__aeabi_fsub+0x64>
   3256a:	2201      	movs	r2, #1
   3256c:	2300      	movs	r3, #0
   3256e:	402a      	ands	r2, r5
   32570:	e786      	b.n	32480 <__aeabi_fsub+0xb0>
   32572:	003b      	movs	r3, r7
   32574:	4a63      	ldr	r2, [pc, #396]	; (32704 <__aeabi_fsub+0x334>)
   32576:	1a24      	subs	r4, r4, r0
   32578:	4013      	ands	r3, r2
   3257a:	e76f      	b.n	3245c <__aeabi_fsub+0x8c>
   3257c:	2900      	cmp	r1, #0
   3257e:	d16c      	bne.n	3265a <__aeabi_fsub+0x28a>
   32580:	1c61      	adds	r1, r4, #1
   32582:	b2c8      	uxtb	r0, r1
   32584:	2801      	cmp	r0, #1
   32586:	dd4e      	ble.n	32626 <__aeabi_fsub+0x256>
   32588:	29ff      	cmp	r1, #255	; 0xff
   3258a:	d049      	beq.n	32620 <__aeabi_fsub+0x250>
   3258c:	199b      	adds	r3, r3, r6
   3258e:	085b      	lsrs	r3, r3, #1
   32590:	000c      	movs	r4, r1
   32592:	e763      	b.n	3245c <__aeabi_fsub+0x8c>
   32594:	2aff      	cmp	r2, #255	; 0xff
   32596:	d041      	beq.n	3261c <__aeabi_fsub+0x24c>
   32598:	000a      	movs	r2, r1
   3259a:	e781      	b.n	324a0 <__aeabi_fsub+0xd0>
   3259c:	2601      	movs	r6, #1
   3259e:	1b9b      	subs	r3, r3, r6
   325a0:	e789      	b.n	324b6 <__aeabi_fsub+0xe6>
   325a2:	2c00      	cmp	r4, #0
   325a4:	d01c      	beq.n	325e0 <__aeabi_fsub+0x210>
   325a6:	28ff      	cmp	r0, #255	; 0xff
   325a8:	d021      	beq.n	325ee <__aeabi_fsub+0x21e>
   325aa:	2480      	movs	r4, #128	; 0x80
   325ac:	04e4      	lsls	r4, r4, #19
   325ae:	4252      	negs	r2, r2
   325b0:	4323      	orrs	r3, r4
   325b2:	2a1b      	cmp	r2, #27
   325b4:	dd00      	ble.n	325b8 <__aeabi_fsub+0x1e8>
   325b6:	e096      	b.n	326e6 <__aeabi_fsub+0x316>
   325b8:	001c      	movs	r4, r3
   325ba:	2520      	movs	r5, #32
   325bc:	40d4      	lsrs	r4, r2
   325be:	1aaa      	subs	r2, r5, r2
   325c0:	4093      	lsls	r3, r2
   325c2:	1e5a      	subs	r2, r3, #1
   325c4:	4193      	sbcs	r3, r2
   325c6:	4323      	orrs	r3, r4
   325c8:	1af3      	subs	r3, r6, r3
   325ca:	0004      	movs	r4, r0
   325cc:	000d      	movs	r5, r1
   325ce:	e72d      	b.n	3242c <__aeabi_fsub+0x5c>
   325d0:	2f00      	cmp	r7, #0
   325d2:	d000      	beq.n	325d6 <__aeabi_fsub+0x206>
   325d4:	e72e      	b.n	32434 <__aeabi_fsub+0x64>
   325d6:	2200      	movs	r2, #0
   325d8:	2400      	movs	r4, #0
   325da:	e7a9      	b.n	32530 <__aeabi_fsub+0x160>
   325dc:	000c      	movs	r4, r1
   325de:	e73d      	b.n	3245c <__aeabi_fsub+0x8c>
   325e0:	2b00      	cmp	r3, #0
   325e2:	d058      	beq.n	32696 <__aeabi_fsub+0x2c6>
   325e4:	43d2      	mvns	r2, r2
   325e6:	2a00      	cmp	r2, #0
   325e8:	d0ee      	beq.n	325c8 <__aeabi_fsub+0x1f8>
   325ea:	28ff      	cmp	r0, #255	; 0xff
   325ec:	d1e1      	bne.n	325b2 <__aeabi_fsub+0x1e2>
   325ee:	0033      	movs	r3, r6
   325f0:	24ff      	movs	r4, #255	; 0xff
   325f2:	000d      	movs	r5, r1
   325f4:	e732      	b.n	3245c <__aeabi_fsub+0x8c>
   325f6:	29ff      	cmp	r1, #255	; 0xff
   325f8:	d010      	beq.n	3261c <__aeabi_fsub+0x24c>
   325fa:	0001      	movs	r1, r0
   325fc:	e778      	b.n	324f0 <__aeabi_fsub+0x120>
   325fe:	2b00      	cmp	r3, #0
   32600:	d06e      	beq.n	326e0 <__aeabi_fsub+0x310>
   32602:	24ff      	movs	r4, #255	; 0xff
   32604:	2e00      	cmp	r6, #0
   32606:	d100      	bne.n	3260a <__aeabi_fsub+0x23a>
   32608:	e728      	b.n	3245c <__aeabi_fsub+0x8c>
   3260a:	2280      	movs	r2, #128	; 0x80
   3260c:	4651      	mov	r1, sl
   3260e:	03d2      	lsls	r2, r2, #15
   32610:	4211      	tst	r1, r2
   32612:	d003      	beq.n	3261c <__aeabi_fsub+0x24c>
   32614:	4661      	mov	r1, ip
   32616:	4211      	tst	r1, r2
   32618:	d100      	bne.n	3261c <__aeabi_fsub+0x24c>
   3261a:	0033      	movs	r3, r6
   3261c:	24ff      	movs	r4, #255	; 0xff
   3261e:	e71d      	b.n	3245c <__aeabi_fsub+0x8c>
   32620:	24ff      	movs	r4, #255	; 0xff
   32622:	2300      	movs	r3, #0
   32624:	e72c      	b.n	32480 <__aeabi_fsub+0xb0>
   32626:	2c00      	cmp	r4, #0
   32628:	d1e9      	bne.n	325fe <__aeabi_fsub+0x22e>
   3262a:	2b00      	cmp	r3, #0
   3262c:	d063      	beq.n	326f6 <__aeabi_fsub+0x326>
   3262e:	2e00      	cmp	r6, #0
   32630:	d100      	bne.n	32634 <__aeabi_fsub+0x264>
   32632:	e713      	b.n	3245c <__aeabi_fsub+0x8c>
   32634:	199b      	adds	r3, r3, r6
   32636:	015a      	lsls	r2, r3, #5
   32638:	d400      	bmi.n	3263c <__aeabi_fsub+0x26c>
   3263a:	e73e      	b.n	324ba <__aeabi_fsub+0xea>
   3263c:	4a31      	ldr	r2, [pc, #196]	; (32704 <__aeabi_fsub+0x334>)
   3263e:	000c      	movs	r4, r1
   32640:	4013      	ands	r3, r2
   32642:	e70b      	b.n	3245c <__aeabi_fsub+0x8c>
   32644:	2c00      	cmp	r4, #0
   32646:	d11e      	bne.n	32686 <__aeabi_fsub+0x2b6>
   32648:	2b00      	cmp	r3, #0
   3264a:	d12f      	bne.n	326ac <__aeabi_fsub+0x2dc>
   3264c:	2e00      	cmp	r6, #0
   3264e:	d04f      	beq.n	326f0 <__aeabi_fsub+0x320>
   32650:	0033      	movs	r3, r6
   32652:	000d      	movs	r5, r1
   32654:	e702      	b.n	3245c <__aeabi_fsub+0x8c>
   32656:	2601      	movs	r6, #1
   32658:	e755      	b.n	32506 <__aeabi_fsub+0x136>
   3265a:	2c00      	cmp	r4, #0
   3265c:	d11f      	bne.n	3269e <__aeabi_fsub+0x2ce>
   3265e:	2b00      	cmp	r3, #0
   32660:	d043      	beq.n	326ea <__aeabi_fsub+0x31a>
   32662:	43c9      	mvns	r1, r1
   32664:	2900      	cmp	r1, #0
   32666:	d00b      	beq.n	32680 <__aeabi_fsub+0x2b0>
   32668:	28ff      	cmp	r0, #255	; 0xff
   3266a:	d039      	beq.n	326e0 <__aeabi_fsub+0x310>
   3266c:	291b      	cmp	r1, #27
   3266e:	dc44      	bgt.n	326fa <__aeabi_fsub+0x32a>
   32670:	001c      	movs	r4, r3
   32672:	2720      	movs	r7, #32
   32674:	40cc      	lsrs	r4, r1
   32676:	1a79      	subs	r1, r7, r1
   32678:	408b      	lsls	r3, r1
   3267a:	1e59      	subs	r1, r3, #1
   3267c:	418b      	sbcs	r3, r1
   3267e:	4323      	orrs	r3, r4
   32680:	199b      	adds	r3, r3, r6
   32682:	0004      	movs	r4, r0
   32684:	e740      	b.n	32508 <__aeabi_fsub+0x138>
   32686:	2b00      	cmp	r3, #0
   32688:	d11a      	bne.n	326c0 <__aeabi_fsub+0x2f0>
   3268a:	2e00      	cmp	r6, #0
   3268c:	d124      	bne.n	326d8 <__aeabi_fsub+0x308>
   3268e:	2780      	movs	r7, #128	; 0x80
   32690:	2200      	movs	r2, #0
   32692:	03ff      	lsls	r7, r7, #15
   32694:	e71b      	b.n	324ce <__aeabi_fsub+0xfe>
   32696:	0033      	movs	r3, r6
   32698:	0004      	movs	r4, r0
   3269a:	000d      	movs	r5, r1
   3269c:	e6de      	b.n	3245c <__aeabi_fsub+0x8c>
   3269e:	28ff      	cmp	r0, #255	; 0xff
   326a0:	d01e      	beq.n	326e0 <__aeabi_fsub+0x310>
   326a2:	2480      	movs	r4, #128	; 0x80
   326a4:	04e4      	lsls	r4, r4, #19
   326a6:	4249      	negs	r1, r1
   326a8:	4323      	orrs	r3, r4
   326aa:	e7df      	b.n	3266c <__aeabi_fsub+0x29c>
   326ac:	2e00      	cmp	r6, #0
   326ae:	d100      	bne.n	326b2 <__aeabi_fsub+0x2e2>
   326b0:	e6d4      	b.n	3245c <__aeabi_fsub+0x8c>
   326b2:	1b9f      	subs	r7, r3, r6
   326b4:	017a      	lsls	r2, r7, #5
   326b6:	d400      	bmi.n	326ba <__aeabi_fsub+0x2ea>
   326b8:	e737      	b.n	3252a <__aeabi_fsub+0x15a>
   326ba:	1af3      	subs	r3, r6, r3
   326bc:	000d      	movs	r5, r1
   326be:	e6cd      	b.n	3245c <__aeabi_fsub+0x8c>
   326c0:	24ff      	movs	r4, #255	; 0xff
   326c2:	2e00      	cmp	r6, #0
   326c4:	d100      	bne.n	326c8 <__aeabi_fsub+0x2f8>
   326c6:	e6c9      	b.n	3245c <__aeabi_fsub+0x8c>
   326c8:	2280      	movs	r2, #128	; 0x80
   326ca:	4650      	mov	r0, sl
   326cc:	03d2      	lsls	r2, r2, #15
   326ce:	4210      	tst	r0, r2
   326d0:	d0a4      	beq.n	3261c <__aeabi_fsub+0x24c>
   326d2:	4660      	mov	r0, ip
   326d4:	4210      	tst	r0, r2
   326d6:	d1a1      	bne.n	3261c <__aeabi_fsub+0x24c>
   326d8:	0033      	movs	r3, r6
   326da:	000d      	movs	r5, r1
   326dc:	24ff      	movs	r4, #255	; 0xff
   326de:	e6bd      	b.n	3245c <__aeabi_fsub+0x8c>
   326e0:	0033      	movs	r3, r6
   326e2:	24ff      	movs	r4, #255	; 0xff
   326e4:	e6ba      	b.n	3245c <__aeabi_fsub+0x8c>
   326e6:	2301      	movs	r3, #1
   326e8:	e76e      	b.n	325c8 <__aeabi_fsub+0x1f8>
   326ea:	0033      	movs	r3, r6
   326ec:	0004      	movs	r4, r0
   326ee:	e6b5      	b.n	3245c <__aeabi_fsub+0x8c>
   326f0:	2700      	movs	r7, #0
   326f2:	2200      	movs	r2, #0
   326f4:	e71c      	b.n	32530 <__aeabi_fsub+0x160>
   326f6:	0033      	movs	r3, r6
   326f8:	e6b0      	b.n	3245c <__aeabi_fsub+0x8c>
   326fa:	2301      	movs	r3, #1
   326fc:	e7c0      	b.n	32680 <__aeabi_fsub+0x2b0>
   326fe:	46c0      	nop			; (mov r8, r8)
   32700:	7dffffff 	.word	0x7dffffff
   32704:	fbffffff 	.word	0xfbffffff

00032708 <__aeabi_f2iz>:
   32708:	0241      	lsls	r1, r0, #9
   3270a:	0043      	lsls	r3, r0, #1
   3270c:	0fc2      	lsrs	r2, r0, #31
   3270e:	0a49      	lsrs	r1, r1, #9
   32710:	0e1b      	lsrs	r3, r3, #24
   32712:	2000      	movs	r0, #0
   32714:	2b7e      	cmp	r3, #126	; 0x7e
   32716:	dd0d      	ble.n	32734 <__aeabi_f2iz+0x2c>
   32718:	2b9d      	cmp	r3, #157	; 0x9d
   3271a:	dc0c      	bgt.n	32736 <__aeabi_f2iz+0x2e>
   3271c:	2080      	movs	r0, #128	; 0x80
   3271e:	0400      	lsls	r0, r0, #16
   32720:	4301      	orrs	r1, r0
   32722:	2b95      	cmp	r3, #149	; 0x95
   32724:	dc0a      	bgt.n	3273c <__aeabi_f2iz+0x34>
   32726:	2096      	movs	r0, #150	; 0x96
   32728:	1ac3      	subs	r3, r0, r3
   3272a:	40d9      	lsrs	r1, r3
   3272c:	4248      	negs	r0, r1
   3272e:	2a00      	cmp	r2, #0
   32730:	d100      	bne.n	32734 <__aeabi_f2iz+0x2c>
   32732:	0008      	movs	r0, r1
   32734:	4770      	bx	lr
   32736:	4b03      	ldr	r3, [pc, #12]	; (32744 <__aeabi_f2iz+0x3c>)
   32738:	18d0      	adds	r0, r2, r3
   3273a:	e7fb      	b.n	32734 <__aeabi_f2iz+0x2c>
   3273c:	3b96      	subs	r3, #150	; 0x96
   3273e:	4099      	lsls	r1, r3
   32740:	e7f4      	b.n	3272c <__aeabi_f2iz+0x24>
   32742:	46c0      	nop			; (mov r8, r8)
   32744:	7fffffff 	.word	0x7fffffff

00032748 <__aeabi_i2f>:
   32748:	b570      	push	{r4, r5, r6, lr}
   3274a:	2800      	cmp	r0, #0
   3274c:	d030      	beq.n	327b0 <__aeabi_i2f+0x68>
   3274e:	17c3      	asrs	r3, r0, #31
   32750:	18c4      	adds	r4, r0, r3
   32752:	405c      	eors	r4, r3
   32754:	0fc5      	lsrs	r5, r0, #31
   32756:	0020      	movs	r0, r4
   32758:	f001 fd68 	bl	3422c <__clzsi2>
   3275c:	239e      	movs	r3, #158	; 0x9e
   3275e:	1a1b      	subs	r3, r3, r0
   32760:	2b96      	cmp	r3, #150	; 0x96
   32762:	dc0d      	bgt.n	32780 <__aeabi_i2f+0x38>
   32764:	2296      	movs	r2, #150	; 0x96
   32766:	1ad2      	subs	r2, r2, r3
   32768:	4094      	lsls	r4, r2
   3276a:	002a      	movs	r2, r5
   3276c:	0264      	lsls	r4, r4, #9
   3276e:	0a64      	lsrs	r4, r4, #9
   32770:	b2db      	uxtb	r3, r3
   32772:	0264      	lsls	r4, r4, #9
   32774:	05db      	lsls	r3, r3, #23
   32776:	0a60      	lsrs	r0, r4, #9
   32778:	07d2      	lsls	r2, r2, #31
   3277a:	4318      	orrs	r0, r3
   3277c:	4310      	orrs	r0, r2
   3277e:	bd70      	pop	{r4, r5, r6, pc}
   32780:	2b99      	cmp	r3, #153	; 0x99
   32782:	dc19      	bgt.n	327b8 <__aeabi_i2f+0x70>
   32784:	2299      	movs	r2, #153	; 0x99
   32786:	1ad2      	subs	r2, r2, r3
   32788:	2a00      	cmp	r2, #0
   3278a:	dd29      	ble.n	327e0 <__aeabi_i2f+0x98>
   3278c:	4094      	lsls	r4, r2
   3278e:	0022      	movs	r2, r4
   32790:	4c14      	ldr	r4, [pc, #80]	; (327e4 <__aeabi_i2f+0x9c>)
   32792:	4014      	ands	r4, r2
   32794:	0751      	lsls	r1, r2, #29
   32796:	d004      	beq.n	327a2 <__aeabi_i2f+0x5a>
   32798:	210f      	movs	r1, #15
   3279a:	400a      	ands	r2, r1
   3279c:	2a04      	cmp	r2, #4
   3279e:	d000      	beq.n	327a2 <__aeabi_i2f+0x5a>
   327a0:	3404      	adds	r4, #4
   327a2:	0162      	lsls	r2, r4, #5
   327a4:	d413      	bmi.n	327ce <__aeabi_i2f+0x86>
   327a6:	01a4      	lsls	r4, r4, #6
   327a8:	0a64      	lsrs	r4, r4, #9
   327aa:	b2db      	uxtb	r3, r3
   327ac:	002a      	movs	r2, r5
   327ae:	e7e0      	b.n	32772 <__aeabi_i2f+0x2a>
   327b0:	2200      	movs	r2, #0
   327b2:	2300      	movs	r3, #0
   327b4:	2400      	movs	r4, #0
   327b6:	e7dc      	b.n	32772 <__aeabi_i2f+0x2a>
   327b8:	2205      	movs	r2, #5
   327ba:	0021      	movs	r1, r4
   327bc:	1a12      	subs	r2, r2, r0
   327be:	40d1      	lsrs	r1, r2
   327c0:	22b9      	movs	r2, #185	; 0xb9
   327c2:	1ad2      	subs	r2, r2, r3
   327c4:	4094      	lsls	r4, r2
   327c6:	1e62      	subs	r2, r4, #1
   327c8:	4194      	sbcs	r4, r2
   327ca:	430c      	orrs	r4, r1
   327cc:	e7da      	b.n	32784 <__aeabi_i2f+0x3c>
   327ce:	4b05      	ldr	r3, [pc, #20]	; (327e4 <__aeabi_i2f+0x9c>)
   327d0:	002a      	movs	r2, r5
   327d2:	401c      	ands	r4, r3
   327d4:	239f      	movs	r3, #159	; 0x9f
   327d6:	01a4      	lsls	r4, r4, #6
   327d8:	1a1b      	subs	r3, r3, r0
   327da:	0a64      	lsrs	r4, r4, #9
   327dc:	b2db      	uxtb	r3, r3
   327de:	e7c8      	b.n	32772 <__aeabi_i2f+0x2a>
   327e0:	0022      	movs	r2, r4
   327e2:	e7d5      	b.n	32790 <__aeabi_i2f+0x48>
   327e4:	fbffffff 	.word	0xfbffffff

000327e8 <__aeabi_dadd>:
   327e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   327ea:	4645      	mov	r5, r8
   327ec:	46de      	mov	lr, fp
   327ee:	4657      	mov	r7, sl
   327f0:	464e      	mov	r6, r9
   327f2:	030c      	lsls	r4, r1, #12
   327f4:	b5e0      	push	{r5, r6, r7, lr}
   327f6:	004e      	lsls	r6, r1, #1
   327f8:	0fc9      	lsrs	r1, r1, #31
   327fa:	4688      	mov	r8, r1
   327fc:	000d      	movs	r5, r1
   327fe:	0a61      	lsrs	r1, r4, #9
   32800:	0f44      	lsrs	r4, r0, #29
   32802:	430c      	orrs	r4, r1
   32804:	00c7      	lsls	r7, r0, #3
   32806:	0319      	lsls	r1, r3, #12
   32808:	0058      	lsls	r0, r3, #1
   3280a:	0fdb      	lsrs	r3, r3, #31
   3280c:	469b      	mov	fp, r3
   3280e:	0a4b      	lsrs	r3, r1, #9
   32810:	0f51      	lsrs	r1, r2, #29
   32812:	430b      	orrs	r3, r1
   32814:	0d76      	lsrs	r6, r6, #21
   32816:	0d40      	lsrs	r0, r0, #21
   32818:	0019      	movs	r1, r3
   3281a:	00d2      	lsls	r2, r2, #3
   3281c:	45d8      	cmp	r8, fp
   3281e:	d100      	bne.n	32822 <__aeabi_dadd+0x3a>
   32820:	e0ae      	b.n	32980 <__aeabi_dadd+0x198>
   32822:	1a35      	subs	r5, r6, r0
   32824:	2d00      	cmp	r5, #0
   32826:	dc00      	bgt.n	3282a <__aeabi_dadd+0x42>
   32828:	e0f6      	b.n	32a18 <__aeabi_dadd+0x230>
   3282a:	2800      	cmp	r0, #0
   3282c:	d10f      	bne.n	3284e <__aeabi_dadd+0x66>
   3282e:	4313      	orrs	r3, r2
   32830:	d100      	bne.n	32834 <__aeabi_dadd+0x4c>
   32832:	e0db      	b.n	329ec <__aeabi_dadd+0x204>
   32834:	1e6b      	subs	r3, r5, #1
   32836:	2b00      	cmp	r3, #0
   32838:	d000      	beq.n	3283c <__aeabi_dadd+0x54>
   3283a:	e137      	b.n	32aac <__aeabi_dadd+0x2c4>
   3283c:	1aba      	subs	r2, r7, r2
   3283e:	4297      	cmp	r7, r2
   32840:	41bf      	sbcs	r7, r7
   32842:	1a64      	subs	r4, r4, r1
   32844:	427f      	negs	r7, r7
   32846:	1be4      	subs	r4, r4, r7
   32848:	2601      	movs	r6, #1
   3284a:	0017      	movs	r7, r2
   3284c:	e024      	b.n	32898 <__aeabi_dadd+0xb0>
   3284e:	4bc6      	ldr	r3, [pc, #792]	; (32b68 <__aeabi_dadd+0x380>)
   32850:	429e      	cmp	r6, r3
   32852:	d04d      	beq.n	328f0 <__aeabi_dadd+0x108>
   32854:	2380      	movs	r3, #128	; 0x80
   32856:	041b      	lsls	r3, r3, #16
   32858:	4319      	orrs	r1, r3
   3285a:	2d38      	cmp	r5, #56	; 0x38
   3285c:	dd00      	ble.n	32860 <__aeabi_dadd+0x78>
   3285e:	e107      	b.n	32a70 <__aeabi_dadd+0x288>
   32860:	2d1f      	cmp	r5, #31
   32862:	dd00      	ble.n	32866 <__aeabi_dadd+0x7e>
   32864:	e138      	b.n	32ad8 <__aeabi_dadd+0x2f0>
   32866:	2020      	movs	r0, #32
   32868:	1b43      	subs	r3, r0, r5
   3286a:	469a      	mov	sl, r3
   3286c:	000b      	movs	r3, r1
   3286e:	4650      	mov	r0, sl
   32870:	4083      	lsls	r3, r0
   32872:	4699      	mov	r9, r3
   32874:	0013      	movs	r3, r2
   32876:	4648      	mov	r0, r9
   32878:	40eb      	lsrs	r3, r5
   3287a:	4318      	orrs	r0, r3
   3287c:	0003      	movs	r3, r0
   3287e:	4650      	mov	r0, sl
   32880:	4082      	lsls	r2, r0
   32882:	1e50      	subs	r0, r2, #1
   32884:	4182      	sbcs	r2, r0
   32886:	40e9      	lsrs	r1, r5
   32888:	431a      	orrs	r2, r3
   3288a:	1aba      	subs	r2, r7, r2
   3288c:	1a61      	subs	r1, r4, r1
   3288e:	4297      	cmp	r7, r2
   32890:	41a4      	sbcs	r4, r4
   32892:	0017      	movs	r7, r2
   32894:	4264      	negs	r4, r4
   32896:	1b0c      	subs	r4, r1, r4
   32898:	0223      	lsls	r3, r4, #8
   3289a:	d562      	bpl.n	32962 <__aeabi_dadd+0x17a>
   3289c:	0264      	lsls	r4, r4, #9
   3289e:	0a65      	lsrs	r5, r4, #9
   328a0:	2d00      	cmp	r5, #0
   328a2:	d100      	bne.n	328a6 <__aeabi_dadd+0xbe>
   328a4:	e0df      	b.n	32a66 <__aeabi_dadd+0x27e>
   328a6:	0028      	movs	r0, r5
   328a8:	f001 fcc0 	bl	3422c <__clzsi2>
   328ac:	0003      	movs	r3, r0
   328ae:	3b08      	subs	r3, #8
   328b0:	2b1f      	cmp	r3, #31
   328b2:	dd00      	ble.n	328b6 <__aeabi_dadd+0xce>
   328b4:	e0d2      	b.n	32a5c <__aeabi_dadd+0x274>
   328b6:	2220      	movs	r2, #32
   328b8:	003c      	movs	r4, r7
   328ba:	1ad2      	subs	r2, r2, r3
   328bc:	409d      	lsls	r5, r3
   328be:	40d4      	lsrs	r4, r2
   328c0:	409f      	lsls	r7, r3
   328c2:	4325      	orrs	r5, r4
   328c4:	429e      	cmp	r6, r3
   328c6:	dd00      	ble.n	328ca <__aeabi_dadd+0xe2>
   328c8:	e0c4      	b.n	32a54 <__aeabi_dadd+0x26c>
   328ca:	1b9e      	subs	r6, r3, r6
   328cc:	1c73      	adds	r3, r6, #1
   328ce:	2b1f      	cmp	r3, #31
   328d0:	dd00      	ble.n	328d4 <__aeabi_dadd+0xec>
   328d2:	e0f1      	b.n	32ab8 <__aeabi_dadd+0x2d0>
   328d4:	2220      	movs	r2, #32
   328d6:	0038      	movs	r0, r7
   328d8:	0029      	movs	r1, r5
   328da:	1ad2      	subs	r2, r2, r3
   328dc:	40d8      	lsrs	r0, r3
   328de:	4091      	lsls	r1, r2
   328e0:	4097      	lsls	r7, r2
   328e2:	002c      	movs	r4, r5
   328e4:	4301      	orrs	r1, r0
   328e6:	1e78      	subs	r0, r7, #1
   328e8:	4187      	sbcs	r7, r0
   328ea:	40dc      	lsrs	r4, r3
   328ec:	2600      	movs	r6, #0
   328ee:	430f      	orrs	r7, r1
   328f0:	077b      	lsls	r3, r7, #29
   328f2:	d009      	beq.n	32908 <__aeabi_dadd+0x120>
   328f4:	230f      	movs	r3, #15
   328f6:	403b      	ands	r3, r7
   328f8:	2b04      	cmp	r3, #4
   328fa:	d005      	beq.n	32908 <__aeabi_dadd+0x120>
   328fc:	1d3b      	adds	r3, r7, #4
   328fe:	42bb      	cmp	r3, r7
   32900:	41bf      	sbcs	r7, r7
   32902:	427f      	negs	r7, r7
   32904:	19e4      	adds	r4, r4, r7
   32906:	001f      	movs	r7, r3
   32908:	0223      	lsls	r3, r4, #8
   3290a:	d52c      	bpl.n	32966 <__aeabi_dadd+0x17e>
   3290c:	4b96      	ldr	r3, [pc, #600]	; (32b68 <__aeabi_dadd+0x380>)
   3290e:	3601      	adds	r6, #1
   32910:	429e      	cmp	r6, r3
   32912:	d100      	bne.n	32916 <__aeabi_dadd+0x12e>
   32914:	e09a      	b.n	32a4c <__aeabi_dadd+0x264>
   32916:	4645      	mov	r5, r8
   32918:	4b94      	ldr	r3, [pc, #592]	; (32b6c <__aeabi_dadd+0x384>)
   3291a:	08ff      	lsrs	r7, r7, #3
   3291c:	401c      	ands	r4, r3
   3291e:	0760      	lsls	r0, r4, #29
   32920:	0576      	lsls	r6, r6, #21
   32922:	0264      	lsls	r4, r4, #9
   32924:	4307      	orrs	r7, r0
   32926:	0b24      	lsrs	r4, r4, #12
   32928:	0d76      	lsrs	r6, r6, #21
   3292a:	2100      	movs	r1, #0
   3292c:	0324      	lsls	r4, r4, #12
   3292e:	0b23      	lsrs	r3, r4, #12
   32930:	0d0c      	lsrs	r4, r1, #20
   32932:	4a8f      	ldr	r2, [pc, #572]	; (32b70 <__aeabi_dadd+0x388>)
   32934:	0524      	lsls	r4, r4, #20
   32936:	431c      	orrs	r4, r3
   32938:	4014      	ands	r4, r2
   3293a:	0533      	lsls	r3, r6, #20
   3293c:	4323      	orrs	r3, r4
   3293e:	005b      	lsls	r3, r3, #1
   32940:	07ed      	lsls	r5, r5, #31
   32942:	085b      	lsrs	r3, r3, #1
   32944:	432b      	orrs	r3, r5
   32946:	0038      	movs	r0, r7
   32948:	0019      	movs	r1, r3
   3294a:	bc3c      	pop	{r2, r3, r4, r5}
   3294c:	4690      	mov	r8, r2
   3294e:	4699      	mov	r9, r3
   32950:	46a2      	mov	sl, r4
   32952:	46ab      	mov	fp, r5
   32954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32956:	4664      	mov	r4, ip
   32958:	4304      	orrs	r4, r0
   3295a:	d100      	bne.n	3295e <__aeabi_dadd+0x176>
   3295c:	e211      	b.n	32d82 <__aeabi_dadd+0x59a>
   3295e:	0004      	movs	r4, r0
   32960:	4667      	mov	r7, ip
   32962:	077b      	lsls	r3, r7, #29
   32964:	d1c6      	bne.n	328f4 <__aeabi_dadd+0x10c>
   32966:	4645      	mov	r5, r8
   32968:	0760      	lsls	r0, r4, #29
   3296a:	08ff      	lsrs	r7, r7, #3
   3296c:	4307      	orrs	r7, r0
   3296e:	08e4      	lsrs	r4, r4, #3
   32970:	4b7d      	ldr	r3, [pc, #500]	; (32b68 <__aeabi_dadd+0x380>)
   32972:	429e      	cmp	r6, r3
   32974:	d030      	beq.n	329d8 <__aeabi_dadd+0x1f0>
   32976:	0324      	lsls	r4, r4, #12
   32978:	0576      	lsls	r6, r6, #21
   3297a:	0b24      	lsrs	r4, r4, #12
   3297c:	0d76      	lsrs	r6, r6, #21
   3297e:	e7d4      	b.n	3292a <__aeabi_dadd+0x142>
   32980:	1a33      	subs	r3, r6, r0
   32982:	469a      	mov	sl, r3
   32984:	2b00      	cmp	r3, #0
   32986:	dd78      	ble.n	32a7a <__aeabi_dadd+0x292>
   32988:	2800      	cmp	r0, #0
   3298a:	d031      	beq.n	329f0 <__aeabi_dadd+0x208>
   3298c:	4876      	ldr	r0, [pc, #472]	; (32b68 <__aeabi_dadd+0x380>)
   3298e:	4286      	cmp	r6, r0
   32990:	d0ae      	beq.n	328f0 <__aeabi_dadd+0x108>
   32992:	2080      	movs	r0, #128	; 0x80
   32994:	0400      	lsls	r0, r0, #16
   32996:	4301      	orrs	r1, r0
   32998:	4653      	mov	r3, sl
   3299a:	2b38      	cmp	r3, #56	; 0x38
   3299c:	dc00      	bgt.n	329a0 <__aeabi_dadd+0x1b8>
   3299e:	e0e9      	b.n	32b74 <__aeabi_dadd+0x38c>
   329a0:	430a      	orrs	r2, r1
   329a2:	1e51      	subs	r1, r2, #1
   329a4:	418a      	sbcs	r2, r1
   329a6:	2100      	movs	r1, #0
   329a8:	19d2      	adds	r2, r2, r7
   329aa:	42ba      	cmp	r2, r7
   329ac:	41bf      	sbcs	r7, r7
   329ae:	1909      	adds	r1, r1, r4
   329b0:	427c      	negs	r4, r7
   329b2:	0017      	movs	r7, r2
   329b4:	190c      	adds	r4, r1, r4
   329b6:	0223      	lsls	r3, r4, #8
   329b8:	d5d3      	bpl.n	32962 <__aeabi_dadd+0x17a>
   329ba:	4b6b      	ldr	r3, [pc, #428]	; (32b68 <__aeabi_dadd+0x380>)
   329bc:	3601      	adds	r6, #1
   329be:	429e      	cmp	r6, r3
   329c0:	d100      	bne.n	329c4 <__aeabi_dadd+0x1dc>
   329c2:	e13a      	b.n	32c3a <__aeabi_dadd+0x452>
   329c4:	2001      	movs	r0, #1
   329c6:	4b69      	ldr	r3, [pc, #420]	; (32b6c <__aeabi_dadd+0x384>)
   329c8:	401c      	ands	r4, r3
   329ca:	087b      	lsrs	r3, r7, #1
   329cc:	4007      	ands	r7, r0
   329ce:	431f      	orrs	r7, r3
   329d0:	07e0      	lsls	r0, r4, #31
   329d2:	4307      	orrs	r7, r0
   329d4:	0864      	lsrs	r4, r4, #1
   329d6:	e78b      	b.n	328f0 <__aeabi_dadd+0x108>
   329d8:	0023      	movs	r3, r4
   329da:	433b      	orrs	r3, r7
   329dc:	d100      	bne.n	329e0 <__aeabi_dadd+0x1f8>
   329de:	e1cb      	b.n	32d78 <__aeabi_dadd+0x590>
   329e0:	2280      	movs	r2, #128	; 0x80
   329e2:	0312      	lsls	r2, r2, #12
   329e4:	4314      	orrs	r4, r2
   329e6:	0324      	lsls	r4, r4, #12
   329e8:	0b24      	lsrs	r4, r4, #12
   329ea:	e79e      	b.n	3292a <__aeabi_dadd+0x142>
   329ec:	002e      	movs	r6, r5
   329ee:	e77f      	b.n	328f0 <__aeabi_dadd+0x108>
   329f0:	0008      	movs	r0, r1
   329f2:	4310      	orrs	r0, r2
   329f4:	d100      	bne.n	329f8 <__aeabi_dadd+0x210>
   329f6:	e0b4      	b.n	32b62 <__aeabi_dadd+0x37a>
   329f8:	1e58      	subs	r0, r3, #1
   329fa:	2800      	cmp	r0, #0
   329fc:	d000      	beq.n	32a00 <__aeabi_dadd+0x218>
   329fe:	e0de      	b.n	32bbe <__aeabi_dadd+0x3d6>
   32a00:	18ba      	adds	r2, r7, r2
   32a02:	42ba      	cmp	r2, r7
   32a04:	419b      	sbcs	r3, r3
   32a06:	1864      	adds	r4, r4, r1
   32a08:	425b      	negs	r3, r3
   32a0a:	18e4      	adds	r4, r4, r3
   32a0c:	0017      	movs	r7, r2
   32a0e:	2601      	movs	r6, #1
   32a10:	0223      	lsls	r3, r4, #8
   32a12:	d5a6      	bpl.n	32962 <__aeabi_dadd+0x17a>
   32a14:	2602      	movs	r6, #2
   32a16:	e7d5      	b.n	329c4 <__aeabi_dadd+0x1dc>
   32a18:	2d00      	cmp	r5, #0
   32a1a:	d16e      	bne.n	32afa <__aeabi_dadd+0x312>
   32a1c:	1c70      	adds	r0, r6, #1
   32a1e:	0540      	lsls	r0, r0, #21
   32a20:	0d40      	lsrs	r0, r0, #21
   32a22:	2801      	cmp	r0, #1
   32a24:	dc00      	bgt.n	32a28 <__aeabi_dadd+0x240>
   32a26:	e0f9      	b.n	32c1c <__aeabi_dadd+0x434>
   32a28:	1ab8      	subs	r0, r7, r2
   32a2a:	4684      	mov	ip, r0
   32a2c:	4287      	cmp	r7, r0
   32a2e:	4180      	sbcs	r0, r0
   32a30:	1ae5      	subs	r5, r4, r3
   32a32:	4240      	negs	r0, r0
   32a34:	1a2d      	subs	r5, r5, r0
   32a36:	0228      	lsls	r0, r5, #8
   32a38:	d400      	bmi.n	32a3c <__aeabi_dadd+0x254>
   32a3a:	e089      	b.n	32b50 <__aeabi_dadd+0x368>
   32a3c:	1bd7      	subs	r7, r2, r7
   32a3e:	42ba      	cmp	r2, r7
   32a40:	4192      	sbcs	r2, r2
   32a42:	1b1c      	subs	r4, r3, r4
   32a44:	4252      	negs	r2, r2
   32a46:	1aa5      	subs	r5, r4, r2
   32a48:	46d8      	mov	r8, fp
   32a4a:	e729      	b.n	328a0 <__aeabi_dadd+0xb8>
   32a4c:	4645      	mov	r5, r8
   32a4e:	2400      	movs	r4, #0
   32a50:	2700      	movs	r7, #0
   32a52:	e76a      	b.n	3292a <__aeabi_dadd+0x142>
   32a54:	4c45      	ldr	r4, [pc, #276]	; (32b6c <__aeabi_dadd+0x384>)
   32a56:	1af6      	subs	r6, r6, r3
   32a58:	402c      	ands	r4, r5
   32a5a:	e749      	b.n	328f0 <__aeabi_dadd+0x108>
   32a5c:	003d      	movs	r5, r7
   32a5e:	3828      	subs	r0, #40	; 0x28
   32a60:	4085      	lsls	r5, r0
   32a62:	2700      	movs	r7, #0
   32a64:	e72e      	b.n	328c4 <__aeabi_dadd+0xdc>
   32a66:	0038      	movs	r0, r7
   32a68:	f001 fbe0 	bl	3422c <__clzsi2>
   32a6c:	3020      	adds	r0, #32
   32a6e:	e71d      	b.n	328ac <__aeabi_dadd+0xc4>
   32a70:	430a      	orrs	r2, r1
   32a72:	1e51      	subs	r1, r2, #1
   32a74:	418a      	sbcs	r2, r1
   32a76:	2100      	movs	r1, #0
   32a78:	e707      	b.n	3288a <__aeabi_dadd+0xa2>
   32a7a:	2b00      	cmp	r3, #0
   32a7c:	d000      	beq.n	32a80 <__aeabi_dadd+0x298>
   32a7e:	e0f3      	b.n	32c68 <__aeabi_dadd+0x480>
   32a80:	1c70      	adds	r0, r6, #1
   32a82:	0543      	lsls	r3, r0, #21
   32a84:	0d5b      	lsrs	r3, r3, #21
   32a86:	2b01      	cmp	r3, #1
   32a88:	dc00      	bgt.n	32a8c <__aeabi_dadd+0x2a4>
   32a8a:	e0ad      	b.n	32be8 <__aeabi_dadd+0x400>
   32a8c:	4b36      	ldr	r3, [pc, #216]	; (32b68 <__aeabi_dadd+0x380>)
   32a8e:	4298      	cmp	r0, r3
   32a90:	d100      	bne.n	32a94 <__aeabi_dadd+0x2ac>
   32a92:	e0d1      	b.n	32c38 <__aeabi_dadd+0x450>
   32a94:	18ba      	adds	r2, r7, r2
   32a96:	42ba      	cmp	r2, r7
   32a98:	41bf      	sbcs	r7, r7
   32a9a:	1864      	adds	r4, r4, r1
   32a9c:	427f      	negs	r7, r7
   32a9e:	19e4      	adds	r4, r4, r7
   32aa0:	07e7      	lsls	r7, r4, #31
   32aa2:	0852      	lsrs	r2, r2, #1
   32aa4:	4317      	orrs	r7, r2
   32aa6:	0864      	lsrs	r4, r4, #1
   32aa8:	0006      	movs	r6, r0
   32aaa:	e721      	b.n	328f0 <__aeabi_dadd+0x108>
   32aac:	482e      	ldr	r0, [pc, #184]	; (32b68 <__aeabi_dadd+0x380>)
   32aae:	4285      	cmp	r5, r0
   32ab0:	d100      	bne.n	32ab4 <__aeabi_dadd+0x2cc>
   32ab2:	e093      	b.n	32bdc <__aeabi_dadd+0x3f4>
   32ab4:	001d      	movs	r5, r3
   32ab6:	e6d0      	b.n	3285a <__aeabi_dadd+0x72>
   32ab8:	0029      	movs	r1, r5
   32aba:	3e1f      	subs	r6, #31
   32abc:	40f1      	lsrs	r1, r6
   32abe:	2b20      	cmp	r3, #32
   32ac0:	d100      	bne.n	32ac4 <__aeabi_dadd+0x2dc>
   32ac2:	e08d      	b.n	32be0 <__aeabi_dadd+0x3f8>
   32ac4:	2240      	movs	r2, #64	; 0x40
   32ac6:	1ad3      	subs	r3, r2, r3
   32ac8:	409d      	lsls	r5, r3
   32aca:	432f      	orrs	r7, r5
   32acc:	1e7d      	subs	r5, r7, #1
   32ace:	41af      	sbcs	r7, r5
   32ad0:	2400      	movs	r4, #0
   32ad2:	430f      	orrs	r7, r1
   32ad4:	2600      	movs	r6, #0
   32ad6:	e744      	b.n	32962 <__aeabi_dadd+0x17a>
   32ad8:	002b      	movs	r3, r5
   32ada:	0008      	movs	r0, r1
   32adc:	3b20      	subs	r3, #32
   32ade:	40d8      	lsrs	r0, r3
   32ae0:	0003      	movs	r3, r0
   32ae2:	2d20      	cmp	r5, #32
   32ae4:	d100      	bne.n	32ae8 <__aeabi_dadd+0x300>
   32ae6:	e07d      	b.n	32be4 <__aeabi_dadd+0x3fc>
   32ae8:	2040      	movs	r0, #64	; 0x40
   32aea:	1b45      	subs	r5, r0, r5
   32aec:	40a9      	lsls	r1, r5
   32aee:	430a      	orrs	r2, r1
   32af0:	1e51      	subs	r1, r2, #1
   32af2:	418a      	sbcs	r2, r1
   32af4:	2100      	movs	r1, #0
   32af6:	431a      	orrs	r2, r3
   32af8:	e6c7      	b.n	3288a <__aeabi_dadd+0xa2>
   32afa:	2e00      	cmp	r6, #0
   32afc:	d050      	beq.n	32ba0 <__aeabi_dadd+0x3b8>
   32afe:	4e1a      	ldr	r6, [pc, #104]	; (32b68 <__aeabi_dadd+0x380>)
   32b00:	42b0      	cmp	r0, r6
   32b02:	d057      	beq.n	32bb4 <__aeabi_dadd+0x3cc>
   32b04:	2680      	movs	r6, #128	; 0x80
   32b06:	426b      	negs	r3, r5
   32b08:	4699      	mov	r9, r3
   32b0a:	0436      	lsls	r6, r6, #16
   32b0c:	4334      	orrs	r4, r6
   32b0e:	464b      	mov	r3, r9
   32b10:	2b38      	cmp	r3, #56	; 0x38
   32b12:	dd00      	ble.n	32b16 <__aeabi_dadd+0x32e>
   32b14:	e0d6      	b.n	32cc4 <__aeabi_dadd+0x4dc>
   32b16:	2b1f      	cmp	r3, #31
   32b18:	dd00      	ble.n	32b1c <__aeabi_dadd+0x334>
   32b1a:	e135      	b.n	32d88 <__aeabi_dadd+0x5a0>
   32b1c:	2620      	movs	r6, #32
   32b1e:	1af5      	subs	r5, r6, r3
   32b20:	0026      	movs	r6, r4
   32b22:	40ae      	lsls	r6, r5
   32b24:	46b2      	mov	sl, r6
   32b26:	003e      	movs	r6, r7
   32b28:	40de      	lsrs	r6, r3
   32b2a:	46ac      	mov	ip, r5
   32b2c:	0035      	movs	r5, r6
   32b2e:	4656      	mov	r6, sl
   32b30:	432e      	orrs	r6, r5
   32b32:	4665      	mov	r5, ip
   32b34:	40af      	lsls	r7, r5
   32b36:	1e7d      	subs	r5, r7, #1
   32b38:	41af      	sbcs	r7, r5
   32b3a:	40dc      	lsrs	r4, r3
   32b3c:	4337      	orrs	r7, r6
   32b3e:	1bd7      	subs	r7, r2, r7
   32b40:	42ba      	cmp	r2, r7
   32b42:	4192      	sbcs	r2, r2
   32b44:	1b0c      	subs	r4, r1, r4
   32b46:	4252      	negs	r2, r2
   32b48:	1aa4      	subs	r4, r4, r2
   32b4a:	0006      	movs	r6, r0
   32b4c:	46d8      	mov	r8, fp
   32b4e:	e6a3      	b.n	32898 <__aeabi_dadd+0xb0>
   32b50:	4664      	mov	r4, ip
   32b52:	4667      	mov	r7, ip
   32b54:	432c      	orrs	r4, r5
   32b56:	d000      	beq.n	32b5a <__aeabi_dadd+0x372>
   32b58:	e6a2      	b.n	328a0 <__aeabi_dadd+0xb8>
   32b5a:	2500      	movs	r5, #0
   32b5c:	2600      	movs	r6, #0
   32b5e:	2700      	movs	r7, #0
   32b60:	e706      	b.n	32970 <__aeabi_dadd+0x188>
   32b62:	001e      	movs	r6, r3
   32b64:	e6c4      	b.n	328f0 <__aeabi_dadd+0x108>
   32b66:	46c0      	nop			; (mov r8, r8)
   32b68:	000007ff 	.word	0x000007ff
   32b6c:	ff7fffff 	.word	0xff7fffff
   32b70:	800fffff 	.word	0x800fffff
   32b74:	2b1f      	cmp	r3, #31
   32b76:	dc63      	bgt.n	32c40 <__aeabi_dadd+0x458>
   32b78:	2020      	movs	r0, #32
   32b7a:	1ac3      	subs	r3, r0, r3
   32b7c:	0008      	movs	r0, r1
   32b7e:	4098      	lsls	r0, r3
   32b80:	469c      	mov	ip, r3
   32b82:	4683      	mov	fp, r0
   32b84:	4653      	mov	r3, sl
   32b86:	0010      	movs	r0, r2
   32b88:	40d8      	lsrs	r0, r3
   32b8a:	0003      	movs	r3, r0
   32b8c:	4658      	mov	r0, fp
   32b8e:	4318      	orrs	r0, r3
   32b90:	4663      	mov	r3, ip
   32b92:	409a      	lsls	r2, r3
   32b94:	1e53      	subs	r3, r2, #1
   32b96:	419a      	sbcs	r2, r3
   32b98:	4653      	mov	r3, sl
   32b9a:	4302      	orrs	r2, r0
   32b9c:	40d9      	lsrs	r1, r3
   32b9e:	e703      	b.n	329a8 <__aeabi_dadd+0x1c0>
   32ba0:	0026      	movs	r6, r4
   32ba2:	433e      	orrs	r6, r7
   32ba4:	d006      	beq.n	32bb4 <__aeabi_dadd+0x3cc>
   32ba6:	43eb      	mvns	r3, r5
   32ba8:	4699      	mov	r9, r3
   32baa:	2b00      	cmp	r3, #0
   32bac:	d0c7      	beq.n	32b3e <__aeabi_dadd+0x356>
   32bae:	4e94      	ldr	r6, [pc, #592]	; (32e00 <__aeabi_dadd+0x618>)
   32bb0:	42b0      	cmp	r0, r6
   32bb2:	d1ac      	bne.n	32b0e <__aeabi_dadd+0x326>
   32bb4:	000c      	movs	r4, r1
   32bb6:	0017      	movs	r7, r2
   32bb8:	0006      	movs	r6, r0
   32bba:	46d8      	mov	r8, fp
   32bbc:	e698      	b.n	328f0 <__aeabi_dadd+0x108>
   32bbe:	4b90      	ldr	r3, [pc, #576]	; (32e00 <__aeabi_dadd+0x618>)
   32bc0:	459a      	cmp	sl, r3
   32bc2:	d00b      	beq.n	32bdc <__aeabi_dadd+0x3f4>
   32bc4:	4682      	mov	sl, r0
   32bc6:	e6e7      	b.n	32998 <__aeabi_dadd+0x1b0>
   32bc8:	2800      	cmp	r0, #0
   32bca:	d000      	beq.n	32bce <__aeabi_dadd+0x3e6>
   32bcc:	e09e      	b.n	32d0c <__aeabi_dadd+0x524>
   32bce:	0018      	movs	r0, r3
   32bd0:	4310      	orrs	r0, r2
   32bd2:	d100      	bne.n	32bd6 <__aeabi_dadd+0x3ee>
   32bd4:	e0e9      	b.n	32daa <__aeabi_dadd+0x5c2>
   32bd6:	001c      	movs	r4, r3
   32bd8:	0017      	movs	r7, r2
   32bda:	46d8      	mov	r8, fp
   32bdc:	4e88      	ldr	r6, [pc, #544]	; (32e00 <__aeabi_dadd+0x618>)
   32bde:	e687      	b.n	328f0 <__aeabi_dadd+0x108>
   32be0:	2500      	movs	r5, #0
   32be2:	e772      	b.n	32aca <__aeabi_dadd+0x2e2>
   32be4:	2100      	movs	r1, #0
   32be6:	e782      	b.n	32aee <__aeabi_dadd+0x306>
   32be8:	0023      	movs	r3, r4
   32bea:	433b      	orrs	r3, r7
   32bec:	2e00      	cmp	r6, #0
   32bee:	d000      	beq.n	32bf2 <__aeabi_dadd+0x40a>
   32bf0:	e0ab      	b.n	32d4a <__aeabi_dadd+0x562>
   32bf2:	2b00      	cmp	r3, #0
   32bf4:	d100      	bne.n	32bf8 <__aeabi_dadd+0x410>
   32bf6:	e0e7      	b.n	32dc8 <__aeabi_dadd+0x5e0>
   32bf8:	000b      	movs	r3, r1
   32bfa:	4313      	orrs	r3, r2
   32bfc:	d100      	bne.n	32c00 <__aeabi_dadd+0x418>
   32bfe:	e677      	b.n	328f0 <__aeabi_dadd+0x108>
   32c00:	18ba      	adds	r2, r7, r2
   32c02:	42ba      	cmp	r2, r7
   32c04:	41bf      	sbcs	r7, r7
   32c06:	1864      	adds	r4, r4, r1
   32c08:	427f      	negs	r7, r7
   32c0a:	19e4      	adds	r4, r4, r7
   32c0c:	0223      	lsls	r3, r4, #8
   32c0e:	d400      	bmi.n	32c12 <__aeabi_dadd+0x42a>
   32c10:	e0f2      	b.n	32df8 <__aeabi_dadd+0x610>
   32c12:	4b7c      	ldr	r3, [pc, #496]	; (32e04 <__aeabi_dadd+0x61c>)
   32c14:	0017      	movs	r7, r2
   32c16:	401c      	ands	r4, r3
   32c18:	0006      	movs	r6, r0
   32c1a:	e669      	b.n	328f0 <__aeabi_dadd+0x108>
   32c1c:	0020      	movs	r0, r4
   32c1e:	4338      	orrs	r0, r7
   32c20:	2e00      	cmp	r6, #0
   32c22:	d1d1      	bne.n	32bc8 <__aeabi_dadd+0x3e0>
   32c24:	2800      	cmp	r0, #0
   32c26:	d15b      	bne.n	32ce0 <__aeabi_dadd+0x4f8>
   32c28:	001c      	movs	r4, r3
   32c2a:	4314      	orrs	r4, r2
   32c2c:	d100      	bne.n	32c30 <__aeabi_dadd+0x448>
   32c2e:	e0a8      	b.n	32d82 <__aeabi_dadd+0x59a>
   32c30:	001c      	movs	r4, r3
   32c32:	0017      	movs	r7, r2
   32c34:	46d8      	mov	r8, fp
   32c36:	e65b      	b.n	328f0 <__aeabi_dadd+0x108>
   32c38:	0006      	movs	r6, r0
   32c3a:	2400      	movs	r4, #0
   32c3c:	2700      	movs	r7, #0
   32c3e:	e697      	b.n	32970 <__aeabi_dadd+0x188>
   32c40:	4650      	mov	r0, sl
   32c42:	000b      	movs	r3, r1
   32c44:	3820      	subs	r0, #32
   32c46:	40c3      	lsrs	r3, r0
   32c48:	4699      	mov	r9, r3
   32c4a:	4653      	mov	r3, sl
   32c4c:	2b20      	cmp	r3, #32
   32c4e:	d100      	bne.n	32c52 <__aeabi_dadd+0x46a>
   32c50:	e095      	b.n	32d7e <__aeabi_dadd+0x596>
   32c52:	2340      	movs	r3, #64	; 0x40
   32c54:	4650      	mov	r0, sl
   32c56:	1a1b      	subs	r3, r3, r0
   32c58:	4099      	lsls	r1, r3
   32c5a:	430a      	orrs	r2, r1
   32c5c:	1e51      	subs	r1, r2, #1
   32c5e:	418a      	sbcs	r2, r1
   32c60:	464b      	mov	r3, r9
   32c62:	2100      	movs	r1, #0
   32c64:	431a      	orrs	r2, r3
   32c66:	e69f      	b.n	329a8 <__aeabi_dadd+0x1c0>
   32c68:	2e00      	cmp	r6, #0
   32c6a:	d130      	bne.n	32cce <__aeabi_dadd+0x4e6>
   32c6c:	0026      	movs	r6, r4
   32c6e:	433e      	orrs	r6, r7
   32c70:	d067      	beq.n	32d42 <__aeabi_dadd+0x55a>
   32c72:	43db      	mvns	r3, r3
   32c74:	469a      	mov	sl, r3
   32c76:	2b00      	cmp	r3, #0
   32c78:	d01c      	beq.n	32cb4 <__aeabi_dadd+0x4cc>
   32c7a:	4e61      	ldr	r6, [pc, #388]	; (32e00 <__aeabi_dadd+0x618>)
   32c7c:	42b0      	cmp	r0, r6
   32c7e:	d060      	beq.n	32d42 <__aeabi_dadd+0x55a>
   32c80:	4653      	mov	r3, sl
   32c82:	2b38      	cmp	r3, #56	; 0x38
   32c84:	dd00      	ble.n	32c88 <__aeabi_dadd+0x4a0>
   32c86:	e096      	b.n	32db6 <__aeabi_dadd+0x5ce>
   32c88:	2b1f      	cmp	r3, #31
   32c8a:	dd00      	ble.n	32c8e <__aeabi_dadd+0x4a6>
   32c8c:	e09f      	b.n	32dce <__aeabi_dadd+0x5e6>
   32c8e:	2620      	movs	r6, #32
   32c90:	1af3      	subs	r3, r6, r3
   32c92:	0026      	movs	r6, r4
   32c94:	409e      	lsls	r6, r3
   32c96:	469c      	mov	ip, r3
   32c98:	46b3      	mov	fp, r6
   32c9a:	4653      	mov	r3, sl
   32c9c:	003e      	movs	r6, r7
   32c9e:	40de      	lsrs	r6, r3
   32ca0:	0033      	movs	r3, r6
   32ca2:	465e      	mov	r6, fp
   32ca4:	431e      	orrs	r6, r3
   32ca6:	4663      	mov	r3, ip
   32ca8:	409f      	lsls	r7, r3
   32caa:	1e7b      	subs	r3, r7, #1
   32cac:	419f      	sbcs	r7, r3
   32cae:	4653      	mov	r3, sl
   32cb0:	40dc      	lsrs	r4, r3
   32cb2:	4337      	orrs	r7, r6
   32cb4:	18bf      	adds	r7, r7, r2
   32cb6:	4297      	cmp	r7, r2
   32cb8:	4192      	sbcs	r2, r2
   32cba:	1864      	adds	r4, r4, r1
   32cbc:	4252      	negs	r2, r2
   32cbe:	18a4      	adds	r4, r4, r2
   32cc0:	0006      	movs	r6, r0
   32cc2:	e678      	b.n	329b6 <__aeabi_dadd+0x1ce>
   32cc4:	4327      	orrs	r7, r4
   32cc6:	1e7c      	subs	r4, r7, #1
   32cc8:	41a7      	sbcs	r7, r4
   32cca:	2400      	movs	r4, #0
   32ccc:	e737      	b.n	32b3e <__aeabi_dadd+0x356>
   32cce:	4e4c      	ldr	r6, [pc, #304]	; (32e00 <__aeabi_dadd+0x618>)
   32cd0:	42b0      	cmp	r0, r6
   32cd2:	d036      	beq.n	32d42 <__aeabi_dadd+0x55a>
   32cd4:	2680      	movs	r6, #128	; 0x80
   32cd6:	425b      	negs	r3, r3
   32cd8:	0436      	lsls	r6, r6, #16
   32cda:	469a      	mov	sl, r3
   32cdc:	4334      	orrs	r4, r6
   32cde:	e7cf      	b.n	32c80 <__aeabi_dadd+0x498>
   32ce0:	0018      	movs	r0, r3
   32ce2:	4310      	orrs	r0, r2
   32ce4:	d100      	bne.n	32ce8 <__aeabi_dadd+0x500>
   32ce6:	e603      	b.n	328f0 <__aeabi_dadd+0x108>
   32ce8:	1ab8      	subs	r0, r7, r2
   32cea:	4684      	mov	ip, r0
   32cec:	4567      	cmp	r7, ip
   32cee:	41ad      	sbcs	r5, r5
   32cf0:	1ae0      	subs	r0, r4, r3
   32cf2:	426d      	negs	r5, r5
   32cf4:	1b40      	subs	r0, r0, r5
   32cf6:	0205      	lsls	r5, r0, #8
   32cf8:	d400      	bmi.n	32cfc <__aeabi_dadd+0x514>
   32cfa:	e62c      	b.n	32956 <__aeabi_dadd+0x16e>
   32cfc:	1bd7      	subs	r7, r2, r7
   32cfe:	42ba      	cmp	r2, r7
   32d00:	4192      	sbcs	r2, r2
   32d02:	1b1c      	subs	r4, r3, r4
   32d04:	4252      	negs	r2, r2
   32d06:	1aa4      	subs	r4, r4, r2
   32d08:	46d8      	mov	r8, fp
   32d0a:	e5f1      	b.n	328f0 <__aeabi_dadd+0x108>
   32d0c:	0018      	movs	r0, r3
   32d0e:	4310      	orrs	r0, r2
   32d10:	d100      	bne.n	32d14 <__aeabi_dadd+0x52c>
   32d12:	e763      	b.n	32bdc <__aeabi_dadd+0x3f4>
   32d14:	08f8      	lsrs	r0, r7, #3
   32d16:	0767      	lsls	r7, r4, #29
   32d18:	4307      	orrs	r7, r0
   32d1a:	2080      	movs	r0, #128	; 0x80
   32d1c:	08e4      	lsrs	r4, r4, #3
   32d1e:	0300      	lsls	r0, r0, #12
   32d20:	4204      	tst	r4, r0
   32d22:	d008      	beq.n	32d36 <__aeabi_dadd+0x54e>
   32d24:	08dd      	lsrs	r5, r3, #3
   32d26:	4205      	tst	r5, r0
   32d28:	d105      	bne.n	32d36 <__aeabi_dadd+0x54e>
   32d2a:	08d2      	lsrs	r2, r2, #3
   32d2c:	0759      	lsls	r1, r3, #29
   32d2e:	4311      	orrs	r1, r2
   32d30:	000f      	movs	r7, r1
   32d32:	002c      	movs	r4, r5
   32d34:	46d8      	mov	r8, fp
   32d36:	0f7b      	lsrs	r3, r7, #29
   32d38:	00e4      	lsls	r4, r4, #3
   32d3a:	431c      	orrs	r4, r3
   32d3c:	00ff      	lsls	r7, r7, #3
   32d3e:	4e30      	ldr	r6, [pc, #192]	; (32e00 <__aeabi_dadd+0x618>)
   32d40:	e5d6      	b.n	328f0 <__aeabi_dadd+0x108>
   32d42:	000c      	movs	r4, r1
   32d44:	0017      	movs	r7, r2
   32d46:	0006      	movs	r6, r0
   32d48:	e5d2      	b.n	328f0 <__aeabi_dadd+0x108>
   32d4a:	2b00      	cmp	r3, #0
   32d4c:	d038      	beq.n	32dc0 <__aeabi_dadd+0x5d8>
   32d4e:	000b      	movs	r3, r1
   32d50:	4313      	orrs	r3, r2
   32d52:	d100      	bne.n	32d56 <__aeabi_dadd+0x56e>
   32d54:	e742      	b.n	32bdc <__aeabi_dadd+0x3f4>
   32d56:	08f8      	lsrs	r0, r7, #3
   32d58:	0767      	lsls	r7, r4, #29
   32d5a:	4307      	orrs	r7, r0
   32d5c:	2080      	movs	r0, #128	; 0x80
   32d5e:	08e4      	lsrs	r4, r4, #3
   32d60:	0300      	lsls	r0, r0, #12
   32d62:	4204      	tst	r4, r0
   32d64:	d0e7      	beq.n	32d36 <__aeabi_dadd+0x54e>
   32d66:	08cb      	lsrs	r3, r1, #3
   32d68:	4203      	tst	r3, r0
   32d6a:	d1e4      	bne.n	32d36 <__aeabi_dadd+0x54e>
   32d6c:	08d2      	lsrs	r2, r2, #3
   32d6e:	0749      	lsls	r1, r1, #29
   32d70:	4311      	orrs	r1, r2
   32d72:	000f      	movs	r7, r1
   32d74:	001c      	movs	r4, r3
   32d76:	e7de      	b.n	32d36 <__aeabi_dadd+0x54e>
   32d78:	2700      	movs	r7, #0
   32d7a:	2400      	movs	r4, #0
   32d7c:	e5d5      	b.n	3292a <__aeabi_dadd+0x142>
   32d7e:	2100      	movs	r1, #0
   32d80:	e76b      	b.n	32c5a <__aeabi_dadd+0x472>
   32d82:	2500      	movs	r5, #0
   32d84:	2700      	movs	r7, #0
   32d86:	e5f3      	b.n	32970 <__aeabi_dadd+0x188>
   32d88:	464e      	mov	r6, r9
   32d8a:	0025      	movs	r5, r4
   32d8c:	3e20      	subs	r6, #32
   32d8e:	40f5      	lsrs	r5, r6
   32d90:	464b      	mov	r3, r9
   32d92:	002e      	movs	r6, r5
   32d94:	2b20      	cmp	r3, #32
   32d96:	d02d      	beq.n	32df4 <__aeabi_dadd+0x60c>
   32d98:	2540      	movs	r5, #64	; 0x40
   32d9a:	1aed      	subs	r5, r5, r3
   32d9c:	40ac      	lsls	r4, r5
   32d9e:	4327      	orrs	r7, r4
   32da0:	1e7c      	subs	r4, r7, #1
   32da2:	41a7      	sbcs	r7, r4
   32da4:	2400      	movs	r4, #0
   32da6:	4337      	orrs	r7, r6
   32da8:	e6c9      	b.n	32b3e <__aeabi_dadd+0x356>
   32daa:	2480      	movs	r4, #128	; 0x80
   32dac:	2500      	movs	r5, #0
   32dae:	0324      	lsls	r4, r4, #12
   32db0:	4e13      	ldr	r6, [pc, #76]	; (32e00 <__aeabi_dadd+0x618>)
   32db2:	2700      	movs	r7, #0
   32db4:	e5dc      	b.n	32970 <__aeabi_dadd+0x188>
   32db6:	4327      	orrs	r7, r4
   32db8:	1e7c      	subs	r4, r7, #1
   32dba:	41a7      	sbcs	r7, r4
   32dbc:	2400      	movs	r4, #0
   32dbe:	e779      	b.n	32cb4 <__aeabi_dadd+0x4cc>
   32dc0:	000c      	movs	r4, r1
   32dc2:	0017      	movs	r7, r2
   32dc4:	4e0e      	ldr	r6, [pc, #56]	; (32e00 <__aeabi_dadd+0x618>)
   32dc6:	e593      	b.n	328f0 <__aeabi_dadd+0x108>
   32dc8:	000c      	movs	r4, r1
   32dca:	0017      	movs	r7, r2
   32dcc:	e590      	b.n	328f0 <__aeabi_dadd+0x108>
   32dce:	4656      	mov	r6, sl
   32dd0:	0023      	movs	r3, r4
   32dd2:	3e20      	subs	r6, #32
   32dd4:	40f3      	lsrs	r3, r6
   32dd6:	4699      	mov	r9, r3
   32dd8:	4653      	mov	r3, sl
   32dda:	2b20      	cmp	r3, #32
   32ddc:	d00e      	beq.n	32dfc <__aeabi_dadd+0x614>
   32dde:	2340      	movs	r3, #64	; 0x40
   32de0:	4656      	mov	r6, sl
   32de2:	1b9b      	subs	r3, r3, r6
   32de4:	409c      	lsls	r4, r3
   32de6:	4327      	orrs	r7, r4
   32de8:	1e7c      	subs	r4, r7, #1
   32dea:	41a7      	sbcs	r7, r4
   32dec:	464b      	mov	r3, r9
   32dee:	2400      	movs	r4, #0
   32df0:	431f      	orrs	r7, r3
   32df2:	e75f      	b.n	32cb4 <__aeabi_dadd+0x4cc>
   32df4:	2400      	movs	r4, #0
   32df6:	e7d2      	b.n	32d9e <__aeabi_dadd+0x5b6>
   32df8:	0017      	movs	r7, r2
   32dfa:	e5b2      	b.n	32962 <__aeabi_dadd+0x17a>
   32dfc:	2400      	movs	r4, #0
   32dfe:	e7f2      	b.n	32de6 <__aeabi_dadd+0x5fe>
   32e00:	000007ff 	.word	0x000007ff
   32e04:	ff7fffff 	.word	0xff7fffff

00032e08 <__aeabi_ddiv>:
   32e08:	b5f0      	push	{r4, r5, r6, r7, lr}
   32e0a:	4657      	mov	r7, sl
   32e0c:	4645      	mov	r5, r8
   32e0e:	46de      	mov	lr, fp
   32e10:	464e      	mov	r6, r9
   32e12:	b5e0      	push	{r5, r6, r7, lr}
   32e14:	004c      	lsls	r4, r1, #1
   32e16:	030e      	lsls	r6, r1, #12
   32e18:	b087      	sub	sp, #28
   32e1a:	4683      	mov	fp, r0
   32e1c:	4692      	mov	sl, r2
   32e1e:	001d      	movs	r5, r3
   32e20:	4680      	mov	r8, r0
   32e22:	0b36      	lsrs	r6, r6, #12
   32e24:	0d64      	lsrs	r4, r4, #21
   32e26:	0fcf      	lsrs	r7, r1, #31
   32e28:	2c00      	cmp	r4, #0
   32e2a:	d04f      	beq.n	32ecc <__aeabi_ddiv+0xc4>
   32e2c:	4b6f      	ldr	r3, [pc, #444]	; (32fec <__aeabi_ddiv+0x1e4>)
   32e2e:	429c      	cmp	r4, r3
   32e30:	d035      	beq.n	32e9e <__aeabi_ddiv+0x96>
   32e32:	2380      	movs	r3, #128	; 0x80
   32e34:	0f42      	lsrs	r2, r0, #29
   32e36:	041b      	lsls	r3, r3, #16
   32e38:	00f6      	lsls	r6, r6, #3
   32e3a:	4313      	orrs	r3, r2
   32e3c:	4333      	orrs	r3, r6
   32e3e:	4699      	mov	r9, r3
   32e40:	00c3      	lsls	r3, r0, #3
   32e42:	4698      	mov	r8, r3
   32e44:	4b6a      	ldr	r3, [pc, #424]	; (32ff0 <__aeabi_ddiv+0x1e8>)
   32e46:	2600      	movs	r6, #0
   32e48:	469c      	mov	ip, r3
   32e4a:	2300      	movs	r3, #0
   32e4c:	4464      	add	r4, ip
   32e4e:	9303      	str	r3, [sp, #12]
   32e50:	032b      	lsls	r3, r5, #12
   32e52:	0b1b      	lsrs	r3, r3, #12
   32e54:	469b      	mov	fp, r3
   32e56:	006b      	lsls	r3, r5, #1
   32e58:	0fed      	lsrs	r5, r5, #31
   32e5a:	4650      	mov	r0, sl
   32e5c:	0d5b      	lsrs	r3, r3, #21
   32e5e:	9501      	str	r5, [sp, #4]
   32e60:	d05e      	beq.n	32f20 <__aeabi_ddiv+0x118>
   32e62:	4a62      	ldr	r2, [pc, #392]	; (32fec <__aeabi_ddiv+0x1e4>)
   32e64:	4293      	cmp	r3, r2
   32e66:	d053      	beq.n	32f10 <__aeabi_ddiv+0x108>
   32e68:	465a      	mov	r2, fp
   32e6a:	00d1      	lsls	r1, r2, #3
   32e6c:	2280      	movs	r2, #128	; 0x80
   32e6e:	0f40      	lsrs	r0, r0, #29
   32e70:	0412      	lsls	r2, r2, #16
   32e72:	4302      	orrs	r2, r0
   32e74:	430a      	orrs	r2, r1
   32e76:	4693      	mov	fp, r2
   32e78:	4652      	mov	r2, sl
   32e7a:	00d1      	lsls	r1, r2, #3
   32e7c:	4a5c      	ldr	r2, [pc, #368]	; (32ff0 <__aeabi_ddiv+0x1e8>)
   32e7e:	4694      	mov	ip, r2
   32e80:	2200      	movs	r2, #0
   32e82:	4463      	add	r3, ip
   32e84:	0038      	movs	r0, r7
   32e86:	4068      	eors	r0, r5
   32e88:	4684      	mov	ip, r0
   32e8a:	9002      	str	r0, [sp, #8]
   32e8c:	1ae4      	subs	r4, r4, r3
   32e8e:	4316      	orrs	r6, r2
   32e90:	2e0f      	cmp	r6, #15
   32e92:	d900      	bls.n	32e96 <__aeabi_ddiv+0x8e>
   32e94:	e0b4      	b.n	33000 <__aeabi_ddiv+0x1f8>
   32e96:	4b57      	ldr	r3, [pc, #348]	; (32ff4 <__aeabi_ddiv+0x1ec>)
   32e98:	00b6      	lsls	r6, r6, #2
   32e9a:	599b      	ldr	r3, [r3, r6]
   32e9c:	469f      	mov	pc, r3
   32e9e:	0003      	movs	r3, r0
   32ea0:	4333      	orrs	r3, r6
   32ea2:	4699      	mov	r9, r3
   32ea4:	d16c      	bne.n	32f80 <__aeabi_ddiv+0x178>
   32ea6:	2300      	movs	r3, #0
   32ea8:	4698      	mov	r8, r3
   32eaa:	3302      	adds	r3, #2
   32eac:	2608      	movs	r6, #8
   32eae:	9303      	str	r3, [sp, #12]
   32eb0:	e7ce      	b.n	32e50 <__aeabi_ddiv+0x48>
   32eb2:	46cb      	mov	fp, r9
   32eb4:	4641      	mov	r1, r8
   32eb6:	9a03      	ldr	r2, [sp, #12]
   32eb8:	9701      	str	r7, [sp, #4]
   32eba:	2a02      	cmp	r2, #2
   32ebc:	d165      	bne.n	32f8a <__aeabi_ddiv+0x182>
   32ebe:	9b01      	ldr	r3, [sp, #4]
   32ec0:	4c4a      	ldr	r4, [pc, #296]	; (32fec <__aeabi_ddiv+0x1e4>)
   32ec2:	469c      	mov	ip, r3
   32ec4:	2300      	movs	r3, #0
   32ec6:	2200      	movs	r2, #0
   32ec8:	4698      	mov	r8, r3
   32eca:	e06b      	b.n	32fa4 <__aeabi_ddiv+0x19c>
   32ecc:	0003      	movs	r3, r0
   32ece:	4333      	orrs	r3, r6
   32ed0:	4699      	mov	r9, r3
   32ed2:	d04e      	beq.n	32f72 <__aeabi_ddiv+0x16a>
   32ed4:	2e00      	cmp	r6, #0
   32ed6:	d100      	bne.n	32eda <__aeabi_ddiv+0xd2>
   32ed8:	e1bc      	b.n	33254 <__aeabi_ddiv+0x44c>
   32eda:	0030      	movs	r0, r6
   32edc:	f001 f9a6 	bl	3422c <__clzsi2>
   32ee0:	0003      	movs	r3, r0
   32ee2:	3b0b      	subs	r3, #11
   32ee4:	2b1c      	cmp	r3, #28
   32ee6:	dd00      	ble.n	32eea <__aeabi_ddiv+0xe2>
   32ee8:	e1ac      	b.n	33244 <__aeabi_ddiv+0x43c>
   32eea:	221d      	movs	r2, #29
   32eec:	1ad3      	subs	r3, r2, r3
   32eee:	465a      	mov	r2, fp
   32ef0:	0001      	movs	r1, r0
   32ef2:	40da      	lsrs	r2, r3
   32ef4:	3908      	subs	r1, #8
   32ef6:	408e      	lsls	r6, r1
   32ef8:	0013      	movs	r3, r2
   32efa:	4333      	orrs	r3, r6
   32efc:	4699      	mov	r9, r3
   32efe:	465b      	mov	r3, fp
   32f00:	408b      	lsls	r3, r1
   32f02:	4698      	mov	r8, r3
   32f04:	2300      	movs	r3, #0
   32f06:	4c3c      	ldr	r4, [pc, #240]	; (32ff8 <__aeabi_ddiv+0x1f0>)
   32f08:	2600      	movs	r6, #0
   32f0a:	1a24      	subs	r4, r4, r0
   32f0c:	9303      	str	r3, [sp, #12]
   32f0e:	e79f      	b.n	32e50 <__aeabi_ddiv+0x48>
   32f10:	4651      	mov	r1, sl
   32f12:	465a      	mov	r2, fp
   32f14:	4311      	orrs	r1, r2
   32f16:	d129      	bne.n	32f6c <__aeabi_ddiv+0x164>
   32f18:	2200      	movs	r2, #0
   32f1a:	4693      	mov	fp, r2
   32f1c:	3202      	adds	r2, #2
   32f1e:	e7b1      	b.n	32e84 <__aeabi_ddiv+0x7c>
   32f20:	4659      	mov	r1, fp
   32f22:	4301      	orrs	r1, r0
   32f24:	d01e      	beq.n	32f64 <__aeabi_ddiv+0x15c>
   32f26:	465b      	mov	r3, fp
   32f28:	2b00      	cmp	r3, #0
   32f2a:	d100      	bne.n	32f2e <__aeabi_ddiv+0x126>
   32f2c:	e19e      	b.n	3326c <__aeabi_ddiv+0x464>
   32f2e:	4658      	mov	r0, fp
   32f30:	f001 f97c 	bl	3422c <__clzsi2>
   32f34:	0003      	movs	r3, r0
   32f36:	3b0b      	subs	r3, #11
   32f38:	2b1c      	cmp	r3, #28
   32f3a:	dd00      	ble.n	32f3e <__aeabi_ddiv+0x136>
   32f3c:	e18f      	b.n	3325e <__aeabi_ddiv+0x456>
   32f3e:	0002      	movs	r2, r0
   32f40:	4659      	mov	r1, fp
   32f42:	3a08      	subs	r2, #8
   32f44:	4091      	lsls	r1, r2
   32f46:	468b      	mov	fp, r1
   32f48:	211d      	movs	r1, #29
   32f4a:	1acb      	subs	r3, r1, r3
   32f4c:	4651      	mov	r1, sl
   32f4e:	40d9      	lsrs	r1, r3
   32f50:	000b      	movs	r3, r1
   32f52:	4659      	mov	r1, fp
   32f54:	430b      	orrs	r3, r1
   32f56:	4651      	mov	r1, sl
   32f58:	469b      	mov	fp, r3
   32f5a:	4091      	lsls	r1, r2
   32f5c:	4b26      	ldr	r3, [pc, #152]	; (32ff8 <__aeabi_ddiv+0x1f0>)
   32f5e:	2200      	movs	r2, #0
   32f60:	1a1b      	subs	r3, r3, r0
   32f62:	e78f      	b.n	32e84 <__aeabi_ddiv+0x7c>
   32f64:	2300      	movs	r3, #0
   32f66:	2201      	movs	r2, #1
   32f68:	469b      	mov	fp, r3
   32f6a:	e78b      	b.n	32e84 <__aeabi_ddiv+0x7c>
   32f6c:	4651      	mov	r1, sl
   32f6e:	2203      	movs	r2, #3
   32f70:	e788      	b.n	32e84 <__aeabi_ddiv+0x7c>
   32f72:	2300      	movs	r3, #0
   32f74:	4698      	mov	r8, r3
   32f76:	3301      	adds	r3, #1
   32f78:	2604      	movs	r6, #4
   32f7a:	2400      	movs	r4, #0
   32f7c:	9303      	str	r3, [sp, #12]
   32f7e:	e767      	b.n	32e50 <__aeabi_ddiv+0x48>
   32f80:	2303      	movs	r3, #3
   32f82:	46b1      	mov	r9, r6
   32f84:	9303      	str	r3, [sp, #12]
   32f86:	260c      	movs	r6, #12
   32f88:	e762      	b.n	32e50 <__aeabi_ddiv+0x48>
   32f8a:	2a03      	cmp	r2, #3
   32f8c:	d100      	bne.n	32f90 <__aeabi_ddiv+0x188>
   32f8e:	e25c      	b.n	3344a <__aeabi_ddiv+0x642>
   32f90:	9b01      	ldr	r3, [sp, #4]
   32f92:	2a01      	cmp	r2, #1
   32f94:	d000      	beq.n	32f98 <__aeabi_ddiv+0x190>
   32f96:	e1e4      	b.n	33362 <__aeabi_ddiv+0x55a>
   32f98:	4013      	ands	r3, r2
   32f9a:	469c      	mov	ip, r3
   32f9c:	2300      	movs	r3, #0
   32f9e:	2400      	movs	r4, #0
   32fa0:	2200      	movs	r2, #0
   32fa2:	4698      	mov	r8, r3
   32fa4:	2100      	movs	r1, #0
   32fa6:	0312      	lsls	r2, r2, #12
   32fa8:	0b13      	lsrs	r3, r2, #12
   32faa:	0d0a      	lsrs	r2, r1, #20
   32fac:	0512      	lsls	r2, r2, #20
   32fae:	431a      	orrs	r2, r3
   32fb0:	0523      	lsls	r3, r4, #20
   32fb2:	4c12      	ldr	r4, [pc, #72]	; (32ffc <__aeabi_ddiv+0x1f4>)
   32fb4:	4640      	mov	r0, r8
   32fb6:	4022      	ands	r2, r4
   32fb8:	4313      	orrs	r3, r2
   32fba:	4662      	mov	r2, ip
   32fbc:	005b      	lsls	r3, r3, #1
   32fbe:	07d2      	lsls	r2, r2, #31
   32fc0:	085b      	lsrs	r3, r3, #1
   32fc2:	4313      	orrs	r3, r2
   32fc4:	0019      	movs	r1, r3
   32fc6:	b007      	add	sp, #28
   32fc8:	bc3c      	pop	{r2, r3, r4, r5}
   32fca:	4690      	mov	r8, r2
   32fcc:	4699      	mov	r9, r3
   32fce:	46a2      	mov	sl, r4
   32fd0:	46ab      	mov	fp, r5
   32fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32fd4:	2300      	movs	r3, #0
   32fd6:	2280      	movs	r2, #128	; 0x80
   32fd8:	469c      	mov	ip, r3
   32fda:	0312      	lsls	r2, r2, #12
   32fdc:	4698      	mov	r8, r3
   32fde:	4c03      	ldr	r4, [pc, #12]	; (32fec <__aeabi_ddiv+0x1e4>)
   32fe0:	e7e0      	b.n	32fa4 <__aeabi_ddiv+0x19c>
   32fe2:	2300      	movs	r3, #0
   32fe4:	4c01      	ldr	r4, [pc, #4]	; (32fec <__aeabi_ddiv+0x1e4>)
   32fe6:	2200      	movs	r2, #0
   32fe8:	4698      	mov	r8, r3
   32fea:	e7db      	b.n	32fa4 <__aeabi_ddiv+0x19c>
   32fec:	000007ff 	.word	0x000007ff
   32ff0:	fffffc01 	.word	0xfffffc01
   32ff4:	0003968c 	.word	0x0003968c
   32ff8:	fffffc0d 	.word	0xfffffc0d
   32ffc:	800fffff 	.word	0x800fffff
   33000:	45d9      	cmp	r9, fp
   33002:	d900      	bls.n	33006 <__aeabi_ddiv+0x1fe>
   33004:	e139      	b.n	3327a <__aeabi_ddiv+0x472>
   33006:	d100      	bne.n	3300a <__aeabi_ddiv+0x202>
   33008:	e134      	b.n	33274 <__aeabi_ddiv+0x46c>
   3300a:	2300      	movs	r3, #0
   3300c:	4646      	mov	r6, r8
   3300e:	464d      	mov	r5, r9
   33010:	469a      	mov	sl, r3
   33012:	3c01      	subs	r4, #1
   33014:	465b      	mov	r3, fp
   33016:	0e0a      	lsrs	r2, r1, #24
   33018:	021b      	lsls	r3, r3, #8
   3301a:	431a      	orrs	r2, r3
   3301c:	020b      	lsls	r3, r1, #8
   3301e:	0c17      	lsrs	r7, r2, #16
   33020:	9303      	str	r3, [sp, #12]
   33022:	0413      	lsls	r3, r2, #16
   33024:	0c1b      	lsrs	r3, r3, #16
   33026:	0039      	movs	r1, r7
   33028:	0028      	movs	r0, r5
   3302a:	4690      	mov	r8, r2
   3302c:	9301      	str	r3, [sp, #4]
   3302e:	f7fe ff35 	bl	31e9c <__udivsi3>
   33032:	0002      	movs	r2, r0
   33034:	9b01      	ldr	r3, [sp, #4]
   33036:	4683      	mov	fp, r0
   33038:	435a      	muls	r2, r3
   3303a:	0028      	movs	r0, r5
   3303c:	0039      	movs	r1, r7
   3303e:	4691      	mov	r9, r2
   33040:	f7fe ffb2 	bl	31fa8 <__aeabi_uidivmod>
   33044:	0c35      	lsrs	r5, r6, #16
   33046:	0409      	lsls	r1, r1, #16
   33048:	430d      	orrs	r5, r1
   3304a:	45a9      	cmp	r9, r5
   3304c:	d90d      	bls.n	3306a <__aeabi_ddiv+0x262>
   3304e:	465b      	mov	r3, fp
   33050:	4445      	add	r5, r8
   33052:	3b01      	subs	r3, #1
   33054:	45a8      	cmp	r8, r5
   33056:	d900      	bls.n	3305a <__aeabi_ddiv+0x252>
   33058:	e13a      	b.n	332d0 <__aeabi_ddiv+0x4c8>
   3305a:	45a9      	cmp	r9, r5
   3305c:	d800      	bhi.n	33060 <__aeabi_ddiv+0x258>
   3305e:	e137      	b.n	332d0 <__aeabi_ddiv+0x4c8>
   33060:	2302      	movs	r3, #2
   33062:	425b      	negs	r3, r3
   33064:	469c      	mov	ip, r3
   33066:	4445      	add	r5, r8
   33068:	44e3      	add	fp, ip
   3306a:	464b      	mov	r3, r9
   3306c:	1aeb      	subs	r3, r5, r3
   3306e:	0039      	movs	r1, r7
   33070:	0018      	movs	r0, r3
   33072:	9304      	str	r3, [sp, #16]
   33074:	f7fe ff12 	bl	31e9c <__udivsi3>
   33078:	9b01      	ldr	r3, [sp, #4]
   3307a:	0005      	movs	r5, r0
   3307c:	4343      	muls	r3, r0
   3307e:	0039      	movs	r1, r7
   33080:	9804      	ldr	r0, [sp, #16]
   33082:	4699      	mov	r9, r3
   33084:	f7fe ff90 	bl	31fa8 <__aeabi_uidivmod>
   33088:	0433      	lsls	r3, r6, #16
   3308a:	0409      	lsls	r1, r1, #16
   3308c:	0c1b      	lsrs	r3, r3, #16
   3308e:	430b      	orrs	r3, r1
   33090:	4599      	cmp	r9, r3
   33092:	d909      	bls.n	330a8 <__aeabi_ddiv+0x2a0>
   33094:	4443      	add	r3, r8
   33096:	1e6a      	subs	r2, r5, #1
   33098:	4598      	cmp	r8, r3
   3309a:	d900      	bls.n	3309e <__aeabi_ddiv+0x296>
   3309c:	e11a      	b.n	332d4 <__aeabi_ddiv+0x4cc>
   3309e:	4599      	cmp	r9, r3
   330a0:	d800      	bhi.n	330a4 <__aeabi_ddiv+0x29c>
   330a2:	e117      	b.n	332d4 <__aeabi_ddiv+0x4cc>
   330a4:	3d02      	subs	r5, #2
   330a6:	4443      	add	r3, r8
   330a8:	464a      	mov	r2, r9
   330aa:	1a9b      	subs	r3, r3, r2
   330ac:	465a      	mov	r2, fp
   330ae:	0412      	lsls	r2, r2, #16
   330b0:	432a      	orrs	r2, r5
   330b2:	9903      	ldr	r1, [sp, #12]
   330b4:	4693      	mov	fp, r2
   330b6:	0c10      	lsrs	r0, r2, #16
   330b8:	0c0a      	lsrs	r2, r1, #16
   330ba:	4691      	mov	r9, r2
   330bc:	0409      	lsls	r1, r1, #16
   330be:	465a      	mov	r2, fp
   330c0:	0c09      	lsrs	r1, r1, #16
   330c2:	464e      	mov	r6, r9
   330c4:	000d      	movs	r5, r1
   330c6:	0412      	lsls	r2, r2, #16
   330c8:	0c12      	lsrs	r2, r2, #16
   330ca:	4345      	muls	r5, r0
   330cc:	9105      	str	r1, [sp, #20]
   330ce:	4351      	muls	r1, r2
   330d0:	4372      	muls	r2, r6
   330d2:	4370      	muls	r0, r6
   330d4:	1952      	adds	r2, r2, r5
   330d6:	0c0e      	lsrs	r6, r1, #16
   330d8:	18b2      	adds	r2, r6, r2
   330da:	4295      	cmp	r5, r2
   330dc:	d903      	bls.n	330e6 <__aeabi_ddiv+0x2de>
   330de:	2580      	movs	r5, #128	; 0x80
   330e0:	026d      	lsls	r5, r5, #9
   330e2:	46ac      	mov	ip, r5
   330e4:	4460      	add	r0, ip
   330e6:	0c15      	lsrs	r5, r2, #16
   330e8:	0409      	lsls	r1, r1, #16
   330ea:	0412      	lsls	r2, r2, #16
   330ec:	0c09      	lsrs	r1, r1, #16
   330ee:	1828      	adds	r0, r5, r0
   330f0:	1852      	adds	r2, r2, r1
   330f2:	4283      	cmp	r3, r0
   330f4:	d200      	bcs.n	330f8 <__aeabi_ddiv+0x2f0>
   330f6:	e0ce      	b.n	33296 <__aeabi_ddiv+0x48e>
   330f8:	d100      	bne.n	330fc <__aeabi_ddiv+0x2f4>
   330fa:	e0c8      	b.n	3328e <__aeabi_ddiv+0x486>
   330fc:	1a1d      	subs	r5, r3, r0
   330fe:	4653      	mov	r3, sl
   33100:	1a9e      	subs	r6, r3, r2
   33102:	45b2      	cmp	sl, r6
   33104:	4192      	sbcs	r2, r2
   33106:	4252      	negs	r2, r2
   33108:	1aab      	subs	r3, r5, r2
   3310a:	469a      	mov	sl, r3
   3310c:	4598      	cmp	r8, r3
   3310e:	d100      	bne.n	33112 <__aeabi_ddiv+0x30a>
   33110:	e117      	b.n	33342 <__aeabi_ddiv+0x53a>
   33112:	0039      	movs	r1, r7
   33114:	0018      	movs	r0, r3
   33116:	f7fe fec1 	bl	31e9c <__udivsi3>
   3311a:	9b01      	ldr	r3, [sp, #4]
   3311c:	0005      	movs	r5, r0
   3311e:	4343      	muls	r3, r0
   33120:	0039      	movs	r1, r7
   33122:	4650      	mov	r0, sl
   33124:	9304      	str	r3, [sp, #16]
   33126:	f7fe ff3f 	bl	31fa8 <__aeabi_uidivmod>
   3312a:	9804      	ldr	r0, [sp, #16]
   3312c:	040b      	lsls	r3, r1, #16
   3312e:	0c31      	lsrs	r1, r6, #16
   33130:	4319      	orrs	r1, r3
   33132:	4288      	cmp	r0, r1
   33134:	d909      	bls.n	3314a <__aeabi_ddiv+0x342>
   33136:	4441      	add	r1, r8
   33138:	1e6b      	subs	r3, r5, #1
   3313a:	4588      	cmp	r8, r1
   3313c:	d900      	bls.n	33140 <__aeabi_ddiv+0x338>
   3313e:	e107      	b.n	33350 <__aeabi_ddiv+0x548>
   33140:	4288      	cmp	r0, r1
   33142:	d800      	bhi.n	33146 <__aeabi_ddiv+0x33e>
   33144:	e104      	b.n	33350 <__aeabi_ddiv+0x548>
   33146:	3d02      	subs	r5, #2
   33148:	4441      	add	r1, r8
   3314a:	9b04      	ldr	r3, [sp, #16]
   3314c:	1acb      	subs	r3, r1, r3
   3314e:	0018      	movs	r0, r3
   33150:	0039      	movs	r1, r7
   33152:	9304      	str	r3, [sp, #16]
   33154:	f7fe fea2 	bl	31e9c <__udivsi3>
   33158:	9b01      	ldr	r3, [sp, #4]
   3315a:	4682      	mov	sl, r0
   3315c:	4343      	muls	r3, r0
   3315e:	0039      	movs	r1, r7
   33160:	9804      	ldr	r0, [sp, #16]
   33162:	9301      	str	r3, [sp, #4]
   33164:	f7fe ff20 	bl	31fa8 <__aeabi_uidivmod>
   33168:	9801      	ldr	r0, [sp, #4]
   3316a:	040b      	lsls	r3, r1, #16
   3316c:	0431      	lsls	r1, r6, #16
   3316e:	0c09      	lsrs	r1, r1, #16
   33170:	4319      	orrs	r1, r3
   33172:	4288      	cmp	r0, r1
   33174:	d90d      	bls.n	33192 <__aeabi_ddiv+0x38a>
   33176:	4653      	mov	r3, sl
   33178:	4441      	add	r1, r8
   3317a:	3b01      	subs	r3, #1
   3317c:	4588      	cmp	r8, r1
   3317e:	d900      	bls.n	33182 <__aeabi_ddiv+0x37a>
   33180:	e0e8      	b.n	33354 <__aeabi_ddiv+0x54c>
   33182:	4288      	cmp	r0, r1
   33184:	d800      	bhi.n	33188 <__aeabi_ddiv+0x380>
   33186:	e0e5      	b.n	33354 <__aeabi_ddiv+0x54c>
   33188:	2302      	movs	r3, #2
   3318a:	425b      	negs	r3, r3
   3318c:	469c      	mov	ip, r3
   3318e:	4441      	add	r1, r8
   33190:	44e2      	add	sl, ip
   33192:	9b01      	ldr	r3, [sp, #4]
   33194:	042d      	lsls	r5, r5, #16
   33196:	1ace      	subs	r6, r1, r3
   33198:	4651      	mov	r1, sl
   3319a:	4329      	orrs	r1, r5
   3319c:	9d05      	ldr	r5, [sp, #20]
   3319e:	464f      	mov	r7, r9
   331a0:	002a      	movs	r2, r5
   331a2:	040b      	lsls	r3, r1, #16
   331a4:	0c08      	lsrs	r0, r1, #16
   331a6:	0c1b      	lsrs	r3, r3, #16
   331a8:	435a      	muls	r2, r3
   331aa:	4345      	muls	r5, r0
   331ac:	437b      	muls	r3, r7
   331ae:	4378      	muls	r0, r7
   331b0:	195b      	adds	r3, r3, r5
   331b2:	0c17      	lsrs	r7, r2, #16
   331b4:	18fb      	adds	r3, r7, r3
   331b6:	429d      	cmp	r5, r3
   331b8:	d903      	bls.n	331c2 <__aeabi_ddiv+0x3ba>
   331ba:	2580      	movs	r5, #128	; 0x80
   331bc:	026d      	lsls	r5, r5, #9
   331be:	46ac      	mov	ip, r5
   331c0:	4460      	add	r0, ip
   331c2:	0c1d      	lsrs	r5, r3, #16
   331c4:	0412      	lsls	r2, r2, #16
   331c6:	041b      	lsls	r3, r3, #16
   331c8:	0c12      	lsrs	r2, r2, #16
   331ca:	1828      	adds	r0, r5, r0
   331cc:	189b      	adds	r3, r3, r2
   331ce:	4286      	cmp	r6, r0
   331d0:	d200      	bcs.n	331d4 <__aeabi_ddiv+0x3cc>
   331d2:	e093      	b.n	332fc <__aeabi_ddiv+0x4f4>
   331d4:	d100      	bne.n	331d8 <__aeabi_ddiv+0x3d0>
   331d6:	e08e      	b.n	332f6 <__aeabi_ddiv+0x4ee>
   331d8:	2301      	movs	r3, #1
   331da:	4319      	orrs	r1, r3
   331dc:	4ba0      	ldr	r3, [pc, #640]	; (33460 <__aeabi_ddiv+0x658>)
   331de:	18e3      	adds	r3, r4, r3
   331e0:	2b00      	cmp	r3, #0
   331e2:	dc00      	bgt.n	331e6 <__aeabi_ddiv+0x3de>
   331e4:	e099      	b.n	3331a <__aeabi_ddiv+0x512>
   331e6:	074a      	lsls	r2, r1, #29
   331e8:	d000      	beq.n	331ec <__aeabi_ddiv+0x3e4>
   331ea:	e09e      	b.n	3332a <__aeabi_ddiv+0x522>
   331ec:	465a      	mov	r2, fp
   331ee:	01d2      	lsls	r2, r2, #7
   331f0:	d506      	bpl.n	33200 <__aeabi_ddiv+0x3f8>
   331f2:	465a      	mov	r2, fp
   331f4:	4b9b      	ldr	r3, [pc, #620]	; (33464 <__aeabi_ddiv+0x65c>)
   331f6:	401a      	ands	r2, r3
   331f8:	2380      	movs	r3, #128	; 0x80
   331fa:	4693      	mov	fp, r2
   331fc:	00db      	lsls	r3, r3, #3
   331fe:	18e3      	adds	r3, r4, r3
   33200:	4a99      	ldr	r2, [pc, #612]	; (33468 <__aeabi_ddiv+0x660>)
   33202:	4293      	cmp	r3, r2
   33204:	dd68      	ble.n	332d8 <__aeabi_ddiv+0x4d0>
   33206:	2301      	movs	r3, #1
   33208:	9a02      	ldr	r2, [sp, #8]
   3320a:	4c98      	ldr	r4, [pc, #608]	; (3346c <__aeabi_ddiv+0x664>)
   3320c:	401a      	ands	r2, r3
   3320e:	2300      	movs	r3, #0
   33210:	4694      	mov	ip, r2
   33212:	4698      	mov	r8, r3
   33214:	2200      	movs	r2, #0
   33216:	e6c5      	b.n	32fa4 <__aeabi_ddiv+0x19c>
   33218:	2280      	movs	r2, #128	; 0x80
   3321a:	464b      	mov	r3, r9
   3321c:	0312      	lsls	r2, r2, #12
   3321e:	4213      	tst	r3, r2
   33220:	d00a      	beq.n	33238 <__aeabi_ddiv+0x430>
   33222:	465b      	mov	r3, fp
   33224:	4213      	tst	r3, r2
   33226:	d106      	bne.n	33236 <__aeabi_ddiv+0x42e>
   33228:	431a      	orrs	r2, r3
   3322a:	0312      	lsls	r2, r2, #12
   3322c:	0b12      	lsrs	r2, r2, #12
   3322e:	46ac      	mov	ip, r5
   33230:	4688      	mov	r8, r1
   33232:	4c8e      	ldr	r4, [pc, #568]	; (3346c <__aeabi_ddiv+0x664>)
   33234:	e6b6      	b.n	32fa4 <__aeabi_ddiv+0x19c>
   33236:	464b      	mov	r3, r9
   33238:	431a      	orrs	r2, r3
   3323a:	0312      	lsls	r2, r2, #12
   3323c:	0b12      	lsrs	r2, r2, #12
   3323e:	46bc      	mov	ip, r7
   33240:	4c8a      	ldr	r4, [pc, #552]	; (3346c <__aeabi_ddiv+0x664>)
   33242:	e6af      	b.n	32fa4 <__aeabi_ddiv+0x19c>
   33244:	0003      	movs	r3, r0
   33246:	465a      	mov	r2, fp
   33248:	3b28      	subs	r3, #40	; 0x28
   3324a:	409a      	lsls	r2, r3
   3324c:	2300      	movs	r3, #0
   3324e:	4691      	mov	r9, r2
   33250:	4698      	mov	r8, r3
   33252:	e657      	b.n	32f04 <__aeabi_ddiv+0xfc>
   33254:	4658      	mov	r0, fp
   33256:	f000 ffe9 	bl	3422c <__clzsi2>
   3325a:	3020      	adds	r0, #32
   3325c:	e640      	b.n	32ee0 <__aeabi_ddiv+0xd8>
   3325e:	0003      	movs	r3, r0
   33260:	4652      	mov	r2, sl
   33262:	3b28      	subs	r3, #40	; 0x28
   33264:	409a      	lsls	r2, r3
   33266:	2100      	movs	r1, #0
   33268:	4693      	mov	fp, r2
   3326a:	e677      	b.n	32f5c <__aeabi_ddiv+0x154>
   3326c:	f000 ffde 	bl	3422c <__clzsi2>
   33270:	3020      	adds	r0, #32
   33272:	e65f      	b.n	32f34 <__aeabi_ddiv+0x12c>
   33274:	4588      	cmp	r8, r1
   33276:	d200      	bcs.n	3327a <__aeabi_ddiv+0x472>
   33278:	e6c7      	b.n	3300a <__aeabi_ddiv+0x202>
   3327a:	464b      	mov	r3, r9
   3327c:	07de      	lsls	r6, r3, #31
   3327e:	085d      	lsrs	r5, r3, #1
   33280:	4643      	mov	r3, r8
   33282:	085b      	lsrs	r3, r3, #1
   33284:	431e      	orrs	r6, r3
   33286:	4643      	mov	r3, r8
   33288:	07db      	lsls	r3, r3, #31
   3328a:	469a      	mov	sl, r3
   3328c:	e6c2      	b.n	33014 <__aeabi_ddiv+0x20c>
   3328e:	2500      	movs	r5, #0
   33290:	4592      	cmp	sl, r2
   33292:	d300      	bcc.n	33296 <__aeabi_ddiv+0x48e>
   33294:	e733      	b.n	330fe <__aeabi_ddiv+0x2f6>
   33296:	9e03      	ldr	r6, [sp, #12]
   33298:	4659      	mov	r1, fp
   3329a:	46b4      	mov	ip, r6
   3329c:	44e2      	add	sl, ip
   3329e:	45b2      	cmp	sl, r6
   332a0:	41ad      	sbcs	r5, r5
   332a2:	426d      	negs	r5, r5
   332a4:	4445      	add	r5, r8
   332a6:	18eb      	adds	r3, r5, r3
   332a8:	3901      	subs	r1, #1
   332aa:	4598      	cmp	r8, r3
   332ac:	d207      	bcs.n	332be <__aeabi_ddiv+0x4b6>
   332ae:	4298      	cmp	r0, r3
   332b0:	d900      	bls.n	332b4 <__aeabi_ddiv+0x4ac>
   332b2:	e07f      	b.n	333b4 <__aeabi_ddiv+0x5ac>
   332b4:	d100      	bne.n	332b8 <__aeabi_ddiv+0x4b0>
   332b6:	e0bc      	b.n	33432 <__aeabi_ddiv+0x62a>
   332b8:	1a1d      	subs	r5, r3, r0
   332ba:	468b      	mov	fp, r1
   332bc:	e71f      	b.n	330fe <__aeabi_ddiv+0x2f6>
   332be:	4598      	cmp	r8, r3
   332c0:	d1fa      	bne.n	332b8 <__aeabi_ddiv+0x4b0>
   332c2:	9d03      	ldr	r5, [sp, #12]
   332c4:	4555      	cmp	r5, sl
   332c6:	d9f2      	bls.n	332ae <__aeabi_ddiv+0x4a6>
   332c8:	4643      	mov	r3, r8
   332ca:	468b      	mov	fp, r1
   332cc:	1a1d      	subs	r5, r3, r0
   332ce:	e716      	b.n	330fe <__aeabi_ddiv+0x2f6>
   332d0:	469b      	mov	fp, r3
   332d2:	e6ca      	b.n	3306a <__aeabi_ddiv+0x262>
   332d4:	0015      	movs	r5, r2
   332d6:	e6e7      	b.n	330a8 <__aeabi_ddiv+0x2a0>
   332d8:	465a      	mov	r2, fp
   332da:	08c9      	lsrs	r1, r1, #3
   332dc:	0752      	lsls	r2, r2, #29
   332de:	430a      	orrs	r2, r1
   332e0:	055b      	lsls	r3, r3, #21
   332e2:	4690      	mov	r8, r2
   332e4:	0d5c      	lsrs	r4, r3, #21
   332e6:	465a      	mov	r2, fp
   332e8:	2301      	movs	r3, #1
   332ea:	9902      	ldr	r1, [sp, #8]
   332ec:	0252      	lsls	r2, r2, #9
   332ee:	4019      	ands	r1, r3
   332f0:	0b12      	lsrs	r2, r2, #12
   332f2:	468c      	mov	ip, r1
   332f4:	e656      	b.n	32fa4 <__aeabi_ddiv+0x19c>
   332f6:	2b00      	cmp	r3, #0
   332f8:	d100      	bne.n	332fc <__aeabi_ddiv+0x4f4>
   332fa:	e76f      	b.n	331dc <__aeabi_ddiv+0x3d4>
   332fc:	4446      	add	r6, r8
   332fe:	1e4a      	subs	r2, r1, #1
   33300:	45b0      	cmp	r8, r6
   33302:	d929      	bls.n	33358 <__aeabi_ddiv+0x550>
   33304:	0011      	movs	r1, r2
   33306:	4286      	cmp	r6, r0
   33308:	d000      	beq.n	3330c <__aeabi_ddiv+0x504>
   3330a:	e765      	b.n	331d8 <__aeabi_ddiv+0x3d0>
   3330c:	9a03      	ldr	r2, [sp, #12]
   3330e:	4293      	cmp	r3, r2
   33310:	d000      	beq.n	33314 <__aeabi_ddiv+0x50c>
   33312:	e761      	b.n	331d8 <__aeabi_ddiv+0x3d0>
   33314:	e762      	b.n	331dc <__aeabi_ddiv+0x3d4>
   33316:	2101      	movs	r1, #1
   33318:	4249      	negs	r1, r1
   3331a:	2001      	movs	r0, #1
   3331c:	1ac2      	subs	r2, r0, r3
   3331e:	2a38      	cmp	r2, #56	; 0x38
   33320:	dd21      	ble.n	33366 <__aeabi_ddiv+0x55e>
   33322:	9b02      	ldr	r3, [sp, #8]
   33324:	4003      	ands	r3, r0
   33326:	469c      	mov	ip, r3
   33328:	e638      	b.n	32f9c <__aeabi_ddiv+0x194>
   3332a:	220f      	movs	r2, #15
   3332c:	400a      	ands	r2, r1
   3332e:	2a04      	cmp	r2, #4
   33330:	d100      	bne.n	33334 <__aeabi_ddiv+0x52c>
   33332:	e75b      	b.n	331ec <__aeabi_ddiv+0x3e4>
   33334:	000a      	movs	r2, r1
   33336:	1d11      	adds	r1, r2, #4
   33338:	4291      	cmp	r1, r2
   3333a:	4192      	sbcs	r2, r2
   3333c:	4252      	negs	r2, r2
   3333e:	4493      	add	fp, r2
   33340:	e754      	b.n	331ec <__aeabi_ddiv+0x3e4>
   33342:	4b47      	ldr	r3, [pc, #284]	; (33460 <__aeabi_ddiv+0x658>)
   33344:	18e3      	adds	r3, r4, r3
   33346:	2b00      	cmp	r3, #0
   33348:	dde5      	ble.n	33316 <__aeabi_ddiv+0x50e>
   3334a:	2201      	movs	r2, #1
   3334c:	4252      	negs	r2, r2
   3334e:	e7f2      	b.n	33336 <__aeabi_ddiv+0x52e>
   33350:	001d      	movs	r5, r3
   33352:	e6fa      	b.n	3314a <__aeabi_ddiv+0x342>
   33354:	469a      	mov	sl, r3
   33356:	e71c      	b.n	33192 <__aeabi_ddiv+0x38a>
   33358:	42b0      	cmp	r0, r6
   3335a:	d839      	bhi.n	333d0 <__aeabi_ddiv+0x5c8>
   3335c:	d06e      	beq.n	3343c <__aeabi_ddiv+0x634>
   3335e:	0011      	movs	r1, r2
   33360:	e73a      	b.n	331d8 <__aeabi_ddiv+0x3d0>
   33362:	9302      	str	r3, [sp, #8]
   33364:	e73a      	b.n	331dc <__aeabi_ddiv+0x3d4>
   33366:	2a1f      	cmp	r2, #31
   33368:	dc3c      	bgt.n	333e4 <__aeabi_ddiv+0x5dc>
   3336a:	2320      	movs	r3, #32
   3336c:	1a9b      	subs	r3, r3, r2
   3336e:	000c      	movs	r4, r1
   33370:	4658      	mov	r0, fp
   33372:	4099      	lsls	r1, r3
   33374:	4098      	lsls	r0, r3
   33376:	1e4b      	subs	r3, r1, #1
   33378:	4199      	sbcs	r1, r3
   3337a:	465b      	mov	r3, fp
   3337c:	40d4      	lsrs	r4, r2
   3337e:	40d3      	lsrs	r3, r2
   33380:	4320      	orrs	r0, r4
   33382:	4308      	orrs	r0, r1
   33384:	001a      	movs	r2, r3
   33386:	0743      	lsls	r3, r0, #29
   33388:	d009      	beq.n	3339e <__aeabi_ddiv+0x596>
   3338a:	230f      	movs	r3, #15
   3338c:	4003      	ands	r3, r0
   3338e:	2b04      	cmp	r3, #4
   33390:	d005      	beq.n	3339e <__aeabi_ddiv+0x596>
   33392:	0001      	movs	r1, r0
   33394:	1d08      	adds	r0, r1, #4
   33396:	4288      	cmp	r0, r1
   33398:	419b      	sbcs	r3, r3
   3339a:	425b      	negs	r3, r3
   3339c:	18d2      	adds	r2, r2, r3
   3339e:	0213      	lsls	r3, r2, #8
   333a0:	d53a      	bpl.n	33418 <__aeabi_ddiv+0x610>
   333a2:	2301      	movs	r3, #1
   333a4:	9a02      	ldr	r2, [sp, #8]
   333a6:	2401      	movs	r4, #1
   333a8:	401a      	ands	r2, r3
   333aa:	2300      	movs	r3, #0
   333ac:	4694      	mov	ip, r2
   333ae:	4698      	mov	r8, r3
   333b0:	2200      	movs	r2, #0
   333b2:	e5f7      	b.n	32fa4 <__aeabi_ddiv+0x19c>
   333b4:	2102      	movs	r1, #2
   333b6:	4249      	negs	r1, r1
   333b8:	468c      	mov	ip, r1
   333ba:	9d03      	ldr	r5, [sp, #12]
   333bc:	44e3      	add	fp, ip
   333be:	46ac      	mov	ip, r5
   333c0:	44e2      	add	sl, ip
   333c2:	45aa      	cmp	sl, r5
   333c4:	41ad      	sbcs	r5, r5
   333c6:	426d      	negs	r5, r5
   333c8:	4445      	add	r5, r8
   333ca:	18ed      	adds	r5, r5, r3
   333cc:	1a2d      	subs	r5, r5, r0
   333ce:	e696      	b.n	330fe <__aeabi_ddiv+0x2f6>
   333d0:	1e8a      	subs	r2, r1, #2
   333d2:	9903      	ldr	r1, [sp, #12]
   333d4:	004d      	lsls	r5, r1, #1
   333d6:	428d      	cmp	r5, r1
   333d8:	4189      	sbcs	r1, r1
   333da:	4249      	negs	r1, r1
   333dc:	4441      	add	r1, r8
   333de:	1876      	adds	r6, r6, r1
   333e0:	9503      	str	r5, [sp, #12]
   333e2:	e78f      	b.n	33304 <__aeabi_ddiv+0x4fc>
   333e4:	201f      	movs	r0, #31
   333e6:	4240      	negs	r0, r0
   333e8:	1ac3      	subs	r3, r0, r3
   333ea:	4658      	mov	r0, fp
   333ec:	40d8      	lsrs	r0, r3
   333ee:	0003      	movs	r3, r0
   333f0:	2a20      	cmp	r2, #32
   333f2:	d028      	beq.n	33446 <__aeabi_ddiv+0x63e>
   333f4:	2040      	movs	r0, #64	; 0x40
   333f6:	465d      	mov	r5, fp
   333f8:	1a82      	subs	r2, r0, r2
   333fa:	4095      	lsls	r5, r2
   333fc:	4329      	orrs	r1, r5
   333fe:	1e4a      	subs	r2, r1, #1
   33400:	4191      	sbcs	r1, r2
   33402:	4319      	orrs	r1, r3
   33404:	2307      	movs	r3, #7
   33406:	2200      	movs	r2, #0
   33408:	400b      	ands	r3, r1
   3340a:	d009      	beq.n	33420 <__aeabi_ddiv+0x618>
   3340c:	230f      	movs	r3, #15
   3340e:	2200      	movs	r2, #0
   33410:	400b      	ands	r3, r1
   33412:	0008      	movs	r0, r1
   33414:	2b04      	cmp	r3, #4
   33416:	d1bd      	bne.n	33394 <__aeabi_ddiv+0x58c>
   33418:	0001      	movs	r1, r0
   3341a:	0753      	lsls	r3, r2, #29
   3341c:	0252      	lsls	r2, r2, #9
   3341e:	0b12      	lsrs	r2, r2, #12
   33420:	08c9      	lsrs	r1, r1, #3
   33422:	4319      	orrs	r1, r3
   33424:	2301      	movs	r3, #1
   33426:	4688      	mov	r8, r1
   33428:	9902      	ldr	r1, [sp, #8]
   3342a:	2400      	movs	r4, #0
   3342c:	4019      	ands	r1, r3
   3342e:	468c      	mov	ip, r1
   33430:	e5b8      	b.n	32fa4 <__aeabi_ddiv+0x19c>
   33432:	4552      	cmp	r2, sl
   33434:	d8be      	bhi.n	333b4 <__aeabi_ddiv+0x5ac>
   33436:	468b      	mov	fp, r1
   33438:	2500      	movs	r5, #0
   3343a:	e660      	b.n	330fe <__aeabi_ddiv+0x2f6>
   3343c:	9d03      	ldr	r5, [sp, #12]
   3343e:	429d      	cmp	r5, r3
   33440:	d3c6      	bcc.n	333d0 <__aeabi_ddiv+0x5c8>
   33442:	0011      	movs	r1, r2
   33444:	e762      	b.n	3330c <__aeabi_ddiv+0x504>
   33446:	2500      	movs	r5, #0
   33448:	e7d8      	b.n	333fc <__aeabi_ddiv+0x5f4>
   3344a:	2280      	movs	r2, #128	; 0x80
   3344c:	465b      	mov	r3, fp
   3344e:	0312      	lsls	r2, r2, #12
   33450:	431a      	orrs	r2, r3
   33452:	9b01      	ldr	r3, [sp, #4]
   33454:	0312      	lsls	r2, r2, #12
   33456:	0b12      	lsrs	r2, r2, #12
   33458:	469c      	mov	ip, r3
   3345a:	4688      	mov	r8, r1
   3345c:	4c03      	ldr	r4, [pc, #12]	; (3346c <__aeabi_ddiv+0x664>)
   3345e:	e5a1      	b.n	32fa4 <__aeabi_ddiv+0x19c>
   33460:	000003ff 	.word	0x000003ff
   33464:	feffffff 	.word	0xfeffffff
   33468:	000007fe 	.word	0x000007fe
   3346c:	000007ff 	.word	0x000007ff

00033470 <__aeabi_dmul>:
   33470:	b5f0      	push	{r4, r5, r6, r7, lr}
   33472:	4657      	mov	r7, sl
   33474:	4645      	mov	r5, r8
   33476:	46de      	mov	lr, fp
   33478:	464e      	mov	r6, r9
   3347a:	b5e0      	push	{r5, r6, r7, lr}
   3347c:	030c      	lsls	r4, r1, #12
   3347e:	4698      	mov	r8, r3
   33480:	004e      	lsls	r6, r1, #1
   33482:	0b23      	lsrs	r3, r4, #12
   33484:	b087      	sub	sp, #28
   33486:	0007      	movs	r7, r0
   33488:	4692      	mov	sl, r2
   3348a:	469b      	mov	fp, r3
   3348c:	0d76      	lsrs	r6, r6, #21
   3348e:	0fcd      	lsrs	r5, r1, #31
   33490:	2e00      	cmp	r6, #0
   33492:	d06b      	beq.n	3356c <__aeabi_dmul+0xfc>
   33494:	4b6d      	ldr	r3, [pc, #436]	; (3364c <__aeabi_dmul+0x1dc>)
   33496:	429e      	cmp	r6, r3
   33498:	d035      	beq.n	33506 <__aeabi_dmul+0x96>
   3349a:	2480      	movs	r4, #128	; 0x80
   3349c:	465b      	mov	r3, fp
   3349e:	0f42      	lsrs	r2, r0, #29
   334a0:	0424      	lsls	r4, r4, #16
   334a2:	00db      	lsls	r3, r3, #3
   334a4:	4314      	orrs	r4, r2
   334a6:	431c      	orrs	r4, r3
   334a8:	00c3      	lsls	r3, r0, #3
   334aa:	4699      	mov	r9, r3
   334ac:	4b68      	ldr	r3, [pc, #416]	; (33650 <__aeabi_dmul+0x1e0>)
   334ae:	46a3      	mov	fp, r4
   334b0:	469c      	mov	ip, r3
   334b2:	2300      	movs	r3, #0
   334b4:	2700      	movs	r7, #0
   334b6:	4466      	add	r6, ip
   334b8:	9302      	str	r3, [sp, #8]
   334ba:	4643      	mov	r3, r8
   334bc:	031c      	lsls	r4, r3, #12
   334be:	005a      	lsls	r2, r3, #1
   334c0:	0fdb      	lsrs	r3, r3, #31
   334c2:	4650      	mov	r0, sl
   334c4:	0b24      	lsrs	r4, r4, #12
   334c6:	0d52      	lsrs	r2, r2, #21
   334c8:	4698      	mov	r8, r3
   334ca:	d100      	bne.n	334ce <__aeabi_dmul+0x5e>
   334cc:	e076      	b.n	335bc <__aeabi_dmul+0x14c>
   334ce:	4b5f      	ldr	r3, [pc, #380]	; (3364c <__aeabi_dmul+0x1dc>)
   334d0:	429a      	cmp	r2, r3
   334d2:	d06d      	beq.n	335b0 <__aeabi_dmul+0x140>
   334d4:	2380      	movs	r3, #128	; 0x80
   334d6:	0f41      	lsrs	r1, r0, #29
   334d8:	041b      	lsls	r3, r3, #16
   334da:	430b      	orrs	r3, r1
   334dc:	495c      	ldr	r1, [pc, #368]	; (33650 <__aeabi_dmul+0x1e0>)
   334de:	00e4      	lsls	r4, r4, #3
   334e0:	468c      	mov	ip, r1
   334e2:	431c      	orrs	r4, r3
   334e4:	00c3      	lsls	r3, r0, #3
   334e6:	2000      	movs	r0, #0
   334e8:	4462      	add	r2, ip
   334ea:	4641      	mov	r1, r8
   334ec:	18b6      	adds	r6, r6, r2
   334ee:	4069      	eors	r1, r5
   334f0:	1c72      	adds	r2, r6, #1
   334f2:	9101      	str	r1, [sp, #4]
   334f4:	4694      	mov	ip, r2
   334f6:	4307      	orrs	r7, r0
   334f8:	2f0f      	cmp	r7, #15
   334fa:	d900      	bls.n	334fe <__aeabi_dmul+0x8e>
   334fc:	e0b0      	b.n	33660 <__aeabi_dmul+0x1f0>
   334fe:	4a55      	ldr	r2, [pc, #340]	; (33654 <__aeabi_dmul+0x1e4>)
   33500:	00bf      	lsls	r7, r7, #2
   33502:	59d2      	ldr	r2, [r2, r7]
   33504:	4697      	mov	pc, r2
   33506:	465b      	mov	r3, fp
   33508:	4303      	orrs	r3, r0
   3350a:	4699      	mov	r9, r3
   3350c:	d000      	beq.n	33510 <__aeabi_dmul+0xa0>
   3350e:	e087      	b.n	33620 <__aeabi_dmul+0x1b0>
   33510:	2300      	movs	r3, #0
   33512:	469b      	mov	fp, r3
   33514:	3302      	adds	r3, #2
   33516:	2708      	movs	r7, #8
   33518:	9302      	str	r3, [sp, #8]
   3351a:	e7ce      	b.n	334ba <__aeabi_dmul+0x4a>
   3351c:	4642      	mov	r2, r8
   3351e:	9201      	str	r2, [sp, #4]
   33520:	2802      	cmp	r0, #2
   33522:	d067      	beq.n	335f4 <__aeabi_dmul+0x184>
   33524:	2803      	cmp	r0, #3
   33526:	d100      	bne.n	3352a <__aeabi_dmul+0xba>
   33528:	e20e      	b.n	33948 <__aeabi_dmul+0x4d8>
   3352a:	2801      	cmp	r0, #1
   3352c:	d000      	beq.n	33530 <__aeabi_dmul+0xc0>
   3352e:	e162      	b.n	337f6 <__aeabi_dmul+0x386>
   33530:	2300      	movs	r3, #0
   33532:	2400      	movs	r4, #0
   33534:	2200      	movs	r2, #0
   33536:	4699      	mov	r9, r3
   33538:	9901      	ldr	r1, [sp, #4]
   3353a:	4001      	ands	r1, r0
   3353c:	b2cd      	uxtb	r5, r1
   3353e:	2100      	movs	r1, #0
   33540:	0312      	lsls	r2, r2, #12
   33542:	0d0b      	lsrs	r3, r1, #20
   33544:	0b12      	lsrs	r2, r2, #12
   33546:	051b      	lsls	r3, r3, #20
   33548:	4313      	orrs	r3, r2
   3354a:	4a43      	ldr	r2, [pc, #268]	; (33658 <__aeabi_dmul+0x1e8>)
   3354c:	0524      	lsls	r4, r4, #20
   3354e:	4013      	ands	r3, r2
   33550:	431c      	orrs	r4, r3
   33552:	0064      	lsls	r4, r4, #1
   33554:	07ed      	lsls	r5, r5, #31
   33556:	0864      	lsrs	r4, r4, #1
   33558:	432c      	orrs	r4, r5
   3355a:	4648      	mov	r0, r9
   3355c:	0021      	movs	r1, r4
   3355e:	b007      	add	sp, #28
   33560:	bc3c      	pop	{r2, r3, r4, r5}
   33562:	4690      	mov	r8, r2
   33564:	4699      	mov	r9, r3
   33566:	46a2      	mov	sl, r4
   33568:	46ab      	mov	fp, r5
   3356a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3356c:	4303      	orrs	r3, r0
   3356e:	4699      	mov	r9, r3
   33570:	d04f      	beq.n	33612 <__aeabi_dmul+0x1a2>
   33572:	465b      	mov	r3, fp
   33574:	2b00      	cmp	r3, #0
   33576:	d100      	bne.n	3357a <__aeabi_dmul+0x10a>
   33578:	e189      	b.n	3388e <__aeabi_dmul+0x41e>
   3357a:	4658      	mov	r0, fp
   3357c:	f000 fe56 	bl	3422c <__clzsi2>
   33580:	0003      	movs	r3, r0
   33582:	3b0b      	subs	r3, #11
   33584:	2b1c      	cmp	r3, #28
   33586:	dd00      	ble.n	3358a <__aeabi_dmul+0x11a>
   33588:	e17a      	b.n	33880 <__aeabi_dmul+0x410>
   3358a:	221d      	movs	r2, #29
   3358c:	1ad3      	subs	r3, r2, r3
   3358e:	003a      	movs	r2, r7
   33590:	0001      	movs	r1, r0
   33592:	465c      	mov	r4, fp
   33594:	40da      	lsrs	r2, r3
   33596:	3908      	subs	r1, #8
   33598:	408c      	lsls	r4, r1
   3359a:	0013      	movs	r3, r2
   3359c:	408f      	lsls	r7, r1
   3359e:	4323      	orrs	r3, r4
   335a0:	469b      	mov	fp, r3
   335a2:	46b9      	mov	r9, r7
   335a4:	2300      	movs	r3, #0
   335a6:	4e2d      	ldr	r6, [pc, #180]	; (3365c <__aeabi_dmul+0x1ec>)
   335a8:	2700      	movs	r7, #0
   335aa:	1a36      	subs	r6, r6, r0
   335ac:	9302      	str	r3, [sp, #8]
   335ae:	e784      	b.n	334ba <__aeabi_dmul+0x4a>
   335b0:	4653      	mov	r3, sl
   335b2:	4323      	orrs	r3, r4
   335b4:	d12a      	bne.n	3360c <__aeabi_dmul+0x19c>
   335b6:	2400      	movs	r4, #0
   335b8:	2002      	movs	r0, #2
   335ba:	e796      	b.n	334ea <__aeabi_dmul+0x7a>
   335bc:	4653      	mov	r3, sl
   335be:	4323      	orrs	r3, r4
   335c0:	d020      	beq.n	33604 <__aeabi_dmul+0x194>
   335c2:	2c00      	cmp	r4, #0
   335c4:	d100      	bne.n	335c8 <__aeabi_dmul+0x158>
   335c6:	e157      	b.n	33878 <__aeabi_dmul+0x408>
   335c8:	0020      	movs	r0, r4
   335ca:	f000 fe2f 	bl	3422c <__clzsi2>
   335ce:	0003      	movs	r3, r0
   335d0:	3b0b      	subs	r3, #11
   335d2:	2b1c      	cmp	r3, #28
   335d4:	dd00      	ble.n	335d8 <__aeabi_dmul+0x168>
   335d6:	e149      	b.n	3386c <__aeabi_dmul+0x3fc>
   335d8:	211d      	movs	r1, #29
   335da:	1acb      	subs	r3, r1, r3
   335dc:	4651      	mov	r1, sl
   335de:	0002      	movs	r2, r0
   335e0:	40d9      	lsrs	r1, r3
   335e2:	4653      	mov	r3, sl
   335e4:	3a08      	subs	r2, #8
   335e6:	4094      	lsls	r4, r2
   335e8:	4093      	lsls	r3, r2
   335ea:	430c      	orrs	r4, r1
   335ec:	4a1b      	ldr	r2, [pc, #108]	; (3365c <__aeabi_dmul+0x1ec>)
   335ee:	1a12      	subs	r2, r2, r0
   335f0:	2000      	movs	r0, #0
   335f2:	e77a      	b.n	334ea <__aeabi_dmul+0x7a>
   335f4:	2501      	movs	r5, #1
   335f6:	9b01      	ldr	r3, [sp, #4]
   335f8:	4c14      	ldr	r4, [pc, #80]	; (3364c <__aeabi_dmul+0x1dc>)
   335fa:	401d      	ands	r5, r3
   335fc:	2300      	movs	r3, #0
   335fe:	2200      	movs	r2, #0
   33600:	4699      	mov	r9, r3
   33602:	e79c      	b.n	3353e <__aeabi_dmul+0xce>
   33604:	2400      	movs	r4, #0
   33606:	2200      	movs	r2, #0
   33608:	2001      	movs	r0, #1
   3360a:	e76e      	b.n	334ea <__aeabi_dmul+0x7a>
   3360c:	4653      	mov	r3, sl
   3360e:	2003      	movs	r0, #3
   33610:	e76b      	b.n	334ea <__aeabi_dmul+0x7a>
   33612:	2300      	movs	r3, #0
   33614:	469b      	mov	fp, r3
   33616:	3301      	adds	r3, #1
   33618:	2704      	movs	r7, #4
   3361a:	2600      	movs	r6, #0
   3361c:	9302      	str	r3, [sp, #8]
   3361e:	e74c      	b.n	334ba <__aeabi_dmul+0x4a>
   33620:	2303      	movs	r3, #3
   33622:	4681      	mov	r9, r0
   33624:	270c      	movs	r7, #12
   33626:	9302      	str	r3, [sp, #8]
   33628:	e747      	b.n	334ba <__aeabi_dmul+0x4a>
   3362a:	2280      	movs	r2, #128	; 0x80
   3362c:	2300      	movs	r3, #0
   3362e:	2500      	movs	r5, #0
   33630:	0312      	lsls	r2, r2, #12
   33632:	4699      	mov	r9, r3
   33634:	4c05      	ldr	r4, [pc, #20]	; (3364c <__aeabi_dmul+0x1dc>)
   33636:	e782      	b.n	3353e <__aeabi_dmul+0xce>
   33638:	465c      	mov	r4, fp
   3363a:	464b      	mov	r3, r9
   3363c:	9802      	ldr	r0, [sp, #8]
   3363e:	e76f      	b.n	33520 <__aeabi_dmul+0xb0>
   33640:	465c      	mov	r4, fp
   33642:	464b      	mov	r3, r9
   33644:	9501      	str	r5, [sp, #4]
   33646:	9802      	ldr	r0, [sp, #8]
   33648:	e76a      	b.n	33520 <__aeabi_dmul+0xb0>
   3364a:	46c0      	nop			; (mov r8, r8)
   3364c:	000007ff 	.word	0x000007ff
   33650:	fffffc01 	.word	0xfffffc01
   33654:	000396cc 	.word	0x000396cc
   33658:	800fffff 	.word	0x800fffff
   3365c:	fffffc0d 	.word	0xfffffc0d
   33660:	464a      	mov	r2, r9
   33662:	4649      	mov	r1, r9
   33664:	0c17      	lsrs	r7, r2, #16
   33666:	0c1a      	lsrs	r2, r3, #16
   33668:	041b      	lsls	r3, r3, #16
   3366a:	0c1b      	lsrs	r3, r3, #16
   3366c:	0408      	lsls	r0, r1, #16
   3366e:	0019      	movs	r1, r3
   33670:	0c00      	lsrs	r0, r0, #16
   33672:	4341      	muls	r1, r0
   33674:	0015      	movs	r5, r2
   33676:	4688      	mov	r8, r1
   33678:	0019      	movs	r1, r3
   3367a:	437d      	muls	r5, r7
   3367c:	4379      	muls	r1, r7
   3367e:	9503      	str	r5, [sp, #12]
   33680:	4689      	mov	r9, r1
   33682:	0029      	movs	r1, r5
   33684:	0015      	movs	r5, r2
   33686:	4345      	muls	r5, r0
   33688:	444d      	add	r5, r9
   3368a:	9502      	str	r5, [sp, #8]
   3368c:	4645      	mov	r5, r8
   3368e:	0c2d      	lsrs	r5, r5, #16
   33690:	46aa      	mov	sl, r5
   33692:	9d02      	ldr	r5, [sp, #8]
   33694:	4455      	add	r5, sl
   33696:	45a9      	cmp	r9, r5
   33698:	d906      	bls.n	336a8 <__aeabi_dmul+0x238>
   3369a:	468a      	mov	sl, r1
   3369c:	2180      	movs	r1, #128	; 0x80
   3369e:	0249      	lsls	r1, r1, #9
   336a0:	4689      	mov	r9, r1
   336a2:	44ca      	add	sl, r9
   336a4:	4651      	mov	r1, sl
   336a6:	9103      	str	r1, [sp, #12]
   336a8:	0c29      	lsrs	r1, r5, #16
   336aa:	9104      	str	r1, [sp, #16]
   336ac:	4641      	mov	r1, r8
   336ae:	0409      	lsls	r1, r1, #16
   336b0:	042d      	lsls	r5, r5, #16
   336b2:	0c09      	lsrs	r1, r1, #16
   336b4:	4688      	mov	r8, r1
   336b6:	0029      	movs	r1, r5
   336b8:	0c25      	lsrs	r5, r4, #16
   336ba:	0424      	lsls	r4, r4, #16
   336bc:	4441      	add	r1, r8
   336be:	0c24      	lsrs	r4, r4, #16
   336c0:	9105      	str	r1, [sp, #20]
   336c2:	0021      	movs	r1, r4
   336c4:	4341      	muls	r1, r0
   336c6:	4688      	mov	r8, r1
   336c8:	0021      	movs	r1, r4
   336ca:	4379      	muls	r1, r7
   336cc:	468a      	mov	sl, r1
   336ce:	4368      	muls	r0, r5
   336d0:	4641      	mov	r1, r8
   336d2:	4450      	add	r0, sl
   336d4:	4681      	mov	r9, r0
   336d6:	0c08      	lsrs	r0, r1, #16
   336d8:	4448      	add	r0, r9
   336da:	436f      	muls	r7, r5
   336dc:	4582      	cmp	sl, r0
   336de:	d903      	bls.n	336e8 <__aeabi_dmul+0x278>
   336e0:	2180      	movs	r1, #128	; 0x80
   336e2:	0249      	lsls	r1, r1, #9
   336e4:	4689      	mov	r9, r1
   336e6:	444f      	add	r7, r9
   336e8:	0c01      	lsrs	r1, r0, #16
   336ea:	4689      	mov	r9, r1
   336ec:	0039      	movs	r1, r7
   336ee:	4449      	add	r1, r9
   336f0:	9102      	str	r1, [sp, #8]
   336f2:	4641      	mov	r1, r8
   336f4:	040f      	lsls	r7, r1, #16
   336f6:	9904      	ldr	r1, [sp, #16]
   336f8:	0c3f      	lsrs	r7, r7, #16
   336fa:	4688      	mov	r8, r1
   336fc:	0400      	lsls	r0, r0, #16
   336fe:	19c0      	adds	r0, r0, r7
   33700:	4480      	add	r8, r0
   33702:	4641      	mov	r1, r8
   33704:	9104      	str	r1, [sp, #16]
   33706:	4659      	mov	r1, fp
   33708:	0c0f      	lsrs	r7, r1, #16
   3370a:	0409      	lsls	r1, r1, #16
   3370c:	0c09      	lsrs	r1, r1, #16
   3370e:	4688      	mov	r8, r1
   33710:	4359      	muls	r1, r3
   33712:	468a      	mov	sl, r1
   33714:	0039      	movs	r1, r7
   33716:	4351      	muls	r1, r2
   33718:	4689      	mov	r9, r1
   3371a:	4641      	mov	r1, r8
   3371c:	434a      	muls	r2, r1
   3371e:	4651      	mov	r1, sl
   33720:	0c09      	lsrs	r1, r1, #16
   33722:	468b      	mov	fp, r1
   33724:	437b      	muls	r3, r7
   33726:	18d2      	adds	r2, r2, r3
   33728:	445a      	add	r2, fp
   3372a:	4293      	cmp	r3, r2
   3372c:	d903      	bls.n	33736 <__aeabi_dmul+0x2c6>
   3372e:	2380      	movs	r3, #128	; 0x80
   33730:	025b      	lsls	r3, r3, #9
   33732:	469b      	mov	fp, r3
   33734:	44d9      	add	r9, fp
   33736:	4651      	mov	r1, sl
   33738:	0409      	lsls	r1, r1, #16
   3373a:	0c09      	lsrs	r1, r1, #16
   3373c:	468a      	mov	sl, r1
   3373e:	4641      	mov	r1, r8
   33740:	4361      	muls	r1, r4
   33742:	437c      	muls	r4, r7
   33744:	0c13      	lsrs	r3, r2, #16
   33746:	0412      	lsls	r2, r2, #16
   33748:	444b      	add	r3, r9
   3374a:	4452      	add	r2, sl
   3374c:	46a1      	mov	r9, r4
   3374e:	468a      	mov	sl, r1
   33750:	003c      	movs	r4, r7
   33752:	4641      	mov	r1, r8
   33754:	436c      	muls	r4, r5
   33756:	434d      	muls	r5, r1
   33758:	4651      	mov	r1, sl
   3375a:	444d      	add	r5, r9
   3375c:	0c0f      	lsrs	r7, r1, #16
   3375e:	197d      	adds	r5, r7, r5
   33760:	45a9      	cmp	r9, r5
   33762:	d903      	bls.n	3376c <__aeabi_dmul+0x2fc>
   33764:	2180      	movs	r1, #128	; 0x80
   33766:	0249      	lsls	r1, r1, #9
   33768:	4688      	mov	r8, r1
   3376a:	4444      	add	r4, r8
   3376c:	9f04      	ldr	r7, [sp, #16]
   3376e:	9903      	ldr	r1, [sp, #12]
   33770:	46b8      	mov	r8, r7
   33772:	4441      	add	r1, r8
   33774:	468b      	mov	fp, r1
   33776:	4583      	cmp	fp, r0
   33778:	4180      	sbcs	r0, r0
   3377a:	4241      	negs	r1, r0
   3377c:	4688      	mov	r8, r1
   3377e:	4651      	mov	r1, sl
   33780:	0408      	lsls	r0, r1, #16
   33782:	042f      	lsls	r7, r5, #16
   33784:	0c00      	lsrs	r0, r0, #16
   33786:	183f      	adds	r7, r7, r0
   33788:	4658      	mov	r0, fp
   3378a:	9902      	ldr	r1, [sp, #8]
   3378c:	1810      	adds	r0, r2, r0
   3378e:	4689      	mov	r9, r1
   33790:	4290      	cmp	r0, r2
   33792:	4192      	sbcs	r2, r2
   33794:	444f      	add	r7, r9
   33796:	46ba      	mov	sl, r7
   33798:	4252      	negs	r2, r2
   3379a:	4699      	mov	r9, r3
   3379c:	4693      	mov	fp, r2
   3379e:	44c2      	add	sl, r8
   337a0:	44d1      	add	r9, sl
   337a2:	44cb      	add	fp, r9
   337a4:	428f      	cmp	r7, r1
   337a6:	41bf      	sbcs	r7, r7
   337a8:	45c2      	cmp	sl, r8
   337aa:	4189      	sbcs	r1, r1
   337ac:	4599      	cmp	r9, r3
   337ae:	419b      	sbcs	r3, r3
   337b0:	4593      	cmp	fp, r2
   337b2:	4192      	sbcs	r2, r2
   337b4:	427f      	negs	r7, r7
   337b6:	4249      	negs	r1, r1
   337b8:	0c2d      	lsrs	r5, r5, #16
   337ba:	4252      	negs	r2, r2
   337bc:	430f      	orrs	r7, r1
   337be:	425b      	negs	r3, r3
   337c0:	4313      	orrs	r3, r2
   337c2:	197f      	adds	r7, r7, r5
   337c4:	18ff      	adds	r7, r7, r3
   337c6:	465b      	mov	r3, fp
   337c8:	193c      	adds	r4, r7, r4
   337ca:	0ddb      	lsrs	r3, r3, #23
   337cc:	9a05      	ldr	r2, [sp, #20]
   337ce:	0264      	lsls	r4, r4, #9
   337d0:	431c      	orrs	r4, r3
   337d2:	0243      	lsls	r3, r0, #9
   337d4:	4313      	orrs	r3, r2
   337d6:	1e5d      	subs	r5, r3, #1
   337d8:	41ab      	sbcs	r3, r5
   337da:	465a      	mov	r2, fp
   337dc:	0dc0      	lsrs	r0, r0, #23
   337de:	4303      	orrs	r3, r0
   337e0:	0252      	lsls	r2, r2, #9
   337e2:	4313      	orrs	r3, r2
   337e4:	01e2      	lsls	r2, r4, #7
   337e6:	d556      	bpl.n	33896 <__aeabi_dmul+0x426>
   337e8:	2001      	movs	r0, #1
   337ea:	085a      	lsrs	r2, r3, #1
   337ec:	4003      	ands	r3, r0
   337ee:	4313      	orrs	r3, r2
   337f0:	07e2      	lsls	r2, r4, #31
   337f2:	4313      	orrs	r3, r2
   337f4:	0864      	lsrs	r4, r4, #1
   337f6:	485a      	ldr	r0, [pc, #360]	; (33960 <__aeabi_dmul+0x4f0>)
   337f8:	4460      	add	r0, ip
   337fa:	2800      	cmp	r0, #0
   337fc:	dd4d      	ble.n	3389a <__aeabi_dmul+0x42a>
   337fe:	075a      	lsls	r2, r3, #29
   33800:	d009      	beq.n	33816 <__aeabi_dmul+0x3a6>
   33802:	220f      	movs	r2, #15
   33804:	401a      	ands	r2, r3
   33806:	2a04      	cmp	r2, #4
   33808:	d005      	beq.n	33816 <__aeabi_dmul+0x3a6>
   3380a:	1d1a      	adds	r2, r3, #4
   3380c:	429a      	cmp	r2, r3
   3380e:	419b      	sbcs	r3, r3
   33810:	425b      	negs	r3, r3
   33812:	18e4      	adds	r4, r4, r3
   33814:	0013      	movs	r3, r2
   33816:	01e2      	lsls	r2, r4, #7
   33818:	d504      	bpl.n	33824 <__aeabi_dmul+0x3b4>
   3381a:	2080      	movs	r0, #128	; 0x80
   3381c:	4a51      	ldr	r2, [pc, #324]	; (33964 <__aeabi_dmul+0x4f4>)
   3381e:	00c0      	lsls	r0, r0, #3
   33820:	4014      	ands	r4, r2
   33822:	4460      	add	r0, ip
   33824:	4a50      	ldr	r2, [pc, #320]	; (33968 <__aeabi_dmul+0x4f8>)
   33826:	4290      	cmp	r0, r2
   33828:	dd00      	ble.n	3382c <__aeabi_dmul+0x3bc>
   3382a:	e6e3      	b.n	335f4 <__aeabi_dmul+0x184>
   3382c:	2501      	movs	r5, #1
   3382e:	08db      	lsrs	r3, r3, #3
   33830:	0762      	lsls	r2, r4, #29
   33832:	431a      	orrs	r2, r3
   33834:	0264      	lsls	r4, r4, #9
   33836:	9b01      	ldr	r3, [sp, #4]
   33838:	4691      	mov	r9, r2
   3383a:	0b22      	lsrs	r2, r4, #12
   3383c:	0544      	lsls	r4, r0, #21
   3383e:	0d64      	lsrs	r4, r4, #21
   33840:	401d      	ands	r5, r3
   33842:	e67c      	b.n	3353e <__aeabi_dmul+0xce>
   33844:	2280      	movs	r2, #128	; 0x80
   33846:	4659      	mov	r1, fp
   33848:	0312      	lsls	r2, r2, #12
   3384a:	4211      	tst	r1, r2
   3384c:	d008      	beq.n	33860 <__aeabi_dmul+0x3f0>
   3384e:	4214      	tst	r4, r2
   33850:	d106      	bne.n	33860 <__aeabi_dmul+0x3f0>
   33852:	4322      	orrs	r2, r4
   33854:	0312      	lsls	r2, r2, #12
   33856:	0b12      	lsrs	r2, r2, #12
   33858:	4645      	mov	r5, r8
   3385a:	4699      	mov	r9, r3
   3385c:	4c43      	ldr	r4, [pc, #268]	; (3396c <__aeabi_dmul+0x4fc>)
   3385e:	e66e      	b.n	3353e <__aeabi_dmul+0xce>
   33860:	465b      	mov	r3, fp
   33862:	431a      	orrs	r2, r3
   33864:	0312      	lsls	r2, r2, #12
   33866:	0b12      	lsrs	r2, r2, #12
   33868:	4c40      	ldr	r4, [pc, #256]	; (3396c <__aeabi_dmul+0x4fc>)
   3386a:	e668      	b.n	3353e <__aeabi_dmul+0xce>
   3386c:	0003      	movs	r3, r0
   3386e:	4654      	mov	r4, sl
   33870:	3b28      	subs	r3, #40	; 0x28
   33872:	409c      	lsls	r4, r3
   33874:	2300      	movs	r3, #0
   33876:	e6b9      	b.n	335ec <__aeabi_dmul+0x17c>
   33878:	f000 fcd8 	bl	3422c <__clzsi2>
   3387c:	3020      	adds	r0, #32
   3387e:	e6a6      	b.n	335ce <__aeabi_dmul+0x15e>
   33880:	0003      	movs	r3, r0
   33882:	3b28      	subs	r3, #40	; 0x28
   33884:	409f      	lsls	r7, r3
   33886:	2300      	movs	r3, #0
   33888:	46bb      	mov	fp, r7
   3388a:	4699      	mov	r9, r3
   3388c:	e68a      	b.n	335a4 <__aeabi_dmul+0x134>
   3388e:	f000 fccd 	bl	3422c <__clzsi2>
   33892:	3020      	adds	r0, #32
   33894:	e674      	b.n	33580 <__aeabi_dmul+0x110>
   33896:	46b4      	mov	ip, r6
   33898:	e7ad      	b.n	337f6 <__aeabi_dmul+0x386>
   3389a:	2501      	movs	r5, #1
   3389c:	1a2a      	subs	r2, r5, r0
   3389e:	2a38      	cmp	r2, #56	; 0x38
   338a0:	dd06      	ble.n	338b0 <__aeabi_dmul+0x440>
   338a2:	9b01      	ldr	r3, [sp, #4]
   338a4:	2400      	movs	r4, #0
   338a6:	401d      	ands	r5, r3
   338a8:	2300      	movs	r3, #0
   338aa:	2200      	movs	r2, #0
   338ac:	4699      	mov	r9, r3
   338ae:	e646      	b.n	3353e <__aeabi_dmul+0xce>
   338b0:	2a1f      	cmp	r2, #31
   338b2:	dc21      	bgt.n	338f8 <__aeabi_dmul+0x488>
   338b4:	2520      	movs	r5, #32
   338b6:	0020      	movs	r0, r4
   338b8:	1aad      	subs	r5, r5, r2
   338ba:	001e      	movs	r6, r3
   338bc:	40ab      	lsls	r3, r5
   338be:	40a8      	lsls	r0, r5
   338c0:	40d6      	lsrs	r6, r2
   338c2:	1e5d      	subs	r5, r3, #1
   338c4:	41ab      	sbcs	r3, r5
   338c6:	4330      	orrs	r0, r6
   338c8:	4318      	orrs	r0, r3
   338ca:	40d4      	lsrs	r4, r2
   338cc:	0743      	lsls	r3, r0, #29
   338ce:	d009      	beq.n	338e4 <__aeabi_dmul+0x474>
   338d0:	230f      	movs	r3, #15
   338d2:	4003      	ands	r3, r0
   338d4:	2b04      	cmp	r3, #4
   338d6:	d005      	beq.n	338e4 <__aeabi_dmul+0x474>
   338d8:	0003      	movs	r3, r0
   338da:	1d18      	adds	r0, r3, #4
   338dc:	4298      	cmp	r0, r3
   338de:	419b      	sbcs	r3, r3
   338e0:	425b      	negs	r3, r3
   338e2:	18e4      	adds	r4, r4, r3
   338e4:	0223      	lsls	r3, r4, #8
   338e6:	d521      	bpl.n	3392c <__aeabi_dmul+0x4bc>
   338e8:	2501      	movs	r5, #1
   338ea:	9b01      	ldr	r3, [sp, #4]
   338ec:	2401      	movs	r4, #1
   338ee:	401d      	ands	r5, r3
   338f0:	2300      	movs	r3, #0
   338f2:	2200      	movs	r2, #0
   338f4:	4699      	mov	r9, r3
   338f6:	e622      	b.n	3353e <__aeabi_dmul+0xce>
   338f8:	251f      	movs	r5, #31
   338fa:	0021      	movs	r1, r4
   338fc:	426d      	negs	r5, r5
   338fe:	1a28      	subs	r0, r5, r0
   33900:	40c1      	lsrs	r1, r0
   33902:	0008      	movs	r0, r1
   33904:	2a20      	cmp	r2, #32
   33906:	d01d      	beq.n	33944 <__aeabi_dmul+0x4d4>
   33908:	355f      	adds	r5, #95	; 0x5f
   3390a:	1aaa      	subs	r2, r5, r2
   3390c:	4094      	lsls	r4, r2
   3390e:	4323      	orrs	r3, r4
   33910:	1e5c      	subs	r4, r3, #1
   33912:	41a3      	sbcs	r3, r4
   33914:	2507      	movs	r5, #7
   33916:	4303      	orrs	r3, r0
   33918:	401d      	ands	r5, r3
   3391a:	2200      	movs	r2, #0
   3391c:	2d00      	cmp	r5, #0
   3391e:	d009      	beq.n	33934 <__aeabi_dmul+0x4c4>
   33920:	220f      	movs	r2, #15
   33922:	2400      	movs	r4, #0
   33924:	401a      	ands	r2, r3
   33926:	0018      	movs	r0, r3
   33928:	2a04      	cmp	r2, #4
   3392a:	d1d6      	bne.n	338da <__aeabi_dmul+0x46a>
   3392c:	0003      	movs	r3, r0
   3392e:	0765      	lsls	r5, r4, #29
   33930:	0264      	lsls	r4, r4, #9
   33932:	0b22      	lsrs	r2, r4, #12
   33934:	08db      	lsrs	r3, r3, #3
   33936:	432b      	orrs	r3, r5
   33938:	2501      	movs	r5, #1
   3393a:	4699      	mov	r9, r3
   3393c:	9b01      	ldr	r3, [sp, #4]
   3393e:	2400      	movs	r4, #0
   33940:	401d      	ands	r5, r3
   33942:	e5fc      	b.n	3353e <__aeabi_dmul+0xce>
   33944:	2400      	movs	r4, #0
   33946:	e7e2      	b.n	3390e <__aeabi_dmul+0x49e>
   33948:	2280      	movs	r2, #128	; 0x80
   3394a:	2501      	movs	r5, #1
   3394c:	0312      	lsls	r2, r2, #12
   3394e:	4322      	orrs	r2, r4
   33950:	9901      	ldr	r1, [sp, #4]
   33952:	0312      	lsls	r2, r2, #12
   33954:	0b12      	lsrs	r2, r2, #12
   33956:	400d      	ands	r5, r1
   33958:	4699      	mov	r9, r3
   3395a:	4c04      	ldr	r4, [pc, #16]	; (3396c <__aeabi_dmul+0x4fc>)
   3395c:	e5ef      	b.n	3353e <__aeabi_dmul+0xce>
   3395e:	46c0      	nop			; (mov r8, r8)
   33960:	000003ff 	.word	0x000003ff
   33964:	feffffff 	.word	0xfeffffff
   33968:	000007fe 	.word	0x000007fe
   3396c:	000007ff 	.word	0x000007ff

00033970 <__aeabi_dsub>:
   33970:	b5f0      	push	{r4, r5, r6, r7, lr}
   33972:	4646      	mov	r6, r8
   33974:	46d6      	mov	lr, sl
   33976:	464f      	mov	r7, r9
   33978:	030c      	lsls	r4, r1, #12
   3397a:	b5c0      	push	{r6, r7, lr}
   3397c:	0fcd      	lsrs	r5, r1, #31
   3397e:	004e      	lsls	r6, r1, #1
   33980:	0a61      	lsrs	r1, r4, #9
   33982:	0f44      	lsrs	r4, r0, #29
   33984:	430c      	orrs	r4, r1
   33986:	00c1      	lsls	r1, r0, #3
   33988:	0058      	lsls	r0, r3, #1
   3398a:	0d40      	lsrs	r0, r0, #21
   3398c:	4684      	mov	ip, r0
   3398e:	468a      	mov	sl, r1
   33990:	000f      	movs	r7, r1
   33992:	0319      	lsls	r1, r3, #12
   33994:	0f50      	lsrs	r0, r2, #29
   33996:	0a49      	lsrs	r1, r1, #9
   33998:	4301      	orrs	r1, r0
   3399a:	48c6      	ldr	r0, [pc, #792]	; (33cb4 <__aeabi_dsub+0x344>)
   3399c:	0d76      	lsrs	r6, r6, #21
   3399e:	46a8      	mov	r8, r5
   339a0:	0fdb      	lsrs	r3, r3, #31
   339a2:	00d2      	lsls	r2, r2, #3
   339a4:	4584      	cmp	ip, r0
   339a6:	d100      	bne.n	339aa <__aeabi_dsub+0x3a>
   339a8:	e0d8      	b.n	33b5c <__aeabi_dsub+0x1ec>
   339aa:	2001      	movs	r0, #1
   339ac:	4043      	eors	r3, r0
   339ae:	42ab      	cmp	r3, r5
   339b0:	d100      	bne.n	339b4 <__aeabi_dsub+0x44>
   339b2:	e0a6      	b.n	33b02 <__aeabi_dsub+0x192>
   339b4:	4660      	mov	r0, ip
   339b6:	1a35      	subs	r5, r6, r0
   339b8:	2d00      	cmp	r5, #0
   339ba:	dc00      	bgt.n	339be <__aeabi_dsub+0x4e>
   339bc:	e105      	b.n	33bca <__aeabi_dsub+0x25a>
   339be:	2800      	cmp	r0, #0
   339c0:	d110      	bne.n	339e4 <__aeabi_dsub+0x74>
   339c2:	000b      	movs	r3, r1
   339c4:	4313      	orrs	r3, r2
   339c6:	d100      	bne.n	339ca <__aeabi_dsub+0x5a>
   339c8:	e0d7      	b.n	33b7a <__aeabi_dsub+0x20a>
   339ca:	1e6b      	subs	r3, r5, #1
   339cc:	2b00      	cmp	r3, #0
   339ce:	d000      	beq.n	339d2 <__aeabi_dsub+0x62>
   339d0:	e14b      	b.n	33c6a <__aeabi_dsub+0x2fa>
   339d2:	4653      	mov	r3, sl
   339d4:	1a9f      	subs	r7, r3, r2
   339d6:	45ba      	cmp	sl, r7
   339d8:	4180      	sbcs	r0, r0
   339da:	1a64      	subs	r4, r4, r1
   339dc:	4240      	negs	r0, r0
   339de:	1a24      	subs	r4, r4, r0
   339e0:	2601      	movs	r6, #1
   339e2:	e01e      	b.n	33a22 <__aeabi_dsub+0xb2>
   339e4:	4bb3      	ldr	r3, [pc, #716]	; (33cb4 <__aeabi_dsub+0x344>)
   339e6:	429e      	cmp	r6, r3
   339e8:	d048      	beq.n	33a7c <__aeabi_dsub+0x10c>
   339ea:	2380      	movs	r3, #128	; 0x80
   339ec:	041b      	lsls	r3, r3, #16
   339ee:	4319      	orrs	r1, r3
   339f0:	2d38      	cmp	r5, #56	; 0x38
   339f2:	dd00      	ble.n	339f6 <__aeabi_dsub+0x86>
   339f4:	e119      	b.n	33c2a <__aeabi_dsub+0x2ba>
   339f6:	2d1f      	cmp	r5, #31
   339f8:	dd00      	ble.n	339fc <__aeabi_dsub+0x8c>
   339fa:	e14c      	b.n	33c96 <__aeabi_dsub+0x326>
   339fc:	2320      	movs	r3, #32
   339fe:	000f      	movs	r7, r1
   33a00:	1b5b      	subs	r3, r3, r5
   33a02:	0010      	movs	r0, r2
   33a04:	409a      	lsls	r2, r3
   33a06:	409f      	lsls	r7, r3
   33a08:	40e8      	lsrs	r0, r5
   33a0a:	1e53      	subs	r3, r2, #1
   33a0c:	419a      	sbcs	r2, r3
   33a0e:	40e9      	lsrs	r1, r5
   33a10:	4307      	orrs	r7, r0
   33a12:	4317      	orrs	r7, r2
   33a14:	4653      	mov	r3, sl
   33a16:	1bdf      	subs	r7, r3, r7
   33a18:	1a61      	subs	r1, r4, r1
   33a1a:	45ba      	cmp	sl, r7
   33a1c:	41a4      	sbcs	r4, r4
   33a1e:	4264      	negs	r4, r4
   33a20:	1b0c      	subs	r4, r1, r4
   33a22:	0223      	lsls	r3, r4, #8
   33a24:	d400      	bmi.n	33a28 <__aeabi_dsub+0xb8>
   33a26:	e0c5      	b.n	33bb4 <__aeabi_dsub+0x244>
   33a28:	0264      	lsls	r4, r4, #9
   33a2a:	0a65      	lsrs	r5, r4, #9
   33a2c:	2d00      	cmp	r5, #0
   33a2e:	d100      	bne.n	33a32 <__aeabi_dsub+0xc2>
   33a30:	e0f6      	b.n	33c20 <__aeabi_dsub+0x2b0>
   33a32:	0028      	movs	r0, r5
   33a34:	f000 fbfa 	bl	3422c <__clzsi2>
   33a38:	0003      	movs	r3, r0
   33a3a:	3b08      	subs	r3, #8
   33a3c:	2b1f      	cmp	r3, #31
   33a3e:	dd00      	ble.n	33a42 <__aeabi_dsub+0xd2>
   33a40:	e0e9      	b.n	33c16 <__aeabi_dsub+0x2a6>
   33a42:	2220      	movs	r2, #32
   33a44:	003c      	movs	r4, r7
   33a46:	1ad2      	subs	r2, r2, r3
   33a48:	409d      	lsls	r5, r3
   33a4a:	40d4      	lsrs	r4, r2
   33a4c:	409f      	lsls	r7, r3
   33a4e:	4325      	orrs	r5, r4
   33a50:	429e      	cmp	r6, r3
   33a52:	dd00      	ble.n	33a56 <__aeabi_dsub+0xe6>
   33a54:	e0db      	b.n	33c0e <__aeabi_dsub+0x29e>
   33a56:	1b9e      	subs	r6, r3, r6
   33a58:	1c73      	adds	r3, r6, #1
   33a5a:	2b1f      	cmp	r3, #31
   33a5c:	dd00      	ble.n	33a60 <__aeabi_dsub+0xf0>
   33a5e:	e10a      	b.n	33c76 <__aeabi_dsub+0x306>
   33a60:	2220      	movs	r2, #32
   33a62:	0038      	movs	r0, r7
   33a64:	1ad2      	subs	r2, r2, r3
   33a66:	0029      	movs	r1, r5
   33a68:	4097      	lsls	r7, r2
   33a6a:	002c      	movs	r4, r5
   33a6c:	4091      	lsls	r1, r2
   33a6e:	40d8      	lsrs	r0, r3
   33a70:	1e7a      	subs	r2, r7, #1
   33a72:	4197      	sbcs	r7, r2
   33a74:	40dc      	lsrs	r4, r3
   33a76:	2600      	movs	r6, #0
   33a78:	4301      	orrs	r1, r0
   33a7a:	430f      	orrs	r7, r1
   33a7c:	077b      	lsls	r3, r7, #29
   33a7e:	d009      	beq.n	33a94 <__aeabi_dsub+0x124>
   33a80:	230f      	movs	r3, #15
   33a82:	403b      	ands	r3, r7
   33a84:	2b04      	cmp	r3, #4
   33a86:	d005      	beq.n	33a94 <__aeabi_dsub+0x124>
   33a88:	1d3b      	adds	r3, r7, #4
   33a8a:	42bb      	cmp	r3, r7
   33a8c:	41bf      	sbcs	r7, r7
   33a8e:	427f      	negs	r7, r7
   33a90:	19e4      	adds	r4, r4, r7
   33a92:	001f      	movs	r7, r3
   33a94:	0223      	lsls	r3, r4, #8
   33a96:	d525      	bpl.n	33ae4 <__aeabi_dsub+0x174>
   33a98:	4b86      	ldr	r3, [pc, #536]	; (33cb4 <__aeabi_dsub+0x344>)
   33a9a:	3601      	adds	r6, #1
   33a9c:	429e      	cmp	r6, r3
   33a9e:	d100      	bne.n	33aa2 <__aeabi_dsub+0x132>
   33aa0:	e0af      	b.n	33c02 <__aeabi_dsub+0x292>
   33aa2:	4b85      	ldr	r3, [pc, #532]	; (33cb8 <__aeabi_dsub+0x348>)
   33aa4:	2501      	movs	r5, #1
   33aa6:	401c      	ands	r4, r3
   33aa8:	4643      	mov	r3, r8
   33aaa:	0762      	lsls	r2, r4, #29
   33aac:	08ff      	lsrs	r7, r7, #3
   33aae:	0264      	lsls	r4, r4, #9
   33ab0:	0576      	lsls	r6, r6, #21
   33ab2:	4317      	orrs	r7, r2
   33ab4:	0b24      	lsrs	r4, r4, #12
   33ab6:	0d76      	lsrs	r6, r6, #21
   33ab8:	401d      	ands	r5, r3
   33aba:	2100      	movs	r1, #0
   33abc:	0324      	lsls	r4, r4, #12
   33abe:	0b23      	lsrs	r3, r4, #12
   33ac0:	0d0c      	lsrs	r4, r1, #20
   33ac2:	4a7e      	ldr	r2, [pc, #504]	; (33cbc <__aeabi_dsub+0x34c>)
   33ac4:	0524      	lsls	r4, r4, #20
   33ac6:	431c      	orrs	r4, r3
   33ac8:	4014      	ands	r4, r2
   33aca:	0533      	lsls	r3, r6, #20
   33acc:	4323      	orrs	r3, r4
   33ace:	005b      	lsls	r3, r3, #1
   33ad0:	07ed      	lsls	r5, r5, #31
   33ad2:	085b      	lsrs	r3, r3, #1
   33ad4:	432b      	orrs	r3, r5
   33ad6:	0038      	movs	r0, r7
   33ad8:	0019      	movs	r1, r3
   33ada:	bc1c      	pop	{r2, r3, r4}
   33adc:	4690      	mov	r8, r2
   33ade:	4699      	mov	r9, r3
   33ae0:	46a2      	mov	sl, r4
   33ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33ae4:	2501      	movs	r5, #1
   33ae6:	4643      	mov	r3, r8
   33ae8:	0762      	lsls	r2, r4, #29
   33aea:	08ff      	lsrs	r7, r7, #3
   33aec:	4317      	orrs	r7, r2
   33aee:	08e4      	lsrs	r4, r4, #3
   33af0:	401d      	ands	r5, r3
   33af2:	4b70      	ldr	r3, [pc, #448]	; (33cb4 <__aeabi_dsub+0x344>)
   33af4:	429e      	cmp	r6, r3
   33af6:	d036      	beq.n	33b66 <__aeabi_dsub+0x1f6>
   33af8:	0324      	lsls	r4, r4, #12
   33afa:	0576      	lsls	r6, r6, #21
   33afc:	0b24      	lsrs	r4, r4, #12
   33afe:	0d76      	lsrs	r6, r6, #21
   33b00:	e7db      	b.n	33aba <__aeabi_dsub+0x14a>
   33b02:	4663      	mov	r3, ip
   33b04:	1af3      	subs	r3, r6, r3
   33b06:	2b00      	cmp	r3, #0
   33b08:	dc00      	bgt.n	33b0c <__aeabi_dsub+0x19c>
   33b0a:	e094      	b.n	33c36 <__aeabi_dsub+0x2c6>
   33b0c:	4660      	mov	r0, ip
   33b0e:	2800      	cmp	r0, #0
   33b10:	d035      	beq.n	33b7e <__aeabi_dsub+0x20e>
   33b12:	4868      	ldr	r0, [pc, #416]	; (33cb4 <__aeabi_dsub+0x344>)
   33b14:	4286      	cmp	r6, r0
   33b16:	d0b1      	beq.n	33a7c <__aeabi_dsub+0x10c>
   33b18:	2780      	movs	r7, #128	; 0x80
   33b1a:	043f      	lsls	r7, r7, #16
   33b1c:	4339      	orrs	r1, r7
   33b1e:	2b38      	cmp	r3, #56	; 0x38
   33b20:	dc00      	bgt.n	33b24 <__aeabi_dsub+0x1b4>
   33b22:	e0fd      	b.n	33d20 <__aeabi_dsub+0x3b0>
   33b24:	430a      	orrs	r2, r1
   33b26:	0017      	movs	r7, r2
   33b28:	2100      	movs	r1, #0
   33b2a:	1e7a      	subs	r2, r7, #1
   33b2c:	4197      	sbcs	r7, r2
   33b2e:	4457      	add	r7, sl
   33b30:	4557      	cmp	r7, sl
   33b32:	4180      	sbcs	r0, r0
   33b34:	1909      	adds	r1, r1, r4
   33b36:	4244      	negs	r4, r0
   33b38:	190c      	adds	r4, r1, r4
   33b3a:	0223      	lsls	r3, r4, #8
   33b3c:	d53a      	bpl.n	33bb4 <__aeabi_dsub+0x244>
   33b3e:	4b5d      	ldr	r3, [pc, #372]	; (33cb4 <__aeabi_dsub+0x344>)
   33b40:	3601      	adds	r6, #1
   33b42:	429e      	cmp	r6, r3
   33b44:	d100      	bne.n	33b48 <__aeabi_dsub+0x1d8>
   33b46:	e14b      	b.n	33de0 <__aeabi_dsub+0x470>
   33b48:	2201      	movs	r2, #1
   33b4a:	4b5b      	ldr	r3, [pc, #364]	; (33cb8 <__aeabi_dsub+0x348>)
   33b4c:	401c      	ands	r4, r3
   33b4e:	087b      	lsrs	r3, r7, #1
   33b50:	4017      	ands	r7, r2
   33b52:	431f      	orrs	r7, r3
   33b54:	07e2      	lsls	r2, r4, #31
   33b56:	4317      	orrs	r7, r2
   33b58:	0864      	lsrs	r4, r4, #1
   33b5a:	e78f      	b.n	33a7c <__aeabi_dsub+0x10c>
   33b5c:	0008      	movs	r0, r1
   33b5e:	4310      	orrs	r0, r2
   33b60:	d000      	beq.n	33b64 <__aeabi_dsub+0x1f4>
   33b62:	e724      	b.n	339ae <__aeabi_dsub+0x3e>
   33b64:	e721      	b.n	339aa <__aeabi_dsub+0x3a>
   33b66:	0023      	movs	r3, r4
   33b68:	433b      	orrs	r3, r7
   33b6a:	d100      	bne.n	33b6e <__aeabi_dsub+0x1fe>
   33b6c:	e1b9      	b.n	33ee2 <__aeabi_dsub+0x572>
   33b6e:	2280      	movs	r2, #128	; 0x80
   33b70:	0312      	lsls	r2, r2, #12
   33b72:	4314      	orrs	r4, r2
   33b74:	0324      	lsls	r4, r4, #12
   33b76:	0b24      	lsrs	r4, r4, #12
   33b78:	e79f      	b.n	33aba <__aeabi_dsub+0x14a>
   33b7a:	002e      	movs	r6, r5
   33b7c:	e77e      	b.n	33a7c <__aeabi_dsub+0x10c>
   33b7e:	0008      	movs	r0, r1
   33b80:	4310      	orrs	r0, r2
   33b82:	d100      	bne.n	33b86 <__aeabi_dsub+0x216>
   33b84:	e0ca      	b.n	33d1c <__aeabi_dsub+0x3ac>
   33b86:	1e58      	subs	r0, r3, #1
   33b88:	4684      	mov	ip, r0
   33b8a:	2800      	cmp	r0, #0
   33b8c:	d000      	beq.n	33b90 <__aeabi_dsub+0x220>
   33b8e:	e0e7      	b.n	33d60 <__aeabi_dsub+0x3f0>
   33b90:	4452      	add	r2, sl
   33b92:	4552      	cmp	r2, sl
   33b94:	4180      	sbcs	r0, r0
   33b96:	1864      	adds	r4, r4, r1
   33b98:	4240      	negs	r0, r0
   33b9a:	1824      	adds	r4, r4, r0
   33b9c:	0017      	movs	r7, r2
   33b9e:	2601      	movs	r6, #1
   33ba0:	0223      	lsls	r3, r4, #8
   33ba2:	d507      	bpl.n	33bb4 <__aeabi_dsub+0x244>
   33ba4:	2602      	movs	r6, #2
   33ba6:	e7cf      	b.n	33b48 <__aeabi_dsub+0x1d8>
   33ba8:	4664      	mov	r4, ip
   33baa:	432c      	orrs	r4, r5
   33bac:	d100      	bne.n	33bb0 <__aeabi_dsub+0x240>
   33bae:	e1b3      	b.n	33f18 <__aeabi_dsub+0x5a8>
   33bb0:	002c      	movs	r4, r5
   33bb2:	4667      	mov	r7, ip
   33bb4:	077b      	lsls	r3, r7, #29
   33bb6:	d000      	beq.n	33bba <__aeabi_dsub+0x24a>
   33bb8:	e762      	b.n	33a80 <__aeabi_dsub+0x110>
   33bba:	0763      	lsls	r3, r4, #29
   33bbc:	08ff      	lsrs	r7, r7, #3
   33bbe:	431f      	orrs	r7, r3
   33bc0:	2501      	movs	r5, #1
   33bc2:	4643      	mov	r3, r8
   33bc4:	08e4      	lsrs	r4, r4, #3
   33bc6:	401d      	ands	r5, r3
   33bc8:	e793      	b.n	33af2 <__aeabi_dsub+0x182>
   33bca:	2d00      	cmp	r5, #0
   33bcc:	d178      	bne.n	33cc0 <__aeabi_dsub+0x350>
   33bce:	1c75      	adds	r5, r6, #1
   33bd0:	056d      	lsls	r5, r5, #21
   33bd2:	0d6d      	lsrs	r5, r5, #21
   33bd4:	2d01      	cmp	r5, #1
   33bd6:	dc00      	bgt.n	33bda <__aeabi_dsub+0x26a>
   33bd8:	e0f2      	b.n	33dc0 <__aeabi_dsub+0x450>
   33bda:	4650      	mov	r0, sl
   33bdc:	1a80      	subs	r0, r0, r2
   33bde:	4582      	cmp	sl, r0
   33be0:	41bf      	sbcs	r7, r7
   33be2:	1a65      	subs	r5, r4, r1
   33be4:	427f      	negs	r7, r7
   33be6:	1bed      	subs	r5, r5, r7
   33be8:	4684      	mov	ip, r0
   33bea:	0228      	lsls	r0, r5, #8
   33bec:	d400      	bmi.n	33bf0 <__aeabi_dsub+0x280>
   33bee:	e08c      	b.n	33d0a <__aeabi_dsub+0x39a>
   33bf0:	4650      	mov	r0, sl
   33bf2:	1a17      	subs	r7, r2, r0
   33bf4:	42ba      	cmp	r2, r7
   33bf6:	4192      	sbcs	r2, r2
   33bf8:	1b0c      	subs	r4, r1, r4
   33bfa:	4255      	negs	r5, r2
   33bfc:	1b65      	subs	r5, r4, r5
   33bfe:	4698      	mov	r8, r3
   33c00:	e714      	b.n	33a2c <__aeabi_dsub+0xbc>
   33c02:	2501      	movs	r5, #1
   33c04:	4643      	mov	r3, r8
   33c06:	2400      	movs	r4, #0
   33c08:	401d      	ands	r5, r3
   33c0a:	2700      	movs	r7, #0
   33c0c:	e755      	b.n	33aba <__aeabi_dsub+0x14a>
   33c0e:	4c2a      	ldr	r4, [pc, #168]	; (33cb8 <__aeabi_dsub+0x348>)
   33c10:	1af6      	subs	r6, r6, r3
   33c12:	402c      	ands	r4, r5
   33c14:	e732      	b.n	33a7c <__aeabi_dsub+0x10c>
   33c16:	003d      	movs	r5, r7
   33c18:	3828      	subs	r0, #40	; 0x28
   33c1a:	4085      	lsls	r5, r0
   33c1c:	2700      	movs	r7, #0
   33c1e:	e717      	b.n	33a50 <__aeabi_dsub+0xe0>
   33c20:	0038      	movs	r0, r7
   33c22:	f000 fb03 	bl	3422c <__clzsi2>
   33c26:	3020      	adds	r0, #32
   33c28:	e706      	b.n	33a38 <__aeabi_dsub+0xc8>
   33c2a:	430a      	orrs	r2, r1
   33c2c:	0017      	movs	r7, r2
   33c2e:	2100      	movs	r1, #0
   33c30:	1e7a      	subs	r2, r7, #1
   33c32:	4197      	sbcs	r7, r2
   33c34:	e6ee      	b.n	33a14 <__aeabi_dsub+0xa4>
   33c36:	2b00      	cmp	r3, #0
   33c38:	d000      	beq.n	33c3c <__aeabi_dsub+0x2cc>
   33c3a:	e0e5      	b.n	33e08 <__aeabi_dsub+0x498>
   33c3c:	1c73      	adds	r3, r6, #1
   33c3e:	469c      	mov	ip, r3
   33c40:	055b      	lsls	r3, r3, #21
   33c42:	0d5b      	lsrs	r3, r3, #21
   33c44:	2b01      	cmp	r3, #1
   33c46:	dc00      	bgt.n	33c4a <__aeabi_dsub+0x2da>
   33c48:	e09f      	b.n	33d8a <__aeabi_dsub+0x41a>
   33c4a:	4b1a      	ldr	r3, [pc, #104]	; (33cb4 <__aeabi_dsub+0x344>)
   33c4c:	459c      	cmp	ip, r3
   33c4e:	d100      	bne.n	33c52 <__aeabi_dsub+0x2e2>
   33c50:	e0c5      	b.n	33dde <__aeabi_dsub+0x46e>
   33c52:	4452      	add	r2, sl
   33c54:	4552      	cmp	r2, sl
   33c56:	4180      	sbcs	r0, r0
   33c58:	1864      	adds	r4, r4, r1
   33c5a:	4240      	negs	r0, r0
   33c5c:	1824      	adds	r4, r4, r0
   33c5e:	07e7      	lsls	r7, r4, #31
   33c60:	0852      	lsrs	r2, r2, #1
   33c62:	4317      	orrs	r7, r2
   33c64:	0864      	lsrs	r4, r4, #1
   33c66:	4666      	mov	r6, ip
   33c68:	e708      	b.n	33a7c <__aeabi_dsub+0x10c>
   33c6a:	4812      	ldr	r0, [pc, #72]	; (33cb4 <__aeabi_dsub+0x344>)
   33c6c:	4285      	cmp	r5, r0
   33c6e:	d100      	bne.n	33c72 <__aeabi_dsub+0x302>
   33c70:	e085      	b.n	33d7e <__aeabi_dsub+0x40e>
   33c72:	001d      	movs	r5, r3
   33c74:	e6bc      	b.n	339f0 <__aeabi_dsub+0x80>
   33c76:	0029      	movs	r1, r5
   33c78:	3e1f      	subs	r6, #31
   33c7a:	40f1      	lsrs	r1, r6
   33c7c:	2b20      	cmp	r3, #32
   33c7e:	d100      	bne.n	33c82 <__aeabi_dsub+0x312>
   33c80:	e07f      	b.n	33d82 <__aeabi_dsub+0x412>
   33c82:	2240      	movs	r2, #64	; 0x40
   33c84:	1ad3      	subs	r3, r2, r3
   33c86:	409d      	lsls	r5, r3
   33c88:	432f      	orrs	r7, r5
   33c8a:	1e7d      	subs	r5, r7, #1
   33c8c:	41af      	sbcs	r7, r5
   33c8e:	2400      	movs	r4, #0
   33c90:	430f      	orrs	r7, r1
   33c92:	2600      	movs	r6, #0
   33c94:	e78e      	b.n	33bb4 <__aeabi_dsub+0x244>
   33c96:	002b      	movs	r3, r5
   33c98:	000f      	movs	r7, r1
   33c9a:	3b20      	subs	r3, #32
   33c9c:	40df      	lsrs	r7, r3
   33c9e:	2d20      	cmp	r5, #32
   33ca0:	d071      	beq.n	33d86 <__aeabi_dsub+0x416>
   33ca2:	2340      	movs	r3, #64	; 0x40
   33ca4:	1b5d      	subs	r5, r3, r5
   33ca6:	40a9      	lsls	r1, r5
   33ca8:	430a      	orrs	r2, r1
   33caa:	1e51      	subs	r1, r2, #1
   33cac:	418a      	sbcs	r2, r1
   33cae:	2100      	movs	r1, #0
   33cb0:	4317      	orrs	r7, r2
   33cb2:	e6af      	b.n	33a14 <__aeabi_dsub+0xa4>
   33cb4:	000007ff 	.word	0x000007ff
   33cb8:	ff7fffff 	.word	0xff7fffff
   33cbc:	800fffff 	.word	0x800fffff
   33cc0:	2e00      	cmp	r6, #0
   33cc2:	d03e      	beq.n	33d42 <__aeabi_dsub+0x3d2>
   33cc4:	4eb3      	ldr	r6, [pc, #716]	; (33f94 <__aeabi_dsub+0x624>)
   33cc6:	45b4      	cmp	ip, r6
   33cc8:	d045      	beq.n	33d56 <__aeabi_dsub+0x3e6>
   33cca:	2680      	movs	r6, #128	; 0x80
   33ccc:	0436      	lsls	r6, r6, #16
   33cce:	426d      	negs	r5, r5
   33cd0:	4334      	orrs	r4, r6
   33cd2:	2d38      	cmp	r5, #56	; 0x38
   33cd4:	dd00      	ble.n	33cd8 <__aeabi_dsub+0x368>
   33cd6:	e0a8      	b.n	33e2a <__aeabi_dsub+0x4ba>
   33cd8:	2d1f      	cmp	r5, #31
   33cda:	dd00      	ble.n	33cde <__aeabi_dsub+0x36e>
   33cdc:	e11f      	b.n	33f1e <__aeabi_dsub+0x5ae>
   33cde:	2620      	movs	r6, #32
   33ce0:	0027      	movs	r7, r4
   33ce2:	4650      	mov	r0, sl
   33ce4:	1b76      	subs	r6, r6, r5
   33ce6:	40b7      	lsls	r7, r6
   33ce8:	40e8      	lsrs	r0, r5
   33cea:	4307      	orrs	r7, r0
   33cec:	4650      	mov	r0, sl
   33cee:	40b0      	lsls	r0, r6
   33cf0:	1e46      	subs	r6, r0, #1
   33cf2:	41b0      	sbcs	r0, r6
   33cf4:	40ec      	lsrs	r4, r5
   33cf6:	4338      	orrs	r0, r7
   33cf8:	1a17      	subs	r7, r2, r0
   33cfa:	42ba      	cmp	r2, r7
   33cfc:	4192      	sbcs	r2, r2
   33cfe:	1b0c      	subs	r4, r1, r4
   33d00:	4252      	negs	r2, r2
   33d02:	1aa4      	subs	r4, r4, r2
   33d04:	4666      	mov	r6, ip
   33d06:	4698      	mov	r8, r3
   33d08:	e68b      	b.n	33a22 <__aeabi_dsub+0xb2>
   33d0a:	4664      	mov	r4, ip
   33d0c:	4667      	mov	r7, ip
   33d0e:	432c      	orrs	r4, r5
   33d10:	d000      	beq.n	33d14 <__aeabi_dsub+0x3a4>
   33d12:	e68b      	b.n	33a2c <__aeabi_dsub+0xbc>
   33d14:	2500      	movs	r5, #0
   33d16:	2600      	movs	r6, #0
   33d18:	2700      	movs	r7, #0
   33d1a:	e6ea      	b.n	33af2 <__aeabi_dsub+0x182>
   33d1c:	001e      	movs	r6, r3
   33d1e:	e6ad      	b.n	33a7c <__aeabi_dsub+0x10c>
   33d20:	2b1f      	cmp	r3, #31
   33d22:	dc60      	bgt.n	33de6 <__aeabi_dsub+0x476>
   33d24:	2720      	movs	r7, #32
   33d26:	1af8      	subs	r0, r7, r3
   33d28:	000f      	movs	r7, r1
   33d2a:	4684      	mov	ip, r0
   33d2c:	4087      	lsls	r7, r0
   33d2e:	0010      	movs	r0, r2
   33d30:	40d8      	lsrs	r0, r3
   33d32:	4307      	orrs	r7, r0
   33d34:	4660      	mov	r0, ip
   33d36:	4082      	lsls	r2, r0
   33d38:	1e50      	subs	r0, r2, #1
   33d3a:	4182      	sbcs	r2, r0
   33d3c:	40d9      	lsrs	r1, r3
   33d3e:	4317      	orrs	r7, r2
   33d40:	e6f5      	b.n	33b2e <__aeabi_dsub+0x1be>
   33d42:	0026      	movs	r6, r4
   33d44:	4650      	mov	r0, sl
   33d46:	4306      	orrs	r6, r0
   33d48:	d005      	beq.n	33d56 <__aeabi_dsub+0x3e6>
   33d4a:	43ed      	mvns	r5, r5
   33d4c:	2d00      	cmp	r5, #0
   33d4e:	d0d3      	beq.n	33cf8 <__aeabi_dsub+0x388>
   33d50:	4e90      	ldr	r6, [pc, #576]	; (33f94 <__aeabi_dsub+0x624>)
   33d52:	45b4      	cmp	ip, r6
   33d54:	d1bd      	bne.n	33cd2 <__aeabi_dsub+0x362>
   33d56:	000c      	movs	r4, r1
   33d58:	0017      	movs	r7, r2
   33d5a:	4666      	mov	r6, ip
   33d5c:	4698      	mov	r8, r3
   33d5e:	e68d      	b.n	33a7c <__aeabi_dsub+0x10c>
   33d60:	488c      	ldr	r0, [pc, #560]	; (33f94 <__aeabi_dsub+0x624>)
   33d62:	4283      	cmp	r3, r0
   33d64:	d00b      	beq.n	33d7e <__aeabi_dsub+0x40e>
   33d66:	4663      	mov	r3, ip
   33d68:	e6d9      	b.n	33b1e <__aeabi_dsub+0x1ae>
   33d6a:	2d00      	cmp	r5, #0
   33d6c:	d000      	beq.n	33d70 <__aeabi_dsub+0x400>
   33d6e:	e096      	b.n	33e9e <__aeabi_dsub+0x52e>
   33d70:	0008      	movs	r0, r1
   33d72:	4310      	orrs	r0, r2
   33d74:	d100      	bne.n	33d78 <__aeabi_dsub+0x408>
   33d76:	e0e2      	b.n	33f3e <__aeabi_dsub+0x5ce>
   33d78:	000c      	movs	r4, r1
   33d7a:	0017      	movs	r7, r2
   33d7c:	4698      	mov	r8, r3
   33d7e:	4e85      	ldr	r6, [pc, #532]	; (33f94 <__aeabi_dsub+0x624>)
   33d80:	e67c      	b.n	33a7c <__aeabi_dsub+0x10c>
   33d82:	2500      	movs	r5, #0
   33d84:	e780      	b.n	33c88 <__aeabi_dsub+0x318>
   33d86:	2100      	movs	r1, #0
   33d88:	e78e      	b.n	33ca8 <__aeabi_dsub+0x338>
   33d8a:	0023      	movs	r3, r4
   33d8c:	4650      	mov	r0, sl
   33d8e:	4303      	orrs	r3, r0
   33d90:	2e00      	cmp	r6, #0
   33d92:	d000      	beq.n	33d96 <__aeabi_dsub+0x426>
   33d94:	e0a8      	b.n	33ee8 <__aeabi_dsub+0x578>
   33d96:	2b00      	cmp	r3, #0
   33d98:	d100      	bne.n	33d9c <__aeabi_dsub+0x42c>
   33d9a:	e0de      	b.n	33f5a <__aeabi_dsub+0x5ea>
   33d9c:	000b      	movs	r3, r1
   33d9e:	4313      	orrs	r3, r2
   33da0:	d100      	bne.n	33da4 <__aeabi_dsub+0x434>
   33da2:	e66b      	b.n	33a7c <__aeabi_dsub+0x10c>
   33da4:	4452      	add	r2, sl
   33da6:	4552      	cmp	r2, sl
   33da8:	4180      	sbcs	r0, r0
   33daa:	1864      	adds	r4, r4, r1
   33dac:	4240      	negs	r0, r0
   33dae:	1824      	adds	r4, r4, r0
   33db0:	0017      	movs	r7, r2
   33db2:	0223      	lsls	r3, r4, #8
   33db4:	d400      	bmi.n	33db8 <__aeabi_dsub+0x448>
   33db6:	e6fd      	b.n	33bb4 <__aeabi_dsub+0x244>
   33db8:	4b77      	ldr	r3, [pc, #476]	; (33f98 <__aeabi_dsub+0x628>)
   33dba:	4666      	mov	r6, ip
   33dbc:	401c      	ands	r4, r3
   33dbe:	e65d      	b.n	33a7c <__aeabi_dsub+0x10c>
   33dc0:	0025      	movs	r5, r4
   33dc2:	4650      	mov	r0, sl
   33dc4:	4305      	orrs	r5, r0
   33dc6:	2e00      	cmp	r6, #0
   33dc8:	d1cf      	bne.n	33d6a <__aeabi_dsub+0x3fa>
   33dca:	2d00      	cmp	r5, #0
   33dcc:	d14f      	bne.n	33e6e <__aeabi_dsub+0x4fe>
   33dce:	000c      	movs	r4, r1
   33dd0:	4314      	orrs	r4, r2
   33dd2:	d100      	bne.n	33dd6 <__aeabi_dsub+0x466>
   33dd4:	e0a0      	b.n	33f18 <__aeabi_dsub+0x5a8>
   33dd6:	000c      	movs	r4, r1
   33dd8:	0017      	movs	r7, r2
   33dda:	4698      	mov	r8, r3
   33ddc:	e64e      	b.n	33a7c <__aeabi_dsub+0x10c>
   33dde:	4666      	mov	r6, ip
   33de0:	2400      	movs	r4, #0
   33de2:	2700      	movs	r7, #0
   33de4:	e685      	b.n	33af2 <__aeabi_dsub+0x182>
   33de6:	001f      	movs	r7, r3
   33de8:	0008      	movs	r0, r1
   33dea:	3f20      	subs	r7, #32
   33dec:	40f8      	lsrs	r0, r7
   33dee:	0007      	movs	r7, r0
   33df0:	2b20      	cmp	r3, #32
   33df2:	d100      	bne.n	33df6 <__aeabi_dsub+0x486>
   33df4:	e08e      	b.n	33f14 <__aeabi_dsub+0x5a4>
   33df6:	2040      	movs	r0, #64	; 0x40
   33df8:	1ac3      	subs	r3, r0, r3
   33dfa:	4099      	lsls	r1, r3
   33dfc:	430a      	orrs	r2, r1
   33dfe:	1e51      	subs	r1, r2, #1
   33e00:	418a      	sbcs	r2, r1
   33e02:	2100      	movs	r1, #0
   33e04:	4317      	orrs	r7, r2
   33e06:	e692      	b.n	33b2e <__aeabi_dsub+0x1be>
   33e08:	2e00      	cmp	r6, #0
   33e0a:	d114      	bne.n	33e36 <__aeabi_dsub+0x4c6>
   33e0c:	0026      	movs	r6, r4
   33e0e:	4650      	mov	r0, sl
   33e10:	4306      	orrs	r6, r0
   33e12:	d062      	beq.n	33eda <__aeabi_dsub+0x56a>
   33e14:	43db      	mvns	r3, r3
   33e16:	2b00      	cmp	r3, #0
   33e18:	d15c      	bne.n	33ed4 <__aeabi_dsub+0x564>
   33e1a:	1887      	adds	r7, r0, r2
   33e1c:	4297      	cmp	r7, r2
   33e1e:	4192      	sbcs	r2, r2
   33e20:	1864      	adds	r4, r4, r1
   33e22:	4252      	negs	r2, r2
   33e24:	18a4      	adds	r4, r4, r2
   33e26:	4666      	mov	r6, ip
   33e28:	e687      	b.n	33b3a <__aeabi_dsub+0x1ca>
   33e2a:	4650      	mov	r0, sl
   33e2c:	4320      	orrs	r0, r4
   33e2e:	1e44      	subs	r4, r0, #1
   33e30:	41a0      	sbcs	r0, r4
   33e32:	2400      	movs	r4, #0
   33e34:	e760      	b.n	33cf8 <__aeabi_dsub+0x388>
   33e36:	4e57      	ldr	r6, [pc, #348]	; (33f94 <__aeabi_dsub+0x624>)
   33e38:	45b4      	cmp	ip, r6
   33e3a:	d04e      	beq.n	33eda <__aeabi_dsub+0x56a>
   33e3c:	2680      	movs	r6, #128	; 0x80
   33e3e:	0436      	lsls	r6, r6, #16
   33e40:	425b      	negs	r3, r3
   33e42:	4334      	orrs	r4, r6
   33e44:	2b38      	cmp	r3, #56	; 0x38
   33e46:	dd00      	ble.n	33e4a <__aeabi_dsub+0x4da>
   33e48:	e07f      	b.n	33f4a <__aeabi_dsub+0x5da>
   33e4a:	2b1f      	cmp	r3, #31
   33e4c:	dd00      	ble.n	33e50 <__aeabi_dsub+0x4e0>
   33e4e:	e08b      	b.n	33f68 <__aeabi_dsub+0x5f8>
   33e50:	2620      	movs	r6, #32
   33e52:	0027      	movs	r7, r4
   33e54:	4650      	mov	r0, sl
   33e56:	1af6      	subs	r6, r6, r3
   33e58:	40b7      	lsls	r7, r6
   33e5a:	40d8      	lsrs	r0, r3
   33e5c:	4307      	orrs	r7, r0
   33e5e:	4650      	mov	r0, sl
   33e60:	40b0      	lsls	r0, r6
   33e62:	1e46      	subs	r6, r0, #1
   33e64:	41b0      	sbcs	r0, r6
   33e66:	4307      	orrs	r7, r0
   33e68:	40dc      	lsrs	r4, r3
   33e6a:	18bf      	adds	r7, r7, r2
   33e6c:	e7d6      	b.n	33e1c <__aeabi_dsub+0x4ac>
   33e6e:	000d      	movs	r5, r1
   33e70:	4315      	orrs	r5, r2
   33e72:	d100      	bne.n	33e76 <__aeabi_dsub+0x506>
   33e74:	e602      	b.n	33a7c <__aeabi_dsub+0x10c>
   33e76:	4650      	mov	r0, sl
   33e78:	1a80      	subs	r0, r0, r2
   33e7a:	4582      	cmp	sl, r0
   33e7c:	41bf      	sbcs	r7, r7
   33e7e:	1a65      	subs	r5, r4, r1
   33e80:	427f      	negs	r7, r7
   33e82:	1bed      	subs	r5, r5, r7
   33e84:	4684      	mov	ip, r0
   33e86:	0228      	lsls	r0, r5, #8
   33e88:	d400      	bmi.n	33e8c <__aeabi_dsub+0x51c>
   33e8a:	e68d      	b.n	33ba8 <__aeabi_dsub+0x238>
   33e8c:	4650      	mov	r0, sl
   33e8e:	1a17      	subs	r7, r2, r0
   33e90:	42ba      	cmp	r2, r7
   33e92:	4192      	sbcs	r2, r2
   33e94:	1b0c      	subs	r4, r1, r4
   33e96:	4252      	negs	r2, r2
   33e98:	1aa4      	subs	r4, r4, r2
   33e9a:	4698      	mov	r8, r3
   33e9c:	e5ee      	b.n	33a7c <__aeabi_dsub+0x10c>
   33e9e:	000d      	movs	r5, r1
   33ea0:	4315      	orrs	r5, r2
   33ea2:	d100      	bne.n	33ea6 <__aeabi_dsub+0x536>
   33ea4:	e76b      	b.n	33d7e <__aeabi_dsub+0x40e>
   33ea6:	4650      	mov	r0, sl
   33ea8:	0767      	lsls	r7, r4, #29
   33eaa:	08c0      	lsrs	r0, r0, #3
   33eac:	4307      	orrs	r7, r0
   33eae:	2080      	movs	r0, #128	; 0x80
   33eb0:	08e4      	lsrs	r4, r4, #3
   33eb2:	0300      	lsls	r0, r0, #12
   33eb4:	4204      	tst	r4, r0
   33eb6:	d007      	beq.n	33ec8 <__aeabi_dsub+0x558>
   33eb8:	08cd      	lsrs	r5, r1, #3
   33eba:	4205      	tst	r5, r0
   33ebc:	d104      	bne.n	33ec8 <__aeabi_dsub+0x558>
   33ebe:	002c      	movs	r4, r5
   33ec0:	4698      	mov	r8, r3
   33ec2:	08d7      	lsrs	r7, r2, #3
   33ec4:	0749      	lsls	r1, r1, #29
   33ec6:	430f      	orrs	r7, r1
   33ec8:	0f7b      	lsrs	r3, r7, #29
   33eca:	00e4      	lsls	r4, r4, #3
   33ecc:	431c      	orrs	r4, r3
   33ece:	00ff      	lsls	r7, r7, #3
   33ed0:	4e30      	ldr	r6, [pc, #192]	; (33f94 <__aeabi_dsub+0x624>)
   33ed2:	e5d3      	b.n	33a7c <__aeabi_dsub+0x10c>
   33ed4:	4e2f      	ldr	r6, [pc, #188]	; (33f94 <__aeabi_dsub+0x624>)
   33ed6:	45b4      	cmp	ip, r6
   33ed8:	d1b4      	bne.n	33e44 <__aeabi_dsub+0x4d4>
   33eda:	000c      	movs	r4, r1
   33edc:	0017      	movs	r7, r2
   33ede:	4666      	mov	r6, ip
   33ee0:	e5cc      	b.n	33a7c <__aeabi_dsub+0x10c>
   33ee2:	2700      	movs	r7, #0
   33ee4:	2400      	movs	r4, #0
   33ee6:	e5e8      	b.n	33aba <__aeabi_dsub+0x14a>
   33ee8:	2b00      	cmp	r3, #0
   33eea:	d039      	beq.n	33f60 <__aeabi_dsub+0x5f0>
   33eec:	000b      	movs	r3, r1
   33eee:	4313      	orrs	r3, r2
   33ef0:	d100      	bne.n	33ef4 <__aeabi_dsub+0x584>
   33ef2:	e744      	b.n	33d7e <__aeabi_dsub+0x40e>
   33ef4:	08c0      	lsrs	r0, r0, #3
   33ef6:	0767      	lsls	r7, r4, #29
   33ef8:	4307      	orrs	r7, r0
   33efa:	2080      	movs	r0, #128	; 0x80
   33efc:	08e4      	lsrs	r4, r4, #3
   33efe:	0300      	lsls	r0, r0, #12
   33f00:	4204      	tst	r4, r0
   33f02:	d0e1      	beq.n	33ec8 <__aeabi_dsub+0x558>
   33f04:	08cb      	lsrs	r3, r1, #3
   33f06:	4203      	tst	r3, r0
   33f08:	d1de      	bne.n	33ec8 <__aeabi_dsub+0x558>
   33f0a:	08d7      	lsrs	r7, r2, #3
   33f0c:	0749      	lsls	r1, r1, #29
   33f0e:	430f      	orrs	r7, r1
   33f10:	001c      	movs	r4, r3
   33f12:	e7d9      	b.n	33ec8 <__aeabi_dsub+0x558>
   33f14:	2100      	movs	r1, #0
   33f16:	e771      	b.n	33dfc <__aeabi_dsub+0x48c>
   33f18:	2500      	movs	r5, #0
   33f1a:	2700      	movs	r7, #0
   33f1c:	e5e9      	b.n	33af2 <__aeabi_dsub+0x182>
   33f1e:	002e      	movs	r6, r5
   33f20:	0027      	movs	r7, r4
   33f22:	3e20      	subs	r6, #32
   33f24:	40f7      	lsrs	r7, r6
   33f26:	2d20      	cmp	r5, #32
   33f28:	d02f      	beq.n	33f8a <__aeabi_dsub+0x61a>
   33f2a:	2640      	movs	r6, #64	; 0x40
   33f2c:	1b75      	subs	r5, r6, r5
   33f2e:	40ac      	lsls	r4, r5
   33f30:	4650      	mov	r0, sl
   33f32:	4320      	orrs	r0, r4
   33f34:	1e44      	subs	r4, r0, #1
   33f36:	41a0      	sbcs	r0, r4
   33f38:	2400      	movs	r4, #0
   33f3a:	4338      	orrs	r0, r7
   33f3c:	e6dc      	b.n	33cf8 <__aeabi_dsub+0x388>
   33f3e:	2480      	movs	r4, #128	; 0x80
   33f40:	2500      	movs	r5, #0
   33f42:	0324      	lsls	r4, r4, #12
   33f44:	4e13      	ldr	r6, [pc, #76]	; (33f94 <__aeabi_dsub+0x624>)
   33f46:	2700      	movs	r7, #0
   33f48:	e5d3      	b.n	33af2 <__aeabi_dsub+0x182>
   33f4a:	4650      	mov	r0, sl
   33f4c:	4320      	orrs	r0, r4
   33f4e:	0007      	movs	r7, r0
   33f50:	1e78      	subs	r0, r7, #1
   33f52:	4187      	sbcs	r7, r0
   33f54:	2400      	movs	r4, #0
   33f56:	18bf      	adds	r7, r7, r2
   33f58:	e760      	b.n	33e1c <__aeabi_dsub+0x4ac>
   33f5a:	000c      	movs	r4, r1
   33f5c:	0017      	movs	r7, r2
   33f5e:	e58d      	b.n	33a7c <__aeabi_dsub+0x10c>
   33f60:	000c      	movs	r4, r1
   33f62:	0017      	movs	r7, r2
   33f64:	4e0b      	ldr	r6, [pc, #44]	; (33f94 <__aeabi_dsub+0x624>)
   33f66:	e589      	b.n	33a7c <__aeabi_dsub+0x10c>
   33f68:	001e      	movs	r6, r3
   33f6a:	0027      	movs	r7, r4
   33f6c:	3e20      	subs	r6, #32
   33f6e:	40f7      	lsrs	r7, r6
   33f70:	2b20      	cmp	r3, #32
   33f72:	d00c      	beq.n	33f8e <__aeabi_dsub+0x61e>
   33f74:	2640      	movs	r6, #64	; 0x40
   33f76:	1af3      	subs	r3, r6, r3
   33f78:	409c      	lsls	r4, r3
   33f7a:	4650      	mov	r0, sl
   33f7c:	4320      	orrs	r0, r4
   33f7e:	1e44      	subs	r4, r0, #1
   33f80:	41a0      	sbcs	r0, r4
   33f82:	4307      	orrs	r7, r0
   33f84:	2400      	movs	r4, #0
   33f86:	18bf      	adds	r7, r7, r2
   33f88:	e748      	b.n	33e1c <__aeabi_dsub+0x4ac>
   33f8a:	2400      	movs	r4, #0
   33f8c:	e7d0      	b.n	33f30 <__aeabi_dsub+0x5c0>
   33f8e:	2400      	movs	r4, #0
   33f90:	e7f3      	b.n	33f7a <__aeabi_dsub+0x60a>
   33f92:	46c0      	nop			; (mov r8, r8)
   33f94:	000007ff 	.word	0x000007ff
   33f98:	ff7fffff 	.word	0xff7fffff

00033f9c <__aeabi_d2iz>:
   33f9c:	b530      	push	{r4, r5, lr}
   33f9e:	4d13      	ldr	r5, [pc, #76]	; (33fec <__aeabi_d2iz+0x50>)
   33fa0:	030a      	lsls	r2, r1, #12
   33fa2:	004b      	lsls	r3, r1, #1
   33fa4:	0b12      	lsrs	r2, r2, #12
   33fa6:	0d5b      	lsrs	r3, r3, #21
   33fa8:	0fc9      	lsrs	r1, r1, #31
   33faa:	2400      	movs	r4, #0
   33fac:	42ab      	cmp	r3, r5
   33fae:	dd10      	ble.n	33fd2 <__aeabi_d2iz+0x36>
   33fb0:	4c0f      	ldr	r4, [pc, #60]	; (33ff0 <__aeabi_d2iz+0x54>)
   33fb2:	42a3      	cmp	r3, r4
   33fb4:	dc0f      	bgt.n	33fd6 <__aeabi_d2iz+0x3a>
   33fb6:	2480      	movs	r4, #128	; 0x80
   33fb8:	4d0e      	ldr	r5, [pc, #56]	; (33ff4 <__aeabi_d2iz+0x58>)
   33fba:	0364      	lsls	r4, r4, #13
   33fbc:	4322      	orrs	r2, r4
   33fbe:	1aed      	subs	r5, r5, r3
   33fc0:	2d1f      	cmp	r5, #31
   33fc2:	dd0b      	ble.n	33fdc <__aeabi_d2iz+0x40>
   33fc4:	480c      	ldr	r0, [pc, #48]	; (33ff8 <__aeabi_d2iz+0x5c>)
   33fc6:	1ac3      	subs	r3, r0, r3
   33fc8:	40da      	lsrs	r2, r3
   33fca:	4254      	negs	r4, r2
   33fcc:	2900      	cmp	r1, #0
   33fce:	d100      	bne.n	33fd2 <__aeabi_d2iz+0x36>
   33fd0:	0014      	movs	r4, r2
   33fd2:	0020      	movs	r0, r4
   33fd4:	bd30      	pop	{r4, r5, pc}
   33fd6:	4b09      	ldr	r3, [pc, #36]	; (33ffc <__aeabi_d2iz+0x60>)
   33fd8:	18cc      	adds	r4, r1, r3
   33fda:	e7fa      	b.n	33fd2 <__aeabi_d2iz+0x36>
   33fdc:	4c08      	ldr	r4, [pc, #32]	; (34000 <__aeabi_d2iz+0x64>)
   33fde:	40e8      	lsrs	r0, r5
   33fe0:	46a4      	mov	ip, r4
   33fe2:	4463      	add	r3, ip
   33fe4:	409a      	lsls	r2, r3
   33fe6:	4302      	orrs	r2, r0
   33fe8:	e7ef      	b.n	33fca <__aeabi_d2iz+0x2e>
   33fea:	46c0      	nop			; (mov r8, r8)
   33fec:	000003fe 	.word	0x000003fe
   33ff0:	0000041d 	.word	0x0000041d
   33ff4:	00000433 	.word	0x00000433
   33ff8:	00000413 	.word	0x00000413
   33ffc:	7fffffff 	.word	0x7fffffff
   34000:	fffffbed 	.word	0xfffffbed

00034004 <__aeabi_ui2d>:
   34004:	b510      	push	{r4, lr}
   34006:	1e04      	subs	r4, r0, #0
   34008:	d028      	beq.n	3405c <__aeabi_ui2d+0x58>
   3400a:	f000 f90f 	bl	3422c <__clzsi2>
   3400e:	4b15      	ldr	r3, [pc, #84]	; (34064 <__aeabi_ui2d+0x60>)
   34010:	4a15      	ldr	r2, [pc, #84]	; (34068 <__aeabi_ui2d+0x64>)
   34012:	1a1b      	subs	r3, r3, r0
   34014:	1ad2      	subs	r2, r2, r3
   34016:	2a1f      	cmp	r2, #31
   34018:	dd15      	ble.n	34046 <__aeabi_ui2d+0x42>
   3401a:	4a14      	ldr	r2, [pc, #80]	; (3406c <__aeabi_ui2d+0x68>)
   3401c:	1ad2      	subs	r2, r2, r3
   3401e:	4094      	lsls	r4, r2
   34020:	2200      	movs	r2, #0
   34022:	0324      	lsls	r4, r4, #12
   34024:	055b      	lsls	r3, r3, #21
   34026:	0b24      	lsrs	r4, r4, #12
   34028:	0d5b      	lsrs	r3, r3, #21
   3402a:	2100      	movs	r1, #0
   3402c:	0010      	movs	r0, r2
   3402e:	0324      	lsls	r4, r4, #12
   34030:	0d0a      	lsrs	r2, r1, #20
   34032:	0b24      	lsrs	r4, r4, #12
   34034:	0512      	lsls	r2, r2, #20
   34036:	4322      	orrs	r2, r4
   34038:	4c0d      	ldr	r4, [pc, #52]	; (34070 <__aeabi_ui2d+0x6c>)
   3403a:	051b      	lsls	r3, r3, #20
   3403c:	4022      	ands	r2, r4
   3403e:	4313      	orrs	r3, r2
   34040:	005b      	lsls	r3, r3, #1
   34042:	0859      	lsrs	r1, r3, #1
   34044:	bd10      	pop	{r4, pc}
   34046:	0021      	movs	r1, r4
   34048:	4091      	lsls	r1, r2
   3404a:	000a      	movs	r2, r1
   3404c:	210b      	movs	r1, #11
   3404e:	1a08      	subs	r0, r1, r0
   34050:	40c4      	lsrs	r4, r0
   34052:	055b      	lsls	r3, r3, #21
   34054:	0324      	lsls	r4, r4, #12
   34056:	0b24      	lsrs	r4, r4, #12
   34058:	0d5b      	lsrs	r3, r3, #21
   3405a:	e7e6      	b.n	3402a <__aeabi_ui2d+0x26>
   3405c:	2300      	movs	r3, #0
   3405e:	2400      	movs	r4, #0
   34060:	2200      	movs	r2, #0
   34062:	e7e2      	b.n	3402a <__aeabi_ui2d+0x26>
   34064:	0000041e 	.word	0x0000041e
   34068:	00000433 	.word	0x00000433
   3406c:	00000413 	.word	0x00000413
   34070:	800fffff 	.word	0x800fffff

00034074 <__aeabi_f2d>:
   34074:	0041      	lsls	r1, r0, #1
   34076:	0e09      	lsrs	r1, r1, #24
   34078:	1c4b      	adds	r3, r1, #1
   3407a:	b570      	push	{r4, r5, r6, lr}
   3407c:	b2db      	uxtb	r3, r3
   3407e:	0246      	lsls	r6, r0, #9
   34080:	0a75      	lsrs	r5, r6, #9
   34082:	0fc4      	lsrs	r4, r0, #31
   34084:	2b01      	cmp	r3, #1
   34086:	dd14      	ble.n	340b2 <__aeabi_f2d+0x3e>
   34088:	23e0      	movs	r3, #224	; 0xe0
   3408a:	009b      	lsls	r3, r3, #2
   3408c:	076d      	lsls	r5, r5, #29
   3408e:	0b36      	lsrs	r6, r6, #12
   34090:	18cb      	adds	r3, r1, r3
   34092:	2100      	movs	r1, #0
   34094:	0d0a      	lsrs	r2, r1, #20
   34096:	0028      	movs	r0, r5
   34098:	0512      	lsls	r2, r2, #20
   3409a:	4d1c      	ldr	r5, [pc, #112]	; (3410c <__aeabi_f2d+0x98>)
   3409c:	4332      	orrs	r2, r6
   3409e:	055b      	lsls	r3, r3, #21
   340a0:	402a      	ands	r2, r5
   340a2:	085b      	lsrs	r3, r3, #1
   340a4:	4313      	orrs	r3, r2
   340a6:	005b      	lsls	r3, r3, #1
   340a8:	07e4      	lsls	r4, r4, #31
   340aa:	085b      	lsrs	r3, r3, #1
   340ac:	4323      	orrs	r3, r4
   340ae:	0019      	movs	r1, r3
   340b0:	bd70      	pop	{r4, r5, r6, pc}
   340b2:	2900      	cmp	r1, #0
   340b4:	d114      	bne.n	340e0 <__aeabi_f2d+0x6c>
   340b6:	2d00      	cmp	r5, #0
   340b8:	d01e      	beq.n	340f8 <__aeabi_f2d+0x84>
   340ba:	0028      	movs	r0, r5
   340bc:	f000 f8b6 	bl	3422c <__clzsi2>
   340c0:	280a      	cmp	r0, #10
   340c2:	dc1c      	bgt.n	340fe <__aeabi_f2d+0x8a>
   340c4:	230b      	movs	r3, #11
   340c6:	002a      	movs	r2, r5
   340c8:	1a1b      	subs	r3, r3, r0
   340ca:	40da      	lsrs	r2, r3
   340cc:	0003      	movs	r3, r0
   340ce:	3315      	adds	r3, #21
   340d0:	409d      	lsls	r5, r3
   340d2:	4b0f      	ldr	r3, [pc, #60]	; (34110 <__aeabi_f2d+0x9c>)
   340d4:	0312      	lsls	r2, r2, #12
   340d6:	1a1b      	subs	r3, r3, r0
   340d8:	055b      	lsls	r3, r3, #21
   340da:	0b16      	lsrs	r6, r2, #12
   340dc:	0d5b      	lsrs	r3, r3, #21
   340de:	e7d8      	b.n	34092 <__aeabi_f2d+0x1e>
   340e0:	2d00      	cmp	r5, #0
   340e2:	d006      	beq.n	340f2 <__aeabi_f2d+0x7e>
   340e4:	0b32      	lsrs	r2, r6, #12
   340e6:	2680      	movs	r6, #128	; 0x80
   340e8:	0336      	lsls	r6, r6, #12
   340ea:	076d      	lsls	r5, r5, #29
   340ec:	4316      	orrs	r6, r2
   340ee:	4b09      	ldr	r3, [pc, #36]	; (34114 <__aeabi_f2d+0xa0>)
   340f0:	e7cf      	b.n	34092 <__aeabi_f2d+0x1e>
   340f2:	4b08      	ldr	r3, [pc, #32]	; (34114 <__aeabi_f2d+0xa0>)
   340f4:	2600      	movs	r6, #0
   340f6:	e7cc      	b.n	34092 <__aeabi_f2d+0x1e>
   340f8:	2300      	movs	r3, #0
   340fa:	2600      	movs	r6, #0
   340fc:	e7c9      	b.n	34092 <__aeabi_f2d+0x1e>
   340fe:	0003      	movs	r3, r0
   34100:	002a      	movs	r2, r5
   34102:	3b0b      	subs	r3, #11
   34104:	409a      	lsls	r2, r3
   34106:	2500      	movs	r5, #0
   34108:	e7e3      	b.n	340d2 <__aeabi_f2d+0x5e>
   3410a:	46c0      	nop			; (mov r8, r8)
   3410c:	800fffff 	.word	0x800fffff
   34110:	00000389 	.word	0x00000389
   34114:	000007ff 	.word	0x000007ff

00034118 <__aeabi_d2f>:
   34118:	b5f0      	push	{r4, r5, r6, r7, lr}
   3411a:	004c      	lsls	r4, r1, #1
   3411c:	0d64      	lsrs	r4, r4, #21
   3411e:	030b      	lsls	r3, r1, #12
   34120:	1c62      	adds	r2, r4, #1
   34122:	0f45      	lsrs	r5, r0, #29
   34124:	0a5b      	lsrs	r3, r3, #9
   34126:	0552      	lsls	r2, r2, #21
   34128:	432b      	orrs	r3, r5
   3412a:	0fc9      	lsrs	r1, r1, #31
   3412c:	00c5      	lsls	r5, r0, #3
   3412e:	0d52      	lsrs	r2, r2, #21
   34130:	2a01      	cmp	r2, #1
   34132:	dd28      	ble.n	34186 <__aeabi_d2f+0x6e>
   34134:	4a3a      	ldr	r2, [pc, #232]	; (34220 <__aeabi_d2f+0x108>)
   34136:	18a6      	adds	r6, r4, r2
   34138:	2efe      	cmp	r6, #254	; 0xfe
   3413a:	dc1b      	bgt.n	34174 <__aeabi_d2f+0x5c>
   3413c:	2e00      	cmp	r6, #0
   3413e:	dd3e      	ble.n	341be <__aeabi_d2f+0xa6>
   34140:	0180      	lsls	r0, r0, #6
   34142:	0002      	movs	r2, r0
   34144:	1e50      	subs	r0, r2, #1
   34146:	4182      	sbcs	r2, r0
   34148:	0f6d      	lsrs	r5, r5, #29
   3414a:	432a      	orrs	r2, r5
   3414c:	00db      	lsls	r3, r3, #3
   3414e:	4313      	orrs	r3, r2
   34150:	075a      	lsls	r2, r3, #29
   34152:	d004      	beq.n	3415e <__aeabi_d2f+0x46>
   34154:	220f      	movs	r2, #15
   34156:	401a      	ands	r2, r3
   34158:	2a04      	cmp	r2, #4
   3415a:	d000      	beq.n	3415e <__aeabi_d2f+0x46>
   3415c:	3304      	adds	r3, #4
   3415e:	2280      	movs	r2, #128	; 0x80
   34160:	04d2      	lsls	r2, r2, #19
   34162:	401a      	ands	r2, r3
   34164:	d05a      	beq.n	3421c <__aeabi_d2f+0x104>
   34166:	3601      	adds	r6, #1
   34168:	2eff      	cmp	r6, #255	; 0xff
   3416a:	d003      	beq.n	34174 <__aeabi_d2f+0x5c>
   3416c:	019b      	lsls	r3, r3, #6
   3416e:	0a5b      	lsrs	r3, r3, #9
   34170:	b2f4      	uxtb	r4, r6
   34172:	e001      	b.n	34178 <__aeabi_d2f+0x60>
   34174:	24ff      	movs	r4, #255	; 0xff
   34176:	2300      	movs	r3, #0
   34178:	0258      	lsls	r0, r3, #9
   3417a:	05e4      	lsls	r4, r4, #23
   3417c:	0a40      	lsrs	r0, r0, #9
   3417e:	07c9      	lsls	r1, r1, #31
   34180:	4320      	orrs	r0, r4
   34182:	4308      	orrs	r0, r1
   34184:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34186:	2c00      	cmp	r4, #0
   34188:	d007      	beq.n	3419a <__aeabi_d2f+0x82>
   3418a:	431d      	orrs	r5, r3
   3418c:	d0f2      	beq.n	34174 <__aeabi_d2f+0x5c>
   3418e:	2080      	movs	r0, #128	; 0x80
   34190:	00db      	lsls	r3, r3, #3
   34192:	0480      	lsls	r0, r0, #18
   34194:	4303      	orrs	r3, r0
   34196:	26ff      	movs	r6, #255	; 0xff
   34198:	e7da      	b.n	34150 <__aeabi_d2f+0x38>
   3419a:	432b      	orrs	r3, r5
   3419c:	d003      	beq.n	341a6 <__aeabi_d2f+0x8e>
   3419e:	2305      	movs	r3, #5
   341a0:	08db      	lsrs	r3, r3, #3
   341a2:	2cff      	cmp	r4, #255	; 0xff
   341a4:	d003      	beq.n	341ae <__aeabi_d2f+0x96>
   341a6:	025b      	lsls	r3, r3, #9
   341a8:	0a5b      	lsrs	r3, r3, #9
   341aa:	b2e4      	uxtb	r4, r4
   341ac:	e7e4      	b.n	34178 <__aeabi_d2f+0x60>
   341ae:	2b00      	cmp	r3, #0
   341b0:	d032      	beq.n	34218 <__aeabi_d2f+0x100>
   341b2:	2080      	movs	r0, #128	; 0x80
   341b4:	03c0      	lsls	r0, r0, #15
   341b6:	4303      	orrs	r3, r0
   341b8:	025b      	lsls	r3, r3, #9
   341ba:	0a5b      	lsrs	r3, r3, #9
   341bc:	e7dc      	b.n	34178 <__aeabi_d2f+0x60>
   341be:	0032      	movs	r2, r6
   341c0:	3217      	adds	r2, #23
   341c2:	db14      	blt.n	341ee <__aeabi_d2f+0xd6>
   341c4:	2280      	movs	r2, #128	; 0x80
   341c6:	271e      	movs	r7, #30
   341c8:	0412      	lsls	r2, r2, #16
   341ca:	4313      	orrs	r3, r2
   341cc:	1bbf      	subs	r7, r7, r6
   341ce:	2f1f      	cmp	r7, #31
   341d0:	dc0f      	bgt.n	341f2 <__aeabi_d2f+0xda>
   341d2:	4a14      	ldr	r2, [pc, #80]	; (34224 <__aeabi_d2f+0x10c>)
   341d4:	4694      	mov	ip, r2
   341d6:	4464      	add	r4, ip
   341d8:	002a      	movs	r2, r5
   341da:	40a5      	lsls	r5, r4
   341dc:	002e      	movs	r6, r5
   341de:	40a3      	lsls	r3, r4
   341e0:	1e75      	subs	r5, r6, #1
   341e2:	41ae      	sbcs	r6, r5
   341e4:	40fa      	lsrs	r2, r7
   341e6:	4333      	orrs	r3, r6
   341e8:	4313      	orrs	r3, r2
   341ea:	2600      	movs	r6, #0
   341ec:	e7b0      	b.n	34150 <__aeabi_d2f+0x38>
   341ee:	2400      	movs	r4, #0
   341f0:	e7d5      	b.n	3419e <__aeabi_d2f+0x86>
   341f2:	2202      	movs	r2, #2
   341f4:	4252      	negs	r2, r2
   341f6:	1b96      	subs	r6, r2, r6
   341f8:	001a      	movs	r2, r3
   341fa:	40f2      	lsrs	r2, r6
   341fc:	2f20      	cmp	r7, #32
   341fe:	d009      	beq.n	34214 <__aeabi_d2f+0xfc>
   34200:	4809      	ldr	r0, [pc, #36]	; (34228 <__aeabi_d2f+0x110>)
   34202:	4684      	mov	ip, r0
   34204:	4464      	add	r4, ip
   34206:	40a3      	lsls	r3, r4
   34208:	432b      	orrs	r3, r5
   3420a:	1e5d      	subs	r5, r3, #1
   3420c:	41ab      	sbcs	r3, r5
   3420e:	2600      	movs	r6, #0
   34210:	4313      	orrs	r3, r2
   34212:	e79d      	b.n	34150 <__aeabi_d2f+0x38>
   34214:	2300      	movs	r3, #0
   34216:	e7f7      	b.n	34208 <__aeabi_d2f+0xf0>
   34218:	2300      	movs	r3, #0
   3421a:	e7ad      	b.n	34178 <__aeabi_d2f+0x60>
   3421c:	0034      	movs	r4, r6
   3421e:	e7bf      	b.n	341a0 <__aeabi_d2f+0x88>
   34220:	fffffc80 	.word	0xfffffc80
   34224:	fffffc82 	.word	0xfffffc82
   34228:	fffffca2 	.word	0xfffffca2

0003422c <__clzsi2>:
   3422c:	211c      	movs	r1, #28
   3422e:	2301      	movs	r3, #1
   34230:	041b      	lsls	r3, r3, #16
   34232:	4298      	cmp	r0, r3
   34234:	d301      	bcc.n	3423a <__clzsi2+0xe>
   34236:	0c00      	lsrs	r0, r0, #16
   34238:	3910      	subs	r1, #16
   3423a:	0a1b      	lsrs	r3, r3, #8
   3423c:	4298      	cmp	r0, r3
   3423e:	d301      	bcc.n	34244 <__clzsi2+0x18>
   34240:	0a00      	lsrs	r0, r0, #8
   34242:	3908      	subs	r1, #8
   34244:	091b      	lsrs	r3, r3, #4
   34246:	4298      	cmp	r0, r3
   34248:	d301      	bcc.n	3424e <__clzsi2+0x22>
   3424a:	0900      	lsrs	r0, r0, #4
   3424c:	3904      	subs	r1, #4
   3424e:	a202      	add	r2, pc, #8	; (adr r2, 34258 <__clzsi2+0x2c>)
   34250:	5c10      	ldrb	r0, [r2, r0]
   34252:	1840      	adds	r0, r0, r1
   34254:	4770      	bx	lr
   34256:	46c0      	nop			; (mov r8, r8)
   34258:	02020304 	.word	0x02020304
   3425c:	01010101 	.word	0x01010101
	...

00034268 <atoi>:
   34268:	b510      	push	{r4, lr}
   3426a:	220a      	movs	r2, #10
   3426c:	2100      	movs	r1, #0
   3426e:	f000 fb0d 	bl	3488c <strtol>
   34272:	bd10      	pop	{r4, pc}

00034274 <__libc_init_array>:
   34274:	b570      	push	{r4, r5, r6, lr}
   34276:	2600      	movs	r6, #0
   34278:	4d0c      	ldr	r5, [pc, #48]	; (342ac <__libc_init_array+0x38>)
   3427a:	4c0d      	ldr	r4, [pc, #52]	; (342b0 <__libc_init_array+0x3c>)
   3427c:	1b64      	subs	r4, r4, r5
   3427e:	10a4      	asrs	r4, r4, #2
   34280:	42a6      	cmp	r6, r4
   34282:	d109      	bne.n	34298 <__libc_init_array+0x24>
   34284:	2600      	movs	r6, #0
   34286:	f005 fb13 	bl	398b0 <_init>
   3428a:	4d0a      	ldr	r5, [pc, #40]	; (342b4 <__libc_init_array+0x40>)
   3428c:	4c0a      	ldr	r4, [pc, #40]	; (342b8 <__libc_init_array+0x44>)
   3428e:	1b64      	subs	r4, r4, r5
   34290:	10a4      	asrs	r4, r4, #2
   34292:	42a6      	cmp	r6, r4
   34294:	d105      	bne.n	342a2 <__libc_init_array+0x2e>
   34296:	bd70      	pop	{r4, r5, r6, pc}
   34298:	00b3      	lsls	r3, r6, #2
   3429a:	58eb      	ldr	r3, [r5, r3]
   3429c:	4798      	blx	r3
   3429e:	3601      	adds	r6, #1
   342a0:	e7ee      	b.n	34280 <__libc_init_array+0xc>
   342a2:	00b3      	lsls	r3, r6, #2
   342a4:	58eb      	ldr	r3, [r5, r3]
   342a6:	4798      	blx	r3
   342a8:	3601      	adds	r6, #1
   342aa:	e7f2      	b.n	34292 <__libc_init_array+0x1e>
   342ac:	000398bc 	.word	0x000398bc
   342b0:	000398bc 	.word	0x000398bc
   342b4:	000398bc 	.word	0x000398bc
   342b8:	000398c0 	.word	0x000398c0

000342bc <malloc>:
   342bc:	b510      	push	{r4, lr}
   342be:	4b03      	ldr	r3, [pc, #12]	; (342cc <malloc+0x10>)
   342c0:	0001      	movs	r1, r0
   342c2:	6818      	ldr	r0, [r3, #0]
   342c4:	f000 f87c 	bl	343c0 <_malloc_r>
   342c8:	bd10      	pop	{r4, pc}
   342ca:	46c0      	nop			; (mov r8, r8)
   342cc:	20000118 	.word	0x20000118

000342d0 <free>:
   342d0:	b510      	push	{r4, lr}
   342d2:	4b03      	ldr	r3, [pc, #12]	; (342e0 <free+0x10>)
   342d4:	0001      	movs	r1, r0
   342d6:	6818      	ldr	r0, [r3, #0]
   342d8:	f000 f828 	bl	3432c <_free_r>
   342dc:	bd10      	pop	{r4, pc}
   342de:	46c0      	nop			; (mov r8, r8)
   342e0:	20000118 	.word	0x20000118

000342e4 <memcpy>:
   342e4:	2300      	movs	r3, #0
   342e6:	b510      	push	{r4, lr}
   342e8:	429a      	cmp	r2, r3
   342ea:	d100      	bne.n	342ee <memcpy+0xa>
   342ec:	bd10      	pop	{r4, pc}
   342ee:	5ccc      	ldrb	r4, [r1, r3]
   342f0:	54c4      	strb	r4, [r0, r3]
   342f2:	3301      	adds	r3, #1
   342f4:	e7f8      	b.n	342e8 <memcpy+0x4>

000342f6 <memmove>:
   342f6:	b510      	push	{r4, lr}
   342f8:	4288      	cmp	r0, r1
   342fa:	d902      	bls.n	34302 <memmove+0xc>
   342fc:	188b      	adds	r3, r1, r2
   342fe:	4298      	cmp	r0, r3
   34300:	d308      	bcc.n	34314 <memmove+0x1e>
   34302:	2300      	movs	r3, #0
   34304:	429a      	cmp	r2, r3
   34306:	d007      	beq.n	34318 <memmove+0x22>
   34308:	5ccc      	ldrb	r4, [r1, r3]
   3430a:	54c4      	strb	r4, [r0, r3]
   3430c:	3301      	adds	r3, #1
   3430e:	e7f9      	b.n	34304 <memmove+0xe>
   34310:	5c8b      	ldrb	r3, [r1, r2]
   34312:	5483      	strb	r3, [r0, r2]
   34314:	3a01      	subs	r2, #1
   34316:	d2fb      	bcs.n	34310 <memmove+0x1a>
   34318:	bd10      	pop	{r4, pc}

0003431a <memset>:
   3431a:	0003      	movs	r3, r0
   3431c:	1882      	adds	r2, r0, r2
   3431e:	4293      	cmp	r3, r2
   34320:	d100      	bne.n	34324 <memset+0xa>
   34322:	4770      	bx	lr
   34324:	7019      	strb	r1, [r3, #0]
   34326:	3301      	adds	r3, #1
   34328:	e7f9      	b.n	3431e <memset+0x4>
	...

0003432c <_free_r>:
   3432c:	b570      	push	{r4, r5, r6, lr}
   3432e:	0005      	movs	r5, r0
   34330:	2900      	cmp	r1, #0
   34332:	d010      	beq.n	34356 <_free_r+0x2a>
   34334:	1f0c      	subs	r4, r1, #4
   34336:	6823      	ldr	r3, [r4, #0]
   34338:	2b00      	cmp	r3, #0
   3433a:	da00      	bge.n	3433e <_free_r+0x12>
   3433c:	18e4      	adds	r4, r4, r3
   3433e:	0028      	movs	r0, r5
   34340:	f000 fdd8 	bl	34ef4 <__malloc_lock>
   34344:	4a1d      	ldr	r2, [pc, #116]	; (343bc <_free_r+0x90>)
   34346:	6813      	ldr	r3, [r2, #0]
   34348:	2b00      	cmp	r3, #0
   3434a:	d105      	bne.n	34358 <_free_r+0x2c>
   3434c:	6063      	str	r3, [r4, #4]
   3434e:	6014      	str	r4, [r2, #0]
   34350:	0028      	movs	r0, r5
   34352:	f000 fdd0 	bl	34ef6 <__malloc_unlock>
   34356:	bd70      	pop	{r4, r5, r6, pc}
   34358:	42a3      	cmp	r3, r4
   3435a:	d909      	bls.n	34370 <_free_r+0x44>
   3435c:	6821      	ldr	r1, [r4, #0]
   3435e:	1860      	adds	r0, r4, r1
   34360:	4283      	cmp	r3, r0
   34362:	d1f3      	bne.n	3434c <_free_r+0x20>
   34364:	6818      	ldr	r0, [r3, #0]
   34366:	685b      	ldr	r3, [r3, #4]
   34368:	1841      	adds	r1, r0, r1
   3436a:	6021      	str	r1, [r4, #0]
   3436c:	e7ee      	b.n	3434c <_free_r+0x20>
   3436e:	0013      	movs	r3, r2
   34370:	685a      	ldr	r2, [r3, #4]
   34372:	2a00      	cmp	r2, #0
   34374:	d001      	beq.n	3437a <_free_r+0x4e>
   34376:	42a2      	cmp	r2, r4
   34378:	d9f9      	bls.n	3436e <_free_r+0x42>
   3437a:	6819      	ldr	r1, [r3, #0]
   3437c:	1858      	adds	r0, r3, r1
   3437e:	42a0      	cmp	r0, r4
   34380:	d10b      	bne.n	3439a <_free_r+0x6e>
   34382:	6820      	ldr	r0, [r4, #0]
   34384:	1809      	adds	r1, r1, r0
   34386:	1858      	adds	r0, r3, r1
   34388:	6019      	str	r1, [r3, #0]
   3438a:	4282      	cmp	r2, r0
   3438c:	d1e0      	bne.n	34350 <_free_r+0x24>
   3438e:	6810      	ldr	r0, [r2, #0]
   34390:	6852      	ldr	r2, [r2, #4]
   34392:	1841      	adds	r1, r0, r1
   34394:	6019      	str	r1, [r3, #0]
   34396:	605a      	str	r2, [r3, #4]
   34398:	e7da      	b.n	34350 <_free_r+0x24>
   3439a:	42a0      	cmp	r0, r4
   3439c:	d902      	bls.n	343a4 <_free_r+0x78>
   3439e:	230c      	movs	r3, #12
   343a0:	602b      	str	r3, [r5, #0]
   343a2:	e7d5      	b.n	34350 <_free_r+0x24>
   343a4:	6821      	ldr	r1, [r4, #0]
   343a6:	1860      	adds	r0, r4, r1
   343a8:	4282      	cmp	r2, r0
   343aa:	d103      	bne.n	343b4 <_free_r+0x88>
   343ac:	6810      	ldr	r0, [r2, #0]
   343ae:	6852      	ldr	r2, [r2, #4]
   343b0:	1841      	adds	r1, r0, r1
   343b2:	6021      	str	r1, [r4, #0]
   343b4:	6062      	str	r2, [r4, #4]
   343b6:	605c      	str	r4, [r3, #4]
   343b8:	e7ca      	b.n	34350 <_free_r+0x24>
   343ba:	46c0      	nop			; (mov r8, r8)
   343bc:	20004588 	.word	0x20004588

000343c0 <_malloc_r>:
   343c0:	2303      	movs	r3, #3
   343c2:	b570      	push	{r4, r5, r6, lr}
   343c4:	1ccd      	adds	r5, r1, #3
   343c6:	439d      	bics	r5, r3
   343c8:	3508      	adds	r5, #8
   343ca:	0006      	movs	r6, r0
   343cc:	2d0c      	cmp	r5, #12
   343ce:	d21e      	bcs.n	3440e <_malloc_r+0x4e>
   343d0:	250c      	movs	r5, #12
   343d2:	42a9      	cmp	r1, r5
   343d4:	d81d      	bhi.n	34412 <_malloc_r+0x52>
   343d6:	0030      	movs	r0, r6
   343d8:	f000 fd8c 	bl	34ef4 <__malloc_lock>
   343dc:	4a25      	ldr	r2, [pc, #148]	; (34474 <_malloc_r+0xb4>)
   343de:	6814      	ldr	r4, [r2, #0]
   343e0:	0021      	movs	r1, r4
   343e2:	2900      	cmp	r1, #0
   343e4:	d119      	bne.n	3441a <_malloc_r+0x5a>
   343e6:	4c24      	ldr	r4, [pc, #144]	; (34478 <_malloc_r+0xb8>)
   343e8:	6823      	ldr	r3, [r4, #0]
   343ea:	2b00      	cmp	r3, #0
   343ec:	d103      	bne.n	343f6 <_malloc_r+0x36>
   343ee:	0030      	movs	r0, r6
   343f0:	f000 f8ae 	bl	34550 <_sbrk_r>
   343f4:	6020      	str	r0, [r4, #0]
   343f6:	0029      	movs	r1, r5
   343f8:	0030      	movs	r0, r6
   343fa:	f000 f8a9 	bl	34550 <_sbrk_r>
   343fe:	1c43      	adds	r3, r0, #1
   34400:	d12c      	bne.n	3445c <_malloc_r+0x9c>
   34402:	230c      	movs	r3, #12
   34404:	0030      	movs	r0, r6
   34406:	6033      	str	r3, [r6, #0]
   34408:	f000 fd75 	bl	34ef6 <__malloc_unlock>
   3440c:	e003      	b.n	34416 <_malloc_r+0x56>
   3440e:	2d00      	cmp	r5, #0
   34410:	dadf      	bge.n	343d2 <_malloc_r+0x12>
   34412:	230c      	movs	r3, #12
   34414:	6033      	str	r3, [r6, #0]
   34416:	2000      	movs	r0, #0
   34418:	bd70      	pop	{r4, r5, r6, pc}
   3441a:	680b      	ldr	r3, [r1, #0]
   3441c:	1b5b      	subs	r3, r3, r5
   3441e:	d41a      	bmi.n	34456 <_malloc_r+0x96>
   34420:	2b0b      	cmp	r3, #11
   34422:	d903      	bls.n	3442c <_malloc_r+0x6c>
   34424:	600b      	str	r3, [r1, #0]
   34426:	18cc      	adds	r4, r1, r3
   34428:	6025      	str	r5, [r4, #0]
   3442a:	e003      	b.n	34434 <_malloc_r+0x74>
   3442c:	428c      	cmp	r4, r1
   3442e:	d10e      	bne.n	3444e <_malloc_r+0x8e>
   34430:	6863      	ldr	r3, [r4, #4]
   34432:	6013      	str	r3, [r2, #0]
   34434:	0030      	movs	r0, r6
   34436:	f000 fd5e 	bl	34ef6 <__malloc_unlock>
   3443a:	0020      	movs	r0, r4
   3443c:	2207      	movs	r2, #7
   3443e:	300b      	adds	r0, #11
   34440:	1d23      	adds	r3, r4, #4
   34442:	4390      	bics	r0, r2
   34444:	1ac3      	subs	r3, r0, r3
   34446:	d0e7      	beq.n	34418 <_malloc_r+0x58>
   34448:	425a      	negs	r2, r3
   3444a:	50e2      	str	r2, [r4, r3]
   3444c:	e7e4      	b.n	34418 <_malloc_r+0x58>
   3444e:	684b      	ldr	r3, [r1, #4]
   34450:	6063      	str	r3, [r4, #4]
   34452:	000c      	movs	r4, r1
   34454:	e7ee      	b.n	34434 <_malloc_r+0x74>
   34456:	000c      	movs	r4, r1
   34458:	6849      	ldr	r1, [r1, #4]
   3445a:	e7c2      	b.n	343e2 <_malloc_r+0x22>
   3445c:	2303      	movs	r3, #3
   3445e:	1cc4      	adds	r4, r0, #3
   34460:	439c      	bics	r4, r3
   34462:	42a0      	cmp	r0, r4
   34464:	d0e0      	beq.n	34428 <_malloc_r+0x68>
   34466:	1a21      	subs	r1, r4, r0
   34468:	0030      	movs	r0, r6
   3446a:	f000 f871 	bl	34550 <_sbrk_r>
   3446e:	1c43      	adds	r3, r0, #1
   34470:	d1da      	bne.n	34428 <_malloc_r+0x68>
   34472:	e7c6      	b.n	34402 <_malloc_r+0x42>
   34474:	20004588 	.word	0x20004588
   34478:	2000458c 	.word	0x2000458c

0003447c <_puts_r>:
   3447c:	b570      	push	{r4, r5, r6, lr}
   3447e:	0005      	movs	r5, r0
   34480:	000e      	movs	r6, r1
   34482:	2800      	cmp	r0, #0
   34484:	d004      	beq.n	34490 <_puts_r+0x14>
   34486:	6983      	ldr	r3, [r0, #24]
   34488:	2b00      	cmp	r3, #0
   3448a:	d101      	bne.n	34490 <_puts_r+0x14>
   3448c:	f000 fc0e 	bl	34cac <__sinit>
   34490:	69ab      	ldr	r3, [r5, #24]
   34492:	68ac      	ldr	r4, [r5, #8]
   34494:	2b00      	cmp	r3, #0
   34496:	d102      	bne.n	3449e <_puts_r+0x22>
   34498:	0028      	movs	r0, r5
   3449a:	f000 fc07 	bl	34cac <__sinit>
   3449e:	4b24      	ldr	r3, [pc, #144]	; (34530 <_puts_r+0xb4>)
   344a0:	429c      	cmp	r4, r3
   344a2:	d10f      	bne.n	344c4 <_puts_r+0x48>
   344a4:	686c      	ldr	r4, [r5, #4]
   344a6:	89a3      	ldrh	r3, [r4, #12]
   344a8:	071b      	lsls	r3, r3, #28
   344aa:	d502      	bpl.n	344b2 <_puts_r+0x36>
   344ac:	6923      	ldr	r3, [r4, #16]
   344ae:	2b00      	cmp	r3, #0
   344b0:	d120      	bne.n	344f4 <_puts_r+0x78>
   344b2:	0021      	movs	r1, r4
   344b4:	0028      	movs	r0, r5
   344b6:	f000 fa8b 	bl	349d0 <__swsetup_r>
   344ba:	2800      	cmp	r0, #0
   344bc:	d01a      	beq.n	344f4 <_puts_r+0x78>
   344be:	2001      	movs	r0, #1
   344c0:	4240      	negs	r0, r0
   344c2:	bd70      	pop	{r4, r5, r6, pc}
   344c4:	4b1b      	ldr	r3, [pc, #108]	; (34534 <_puts_r+0xb8>)
   344c6:	429c      	cmp	r4, r3
   344c8:	d101      	bne.n	344ce <_puts_r+0x52>
   344ca:	68ac      	ldr	r4, [r5, #8]
   344cc:	e7eb      	b.n	344a6 <_puts_r+0x2a>
   344ce:	4b1a      	ldr	r3, [pc, #104]	; (34538 <_puts_r+0xbc>)
   344d0:	429c      	cmp	r4, r3
   344d2:	d1e8      	bne.n	344a6 <_puts_r+0x2a>
   344d4:	68ec      	ldr	r4, [r5, #12]
   344d6:	e7e6      	b.n	344a6 <_puts_r+0x2a>
   344d8:	3b01      	subs	r3, #1
   344da:	3601      	adds	r6, #1
   344dc:	60a3      	str	r3, [r4, #8]
   344de:	2b00      	cmp	r3, #0
   344e0:	da04      	bge.n	344ec <_puts_r+0x70>
   344e2:	69a2      	ldr	r2, [r4, #24]
   344e4:	4293      	cmp	r3, r2
   344e6:	db16      	blt.n	34516 <_puts_r+0x9a>
   344e8:	290a      	cmp	r1, #10
   344ea:	d014      	beq.n	34516 <_puts_r+0x9a>
   344ec:	6823      	ldr	r3, [r4, #0]
   344ee:	1c5a      	adds	r2, r3, #1
   344f0:	6022      	str	r2, [r4, #0]
   344f2:	7019      	strb	r1, [r3, #0]
   344f4:	7831      	ldrb	r1, [r6, #0]
   344f6:	68a3      	ldr	r3, [r4, #8]
   344f8:	2900      	cmp	r1, #0
   344fa:	d1ed      	bne.n	344d8 <_puts_r+0x5c>
   344fc:	3b01      	subs	r3, #1
   344fe:	60a3      	str	r3, [r4, #8]
   34500:	2b00      	cmp	r3, #0
   34502:	da0f      	bge.n	34524 <_puts_r+0xa8>
   34504:	0022      	movs	r2, r4
   34506:	310a      	adds	r1, #10
   34508:	0028      	movs	r0, r5
   3450a:	f000 fa0b 	bl	34924 <__swbuf_r>
   3450e:	1c43      	adds	r3, r0, #1
   34510:	d0d5      	beq.n	344be <_puts_r+0x42>
   34512:	200a      	movs	r0, #10
   34514:	e7d5      	b.n	344c2 <_puts_r+0x46>
   34516:	0022      	movs	r2, r4
   34518:	0028      	movs	r0, r5
   3451a:	f000 fa03 	bl	34924 <__swbuf_r>
   3451e:	1c43      	adds	r3, r0, #1
   34520:	d1e8      	bne.n	344f4 <_puts_r+0x78>
   34522:	e7cc      	b.n	344be <_puts_r+0x42>
   34524:	200a      	movs	r0, #10
   34526:	6823      	ldr	r3, [r4, #0]
   34528:	1c5a      	adds	r2, r3, #1
   3452a:	6022      	str	r2, [r4, #0]
   3452c:	7018      	strb	r0, [r3, #0]
   3452e:	e7c8      	b.n	344c2 <_puts_r+0x46>
   34530:	00039730 	.word	0x00039730
   34534:	00039750 	.word	0x00039750
   34538:	00039710 	.word	0x00039710

0003453c <puts>:
   3453c:	b510      	push	{r4, lr}
   3453e:	4b03      	ldr	r3, [pc, #12]	; (3454c <puts+0x10>)
   34540:	0001      	movs	r1, r0
   34542:	6818      	ldr	r0, [r3, #0]
   34544:	f7ff ff9a 	bl	3447c <_puts_r>
   34548:	bd10      	pop	{r4, pc}
   3454a:	46c0      	nop			; (mov r8, r8)
   3454c:	20000118 	.word	0x20000118

00034550 <_sbrk_r>:
   34550:	2300      	movs	r3, #0
   34552:	b570      	push	{r4, r5, r6, lr}
   34554:	4c06      	ldr	r4, [pc, #24]	; (34570 <_sbrk_r+0x20>)
   34556:	0005      	movs	r5, r0
   34558:	0008      	movs	r0, r1
   3455a:	6023      	str	r3, [r4, #0]
   3455c:	f7f6 f802 	bl	2a564 <_sbrk>
   34560:	1c43      	adds	r3, r0, #1
   34562:	d103      	bne.n	3456c <_sbrk_r+0x1c>
   34564:	6823      	ldr	r3, [r4, #0]
   34566:	2b00      	cmp	r3, #0
   34568:	d000      	beq.n	3456c <_sbrk_r+0x1c>
   3456a:	602b      	str	r3, [r5, #0]
   3456c:	bd70      	pop	{r4, r5, r6, pc}
   3456e:	46c0      	nop			; (mov r8, r8)
   34570:	20005a40 	.word	0x20005a40

00034574 <sniprintf>:
   34574:	b40c      	push	{r2, r3}
   34576:	b530      	push	{r4, r5, lr}
   34578:	4b16      	ldr	r3, [pc, #88]	; (345d4 <sniprintf+0x60>)
   3457a:	b09d      	sub	sp, #116	; 0x74
   3457c:	1e0c      	subs	r4, r1, #0
   3457e:	681d      	ldr	r5, [r3, #0]
   34580:	da08      	bge.n	34594 <sniprintf+0x20>
   34582:	238b      	movs	r3, #139	; 0x8b
   34584:	2001      	movs	r0, #1
   34586:	602b      	str	r3, [r5, #0]
   34588:	4240      	negs	r0, r0
   3458a:	b01d      	add	sp, #116	; 0x74
   3458c:	bc30      	pop	{r4, r5}
   3458e:	bc08      	pop	{r3}
   34590:	b002      	add	sp, #8
   34592:	4718      	bx	r3
   34594:	2382      	movs	r3, #130	; 0x82
   34596:	a902      	add	r1, sp, #8
   34598:	009b      	lsls	r3, r3, #2
   3459a:	818b      	strh	r3, [r1, #12]
   3459c:	2300      	movs	r3, #0
   3459e:	9002      	str	r0, [sp, #8]
   345a0:	6108      	str	r0, [r1, #16]
   345a2:	429c      	cmp	r4, r3
   345a4:	d000      	beq.n	345a8 <sniprintf+0x34>
   345a6:	1e63      	subs	r3, r4, #1
   345a8:	608b      	str	r3, [r1, #8]
   345aa:	614b      	str	r3, [r1, #20]
   345ac:	2301      	movs	r3, #1
   345ae:	425b      	negs	r3, r3
   345b0:	81cb      	strh	r3, [r1, #14]
   345b2:	9a20      	ldr	r2, [sp, #128]	; 0x80
   345b4:	ab21      	add	r3, sp, #132	; 0x84
   345b6:	0028      	movs	r0, r5
   345b8:	9301      	str	r3, [sp, #4]
   345ba:	f000 fcff 	bl	34fbc <_svfiprintf_r>
   345be:	1c43      	adds	r3, r0, #1
   345c0:	da01      	bge.n	345c6 <sniprintf+0x52>
   345c2:	238b      	movs	r3, #139	; 0x8b
   345c4:	602b      	str	r3, [r5, #0]
   345c6:	2c00      	cmp	r4, #0
   345c8:	d0df      	beq.n	3458a <sniprintf+0x16>
   345ca:	2300      	movs	r3, #0
   345cc:	9a02      	ldr	r2, [sp, #8]
   345ce:	7013      	strb	r3, [r2, #0]
   345d0:	e7db      	b.n	3458a <sniprintf+0x16>
   345d2:	46c0      	nop			; (mov r8, r8)
   345d4:	20000118 	.word	0x20000118

000345d8 <siprintf>:
   345d8:	b40e      	push	{r1, r2, r3}
   345da:	b510      	push	{r4, lr}
   345dc:	b09d      	sub	sp, #116	; 0x74
   345de:	a902      	add	r1, sp, #8
   345e0:	9002      	str	r0, [sp, #8]
   345e2:	6108      	str	r0, [r1, #16]
   345e4:	480b      	ldr	r0, [pc, #44]	; (34614 <siprintf+0x3c>)
   345e6:	2482      	movs	r4, #130	; 0x82
   345e8:	6088      	str	r0, [r1, #8]
   345ea:	6148      	str	r0, [r1, #20]
   345ec:	2001      	movs	r0, #1
   345ee:	4240      	negs	r0, r0
   345f0:	ab1f      	add	r3, sp, #124	; 0x7c
   345f2:	81c8      	strh	r0, [r1, #14]
   345f4:	4808      	ldr	r0, [pc, #32]	; (34618 <siprintf+0x40>)
   345f6:	cb04      	ldmia	r3!, {r2}
   345f8:	00a4      	lsls	r4, r4, #2
   345fa:	6800      	ldr	r0, [r0, #0]
   345fc:	9301      	str	r3, [sp, #4]
   345fe:	818c      	strh	r4, [r1, #12]
   34600:	f000 fcdc 	bl	34fbc <_svfiprintf_r>
   34604:	2300      	movs	r3, #0
   34606:	9a02      	ldr	r2, [sp, #8]
   34608:	7013      	strb	r3, [r2, #0]
   3460a:	b01d      	add	sp, #116	; 0x74
   3460c:	bc10      	pop	{r4}
   3460e:	bc08      	pop	{r3}
   34610:	b003      	add	sp, #12
   34612:	4718      	bx	r3
   34614:	7fffffff 	.word	0x7fffffff
   34618:	20000118 	.word	0x20000118

0003461c <strcasecmp>:
   3461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3461e:	0007      	movs	r7, r0
   34620:	000e      	movs	r6, r1
   34622:	783c      	ldrb	r4, [r7, #0]
   34624:	f000 fbda 	bl	34ddc <__locale_ctype_ptr>
   34628:	2203      	movs	r2, #3
   3462a:	1900      	adds	r0, r0, r4
   3462c:	7843      	ldrb	r3, [r0, #1]
   3462e:	4013      	ands	r3, r2
   34630:	2b01      	cmp	r3, #1
   34632:	d100      	bne.n	34636 <strcasecmp+0x1a>
   34634:	3420      	adds	r4, #32
   34636:	7835      	ldrb	r5, [r6, #0]
   34638:	f000 fbd0 	bl	34ddc <__locale_ctype_ptr>
   3463c:	2203      	movs	r2, #3
   3463e:	1940      	adds	r0, r0, r5
   34640:	7843      	ldrb	r3, [r0, #1]
   34642:	4013      	ands	r3, r2
   34644:	2b01      	cmp	r3, #1
   34646:	d100      	bne.n	3464a <strcasecmp+0x2e>
   34648:	3520      	adds	r5, #32
   3464a:	1b60      	subs	r0, r4, r5
   3464c:	d103      	bne.n	34656 <strcasecmp+0x3a>
   3464e:	3701      	adds	r7, #1
   34650:	3601      	adds	r6, #1
   34652:	2d00      	cmp	r5, #0
   34654:	d1e5      	bne.n	34622 <strcasecmp+0x6>
   34656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00034658 <strcat>:
   34658:	0002      	movs	r2, r0
   3465a:	b510      	push	{r4, lr}
   3465c:	7813      	ldrb	r3, [r2, #0]
   3465e:	2b00      	cmp	r3, #0
   34660:	d105      	bne.n	3466e <strcat+0x16>
   34662:	5ccc      	ldrb	r4, [r1, r3]
   34664:	54d4      	strb	r4, [r2, r3]
   34666:	3301      	adds	r3, #1
   34668:	2c00      	cmp	r4, #0
   3466a:	d1fa      	bne.n	34662 <strcat+0xa>
   3466c:	bd10      	pop	{r4, pc}
   3466e:	3201      	adds	r2, #1
   34670:	e7f4      	b.n	3465c <strcat+0x4>

00034672 <strcmp>:
   34672:	7802      	ldrb	r2, [r0, #0]
   34674:	780b      	ldrb	r3, [r1, #0]
   34676:	2a00      	cmp	r2, #0
   34678:	d003      	beq.n	34682 <strcmp+0x10>
   3467a:	3001      	adds	r0, #1
   3467c:	3101      	adds	r1, #1
   3467e:	429a      	cmp	r2, r3
   34680:	d0f7      	beq.n	34672 <strcmp>
   34682:	1ad0      	subs	r0, r2, r3
   34684:	4770      	bx	lr

00034686 <strcpy>:
   34686:	1c03      	adds	r3, r0, #0
   34688:	780a      	ldrb	r2, [r1, #0]
   3468a:	3101      	adds	r1, #1
   3468c:	701a      	strb	r2, [r3, #0]
   3468e:	3301      	adds	r3, #1
   34690:	2a00      	cmp	r2, #0
   34692:	d1f9      	bne.n	34688 <strcpy+0x2>
   34694:	4770      	bx	lr
	...

00034698 <strdup>:
   34698:	b510      	push	{r4, lr}
   3469a:	4b03      	ldr	r3, [pc, #12]	; (346a8 <strdup+0x10>)
   3469c:	0001      	movs	r1, r0
   3469e:	6818      	ldr	r0, [r3, #0]
   346a0:	f000 f804 	bl	346ac <_strdup_r>
   346a4:	bd10      	pop	{r4, pc}
   346a6:	46c0      	nop			; (mov r8, r8)
   346a8:	20000118 	.word	0x20000118

000346ac <_strdup_r>:
   346ac:	b570      	push	{r4, r5, r6, lr}
   346ae:	0005      	movs	r5, r0
   346b0:	0008      	movs	r0, r1
   346b2:	000e      	movs	r6, r1
   346b4:	f000 f80d 	bl	346d2 <strlen>
   346b8:	1c44      	adds	r4, r0, #1
   346ba:	0021      	movs	r1, r4
   346bc:	0028      	movs	r0, r5
   346be:	f7ff fe7f 	bl	343c0 <_malloc_r>
   346c2:	1e05      	subs	r5, r0, #0
   346c4:	d003      	beq.n	346ce <_strdup_r+0x22>
   346c6:	0022      	movs	r2, r4
   346c8:	0031      	movs	r1, r6
   346ca:	f7ff fe0b 	bl	342e4 <memcpy>
   346ce:	0028      	movs	r0, r5
   346d0:	bd70      	pop	{r4, r5, r6, pc}

000346d2 <strlen>:
   346d2:	2300      	movs	r3, #0
   346d4:	5cc2      	ldrb	r2, [r0, r3]
   346d6:	3301      	adds	r3, #1
   346d8:	2a00      	cmp	r2, #0
   346da:	d1fb      	bne.n	346d4 <strlen+0x2>
   346dc:	1e58      	subs	r0, r3, #1
   346de:	4770      	bx	lr

000346e0 <strncmp>:
   346e0:	2300      	movs	r3, #0
   346e2:	b530      	push	{r4, r5, lr}
   346e4:	429a      	cmp	r2, r3
   346e6:	d00a      	beq.n	346fe <strncmp+0x1e>
   346e8:	3a01      	subs	r2, #1
   346ea:	5cc4      	ldrb	r4, [r0, r3]
   346ec:	5ccd      	ldrb	r5, [r1, r3]
   346ee:	42ac      	cmp	r4, r5
   346f0:	d104      	bne.n	346fc <strncmp+0x1c>
   346f2:	429a      	cmp	r2, r3
   346f4:	d002      	beq.n	346fc <strncmp+0x1c>
   346f6:	3301      	adds	r3, #1
   346f8:	2c00      	cmp	r4, #0
   346fa:	d1f6      	bne.n	346ea <strncmp+0xa>
   346fc:	1b63      	subs	r3, r4, r5
   346fe:	0018      	movs	r0, r3
   34700:	bd30      	pop	{r4, r5, pc}

00034702 <strncpy>:
   34702:	b570      	push	{r4, r5, r6, lr}
   34704:	0004      	movs	r4, r0
   34706:	2a00      	cmp	r2, #0
   34708:	d100      	bne.n	3470c <strncpy+0xa>
   3470a:	bd70      	pop	{r4, r5, r6, pc}
   3470c:	780d      	ldrb	r5, [r1, #0]
   3470e:	1e56      	subs	r6, r2, #1
   34710:	1c63      	adds	r3, r4, #1
   34712:	7025      	strb	r5, [r4, #0]
   34714:	3101      	adds	r1, #1
   34716:	2d00      	cmp	r5, #0
   34718:	d105      	bne.n	34726 <strncpy+0x24>
   3471a:	18a4      	adds	r4, r4, r2
   3471c:	429c      	cmp	r4, r3
   3471e:	d0f4      	beq.n	3470a <strncpy+0x8>
   34720:	701d      	strb	r5, [r3, #0]
   34722:	3301      	adds	r3, #1
   34724:	e7fa      	b.n	3471c <strncpy+0x1a>
   34726:	001c      	movs	r4, r3
   34728:	0032      	movs	r2, r6
   3472a:	e7ec      	b.n	34706 <strncpy+0x4>

0003472c <strrchr>:
   3472c:	b570      	push	{r4, r5, r6, lr}
   3472e:	000d      	movs	r5, r1
   34730:	2400      	movs	r4, #0
   34732:	2900      	cmp	r1, #0
   34734:	d105      	bne.n	34742 <strrchr+0x16>
   34736:	f000 ff19 	bl	3556c <strchr>
   3473a:	0004      	movs	r4, r0
   3473c:	e006      	b.n	3474c <strrchr+0x20>
   3473e:	001c      	movs	r4, r3
   34740:	1c58      	adds	r0, r3, #1
   34742:	0029      	movs	r1, r5
   34744:	f000 ff12 	bl	3556c <strchr>
   34748:	1e03      	subs	r3, r0, #0
   3474a:	d1f8      	bne.n	3473e <strrchr+0x12>
   3474c:	0020      	movs	r0, r4
   3474e:	bd70      	pop	{r4, r5, r6, pc}

00034750 <strstr>:
   34750:	b510      	push	{r4, lr}
   34752:	0002      	movs	r2, r0
   34754:	7800      	ldrb	r0, [r0, #0]
   34756:	2800      	cmp	r0, #0
   34758:	d104      	bne.n	34764 <strstr+0x14>
   3475a:	7809      	ldrb	r1, [r1, #0]
   3475c:	2900      	cmp	r1, #0
   3475e:	d00d      	beq.n	3477c <strstr+0x2c>
   34760:	bd10      	pop	{r4, pc}
   34762:	3201      	adds	r2, #1
   34764:	7810      	ldrb	r0, [r2, #0]
   34766:	2800      	cmp	r0, #0
   34768:	d0fa      	beq.n	34760 <strstr+0x10>
   3476a:	2300      	movs	r3, #0
   3476c:	5cc8      	ldrb	r0, [r1, r3]
   3476e:	2800      	cmp	r0, #0
   34770:	d004      	beq.n	3477c <strstr+0x2c>
   34772:	5cd4      	ldrb	r4, [r2, r3]
   34774:	4284      	cmp	r4, r0
   34776:	d1f4      	bne.n	34762 <strstr+0x12>
   34778:	3301      	adds	r3, #1
   3477a:	e7f7      	b.n	3476c <strstr+0x1c>
   3477c:	0010      	movs	r0, r2
   3477e:	e7ef      	b.n	34760 <strstr+0x10>

00034780 <_strtol_l.isra.0>:
   34780:	b5f0      	push	{r4, r5, r6, r7, lr}
   34782:	001f      	movs	r7, r3
   34784:	000e      	movs	r6, r1
   34786:	b087      	sub	sp, #28
   34788:	9005      	str	r0, [sp, #20]
   3478a:	9103      	str	r1, [sp, #12]
   3478c:	9202      	str	r2, [sp, #8]
   3478e:	980c      	ldr	r0, [sp, #48]	; 0x30
   34790:	7834      	ldrb	r4, [r6, #0]
   34792:	f000 fb20 	bl	34dd6 <__locale_ctype_ptr_l>
   34796:	2208      	movs	r2, #8
   34798:	1900      	adds	r0, r0, r4
   3479a:	7843      	ldrb	r3, [r0, #1]
   3479c:	1c75      	adds	r5, r6, #1
   3479e:	4013      	ands	r3, r2
   347a0:	d10c      	bne.n	347bc <_strtol_l.isra.0+0x3c>
   347a2:	2c2d      	cmp	r4, #45	; 0x2d
   347a4:	d10c      	bne.n	347c0 <_strtol_l.isra.0+0x40>
   347a6:	3301      	adds	r3, #1
   347a8:	782c      	ldrb	r4, [r5, #0]
   347aa:	9301      	str	r3, [sp, #4]
   347ac:	1cb5      	adds	r5, r6, #2
   347ae:	2f00      	cmp	r7, #0
   347b0:	d00c      	beq.n	347cc <_strtol_l.isra.0+0x4c>
   347b2:	2f10      	cmp	r7, #16
   347b4:	d114      	bne.n	347e0 <_strtol_l.isra.0+0x60>
   347b6:	2c30      	cmp	r4, #48	; 0x30
   347b8:	d00a      	beq.n	347d0 <_strtol_l.isra.0+0x50>
   347ba:	e011      	b.n	347e0 <_strtol_l.isra.0+0x60>
   347bc:	002e      	movs	r6, r5
   347be:	e7e6      	b.n	3478e <_strtol_l.isra.0+0xe>
   347c0:	9301      	str	r3, [sp, #4]
   347c2:	2c2b      	cmp	r4, #43	; 0x2b
   347c4:	d1f3      	bne.n	347ae <_strtol_l.isra.0+0x2e>
   347c6:	782c      	ldrb	r4, [r5, #0]
   347c8:	1cb5      	adds	r5, r6, #2
   347ca:	e7f0      	b.n	347ae <_strtol_l.isra.0+0x2e>
   347cc:	2c30      	cmp	r4, #48	; 0x30
   347ce:	d12f      	bne.n	34830 <_strtol_l.isra.0+0xb0>
   347d0:	2220      	movs	r2, #32
   347d2:	782b      	ldrb	r3, [r5, #0]
   347d4:	4393      	bics	r3, r2
   347d6:	2b58      	cmp	r3, #88	; 0x58
   347d8:	d151      	bne.n	3487e <_strtol_l.isra.0+0xfe>
   347da:	2710      	movs	r7, #16
   347dc:	786c      	ldrb	r4, [r5, #1]
   347de:	3502      	adds	r5, #2
   347e0:	9b01      	ldr	r3, [sp, #4]
   347e2:	4a29      	ldr	r2, [pc, #164]	; (34888 <_strtol_l.isra.0+0x108>)
   347e4:	0039      	movs	r1, r7
   347e6:	189e      	adds	r6, r3, r2
   347e8:	0030      	movs	r0, r6
   347ea:	f7fd fbdd 	bl	31fa8 <__aeabi_uidivmod>
   347ee:	0030      	movs	r0, r6
   347f0:	9104      	str	r1, [sp, #16]
   347f2:	0039      	movs	r1, r7
   347f4:	f7fd fb52 	bl	31e9c <__udivsi3>
   347f8:	2101      	movs	r1, #1
   347fa:	2300      	movs	r3, #0
   347fc:	4249      	negs	r1, r1
   347fe:	0002      	movs	r2, r0
   34800:	468c      	mov	ip, r1
   34802:	0018      	movs	r0, r3
   34804:	0021      	movs	r1, r4
   34806:	3930      	subs	r1, #48	; 0x30
   34808:	2909      	cmp	r1, #9
   3480a:	d813      	bhi.n	34834 <_strtol_l.isra.0+0xb4>
   3480c:	000c      	movs	r4, r1
   3480e:	42a7      	cmp	r7, r4
   34810:	dd1c      	ble.n	3484c <_strtol_l.isra.0+0xcc>
   34812:	1c59      	adds	r1, r3, #1
   34814:	d009      	beq.n	3482a <_strtol_l.isra.0+0xaa>
   34816:	4663      	mov	r3, ip
   34818:	4282      	cmp	r2, r0
   3481a:	d306      	bcc.n	3482a <_strtol_l.isra.0+0xaa>
   3481c:	d102      	bne.n	34824 <_strtol_l.isra.0+0xa4>
   3481e:	9904      	ldr	r1, [sp, #16]
   34820:	42a1      	cmp	r1, r4
   34822:	db02      	blt.n	3482a <_strtol_l.isra.0+0xaa>
   34824:	2301      	movs	r3, #1
   34826:	4378      	muls	r0, r7
   34828:	1820      	adds	r0, r4, r0
   3482a:	782c      	ldrb	r4, [r5, #0]
   3482c:	3501      	adds	r5, #1
   3482e:	e7e9      	b.n	34804 <_strtol_l.isra.0+0x84>
   34830:	270a      	movs	r7, #10
   34832:	e7d5      	b.n	347e0 <_strtol_l.isra.0+0x60>
   34834:	0021      	movs	r1, r4
   34836:	3941      	subs	r1, #65	; 0x41
   34838:	2919      	cmp	r1, #25
   3483a:	d801      	bhi.n	34840 <_strtol_l.isra.0+0xc0>
   3483c:	3c37      	subs	r4, #55	; 0x37
   3483e:	e7e6      	b.n	3480e <_strtol_l.isra.0+0x8e>
   34840:	0021      	movs	r1, r4
   34842:	3961      	subs	r1, #97	; 0x61
   34844:	2919      	cmp	r1, #25
   34846:	d801      	bhi.n	3484c <_strtol_l.isra.0+0xcc>
   34848:	3c57      	subs	r4, #87	; 0x57
   3484a:	e7e0      	b.n	3480e <_strtol_l.isra.0+0x8e>
   3484c:	1c5a      	adds	r2, r3, #1
   3484e:	d108      	bne.n	34862 <_strtol_l.isra.0+0xe2>
   34850:	9a05      	ldr	r2, [sp, #20]
   34852:	3323      	adds	r3, #35	; 0x23
   34854:	6013      	str	r3, [r2, #0]
   34856:	9b02      	ldr	r3, [sp, #8]
   34858:	0030      	movs	r0, r6
   3485a:	2b00      	cmp	r3, #0
   3485c:	d10b      	bne.n	34876 <_strtol_l.isra.0+0xf6>
   3485e:	b007      	add	sp, #28
   34860:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34862:	9a01      	ldr	r2, [sp, #4]
   34864:	2a00      	cmp	r2, #0
   34866:	d000      	beq.n	3486a <_strtol_l.isra.0+0xea>
   34868:	4240      	negs	r0, r0
   3486a:	9a02      	ldr	r2, [sp, #8]
   3486c:	2a00      	cmp	r2, #0
   3486e:	d0f6      	beq.n	3485e <_strtol_l.isra.0+0xde>
   34870:	9a03      	ldr	r2, [sp, #12]
   34872:	2b00      	cmp	r3, #0
   34874:	d000      	beq.n	34878 <_strtol_l.isra.0+0xf8>
   34876:	1e6a      	subs	r2, r5, #1
   34878:	9b02      	ldr	r3, [sp, #8]
   3487a:	601a      	str	r2, [r3, #0]
   3487c:	e7ef      	b.n	3485e <_strtol_l.isra.0+0xde>
   3487e:	2430      	movs	r4, #48	; 0x30
   34880:	2f00      	cmp	r7, #0
   34882:	d1ad      	bne.n	347e0 <_strtol_l.isra.0+0x60>
   34884:	3708      	adds	r7, #8
   34886:	e7ab      	b.n	347e0 <_strtol_l.isra.0+0x60>
   34888:	7fffffff 	.word	0x7fffffff

0003488c <strtol>:
   3488c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3488e:	0013      	movs	r3, r2
   34890:	4a06      	ldr	r2, [pc, #24]	; (348ac <strtol+0x20>)
   34892:	0005      	movs	r5, r0
   34894:	6810      	ldr	r0, [r2, #0]
   34896:	6a04      	ldr	r4, [r0, #32]
   34898:	2c00      	cmp	r4, #0
   3489a:	d100      	bne.n	3489e <strtol+0x12>
   3489c:	4c04      	ldr	r4, [pc, #16]	; (348b0 <strtol+0x24>)
   3489e:	000a      	movs	r2, r1
   348a0:	9400      	str	r4, [sp, #0]
   348a2:	0029      	movs	r1, r5
   348a4:	f7ff ff6c 	bl	34780 <_strtol_l.isra.0>
   348a8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   348aa:	46c0      	nop			; (mov r8, r8)
   348ac:	20000118 	.word	0x20000118
   348b0:	2000017c 	.word	0x2000017c

000348b4 <_vsniprintf_r>:
   348b4:	b530      	push	{r4, r5, lr}
   348b6:	0014      	movs	r4, r2
   348b8:	b09b      	sub	sp, #108	; 0x6c
   348ba:	0005      	movs	r5, r0
   348bc:	001a      	movs	r2, r3
   348be:	2c00      	cmp	r4, #0
   348c0:	da05      	bge.n	348ce <_vsniprintf_r+0x1a>
   348c2:	238b      	movs	r3, #139	; 0x8b
   348c4:	6003      	str	r3, [r0, #0]
   348c6:	2001      	movs	r0, #1
   348c8:	4240      	negs	r0, r0
   348ca:	b01b      	add	sp, #108	; 0x6c
   348cc:	bd30      	pop	{r4, r5, pc}
   348ce:	2382      	movs	r3, #130	; 0x82
   348d0:	4668      	mov	r0, sp
   348d2:	009b      	lsls	r3, r3, #2
   348d4:	8183      	strh	r3, [r0, #12]
   348d6:	2300      	movs	r3, #0
   348d8:	9100      	str	r1, [sp, #0]
   348da:	9104      	str	r1, [sp, #16]
   348dc:	429c      	cmp	r4, r3
   348de:	d000      	beq.n	348e2 <_vsniprintf_r+0x2e>
   348e0:	1e63      	subs	r3, r4, #1
   348e2:	9302      	str	r3, [sp, #8]
   348e4:	9305      	str	r3, [sp, #20]
   348e6:	2301      	movs	r3, #1
   348e8:	4669      	mov	r1, sp
   348ea:	425b      	negs	r3, r3
   348ec:	81cb      	strh	r3, [r1, #14]
   348ee:	0028      	movs	r0, r5
   348f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   348f2:	f000 fb63 	bl	34fbc <_svfiprintf_r>
   348f6:	1c43      	adds	r3, r0, #1
   348f8:	da01      	bge.n	348fe <_vsniprintf_r+0x4a>
   348fa:	238b      	movs	r3, #139	; 0x8b
   348fc:	602b      	str	r3, [r5, #0]
   348fe:	2c00      	cmp	r4, #0
   34900:	d0e3      	beq.n	348ca <_vsniprintf_r+0x16>
   34902:	2300      	movs	r3, #0
   34904:	9a00      	ldr	r2, [sp, #0]
   34906:	7013      	strb	r3, [r2, #0]
   34908:	e7df      	b.n	348ca <_vsniprintf_r+0x16>
	...

0003490c <vsniprintf>:
   3490c:	b507      	push	{r0, r1, r2, lr}
   3490e:	9300      	str	r3, [sp, #0]
   34910:	0013      	movs	r3, r2
   34912:	000a      	movs	r2, r1
   34914:	0001      	movs	r1, r0
   34916:	4802      	ldr	r0, [pc, #8]	; (34920 <vsniprintf+0x14>)
   34918:	6800      	ldr	r0, [r0, #0]
   3491a:	f7ff ffcb 	bl	348b4 <_vsniprintf_r>
   3491e:	bd0e      	pop	{r1, r2, r3, pc}
   34920:	20000118 	.word	0x20000118

00034924 <__swbuf_r>:
   34924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34926:	0005      	movs	r5, r0
   34928:	000e      	movs	r6, r1
   3492a:	0014      	movs	r4, r2
   3492c:	2800      	cmp	r0, #0
   3492e:	d004      	beq.n	3493a <__swbuf_r+0x16>
   34930:	6983      	ldr	r3, [r0, #24]
   34932:	2b00      	cmp	r3, #0
   34934:	d101      	bne.n	3493a <__swbuf_r+0x16>
   34936:	f000 f9b9 	bl	34cac <__sinit>
   3493a:	4b22      	ldr	r3, [pc, #136]	; (349c4 <__swbuf_r+0xa0>)
   3493c:	429c      	cmp	r4, r3
   3493e:	d12d      	bne.n	3499c <__swbuf_r+0x78>
   34940:	686c      	ldr	r4, [r5, #4]
   34942:	69a3      	ldr	r3, [r4, #24]
   34944:	60a3      	str	r3, [r4, #8]
   34946:	89a3      	ldrh	r3, [r4, #12]
   34948:	071b      	lsls	r3, r3, #28
   3494a:	d531      	bpl.n	349b0 <__swbuf_r+0x8c>
   3494c:	6923      	ldr	r3, [r4, #16]
   3494e:	2b00      	cmp	r3, #0
   34950:	d02e      	beq.n	349b0 <__swbuf_r+0x8c>
   34952:	6823      	ldr	r3, [r4, #0]
   34954:	6922      	ldr	r2, [r4, #16]
   34956:	b2f7      	uxtb	r7, r6
   34958:	1a98      	subs	r0, r3, r2
   3495a:	6963      	ldr	r3, [r4, #20]
   3495c:	b2f6      	uxtb	r6, r6
   3495e:	4298      	cmp	r0, r3
   34960:	db05      	blt.n	3496e <__swbuf_r+0x4a>
   34962:	0021      	movs	r1, r4
   34964:	0028      	movs	r0, r5
   34966:	f000 f933 	bl	34bd0 <_fflush_r>
   3496a:	2800      	cmp	r0, #0
   3496c:	d126      	bne.n	349bc <__swbuf_r+0x98>
   3496e:	68a3      	ldr	r3, [r4, #8]
   34970:	3001      	adds	r0, #1
   34972:	3b01      	subs	r3, #1
   34974:	60a3      	str	r3, [r4, #8]
   34976:	6823      	ldr	r3, [r4, #0]
   34978:	1c5a      	adds	r2, r3, #1
   3497a:	6022      	str	r2, [r4, #0]
   3497c:	701f      	strb	r7, [r3, #0]
   3497e:	6963      	ldr	r3, [r4, #20]
   34980:	4298      	cmp	r0, r3
   34982:	d004      	beq.n	3498e <__swbuf_r+0x6a>
   34984:	89a3      	ldrh	r3, [r4, #12]
   34986:	07db      	lsls	r3, r3, #31
   34988:	d51a      	bpl.n	349c0 <__swbuf_r+0x9c>
   3498a:	2e0a      	cmp	r6, #10
   3498c:	d118      	bne.n	349c0 <__swbuf_r+0x9c>
   3498e:	0021      	movs	r1, r4
   34990:	0028      	movs	r0, r5
   34992:	f000 f91d 	bl	34bd0 <_fflush_r>
   34996:	2800      	cmp	r0, #0
   34998:	d012      	beq.n	349c0 <__swbuf_r+0x9c>
   3499a:	e00f      	b.n	349bc <__swbuf_r+0x98>
   3499c:	4b0a      	ldr	r3, [pc, #40]	; (349c8 <__swbuf_r+0xa4>)
   3499e:	429c      	cmp	r4, r3
   349a0:	d101      	bne.n	349a6 <__swbuf_r+0x82>
   349a2:	68ac      	ldr	r4, [r5, #8]
   349a4:	e7cd      	b.n	34942 <__swbuf_r+0x1e>
   349a6:	4b09      	ldr	r3, [pc, #36]	; (349cc <__swbuf_r+0xa8>)
   349a8:	429c      	cmp	r4, r3
   349aa:	d1ca      	bne.n	34942 <__swbuf_r+0x1e>
   349ac:	68ec      	ldr	r4, [r5, #12]
   349ae:	e7c8      	b.n	34942 <__swbuf_r+0x1e>
   349b0:	0021      	movs	r1, r4
   349b2:	0028      	movs	r0, r5
   349b4:	f000 f80c 	bl	349d0 <__swsetup_r>
   349b8:	2800      	cmp	r0, #0
   349ba:	d0ca      	beq.n	34952 <__swbuf_r+0x2e>
   349bc:	2601      	movs	r6, #1
   349be:	4276      	negs	r6, r6
   349c0:	0030      	movs	r0, r6
   349c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   349c4:	00039730 	.word	0x00039730
   349c8:	00039750 	.word	0x00039750
   349cc:	00039710 	.word	0x00039710

000349d0 <__swsetup_r>:
   349d0:	4b36      	ldr	r3, [pc, #216]	; (34aac <__swsetup_r+0xdc>)
   349d2:	b570      	push	{r4, r5, r6, lr}
   349d4:	681d      	ldr	r5, [r3, #0]
   349d6:	0006      	movs	r6, r0
   349d8:	000c      	movs	r4, r1
   349da:	2d00      	cmp	r5, #0
   349dc:	d005      	beq.n	349ea <__swsetup_r+0x1a>
   349de:	69ab      	ldr	r3, [r5, #24]
   349e0:	2b00      	cmp	r3, #0
   349e2:	d102      	bne.n	349ea <__swsetup_r+0x1a>
   349e4:	0028      	movs	r0, r5
   349e6:	f000 f961 	bl	34cac <__sinit>
   349ea:	4b31      	ldr	r3, [pc, #196]	; (34ab0 <__swsetup_r+0xe0>)
   349ec:	429c      	cmp	r4, r3
   349ee:	d10f      	bne.n	34a10 <__swsetup_r+0x40>
   349f0:	686c      	ldr	r4, [r5, #4]
   349f2:	230c      	movs	r3, #12
   349f4:	5ee2      	ldrsh	r2, [r4, r3]
   349f6:	b293      	uxth	r3, r2
   349f8:	0719      	lsls	r1, r3, #28
   349fa:	d42d      	bmi.n	34a58 <__swsetup_r+0x88>
   349fc:	06d9      	lsls	r1, r3, #27
   349fe:	d411      	bmi.n	34a24 <__swsetup_r+0x54>
   34a00:	2309      	movs	r3, #9
   34a02:	2001      	movs	r0, #1
   34a04:	6033      	str	r3, [r6, #0]
   34a06:	3337      	adds	r3, #55	; 0x37
   34a08:	4313      	orrs	r3, r2
   34a0a:	81a3      	strh	r3, [r4, #12]
   34a0c:	4240      	negs	r0, r0
   34a0e:	bd70      	pop	{r4, r5, r6, pc}
   34a10:	4b28      	ldr	r3, [pc, #160]	; (34ab4 <__swsetup_r+0xe4>)
   34a12:	429c      	cmp	r4, r3
   34a14:	d101      	bne.n	34a1a <__swsetup_r+0x4a>
   34a16:	68ac      	ldr	r4, [r5, #8]
   34a18:	e7eb      	b.n	349f2 <__swsetup_r+0x22>
   34a1a:	4b27      	ldr	r3, [pc, #156]	; (34ab8 <__swsetup_r+0xe8>)
   34a1c:	429c      	cmp	r4, r3
   34a1e:	d1e8      	bne.n	349f2 <__swsetup_r+0x22>
   34a20:	68ec      	ldr	r4, [r5, #12]
   34a22:	e7e6      	b.n	349f2 <__swsetup_r+0x22>
   34a24:	075b      	lsls	r3, r3, #29
   34a26:	d513      	bpl.n	34a50 <__swsetup_r+0x80>
   34a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
   34a2a:	2900      	cmp	r1, #0
   34a2c:	d008      	beq.n	34a40 <__swsetup_r+0x70>
   34a2e:	0023      	movs	r3, r4
   34a30:	3344      	adds	r3, #68	; 0x44
   34a32:	4299      	cmp	r1, r3
   34a34:	d002      	beq.n	34a3c <__swsetup_r+0x6c>
   34a36:	0030      	movs	r0, r6
   34a38:	f7ff fc78 	bl	3432c <_free_r>
   34a3c:	2300      	movs	r3, #0
   34a3e:	6363      	str	r3, [r4, #52]	; 0x34
   34a40:	2224      	movs	r2, #36	; 0x24
   34a42:	89a3      	ldrh	r3, [r4, #12]
   34a44:	4393      	bics	r3, r2
   34a46:	81a3      	strh	r3, [r4, #12]
   34a48:	2300      	movs	r3, #0
   34a4a:	6063      	str	r3, [r4, #4]
   34a4c:	6923      	ldr	r3, [r4, #16]
   34a4e:	6023      	str	r3, [r4, #0]
   34a50:	2308      	movs	r3, #8
   34a52:	89a2      	ldrh	r2, [r4, #12]
   34a54:	4313      	orrs	r3, r2
   34a56:	81a3      	strh	r3, [r4, #12]
   34a58:	6923      	ldr	r3, [r4, #16]
   34a5a:	2b00      	cmp	r3, #0
   34a5c:	d10b      	bne.n	34a76 <__swsetup_r+0xa6>
   34a5e:	21a0      	movs	r1, #160	; 0xa0
   34a60:	2280      	movs	r2, #128	; 0x80
   34a62:	89a3      	ldrh	r3, [r4, #12]
   34a64:	0089      	lsls	r1, r1, #2
   34a66:	0092      	lsls	r2, r2, #2
   34a68:	400b      	ands	r3, r1
   34a6a:	4293      	cmp	r3, r2
   34a6c:	d003      	beq.n	34a76 <__swsetup_r+0xa6>
   34a6e:	0021      	movs	r1, r4
   34a70:	0030      	movs	r0, r6
   34a72:	f000 f9e9 	bl	34e48 <__smakebuf_r>
   34a76:	2301      	movs	r3, #1
   34a78:	89a2      	ldrh	r2, [r4, #12]
   34a7a:	4013      	ands	r3, r2
   34a7c:	d011      	beq.n	34aa2 <__swsetup_r+0xd2>
   34a7e:	2300      	movs	r3, #0
   34a80:	60a3      	str	r3, [r4, #8]
   34a82:	6963      	ldr	r3, [r4, #20]
   34a84:	425b      	negs	r3, r3
   34a86:	61a3      	str	r3, [r4, #24]
   34a88:	2000      	movs	r0, #0
   34a8a:	6923      	ldr	r3, [r4, #16]
   34a8c:	4283      	cmp	r3, r0
   34a8e:	d1be      	bne.n	34a0e <__swsetup_r+0x3e>
   34a90:	230c      	movs	r3, #12
   34a92:	5ee2      	ldrsh	r2, [r4, r3]
   34a94:	0613      	lsls	r3, r2, #24
   34a96:	d5ba      	bpl.n	34a0e <__swsetup_r+0x3e>
   34a98:	2340      	movs	r3, #64	; 0x40
   34a9a:	4313      	orrs	r3, r2
   34a9c:	81a3      	strh	r3, [r4, #12]
   34a9e:	3801      	subs	r0, #1
   34aa0:	e7b5      	b.n	34a0e <__swsetup_r+0x3e>
   34aa2:	0792      	lsls	r2, r2, #30
   34aa4:	d400      	bmi.n	34aa8 <__swsetup_r+0xd8>
   34aa6:	6963      	ldr	r3, [r4, #20]
   34aa8:	60a3      	str	r3, [r4, #8]
   34aaa:	e7ed      	b.n	34a88 <__swsetup_r+0xb8>
   34aac:	20000118 	.word	0x20000118
   34ab0:	00039730 	.word	0x00039730
   34ab4:	00039750 	.word	0x00039750
   34ab8:	00039710 	.word	0x00039710

00034abc <__sflush_r>:
   34abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34abe:	898a      	ldrh	r2, [r1, #12]
   34ac0:	0005      	movs	r5, r0
   34ac2:	000c      	movs	r4, r1
   34ac4:	0713      	lsls	r3, r2, #28
   34ac6:	d460      	bmi.n	34b8a <__sflush_r+0xce>
   34ac8:	684b      	ldr	r3, [r1, #4]
   34aca:	2b00      	cmp	r3, #0
   34acc:	dc04      	bgt.n	34ad8 <__sflush_r+0x1c>
   34ace:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   34ad0:	2b00      	cmp	r3, #0
   34ad2:	dc01      	bgt.n	34ad8 <__sflush_r+0x1c>
   34ad4:	2000      	movs	r0, #0
   34ad6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   34ad8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   34ada:	2f00      	cmp	r7, #0
   34adc:	d0fa      	beq.n	34ad4 <__sflush_r+0x18>
   34ade:	2300      	movs	r3, #0
   34ae0:	682e      	ldr	r6, [r5, #0]
   34ae2:	602b      	str	r3, [r5, #0]
   34ae4:	2380      	movs	r3, #128	; 0x80
   34ae6:	015b      	lsls	r3, r3, #5
   34ae8:	401a      	ands	r2, r3
   34aea:	d034      	beq.n	34b56 <__sflush_r+0x9a>
   34aec:	6d60      	ldr	r0, [r4, #84]	; 0x54
   34aee:	89a3      	ldrh	r3, [r4, #12]
   34af0:	075b      	lsls	r3, r3, #29
   34af2:	d506      	bpl.n	34b02 <__sflush_r+0x46>
   34af4:	6863      	ldr	r3, [r4, #4]
   34af6:	1ac0      	subs	r0, r0, r3
   34af8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   34afa:	2b00      	cmp	r3, #0
   34afc:	d001      	beq.n	34b02 <__sflush_r+0x46>
   34afe:	6c23      	ldr	r3, [r4, #64]	; 0x40
   34b00:	1ac0      	subs	r0, r0, r3
   34b02:	0002      	movs	r2, r0
   34b04:	6a21      	ldr	r1, [r4, #32]
   34b06:	2300      	movs	r3, #0
   34b08:	0028      	movs	r0, r5
   34b0a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   34b0c:	47b8      	blx	r7
   34b0e:	89a1      	ldrh	r1, [r4, #12]
   34b10:	1c43      	adds	r3, r0, #1
   34b12:	d106      	bne.n	34b22 <__sflush_r+0x66>
   34b14:	682b      	ldr	r3, [r5, #0]
   34b16:	2b1d      	cmp	r3, #29
   34b18:	d831      	bhi.n	34b7e <__sflush_r+0xc2>
   34b1a:	4a2c      	ldr	r2, [pc, #176]	; (34bcc <__sflush_r+0x110>)
   34b1c:	40da      	lsrs	r2, r3
   34b1e:	07d3      	lsls	r3, r2, #31
   34b20:	d52d      	bpl.n	34b7e <__sflush_r+0xc2>
   34b22:	2300      	movs	r3, #0
   34b24:	6063      	str	r3, [r4, #4]
   34b26:	6923      	ldr	r3, [r4, #16]
   34b28:	6023      	str	r3, [r4, #0]
   34b2a:	04cb      	lsls	r3, r1, #19
   34b2c:	d505      	bpl.n	34b3a <__sflush_r+0x7e>
   34b2e:	1c43      	adds	r3, r0, #1
   34b30:	d102      	bne.n	34b38 <__sflush_r+0x7c>
   34b32:	682b      	ldr	r3, [r5, #0]
   34b34:	2b00      	cmp	r3, #0
   34b36:	d100      	bne.n	34b3a <__sflush_r+0x7e>
   34b38:	6560      	str	r0, [r4, #84]	; 0x54
   34b3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   34b3c:	602e      	str	r6, [r5, #0]
   34b3e:	2900      	cmp	r1, #0
   34b40:	d0c8      	beq.n	34ad4 <__sflush_r+0x18>
   34b42:	0023      	movs	r3, r4
   34b44:	3344      	adds	r3, #68	; 0x44
   34b46:	4299      	cmp	r1, r3
   34b48:	d002      	beq.n	34b50 <__sflush_r+0x94>
   34b4a:	0028      	movs	r0, r5
   34b4c:	f7ff fbee 	bl	3432c <_free_r>
   34b50:	2000      	movs	r0, #0
   34b52:	6360      	str	r0, [r4, #52]	; 0x34
   34b54:	e7bf      	b.n	34ad6 <__sflush_r+0x1a>
   34b56:	2301      	movs	r3, #1
   34b58:	6a21      	ldr	r1, [r4, #32]
   34b5a:	0028      	movs	r0, r5
   34b5c:	47b8      	blx	r7
   34b5e:	1c43      	adds	r3, r0, #1
   34b60:	d1c5      	bne.n	34aee <__sflush_r+0x32>
   34b62:	682b      	ldr	r3, [r5, #0]
   34b64:	2b00      	cmp	r3, #0
   34b66:	d0c2      	beq.n	34aee <__sflush_r+0x32>
   34b68:	2b1d      	cmp	r3, #29
   34b6a:	d001      	beq.n	34b70 <__sflush_r+0xb4>
   34b6c:	2b16      	cmp	r3, #22
   34b6e:	d101      	bne.n	34b74 <__sflush_r+0xb8>
   34b70:	602e      	str	r6, [r5, #0]
   34b72:	e7af      	b.n	34ad4 <__sflush_r+0x18>
   34b74:	2340      	movs	r3, #64	; 0x40
   34b76:	89a2      	ldrh	r2, [r4, #12]
   34b78:	4313      	orrs	r3, r2
   34b7a:	81a3      	strh	r3, [r4, #12]
   34b7c:	e7ab      	b.n	34ad6 <__sflush_r+0x1a>
   34b7e:	2340      	movs	r3, #64	; 0x40
   34b80:	430b      	orrs	r3, r1
   34b82:	2001      	movs	r0, #1
   34b84:	81a3      	strh	r3, [r4, #12]
   34b86:	4240      	negs	r0, r0
   34b88:	e7a5      	b.n	34ad6 <__sflush_r+0x1a>
   34b8a:	690f      	ldr	r7, [r1, #16]
   34b8c:	2f00      	cmp	r7, #0
   34b8e:	d0a1      	beq.n	34ad4 <__sflush_r+0x18>
   34b90:	680b      	ldr	r3, [r1, #0]
   34b92:	600f      	str	r7, [r1, #0]
   34b94:	1bdb      	subs	r3, r3, r7
   34b96:	9301      	str	r3, [sp, #4]
   34b98:	2300      	movs	r3, #0
   34b9a:	0792      	lsls	r2, r2, #30
   34b9c:	d100      	bne.n	34ba0 <__sflush_r+0xe4>
   34b9e:	694b      	ldr	r3, [r1, #20]
   34ba0:	60a3      	str	r3, [r4, #8]
   34ba2:	9b01      	ldr	r3, [sp, #4]
   34ba4:	2b00      	cmp	r3, #0
   34ba6:	dc00      	bgt.n	34baa <__sflush_r+0xee>
   34ba8:	e794      	b.n	34ad4 <__sflush_r+0x18>
   34baa:	9b01      	ldr	r3, [sp, #4]
   34bac:	003a      	movs	r2, r7
   34bae:	6a21      	ldr	r1, [r4, #32]
   34bb0:	0028      	movs	r0, r5
   34bb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   34bb4:	47b0      	blx	r6
   34bb6:	2800      	cmp	r0, #0
   34bb8:	dc03      	bgt.n	34bc2 <__sflush_r+0x106>
   34bba:	2340      	movs	r3, #64	; 0x40
   34bbc:	89a2      	ldrh	r2, [r4, #12]
   34bbe:	4313      	orrs	r3, r2
   34bc0:	e7df      	b.n	34b82 <__sflush_r+0xc6>
   34bc2:	9b01      	ldr	r3, [sp, #4]
   34bc4:	183f      	adds	r7, r7, r0
   34bc6:	1a1b      	subs	r3, r3, r0
   34bc8:	9301      	str	r3, [sp, #4]
   34bca:	e7ea      	b.n	34ba2 <__sflush_r+0xe6>
   34bcc:	20400001 	.word	0x20400001

00034bd0 <_fflush_r>:
   34bd0:	690b      	ldr	r3, [r1, #16]
   34bd2:	b570      	push	{r4, r5, r6, lr}
   34bd4:	0005      	movs	r5, r0
   34bd6:	000c      	movs	r4, r1
   34bd8:	2b00      	cmp	r3, #0
   34bda:	d101      	bne.n	34be0 <_fflush_r+0x10>
   34bdc:	2000      	movs	r0, #0
   34bde:	bd70      	pop	{r4, r5, r6, pc}
   34be0:	2800      	cmp	r0, #0
   34be2:	d004      	beq.n	34bee <_fflush_r+0x1e>
   34be4:	6983      	ldr	r3, [r0, #24]
   34be6:	2b00      	cmp	r3, #0
   34be8:	d101      	bne.n	34bee <_fflush_r+0x1e>
   34bea:	f000 f85f 	bl	34cac <__sinit>
   34bee:	4b0b      	ldr	r3, [pc, #44]	; (34c1c <_fflush_r+0x4c>)
   34bf0:	429c      	cmp	r4, r3
   34bf2:	d109      	bne.n	34c08 <_fflush_r+0x38>
   34bf4:	686c      	ldr	r4, [r5, #4]
   34bf6:	220c      	movs	r2, #12
   34bf8:	5ea3      	ldrsh	r3, [r4, r2]
   34bfa:	2b00      	cmp	r3, #0
   34bfc:	d0ee      	beq.n	34bdc <_fflush_r+0xc>
   34bfe:	0021      	movs	r1, r4
   34c00:	0028      	movs	r0, r5
   34c02:	f7ff ff5b 	bl	34abc <__sflush_r>
   34c06:	e7ea      	b.n	34bde <_fflush_r+0xe>
   34c08:	4b05      	ldr	r3, [pc, #20]	; (34c20 <_fflush_r+0x50>)
   34c0a:	429c      	cmp	r4, r3
   34c0c:	d101      	bne.n	34c12 <_fflush_r+0x42>
   34c0e:	68ac      	ldr	r4, [r5, #8]
   34c10:	e7f1      	b.n	34bf6 <_fflush_r+0x26>
   34c12:	4b04      	ldr	r3, [pc, #16]	; (34c24 <_fflush_r+0x54>)
   34c14:	429c      	cmp	r4, r3
   34c16:	d1ee      	bne.n	34bf6 <_fflush_r+0x26>
   34c18:	68ec      	ldr	r4, [r5, #12]
   34c1a:	e7ec      	b.n	34bf6 <_fflush_r+0x26>
   34c1c:	00039730 	.word	0x00039730
   34c20:	00039750 	.word	0x00039750
   34c24:	00039710 	.word	0x00039710

00034c28 <_cleanup_r>:
   34c28:	b510      	push	{r4, lr}
   34c2a:	4902      	ldr	r1, [pc, #8]	; (34c34 <_cleanup_r+0xc>)
   34c2c:	f000 f8b2 	bl	34d94 <_fwalk_reent>
   34c30:	bd10      	pop	{r4, pc}
   34c32:	46c0      	nop			; (mov r8, r8)
   34c34:	00034bd1 	.word	0x00034bd1

00034c38 <std.isra.0>:
   34c38:	2300      	movs	r3, #0
   34c3a:	b510      	push	{r4, lr}
   34c3c:	0004      	movs	r4, r0
   34c3e:	6003      	str	r3, [r0, #0]
   34c40:	6043      	str	r3, [r0, #4]
   34c42:	6083      	str	r3, [r0, #8]
   34c44:	8181      	strh	r1, [r0, #12]
   34c46:	6643      	str	r3, [r0, #100]	; 0x64
   34c48:	81c2      	strh	r2, [r0, #14]
   34c4a:	6103      	str	r3, [r0, #16]
   34c4c:	6143      	str	r3, [r0, #20]
   34c4e:	6183      	str	r3, [r0, #24]
   34c50:	0019      	movs	r1, r3
   34c52:	2208      	movs	r2, #8
   34c54:	305c      	adds	r0, #92	; 0x5c
   34c56:	f7ff fb60 	bl	3431a <memset>
   34c5a:	4b05      	ldr	r3, [pc, #20]	; (34c70 <std.isra.0+0x38>)
   34c5c:	6224      	str	r4, [r4, #32]
   34c5e:	6263      	str	r3, [r4, #36]	; 0x24
   34c60:	4b04      	ldr	r3, [pc, #16]	; (34c74 <std.isra.0+0x3c>)
   34c62:	62a3      	str	r3, [r4, #40]	; 0x28
   34c64:	4b04      	ldr	r3, [pc, #16]	; (34c78 <std.isra.0+0x40>)
   34c66:	62e3      	str	r3, [r4, #44]	; 0x2c
   34c68:	4b04      	ldr	r3, [pc, #16]	; (34c7c <std.isra.0+0x44>)
   34c6a:	6323      	str	r3, [r4, #48]	; 0x30
   34c6c:	bd10      	pop	{r4, pc}
   34c6e:	46c0      	nop			; (mov r8, r8)
   34c70:	000354d5 	.word	0x000354d5
   34c74:	000354fd 	.word	0x000354fd
   34c78:	00035535 	.word	0x00035535
   34c7c:	00035561 	.word	0x00035561

00034c80 <__sfmoreglue>:
   34c80:	b570      	push	{r4, r5, r6, lr}
   34c82:	2568      	movs	r5, #104	; 0x68
   34c84:	1e4a      	subs	r2, r1, #1
   34c86:	4355      	muls	r5, r2
   34c88:	000e      	movs	r6, r1
   34c8a:	0029      	movs	r1, r5
   34c8c:	3174      	adds	r1, #116	; 0x74
   34c8e:	f7ff fb97 	bl	343c0 <_malloc_r>
   34c92:	1e04      	subs	r4, r0, #0
   34c94:	d008      	beq.n	34ca8 <__sfmoreglue+0x28>
   34c96:	2100      	movs	r1, #0
   34c98:	002a      	movs	r2, r5
   34c9a:	6001      	str	r1, [r0, #0]
   34c9c:	6046      	str	r6, [r0, #4]
   34c9e:	300c      	adds	r0, #12
   34ca0:	60a0      	str	r0, [r4, #8]
   34ca2:	3268      	adds	r2, #104	; 0x68
   34ca4:	f7ff fb39 	bl	3431a <memset>
   34ca8:	0020      	movs	r0, r4
   34caa:	bd70      	pop	{r4, r5, r6, pc}

00034cac <__sinit>:
   34cac:	6983      	ldr	r3, [r0, #24]
   34cae:	b513      	push	{r0, r1, r4, lr}
   34cb0:	0004      	movs	r4, r0
   34cb2:	2b00      	cmp	r3, #0
   34cb4:	d128      	bne.n	34d08 <__sinit+0x5c>
   34cb6:	6483      	str	r3, [r0, #72]	; 0x48
   34cb8:	64c3      	str	r3, [r0, #76]	; 0x4c
   34cba:	6503      	str	r3, [r0, #80]	; 0x50
   34cbc:	4b13      	ldr	r3, [pc, #76]	; (34d0c <__sinit+0x60>)
   34cbe:	4a14      	ldr	r2, [pc, #80]	; (34d10 <__sinit+0x64>)
   34cc0:	681b      	ldr	r3, [r3, #0]
   34cc2:	6282      	str	r2, [r0, #40]	; 0x28
   34cc4:	9301      	str	r3, [sp, #4]
   34cc6:	4298      	cmp	r0, r3
   34cc8:	d101      	bne.n	34cce <__sinit+0x22>
   34cca:	2301      	movs	r3, #1
   34ccc:	6183      	str	r3, [r0, #24]
   34cce:	0020      	movs	r0, r4
   34cd0:	f000 f820 	bl	34d14 <__sfp>
   34cd4:	6060      	str	r0, [r4, #4]
   34cd6:	0020      	movs	r0, r4
   34cd8:	f000 f81c 	bl	34d14 <__sfp>
   34cdc:	60a0      	str	r0, [r4, #8]
   34cde:	0020      	movs	r0, r4
   34ce0:	f000 f818 	bl	34d14 <__sfp>
   34ce4:	2200      	movs	r2, #0
   34ce6:	60e0      	str	r0, [r4, #12]
   34ce8:	2104      	movs	r1, #4
   34cea:	6860      	ldr	r0, [r4, #4]
   34cec:	f7ff ffa4 	bl	34c38 <std.isra.0>
   34cf0:	2201      	movs	r2, #1
   34cf2:	2109      	movs	r1, #9
   34cf4:	68a0      	ldr	r0, [r4, #8]
   34cf6:	f7ff ff9f 	bl	34c38 <std.isra.0>
   34cfa:	2202      	movs	r2, #2
   34cfc:	2112      	movs	r1, #18
   34cfe:	68e0      	ldr	r0, [r4, #12]
   34d00:	f7ff ff9a 	bl	34c38 <std.isra.0>
   34d04:	2301      	movs	r3, #1
   34d06:	61a3      	str	r3, [r4, #24]
   34d08:	bd13      	pop	{r0, r1, r4, pc}
   34d0a:	46c0      	nop			; (mov r8, r8)
   34d0c:	0003970c 	.word	0x0003970c
   34d10:	00034c29 	.word	0x00034c29

00034d14 <__sfp>:
   34d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34d16:	4b1e      	ldr	r3, [pc, #120]	; (34d90 <__sfp+0x7c>)
   34d18:	0007      	movs	r7, r0
   34d1a:	681e      	ldr	r6, [r3, #0]
   34d1c:	69b3      	ldr	r3, [r6, #24]
   34d1e:	2b00      	cmp	r3, #0
   34d20:	d102      	bne.n	34d28 <__sfp+0x14>
   34d22:	0030      	movs	r0, r6
   34d24:	f7ff ffc2 	bl	34cac <__sinit>
   34d28:	3648      	adds	r6, #72	; 0x48
   34d2a:	68b4      	ldr	r4, [r6, #8]
   34d2c:	6873      	ldr	r3, [r6, #4]
   34d2e:	3b01      	subs	r3, #1
   34d30:	d504      	bpl.n	34d3c <__sfp+0x28>
   34d32:	6833      	ldr	r3, [r6, #0]
   34d34:	2b00      	cmp	r3, #0
   34d36:	d007      	beq.n	34d48 <__sfp+0x34>
   34d38:	6836      	ldr	r6, [r6, #0]
   34d3a:	e7f6      	b.n	34d2a <__sfp+0x16>
   34d3c:	220c      	movs	r2, #12
   34d3e:	5ea5      	ldrsh	r5, [r4, r2]
   34d40:	2d00      	cmp	r5, #0
   34d42:	d00d      	beq.n	34d60 <__sfp+0x4c>
   34d44:	3468      	adds	r4, #104	; 0x68
   34d46:	e7f2      	b.n	34d2e <__sfp+0x1a>
   34d48:	2104      	movs	r1, #4
   34d4a:	0038      	movs	r0, r7
   34d4c:	f7ff ff98 	bl	34c80 <__sfmoreglue>
   34d50:	6030      	str	r0, [r6, #0]
   34d52:	2800      	cmp	r0, #0
   34d54:	d1f0      	bne.n	34d38 <__sfp+0x24>
   34d56:	230c      	movs	r3, #12
   34d58:	0004      	movs	r4, r0
   34d5a:	603b      	str	r3, [r7, #0]
   34d5c:	0020      	movs	r0, r4
   34d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34d60:	2301      	movs	r3, #1
   34d62:	0020      	movs	r0, r4
   34d64:	425b      	negs	r3, r3
   34d66:	81e3      	strh	r3, [r4, #14]
   34d68:	3302      	adds	r3, #2
   34d6a:	81a3      	strh	r3, [r4, #12]
   34d6c:	6665      	str	r5, [r4, #100]	; 0x64
   34d6e:	6025      	str	r5, [r4, #0]
   34d70:	60a5      	str	r5, [r4, #8]
   34d72:	6065      	str	r5, [r4, #4]
   34d74:	6125      	str	r5, [r4, #16]
   34d76:	6165      	str	r5, [r4, #20]
   34d78:	61a5      	str	r5, [r4, #24]
   34d7a:	2208      	movs	r2, #8
   34d7c:	0029      	movs	r1, r5
   34d7e:	305c      	adds	r0, #92	; 0x5c
   34d80:	f7ff facb 	bl	3431a <memset>
   34d84:	6365      	str	r5, [r4, #52]	; 0x34
   34d86:	63a5      	str	r5, [r4, #56]	; 0x38
   34d88:	64a5      	str	r5, [r4, #72]	; 0x48
   34d8a:	64e5      	str	r5, [r4, #76]	; 0x4c
   34d8c:	e7e6      	b.n	34d5c <__sfp+0x48>
   34d8e:	46c0      	nop			; (mov r8, r8)
   34d90:	0003970c 	.word	0x0003970c

00034d94 <_fwalk_reent>:
   34d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34d96:	0004      	movs	r4, r0
   34d98:	0007      	movs	r7, r0
   34d9a:	2600      	movs	r6, #0
   34d9c:	9101      	str	r1, [sp, #4]
   34d9e:	3448      	adds	r4, #72	; 0x48
   34da0:	2c00      	cmp	r4, #0
   34da2:	d101      	bne.n	34da8 <_fwalk_reent+0x14>
   34da4:	0030      	movs	r0, r6
   34da6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   34da8:	6863      	ldr	r3, [r4, #4]
   34daa:	68a5      	ldr	r5, [r4, #8]
   34dac:	9300      	str	r3, [sp, #0]
   34dae:	9b00      	ldr	r3, [sp, #0]
   34db0:	3b01      	subs	r3, #1
   34db2:	9300      	str	r3, [sp, #0]
   34db4:	d501      	bpl.n	34dba <_fwalk_reent+0x26>
   34db6:	6824      	ldr	r4, [r4, #0]
   34db8:	e7f2      	b.n	34da0 <_fwalk_reent+0xc>
   34dba:	89ab      	ldrh	r3, [r5, #12]
   34dbc:	2b01      	cmp	r3, #1
   34dbe:	d908      	bls.n	34dd2 <_fwalk_reent+0x3e>
   34dc0:	220e      	movs	r2, #14
   34dc2:	5eab      	ldrsh	r3, [r5, r2]
   34dc4:	3301      	adds	r3, #1
   34dc6:	d004      	beq.n	34dd2 <_fwalk_reent+0x3e>
   34dc8:	0029      	movs	r1, r5
   34dca:	0038      	movs	r0, r7
   34dcc:	9b01      	ldr	r3, [sp, #4]
   34dce:	4798      	blx	r3
   34dd0:	4306      	orrs	r6, r0
   34dd2:	3568      	adds	r5, #104	; 0x68
   34dd4:	e7eb      	b.n	34dae <_fwalk_reent+0x1a>

00034dd6 <__locale_ctype_ptr_l>:
   34dd6:	30ec      	adds	r0, #236	; 0xec
   34dd8:	6800      	ldr	r0, [r0, #0]
   34dda:	4770      	bx	lr

00034ddc <__locale_ctype_ptr>:
   34ddc:	4b04      	ldr	r3, [pc, #16]	; (34df0 <__locale_ctype_ptr+0x14>)
   34dde:	681b      	ldr	r3, [r3, #0]
   34de0:	6a1b      	ldr	r3, [r3, #32]
   34de2:	2b00      	cmp	r3, #0
   34de4:	d100      	bne.n	34de8 <__locale_ctype_ptr+0xc>
   34de6:	4b03      	ldr	r3, [pc, #12]	; (34df4 <__locale_ctype_ptr+0x18>)
   34de8:	33ec      	adds	r3, #236	; 0xec
   34dea:	6818      	ldr	r0, [r3, #0]
   34dec:	4770      	bx	lr
   34dee:	46c0      	nop			; (mov r8, r8)
   34df0:	20000118 	.word	0x20000118
   34df4:	2000017c 	.word	0x2000017c

00034df8 <__swhatbuf_r>:
   34df8:	b570      	push	{r4, r5, r6, lr}
   34dfa:	000e      	movs	r6, r1
   34dfc:	001d      	movs	r5, r3
   34dfe:	230e      	movs	r3, #14
   34e00:	5ec9      	ldrsh	r1, [r1, r3]
   34e02:	b090      	sub	sp, #64	; 0x40
   34e04:	0014      	movs	r4, r2
   34e06:	2900      	cmp	r1, #0
   34e08:	da07      	bge.n	34e1a <__swhatbuf_r+0x22>
   34e0a:	2300      	movs	r3, #0
   34e0c:	602b      	str	r3, [r5, #0]
   34e0e:	89b3      	ldrh	r3, [r6, #12]
   34e10:	061b      	lsls	r3, r3, #24
   34e12:	d411      	bmi.n	34e38 <__swhatbuf_r+0x40>
   34e14:	2380      	movs	r3, #128	; 0x80
   34e16:	00db      	lsls	r3, r3, #3
   34e18:	e00f      	b.n	34e3a <__swhatbuf_r+0x42>
   34e1a:	aa01      	add	r2, sp, #4
   34e1c:	f000 fbe6 	bl	355ec <_fstat_r>
   34e20:	2800      	cmp	r0, #0
   34e22:	dbf2      	blt.n	34e0a <__swhatbuf_r+0x12>
   34e24:	22f0      	movs	r2, #240	; 0xf0
   34e26:	9b02      	ldr	r3, [sp, #8]
   34e28:	0212      	lsls	r2, r2, #8
   34e2a:	4013      	ands	r3, r2
   34e2c:	4a05      	ldr	r2, [pc, #20]	; (34e44 <__swhatbuf_r+0x4c>)
   34e2e:	189b      	adds	r3, r3, r2
   34e30:	425a      	negs	r2, r3
   34e32:	4153      	adcs	r3, r2
   34e34:	602b      	str	r3, [r5, #0]
   34e36:	e7ed      	b.n	34e14 <__swhatbuf_r+0x1c>
   34e38:	2340      	movs	r3, #64	; 0x40
   34e3a:	2000      	movs	r0, #0
   34e3c:	6023      	str	r3, [r4, #0]
   34e3e:	b010      	add	sp, #64	; 0x40
   34e40:	bd70      	pop	{r4, r5, r6, pc}
   34e42:	46c0      	nop			; (mov r8, r8)
   34e44:	ffffe000 	.word	0xffffe000

00034e48 <__smakebuf_r>:
   34e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34e4a:	2602      	movs	r6, #2
   34e4c:	898b      	ldrh	r3, [r1, #12]
   34e4e:	0005      	movs	r5, r0
   34e50:	000c      	movs	r4, r1
   34e52:	4233      	tst	r3, r6
   34e54:	d006      	beq.n	34e64 <__smakebuf_r+0x1c>
   34e56:	0023      	movs	r3, r4
   34e58:	3347      	adds	r3, #71	; 0x47
   34e5a:	6023      	str	r3, [r4, #0]
   34e5c:	6123      	str	r3, [r4, #16]
   34e5e:	2301      	movs	r3, #1
   34e60:	6163      	str	r3, [r4, #20]
   34e62:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   34e64:	ab01      	add	r3, sp, #4
   34e66:	466a      	mov	r2, sp
   34e68:	f7ff ffc6 	bl	34df8 <__swhatbuf_r>
   34e6c:	9900      	ldr	r1, [sp, #0]
   34e6e:	0007      	movs	r7, r0
   34e70:	0028      	movs	r0, r5
   34e72:	f7ff faa5 	bl	343c0 <_malloc_r>
   34e76:	2800      	cmp	r0, #0
   34e78:	d108      	bne.n	34e8c <__smakebuf_r+0x44>
   34e7a:	220c      	movs	r2, #12
   34e7c:	5ea3      	ldrsh	r3, [r4, r2]
   34e7e:	059a      	lsls	r2, r3, #22
   34e80:	d4ef      	bmi.n	34e62 <__smakebuf_r+0x1a>
   34e82:	2203      	movs	r2, #3
   34e84:	4393      	bics	r3, r2
   34e86:	431e      	orrs	r6, r3
   34e88:	81a6      	strh	r6, [r4, #12]
   34e8a:	e7e4      	b.n	34e56 <__smakebuf_r+0xe>
   34e8c:	4b0f      	ldr	r3, [pc, #60]	; (34ecc <__smakebuf_r+0x84>)
   34e8e:	62ab      	str	r3, [r5, #40]	; 0x28
   34e90:	2380      	movs	r3, #128	; 0x80
   34e92:	89a2      	ldrh	r2, [r4, #12]
   34e94:	6020      	str	r0, [r4, #0]
   34e96:	4313      	orrs	r3, r2
   34e98:	81a3      	strh	r3, [r4, #12]
   34e9a:	9b00      	ldr	r3, [sp, #0]
   34e9c:	6120      	str	r0, [r4, #16]
   34e9e:	6163      	str	r3, [r4, #20]
   34ea0:	9b01      	ldr	r3, [sp, #4]
   34ea2:	2b00      	cmp	r3, #0
   34ea4:	d00d      	beq.n	34ec2 <__smakebuf_r+0x7a>
   34ea6:	230e      	movs	r3, #14
   34ea8:	5ee1      	ldrsh	r1, [r4, r3]
   34eaa:	0028      	movs	r0, r5
   34eac:	f000 fbb0 	bl	35610 <_isatty_r>
   34eb0:	2800      	cmp	r0, #0
   34eb2:	d006      	beq.n	34ec2 <__smakebuf_r+0x7a>
   34eb4:	2203      	movs	r2, #3
   34eb6:	89a3      	ldrh	r3, [r4, #12]
   34eb8:	4393      	bics	r3, r2
   34eba:	001a      	movs	r2, r3
   34ebc:	2301      	movs	r3, #1
   34ebe:	4313      	orrs	r3, r2
   34ec0:	81a3      	strh	r3, [r4, #12]
   34ec2:	89a0      	ldrh	r0, [r4, #12]
   34ec4:	4338      	orrs	r0, r7
   34ec6:	81a0      	strh	r0, [r4, #12]
   34ec8:	e7cb      	b.n	34e62 <__smakebuf_r+0x1a>
   34eca:	46c0      	nop			; (mov r8, r8)
   34ecc:	00034c29 	.word	0x00034c29

00034ed0 <__ascii_mbtowc>:
   34ed0:	b082      	sub	sp, #8
   34ed2:	2900      	cmp	r1, #0
   34ed4:	d100      	bne.n	34ed8 <__ascii_mbtowc+0x8>
   34ed6:	a901      	add	r1, sp, #4
   34ed8:	1e10      	subs	r0, r2, #0
   34eda:	d006      	beq.n	34eea <__ascii_mbtowc+0x1a>
   34edc:	2b00      	cmp	r3, #0
   34ede:	d006      	beq.n	34eee <__ascii_mbtowc+0x1e>
   34ee0:	7813      	ldrb	r3, [r2, #0]
   34ee2:	600b      	str	r3, [r1, #0]
   34ee4:	7810      	ldrb	r0, [r2, #0]
   34ee6:	1e43      	subs	r3, r0, #1
   34ee8:	4198      	sbcs	r0, r3
   34eea:	b002      	add	sp, #8
   34eec:	4770      	bx	lr
   34eee:	2002      	movs	r0, #2
   34ef0:	4240      	negs	r0, r0
   34ef2:	e7fa      	b.n	34eea <__ascii_mbtowc+0x1a>

00034ef4 <__malloc_lock>:
   34ef4:	4770      	bx	lr

00034ef6 <__malloc_unlock>:
   34ef6:	4770      	bx	lr

00034ef8 <__ssputs_r>:
   34ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
   34efa:	688e      	ldr	r6, [r1, #8]
   34efc:	b085      	sub	sp, #20
   34efe:	0007      	movs	r7, r0
   34f00:	000c      	movs	r4, r1
   34f02:	9203      	str	r2, [sp, #12]
   34f04:	9301      	str	r3, [sp, #4]
   34f06:	429e      	cmp	r6, r3
   34f08:	d839      	bhi.n	34f7e <__ssputs_r+0x86>
   34f0a:	2390      	movs	r3, #144	; 0x90
   34f0c:	898a      	ldrh	r2, [r1, #12]
   34f0e:	00db      	lsls	r3, r3, #3
   34f10:	421a      	tst	r2, r3
   34f12:	d034      	beq.n	34f7e <__ssputs_r+0x86>
   34f14:	2503      	movs	r5, #3
   34f16:	6909      	ldr	r1, [r1, #16]
   34f18:	6823      	ldr	r3, [r4, #0]
   34f1a:	1a5b      	subs	r3, r3, r1
   34f1c:	9302      	str	r3, [sp, #8]
   34f1e:	6963      	ldr	r3, [r4, #20]
   34f20:	9802      	ldr	r0, [sp, #8]
   34f22:	435d      	muls	r5, r3
   34f24:	0feb      	lsrs	r3, r5, #31
   34f26:	195d      	adds	r5, r3, r5
   34f28:	9b01      	ldr	r3, [sp, #4]
   34f2a:	106d      	asrs	r5, r5, #1
   34f2c:	3301      	adds	r3, #1
   34f2e:	181b      	adds	r3, r3, r0
   34f30:	42ab      	cmp	r3, r5
   34f32:	d900      	bls.n	34f36 <__ssputs_r+0x3e>
   34f34:	001d      	movs	r5, r3
   34f36:	0553      	lsls	r3, r2, #21
   34f38:	d532      	bpl.n	34fa0 <__ssputs_r+0xa8>
   34f3a:	0029      	movs	r1, r5
   34f3c:	0038      	movs	r0, r7
   34f3e:	f7ff fa3f 	bl	343c0 <_malloc_r>
   34f42:	1e06      	subs	r6, r0, #0
   34f44:	d109      	bne.n	34f5a <__ssputs_r+0x62>
   34f46:	230c      	movs	r3, #12
   34f48:	603b      	str	r3, [r7, #0]
   34f4a:	2340      	movs	r3, #64	; 0x40
   34f4c:	2001      	movs	r0, #1
   34f4e:	89a2      	ldrh	r2, [r4, #12]
   34f50:	4240      	negs	r0, r0
   34f52:	4313      	orrs	r3, r2
   34f54:	81a3      	strh	r3, [r4, #12]
   34f56:	b005      	add	sp, #20
   34f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34f5a:	9a02      	ldr	r2, [sp, #8]
   34f5c:	6921      	ldr	r1, [r4, #16]
   34f5e:	f7ff f9c1 	bl	342e4 <memcpy>
   34f62:	89a3      	ldrh	r3, [r4, #12]
   34f64:	4a14      	ldr	r2, [pc, #80]	; (34fb8 <__ssputs_r+0xc0>)
   34f66:	401a      	ands	r2, r3
   34f68:	2380      	movs	r3, #128	; 0x80
   34f6a:	4313      	orrs	r3, r2
   34f6c:	81a3      	strh	r3, [r4, #12]
   34f6e:	9b02      	ldr	r3, [sp, #8]
   34f70:	6126      	str	r6, [r4, #16]
   34f72:	18f6      	adds	r6, r6, r3
   34f74:	6026      	str	r6, [r4, #0]
   34f76:	6165      	str	r5, [r4, #20]
   34f78:	9e01      	ldr	r6, [sp, #4]
   34f7a:	1aed      	subs	r5, r5, r3
   34f7c:	60a5      	str	r5, [r4, #8]
   34f7e:	9b01      	ldr	r3, [sp, #4]
   34f80:	42b3      	cmp	r3, r6
   34f82:	d200      	bcs.n	34f86 <__ssputs_r+0x8e>
   34f84:	001e      	movs	r6, r3
   34f86:	0032      	movs	r2, r6
   34f88:	9903      	ldr	r1, [sp, #12]
   34f8a:	6820      	ldr	r0, [r4, #0]
   34f8c:	f7ff f9b3 	bl	342f6 <memmove>
   34f90:	68a3      	ldr	r3, [r4, #8]
   34f92:	2000      	movs	r0, #0
   34f94:	1b9b      	subs	r3, r3, r6
   34f96:	60a3      	str	r3, [r4, #8]
   34f98:	6823      	ldr	r3, [r4, #0]
   34f9a:	199e      	adds	r6, r3, r6
   34f9c:	6026      	str	r6, [r4, #0]
   34f9e:	e7da      	b.n	34f56 <__ssputs_r+0x5e>
   34fa0:	002a      	movs	r2, r5
   34fa2:	0038      	movs	r0, r7
   34fa4:	f000 fb65 	bl	35672 <_realloc_r>
   34fa8:	1e06      	subs	r6, r0, #0
   34faa:	d1e0      	bne.n	34f6e <__ssputs_r+0x76>
   34fac:	6921      	ldr	r1, [r4, #16]
   34fae:	0038      	movs	r0, r7
   34fb0:	f7ff f9bc 	bl	3432c <_free_r>
   34fb4:	e7c7      	b.n	34f46 <__ssputs_r+0x4e>
   34fb6:	46c0      	nop			; (mov r8, r8)
   34fb8:	fffffb7f 	.word	0xfffffb7f

00034fbc <_svfiprintf_r>:
   34fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   34fbe:	b09f      	sub	sp, #124	; 0x7c
   34fc0:	9002      	str	r0, [sp, #8]
   34fc2:	9305      	str	r3, [sp, #20]
   34fc4:	898b      	ldrh	r3, [r1, #12]
   34fc6:	000f      	movs	r7, r1
   34fc8:	0016      	movs	r6, r2
   34fca:	061b      	lsls	r3, r3, #24
   34fcc:	d511      	bpl.n	34ff2 <_svfiprintf_r+0x36>
   34fce:	690b      	ldr	r3, [r1, #16]
   34fd0:	2b00      	cmp	r3, #0
   34fd2:	d10e      	bne.n	34ff2 <_svfiprintf_r+0x36>
   34fd4:	2140      	movs	r1, #64	; 0x40
   34fd6:	f7ff f9f3 	bl	343c0 <_malloc_r>
   34fda:	6038      	str	r0, [r7, #0]
   34fdc:	6138      	str	r0, [r7, #16]
   34fde:	2800      	cmp	r0, #0
   34fe0:	d105      	bne.n	34fee <_svfiprintf_r+0x32>
   34fe2:	230c      	movs	r3, #12
   34fe4:	9a02      	ldr	r2, [sp, #8]
   34fe6:	3801      	subs	r0, #1
   34fe8:	6013      	str	r3, [r2, #0]
   34fea:	b01f      	add	sp, #124	; 0x7c
   34fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34fee:	2340      	movs	r3, #64	; 0x40
   34ff0:	617b      	str	r3, [r7, #20]
   34ff2:	2300      	movs	r3, #0
   34ff4:	ad06      	add	r5, sp, #24
   34ff6:	616b      	str	r3, [r5, #20]
   34ff8:	3320      	adds	r3, #32
   34ffa:	766b      	strb	r3, [r5, #25]
   34ffc:	3310      	adds	r3, #16
   34ffe:	76ab      	strb	r3, [r5, #26]
   35000:	0034      	movs	r4, r6
   35002:	7823      	ldrb	r3, [r4, #0]
   35004:	2b00      	cmp	r3, #0
   35006:	d147      	bne.n	35098 <_svfiprintf_r+0xdc>
   35008:	1ba3      	subs	r3, r4, r6
   3500a:	9304      	str	r3, [sp, #16]
   3500c:	d00d      	beq.n	3502a <_svfiprintf_r+0x6e>
   3500e:	1ba3      	subs	r3, r4, r6
   35010:	0032      	movs	r2, r6
   35012:	0039      	movs	r1, r7
   35014:	9802      	ldr	r0, [sp, #8]
   35016:	f7ff ff6f 	bl	34ef8 <__ssputs_r>
   3501a:	1c43      	adds	r3, r0, #1
   3501c:	d100      	bne.n	35020 <_svfiprintf_r+0x64>
   3501e:	e0b5      	b.n	3518c <_svfiprintf_r+0x1d0>
   35020:	696a      	ldr	r2, [r5, #20]
   35022:	9b04      	ldr	r3, [sp, #16]
   35024:	4694      	mov	ip, r2
   35026:	4463      	add	r3, ip
   35028:	616b      	str	r3, [r5, #20]
   3502a:	7823      	ldrb	r3, [r4, #0]
   3502c:	2b00      	cmp	r3, #0
   3502e:	d100      	bne.n	35032 <_svfiprintf_r+0x76>
   35030:	e0ac      	b.n	3518c <_svfiprintf_r+0x1d0>
   35032:	2201      	movs	r2, #1
   35034:	2300      	movs	r3, #0
   35036:	4252      	negs	r2, r2
   35038:	606a      	str	r2, [r5, #4]
   3503a:	a902      	add	r1, sp, #8
   3503c:	3254      	adds	r2, #84	; 0x54
   3503e:	1852      	adds	r2, r2, r1
   35040:	3401      	adds	r4, #1
   35042:	602b      	str	r3, [r5, #0]
   35044:	60eb      	str	r3, [r5, #12]
   35046:	60ab      	str	r3, [r5, #8]
   35048:	7013      	strb	r3, [r2, #0]
   3504a:	65ab      	str	r3, [r5, #88]	; 0x58
   3504c:	4e58      	ldr	r6, [pc, #352]	; (351b0 <_svfiprintf_r+0x1f4>)
   3504e:	2205      	movs	r2, #5
   35050:	7821      	ldrb	r1, [r4, #0]
   35052:	0030      	movs	r0, r6
   35054:	f000 fb02 	bl	3565c <memchr>
   35058:	1c62      	adds	r2, r4, #1
   3505a:	2800      	cmp	r0, #0
   3505c:	d120      	bne.n	350a0 <_svfiprintf_r+0xe4>
   3505e:	6829      	ldr	r1, [r5, #0]
   35060:	06cb      	lsls	r3, r1, #27
   35062:	d504      	bpl.n	3506e <_svfiprintf_r+0xb2>
   35064:	2353      	movs	r3, #83	; 0x53
   35066:	ae02      	add	r6, sp, #8
   35068:	3020      	adds	r0, #32
   3506a:	199b      	adds	r3, r3, r6
   3506c:	7018      	strb	r0, [r3, #0]
   3506e:	070b      	lsls	r3, r1, #28
   35070:	d504      	bpl.n	3507c <_svfiprintf_r+0xc0>
   35072:	2353      	movs	r3, #83	; 0x53
   35074:	202b      	movs	r0, #43	; 0x2b
   35076:	ae02      	add	r6, sp, #8
   35078:	199b      	adds	r3, r3, r6
   3507a:	7018      	strb	r0, [r3, #0]
   3507c:	7823      	ldrb	r3, [r4, #0]
   3507e:	2b2a      	cmp	r3, #42	; 0x2a
   35080:	d016      	beq.n	350b0 <_svfiprintf_r+0xf4>
   35082:	2000      	movs	r0, #0
   35084:	210a      	movs	r1, #10
   35086:	9b09      	ldr	r3, [sp, #36]	; 0x24
   35088:	7822      	ldrb	r2, [r4, #0]
   3508a:	3a30      	subs	r2, #48	; 0x30
   3508c:	2a09      	cmp	r2, #9
   3508e:	d955      	bls.n	3513c <_svfiprintf_r+0x180>
   35090:	2800      	cmp	r0, #0
   35092:	d015      	beq.n	350c0 <_svfiprintf_r+0x104>
   35094:	9309      	str	r3, [sp, #36]	; 0x24
   35096:	e013      	b.n	350c0 <_svfiprintf_r+0x104>
   35098:	2b25      	cmp	r3, #37	; 0x25
   3509a:	d0b5      	beq.n	35008 <_svfiprintf_r+0x4c>
   3509c:	3401      	adds	r4, #1
   3509e:	e7b0      	b.n	35002 <_svfiprintf_r+0x46>
   350a0:	2301      	movs	r3, #1
   350a2:	1b80      	subs	r0, r0, r6
   350a4:	4083      	lsls	r3, r0
   350a6:	6829      	ldr	r1, [r5, #0]
   350a8:	0014      	movs	r4, r2
   350aa:	430b      	orrs	r3, r1
   350ac:	602b      	str	r3, [r5, #0]
   350ae:	e7cd      	b.n	3504c <_svfiprintf_r+0x90>
   350b0:	9b05      	ldr	r3, [sp, #20]
   350b2:	1d18      	adds	r0, r3, #4
   350b4:	681b      	ldr	r3, [r3, #0]
   350b6:	9005      	str	r0, [sp, #20]
   350b8:	2b00      	cmp	r3, #0
   350ba:	db39      	blt.n	35130 <_svfiprintf_r+0x174>
   350bc:	9309      	str	r3, [sp, #36]	; 0x24
   350be:	0014      	movs	r4, r2
   350c0:	7823      	ldrb	r3, [r4, #0]
   350c2:	2b2e      	cmp	r3, #46	; 0x2e
   350c4:	d10b      	bne.n	350de <_svfiprintf_r+0x122>
   350c6:	7863      	ldrb	r3, [r4, #1]
   350c8:	1c62      	adds	r2, r4, #1
   350ca:	2b2a      	cmp	r3, #42	; 0x2a
   350cc:	d13e      	bne.n	3514c <_svfiprintf_r+0x190>
   350ce:	9b05      	ldr	r3, [sp, #20]
   350d0:	3402      	adds	r4, #2
   350d2:	1d1a      	adds	r2, r3, #4
   350d4:	681b      	ldr	r3, [r3, #0]
   350d6:	9205      	str	r2, [sp, #20]
   350d8:	2b00      	cmp	r3, #0
   350da:	db34      	blt.n	35146 <_svfiprintf_r+0x18a>
   350dc:	9307      	str	r3, [sp, #28]
   350de:	4e35      	ldr	r6, [pc, #212]	; (351b4 <_svfiprintf_r+0x1f8>)
   350e0:	7821      	ldrb	r1, [r4, #0]
   350e2:	2203      	movs	r2, #3
   350e4:	0030      	movs	r0, r6
   350e6:	f000 fab9 	bl	3565c <memchr>
   350ea:	2800      	cmp	r0, #0
   350ec:	d006      	beq.n	350fc <_svfiprintf_r+0x140>
   350ee:	2340      	movs	r3, #64	; 0x40
   350f0:	1b80      	subs	r0, r0, r6
   350f2:	4083      	lsls	r3, r0
   350f4:	682a      	ldr	r2, [r5, #0]
   350f6:	3401      	adds	r4, #1
   350f8:	4313      	orrs	r3, r2
   350fa:	602b      	str	r3, [r5, #0]
   350fc:	7821      	ldrb	r1, [r4, #0]
   350fe:	2206      	movs	r2, #6
   35100:	482d      	ldr	r0, [pc, #180]	; (351b8 <_svfiprintf_r+0x1fc>)
   35102:	1c66      	adds	r6, r4, #1
   35104:	7629      	strb	r1, [r5, #24]
   35106:	f000 faa9 	bl	3565c <memchr>
   3510a:	2800      	cmp	r0, #0
   3510c:	d046      	beq.n	3519c <_svfiprintf_r+0x1e0>
   3510e:	4b2b      	ldr	r3, [pc, #172]	; (351bc <_svfiprintf_r+0x200>)
   35110:	2b00      	cmp	r3, #0
   35112:	d12f      	bne.n	35174 <_svfiprintf_r+0x1b8>
   35114:	6829      	ldr	r1, [r5, #0]
   35116:	9b05      	ldr	r3, [sp, #20]
   35118:	2207      	movs	r2, #7
   3511a:	05c9      	lsls	r1, r1, #23
   3511c:	d528      	bpl.n	35170 <_svfiprintf_r+0x1b4>
   3511e:	189b      	adds	r3, r3, r2
   35120:	4393      	bics	r3, r2
   35122:	3308      	adds	r3, #8
   35124:	9305      	str	r3, [sp, #20]
   35126:	696b      	ldr	r3, [r5, #20]
   35128:	9a03      	ldr	r2, [sp, #12]
   3512a:	189b      	adds	r3, r3, r2
   3512c:	616b      	str	r3, [r5, #20]
   3512e:	e767      	b.n	35000 <_svfiprintf_r+0x44>
   35130:	425b      	negs	r3, r3
   35132:	60eb      	str	r3, [r5, #12]
   35134:	2302      	movs	r3, #2
   35136:	430b      	orrs	r3, r1
   35138:	602b      	str	r3, [r5, #0]
   3513a:	e7c0      	b.n	350be <_svfiprintf_r+0x102>
   3513c:	434b      	muls	r3, r1
   3513e:	3401      	adds	r4, #1
   35140:	189b      	adds	r3, r3, r2
   35142:	2001      	movs	r0, #1
   35144:	e7a0      	b.n	35088 <_svfiprintf_r+0xcc>
   35146:	2301      	movs	r3, #1
   35148:	425b      	negs	r3, r3
   3514a:	e7c7      	b.n	350dc <_svfiprintf_r+0x120>
   3514c:	2300      	movs	r3, #0
   3514e:	0014      	movs	r4, r2
   35150:	200a      	movs	r0, #10
   35152:	001a      	movs	r2, r3
   35154:	606b      	str	r3, [r5, #4]
   35156:	7821      	ldrb	r1, [r4, #0]
   35158:	3930      	subs	r1, #48	; 0x30
   3515a:	2909      	cmp	r1, #9
   3515c:	d903      	bls.n	35166 <_svfiprintf_r+0x1aa>
   3515e:	2b00      	cmp	r3, #0
   35160:	d0bd      	beq.n	350de <_svfiprintf_r+0x122>
   35162:	9207      	str	r2, [sp, #28]
   35164:	e7bb      	b.n	350de <_svfiprintf_r+0x122>
   35166:	4342      	muls	r2, r0
   35168:	3401      	adds	r4, #1
   3516a:	1852      	adds	r2, r2, r1
   3516c:	2301      	movs	r3, #1
   3516e:	e7f2      	b.n	35156 <_svfiprintf_r+0x19a>
   35170:	3307      	adds	r3, #7
   35172:	e7d5      	b.n	35120 <_svfiprintf_r+0x164>
   35174:	ab05      	add	r3, sp, #20
   35176:	9300      	str	r3, [sp, #0]
   35178:	003a      	movs	r2, r7
   3517a:	4b11      	ldr	r3, [pc, #68]	; (351c0 <_svfiprintf_r+0x204>)
   3517c:	0029      	movs	r1, r5
   3517e:	9802      	ldr	r0, [sp, #8]
   35180:	e000      	b.n	35184 <_svfiprintf_r+0x1c8>
   35182:	bf00      	nop
   35184:	9003      	str	r0, [sp, #12]
   35186:	9b03      	ldr	r3, [sp, #12]
   35188:	3301      	adds	r3, #1
   3518a:	d1cc      	bne.n	35126 <_svfiprintf_r+0x16a>
   3518c:	89bb      	ldrh	r3, [r7, #12]
   3518e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   35190:	065b      	lsls	r3, r3, #25
   35192:	d400      	bmi.n	35196 <_svfiprintf_r+0x1da>
   35194:	e729      	b.n	34fea <_svfiprintf_r+0x2e>
   35196:	2001      	movs	r0, #1
   35198:	4240      	negs	r0, r0
   3519a:	e726      	b.n	34fea <_svfiprintf_r+0x2e>
   3519c:	ab05      	add	r3, sp, #20
   3519e:	9300      	str	r3, [sp, #0]
   351a0:	003a      	movs	r2, r7
   351a2:	4b07      	ldr	r3, [pc, #28]	; (351c0 <_svfiprintf_r+0x204>)
   351a4:	0029      	movs	r1, r5
   351a6:	9802      	ldr	r0, [sp, #8]
   351a8:	f000 f87a 	bl	352a0 <_printf_i>
   351ac:	e7ea      	b.n	35184 <_svfiprintf_r+0x1c8>
   351ae:	46c0      	nop			; (mov r8, r8)
   351b0:	0003977a 	.word	0x0003977a
   351b4:	00039780 	.word	0x00039780
   351b8:	00039784 	.word	0x00039784
   351bc:	00000000 	.word	0x00000000
   351c0:	00034ef9 	.word	0x00034ef9

000351c4 <_printf_common>:
   351c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   351c6:	0015      	movs	r5, r2
   351c8:	9301      	str	r3, [sp, #4]
   351ca:	688a      	ldr	r2, [r1, #8]
   351cc:	690b      	ldr	r3, [r1, #16]
   351ce:	9000      	str	r0, [sp, #0]
   351d0:	000c      	movs	r4, r1
   351d2:	4293      	cmp	r3, r2
   351d4:	da00      	bge.n	351d8 <_printf_common+0x14>
   351d6:	0013      	movs	r3, r2
   351d8:	0022      	movs	r2, r4
   351da:	602b      	str	r3, [r5, #0]
   351dc:	3243      	adds	r2, #67	; 0x43
   351de:	7812      	ldrb	r2, [r2, #0]
   351e0:	2a00      	cmp	r2, #0
   351e2:	d001      	beq.n	351e8 <_printf_common+0x24>
   351e4:	3301      	adds	r3, #1
   351e6:	602b      	str	r3, [r5, #0]
   351e8:	6823      	ldr	r3, [r4, #0]
   351ea:	069b      	lsls	r3, r3, #26
   351ec:	d502      	bpl.n	351f4 <_printf_common+0x30>
   351ee:	682b      	ldr	r3, [r5, #0]
   351f0:	3302      	adds	r3, #2
   351f2:	602b      	str	r3, [r5, #0]
   351f4:	2706      	movs	r7, #6
   351f6:	6823      	ldr	r3, [r4, #0]
   351f8:	401f      	ands	r7, r3
   351fa:	d027      	beq.n	3524c <_printf_common+0x88>
   351fc:	0023      	movs	r3, r4
   351fe:	3343      	adds	r3, #67	; 0x43
   35200:	781b      	ldrb	r3, [r3, #0]
   35202:	1e5a      	subs	r2, r3, #1
   35204:	4193      	sbcs	r3, r2
   35206:	6822      	ldr	r2, [r4, #0]
   35208:	0692      	lsls	r2, r2, #26
   3520a:	d430      	bmi.n	3526e <_printf_common+0xaa>
   3520c:	0022      	movs	r2, r4
   3520e:	9901      	ldr	r1, [sp, #4]
   35210:	3243      	adds	r2, #67	; 0x43
   35212:	9800      	ldr	r0, [sp, #0]
   35214:	9e08      	ldr	r6, [sp, #32]
   35216:	47b0      	blx	r6
   35218:	1c43      	adds	r3, r0, #1
   3521a:	d025      	beq.n	35268 <_printf_common+0xa4>
   3521c:	2306      	movs	r3, #6
   3521e:	6820      	ldr	r0, [r4, #0]
   35220:	682a      	ldr	r2, [r5, #0]
   35222:	68e1      	ldr	r1, [r4, #12]
   35224:	4003      	ands	r3, r0
   35226:	2500      	movs	r5, #0
   35228:	2b04      	cmp	r3, #4
   3522a:	d103      	bne.n	35234 <_printf_common+0x70>
   3522c:	1a8d      	subs	r5, r1, r2
   3522e:	43eb      	mvns	r3, r5
   35230:	17db      	asrs	r3, r3, #31
   35232:	401d      	ands	r5, r3
   35234:	68a3      	ldr	r3, [r4, #8]
   35236:	6922      	ldr	r2, [r4, #16]
   35238:	4293      	cmp	r3, r2
   3523a:	dd01      	ble.n	35240 <_printf_common+0x7c>
   3523c:	1a9b      	subs	r3, r3, r2
   3523e:	18ed      	adds	r5, r5, r3
   35240:	2700      	movs	r7, #0
   35242:	42bd      	cmp	r5, r7
   35244:	d120      	bne.n	35288 <_printf_common+0xc4>
   35246:	2000      	movs	r0, #0
   35248:	e010      	b.n	3526c <_printf_common+0xa8>
   3524a:	3701      	adds	r7, #1
   3524c:	68e3      	ldr	r3, [r4, #12]
   3524e:	682a      	ldr	r2, [r5, #0]
   35250:	1a9b      	subs	r3, r3, r2
   35252:	429f      	cmp	r7, r3
   35254:	dad2      	bge.n	351fc <_printf_common+0x38>
   35256:	0022      	movs	r2, r4
   35258:	2301      	movs	r3, #1
   3525a:	3219      	adds	r2, #25
   3525c:	9901      	ldr	r1, [sp, #4]
   3525e:	9800      	ldr	r0, [sp, #0]
   35260:	9e08      	ldr	r6, [sp, #32]
   35262:	47b0      	blx	r6
   35264:	1c43      	adds	r3, r0, #1
   35266:	d1f0      	bne.n	3524a <_printf_common+0x86>
   35268:	2001      	movs	r0, #1
   3526a:	4240      	negs	r0, r0
   3526c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   3526e:	2030      	movs	r0, #48	; 0x30
   35270:	18e1      	adds	r1, r4, r3
   35272:	3143      	adds	r1, #67	; 0x43
   35274:	7008      	strb	r0, [r1, #0]
   35276:	0021      	movs	r1, r4
   35278:	1c5a      	adds	r2, r3, #1
   3527a:	3145      	adds	r1, #69	; 0x45
   3527c:	7809      	ldrb	r1, [r1, #0]
   3527e:	18a2      	adds	r2, r4, r2
   35280:	3243      	adds	r2, #67	; 0x43
   35282:	3302      	adds	r3, #2
   35284:	7011      	strb	r1, [r2, #0]
   35286:	e7c1      	b.n	3520c <_printf_common+0x48>
   35288:	0022      	movs	r2, r4
   3528a:	2301      	movs	r3, #1
   3528c:	321a      	adds	r2, #26
   3528e:	9901      	ldr	r1, [sp, #4]
   35290:	9800      	ldr	r0, [sp, #0]
   35292:	9e08      	ldr	r6, [sp, #32]
   35294:	47b0      	blx	r6
   35296:	1c43      	adds	r3, r0, #1
   35298:	d0e6      	beq.n	35268 <_printf_common+0xa4>
   3529a:	3701      	adds	r7, #1
   3529c:	e7d1      	b.n	35242 <_printf_common+0x7e>
	...

000352a0 <_printf_i>:
   352a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   352a2:	b08b      	sub	sp, #44	; 0x2c
   352a4:	9206      	str	r2, [sp, #24]
   352a6:	000a      	movs	r2, r1
   352a8:	3243      	adds	r2, #67	; 0x43
   352aa:	9307      	str	r3, [sp, #28]
   352ac:	9005      	str	r0, [sp, #20]
   352ae:	9204      	str	r2, [sp, #16]
   352b0:	7e0a      	ldrb	r2, [r1, #24]
   352b2:	000c      	movs	r4, r1
   352b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   352b6:	2a6e      	cmp	r2, #110	; 0x6e
   352b8:	d100      	bne.n	352bc <_printf_i+0x1c>
   352ba:	e08f      	b.n	353dc <_printf_i+0x13c>
   352bc:	d817      	bhi.n	352ee <_printf_i+0x4e>
   352be:	2a63      	cmp	r2, #99	; 0x63
   352c0:	d02c      	beq.n	3531c <_printf_i+0x7c>
   352c2:	d808      	bhi.n	352d6 <_printf_i+0x36>
   352c4:	2a00      	cmp	r2, #0
   352c6:	d100      	bne.n	352ca <_printf_i+0x2a>
   352c8:	e099      	b.n	353fe <_printf_i+0x15e>
   352ca:	2a58      	cmp	r2, #88	; 0x58
   352cc:	d054      	beq.n	35378 <_printf_i+0xd8>
   352ce:	0026      	movs	r6, r4
   352d0:	3642      	adds	r6, #66	; 0x42
   352d2:	7032      	strb	r2, [r6, #0]
   352d4:	e029      	b.n	3532a <_printf_i+0x8a>
   352d6:	2a64      	cmp	r2, #100	; 0x64
   352d8:	d001      	beq.n	352de <_printf_i+0x3e>
   352da:	2a69      	cmp	r2, #105	; 0x69
   352dc:	d1f7      	bne.n	352ce <_printf_i+0x2e>
   352de:	6821      	ldr	r1, [r4, #0]
   352e0:	681a      	ldr	r2, [r3, #0]
   352e2:	0608      	lsls	r0, r1, #24
   352e4:	d523      	bpl.n	3532e <_printf_i+0x8e>
   352e6:	1d11      	adds	r1, r2, #4
   352e8:	6019      	str	r1, [r3, #0]
   352ea:	6815      	ldr	r5, [r2, #0]
   352ec:	e025      	b.n	3533a <_printf_i+0x9a>
   352ee:	2a73      	cmp	r2, #115	; 0x73
   352f0:	d100      	bne.n	352f4 <_printf_i+0x54>
   352f2:	e088      	b.n	35406 <_printf_i+0x166>
   352f4:	d808      	bhi.n	35308 <_printf_i+0x68>
   352f6:	2a6f      	cmp	r2, #111	; 0x6f
   352f8:	d029      	beq.n	3534e <_printf_i+0xae>
   352fa:	2a70      	cmp	r2, #112	; 0x70
   352fc:	d1e7      	bne.n	352ce <_printf_i+0x2e>
   352fe:	2220      	movs	r2, #32
   35300:	6809      	ldr	r1, [r1, #0]
   35302:	430a      	orrs	r2, r1
   35304:	6022      	str	r2, [r4, #0]
   35306:	e003      	b.n	35310 <_printf_i+0x70>
   35308:	2a75      	cmp	r2, #117	; 0x75
   3530a:	d020      	beq.n	3534e <_printf_i+0xae>
   3530c:	2a78      	cmp	r2, #120	; 0x78
   3530e:	d1de      	bne.n	352ce <_printf_i+0x2e>
   35310:	0022      	movs	r2, r4
   35312:	2178      	movs	r1, #120	; 0x78
   35314:	3245      	adds	r2, #69	; 0x45
   35316:	7011      	strb	r1, [r2, #0]
   35318:	4a6c      	ldr	r2, [pc, #432]	; (354cc <_printf_i+0x22c>)
   3531a:	e030      	b.n	3537e <_printf_i+0xde>
   3531c:	000e      	movs	r6, r1
   3531e:	681a      	ldr	r2, [r3, #0]
   35320:	3642      	adds	r6, #66	; 0x42
   35322:	1d11      	adds	r1, r2, #4
   35324:	6019      	str	r1, [r3, #0]
   35326:	6813      	ldr	r3, [r2, #0]
   35328:	7033      	strb	r3, [r6, #0]
   3532a:	2301      	movs	r3, #1
   3532c:	e079      	b.n	35422 <_printf_i+0x182>
   3532e:	0649      	lsls	r1, r1, #25
   35330:	d5d9      	bpl.n	352e6 <_printf_i+0x46>
   35332:	1d11      	adds	r1, r2, #4
   35334:	6019      	str	r1, [r3, #0]
   35336:	2300      	movs	r3, #0
   35338:	5ed5      	ldrsh	r5, [r2, r3]
   3533a:	2d00      	cmp	r5, #0
   3533c:	da03      	bge.n	35346 <_printf_i+0xa6>
   3533e:	232d      	movs	r3, #45	; 0x2d
   35340:	9a04      	ldr	r2, [sp, #16]
   35342:	426d      	negs	r5, r5
   35344:	7013      	strb	r3, [r2, #0]
   35346:	4b62      	ldr	r3, [pc, #392]	; (354d0 <_printf_i+0x230>)
   35348:	270a      	movs	r7, #10
   3534a:	9303      	str	r3, [sp, #12]
   3534c:	e02f      	b.n	353ae <_printf_i+0x10e>
   3534e:	6820      	ldr	r0, [r4, #0]
   35350:	6819      	ldr	r1, [r3, #0]
   35352:	0605      	lsls	r5, r0, #24
   35354:	d503      	bpl.n	3535e <_printf_i+0xbe>
   35356:	1d08      	adds	r0, r1, #4
   35358:	6018      	str	r0, [r3, #0]
   3535a:	680d      	ldr	r5, [r1, #0]
   3535c:	e005      	b.n	3536a <_printf_i+0xca>
   3535e:	0640      	lsls	r0, r0, #25
   35360:	d5f9      	bpl.n	35356 <_printf_i+0xb6>
   35362:	680d      	ldr	r5, [r1, #0]
   35364:	1d08      	adds	r0, r1, #4
   35366:	6018      	str	r0, [r3, #0]
   35368:	b2ad      	uxth	r5, r5
   3536a:	4b59      	ldr	r3, [pc, #356]	; (354d0 <_printf_i+0x230>)
   3536c:	2708      	movs	r7, #8
   3536e:	9303      	str	r3, [sp, #12]
   35370:	2a6f      	cmp	r2, #111	; 0x6f
   35372:	d018      	beq.n	353a6 <_printf_i+0x106>
   35374:	270a      	movs	r7, #10
   35376:	e016      	b.n	353a6 <_printf_i+0x106>
   35378:	3145      	adds	r1, #69	; 0x45
   3537a:	700a      	strb	r2, [r1, #0]
   3537c:	4a54      	ldr	r2, [pc, #336]	; (354d0 <_printf_i+0x230>)
   3537e:	9203      	str	r2, [sp, #12]
   35380:	681a      	ldr	r2, [r3, #0]
   35382:	6821      	ldr	r1, [r4, #0]
   35384:	1d10      	adds	r0, r2, #4
   35386:	6018      	str	r0, [r3, #0]
   35388:	6815      	ldr	r5, [r2, #0]
   3538a:	0608      	lsls	r0, r1, #24
   3538c:	d522      	bpl.n	353d4 <_printf_i+0x134>
   3538e:	07cb      	lsls	r3, r1, #31
   35390:	d502      	bpl.n	35398 <_printf_i+0xf8>
   35392:	2320      	movs	r3, #32
   35394:	4319      	orrs	r1, r3
   35396:	6021      	str	r1, [r4, #0]
   35398:	2710      	movs	r7, #16
   3539a:	2d00      	cmp	r5, #0
   3539c:	d103      	bne.n	353a6 <_printf_i+0x106>
   3539e:	2320      	movs	r3, #32
   353a0:	6822      	ldr	r2, [r4, #0]
   353a2:	439a      	bics	r2, r3
   353a4:	6022      	str	r2, [r4, #0]
   353a6:	0023      	movs	r3, r4
   353a8:	2200      	movs	r2, #0
   353aa:	3343      	adds	r3, #67	; 0x43
   353ac:	701a      	strb	r2, [r3, #0]
   353ae:	6863      	ldr	r3, [r4, #4]
   353b0:	60a3      	str	r3, [r4, #8]
   353b2:	2b00      	cmp	r3, #0
   353b4:	db5c      	blt.n	35470 <_printf_i+0x1d0>
   353b6:	2204      	movs	r2, #4
   353b8:	6821      	ldr	r1, [r4, #0]
   353ba:	4391      	bics	r1, r2
   353bc:	6021      	str	r1, [r4, #0]
   353be:	2d00      	cmp	r5, #0
   353c0:	d158      	bne.n	35474 <_printf_i+0x1d4>
   353c2:	9e04      	ldr	r6, [sp, #16]
   353c4:	2b00      	cmp	r3, #0
   353c6:	d064      	beq.n	35492 <_printf_i+0x1f2>
   353c8:	0026      	movs	r6, r4
   353ca:	9b03      	ldr	r3, [sp, #12]
   353cc:	3642      	adds	r6, #66	; 0x42
   353ce:	781b      	ldrb	r3, [r3, #0]
   353d0:	7033      	strb	r3, [r6, #0]
   353d2:	e05e      	b.n	35492 <_printf_i+0x1f2>
   353d4:	0648      	lsls	r0, r1, #25
   353d6:	d5da      	bpl.n	3538e <_printf_i+0xee>
   353d8:	b2ad      	uxth	r5, r5
   353da:	e7d8      	b.n	3538e <_printf_i+0xee>
   353dc:	6809      	ldr	r1, [r1, #0]
   353de:	681a      	ldr	r2, [r3, #0]
   353e0:	0608      	lsls	r0, r1, #24
   353e2:	d505      	bpl.n	353f0 <_printf_i+0x150>
   353e4:	1d11      	adds	r1, r2, #4
   353e6:	6019      	str	r1, [r3, #0]
   353e8:	6813      	ldr	r3, [r2, #0]
   353ea:	6962      	ldr	r2, [r4, #20]
   353ec:	601a      	str	r2, [r3, #0]
   353ee:	e006      	b.n	353fe <_printf_i+0x15e>
   353f0:	0649      	lsls	r1, r1, #25
   353f2:	d5f7      	bpl.n	353e4 <_printf_i+0x144>
   353f4:	1d11      	adds	r1, r2, #4
   353f6:	6019      	str	r1, [r3, #0]
   353f8:	6813      	ldr	r3, [r2, #0]
   353fa:	8aa2      	ldrh	r2, [r4, #20]
   353fc:	801a      	strh	r2, [r3, #0]
   353fe:	2300      	movs	r3, #0
   35400:	9e04      	ldr	r6, [sp, #16]
   35402:	6123      	str	r3, [r4, #16]
   35404:	e054      	b.n	354b0 <_printf_i+0x210>
   35406:	681a      	ldr	r2, [r3, #0]
   35408:	1d11      	adds	r1, r2, #4
   3540a:	6019      	str	r1, [r3, #0]
   3540c:	6816      	ldr	r6, [r2, #0]
   3540e:	2100      	movs	r1, #0
   35410:	6862      	ldr	r2, [r4, #4]
   35412:	0030      	movs	r0, r6
   35414:	f000 f922 	bl	3565c <memchr>
   35418:	2800      	cmp	r0, #0
   3541a:	d001      	beq.n	35420 <_printf_i+0x180>
   3541c:	1b80      	subs	r0, r0, r6
   3541e:	6060      	str	r0, [r4, #4]
   35420:	6863      	ldr	r3, [r4, #4]
   35422:	6123      	str	r3, [r4, #16]
   35424:	2300      	movs	r3, #0
   35426:	9a04      	ldr	r2, [sp, #16]
   35428:	7013      	strb	r3, [r2, #0]
   3542a:	e041      	b.n	354b0 <_printf_i+0x210>
   3542c:	6923      	ldr	r3, [r4, #16]
   3542e:	0032      	movs	r2, r6
   35430:	9906      	ldr	r1, [sp, #24]
   35432:	9805      	ldr	r0, [sp, #20]
   35434:	9d07      	ldr	r5, [sp, #28]
   35436:	47a8      	blx	r5
   35438:	1c43      	adds	r3, r0, #1
   3543a:	d043      	beq.n	354c4 <_printf_i+0x224>
   3543c:	6823      	ldr	r3, [r4, #0]
   3543e:	2500      	movs	r5, #0
   35440:	079b      	lsls	r3, r3, #30
   35442:	d40f      	bmi.n	35464 <_printf_i+0x1c4>
   35444:	9b09      	ldr	r3, [sp, #36]	; 0x24
   35446:	68e0      	ldr	r0, [r4, #12]
   35448:	4298      	cmp	r0, r3
   3544a:	da3d      	bge.n	354c8 <_printf_i+0x228>
   3544c:	0018      	movs	r0, r3
   3544e:	e03b      	b.n	354c8 <_printf_i+0x228>
   35450:	0022      	movs	r2, r4
   35452:	2301      	movs	r3, #1
   35454:	3219      	adds	r2, #25
   35456:	9906      	ldr	r1, [sp, #24]
   35458:	9805      	ldr	r0, [sp, #20]
   3545a:	9e07      	ldr	r6, [sp, #28]
   3545c:	47b0      	blx	r6
   3545e:	1c43      	adds	r3, r0, #1
   35460:	d030      	beq.n	354c4 <_printf_i+0x224>
   35462:	3501      	adds	r5, #1
   35464:	68e3      	ldr	r3, [r4, #12]
   35466:	9a09      	ldr	r2, [sp, #36]	; 0x24
   35468:	1a9b      	subs	r3, r3, r2
   3546a:	429d      	cmp	r5, r3
   3546c:	dbf0      	blt.n	35450 <_printf_i+0x1b0>
   3546e:	e7e9      	b.n	35444 <_printf_i+0x1a4>
   35470:	2d00      	cmp	r5, #0
   35472:	d0a9      	beq.n	353c8 <_printf_i+0x128>
   35474:	9e04      	ldr	r6, [sp, #16]
   35476:	0028      	movs	r0, r5
   35478:	0039      	movs	r1, r7
   3547a:	f7fc fd95 	bl	31fa8 <__aeabi_uidivmod>
   3547e:	9b03      	ldr	r3, [sp, #12]
   35480:	3e01      	subs	r6, #1
   35482:	5c5b      	ldrb	r3, [r3, r1]
   35484:	0028      	movs	r0, r5
   35486:	7033      	strb	r3, [r6, #0]
   35488:	0039      	movs	r1, r7
   3548a:	f7fc fd07 	bl	31e9c <__udivsi3>
   3548e:	1e05      	subs	r5, r0, #0
   35490:	d1f1      	bne.n	35476 <_printf_i+0x1d6>
   35492:	2f08      	cmp	r7, #8
   35494:	d109      	bne.n	354aa <_printf_i+0x20a>
   35496:	6823      	ldr	r3, [r4, #0]
   35498:	07db      	lsls	r3, r3, #31
   3549a:	d506      	bpl.n	354aa <_printf_i+0x20a>
   3549c:	6863      	ldr	r3, [r4, #4]
   3549e:	6922      	ldr	r2, [r4, #16]
   354a0:	4293      	cmp	r3, r2
   354a2:	dc02      	bgt.n	354aa <_printf_i+0x20a>
   354a4:	2330      	movs	r3, #48	; 0x30
   354a6:	3e01      	subs	r6, #1
   354a8:	7033      	strb	r3, [r6, #0]
   354aa:	9b04      	ldr	r3, [sp, #16]
   354ac:	1b9b      	subs	r3, r3, r6
   354ae:	6123      	str	r3, [r4, #16]
   354b0:	9b07      	ldr	r3, [sp, #28]
   354b2:	aa09      	add	r2, sp, #36	; 0x24
   354b4:	9300      	str	r3, [sp, #0]
   354b6:	0021      	movs	r1, r4
   354b8:	9b06      	ldr	r3, [sp, #24]
   354ba:	9805      	ldr	r0, [sp, #20]
   354bc:	f7ff fe82 	bl	351c4 <_printf_common>
   354c0:	1c43      	adds	r3, r0, #1
   354c2:	d1b3      	bne.n	3542c <_printf_i+0x18c>
   354c4:	2001      	movs	r0, #1
   354c6:	4240      	negs	r0, r0
   354c8:	b00b      	add	sp, #44	; 0x2c
   354ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   354cc:	0003979c 	.word	0x0003979c
   354d0:	0003978b 	.word	0x0003978b

000354d4 <__sread>:
   354d4:	b570      	push	{r4, r5, r6, lr}
   354d6:	000c      	movs	r4, r1
   354d8:	250e      	movs	r5, #14
   354da:	5f49      	ldrsh	r1, [r1, r5]
   354dc:	f000 f8f0 	bl	356c0 <_read_r>
   354e0:	2800      	cmp	r0, #0
   354e2:	db03      	blt.n	354ec <__sread+0x18>
   354e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
   354e6:	181b      	adds	r3, r3, r0
   354e8:	6563      	str	r3, [r4, #84]	; 0x54
   354ea:	bd70      	pop	{r4, r5, r6, pc}
   354ec:	89a3      	ldrh	r3, [r4, #12]
   354ee:	4a02      	ldr	r2, [pc, #8]	; (354f8 <__sread+0x24>)
   354f0:	4013      	ands	r3, r2
   354f2:	81a3      	strh	r3, [r4, #12]
   354f4:	e7f9      	b.n	354ea <__sread+0x16>
   354f6:	46c0      	nop			; (mov r8, r8)
   354f8:	ffffefff 	.word	0xffffefff

000354fc <__swrite>:
   354fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   354fe:	001f      	movs	r7, r3
   35500:	898b      	ldrh	r3, [r1, #12]
   35502:	0005      	movs	r5, r0
   35504:	000c      	movs	r4, r1
   35506:	0016      	movs	r6, r2
   35508:	05db      	lsls	r3, r3, #23
   3550a:	d505      	bpl.n	35518 <__swrite+0x1c>
   3550c:	230e      	movs	r3, #14
   3550e:	5ec9      	ldrsh	r1, [r1, r3]
   35510:	2200      	movs	r2, #0
   35512:	2302      	movs	r3, #2
   35514:	f000 f88e 	bl	35634 <_lseek_r>
   35518:	89a3      	ldrh	r3, [r4, #12]
   3551a:	4a05      	ldr	r2, [pc, #20]	; (35530 <__swrite+0x34>)
   3551c:	0028      	movs	r0, r5
   3551e:	4013      	ands	r3, r2
   35520:	81a3      	strh	r3, [r4, #12]
   35522:	0032      	movs	r2, r6
   35524:	230e      	movs	r3, #14
   35526:	5ee1      	ldrsh	r1, [r4, r3]
   35528:	003b      	movs	r3, r7
   3552a:	f000 f839 	bl	355a0 <_write_r>
   3552e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35530:	ffffefff 	.word	0xffffefff

00035534 <__sseek>:
   35534:	b570      	push	{r4, r5, r6, lr}
   35536:	000c      	movs	r4, r1
   35538:	250e      	movs	r5, #14
   3553a:	5f49      	ldrsh	r1, [r1, r5]
   3553c:	f000 f87a 	bl	35634 <_lseek_r>
   35540:	89a3      	ldrh	r3, [r4, #12]
   35542:	1c42      	adds	r2, r0, #1
   35544:	d103      	bne.n	3554e <__sseek+0x1a>
   35546:	4a05      	ldr	r2, [pc, #20]	; (3555c <__sseek+0x28>)
   35548:	4013      	ands	r3, r2
   3554a:	81a3      	strh	r3, [r4, #12]
   3554c:	bd70      	pop	{r4, r5, r6, pc}
   3554e:	2280      	movs	r2, #128	; 0x80
   35550:	0152      	lsls	r2, r2, #5
   35552:	4313      	orrs	r3, r2
   35554:	81a3      	strh	r3, [r4, #12]
   35556:	6560      	str	r0, [r4, #84]	; 0x54
   35558:	e7f8      	b.n	3554c <__sseek+0x18>
   3555a:	46c0      	nop			; (mov r8, r8)
   3555c:	ffffefff 	.word	0xffffefff

00035560 <__sclose>:
   35560:	b510      	push	{r4, lr}
   35562:	230e      	movs	r3, #14
   35564:	5ec9      	ldrsh	r1, [r1, r3]
   35566:	f000 f82f 	bl	355c8 <_close_r>
   3556a:	bd10      	pop	{r4, pc}

0003556c <strchr>:
   3556c:	b2c9      	uxtb	r1, r1
   3556e:	7803      	ldrb	r3, [r0, #0]
   35570:	2b00      	cmp	r3, #0
   35572:	d004      	beq.n	3557e <strchr+0x12>
   35574:	4299      	cmp	r1, r3
   35576:	d100      	bne.n	3557a <strchr+0xe>
   35578:	4770      	bx	lr
   3557a:	3001      	adds	r0, #1
   3557c:	e7f7      	b.n	3556e <strchr+0x2>
   3557e:	424b      	negs	r3, r1
   35580:	4159      	adcs	r1, r3
   35582:	4249      	negs	r1, r1
   35584:	4008      	ands	r0, r1
   35586:	e7f7      	b.n	35578 <strchr+0xc>

00035588 <__ascii_wctomb>:
   35588:	1e0b      	subs	r3, r1, #0
   3558a:	d004      	beq.n	35596 <__ascii_wctomb+0xe>
   3558c:	2aff      	cmp	r2, #255	; 0xff
   3558e:	d904      	bls.n	3559a <__ascii_wctomb+0x12>
   35590:	238a      	movs	r3, #138	; 0x8a
   35592:	6003      	str	r3, [r0, #0]
   35594:	3b8b      	subs	r3, #139	; 0x8b
   35596:	0018      	movs	r0, r3
   35598:	4770      	bx	lr
   3559a:	700a      	strb	r2, [r1, #0]
   3559c:	2301      	movs	r3, #1
   3559e:	e7fa      	b.n	35596 <__ascii_wctomb+0xe>

000355a0 <_write_r>:
   355a0:	b570      	push	{r4, r5, r6, lr}
   355a2:	0005      	movs	r5, r0
   355a4:	0008      	movs	r0, r1
   355a6:	0011      	movs	r1, r2
   355a8:	2200      	movs	r2, #0
   355aa:	4c06      	ldr	r4, [pc, #24]	; (355c4 <_write_r+0x24>)
   355ac:	6022      	str	r2, [r4, #0]
   355ae:	001a      	movs	r2, r3
   355b0:	f7f4 ffa2 	bl	2a4f8 <_write>
   355b4:	1c43      	adds	r3, r0, #1
   355b6:	d103      	bne.n	355c0 <_write_r+0x20>
   355b8:	6823      	ldr	r3, [r4, #0]
   355ba:	2b00      	cmp	r3, #0
   355bc:	d000      	beq.n	355c0 <_write_r+0x20>
   355be:	602b      	str	r3, [r5, #0]
   355c0:	bd70      	pop	{r4, r5, r6, pc}
   355c2:	46c0      	nop			; (mov r8, r8)
   355c4:	20005a40 	.word	0x20005a40

000355c8 <_close_r>:
   355c8:	2300      	movs	r3, #0
   355ca:	b570      	push	{r4, r5, r6, lr}
   355cc:	4c06      	ldr	r4, [pc, #24]	; (355e8 <_close_r+0x20>)
   355ce:	0005      	movs	r5, r0
   355d0:	0008      	movs	r0, r1
   355d2:	6023      	str	r3, [r4, #0]
   355d4:	f7f4 ffe4 	bl	2a5a0 <_close>
   355d8:	1c43      	adds	r3, r0, #1
   355da:	d103      	bne.n	355e4 <_close_r+0x1c>
   355dc:	6823      	ldr	r3, [r4, #0]
   355de:	2b00      	cmp	r3, #0
   355e0:	d000      	beq.n	355e4 <_close_r+0x1c>
   355e2:	602b      	str	r3, [r5, #0]
   355e4:	bd70      	pop	{r4, r5, r6, pc}
   355e6:	46c0      	nop			; (mov r8, r8)
   355e8:	20005a40 	.word	0x20005a40

000355ec <_fstat_r>:
   355ec:	2300      	movs	r3, #0
   355ee:	b570      	push	{r4, r5, r6, lr}
   355f0:	4c06      	ldr	r4, [pc, #24]	; (3560c <_fstat_r+0x20>)
   355f2:	0005      	movs	r5, r0
   355f4:	0008      	movs	r0, r1
   355f6:	0011      	movs	r1, r2
   355f8:	6023      	str	r3, [r4, #0]
   355fa:	f7f4 ffdb 	bl	2a5b4 <_fstat>
   355fe:	1c43      	adds	r3, r0, #1
   35600:	d103      	bne.n	3560a <_fstat_r+0x1e>
   35602:	6823      	ldr	r3, [r4, #0]
   35604:	2b00      	cmp	r3, #0
   35606:	d000      	beq.n	3560a <_fstat_r+0x1e>
   35608:	602b      	str	r3, [r5, #0]
   3560a:	bd70      	pop	{r4, r5, r6, pc}
   3560c:	20005a40 	.word	0x20005a40

00035610 <_isatty_r>:
   35610:	2300      	movs	r3, #0
   35612:	b570      	push	{r4, r5, r6, lr}
   35614:	4c06      	ldr	r4, [pc, #24]	; (35630 <_isatty_r+0x20>)
   35616:	0005      	movs	r5, r0
   35618:	0008      	movs	r0, r1
   3561a:	6023      	str	r3, [r4, #0]
   3561c:	f7f4 ffd8 	bl	2a5d0 <_isatty>
   35620:	1c43      	adds	r3, r0, #1
   35622:	d103      	bne.n	3562c <_isatty_r+0x1c>
   35624:	6823      	ldr	r3, [r4, #0]
   35626:	2b00      	cmp	r3, #0
   35628:	d000      	beq.n	3562c <_isatty_r+0x1c>
   3562a:	602b      	str	r3, [r5, #0]
   3562c:	bd70      	pop	{r4, r5, r6, pc}
   3562e:	46c0      	nop			; (mov r8, r8)
   35630:	20005a40 	.word	0x20005a40

00035634 <_lseek_r>:
   35634:	b570      	push	{r4, r5, r6, lr}
   35636:	0005      	movs	r5, r0
   35638:	0008      	movs	r0, r1
   3563a:	0011      	movs	r1, r2
   3563c:	2200      	movs	r2, #0
   3563e:	4c06      	ldr	r4, [pc, #24]	; (35658 <_lseek_r+0x24>)
   35640:	6022      	str	r2, [r4, #0]
   35642:	001a      	movs	r2, r3
   35644:	f7f4 ffcd 	bl	2a5e2 <_lseek>
   35648:	1c43      	adds	r3, r0, #1
   3564a:	d103      	bne.n	35654 <_lseek_r+0x20>
   3564c:	6823      	ldr	r3, [r4, #0]
   3564e:	2b00      	cmp	r3, #0
   35650:	d000      	beq.n	35654 <_lseek_r+0x20>
   35652:	602b      	str	r3, [r5, #0]
   35654:	bd70      	pop	{r4, r5, r6, pc}
   35656:	46c0      	nop			; (mov r8, r8)
   35658:	20005a40 	.word	0x20005a40

0003565c <memchr>:
   3565c:	b2c9      	uxtb	r1, r1
   3565e:	1882      	adds	r2, r0, r2
   35660:	4290      	cmp	r0, r2
   35662:	d101      	bne.n	35668 <memchr+0xc>
   35664:	2000      	movs	r0, #0
   35666:	4770      	bx	lr
   35668:	7803      	ldrb	r3, [r0, #0]
   3566a:	428b      	cmp	r3, r1
   3566c:	d0fb      	beq.n	35666 <memchr+0xa>
   3566e:	3001      	adds	r0, #1
   35670:	e7f6      	b.n	35660 <memchr+0x4>

00035672 <_realloc_r>:
   35672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35674:	0007      	movs	r7, r0
   35676:	000d      	movs	r5, r1
   35678:	0016      	movs	r6, r2
   3567a:	2900      	cmp	r1, #0
   3567c:	d105      	bne.n	3568a <_realloc_r+0x18>
   3567e:	0011      	movs	r1, r2
   35680:	f7fe fe9e 	bl	343c0 <_malloc_r>
   35684:	0004      	movs	r4, r0
   35686:	0020      	movs	r0, r4
   35688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3568a:	2a00      	cmp	r2, #0
   3568c:	d103      	bne.n	35696 <_realloc_r+0x24>
   3568e:	f7fe fe4d 	bl	3432c <_free_r>
   35692:	0034      	movs	r4, r6
   35694:	e7f7      	b.n	35686 <_realloc_r+0x14>
   35696:	f000 f827 	bl	356e8 <_malloc_usable_size_r>
   3569a:	002c      	movs	r4, r5
   3569c:	4286      	cmp	r6, r0
   3569e:	d9f2      	bls.n	35686 <_realloc_r+0x14>
   356a0:	0031      	movs	r1, r6
   356a2:	0038      	movs	r0, r7
   356a4:	f7fe fe8c 	bl	343c0 <_malloc_r>
   356a8:	1e04      	subs	r4, r0, #0
   356aa:	d0ec      	beq.n	35686 <_realloc_r+0x14>
   356ac:	0029      	movs	r1, r5
   356ae:	0032      	movs	r2, r6
   356b0:	f7fe fe18 	bl	342e4 <memcpy>
   356b4:	0029      	movs	r1, r5
   356b6:	0038      	movs	r0, r7
   356b8:	f7fe fe38 	bl	3432c <_free_r>
   356bc:	e7e3      	b.n	35686 <_realloc_r+0x14>
	...

000356c0 <_read_r>:
   356c0:	b570      	push	{r4, r5, r6, lr}
   356c2:	0005      	movs	r5, r0
   356c4:	0008      	movs	r0, r1
   356c6:	0011      	movs	r1, r2
   356c8:	2200      	movs	r2, #0
   356ca:	4c06      	ldr	r4, [pc, #24]	; (356e4 <_read_r+0x24>)
   356cc:	6022      	str	r2, [r4, #0]
   356ce:	001a      	movs	r2, r3
   356d0:	f7f4 fee8 	bl	2a4a4 <_read>
   356d4:	1c43      	adds	r3, r0, #1
   356d6:	d103      	bne.n	356e0 <_read_r+0x20>
   356d8:	6823      	ldr	r3, [r4, #0]
   356da:	2b00      	cmp	r3, #0
   356dc:	d000      	beq.n	356e0 <_read_r+0x20>
   356de:	602b      	str	r3, [r5, #0]
   356e0:	bd70      	pop	{r4, r5, r6, pc}
   356e2:	46c0      	nop			; (mov r8, r8)
   356e4:	20005a40 	.word	0x20005a40

000356e8 <_malloc_usable_size_r>:
   356e8:	1f0b      	subs	r3, r1, #4
   356ea:	681b      	ldr	r3, [r3, #0]
   356ec:	1f18      	subs	r0, r3, #4
   356ee:	2b00      	cmp	r3, #0
   356f0:	da01      	bge.n	356f6 <_malloc_usable_size_r+0xe>
   356f2:	580b      	ldr	r3, [r1, r0]
   356f4:	18c0      	adds	r0, r0, r3
   356f6:	4770      	bx	lr
   356f8:	00000002 	.word	0x00000002
   356fc:	00000003 	.word	0x00000003
   35700:	00000028 	.word	0x00000028
   35704:	00000029 	.word	0x00000029
   35708:	00000004 	.word	0x00000004
   3570c:	00000005 	.word	0x00000005
   35710:	00000006 	.word	0x00000006
   35714:	00000007 	.word	0x00000007
   35718:	0000ffff 	.word	0x0000ffff
   3571c:	0000ffff 	.word	0x0000ffff
   35720:	00000022 	.word	0x00000022
   35724:	00000023 	.word	0x00000023
   35728:	0000ffff 	.word	0x0000ffff
   3572c:	0000ffff 	.word	0x0000ffff
   35730:	0000ffff 	.word	0x0000ffff
   35734:	0000ffff 	.word	0x0000ffff
   35738:	00000008 	.word	0x00000008
   3573c:	00000009 	.word	0x00000009
   35740:	0000000a 	.word	0x0000000a
   35744:	0000000b 	.word	0x0000000b
   35748:	000124da 	.word	0x000124da
   3574c:	000124e0 	.word	0x000124e0
   35750:	000124e0 	.word	0x000124e0
   35754:	000124e0 	.word	0x000124e0
   35758:	000124e0 	.word	0x000124e0
   3575c:	000124e0 	.word	0x000124e0
   35760:	000124e0 	.word	0x000124e0
   35764:	000124e0 	.word	0x000124e0
   35768:	000124e0 	.word	0x000124e0
   3576c:	000124e0 	.word	0x000124e0
   35770:	000124e0 	.word	0x000124e0
   35774:	000124e0 	.word	0x000124e0
   35778:	000124e0 	.word	0x000124e0
   3577c:	000124e0 	.word	0x000124e0
   35780:	000124e0 	.word	0x000124e0
   35784:	000124e0 	.word	0x000124e0
   35788:	000124b8 	.word	0x000124b8
   3578c:	000124e0 	.word	0x000124e0
   35790:	000124e0 	.word	0x000124e0
   35794:	000124e0 	.word	0x000124e0
   35798:	000124e0 	.word	0x000124e0
   3579c:	000124e0 	.word	0x000124e0
   357a0:	000124e0 	.word	0x000124e0
   357a4:	000124e0 	.word	0x000124e0
   357a8:	000124e0 	.word	0x000124e0
   357ac:	000124e0 	.word	0x000124e0
   357b0:	000124e0 	.word	0x000124e0
   357b4:	000124e0 	.word	0x000124e0
   357b8:	000124e0 	.word	0x000124e0
   357bc:	000124e0 	.word	0x000124e0
   357c0:	000124e0 	.word	0x000124e0
   357c4:	000124e0 	.word	0x000124e0
   357c8:	000124d4 	.word	0x000124d4
   357cc:	000124e0 	.word	0x000124e0
   357d0:	000124e0 	.word	0x000124e0
   357d4:	000124e0 	.word	0x000124e0
   357d8:	000124e0 	.word	0x000124e0
   357dc:	000124e0 	.word	0x000124e0
   357e0:	000124e0 	.word	0x000124e0
   357e4:	000124e0 	.word	0x000124e0
   357e8:	000124e0 	.word	0x000124e0
   357ec:	000124e0 	.word	0x000124e0
   357f0:	000124e0 	.word	0x000124e0
   357f4:	000124e0 	.word	0x000124e0
   357f8:	000124e0 	.word	0x000124e0
   357fc:	000124e0 	.word	0x000124e0
   35800:	000124e0 	.word	0x000124e0
   35804:	000124e0 	.word	0x000124e0
   35808:	000124ce 	.word	0x000124ce
   3580c:	00012476 	.word	0x00012476
   35810:	0001248c 	.word	0x0001248c
   35814:	000124a2 	.word	0x000124a2
   35818:	0001245c 	.word	0x0001245c

0003581c <pcWelcomeMessage>:
   3581c:	65657246 534f5452 494c4320 540a0d2e     FreeRTOS CLI...T
   3582c:	20657079 706c6548 206f7420 77656976     ype Help to view
   3583c:	6c206120 20747369 7220666f 73696765      a list of regis
   3584c:	65726574 6f632064 6e616d6d 0d2e7364     tered commands..
   3585c:	0000000a 00007766 203a7766 6e776f44     ....fw..fw: Down
   3586c:	64616f6c 66206120 20656c69 20646e61     load a file and 
   3587c:	66726570 206d726f 46206e61 70752057     perform an FW up
   3588c:	65746164 00000a0d 65736572 00000074     date....reset...
   3589c:	65736572 52203a74 74657365 68742073     reset: Resets th
   358ac:	65642065 65636976 00000a0d 00633269     e device....i2c.
   358bc:	3a633269 61635320 4920736e 62204332     i2c: Scans I2C b
   358cc:	0a0d7375 00000000 00736474 3a736474     us......tds.tds:
   358dc:	61635320 4120736e 62204344 0a0d7375      Scans ADC bus..
   358ec:	00000000 706d7570 00006e6f 706d7570     ....pumpon..pump
   358fc:	203a6e6f 74697773 73656863 204e4f20     on: switches ON 
   3590c:	706d7570 00000a0d 706d7570 0066666f     pump....pumpoff.
   3591c:	706d7570 3a66666f 69777320 65686374     pumpoff: switche
   3592c:	464f2073 75702046 0a0d706d 00000000     s OFF pump......
   3593c:	00736c63 3a736c63 656c4320 20737261     cls.cls: Clears 
   3594c:	20656874 6d726574 6c616e69 72637320     the terminal scr
   3595c:	0d6e6565 0000000a 6c756f43 6f6e2064     een.....Could no
   3596c:	6c612074 61636f6c 73206574 70616d65     t allocate semap
   3597c:	65726f68 00000a0d 00000a0d 0000616f     hore........oa..
   3598c:	325b6325 003e0d4b 00082008 325b6325     %c[2K.>.. ..%c[2
   3599c:	0000004a 31202030 20322020 20203320     J...0  1  2  3  
   359ac:	35202034 20362020 20203720 39202038     4  5  6  7  8  9
   359bc:	20612020 20206220 64202063 20652020       a  b  c  d  e 
   359cc:	0a0d6620 00000000 78323025 0000203a      f......%02x: ..
   359dc:	78323025 00000020 20534454 64616572     %02x ...TDS read
   359ec:	3a676e69 20642520 0d6d7070 0000000a     ing: %d ppm.....
   359fc:	72617453 676e6974 746f6d20 0d20726f     Starting motor .
   35a0c:	0000000a 656e6f44 746f6d20 0d20726f     ....Done motor .
   35a1c:	0000000a                                ....

00035a20 <xOTAUCommand>:
   35a20:	00035860 00035864 00013b59 00000000     `X..dX..Y;......

00035a30 <xResetCommand>:
   35a30:	00035894 0003589c 00013b91 00000000     .X...X...;......

00035a40 <xI2cScan>:
   35a40:	000358b8 000358bc 00013bb1 00000000     .X...X...;......

00035a50 <xtdsScan>:
   35a50:	000358d4 000358d8 00013cd9 00000000     .X...X...<......

00035a60 <xpumpon>:
   35a60:	000358f0 000358f8 00013d21 00000000     .X...X..!=......

00035a70 <xpumpoff>:
   35a70:	00035914 0003591c 00013d49 00000000     .Y...Y..I=......

00035a80 <xClearScreen>:
   35a80:	0003593c 00035940 00013b11 00000000     <Y..@Y...;......
   35a90:	00007877 6f727245 65722072 6e696461     wx..Error readin
   35aa0:	61572067 53726574 6f736e65 6f6c2072     g WaterSensor lo
   35ab0:	722f2177 00006e2f                       w!/r/n..

00035ab8 <main_mqtt_broker>:
   35ab8:	6b6f7262 682e7265 6d657669 6f632e71     broker.hivemq.co
   35ac8:	0000006d 64333025 00000000 72617473     m...%03d....star
   35ad8:	6f645f74 6f6c6e77 203a6461 20434d4d     t_download: MMC 
   35ae8:	726f7473 20656761 20746f6e 64616572     storage not read
   35af8:	0a0d2e79 00000000 72617473 6f645f74     y.......start_do
   35b08:	6f6c6e77 203a6461 462d6957 73692069     wnload: Wi-Fi is
   35b18:	746f6e20 6e6f6320 7463656e 0d2e6465      not connected..
   35b28:	0000000a 72617473 6f645f74 6f6c6e77     ....start_downlo
   35b38:	203a6461 75716572 20747365 73207369     ad: request is s
   35b48:	20746e65 65726c61 2e796461 00000a0d     ent already.....
   35b58:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   35b68:	6e6e7572 20676e69 6e776f64 64616f6c     running download
   35b78:	726c6120 79646165 000a0d2e 72617473      already....star
   35b88:	6f645f74 6f6c6e77 203a6461 646e6573     t_download: send
   35b98:	20676e69 50545448 71657220 74736575     ing HTTP request
   35ba8:	0d2e2e2e 0000000a 70747468 322f2f3a     ........http://2
   35bb8:	33322e30 39362e31 3833312e 4553452f     0.231.69.138/ESE
   35bc8:	5f363135 4e49414d 2e57465f 006e6962     516_MAIN_FW.bin.
   35bd8:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   35be8:	65203a74 7974706d 74616420 0a0d2e61     t: empty data...
   35bf8:	00000000 726f7473 69665f65 705f656c     ....store_file_p
   35c08:	656b6361 66203a74 20656c69 656d616e     acket: file name
   35c18:	20736920 61766e69 2e64696c 776f4420      is invalid. Dow
   35c28:	616f6c6e 61632064 6c65636e 0d2e6465     nload canceled..
   35c38:	0000000a 726f7473 69665f65 705f656c     ....store_file_p
   35c48:	656b6361 63203a74 74616572 20676e69     acket: creating 
   35c58:	656c6966 73255b20 000a0d5d 726f7473     file [%s]...stor
   35c68:	69665f65 705f656c 656b6361 66203a74     e_file_packet: f
   35c78:	20656c69 61657263 6e6f6974 72726520     ile creation err
   35c88:	2021726f 3a746572 0a0d6425 00000000     or! ret:%d......
   35c98:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   35ca8:	66203a74 20656c69 74697277 72652065     t: file write er
   35cb8:	2c726f72 776f6420 616f6c6e 61632064     ror, download ca
   35cc8:	6c65636e 0d2e6465 0000000a 726f7473     nceled......stor
   35cd8:	69665f65 705f656c 656b6361 72203a74     e_file_packet: r
   35ce8:	69656365 5b646576 5d756c25 6966202c     eceived[%lu], fi
   35cf8:	7320656c 5b657a69 5d756c25 00000a0d     le size[%lu]....
   35d08:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   35d18:	66203a74 20656c69 6e776f64 64616f6c     t: file download
   35d28:	73206465 65636375 75667373 2e796c6c     ed successfully.
   35d38:	00000a0d 70747468 696c635f 5f746e65     ....http_client_
   35d48:	6c6c6163 6b636162 5448203a 63205054     callback: HTTP c
   35d58:	6e65696c 6f732074 74656b63 6e6f6320     lient socket con
   35d68:	7463656e 0d2e6465 0000000a 70747468     nected......http
   35d78:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   35d88:	6572203a 73657571 6f632074 656c706d     : request comple
   35d98:	2e646574 00000a0d 70747468 696c635f     ted.....http_cli
   35da8:	5f746e65 6c6c6163 6b636162 6572203a     ent_callback: re
   35db8:	76696563 72206465 6f707365 2065736e     ceived response 
   35dc8:	64207525 20617461 657a6973 0d752520     %u data size %u.
   35dd8:	0000000a 70747468 696c635f 5f746e65     ....http_client_
   35de8:	6c6c6163 6b636162 6964203a 6e6f6373     callback: discon
   35df8:	7463656e 206e6f69 73616572 253a6e6f     nection reason:%
   35e08:	000a0d64 6f736572 5f65766c 203a6263     d...resolve_cb: 
   35e18:	49207325 64612050 73657264 73692073     %s IP address is
   35e28:	2e642520 252e6425 64252e64 0a0d0a0d      %d.%d.%d.%d....
   35e38:	00000000 69666977 3a62635f 4d324d20     ....wifi_cb: M2M
   35e48:	4649575f 4f435f49 43454e4e 0d444554     _WIFI_CONNECTED.
   35e58:	0000000a 69666977 3a62635f 4d324d20     ....wifi_cb: M2M
   35e68:	4649575f 49445f49 4e4f4353 5443454e     _WIFI_DISCONNECT
   35e78:	0a0d4445 00000000 73736170 64726f77     ED......password
   35e88:	00000000 69726168 00006873 69666977     ....harish..wifi
   35e98:	3a62635f 20504920 72646461 20737365     _cb: IP address 
   35ea8:	25207369 75252e75 2e75252e 0a0d7525     is %u.%u.%u.%u..
   35eb8:	00000000 6f727245 6f632072 63656e6e     ....Error connec
   35ec8:	676e6974 206f7420 5454514d 6f724220     ting to MQTT Bro
   35ed8:	2172656b 00000a0d 74696e69 6f74735f     ker!....init_sto
   35ee8:	65676172 6c70203a 65736165 756c7020     rage: please plu
   35ef8:	6e612067 2f445320 20434d4d 64726163     g an SD/MMC card
   35f08:	206e6920 746f6c73 0d2e2e2e 0000000a      in slot........
   35f18:	74696e69 6f74735f 65676172 4453203a     init_storage: SD
   35f28:	72614320 6e692064 6c617473 6166206c      Card install fa
   35f38:	64656c69 000a0d2e 74696e69 6f74735f     iled....init_sto
   35f48:	65676172 7274203a 6e752079 67756c70     rage: try unplug
   35f58:	646e6120 2d657220 67756c70 65687420      and re-plug the
   35f68:	72616320 0a0d2e64 00000000 74696e69      card.......init
   35f78:	6f74735f 65676172 6f6d203a 69746e75     _storage: mounti
   35f88:	5320676e 61632044 2e2e6472 000a0d2e     ng SD card......
   35f98:	74696e69 6f74735f 65676172 4453203a     init_storage: SD
   35fa8:	72616320 6f6d2064 20746e75 6c696166      card mount fail
   35fb8:	20216465 73657228 29642520 00000a0d     ed! (res %d)....
   35fc8:	74696e69 6f74735f 65676172 4453203a     init_storage: SD
   35fd8:	72616320 6f6d2064 20746e75 0d2e4b4f      card mount OK..
   35fe8:	0000000a 666e6f63 72756769 74685f65     ....configure_ht
   35ff8:	635f7074 6e65696c 48203a74 20505454     tp_client: HTTP 
   36008:	65696c63 6920746e 6974696e 7a696c61     client initializ
   36018:	6f697461 6166206e 64656c69 72282021     ation failed! (r
   36028:	25207365 0a0d2964 00000000 25200a0d     es %d)........ %
   36038:	00732a2e 203e3e20 00000000 732a2e25     .*s. >> ....%.*s
   36048:	00000000 4c5f3150 455f4445 31354553     ....P1_LED_ESE51
   36058:	30545f36 00000000 736c6166 00000065     6_T0....false...
   36068:	65757274 00000000 5453414d 485f5245     true....MASTER_H
   36078:	38524459 4553455f 30363135 0031545f     YDR8_ESE5160_T1.
   36088:	6f430a0d 63656e6e 676e6974 206f7420     ..Connecting to 
   36098:	6b6f7242 2e2e7265 0000002e 35657365     Broker......ese5
   360a8:	48303631 38726479 00000000 72647968     160Hydr8....hydr
   360b8:	00000038 5454514d 72452020 20726f72     8...MQTT  Error 
   360c8:	4f4e202d 6f432054 63656e6e 20646574     - NOT Connected 
   360d8:	62206f74 656b6f72 000a0d72 5454514d     to broker...MQTT
   360e8:	6e6f4320 7463656e 74206465 7262206f      Connected to br
   360f8:	72656b6f 00000a0d 6e6e6f43 20746365     oker....Connect 
   36108:	6c696166 206f7420 76726573 25287265     fail to server(%
   36118:	20212973 72746572 74692079 74756120     s)! retry it aut
   36128:	74616d6f 6c616369 0d2e796c 0000000a     omatically......
   36138:	5454514d 6e6f4320 7463656e 0a0d6465     MQTT Connected..
   36148:	00000000 5454514d 6f726220 2072656b     ....MQTT broker 
   36158:	6c636564 20656e69 72756f79 63636120     decline your acc
   36168:	21737365 72726520 6320726f 2065646f     ess! error code 
   36178:	0a0d6425 00000000 5454514d 73696420     %d......MQTT dis
   36188:	6e6e6f63 65746365 000a0d64 5454514d     connected...MQTT
   36198:	696e6920 6c616974 74617a69 206e6f69      initialization 
   361a8:	6c696166 202e6465 6f727245 6f632072     failed. Error co
   361b8:	69206564 25282073 0a0d2964 00000000     de is (%d)......
   361c8:	5454514d 67657220 65747369 61632072     MQTT register ca
   361d8:	61626c6c 66206b63 656c6961 45202e64     llback failed. E
   361e8:	726f7272 646f6320 73692065 64252820     rror code is (%d
   361f8:	000a0d29 2264227b 74227b3a 22706d65     )...{"d":{"temp"
   36208:	7d64253a 0000007d 4941465b 72205d4c     :%d}}...[FAIL] r
   36218:	25207365 000a0d64 67616c46 78742e41     es %d...FlagA.tx
   36228:	64612074 21646564 00000a0d 6c463a30     t added!....0:Fl
   36238:	2e416761 00747874 6e6e6f43 65746365     agA.txt.Connecte
   36248:	6f742064 54514d20 72422054 72656b6f     d to MQTT Broker
   36258:	000a0d21 6d69227b 3a227875 202c6425     !...{"imux":%d, 
   36268:	756d6922 203a2279 202c6425 756d6922     "imuy": %d, "imu
   36278:	203a227a 007d6425 495f3150 455f554d     z": %d}.P1_IMU_E
   36288:	31354553 30545f36 00000000 00756c25     SE516_T0....%lu.
   36298:	485f4c57 38524459 4553455f 30363135     WL_HYDR8_ESE5160
   362a8:	0031545f 00006425 504d5550 44454c5f     _T1.%d..PUMP_LED
   362b8:	4459485f 455f3852 31354553 545f3036     _HYDR8_ESE5160_T
   362c8:	00000031 5f534454 5f44454c 52445948     1...TDS_LED_HYDR
   362d8:	53455f38 36313545 31545f30 00000000     8_ESE5160_T1....
   362e8:	554c4f56 485f454d 38524459 4553455f     VOLUME_HYDR8_ESE
   362f8:	30363135 0031545f 5f534454 52445948     5160_T1.TDS_HYDR
   36308:	53455f38 36313545 31545f30 00000000     8_ESE5160_T1....
   36318:	6167227b 3a22656d 0000005b 00007d5d     {"game":[...]}..
   36328:	00000a0d 475f3250 5f454d41 35455345     ....P2_GAME_ESE5
   36338:	545f3631 00000030 4f525245 6e492052     16_T0...ERROR In
   36348:	61697469 697a696c 5720676e 20696669     itializing Wifi 
   36358:	61746144 65757120 21736575 00000a0d     Data queues!....
   36368:	35455345 2d203631 66695720 6e492069     ESE516 - Wifi In
   36378:	43207469 0d65646f 0000000a 6e69616d     it Code.....main
   36388:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
   36398:	6c6c6163 72726520 2021726f 73657228     call error! (res
   363a8:	29642520 00000a0d 6e69616d 6f63203a      %d)....main: co
   363b8:	63656e6e 676e6974 206f7420 69466957     nnecting to WiFi
   363c8:	20504120 2e2e7325 000a0d2e 545f3150      AP %s......P1_T
   363d8:	45504d45 55544152 455f4552 31354553     EMPERATURE_ESE51
   363e8:	30545f36 00000000 5454514d 6e657320     6_T0....MQTT sen
   363f8:	73252064 00000a0d 0001564c 00015658     d %s....LV..XV..
   36408:	0001566a 000156c0 000156e0 706c6568     jV...V...V..help
   36418:	00000000 65680a0d 0d3a706c 694c200a     ......help:.. Li
   36428:	20737473 206c6c61 20656874 69676572     sts all the regi
   36438:	72657473 63206465 616d6d6f 0d73646e     stered commands.
   36448:	000a0d0a 6f636e49 63657272 6f632074     ....Incorrect co
   36458:	6e616d6d 61702064 656d6172 28726574     mmand parameter(
   36468:	202e2973 746e4520 22207265 706c6568     s).  Enter "help
   36478:	6f742022 65697620 20612077 7473696c     " to view a list
   36488:	20666f20 69617661 6c62616c 6f632065      of available co
   36498:	6e616d6d 0d2e7364 000a0d0a 6d6d6f43     mmands......Comm
   364a8:	20646e61 20746f6e 6f636572 73696e67     and not recognis
   364b8:	202e6465 746e4520 27207265 706c6568     ed.  Enter 'help
   364c8:	6f742027 65697620 20612077 7473696c     ' to view a list
   364d8:	20666f20 69617661 6c62616c 6f632065      of available co
   364e8:	6e616d6d 0d2e7364 000a0d0a              mmands......

000364f4 <xHelpCommand>:
   364f4:	00036414 0003641c 00017411 00000000     .d...d...t......
   36504:	61725476 6e456563 656c6261 43525428     vTraceEnable(TRC
   36514:	4154535f 415f5452 54494157 534f485f     _START_AWAIT_HOS
   36524:	6e202954 6120746f 776f6c6c 69206465     T) not allowed i
   36534:	6e53206e 68737061 6d20746f 0065646f     n Snapshot mode.
   36544:	78656e55 74636570 61206465 6d756772     Unexpected argum
   36554:	20746e65 76206f74 63617254 616e4565     ent to vTraceEna
   36564:	20656c62 616e7328 6f687370 6f6d2074     ble (snapshot mo
   36574:	00296564 74437a54 00006c72 20746f4e     de).TzCtrl..Not 
   36584:	756f6e65 54206867 204b5341 646e6168     enough TASK hand
   36594:	2073656c 6e69202d 61657263 54206573     les - increase T
   365a4:	435f4352 4e5f4746 4b534154 206e6920     RC_CFG_NTASK in 
   365b4:	53637274 7370616e 43746f68 69666e6f     trcSnapshotConfi
   365c4:	00682e67 20746f4e 756f6e65 49206867     g.h.Not enough I
   365d4:	68205253 6c646e61 2d207365 636e6920     SR handles - inc
   365e4:	73616572 52542065 46435f43 494e5f47     rease TRC_CFG_NI
   365f4:	69205253 7274206e 616e5363 6f687370     SR in trcSnapsho
   36604:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   36614:	756f6e65 53206867 50414d45 45524f48     enough SEMAPHORE
   36624:	6e616820 73656c64 69202d20 6572636e      handles - incre
   36634:	20657361 5f435254 5f474643 4d45534e     ase TRC_CFG_NSEM
   36644:	4f485041 69204552 7274206e 616e5363     APHORE in trcSna
   36654:	6f687370 6e6f4374 2e676966 00000068     pshotConfig.h...
   36664:	20746f4e 756f6e65 4d206867 58455455     Not enough MUTEX
   36674:	6e616820 73656c64 69202d20 6572636e      handles - incre
   36684:	20657361 5f435254 5f474643 54554d4e     ase TRC_CFG_NMUT
   36694:	69205845 7274206e 616e5363 6f687370     EX in trcSnapsho
   366a4:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   366b4:	756f6e65 51206867 45554555 6e616820     enough QUEUE han
   366c4:	73656c64 69202d20 6572636e 20657361     dles - increase 
   366d4:	5f435254 5f474643 4555514e 69204555     TRC_CFG_NQUEUE i
   366e4:	7274206e 616e5363 6f687370 6e6f4374     n trcSnapshotCon
   366f4:	2e676966 00000068 20746f4e 756f6e65     fig.h...Not enou
   36704:	54206867 52454d49 6e616820 73656c64     gh TIMER handles
   36714:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   36724:	5f474643 4d49544e 69205245 7274206e     CFG_NTIMER in tr
   36734:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   36744:	00000068 20746f4e 756f6e65 45206867     h...Not enough E
   36754:	544e4556 554f5247 61682050 656c646e     VENTGROUP handle
   36764:	202d2073 72636e69 65736165 43525420     s - increase TRC
   36774:	4746435f 56454e5f 47544e45 50554f52     _CFG_NEVENTGROUP
   36784:	206e6920 53637274 7370616e 43746f68      in trcSnapshotC
   36794:	69666e6f 00682e67 20746f4e 756f6e65     onfig.h.Not enou
   367a4:	53206867 41455254 4655424d 20524546     gh STREAMBUFFER 
   367b4:	646e6168 2073656c 6e69202d 61657263     handles - increa
   367c4:	54206573 435f4352 4e5f4746 45525453     se TRC_CFG_NSTRE
   367d4:	55424d41 52454646 206e6920 53637274     AMBUFFER in trcS
   367e4:	7370616e 43746f68 69666e6f 00682e67     napshotConfig.h.
   367f4:	20746f4e 756f6e65 4d206867 41535345     Not enough MESSA
   36804:	55424547 52454646 6e616820 73656c64     GEBUFFER handles
   36814:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   36824:	5f474643 53454d4e 45474153 46465542     CFG_NMESSAGEBUFF
   36834:	69205245 7274206e 616e5363 6f687370     ER in trcSnapsho
   36844:	6e6f4374 2e676966 00000068 547a7370     tConfig.h...pszT
   36854:	65636172 45746547 726f7272 646e6148     raceGetErrorHand
   36864:	3a73656c 766e4920 64696c61 6a626f20     les: Invalid obj
   36874:	63746365 7373616c 00000021 00017b36     ectclass!...6{..
   36884:	00017b2e 00017b32 00017b26 00017b2a     .{..2{..&{..*{..
   36894:	00017b3a 00017b3e 00017b42 00017b46     :{..>{..B{..F{..
   368a4:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   368b4:	64726f63 6e207265 6920746f 6974696e     corder not initi
   368c4:	7a696c61 202e6465 20657355 61725476     alized. Use vTra
   368d4:	6e456563 656c6261 69202928 6574736e     ceEnable() inste
   368e4:	00216461 61747328 70757472 00000029     ad!.(startup)...
   368f4:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   36904:	64726f63 6e207265 6920746f 6974696e     corder not initi
   36914:	7a696c61 202c6465 6c6c6163 72547620     alized, call vTr
   36924:	45656361 6c62616e 20292865 73726966     aceEnable() firs
   36934:	00002174 43415254 53415f45 54524553     t!..TRACE_ASSERT
   36944:	5478203a 65636172 49746553 72505253     : xTraceSetISRPr
   36954:	7265706f 73656974 6e49203a 696c6176     operties: Invali
   36964:	61762064 2065756c 20726f66 646e6168     d value for hand
   36974:	0000656c 43415254 53415f45 54524553     le..TRACE_ASSERT
   36984:	5478203a 65636172 49746553 72505253     : xTraceSetISRPr
   36994:	7265706f 73656974 616e203a 3d20656d     operties: name =
   369a4:	554e203d 00004c4c 61725476 74536563     = NULL..vTraceSt
   369b4:	4965726f 65425253 206e6967 6572202d     oreISRBegin - re
   369c4:	64726f63 62207265 21797375 65655320     corder busy! See
   369d4:	646f6320 6f632065 6e656d6d 00002e74      code comment...
   369e4:	43415254 53415f45 54524553 5476203a     TRACE_ASSERT: vT
   369f4:	65636172 726f7453 52534965 69676542     raceStoreISRBegi
   36a04:	49203a6e 6c61766e 49206469 68205253     n: Invalid ISR h
   36a14:	6c646e61 4e282065 294c4c55 00000000     andle (NULL)....
   36a24:	43415254 53415f45 54524553 5476203a     TRACE_ASSERT: vT
   36a34:	65636172 726f7453 52534965 69676542     raceStoreISRBegi
   36a44:	49203a6e 6c61766e 49206469 68205253     n: Invalid ISR h
   36a54:	6c646e61 3e282065 53494e20 00002952     andle (> NISR)..
   36a64:	206f6f54 796e616d 73656e20 20646574     Too many nested 
   36a74:	65746e69 70757272 00217374 61725476     interrupts!.vTra
   36a84:	74536563 4965726f 6e455253 202d2064     ceStoreISREnd - 
   36a94:	6f636572 72656472 73756220 53202179     recorder busy! S
   36aa4:	63206565 2065646f 6d6d6f63 2e746e65     ee code comment.
   36ab4:	00000000 616d6e55 65686374 61632064     ....Unmatched ca
   36ac4:	74206c6c 5476206f 65636172 726f7453     ll to vTraceStor
   36ad4:	52534965 20646e45 53496e28 74636152     eISREnd (nISRact
   36ae4:	20657669 30203d3d 7865202c 74636570     ive == 0, expect
   36af4:	3e206465 00293020 43415254 53415f45     ed > 0).TRACE_AS
   36b04:	54524553 7277203a 49657469 3a38746e     SERT: writeInt8:
   36b14:	66756220 20726566 4e203d3d 004c4c55      buffer == NULL.
   36b24:	43415254 53415f45 54524553 7277203a     TRACE_ASSERT: wr
   36b34:	49657469 3631746e 7562203a 72656666     iteInt16: buffer
   36b44:	203d3d20 4c4c554e 00000000 43415254      == NULL....TRAC
   36b54:	53415f45 54524553 7277203a 49657469     E_ASSERT: writeI
   36b64:	3233746e 7562203a 72656666 203d3d20     nt32: buffer == 
   36b74:	4c4c554e 00000000 61725476 72506563     NULL....vTracePr
   36b84:	46746e69 54202d20 6d206f6f 20796e61     intF - Too many 
   36b94:	75677261 746e656d 6d202c73 31207861     arguments, max 1
   36ba4:	6c612035 65776f6c 00002164 61725476     5 allowed!..vTra
   36bb4:	72506563 46746e69 54202d20 6c206f6f     cePrintF - Too l
   36bc4:	65677261 67726120 6e656d75 202c7374     arge arguments, 
   36bd4:	2078616d 62203233 20657479 6f6c6c61     max 32 byte allo
   36be4:	21646577 00000000 43415254 53415f45     wed!....TRACE_AS
   36bf4:	54524553 5476203a 65636172 69725056     SERT: vTraceVPri
   36c04:	3a46746e 726f6620 5374616d 3d207274     ntF: formatStr =
   36c14:	554e203d 00004c4c 43415254 53415f45     = NULL..TRACE_AS
   36c24:	54524553 5478203a 65636172 69676552     SERT: xTraceRegi
   36c34:	72657473 69727453 203a676e 6562616c     sterString: labe
   36c44:	3d3d206c 4c554e20 0000004c 43415254     l == NULL...TRAC
   36c54:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   36c64:	74536563 5465726f 526b7361 79646165     ceStoreTaskReady
   36c74:	6e49203a 696c6176 61762064 2065756c     : Invalid value 
   36c84:	20726f66 646e6168 0000656c 6f636552     for handle..Reco
   36c94:	72656472 73756220 202d2079 68676968     rder busy - high
   36ca4:	69727020 7469726f 53492079 73752052      priority ISR us
   36cb4:	20676e69 63737973 3f6c6c61 29312820     ing syscall? (1)
   36cc4:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   36cd4:	7270203a 61725476 74536563 4c65726f     : prvTraceStoreL
   36ce4:	6f50776f 3a726577 766e4920 64696c61     owPower: Invalid
   36cf4:	616c6620 61762067 0065756c 43415254      flag value.TRAC
   36d04:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   36d14:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   36d24:	65203a6c 65646f63 203d3e20 46467830     l: ecode >= 0xFF
   36d34:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   36d44:	7270203a 61725476 74536563 4b65726f     : prvTraceStoreK
   36d54:	656e7265 6c61436c 6f203a6c 63656a62     ernelCall: objec
   36d64:	616c4374 3e207373 5254203d 5f454341     tClass >= TRACE_
   36d74:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   36d84:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   36d94:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   36da4:	49203a6c 6c61766e 76206469 65756c61     l: Invalid value
   36db4:	726f6620 6a626f20 4e746365 65626d75      for objectNumbe
   36dc4:	00000072 6f636552 72656472 73756220     r...Recorder bus
   36dd4:	202d2079 68676968 69727020 7469726f     y - high priorit
   36de4:	53492079 73752052 20676e69 63737973     y ISR using sysc
   36df4:	3f6c6c61 29322820 00000000 43415254     all? (2)....TRAC
   36e04:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   36e14:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   36e24:	7469576c 72615068 203a6d61 63747665     lWithParam: evtc
   36e34:	2065646f 30203d3e 00464678 43415254     ode >= 0xFF.TRAC
   36e44:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   36e54:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   36e64:	7469576c 72615068 203a6d61 656a626f     lWithParam: obje
   36e74:	6c437463 20737361 54203d3e 45434152     ctClass >= TRACE
   36e84:	4c434e5f 45535341 00000053 43415254     _NCLASSES...TRAC
   36e94:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   36ea4:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   36eb4:	7469576c 72615068 203a6d61 61766e49     lWithParam: Inva
   36ec4:	2064696c 756c6176 6f662065 626f2072     lid value for ob
   36ed4:	7463656a 626d754e 00007265 6f636552     jectNumber..Reco
   36ee4:	72656472 73756220 202d2079 68676968     rder busy - high
   36ef4:	69727020 7469726f 53492079 73752052      priority ISR us
   36f04:	20676e69 63737973 3f6c6c61 29332820     ing syscall? (3)
   36f14:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   36f24:	7270203a 61725476 65476563 72615074     : prvTraceGetPar
   36f34:	203a6d61 61766e49 2064696c 756c6176     am: Invalid valu
   36f44:	6f662065 61702072 5f6d6172 0078616d     e for param_max.
   36f54:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   36f64:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   36f74:	6c61436c 7469576c 6d754e68 63697265     lCallWithNumeric
   36f84:	61726150 6c6e4f6d 49203a79 6c61766e     ParamOnly: Inval
   36f94:	76206469 65756c61 726f6620 74766520     id value for evt
   36fa4:	65646f63 00000000 6f636552 72656472     code....Recorder
   36fb4:	73756220 202d2079 68676968 69727020      busy - high pri
   36fc4:	7469726f 53492079 73752052 20676e69     ority ISR using 
   36fd4:	63737973 3f6c6c61 29342820 00000000     syscall? (4)....
   36fe4:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   36ff4:	61725476 74536563 5465726f 736b7361     vTraceStoreTasks
   37004:	63746977 49203a68 6c61766e 76206469     witch: Invalid v
   37014:	65756c61 726f6620 73617420 61685f6b     alue for task_ha
   37024:	656c646e 00000000 43415254 53415f45     ndle....TRACE_AS
   37034:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   37044:	4f65726f 63656a62 6d614e74 436e4f65     oreObjectNameOnC
   37054:	65736f6c 6e657645 6f203a74 63656a62     loseEvent: objec
   37064:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   37074:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   37084:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   37094:	74536563 4f65726f 63656a62 6d614e74     ceStoreObjectNam
   370a4:	436e4f65 65736f6c 6e657645 49203a74     eOnCloseEvent: I
   370b4:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   370c4:	6e616820 00656c64 43415254 53415f45      handle.TRACE_AS
   370d4:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   370e4:	4f65726f 63656a62 6f725074 74726570     oreObjectPropert
   370f4:	4f736569 6f6c436e 76456573 3a746e65     iesOnCloseEvent:
   37104:	6a626f20 63746365 7373616c 203d3e20      objectclass >= 
   37114:	43415254 434e5f45 5353414c 00005345     TRACE_NCLASSES..
   37124:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   37134:	61725476 74536563 4f65726f 63656a62     vTraceStoreObjec
   37144:	6f725074 74726570 4f736569 6f6c436e     tPropertiesOnClo
   37154:	76456573 3a746e65 766e4920 64696c61     seEvent: Invalid
   37164:	6c617620 66206575 6820726f 6c646e61      value for handl
   37174:	00000065 43415254 53415f45 54524553     e...TRACE_ASSERT
   37184:	7270203a 61725476 65536563 69725074     : prvTraceSetPri
   37194:	7469726f 6f725079 74726570 6f203a79     orityProperty: o
   371a4:	63656a62 616c6374 3e207373 5254203d     bjectclass >= TR
   371b4:	5f454341 414c434e 53455353 00000000     ACE_NCLASSES....
   371c4:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   371d4:	61725476 65536563 69725074 7469726f     vTraceSetPriorit
   371e4:	6f725079 74726570 49203a79 6c61766e     yProperty: Inval
   371f4:	76206469 65756c61 726f6620 00646920     id value for id.
   37204:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   37214:	61725476 65476563 69725074 7469726f     vTraceGetPriorit
   37224:	6f725079 74726570 6f203a79 63656a62     yProperty: objec
   37234:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   37244:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   37254:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   37264:	65476563 69725074 7469726f 6f725079     ceGetPriorityPro
   37274:	74726570 49203a79 6c61766e 76206469     perty: Invalid v
   37284:	65756c61 726f6620 00646920 43415254     alue for id.TRAC
   37294:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   372a4:	65536563 6a624f74 53746365 65746174     ceSetObjectState
   372b4:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   372c4:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   372d4:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   372e4:	61725476 65536563 6a624f74 53746365     vTraceSetObjectS
   372f4:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   37304:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   37314:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   37324:	65476563 6a624f74 53746365 65746174     ceGetObjectState
   37334:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   37344:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   37354:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   37364:	61725476 65476563 6a624f74 53746365     vTraceGetObjectS
   37374:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   37384:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   37394:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   373a4:	65536563 73615474 736e496b 636e6174     ceSetTaskInstanc
   373b4:	6e694665 65687369 49203a64 6c61766e     eFinished: Inval
   373c4:	76206469 65756c61 726f6620 6e616820     id value for han
   373d4:	00656c64 63617254 65522065 64726f63     dle.Trace Record
   373e4:	44207265 006f6d65 65747441 2074706d     er Demo.Attempt 
   373f4:	69206f74 7865646e 74756f20 65646973     to index outside
   37404:	65766520 6220746e 65666675 00002172      event buffer!..
   37414:	43415254 53415f45 54524553 6975203a     TRACE_ASSERT: ui
   37424:	65646e49 4f664f78 63656a62 49203a74     IndexOfObject: I
   37434:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   37444:	6a626f20 63746365 7373616c 00000000      objectclass....
   37454:	43415254 53415f45 54524553 6975203a     TRACE_ASSERT: ui
   37464:	65646e49 4f664f78 63656a62 49203a74     IndexOfObject: I
   37474:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   37484:	6a626f20 68746365 6c646e61 00000065      objecthandle...
   37494:	656a624f 74207463 656c6261 6f6f6c20     Object table loo
   374a4:	2070756b 68746977 766e6920 64696c61     kup with invalid
   374b4:	6a626f20 20746365 646e6168 6f20656c      object handle o
   374c4:	626f2072 7463656a 616c6320 00217373     r object class!.
   374d4:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   374e4:	61725476 65476563 6a624f74 48746365     vTraceGetObjectH
   374f4:	6c646e61 49203a65 6c61766e 76206469     andle: Invalid v
   37504:	65756c61 726f6620 6a626f20 63746365     alue for objectc
   37514:	7373616c 00000000 43415254 53415f45     lass....TRACE_AS
   37524:	54524553 7270203a 61725476 72466563     SERT: prvTraceFr
   37534:	624f6565 7463656a 646e6148 203a656c     eeObjectHandle: 
   37544:	61766e49 2064696c 756c6176 6f662065     Invalid value fo
   37554:	626f2072 7463656a 73616c63 00000073     r objectclass...
   37564:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   37574:	61725476 72466563 624f6565 7463656a     vTraceFreeObject
   37584:	646e6148 203a656c 61766e49 2064696c     Handle: Invalid 
   37594:	756c6176 6f662065 61682072 656c646e     value for handle
   375a4:	00000000 65747441 2074706d 66206f74     ....Attempt to f
   375b4:	20656572 65726f6d 6e616820 73656c64     ree more handles
   375c4:	61687420 6c61206e 61636f6c 21646574      than allocated!
   375d4:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   375e4:	7270203a 61725476 65536563 6a624f74     : prvTraceSetObj
   375f4:	4e746365 3a656d61 6d616e20 3d3d2065     ectName: name ==
   37604:	4c554e20 0000004c 656c6c49 206c6167      NULL...Illegal 
   37614:	656a626f 63207463 7373616c 206e6920     object class in 
   37624:	54767270 65636172 4f746553 63656a62     prvTraceSetObjec
   37634:	6d614e74 00000065 656c6c49 206c6167     tName...Illegal 
   37644:	646e6168 2820656c 69202930 7270206e     handle (0) in pr
   37654:	61725476 65536563 6a624f74 4e746365     vTraceSetObjectN
   37664:	2e656d61 00000000 43415254 53415f45     ame.....TRACE_AS
   37674:	54524553 7270203a 61725476 704f6563     SERT: prvTraceOp
   37684:	79536e65 6c6f626d 616e203a 3d20656d     enSymbol: name =
   37694:	554e203d 00004c4c 43415254 53415f45     = NULL..TRACE_AS
   376a4:	54524553 7270203a 65684376 61446b63     SERT: prvCheckDa
   376b4:	6f546174 764f6542 72777265 65747469     taToBeOverwritte
   376c4:	726f466e 746c754d 746e4569 76457972     nForMultiEntryEv
   376d4:	73746e65 6f6e203a 746e4566 73656972     ents: nofEntries
   376e4:	68436f54 206b6365 30203d3d 00000000     ToCheck == 0....
   376f4:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   37704:	61725476 65476563 53544474 6e49203a     vTraceGetDTS: In
   37714:	696c6176 61762064 2065756c 20726f66     valid value for 
   37724:	61726170 616d5f6d 53544478 00000000     param_maxDTS....
   37734:	20646142 61726170 616d5f6d 53544478     Bad param_maxDTS
   37744:	206e6920 54767270 65636172 44746547      in prvTraceGetD
   37754:	00005354 43415254 53415f45 54524553     TS..TRACE_ASSERT
   37764:	7270203a 61725476 6f4c6563 70756b6f     : prvTraceLookup
   37774:	626d7953 61546c6f 45656c62 7972746e     SymbolTableEntry
   37784:	616e203a 3d20656d 554e203d 00004c4c     : name == NULL..
   37794:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   377a4:	61725476 6f4c6563 70756b6f 626d7953     vTraceLookupSymb
   377b4:	61546c6f 45656c62 7972746e 656c203a     olTableEntry: le
   377c4:	3d3d206e 00003020 43415254 53415f45     n == 0..TRACE_AS
   377d4:	54524553 7270203a 61725476 72436563     SERT: prvTraceCr
   377e4:	65746165 626d7953 61546c6f 45656c62     eateSymbolTableE
   377f4:	7972746e 616e203a 3d20656d 554e203d     ntry: name == NU
   37804:	00004c4c 43415254 53415f45 54524553     LL..TRACE_ASSERT
   37814:	7270203a 61725476 72436563 65746165     : prvTraceCreate
   37824:	626d7953 61546c6f 45656c62 7972746e     SymbolTableEntry
   37834:	656c203a 3d3d206e 00003020 626d7953     : len == 0..Symb
   37844:	74206c6f 656c6261 6c756620 49202e6c     ol table full. I
   37854:	6572636e 20657361 5f435254 5f474643     ncrease TRC_CFG_
   37864:	424d5953 545f4c4f 454c4241 5a49535f     SYMBOL_TABLE_SIZ
   37874:	6e692045 63727420 666e6f43 682e6769     E in trcConfig.h
   37884:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   37894:	7270203a 61725476 65476563 65684374     : prvTraceGetChe
   378a4:	75736b63 70203a6d 656d616e 203d3d20     cksum: pname == 
   378b4:	4c4c554e 00000000 43415254 53415f45     NULL....TRACE_AS
   378c4:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   378d4:	65684374 75736b63 70203a6d 20637263     tChecksum: pcrc 
   378e4:	4e203d3d 004c4c55 43415254 53415f45     == NULL.TRACE_AS
   378f4:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   37904:	65684374 75736b63 70203a6d 676e656c     tChecksum: pleng
   37914:	3d206874 554e203d 00004c4c 454c4449     th == NULL..IDLE
   37924:	00000000 20726d54 00637653 0001cbd8     ....Tmr Svc.....
   37934:	0001cbd8 0001cbd8 0001cc66 0001cc30     ........f...0...
   37944:	0001cc5a 0001cbd8 0001cbd8 0001cc66     Z...........f...
   37954:	0001cc30                                0...

00037958 <sd_mmc_trans_units>:
   37958:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00037974 <sd_trans_multipliers>:
   37974:	00000000 0000000a 0000000c 0000000d     ................
   37984:	0000000f 00000014 00000019 0000001e     ................
   37994:	00000023 00000028 0000002d 00000032     #...(...-...2...
   379a4:	00000037 0000003c 00000046 00000050     7...<...F...P...

000379b4 <mmc_trans_multipliers>:
   379b4:	00000000 0000000a 0000000c 0000000d     ................
   379c4:	0000000f 00000014 0000001a 0000001e     ................
   379d4:	00000023 00000028 0000002d 00000034     #...(...-...4...
   379e4:	00000037 0000003c 00000046 00000050     7...<...F...P...
   379f4:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   37a04:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   37a14:	6320746c 000a646d 0000000d              lt cmd......

00037a20 <__FUNCTION__.17099>:
   37a20:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   37a30:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   37a40:	20676e69 6e776f64 0a2e2e2e 00000000     ing down........
   37a50:	0000000d 50504128 52452829 255b2952     ....(APP)(ERR)[%
   37a60:	255b5d73 00005d64 46494828 69614629     s][%d]..(HIF)Fai
   37a70:	6f74206c 6b617720 74207075 63206568     l to wakup the c
   37a80:	0a706968 00000000 66696828 49572029     hip.....(hif) WI
   37a90:	485f4946 5f54534f 5f564352 4c525443     FI_HOST_RCV_CTRL
   37aa0:	6220315f 66207375 0a6c6961 00000000     _1 bus fail.....
   37ab0:	66696828 64612029 73657264 75622073     (hif) address bu
   37ac0:	61662073 000a6c69 66696828 6f432029     s fail..(hif) Co
   37ad0:	70757272 20646574 6b636170 53207465     rrupted packet S
   37ae0:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
   37af0:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
   37b00:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
   37b10:	6361626c 7369206b 746f6e20 67657220     lback is not reg
   37b20:	65747369 0a646572 00000000 6b6f6353     istered.....Scok
   37b30:	63207465 626c6c61 206b6361 6e207369     et callback is n
   37b40:	7220746f 73696765 65726574 00000a64     ot registered...
   37b50:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
   37b60:	20746f6e 69676572 72657473 000a6465     not registered..
   37b70:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
   37b80:	6e207369 7220746f 73696765 65726574     is not registere
   37b90:	00000a64 6d676953 61632061 61626c6c     d...Sigma callba
   37ba0:	69206b63 6f6e2073 65722074 74736967     ck is not regist
   37bb0:	64657265 0000000a 66696828 6e692029     ered....(hif) in
   37bc0:	696c6176 72672064 2070756f 000a4449     valid group ID..
   37bd0:	66696828 6f682029 61207473 64207070     (hif) host app d
   37be0:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
   37bf0:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
   37c00:	72572029 20676e6f 657a6953 0000000a     ) Wrong Size....
   37c10:	66696828 61462029 2065736c 65746e69     (hif) False inte
   37c20:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
   37c30:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
   37c40:	7265746e 74707572 67657220 0000000a     nterrupt reg....
   37c50:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
   37c60:	656c646e 746e6920 75727265 25207470     ndle interrupt %
   37c70:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
   37c80:	66696820 6365725f 65766965 6e49203a      hif_receive: In
   37c90:	696c6176 72612064 656d7567 000a746e     valid argument..
   37ca0:	20505041 75716552 65747365 69532064     APP Requested Si
   37cb0:	6920657a 616c2073 72656772 61687420     ze is larger tha
   37cc0:	6874206e 65722065 65766963 75622064     n the recived bu
   37cd0:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
   37ce0:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
   37cf0:	65747365 64412064 73657264 65622073     ested Address be
   37d00:	646e6f79 65687420 63657220 64657669     yond the recived
   37d10:	66756220 20726566 72646461 20737365      buffer address 
   37d20:	20646e61 676e656c 000a6874 20705247     and length..GRp 
   37d30:	6425203f 0000000a 00020d78 00020d48     ? %d....x...H...
   37d40:	00020d40 00020d58 00020d50 00020d70     @...X...P...p...
   37d50:	00020d60 00020d68                       `...h...

00037d58 <__FUNCTION__.17967>:
   37d58:	5f666968 646e6573 00000000              hif_send....

00037d64 <__FUNCTION__.17977>:
   37d64:	5f666968 00727369                       hif_isr.

00037d6c <__FUNCTION__.17986>:
   37d6c:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00037d7c <__FUNCTION__.17998>:
   37d7c:	5f666968 65636572 00657669              hif_receive.

00037d88 <__FUNCTION__.18014>:
   37d88:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   37d98:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   37da8:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   37db8:	75252e75 2075252e 000a2022 0000000d     u.%u.%u " ......
   37dc8:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   37dd8:	00005d64 20514552 20746f4e 69666564     d]..REQ Not defi
   37de8:	2064656e 000a6425 41564e49 2044494c     ned %d..INVALID 
   37df8:	4e494f50 0a524554 00000000 41564e49     POINTER.....INVA
   37e08:	2044494c 44495353 0000000a 41564e49     LID SSID....INVA
   37e18:	2044494c 000a4843 41564e49 2044494c     LID CH..INVALID 
   37e28:	50434844 52455320 20524556 000a5049     DHCP SERVER IP..
   37e38:	41564e49 2044494c 2059454b 45444e49     INVALID KEY INDE
   37e48:	00000a58 41564e49 2044494c 2059454b     X...INVALID KEY 
   37e58:	49525453 5320474e 0a455a49 00000000     STRING SIZE.....
   37e68:	41564e49 2044494c 2059454b 455a4953     INVALID KEY SIZE
   37e78:	0000000a 41564e49 2044494c 20415057     ....INVALID WPA 
   37e88:	2059454b 455a4953 0000000a 41564e49     KEY SIZE....INVA
   37e98:	2044494c 48545541 49544e45 49544143     LID AUTHENTICATI
   37ea8:	4d204e4f 0a45444f 00000000 41564e49     ON MODE.....INVA
   37eb8:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   37ec8:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
   37ed8:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
   37ee8:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
   37ef8:	6f206f4e 72702066 2065626f 75716572     No of probe requ
   37f08:	73747365 72657020 61637320 6c73206e     ests per scan sl
   37f18:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
   37f28:	49535352 72687420 6f687365 2520646c     RSSI threshold %
   37f38:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
   37f48:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   37f58:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   37f68:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   37f78:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   37f88:	6e694d20 69726420 20726576 20726576      Min driver ver 
   37f98:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   37fa8:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   37fb8:	0000000a 303a3232 38313a30 00000000     ....22:00:18....
   37fc8:	2079614d 32203320 00333230 76697244     May  3 2023.Driv
   37fd8:	62207265 746c6975 20746120 25097325     er built at %s.%
   37fe8:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   37ff8:	7277616d 65562065 6f697372 00000a6e     mawre Version...
   38008:	2079654b 6e207369 7620746f 64696c61     Key is not valid
   38018:	0000000a 61766e49 2064696c 0a79654b     ....Invalid Key.
   38028:	00000000 44495353 4e454c20 564e4920     ....SSID LEN INV
   38038:	44494c41 0000000a 49204843 4c41564e     ALID....CH INVAL
   38048:	000a4449 61766e49 2064696c 20706557     ID..Invalid Wep 
   38058:	2079656b 65646e69 64252078 0000000a     key index %d....
   38068:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
   38078:	676e656c 25206874 00000a64 6f636e49     length %d...Inco
   38088:	63657272 53502074 656b204b 656c2079     rrect PSK key le
   38098:	6874676e 0000000a 65646e75 656e6966     ngth....undefine
   380a8:	65732064 79742063 000a6570 5f53505f     d sec type.._PS_
   380b8:	56524553 205f5245 6e207369 6420746f     SERVER_ is not d
   380c8:	6e696665 000a6465 7473694c 63206e65     efined..Listen c
   380d8:	6e6e6168 73206c65 6c756f68 6e6f2064     hannel should on
   380e8:	6220796c 324d2065 49575f4d 435f4946     ly be M2M_WIFI_C
   380f8:	2f315f48 31312f36 00000a20 45574f50     H_1/6/11 ...POWE
   38108:	41532052 25204556 00000a64 41564e49     R SAVE %d...INVA
   38118:	2044494c 414d4f44 4e204e49 0a454d41     LID DOMAIN NAME.
   38128:	00000000 474e5250 66754220 20726566     ....PRNG Buffer 
   38138:	65637865 64656465 78616d20 6d756d69     exceeded maximum
   38148:	7a697320 64252065 20726f20 4c4c554e      size %d or NULL
   38158:	66754220 0a726566 00000000               Buffer.....

00038164 <__FUNCTION__.17949>:
   38164:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00038170 <__FUNCTION__.17978>:
   38170:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00038180 <__FUNCTION__.18009>:
   38180:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   38190:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   381a0:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   381b0:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   381c0:	0000000d 6c696146 74206465 6177206f     ....Failed to wa
   381d0:	2070756b 20656874 70696863 0000000a     kup the chip....
   381e0:	50504128 4e492829 00294f46 76697244     (APP)(INFO).Driv
   381f0:	65567265 666e4972 30203a6f 38302578     erVerInfo: 0x%08
   38200:	000a786c 6c696166 74206465 6564206f     lx..failed to de
   38210:	696e692d 6c616974 0a657a69 00000000     -initialize.....

00038220 <__FUNCTION__.17806>:
   38220:	70696863 6b61775f 00000065              chip_wake...

0003822c <__FUNCTION__.17855>:
   3822c:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   3823c:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   3824c:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   3825c:	6e69206c 62207469 000a7375 0000000d     l init bus......
   3826c:	50504128 4e492829 00294f46 70696843     (APP)(INFO).Chip
   3827c:	20444920 0a786c25 00000000 6c696166      ID %lx.....fail
   3828c:	74206465 6e65206f 656c6261 746e6920     ed to enable int
   3829c:	75727265 2e737470 00000a2e 696d6e5b     errupts.....[nmi
   382ac:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
   382bc:	2074696e 6c696166 0000000a 696d6e5b     nit fail....[nmi
   382cc:	6f747320 203a5d70 20495053 73616c66      stop]: SPI flas
   382dc:	69642068 6c626173 61662065 000a6c69     h disable fail..
   382ec:	696d6e5b 6f747320 203a5d70 6c696166     [nmi stop]: fail
   382fc:	696e6920 75622074 00000a73               init bus...

00038308 <__FUNCTION__.17853>:
   38308:	645f6d6e 695f7672 0074696e              nm_drv_init.

00038314 <__FUNCTION__.17860>:
   38314:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

00038324 <crc7_syndrome_table>:
   38324:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   38334:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   38344:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   38354:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   38364:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   38374:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   38384:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   38394:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   383a4:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   383b4:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   383c4:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   383d4:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   383e4:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   383f4:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   38404:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   38414:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   38424:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   38434:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   38444:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   38454:	73756220 72726520 2e2e726f 00000a2e      bus error......
   38464:	0000000d 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   38474:	656c6961 75622064 72652073 2e726f72     ailed bus error.
   38484:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   38494:	656c6961 61642064 72206174 6f707365     ailed data respo
   384a4:	2065736e 64616572 7825202c 20782520     nse read, %x %x 
   384b4:	000a7825 696d6e5b 69707320 46203a5d     %x..[nmi spi]: F
   384c4:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   384d4:	72206573 2c646165 73756220 72726520     se read, bus err
   384e4:	2e2e726f 00000a2e 696d6e5b 69707320     or......[nmi spi
   384f4:	73203a5d 62206970 65666675 69732072     ]: spi buffer si
   38504:	7420657a 73206f6f 6c6c616d 64252820     ze too small (%d
   38514:	25282029 000a2964 696d6e5b 69707320     ) (%d)..[nmi spi
   38524:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   38534:	6e6f7073 202c6573 20646d63 32302528     sponse, cmd (%02
   38544:	202c2978 70736572 30252820 0a297832     x), resp (%02x).
   38554:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   38564:	656c6961 6d632064 74732064 20657461     ailed cmd state 
   38574:	70736572 65736e6f 61747320 28206574     response state (
   38584:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   38594:	45203a5d 726f7272 6164202c 72206174     ]: Error, data r
   385a4:	20646165 70736572 65736e6f 30252820     ead response (%0
   385b4:	0a297832 00000000 696d6e5b 69707320     2x).....[nmi spi
   385c4:	62203a5d 65666675 766f2072 75727265     ]: buffer overru
   385d4:	6877206e 72206e65 69646165 6420676e     n when reading d
   385e4:	2e617461 0000000a 696d6e5b 69707320     ata.....[nmi spi
   385f4:	62203a5d 65666675 766f2072 75727265     ]: buffer overru
   38604:	6877206e 72206e65 69646165 6320676e     n when reading c
   38614:	0a2e6372 00000000 696d6e5b 69707320     rc......[nmi spi
   38624:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   38634:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   38644:	726f7272 0a2e2e2e 00000000 696d6e5b     rror........[nmi
   38654:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   38664:	62206174 6b636f6c 63726320 61657220     ta block crc rea
   38674:	62202c64 65207375 726f7272 0a2e2e2e     d, bus error....
   38684:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   38694:	656c6961 61642064 72206174 6f707365     ailed data respo
   386a4:	2065736e 64616572 7562202c 72652073     nse read, bus er
   386b4:	2e726f72 000a2e2e 696d6e5b 69707320     ror.....[nmi spi
   386c4:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   386d4:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   386e4:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   386f4:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   38704:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   38714:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
   38724:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   38734:	61642064 62206174 6b636f6c 69727720     d data block wri
   38744:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   38754:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   38764:	656c6961 61642064 62206174 6b636f6c     ailed data block
   38774:	63726320 69727720 202c6574 20737562      crc write, bus 
   38784:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
   38794:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   387a4:	77202c64 65746972 67657220 30252820     d, write reg (%0
   387b4:	2e297838 000a2e2e 65736552 6e612074     8x).....Reset an
   387c4:	65722064 20797274 25206425 2520786c     d retry %d %lx %
   387d4:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   387e4:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   387f4:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
   38804:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   38814:	656c6961 6c622064 206b636f 61746164     ailed block data
   38824:	69727720 2e2e6574 00000a2e 65736552      write......Rese
   38834:	6e612074 65722064 20797274 25206425     t and retry %d %
   38844:	2520786c 00000a64 696d6e5b 69707320     lx %d...[nmi spi
   38854:	46203a5d 656c6961 6d632064 72202c64     ]: Failed cmd, r
   38864:	20646165 20676572 38302528 2e2e2978     ead reg (%08x)..
   38874:	00000a2e 65736552 6e612074 65722064     ....Reset and re
   38884:	20797274 25206425 000a786c 696d6e5b     try %d %lx..[nmi
   38894:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   388a4:	72202c64 20646165 636f6c62 2528206b     d, read block (%
   388b4:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
   388c4:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   388d4:	6e726574 72206c61 20646165 746f7270     ternal read prot
   388e4:	6c6f636f 74697720 52432068 6e6f2043     ocol with CRC on
   388f4:	6572202c 69727974 7720676e 20687469     , retyring with 
   38904:	20435243 2e66666f 000a2e2e 696d6e5b     CRC off.....[nmi
   38914:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   38924:	6e726574 72206c61 20646165 746f7270     ternal read prot
   38934:	6c6f636f 0a2e2e2e 00000000 696d6e5b     ocol........[nmi
   38944:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   38954:	6e726574 77206c61 65746972 6f727020     ternal write pro
   38964:	6f636f74 6572206c 2e2e2e67 0000000a     tocol reg.......
   38974:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
   38984:	20646d63 64616572 69686320 64692070     cmd read chip id
   38994:	0a2e2e2e 00000000 000229a0 000229a0     .........)...)..
   389a4:	00022a30 000228f4 0002293a 0002295c     0*...(..:)..\)..
   389b4:	000229e2 000229e2 00022a9c 000228c8     .)...)...*...(..
   389c4:	00022af6 00022af6 00022af6 00022af6     .*...*...*...*..
   389d4:	0002297e 00022f00 00022f00 00022f88     ~).../.../.../..
   389e4:	00022e64 00022ea6 00022ec4 00022f3e     d...........>/..
   389f4:	00022f3e 00022fea 00022e3c 0002303a     >/.../..<...:0..
   38a04:	0002303a 0002303a 0002303a 00022ee2     :0..:0..:0......

00038a14 <__FUNCTION__.17128>:
   38a14:	5f697073 00646d63                       spi_cmd.

00038a1c <__FUNCTION__.17135>:
   38a1c:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

00038a2c <__FUNCTION__.17144>:
   38a2c:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00038a38 <__FUNCTION__.17177>:
   38a38:	5f697073 5f646d63 706d6f63 6574656c     spi_cmd_complete
   38a48:	00000000                                ....

00038a4c <__FUNCTION__.17223>:
   38a4c:	5f697073 61746164 6972775f 00006574     spi_data_write..

00038a5c <__FUNCTION__.17235>:
   38a5c:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00038a6c <__FUNCTION__.17246>:
   38a6c:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00038a7c <__FUNCTION__.17258>:
   38a7c:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00038a8c <__FUNCTION__.17269>:
   38a8c:	735f6d6e 725f6970 00646165              nm_spi_read.

00038a98 <__FUNCTION__.17290>:
   38a98:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   38aa8:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   38ab8:	6e657272 253c2074 000a3e64 0000000d     rrent <%d>......
   38ac8:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
   38ad8:	4449206e 25203d20 000a0d64 6b636f53     n ID = %d...Sock
   38ae8:	206f7420 656c6564 3c206574 0a3e6425      to delete <%d>.
   38af8:	00000000 50504128 52452829 255b2952     ....(APP)(ERR)[%
   38b08:	255b5d73 00005d64 20494e53 65637845     s][%d]..SNI Exce
   38b18:	20736465 2078614d 676e654c 000a6874     eds Max Length..
   38b28:	6e6b6e55 206e776f 204c5353 6b636f53     Unknown SSL Sock
   38b38:	4f207465 6f697470 6425206e 0000000a     et Option %d....
   38b48:	20746f4e 204c5353 6b636f53 000a7465     Not SSL Socket..
   38b58:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
   38b68:	22302074 00000000                       t 0"....

00038b70 <lun_desc>:
   38b70:	0001e5fd 0001e655 0001e6a1 0001e6ed     ....U...........
   38b80:	0001e71d 0001e7a1 0001e831 00038b58     ........1...X...
   38b90:	42000800 42000c00 42001000 42001400     ...B...B...B...B
   38ba0:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
   38bb0:	0002891e 00028998 00028998 0002893c     ............<...
   38bc0:	00028936 00028942 00028924 00028948     6...B...$...H...
   38bd0:	0002897e 00028b80 00028bd0 00028bd0     ~...............
   38be0:	00028bcc 00028b72 00028b92 00028b62     ....r.......b...
   38bf0:	00028ba4 00028bb6 00028c1e 00028c4c     ............L...
   38c00:	00028c4c 00028c48 00028c18 00028c24     L...H.......$...
   38c10:	00028c12 00028c2a 00028c30              ....*...0...

00038c1c <tcc_modules>:
   38c1c:	42002000 42002400 42002800              . .B.$.B.(.B

00038c28 <_tcc_gclk_ids>:
   38c28:	001b1a1a                                ....

00038c2c <_tcc_apbcmasks>:
   38c2c:	00000100 00000200 00000400              ............

00038c38 <_tcc_maxs>:
   38c38:	00ffffff 00ffffff 0000ffff              ............

00038c44 <_tcc_cc_nums>:
   38c44:	00020204                                ....

00038c48 <_tcc_ow_nums>:
   38c48:	00020408                                ....

00038c4c <_tcc_intflag>:
   38c4c:	00000001 00000002 00000004 00000008     ................
   38c5c:	00001000 00002000 00004000 00008000     ..... ...@......
   38c6c:	00010000 00020000 00040000 00080000     ................

00038c7c <LfnOfs>:
   38c7c:	07050301 12100e09 1c181614 0000001e     ................
   38c8c:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   38c9c:	00005d5b 4d90feeb 534f4453 00302e35     [].....MSDOS5.0.
   38cac:	4e204f4e 20454d41 46202020 32335441     NO NAME    FAT32
   38cbc:	00202020 4e204f4e 20454d41 46202020        .NO NAME    F
   38ccc:	20205441 00202020                       AT     .

00038cd4 <excvt.4558>:
   38cd4:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   38ce4:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   38cf4:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   38d04:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   38d14:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   38d24:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   38d34:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   38d44:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

00038d54 <Tbl>:
   38d54:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   38d64:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   38d74:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   38d84:	00d600ff 00f800dc 00d800a3 019200d7     ................
   38d94:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   38da4:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   38db4:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   38dc4:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   38dd4:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   38de4:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   38df4:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   38e04:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   38e14:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   38e24:	00da00de 00d900db 00dd00fd 00b400af     ................
   38e34:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   38e44:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

00038e54 <tbl_lower.4308>:
   38e54:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   38e64:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   38e74:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   38e84:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   38e94:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   38ea4:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   38eb4:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   38ec4:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   38ed4:	01050103 01090107 010d010b 0111010f     ................
   38ee4:	01150113 01190117 011d011b 0121011f     ..............!.
   38ef4:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   38f04:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   38f14:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   38f24:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   38f34:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   38f44:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   38f54:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   38f64:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   38f74:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   38f84:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   38f94:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   38fa4:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   38fb4:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   38fc4:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   38fd4:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   38fe4:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   38ff4:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   39004:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   39014:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   39024:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

00039034 <tbl_upper.4309>:
   39034:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   39044:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   39054:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   39064:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   39074:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   39084:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   39094:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   390a4:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   390b4:	01040102 01080106 010c010a 0110010e     ................
   390c4:	01140112 01180116 011c011a 0120011e     .............. .
   390d4:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   390e4:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   390f4:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   39104:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   39114:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   39124:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   39134:	03940393 03960395 03980397 039a0399     ................
   39144:	039c039b 039e039d 03a0039f 03a303a1     ................
   39154:	03a503a4 03a703a6 03a903a8 041003aa     ................
   39164:	04120411 04140413 04160415 04180417     ................
   39174:	041a0419 041c041b 041e041d 0420041f     .............. .
   39184:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   39194:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   391a4:	04030402 04050404 04070406 04090408     ................
   391b4:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   391c4:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   391d4:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   391e4:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   391f4:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   39204:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   39214:	0002df8a 0002df8a 0002df8a 0002de18     ................
   39224:	0002df8a 0002df02 0002df8a 0002df8a     ................
   39234:	0002df8a 0002df8a 0002df8a 0002df8a     ................
   39244:	0002df8a 0002df7c 4354514d 00000000     ....|...MQTC....
   39254:	00000004 00000000 00000000 00000000     ................
   39264:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   392a4:	4354514d 00000000 00000004 00000000     MQTC............
	...
   392bc:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   392fc:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
   3930c:	656d7461 2e312f6c 00322e30 70747468     atmel/1.0.2.http
   3931c:	002f2f3a 70747468 2f2f3a73 00000000     ://.https://....
   3932c:	20544547 00000000 54534f50 00000020     GET ....POST ...
   3933c:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   3934c:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   3935c:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   3936c:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   3937c:	00000a0d 74736f48 0000203a 6e6e6f43     ....Host: ..Conn
   3938c:	69746365 203a6e6f 7065654b 696c412d     ection: Keep-Ali
   3939c:	0a0d6576 00000000 65636341 452d7470     ve......Accept-E
   393ac:	646f636e 3a676e69 000a0d20 65636341     ncoding: ...Acce
   393bc:	432d7470 73726168 203a7465 2d667475     pt-Charset: utf-
   393cc:	000a0d38 6e617254 72656673 636e452d     8...Transfer-Enc
   393dc:	6e69646f 63203a67 6b6e7568 0a0d6465     oding: chunked..
   393ec:	00000000 00007525 746e6f43 2d746e65     ....%u..Content-
   393fc:	676e654c 203a6874 00000000 33323130     Length: ....0123
   3940c:	37363534 62613938 66656463 6e617254     456789abcdefTran
   3941c:	72656673 636e452d 6e69646f 00203a67     sfer-Encoding: .
   3942c:	6e6e6f43 69746365 203a6e6f 00000000     Connection: ....
   3943c:	50545448 0000002f 00000d31 0003007e     HTTP/...1...~...
   3944c:	00030078 00030072 0003006c 00030084     x...r...l.......
   3945c:	00030066 00030084 00030060 0003005a     f.......`...Z...
   3946c:	00030084 00030054 00030054 0003004e     ....T...T...N...
   3947c:	00030048 00030042 42002000 42002400     H...B.... .B.$.B
   3948c:	42002800 0a0d0a0d 2d2d2d2d 4553452d     .(.B....-----ESE
   3949c:	20363135 6e69614d 6f725020 6d617267     516 Main Program
   394ac:	2d2d2d2d 000a0d2d 0a0d0a0d 74696e49     -----.......Init
   394bc:	696c6169 4820657a 2e2e2e57 00000a0d     ialize HW.......
   394cc:	6f727245 6e692072 61697469 697a696c     Error initializi
   394dc:	4920676e 44204332 65766972 0a0d2172     ng I2C Driver!..
   394ec:	00000000 74696e49 696c6169 2064657a     ....Initialized 
   394fc:	20433249 76697244 0d217265 0000000a     I2C Driver!.....
   3950c:	70616548 66656220 2065726f 72617473     Heap before star
   3951c:	676e6974 73617420 203a736b 0a0d6425     ting tasks: %d..
   3952c:	00000000 5f494c43 4b534154 00000000     ....CLI_TASK....
   3953c:	3a525245 494c4320 73617420 6f63206b     ERR: CLI task co
   3954c:	20646c75 20746f6e 69206562 6974696e     uld not be initi
   3955c:	7a696c61 0d216465 0000000a 70616548     alized!.....Heap
   3956c:	74666120 73207265 74726174 20676e69      after starting 
   3957c:	3a494c43 0d642520 0000000a 49464957     CLI: %d.....WIFI
   3958c:	5341545f 0000004b 3a525245 46495720     _TASK...ERR: WIF
   3959c:	61742049 63206b73 646c756f 746f6e20     I task could not
   395ac:	20656220 74696e69 696c6169 2164657a      be initialized!
   395bc:	00000a0d 70616548 74666120 73207265     ....Heap after s
   395cc:	74726174 20676e69 49464957 6425203a     tarting WIFI: %d
   395dc:	00000a0d 52445948 41545f38 00004b53     ....HYDR8_TASK..
   395ec:	3a525245 64794820 74203872 206b7361     ERR: Hydr8 task 
   395fc:	6c756f63 6f6e2064 65622074 696e6920     could not be ini
   3960c:	6c616974 64657a69 000a0d21 70616548     tialized!...Heap
   3961c:	74666120 73207265 74726174 20676e69      after starting 
   3962c:	72647968 25203a38 000a0d64 6f727245     hydr8: %d...Erro
   3963c:	6e6f2072 6d656d20 2079726f 6f6c6c61     r on memory allo
   3964c:	69746163 6f206e6f 5246206e 54524545     cation on FREERT
   3965c:	0d21534f 0000000a 6f727245 6e6f2072     OS!.....Error on
   3966c:	61747320 6f206b63 66726576 20776f6c      stack overflow 
   3967c:	46206e6f 52454552 21534f54 00000a0d     on FREERTOS!....
   3968c:	00033000 00032fe2 00032f9c 00032eba     .0.../.../......
   3969c:	00032f9c 00032fd4 00032f9c 00032eba     ./.../.../......
   396ac:	00032fe2 00032fe2 00032fd4 00032eba     ./.../.../......
   396bc:	00032eb2 00032eb2 00032eb2 00033218     .............2..
   396cc:	00033660 00033520 00033520 0003351c     `6.. 5.. 5...5..
   396dc:	00033638 00033638 0003362a 0003351c     86..86..*6...5..
   396ec:	00033638 0003362a 00033638 0003351c     86..*6..86...5..
   396fc:	00033640 00033640 00033640 00033844     @6..@6..@6..D8..

0003970c <_global_impure_ptr>:
   3970c:	2000011c                                ... 

00039710 <__sf_fake_stderr>:
	...

00039730 <__sf_fake_stdin>:
	...

00039750 <__sf_fake_stdout>:
	...
   39770:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   39780:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   39790:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   397a0:	37363534 62613938 66656463 20200000              456789abcdef.

000397ad <_ctype_>:
   397ad:	20202000 20202020 28282020 20282828     .         ((((( 
   397bd:	20202020 20202020 20202020 20202020                     
   397cd:	10108820 10101010 10101010 10101010      ...............
   397dd:	04040410 04040404 10040404 10101010     ................
   397ed:	41411010 41414141 01010101 01010101     ..AAAAAA........
   397fd:	01010101 01010101 01010101 10101010     ................
   3980d:	42421010 42424242 02020202 02020202     ..BBBBBB........
   3981d:	02020202 02020202 02020202 10101010     ................
   3982d:	00000020 00000000 00000000 00000000      ...............
	...

000398b0 <_init>:
   398b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   398b2:	46c0      	nop			; (mov r8, r8)
   398b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   398b6:	bc08      	pop	{r3}
   398b8:	469e      	mov	lr, r3
   398ba:	4770      	bx	lr

000398bc <__init_array_start>:
   398bc:	000120dd 	.word	0x000120dd

000398c0 <_fini>:
   398c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   398c2:	46c0      	nop			; (mov r8, r8)
   398c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   398c6:	bc08      	pop	{r3}
   398c8:	469e      	mov	lr, r3
   398ca:	4770      	bx	lr

000398cc <__fini_array_start>:
   398cc:	000120b5 	.word	0x000120b5
