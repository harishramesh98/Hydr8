
ESE516 BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d6b0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000d0  20000000  0000d6b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c10  200000d0  0000d780  000200d0  2**2
                  ALLOC
  3 .stack        00002000  20000ce0  0000e390  000200d0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004b4e6  00000000  00000000  00020151  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005cf8  00000000  00000000  0006b637  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005a75  00000000  00000000  0007132f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001060  00000000  00000000  00076da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e80  00000000  00000000  00077e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00020e2a  00000000  00000000  00078c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001863b  00000000  00000000  00099aae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00093caa  00000000  00000000  000b20e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003e4c  00000000  00000000  00145d94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 2c 00 20 85 6c 00 00 7d 6d 00 00 7d 6d 00 00     .,. .l..}m..}m..
	...
      2c:	7d 6d 00 00 00 00 00 00 00 00 00 00 7d 6d 00 00     }m..........}m..
      3c:	e5 01 00 00 7d 6d 00 00 7d 6d 00 00 7d 6d 00 00     ....}m..}m..}m..
      4c:	7d 6d 00 00 7d 6d 00 00 7d 6d 00 00 7d 6d 00 00     }m..}m..}m..}m..
      5c:	7d 6d 00 00 7d 6d 00 00 11 3f 00 00 29 3f 00 00     }m..}m...?..)?..
      6c:	41 3f 00 00 59 3f 00 00 71 3f 00 00 89 3f 00 00     A?..Y?..q?...?..
      7c:	7d 6d 00 00 7d 6d 00 00 7d 6d 00 00 7d 6d 00 00     }m..}m..}m..}m..
      8c:	7d 6d 00 00 7d 6d 00 00 00 00 00 00 00 00 00 00     }m..}m..........
      9c:	7d 6d 00 00 7d 6d 00 00 7d 6d 00 00 7d 6d 00 00     }m..}m..}m..}m..
      ac:	7d 6d 00 00 00 00 00 00                             }m......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000d0 	.word	0x200000d0
      d4:	00000000 	.word	0x00000000
      d8:	0000d6b0 	.word	0x0000d6b0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000d4 	.word	0x200000d4
     108:	0000d6b0 	.word	0x0000d6b0
     10c:	0000d6b0 	.word	0x0000d6b0
     110:	00000000 	.word	0x00000000

00000114 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2b00      	cmp	r3, #0
     120:	d00c      	beq.n	13c <delay_cycles+0x28>
		SysTick->LOAD = n;
     122:	4b08      	ldr	r3, [pc, #32]	; (144 <delay_cycles+0x30>)
     124:	687a      	ldr	r2, [r7, #4]
     126:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     128:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_cycles+0x30>)
     12a:	2200      	movs	r2, #0
     12c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     12e:	46c0      	nop			; (mov r8, r8)
     130:	4b04      	ldr	r3, [pc, #16]	; (144 <delay_cycles+0x30>)
     132:	681a      	ldr	r2, [r3, #0]
     134:	2380      	movs	r3, #128	; 0x80
     136:	025b      	lsls	r3, r3, #9
     138:	4013      	ands	r3, r2
     13a:	d0f9      	beq.n	130 <delay_cycles+0x1c>
		};
	}
}
     13c:	46c0      	nop			; (mov r8, r8)
     13e:	46bd      	mov	sp, r7
     140:	b002      	add	sp, #8
     142:	bd80      	pop	{r7, pc}
     144:	e000e010 	.word	0xe000e010

00000148 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     148:	b580      	push	{r7, lr}
     14a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     14c:	2000      	movs	r0, #0
     14e:	4b0f      	ldr	r3, [pc, #60]	; (18c <delay_init+0x44>)
     150:	4798      	blx	r3
     152:	0002      	movs	r2, r0
     154:	4b0e      	ldr	r3, [pc, #56]	; (190 <delay_init+0x48>)
     156:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     158:	4b0d      	ldr	r3, [pc, #52]	; (190 <delay_init+0x48>)
     15a:	6818      	ldr	r0, [r3, #0]
     15c:	4b0d      	ldr	r3, [pc, #52]	; (194 <delay_init+0x4c>)
     15e:	22fa      	movs	r2, #250	; 0xfa
     160:	0091      	lsls	r1, r2, #2
     162:	4798      	blx	r3
     164:	0003      	movs	r3, r0
     166:	001a      	movs	r2, r3
     168:	4b09      	ldr	r3, [pc, #36]	; (190 <delay_init+0x48>)
     16a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     16c:	4b08      	ldr	r3, [pc, #32]	; (190 <delay_init+0x48>)
     16e:	6818      	ldr	r0, [r3, #0]
     170:	4b08      	ldr	r3, [pc, #32]	; (194 <delay_init+0x4c>)
     172:	22fa      	movs	r2, #250	; 0xfa
     174:	0091      	lsls	r1, r2, #2
     176:	4798      	blx	r3
     178:	0003      	movs	r3, r0
     17a:	001a      	movs	r2, r3
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <delay_init+0x50>)
     17e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     180:	4b06      	ldr	r3, [pc, #24]	; (19c <delay_init+0x54>)
     182:	2205      	movs	r2, #5
     184:	601a      	str	r2, [r3, #0]
}
     186:	46c0      	nop			; (mov r8, r8)
     188:	46bd      	mov	sp, r7
     18a:	bd80      	pop	{r7, pc}
     18c:	00006839 	.word	0x00006839
     190:	20000000 	.word	0x20000000
     194:	0000b8cd 	.word	0x0000b8cd
     198:	20000004 	.word	0x20000004
     19c:	e000e010 	.word	0xe000e010

000001a0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     1a0:	b580      	push	{r7, lr}
     1a2:	b082      	sub	sp, #8
     1a4:	af00      	add	r7, sp, #0
     1a6:	6078      	str	r0, [r7, #4]
	while (n--) {
     1a8:	e004      	b.n	1b4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     1aa:	4b07      	ldr	r3, [pc, #28]	; (1c8 <delay_cycles_ms+0x28>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	0018      	movs	r0, r3
     1b0:	4b06      	ldr	r3, [pc, #24]	; (1cc <delay_cycles_ms+0x2c>)
     1b2:	4798      	blx	r3
	while (n--) {
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	1e5a      	subs	r2, r3, #1
     1b8:	607a      	str	r2, [r7, #4]
     1ba:	2b00      	cmp	r3, #0
     1bc:	d1f5      	bne.n	1aa <delay_cycles_ms+0xa>
	}
}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	46bd      	mov	sp, r7
     1c2:	b002      	add	sp, #8
     1c4:	bd80      	pop	{r7, pc}
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	20000000 	.word	0x20000000
     1cc:	00000115 	.word	0x00000115

000001d0 <GetSystick>:

* @return	Unused (ANSI-C compatibility).
* @note		Bootloader code initiates here.
*****************************************************************************/
uint32_t GetSystick(void)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	af00      	add	r7, sp, #0
	return ul_tickcount;
     1d4:	4b02      	ldr	r3, [pc, #8]	; (1e0 <GetSystick+0x10>)
     1d6:	681b      	ldr	r3, [r3, #0]
}
     1d8:	0018      	movs	r0, r3
     1da:	46bd      	mov	sp, r7
     1dc:	bd80      	pop	{r7, pc}
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	200000ec 	.word	0x200000ec

000001e4 <SysTick_Handler>:
 *
 * Note:
 *
 ******************************************************************************/
void SysTick_Handler(void)
{
     1e4:	b580      	push	{r7, lr}
     1e6:	af00      	add	r7, sp, #0
	
	ul_tickcount++;
     1e8:	4b03      	ldr	r3, [pc, #12]	; (1f8 <SysTick_Handler+0x14>)
     1ea:	681b      	ldr	r3, [r3, #0]
     1ec:	1c5a      	adds	r2, r3, #1
     1ee:	4b02      	ldr	r3, [pc, #8]	; (1f8 <SysTick_Handler+0x14>)
     1f0:	601a      	str	r2, [r3, #0]
}
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	46bd      	mov	sp, r7
     1f6:	bd80      	pop	{r7, pc}
     1f8:	200000ec 	.word	0x200000ec

000001fc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     1fc:	b580      	push	{r7, lr}
     1fe:	b084      	sub	sp, #16
     200:	af00      	add	r7, sp, #0
     202:	0002      	movs	r2, r0
     204:	1dfb      	adds	r3, r7, #7
     206:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     208:	230f      	movs	r3, #15
     20a:	18fb      	adds	r3, r7, r3
     20c:	1dfa      	adds	r2, r7, #7
     20e:	7812      	ldrb	r2, [r2, #0]
     210:	09d2      	lsrs	r2, r2, #7
     212:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     214:	230e      	movs	r3, #14
     216:	18fb      	adds	r3, r7, r3
     218:	1dfa      	adds	r2, r7, #7
     21a:	7812      	ldrb	r2, [r2, #0]
     21c:	0952      	lsrs	r2, r2, #5
     21e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     220:	4b0d      	ldr	r3, [pc, #52]	; (258 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     222:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     224:	230f      	movs	r3, #15
     226:	18fb      	adds	r3, r7, r3
     228:	781b      	ldrb	r3, [r3, #0]
     22a:	2b00      	cmp	r3, #0
     22c:	d10f      	bne.n	24e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     22e:	230f      	movs	r3, #15
     230:	18fb      	adds	r3, r7, r3
     232:	781b      	ldrb	r3, [r3, #0]
     234:	009b      	lsls	r3, r3, #2
     236:	2210      	movs	r2, #16
     238:	4694      	mov	ip, r2
     23a:	44bc      	add	ip, r7
     23c:	4463      	add	r3, ip
     23e:	3b08      	subs	r3, #8
     240:	681a      	ldr	r2, [r3, #0]
     242:	230e      	movs	r3, #14
     244:	18fb      	adds	r3, r7, r3
     246:	781b      	ldrb	r3, [r3, #0]
     248:	01db      	lsls	r3, r3, #7
     24a:	18d3      	adds	r3, r2, r3
     24c:	e000      	b.n	250 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     24e:	2300      	movs	r3, #0
	}
}
     250:	0018      	movs	r0, r3
     252:	46bd      	mov	sp, r7
     254:	b004      	add	sp, #16
     256:	bd80      	pop	{r7, pc}
     258:	41004400 	.word	0x41004400

0000025c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     25c:	b580      	push	{r7, lr}
     25e:	b082      	sub	sp, #8
     260:	af00      	add	r7, sp, #0
     262:	0002      	movs	r2, r0
     264:	1dfb      	adds	r3, r7, #7
     266:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     268:	1dfb      	adds	r3, r7, #7
     26a:	781b      	ldrb	r3, [r3, #0]
     26c:	0018      	movs	r0, r3
     26e:	4b03      	ldr	r3, [pc, #12]	; (27c <port_get_group_from_gpio_pin+0x20>)
     270:	4798      	blx	r3
     272:	0003      	movs	r3, r0
}
     274:	0018      	movs	r0, r3
     276:	46bd      	mov	sp, r7
     278:	b002      	add	sp, #8
     27a:	bd80      	pop	{r7, pc}
     27c:	000001fd 	.word	0x000001fd

00000280 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     280:	b580      	push	{r7, lr}
     282:	b082      	sub	sp, #8
     284:	af00      	add	r7, sp, #0
     286:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     288:	687b      	ldr	r3, [r7, #4]
     28a:	2200      	movs	r2, #0
     28c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     28e:	687b      	ldr	r3, [r7, #4]
     290:	2201      	movs	r2, #1
     292:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     294:	687b      	ldr	r3, [r7, #4]
     296:	2200      	movs	r2, #0
     298:	709a      	strb	r2, [r3, #2]
}
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	46bd      	mov	sp, r7
     29e:	b002      	add	sp, #8
     2a0:	bd80      	pop	{r7, pc}
	...

000002a4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     2a4:	b580      	push	{r7, lr}
     2a6:	b084      	sub	sp, #16
     2a8:	af00      	add	r7, sp, #0
     2aa:	0002      	movs	r2, r0
     2ac:	1dfb      	adds	r3, r7, #7
     2ae:	701a      	strb	r2, [r3, #0]
     2b0:	1dbb      	adds	r3, r7, #6
     2b2:	1c0a      	adds	r2, r1, #0
     2b4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     2b6:	1dfb      	adds	r3, r7, #7
     2b8:	781b      	ldrb	r3, [r3, #0]
     2ba:	0018      	movs	r0, r3
     2bc:	4b0d      	ldr	r3, [pc, #52]	; (2f4 <port_pin_set_output_level+0x50>)
     2be:	4798      	blx	r3
     2c0:	0003      	movs	r3, r0
     2c2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2c4:	1dfb      	adds	r3, r7, #7
     2c6:	781b      	ldrb	r3, [r3, #0]
     2c8:	221f      	movs	r2, #31
     2ca:	4013      	ands	r3, r2
     2cc:	2201      	movs	r2, #1
     2ce:	409a      	lsls	r2, r3
     2d0:	0013      	movs	r3, r2
     2d2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     2d4:	1dbb      	adds	r3, r7, #6
     2d6:	781b      	ldrb	r3, [r3, #0]
     2d8:	2b00      	cmp	r3, #0
     2da:	d003      	beq.n	2e4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     2dc:	68fb      	ldr	r3, [r7, #12]
     2de:	68ba      	ldr	r2, [r7, #8]
     2e0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     2e2:	e002      	b.n	2ea <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     2e4:	68fb      	ldr	r3, [r7, #12]
     2e6:	68ba      	ldr	r2, [r7, #8]
     2e8:	615a      	str	r2, [r3, #20]
}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	46bd      	mov	sp, r7
     2ee:	b004      	add	sp, #16
     2f0:	bd80      	pop	{r7, pc}
     2f2:	46c0      	nop			; (mov r8, r8)
     2f4:	0000025d 	.word	0x0000025d

000002f8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     2f8:	b580      	push	{r7, lr}
     2fa:	b082      	sub	sp, #8
     2fc:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     2fe:	1d3b      	adds	r3, r7, #4
     300:	0018      	movs	r0, r3
     302:	4b0e      	ldr	r3, [pc, #56]	; (33c <system_board_init+0x44>)
     304:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     306:	1d3b      	adds	r3, r7, #4
     308:	2201      	movs	r2, #1
     30a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     30c:	1d3b      	adds	r3, r7, #4
     30e:	0019      	movs	r1, r3
     310:	2017      	movs	r0, #23
     312:	4b0b      	ldr	r3, [pc, #44]	; (340 <system_board_init+0x48>)
     314:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     316:	2101      	movs	r1, #1
     318:	2017      	movs	r0, #23
     31a:	4b0a      	ldr	r3, [pc, #40]	; (344 <system_board_init+0x4c>)
     31c:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     31e:	1d3b      	adds	r3, r7, #4
     320:	2200      	movs	r2, #0
     322:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     324:	1d3b      	adds	r3, r7, #4
     326:	2201      	movs	r2, #1
     328:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     32a:	1d3b      	adds	r3, r7, #4
     32c:	0019      	movs	r1, r3
     32e:	2037      	movs	r0, #55	; 0x37
     330:	4b03      	ldr	r3, [pc, #12]	; (340 <system_board_init+0x48>)
     332:	4798      	blx	r3
}
     334:	46c0      	nop			; (mov r8, r8)
     336:	46bd      	mov	sp, r7
     338:	b002      	add	sp, #8
     33a:	bd80      	pop	{r7, pc}
     33c:	00000281 	.word	0x00000281
     340:	00003341 	.word	0x00003341
     344:	000002a5 	.word	0x000002a5

00000348 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
     348:	b580      	push	{r7, lr}
     34a:	b082      	sub	sp, #8
     34c:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     34e:	4b07      	ldr	r3, [pc, #28]	; (36c <nvm_is_ready+0x24>)
     350:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     352:	687b      	ldr	r3, [r7, #4]
     354:	7d1b      	ldrb	r3, [r3, #20]
     356:	b2db      	uxtb	r3, r3
     358:	001a      	movs	r2, r3
     35a:	2301      	movs	r3, #1
     35c:	4013      	ands	r3, r2
     35e:	1e5a      	subs	r2, r3, #1
     360:	4193      	sbcs	r3, r2
     362:	b2db      	uxtb	r3, r3
}
     364:	0018      	movs	r0, r3
     366:	46bd      	mov	sp, r7
     368:	b002      	add	sp, #8
     36a:	bd80      	pop	{r7, pc}
     36c:	41004000 	.word	0x41004000

00000370 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     370:	b580      	push	{r7, lr}
     372:	b082      	sub	sp, #8
     374:	af00      	add	r7, sp, #0
     376:	0002      	movs	r2, r0
     378:	6039      	str	r1, [r7, #0]
     37a:	1dfb      	adds	r3, r7, #7
     37c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     37e:	1dfb      	adds	r3, r7, #7
     380:	781b      	ldrb	r3, [r3, #0]
     382:	2b01      	cmp	r3, #1
     384:	d00a      	beq.n	39c <system_apb_clock_set_mask+0x2c>
     386:	2b02      	cmp	r3, #2
     388:	d00f      	beq.n	3aa <system_apb_clock_set_mask+0x3a>
     38a:	2b00      	cmp	r3, #0
     38c:	d114      	bne.n	3b8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     38e:	4b0e      	ldr	r3, [pc, #56]	; (3c8 <system_apb_clock_set_mask+0x58>)
     390:	4a0d      	ldr	r2, [pc, #52]	; (3c8 <system_apb_clock_set_mask+0x58>)
     392:	6991      	ldr	r1, [r2, #24]
     394:	683a      	ldr	r2, [r7, #0]
     396:	430a      	orrs	r2, r1
     398:	619a      	str	r2, [r3, #24]
			break;
     39a:	e00f      	b.n	3bc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     39c:	4b0a      	ldr	r3, [pc, #40]	; (3c8 <system_apb_clock_set_mask+0x58>)
     39e:	4a0a      	ldr	r2, [pc, #40]	; (3c8 <system_apb_clock_set_mask+0x58>)
     3a0:	69d1      	ldr	r1, [r2, #28]
     3a2:	683a      	ldr	r2, [r7, #0]
     3a4:	430a      	orrs	r2, r1
     3a6:	61da      	str	r2, [r3, #28]
			break;
     3a8:	e008      	b.n	3bc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     3aa:	4b07      	ldr	r3, [pc, #28]	; (3c8 <system_apb_clock_set_mask+0x58>)
     3ac:	4a06      	ldr	r2, [pc, #24]	; (3c8 <system_apb_clock_set_mask+0x58>)
     3ae:	6a11      	ldr	r1, [r2, #32]
     3b0:	683a      	ldr	r2, [r7, #0]
     3b2:	430a      	orrs	r2, r1
     3b4:	621a      	str	r2, [r3, #32]
			break;
     3b6:	e001      	b.n	3bc <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     3b8:	2317      	movs	r3, #23
     3ba:	e000      	b.n	3be <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     3bc:	2300      	movs	r3, #0
}
     3be:	0018      	movs	r0, r3
     3c0:	46bd      	mov	sp, r7
     3c2:	b002      	add	sp, #8
     3c4:	bd80      	pop	{r7, pc}
     3c6:	46c0      	nop			; (mov r8, r8)
     3c8:	40000400 	.word	0x40000400

000003cc <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     3cc:	b580      	push	{r7, lr}
     3ce:	b084      	sub	sp, #16
     3d0:	af00      	add	r7, sp, #0
     3d2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     3d4:	4b2f      	ldr	r3, [pc, #188]	; (494 <nvm_set_config+0xc8>)
     3d6:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
     3d8:	2104      	movs	r1, #4
     3da:	2001      	movs	r0, #1
     3dc:	4b2e      	ldr	r3, [pc, #184]	; (498 <nvm_set_config+0xcc>)
     3de:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     3e0:	68fb      	ldr	r3, [r7, #12]
     3e2:	2220      	movs	r2, #32
     3e4:	32ff      	adds	r2, #255	; 0xff
     3e6:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     3e8:	4b2c      	ldr	r3, [pc, #176]	; (49c <nvm_set_config+0xd0>)
     3ea:	4798      	blx	r3
     3ec:	0003      	movs	r3, r0
     3ee:	001a      	movs	r2, r3
     3f0:	2301      	movs	r3, #1
     3f2:	4053      	eors	r3, r2
     3f4:	b2db      	uxtb	r3, r3
     3f6:	2b00      	cmp	r3, #0
     3f8:	d001      	beq.n	3fe <nvm_set_config+0x32>
		return STATUS_BUSY;
     3fa:	2305      	movs	r3, #5
     3fc:	e045      	b.n	48a <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     3fe:	687b      	ldr	r3, [r7, #4]
     400:	781b      	ldrb	r3, [r3, #0]
     402:	021b      	lsls	r3, r3, #8
     404:	001a      	movs	r2, r3
     406:	23c0      	movs	r3, #192	; 0xc0
     408:	009b      	lsls	r3, r3, #2
     40a:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     40c:	687b      	ldr	r3, [r7, #4]
     40e:	785b      	ldrb	r3, [r3, #1]
     410:	01db      	lsls	r3, r3, #7
     412:	0019      	movs	r1, r3
     414:	23ff      	movs	r3, #255	; 0xff
     416:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     418:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     41a:	687b      	ldr	r3, [r7, #4]
     41c:	789b      	ldrb	r3, [r3, #2]
     41e:	005b      	lsls	r3, r3, #1
     420:	0019      	movs	r1, r3
     422:	231e      	movs	r3, #30
     424:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     426:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     428:	687b      	ldr	r3, [r7, #4]
     42a:	78db      	ldrb	r3, [r3, #3]
     42c:	049b      	lsls	r3, r3, #18
     42e:	0019      	movs	r1, r3
     430:	2380      	movs	r3, #128	; 0x80
     432:	02db      	lsls	r3, r3, #11
     434:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     436:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     438:	687b      	ldr	r3, [r7, #4]
     43a:	791b      	ldrb	r3, [r3, #4]
     43c:	041b      	lsls	r3, r3, #16
     43e:	0019      	movs	r1, r3
     440:	23c0      	movs	r3, #192	; 0xc0
     442:	029b      	lsls	r3, r3, #10
     444:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     446:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
     448:	68fb      	ldr	r3, [r7, #12]
     44a:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     44c:	68fb      	ldr	r3, [r7, #12]
     44e:	689b      	ldr	r3, [r3, #8]
     450:	035b      	lsls	r3, r3, #13
     452:	0f5b      	lsrs	r3, r3, #29
     454:	b2db      	uxtb	r3, r3
     456:	001a      	movs	r2, r3
     458:	2308      	movs	r3, #8
     45a:	4093      	lsls	r3, r2
     45c:	b29a      	uxth	r2, r3
     45e:	4b10      	ldr	r3, [pc, #64]	; (4a0 <nvm_set_config+0xd4>)
     460:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     462:	68fb      	ldr	r3, [r7, #12]
     464:	689b      	ldr	r3, [r3, #8]
     466:	b29a      	uxth	r2, r3
     468:	4b0d      	ldr	r3, [pc, #52]	; (4a0 <nvm_set_config+0xd4>)
     46a:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     46c:	687b      	ldr	r3, [r7, #4]
     46e:	785a      	ldrb	r2, [r3, #1]
     470:	4b0b      	ldr	r3, [pc, #44]	; (4a0 <nvm_set_config+0xd4>)
     472:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     474:	68fb      	ldr	r3, [r7, #12]
     476:	8b1b      	ldrh	r3, [r3, #24]
     478:	b29b      	uxth	r3, r3
     47a:	001a      	movs	r2, r3
     47c:	2380      	movs	r3, #128	; 0x80
     47e:	005b      	lsls	r3, r3, #1
     480:	4013      	ands	r3, r2
     482:	d001      	beq.n	488 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
     484:	2310      	movs	r3, #16
     486:	e000      	b.n	48a <nvm_set_config+0xbe>
	}

	return STATUS_OK;
     488:	2300      	movs	r3, #0
}
     48a:	0018      	movs	r0, r3
     48c:	46bd      	mov	sp, r7
     48e:	b004      	add	sp, #16
     490:	bd80      	pop	{r7, pc}
     492:	46c0      	nop			; (mov r8, r8)
     494:	41004000 	.word	0x41004000
     498:	00000371 	.word	0x00000371
     49c:	00000349 	.word	0x00000349
     4a0:	200000f0 	.word	0x200000f0

000004a4 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
     4a4:	b580      	push	{r7, lr}
     4a6:	b086      	sub	sp, #24
     4a8:	af00      	add	r7, sp, #0
     4aa:	60b9      	str	r1, [r7, #8]
     4ac:	607a      	str	r2, [r7, #4]
     4ae:	230f      	movs	r3, #15
     4b0:	18fb      	adds	r3, r7, r3
     4b2:	1c02      	adds	r2, r0, #0
     4b4:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     4b6:	4b3a      	ldr	r3, [pc, #232]	; (5a0 <nvm_execute_command+0xfc>)
     4b8:	881b      	ldrh	r3, [r3, #0]
     4ba:	001a      	movs	r2, r3
     4bc:	4b38      	ldr	r3, [pc, #224]	; (5a0 <nvm_execute_command+0xfc>)
     4be:	885b      	ldrh	r3, [r3, #2]
     4c0:	435a      	muls	r2, r3
     4c2:	68bb      	ldr	r3, [r7, #8]
     4c4:	429a      	cmp	r2, r3
     4c6:	d209      	bcs.n	4dc <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     4c8:	68bb      	ldr	r3, [r7, #8]
     4ca:	4a36      	ldr	r2, [pc, #216]	; (5a4 <nvm_execute_command+0x100>)
     4cc:	4293      	cmp	r3, r2
     4ce:	d903      	bls.n	4d8 <nvm_execute_command+0x34>
     4d0:	68bb      	ldr	r3, [r7, #8]
     4d2:	4a35      	ldr	r2, [pc, #212]	; (5a8 <nvm_execute_command+0x104>)
     4d4:	4293      	cmp	r3, r2
     4d6:	d901      	bls.n	4dc <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
     4d8:	2318      	movs	r3, #24
     4da:	e05c      	b.n	596 <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     4dc:	4b33      	ldr	r3, [pc, #204]	; (5ac <nvm_execute_command+0x108>)
     4de:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
     4e0:	697b      	ldr	r3, [r7, #20]
     4e2:	685b      	ldr	r3, [r3, #4]
     4e4:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     4e6:	693b      	ldr	r3, [r7, #16]
     4e8:	2280      	movs	r2, #128	; 0x80
     4ea:	02d2      	lsls	r2, r2, #11
     4ec:	431a      	orrs	r2, r3
     4ee:	697b      	ldr	r3, [r7, #20]
     4f0:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     4f2:	697b      	ldr	r3, [r7, #20]
     4f4:	2220      	movs	r2, #32
     4f6:	32ff      	adds	r2, #255	; 0xff
     4f8:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     4fa:	4b2d      	ldr	r3, [pc, #180]	; (5b0 <nvm_execute_command+0x10c>)
     4fc:	4798      	blx	r3
     4fe:	0003      	movs	r3, r0
     500:	001a      	movs	r2, r3
     502:	2301      	movs	r3, #1
     504:	4053      	eors	r3, r2
     506:	b2db      	uxtb	r3, r3
     508:	2b00      	cmp	r3, #0
     50a:	d004      	beq.n	516 <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
     50c:	697b      	ldr	r3, [r7, #20]
     50e:	693a      	ldr	r2, [r7, #16]
     510:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
     512:	2305      	movs	r3, #5
     514:	e03f      	b.n	596 <nvm_execute_command+0xf2>
	}

	switch (command) {
     516:	230f      	movs	r3, #15
     518:	18fb      	adds	r3, r7, r3
     51a:	781b      	ldrb	r3, [r3, #0]
     51c:	2b45      	cmp	r3, #69	; 0x45
     51e:	d81d      	bhi.n	55c <nvm_execute_command+0xb8>
     520:	009a      	lsls	r2, r3, #2
     522:	4b24      	ldr	r3, [pc, #144]	; (5b4 <nvm_execute_command+0x110>)
     524:	18d3      	adds	r3, r2, r3
     526:	681b      	ldr	r3, [r3, #0]
     528:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     52a:	697b      	ldr	r3, [r7, #20]
     52c:	8b1b      	ldrh	r3, [r3, #24]
     52e:	b29b      	uxth	r3, r3
     530:	001a      	movs	r2, r3
     532:	2380      	movs	r3, #128	; 0x80
     534:	005b      	lsls	r3, r3, #1
     536:	4013      	ands	r3, r2
     538:	d004      	beq.n	544 <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
     53a:	697b      	ldr	r3, [r7, #20]
     53c:	693a      	ldr	r2, [r7, #16]
     53e:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
     540:	2310      	movs	r3, #16
     542:	e028      	b.n	596 <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     544:	68bb      	ldr	r3, [r7, #8]
     546:	089b      	lsrs	r3, r3, #2
     548:	005a      	lsls	r2, r3, #1
     54a:	697b      	ldr	r3, [r7, #20]
     54c:	61da      	str	r2, [r3, #28]
			break;
     54e:	e00b      	b.n	568 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     550:	68bb      	ldr	r3, [r7, #8]
     552:	089b      	lsrs	r3, r3, #2
     554:	005a      	lsls	r2, r3, #1
     556:	697b      	ldr	r3, [r7, #20]
     558:	61da      	str	r2, [r3, #28]
			break;
     55a:	e005      	b.n	568 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
     55c:	697b      	ldr	r3, [r7, #20]
     55e:	693a      	ldr	r2, [r7, #16]
     560:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
     562:	2317      	movs	r3, #23
     564:	e017      	b.n	596 <nvm_execute_command+0xf2>
			break;
     566:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     568:	230f      	movs	r3, #15
     56a:	18fb      	adds	r3, r7, r3
     56c:	781b      	ldrb	r3, [r3, #0]
     56e:	b29b      	uxth	r3, r3
     570:	4a11      	ldr	r2, [pc, #68]	; (5b8 <nvm_execute_command+0x114>)
     572:	4313      	orrs	r3, r2
     574:	b29a      	uxth	r2, r3
     576:	697b      	ldr	r3, [r7, #20]
     578:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
     57a:	46c0      	nop			; (mov r8, r8)
     57c:	4b0c      	ldr	r3, [pc, #48]	; (5b0 <nvm_execute_command+0x10c>)
     57e:	4798      	blx	r3
     580:	0003      	movs	r3, r0
     582:	001a      	movs	r2, r3
     584:	2301      	movs	r3, #1
     586:	4053      	eors	r3, r2
     588:	b2db      	uxtb	r3, r3
     58a:	2b00      	cmp	r3, #0
     58c:	d1f6      	bne.n	57c <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
     58e:	697b      	ldr	r3, [r7, #20]
     590:	693a      	ldr	r2, [r7, #16]
     592:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
     594:	2300      	movs	r3, #0
}
     596:	0018      	movs	r0, r3
     598:	46bd      	mov	sp, r7
     59a:	b006      	add	sp, #24
     59c:	bd80      	pop	{r7, pc}
     59e:	46c0      	nop			; (mov r8, r8)
     5a0:	200000f0 	.word	0x200000f0
     5a4:	00803fff 	.word	0x00803fff
     5a8:	00806000 	.word	0x00806000
     5ac:	41004000 	.word	0x41004000
     5b0:	00000349 	.word	0x00000349
     5b4:	0000cb1c 	.word	0x0000cb1c
     5b8:	ffffa500 	.word	0xffffa500

000005bc <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
     5bc:	b580      	push	{r7, lr}
     5be:	b088      	sub	sp, #32
     5c0:	af00      	add	r7, sp, #0
     5c2:	60f8      	str	r0, [r7, #12]
     5c4:	60b9      	str	r1, [r7, #8]
     5c6:	1dbb      	adds	r3, r7, #6
     5c8:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     5ca:	4b4a      	ldr	r3, [pc, #296]	; (6f4 <nvm_write_buffer+0x138>)
     5cc:	881b      	ldrh	r3, [r3, #0]
     5ce:	001a      	movs	r2, r3
     5d0:	4b48      	ldr	r3, [pc, #288]	; (6f4 <nvm_write_buffer+0x138>)
     5d2:	885b      	ldrh	r3, [r3, #2]
     5d4:	435a      	muls	r2, r3
	if (destination_address >
     5d6:	68fb      	ldr	r3, [r7, #12]
     5d8:	429a      	cmp	r2, r3
     5da:	d201      	bcs.n	5e0 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     5dc:	2318      	movs	r3, #24
     5de:	e084      	b.n	6ea <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
     5e0:	4b44      	ldr	r3, [pc, #272]	; (6f4 <nvm_write_buffer+0x138>)
     5e2:	881b      	ldrh	r3, [r3, #0]
     5e4:	3b01      	subs	r3, #1
     5e6:	001a      	movs	r2, r3
     5e8:	68fb      	ldr	r3, [r7, #12]
     5ea:	4013      	ands	r3, r2
     5ec:	d001      	beq.n	5f2 <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
     5ee:	2318      	movs	r3, #24
     5f0:	e07b      	b.n	6ea <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
     5f2:	4b40      	ldr	r3, [pc, #256]	; (6f4 <nvm_write_buffer+0x138>)
     5f4:	881b      	ldrh	r3, [r3, #0]
     5f6:	1dba      	adds	r2, r7, #6
     5f8:	8812      	ldrh	r2, [r2, #0]
     5fa:	429a      	cmp	r2, r3
     5fc:	d901      	bls.n	602 <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
     5fe:	2317      	movs	r3, #23
     600:	e073      	b.n	6ea <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     602:	4b3d      	ldr	r3, [pc, #244]	; (6f8 <nvm_write_buffer+0x13c>)
     604:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     606:	4b3d      	ldr	r3, [pc, #244]	; (6fc <nvm_write_buffer+0x140>)
     608:	4798      	blx	r3
     60a:	0003      	movs	r3, r0
     60c:	001a      	movs	r2, r3
     60e:	2301      	movs	r3, #1
     610:	4053      	eors	r3, r2
     612:	b2db      	uxtb	r3, r3
     614:	2b00      	cmp	r3, #0
     616:	d001      	beq.n	61c <nvm_write_buffer+0x60>
		return STATUS_BUSY;
     618:	2305      	movs	r3, #5
     61a:	e066      	b.n	6ea <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     61c:	697b      	ldr	r3, [r7, #20]
     61e:	4a38      	ldr	r2, [pc, #224]	; (700 <nvm_write_buffer+0x144>)
     620:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
     622:	46c0      	nop			; (mov r8, r8)
     624:	4b35      	ldr	r3, [pc, #212]	; (6fc <nvm_write_buffer+0x140>)
     626:	4798      	blx	r3
     628:	0003      	movs	r3, r0
     62a:	001a      	movs	r2, r3
     62c:	2301      	movs	r3, #1
     62e:	4053      	eors	r3, r2
     630:	b2db      	uxtb	r3, r3
     632:	2b00      	cmp	r3, #0
     634:	d1f6      	bne.n	624 <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     636:	697b      	ldr	r3, [r7, #20]
     638:	2220      	movs	r2, #32
     63a:	32ff      	adds	r2, #255	; 0xff
     63c:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
     63e:	68fb      	ldr	r3, [r7, #12]
     640:	085b      	lsrs	r3, r3, #1
     642:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
     644:	231a      	movs	r3, #26
     646:	18fb      	adds	r3, r7, r3
     648:	2200      	movs	r2, #0
     64a:	801a      	strh	r2, [r3, #0]
     64c:	e032      	b.n	6b4 <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
     64e:	231a      	movs	r3, #26
     650:	18fb      	adds	r3, r7, r3
     652:	881b      	ldrh	r3, [r3, #0]
     654:	68ba      	ldr	r2, [r7, #8]
     656:	18d3      	adds	r3, r2, r3
     658:	781a      	ldrb	r2, [r3, #0]
     65a:	2318      	movs	r3, #24
     65c:	18fb      	adds	r3, r7, r3
     65e:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
     660:	231a      	movs	r3, #26
     662:	18fb      	adds	r3, r7, r3
     664:	881a      	ldrh	r2, [r3, #0]
     666:	1dbb      	adds	r3, r7, #6
     668:	881b      	ldrh	r3, [r3, #0]
     66a:	3b01      	subs	r3, #1
     66c:	429a      	cmp	r2, r3
     66e:	da11      	bge.n	694 <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
     670:	231a      	movs	r3, #26
     672:	18fb      	adds	r3, r7, r3
     674:	881b      	ldrh	r3, [r3, #0]
     676:	3301      	adds	r3, #1
     678:	68ba      	ldr	r2, [r7, #8]
     67a:	18d3      	adds	r3, r2, r3
     67c:	781b      	ldrb	r3, [r3, #0]
     67e:	021b      	lsls	r3, r3, #8
     680:	b21a      	sxth	r2, r3
     682:	2318      	movs	r3, #24
     684:	18fb      	adds	r3, r7, r3
     686:	2100      	movs	r1, #0
     688:	5e5b      	ldrsh	r3, [r3, r1]
     68a:	4313      	orrs	r3, r2
     68c:	b21a      	sxth	r2, r3
     68e:	2318      	movs	r3, #24
     690:	18fb      	adds	r3, r7, r3
     692:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
     694:	69fb      	ldr	r3, [r7, #28]
     696:	1c5a      	adds	r2, r3, #1
     698:	61fa      	str	r2, [r7, #28]
     69a:	005b      	lsls	r3, r3, #1
     69c:	001a      	movs	r2, r3
     69e:	2318      	movs	r3, #24
     6a0:	18fb      	adds	r3, r7, r3
     6a2:	881b      	ldrh	r3, [r3, #0]
     6a4:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
     6a6:	231a      	movs	r3, #26
     6a8:	18fb      	adds	r3, r7, r3
     6aa:	221a      	movs	r2, #26
     6ac:	18ba      	adds	r2, r7, r2
     6ae:	8812      	ldrh	r2, [r2, #0]
     6b0:	3202      	adds	r2, #2
     6b2:	801a      	strh	r2, [r3, #0]
     6b4:	231a      	movs	r3, #26
     6b6:	18fa      	adds	r2, r7, r3
     6b8:	1dbb      	adds	r3, r7, #6
     6ba:	8812      	ldrh	r2, [r2, #0]
     6bc:	881b      	ldrh	r3, [r3, #0]
     6be:	429a      	cmp	r2, r3
     6c0:	d3c5      	bcc.n	64e <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     6c2:	4b0c      	ldr	r3, [pc, #48]	; (6f4 <nvm_write_buffer+0x138>)
     6c4:	791b      	ldrb	r3, [r3, #4]
     6c6:	2201      	movs	r2, #1
     6c8:	4053      	eors	r3, r2
     6ca:	b2db      	uxtb	r3, r3
     6cc:	2b00      	cmp	r3, #0
     6ce:	d00b      	beq.n	6e8 <nvm_write_buffer+0x12c>
     6d0:	1dbb      	adds	r3, r7, #6
     6d2:	881b      	ldrh	r3, [r3, #0]
     6d4:	2b3f      	cmp	r3, #63	; 0x3f
     6d6:	d807      	bhi.n	6e8 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
     6d8:	68fb      	ldr	r3, [r7, #12]
     6da:	2200      	movs	r2, #0
     6dc:	0019      	movs	r1, r3
     6de:	2004      	movs	r0, #4
     6e0:	4b08      	ldr	r3, [pc, #32]	; (704 <nvm_write_buffer+0x148>)
     6e2:	4798      	blx	r3
     6e4:	0003      	movs	r3, r0
     6e6:	e000      	b.n	6ea <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
     6e8:	2300      	movs	r3, #0
}
     6ea:	0018      	movs	r0, r3
     6ec:	46bd      	mov	sp, r7
     6ee:	b008      	add	sp, #32
     6f0:	bd80      	pop	{r7, pc}
     6f2:	46c0      	nop			; (mov r8, r8)
     6f4:	200000f0 	.word	0x200000f0
     6f8:	41004000 	.word	0x41004000
     6fc:	00000349 	.word	0x00000349
     700:	ffffa544 	.word	0xffffa544
     704:	000004a5 	.word	0x000004a5

00000708 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
     708:	b580      	push	{r7, lr}
     70a:	b084      	sub	sp, #16
     70c:	af00      	add	r7, sp, #0
     70e:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     710:	4b23      	ldr	r3, [pc, #140]	; (7a0 <nvm_erase_row+0x98>)
     712:	881b      	ldrh	r3, [r3, #0]
     714:	001a      	movs	r2, r3
     716:	4b22      	ldr	r3, [pc, #136]	; (7a0 <nvm_erase_row+0x98>)
     718:	885b      	ldrh	r3, [r3, #2]
     71a:	435a      	muls	r2, r3
	if (row_address >
     71c:	687b      	ldr	r3, [r7, #4]
     71e:	429a      	cmp	r2, r3
     720:	d201      	bcs.n	726 <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     722:	2318      	movs	r3, #24
     724:	e037      	b.n	796 <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     726:	4b1e      	ldr	r3, [pc, #120]	; (7a0 <nvm_erase_row+0x98>)
     728:	881b      	ldrh	r3, [r3, #0]
     72a:	009b      	lsls	r3, r3, #2
     72c:	3b01      	subs	r3, #1
     72e:	001a      	movs	r2, r3
     730:	687b      	ldr	r3, [r7, #4]
     732:	4013      	ands	r3, r2
     734:	d001      	beq.n	73a <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
     736:	2318      	movs	r3, #24
     738:	e02d      	b.n	796 <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     73a:	4b1a      	ldr	r3, [pc, #104]	; (7a4 <nvm_erase_row+0x9c>)
     73c:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     73e:	4b1a      	ldr	r3, [pc, #104]	; (7a8 <nvm_erase_row+0xa0>)
     740:	4798      	blx	r3
     742:	0003      	movs	r3, r0
     744:	001a      	movs	r2, r3
     746:	2301      	movs	r3, #1
     748:	4053      	eors	r3, r2
     74a:	b2db      	uxtb	r3, r3
     74c:	2b00      	cmp	r3, #0
     74e:	d001      	beq.n	754 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
     750:	2305      	movs	r3, #5
     752:	e020      	b.n	796 <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     754:	68fb      	ldr	r3, [r7, #12]
     756:	2220      	movs	r2, #32
     758:	32ff      	adds	r2, #255	; 0xff
     75a:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     75c:	687b      	ldr	r3, [r7, #4]
     75e:	089b      	lsrs	r3, r3, #2
     760:	005a      	lsls	r2, r3, #1
     762:	68fb      	ldr	r3, [r7, #12]
     764:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     766:	68fb      	ldr	r3, [r7, #12]
     768:	4a10      	ldr	r2, [pc, #64]	; (7ac <nvm_erase_row+0xa4>)
     76a:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
     76c:	46c0      	nop			; (mov r8, r8)
     76e:	4b0e      	ldr	r3, [pc, #56]	; (7a8 <nvm_erase_row+0xa0>)
     770:	4798      	blx	r3
     772:	0003      	movs	r3, r0
     774:	001a      	movs	r2, r3
     776:	2301      	movs	r3, #1
     778:	4053      	eors	r3, r2
     77a:	b2db      	uxtb	r3, r3
     77c:	2b00      	cmp	r3, #0
     77e:	d1f6      	bne.n	76e <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
     780:	68fb      	ldr	r3, [r7, #12]
     782:	8b1b      	ldrh	r3, [r3, #24]
     784:	b29b      	uxth	r3, r3
     786:	b2db      	uxtb	r3, r3
     788:	001a      	movs	r2, r3
     78a:	231c      	movs	r3, #28
     78c:	4013      	ands	r3, r2
     78e:	d001      	beq.n	794 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
     790:	2304      	movs	r3, #4
     792:	e000      	b.n	796 <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
     794:	2300      	movs	r3, #0
}
     796:	0018      	movs	r0, r3
     798:	46bd      	mov	sp, r7
     79a:	b004      	add	sp, #16
     79c:	bd80      	pop	{r7, pc}
     79e:	46c0      	nop			; (mov r8, r8)
     7a0:	200000f0 	.word	0x200000f0
     7a4:	41004000 	.word	0x41004000
     7a8:	00000349 	.word	0x00000349
     7ac:	ffffa502 	.word	0xffffa502

000007b0 <nvm_get_parameters>:
 * \param[out] parameters    Parameter structure, which holds page size and
 *                           number of pages in the NVM memory
 */
void nvm_get_parameters(
		struct nvm_parameters *const parameters)
{
     7b0:	b580      	push	{r7, lr}
     7b2:	b086      	sub	sp, #24
     7b4:	af00      	add	r7, sp, #0
     7b6:	6078      	str	r0, [r7, #4]
	/* Sanity check parameters */
	Assert(parameters);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     7b8:	4b2a      	ldr	r3, [pc, #168]	; (864 <nvm_get_parameters+0xb4>)
     7ba:	617b      	str	r3, [r7, #20]

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     7bc:	697b      	ldr	r3, [r7, #20]
     7be:	2220      	movs	r2, #32
     7c0:	32ff      	adds	r2, #255	; 0xff
     7c2:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
     7c4:	697b      	ldr	r3, [r7, #20]
     7c6:	689b      	ldr	r3, [r3, #8]
     7c8:	613b      	str	r3, [r7, #16]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
     7ca:	693b      	ldr	r3, [r7, #16]
     7cc:	0c1b      	lsrs	r3, r3, #16
     7ce:	2207      	movs	r2, #7
     7d0:	4013      	ands	r3, r2
     7d2:	2208      	movs	r2, #8
     7d4:	409a      	lsls	r2, r3
     7d6:	0013      	movs	r3, r2
	parameters->page_size =
     7d8:	b2da      	uxtb	r2, r3
     7da:	687b      	ldr	r3, [r7, #4]
     7dc:	701a      	strb	r2, [r3, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
     7de:	693b      	ldr	r3, [r7, #16]
     7e0:	b29a      	uxth	r2, r3
     7e2:	687b      	ldr	r3, [r7, #4]
     7e4:	805a      	strh	r2, [r3, #2]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
     7e6:	4b20      	ldr	r3, [pc, #128]	; (868 <nvm_get_parameters+0xb8>)
     7e8:	881b      	ldrh	r3, [r3, #0]
     7ea:	b29b      	uxth	r3, r3
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
     7ec:	091b      	lsrs	r3, r3, #4
     7ee:	b29a      	uxth	r2, r3
	uint16_t eeprom_fuse_value =
     7f0:	230e      	movs	r3, #14
     7f2:	18fb      	adds	r3, r7, r3
     7f4:	2107      	movs	r1, #7
     7f6:	400a      	ands	r2, r1
     7f8:	801a      	strh	r2, [r3, #0]

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
     7fa:	230e      	movs	r3, #14
     7fc:	18fb      	adds	r3, r7, r3
     7fe:	881b      	ldrh	r3, [r3, #0]
     800:	2b07      	cmp	r3, #7
     802:	d103      	bne.n	80c <nvm_get_parameters+0x5c>
		parameters->eeprom_number_of_pages = 0;
     804:	687b      	ldr	r3, [r7, #4]
     806:	2200      	movs	r2, #0
     808:	605a      	str	r2, [r3, #4]
     80a:	e00a      	b.n	822 <nvm_get_parameters+0x72>
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
     80c:	230e      	movs	r3, #14
     80e:	18fb      	adds	r3, r7, r3
     810:	881b      	ldrh	r3, [r3, #0]
     812:	2206      	movs	r2, #6
     814:	1ad3      	subs	r3, r2, r3
     816:	2204      	movs	r2, #4
     818:	409a      	lsls	r2, r3
     81a:	0013      	movs	r3, r2
     81c:	001a      	movs	r2, r3
		parameters->eeprom_number_of_pages =
     81e:	687b      	ldr	r3, [r7, #4]
     820:	605a      	str	r2, [r3, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
     822:	4b11      	ldr	r3, [pc, #68]	; (868 <nvm_get_parameters+0xb8>)
     824:	881b      	ldrh	r3, [r3, #0]
     826:	b29a      	uxth	r2, r3
	uint16_t boot_fuse_value =
     828:	230c      	movs	r3, #12
     82a:	18fb      	adds	r3, r7, r3
     82c:	2107      	movs	r1, #7
     82e:	400a      	ands	r2, r1
     830:	801a      	strh	r2, [r3, #0]
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
     832:	230c      	movs	r3, #12
     834:	18fb      	adds	r3, r7, r3
     836:	881b      	ldrh	r3, [r3, #0]
     838:	2b07      	cmp	r3, #7
     83a:	d103      	bne.n	844 <nvm_get_parameters+0x94>
		parameters->bootloader_number_of_pages = 0;
     83c:	687b      	ldr	r3, [r7, #4]
     83e:	2200      	movs	r2, #0
     840:	609a      	str	r2, [r3, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
     842:	e00a      	b.n	85a <nvm_get_parameters+0xaa>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
     844:	230c      	movs	r3, #12
     846:	18fb      	adds	r3, r7, r3
     848:	881b      	ldrh	r3, [r3, #0]
     84a:	2207      	movs	r2, #7
     84c:	1ad3      	subs	r3, r2, r3
     84e:	2204      	movs	r2, #4
     850:	409a      	lsls	r2, r3
     852:	0013      	movs	r3, r2
     854:	001a      	movs	r2, r3
		parameters->bootloader_number_of_pages =
     856:	687b      	ldr	r3, [r7, #4]
     858:	609a      	str	r2, [r3, #8]
}
     85a:	46c0      	nop			; (mov r8, r8)
     85c:	46bd      	mov	sp, r7
     85e:	b006      	add	sp, #24
     860:	bd80      	pop	{r7, pc}
     862:	46c0      	nop			; (mov r8, r8)
     864:	41004000 	.word	0x41004000
     868:	00804000 	.word	0x00804000

0000086c <SdCard_Initiate>:
* @return		Returns CTRL_GOOD if the SDS card was mounted incorrectly - other status otherwise
* @note         
*****************************************************************************/

Ctrl_status SdCard_Initiate(void)
{
     86c:	b590      	push	{r4, r7, lr}
     86e:	b083      	sub	sp, #12
     870:	af00      	add	r7, sp, #0
	Ctrl_status status;
	uint32_t timeStart = GetSystick();
     872:	4b16      	ldr	r3, [pc, #88]	; (8cc <SdCard_Initiate+0x60>)
     874:	4798      	blx	r3
     876:	0003      	movs	r3, r0
     878:	603b      	str	r3, [r7, #0]

/* Wait card present and ready */
do {
	status = sd_mmc_test_unit_ready(0);
     87a:	1dfc      	adds	r4, r7, #7
     87c:	2000      	movs	r0, #0
     87e:	4b14      	ldr	r3, [pc, #80]	; (8d0 <SdCard_Initiate+0x64>)
     880:	4798      	blx	r3
     882:	0003      	movs	r3, r0
     884:	7023      	strb	r3, [r4, #0]
	if (CTRL_FAIL == status) {
     886:	1dfb      	adds	r3, r7, #7
     888:	781b      	ldrb	r3, [r3, #0]
     88a:	2b01      	cmp	r3, #1
     88c:	d106      	bne.n	89c <SdCard_Initiate+0x30>
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
     88e:	46c0      	nop			; (mov r8, r8)
     890:	2000      	movs	r0, #0
     892:	4b10      	ldr	r3, [pc, #64]	; (8d4 <SdCard_Initiate+0x68>)
     894:	4798      	blx	r3
     896:	0003      	movs	r3, r0
     898:	2b02      	cmp	r3, #2
     89a:	d1f9      	bne.n	890 <SdCard_Initiate+0x24>
		}
	}

	if (GetSystick() - timeStart > SD_CARD_TIMEOUT)
     89c:	4b0b      	ldr	r3, [pc, #44]	; (8cc <SdCard_Initiate+0x60>)
     89e:	4798      	blx	r3
     8a0:	0002      	movs	r2, r0
     8a2:	683b      	ldr	r3, [r7, #0]
     8a4:	1ad2      	subs	r2, r2, r3
     8a6:	23fa      	movs	r3, #250	; 0xfa
     8a8:	005b      	lsls	r3, r3, #1
     8aa:	429a      	cmp	r2, r3
     8ac:	d903      	bls.n	8b6 <SdCard_Initiate+0x4a>
	{
		status = CTRL_FAIL;
     8ae:	1dfb      	adds	r3, r7, #7
     8b0:	2201      	movs	r2, #1
     8b2:	701a      	strb	r2, [r3, #0]
		break;
     8b4:	e003      	b.n	8be <SdCard_Initiate+0x52>
	}
} while (CTRL_GOOD != status );
     8b6:	1dfb      	adds	r3, r7, #7
     8b8:	781b      	ldrb	r3, [r3, #0]
     8ba:	2b00      	cmp	r3, #0
     8bc:	d1dd      	bne.n	87a <SdCard_Initiate+0xe>

return status;
     8be:	1dfb      	adds	r3, r7, #7
     8c0:	781b      	ldrb	r3, [r3, #0]
}
     8c2:	0018      	movs	r0, r3
     8c4:	46bd      	mov	sp, r7
     8c6:	b003      	add	sp, #12
     8c8:	bd90      	pop	{r4, r7, pc}
     8ca:	46c0      	nop			; (mov r8, r8)
     8cc:	000001d1 	.word	0x000001d1
     8d0:	00002175 	.word	0x00002175
     8d4:	00001ce9 	.word	0x00001ce9

000008d8 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
     8d8:	b580      	push	{r7, lr}
     8da:	b082      	sub	sp, #8
     8dc:	af00      	add	r7, sp, #0
     8de:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
     8e0:	687b      	ldr	r3, [r7, #4]
     8e2:	7c1b      	ldrb	r3, [r3, #16]
     8e4:	2b00      	cmp	r3, #0
     8e6:	d00b      	beq.n	900 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     8e8:	687b      	ldr	r3, [r7, #4]
     8ea:	689b      	ldr	r3, [r3, #8]
     8ec:	1c5a      	adds	r2, r3, #1
     8ee:	687b      	ldr	r3, [r7, #4]
     8f0:	68d9      	ldr	r1, [r3, #12]
     8f2:	4b10      	ldr	r3, [pc, #64]	; (934 <advance_pointer+0x5c>)
     8f4:	0010      	movs	r0, r2
     8f6:	4798      	blx	r3
     8f8:	000b      	movs	r3, r1
     8fa:	001a      	movs	r2, r3
     8fc:	687b      	ldr	r3, [r7, #4]
     8fe:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     900:	687b      	ldr	r3, [r7, #4]
     902:	685b      	ldr	r3, [r3, #4]
     904:	1c5a      	adds	r2, r3, #1
     906:	687b      	ldr	r3, [r7, #4]
     908:	68d9      	ldr	r1, [r3, #12]
     90a:	4b0a      	ldr	r3, [pc, #40]	; (934 <advance_pointer+0x5c>)
     90c:	0010      	movs	r0, r2
     90e:	4798      	blx	r3
     910:	000b      	movs	r3, r1
     912:	001a      	movs	r2, r3
     914:	687b      	ldr	r3, [r7, #4]
     916:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     918:	687b      	ldr	r3, [r7, #4]
     91a:	685a      	ldr	r2, [r3, #4]
     91c:	687b      	ldr	r3, [r7, #4]
     91e:	689b      	ldr	r3, [r3, #8]
     920:	1ad3      	subs	r3, r2, r3
     922:	425a      	negs	r2, r3
     924:	4153      	adcs	r3, r2
     926:	b2da      	uxtb	r2, r3
     928:	687b      	ldr	r3, [r7, #4]
     92a:	741a      	strb	r2, [r3, #16]
 }
     92c:	46c0      	nop			; (mov r8, r8)
     92e:	46bd      	mov	sp, r7
     930:	b002      	add	sp, #8
     932:	bd80      	pop	{r7, pc}
     934:	0000b9d9 	.word	0x0000b9d9

00000938 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
     938:	b580      	push	{r7, lr}
     93a:	b082      	sub	sp, #8
     93c:	af00      	add	r7, sp, #0
     93e:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
     940:	687b      	ldr	r3, [r7, #4]
     942:	2200      	movs	r2, #0
     944:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     946:	687b      	ldr	r3, [r7, #4]
     948:	689b      	ldr	r3, [r3, #8]
     94a:	1c5a      	adds	r2, r3, #1
     94c:	687b      	ldr	r3, [r7, #4]
     94e:	68d9      	ldr	r1, [r3, #12]
     950:	4b05      	ldr	r3, [pc, #20]	; (968 <retreat_pointer+0x30>)
     952:	0010      	movs	r0, r2
     954:	4798      	blx	r3
     956:	000b      	movs	r3, r1
     958:	001a      	movs	r2, r3
     95a:	687b      	ldr	r3, [r7, #4]
     95c:	609a      	str	r2, [r3, #8]
 }
     95e:	46c0      	nop			; (mov r8, r8)
     960:	46bd      	mov	sp, r7
     962:	b002      	add	sp, #8
     964:	bd80      	pop	{r7, pc}
     966:	46c0      	nop			; (mov r8, r8)
     968:	0000b9d9 	.word	0x0000b9d9

0000096c <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     96c:	b580      	push	{r7, lr}
     96e:	b084      	sub	sp, #16
     970:	af00      	add	r7, sp, #0
     972:	6078      	str	r0, [r7, #4]
     974:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     976:	2014      	movs	r0, #20
     978:	4b09      	ldr	r3, [pc, #36]	; (9a0 <circular_buf_init+0x34>)
     97a:	4798      	blx	r3
     97c:	0003      	movs	r3, r0
     97e:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     980:	68fb      	ldr	r3, [r7, #12]
     982:	687a      	ldr	r2, [r7, #4]
     984:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
     986:	68fb      	ldr	r3, [r7, #12]
     988:	683a      	ldr	r2, [r7, #0]
     98a:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
     98c:	68fb      	ldr	r3, [r7, #12]
     98e:	0018      	movs	r0, r3
     990:	4b04      	ldr	r3, [pc, #16]	; (9a4 <circular_buf_init+0x38>)
     992:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
     994:	68fb      	ldr	r3, [r7, #12]
 }
     996:	0018      	movs	r0, r3
     998:	46bd      	mov	sp, r7
     99a:	b004      	add	sp, #16
     99c:	bd80      	pop	{r7, pc}
     99e:	46c0      	nop			; (mov r8, r8)
     9a0:	0000bc55 	.word	0x0000bc55
     9a4:	000009a9 	.word	0x000009a9

000009a8 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
     9a8:	b580      	push	{r7, lr}
     9aa:	b082      	sub	sp, #8
     9ac:	af00      	add	r7, sp, #0
     9ae:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
     9b0:	687b      	ldr	r3, [r7, #4]
     9b2:	2200      	movs	r2, #0
     9b4:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
     9b6:	687b      	ldr	r3, [r7, #4]
     9b8:	2200      	movs	r2, #0
     9ba:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
     9bc:	687b      	ldr	r3, [r7, #4]
     9be:	2200      	movs	r2, #0
     9c0:	741a      	strb	r2, [r3, #16]
 }
     9c2:	46c0      	nop			; (mov r8, r8)
     9c4:	46bd      	mov	sp, r7
     9c6:	b002      	add	sp, #8
     9c8:	bd80      	pop	{r7, pc}
	...

000009cc <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     9cc:	b580      	push	{r7, lr}
     9ce:	b082      	sub	sp, #8
     9d0:	af00      	add	r7, sp, #0
     9d2:	6078      	str	r0, [r7, #4]
     9d4:	000a      	movs	r2, r1
     9d6:	1cfb      	adds	r3, r7, #3
     9d8:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     9da:	687b      	ldr	r3, [r7, #4]
     9dc:	681a      	ldr	r2, [r3, #0]
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	685b      	ldr	r3, [r3, #4]
     9e2:	18d3      	adds	r3, r2, r3
     9e4:	1cfa      	adds	r2, r7, #3
     9e6:	7812      	ldrb	r2, [r2, #0]
     9e8:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
     9ea:	687b      	ldr	r3, [r7, #4]
     9ec:	0018      	movs	r0, r3
     9ee:	4b03      	ldr	r3, [pc, #12]	; (9fc <circular_buf_put+0x30>)
     9f0:	4798      	blx	r3
 }
     9f2:	46c0      	nop			; (mov r8, r8)
     9f4:	46bd      	mov	sp, r7
     9f6:	b002      	add	sp, #8
     9f8:	bd80      	pop	{r7, pc}
     9fa:	46c0      	nop			; (mov r8, r8)
     9fc:	000008d9 	.word	0x000008d9

00000a00 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
     a00:	b580      	push	{r7, lr}
     a02:	b084      	sub	sp, #16
     a04:	af00      	add	r7, sp, #0
     a06:	6078      	str	r0, [r7, #4]
     a08:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
     a0a:	2301      	movs	r3, #1
     a0c:	425b      	negs	r3, r3
     a0e:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
     a10:	687b      	ldr	r3, [r7, #4]
     a12:	0018      	movs	r0, r3
     a14:	4b0d      	ldr	r3, [pc, #52]	; (a4c <circular_buf_get+0x4c>)
     a16:	4798      	blx	r3
     a18:	0003      	movs	r3, r0
     a1a:	001a      	movs	r2, r3
     a1c:	2301      	movs	r3, #1
     a1e:	4053      	eors	r3, r2
     a20:	b2db      	uxtb	r3, r3
     a22:	2b00      	cmp	r3, #0
     a24:	d00d      	beq.n	a42 <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
     a26:	687b      	ldr	r3, [r7, #4]
     a28:	681a      	ldr	r2, [r3, #0]
     a2a:	687b      	ldr	r3, [r7, #4]
     a2c:	689b      	ldr	r3, [r3, #8]
     a2e:	18d3      	adds	r3, r2, r3
     a30:	781a      	ldrb	r2, [r3, #0]
     a32:	683b      	ldr	r3, [r7, #0]
     a34:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
     a36:	687b      	ldr	r3, [r7, #4]
     a38:	0018      	movs	r0, r3
     a3a:	4b05      	ldr	r3, [pc, #20]	; (a50 <circular_buf_get+0x50>)
     a3c:	4798      	blx	r3

		 r = 0;
     a3e:	2300      	movs	r3, #0
     a40:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
     a42:	68fb      	ldr	r3, [r7, #12]
 }
     a44:	0018      	movs	r0, r3
     a46:	46bd      	mov	sp, r7
     a48:	b004      	add	sp, #16
     a4a:	bd80      	pop	{r7, pc}
     a4c:	00000a55 	.word	0x00000a55
     a50:	00000939 	.word	0x00000939

00000a54 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
     a54:	b580      	push	{r7, lr}
     a56:	b082      	sub	sp, #8
     a58:	af00      	add	r7, sp, #0
     a5a:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     a5c:	687b      	ldr	r3, [r7, #4]
     a5e:	7c1b      	ldrb	r3, [r3, #16]
     a60:	2201      	movs	r2, #1
     a62:	4053      	eors	r3, r2
     a64:	b2db      	uxtb	r3, r3
     a66:	2b00      	cmp	r3, #0
     a68:	d007      	beq.n	a7a <circular_buf_empty+0x26>
     a6a:	687b      	ldr	r3, [r7, #4]
     a6c:	685a      	ldr	r2, [r3, #4]
     a6e:	687b      	ldr	r3, [r7, #4]
     a70:	689b      	ldr	r3, [r3, #8]
     a72:	429a      	cmp	r2, r3
     a74:	d101      	bne.n	a7a <circular_buf_empty+0x26>
     a76:	2301      	movs	r3, #1
     a78:	e000      	b.n	a7c <circular_buf_empty+0x28>
     a7a:	2300      	movs	r3, #0
     a7c:	1c1a      	adds	r2, r3, #0
     a7e:	2301      	movs	r3, #1
     a80:	4013      	ands	r3, r2
     a82:	b2db      	uxtb	r3, r3
 }
     a84:	0018      	movs	r0, r3
     a86:	46bd      	mov	sp, r7
     a88:	b002      	add	sp, #8
     a8a:	bd80      	pop	{r7, pc}

00000a8c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     a8c:	b580      	push	{r7, lr}
     a8e:	b082      	sub	sp, #8
     a90:	af00      	add	r7, sp, #0
     a92:	0002      	movs	r2, r0
     a94:	1dfb      	adds	r3, r7, #7
     a96:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     a98:	4b06      	ldr	r3, [pc, #24]	; (ab4 <system_interrupt_enable+0x28>)
     a9a:	1dfa      	adds	r2, r7, #7
     a9c:	7812      	ldrb	r2, [r2, #0]
     a9e:	0011      	movs	r1, r2
     aa0:	221f      	movs	r2, #31
     aa2:	400a      	ands	r2, r1
     aa4:	2101      	movs	r1, #1
     aa6:	4091      	lsls	r1, r2
     aa8:	000a      	movs	r2, r1
     aaa:	601a      	str	r2, [r3, #0]
}
     aac:	46c0      	nop			; (mov r8, r8)
     aae:	46bd      	mov	sp, r7
     ab0:	b002      	add	sp, #8
     ab2:	bd80      	pop	{r7, pc}
     ab4:	e000e100 	.word	0xe000e100

00000ab8 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     ab8:	b580      	push	{r7, lr}
     aba:	b082      	sub	sp, #8
     abc:	af00      	add	r7, sp, #0
     abe:	0002      	movs	r2, r0
     ac0:	1dfb      	adds	r3, r7, #7
     ac2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     ac4:	4a07      	ldr	r2, [pc, #28]	; (ae4 <system_interrupt_disable+0x2c>)
     ac6:	1dfb      	adds	r3, r7, #7
     ac8:	781b      	ldrb	r3, [r3, #0]
     aca:	0019      	movs	r1, r3
     acc:	231f      	movs	r3, #31
     ace:	400b      	ands	r3, r1
     ad0:	2101      	movs	r1, #1
     ad2:	4099      	lsls	r1, r3
     ad4:	000b      	movs	r3, r1
     ad6:	0019      	movs	r1, r3
     ad8:	2380      	movs	r3, #128	; 0x80
     ada:	50d1      	str	r1, [r2, r3]
}
     adc:	46c0      	nop			; (mov r8, r8)
     ade:	46bd      	mov	sp, r7
     ae0:	b002      	add	sp, #8
     ae2:	bd80      	pop	{r7, pc}
     ae4:	e000e100 	.word	0xe000e100

00000ae8 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     ae8:	b580      	push	{r7, lr}
     aea:	b084      	sub	sp, #16
     aec:	af00      	add	r7, sp, #0
     aee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     af0:	687b      	ldr	r3, [r7, #4]
     af2:	681b      	ldr	r3, [r3, #0]
     af4:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     af6:	68fb      	ldr	r3, [r7, #12]
     af8:	69db      	ldr	r3, [r3, #28]
     afa:	1e5a      	subs	r2, r3, #1
     afc:	4193      	sbcs	r3, r2
     afe:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     b00:	0018      	movs	r0, r3
     b02:	46bd      	mov	sp, r7
     b04:	b004      	add	sp, #16
     b06:	bd80      	pop	{r7, pc}

00000b08 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     b08:	b580      	push	{r7, lr}
     b0a:	b082      	sub	sp, #8
     b0c:	af00      	add	r7, sp, #0
     b0e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     b10:	46c0      	nop			; (mov r8, r8)
     b12:	687b      	ldr	r3, [r7, #4]
     b14:	0018      	movs	r0, r3
     b16:	4b04      	ldr	r3, [pc, #16]	; (b28 <_usart_wait_for_sync+0x20>)
     b18:	4798      	blx	r3
     b1a:	1e03      	subs	r3, r0, #0
     b1c:	d1f9      	bne.n	b12 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     b1e:	46c0      	nop			; (mov r8, r8)
     b20:	46bd      	mov	sp, r7
     b22:	b002      	add	sp, #8
     b24:	bd80      	pop	{r7, pc}
     b26:	46c0      	nop			; (mov r8, r8)
     b28:	00000ae9 	.word	0x00000ae9

00000b2c <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
     b2c:	b580      	push	{r7, lr}
     b2e:	b082      	sub	sp, #8
     b30:	af00      	add	r7, sp, #0
     b32:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     b34:	687b      	ldr	r3, [r7, #4]
     b36:	2280      	movs	r2, #128	; 0x80
     b38:	05d2      	lsls	r2, r2, #23
     b3a:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     b3c:	687b      	ldr	r3, [r7, #4]
     b3e:	2200      	movs	r2, #0
     b40:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     b42:	687b      	ldr	r3, [r7, #4]
     b44:	22ff      	movs	r2, #255	; 0xff
     b46:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     b48:	687b      	ldr	r3, [r7, #4]
     b4a:	2200      	movs	r2, #0
     b4c:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     b4e:	687b      	ldr	r3, [r7, #4]
     b50:	2200      	movs	r2, #0
     b52:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
     b54:	687b      	ldr	r3, [r7, #4]
     b56:	2296      	movs	r2, #150	; 0x96
     b58:	0192      	lsls	r2, r2, #6
     b5a:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
     b5c:	687b      	ldr	r3, [r7, #4]
     b5e:	2224      	movs	r2, #36	; 0x24
     b60:	2101      	movs	r1, #1
     b62:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
     b64:	687b      	ldr	r3, [r7, #4]
     b66:	2225      	movs	r2, #37	; 0x25
     b68:	2101      	movs	r1, #1
     b6a:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
     b6c:	687b      	ldr	r3, [r7, #4]
     b6e:	2226      	movs	r2, #38	; 0x26
     b70:	2100      	movs	r1, #0
     b72:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
     b74:	687b      	ldr	r3, [r7, #4]
     b76:	2227      	movs	r2, #39	; 0x27
     b78:	2100      	movs	r1, #0
     b7a:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
     b7c:	687b      	ldr	r3, [r7, #4]
     b7e:	2200      	movs	r2, #0
     b80:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
     b82:	687b      	ldr	r3, [r7, #4]
     b84:	2288      	movs	r2, #136	; 0x88
     b86:	0352      	lsls	r2, r2, #13
     b88:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
     b8a:	687b      	ldr	r3, [r7, #4]
     b8c:	222c      	movs	r2, #44	; 0x2c
     b8e:	2100      	movs	r1, #0
     b90:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
     b92:	687b      	ldr	r3, [r7, #4]
     b94:	222d      	movs	r2, #45	; 0x2d
     b96:	2100      	movs	r1, #0
     b98:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     b9a:	687b      	ldr	r3, [r7, #4]
     b9c:	2200      	movs	r2, #0
     b9e:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
     ba0:	687b      	ldr	r3, [r7, #4]
     ba2:	2200      	movs	r2, #0
     ba4:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
     ba6:	687b      	ldr	r3, [r7, #4]
     ba8:	2200      	movs	r2, #0
     baa:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
     bac:	687b      	ldr	r3, [r7, #4]
     bae:	2200      	movs	r2, #0
     bb0:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     bb2:	687b      	ldr	r3, [r7, #4]
     bb4:	2200      	movs	r2, #0
     bb6:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     bb8:	687b      	ldr	r3, [r7, #4]
     bba:	2200      	movs	r2, #0
     bbc:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     bbe:	687b      	ldr	r3, [r7, #4]
     bc0:	2200      	movs	r2, #0
     bc2:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     bc4:	687b      	ldr	r3, [r7, #4]
     bc6:	2200      	movs	r2, #0
     bc8:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     bca:	687b      	ldr	r3, [r7, #4]
     bcc:	2200      	movs	r2, #0
     bce:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     bd0:	687b      	ldr	r3, [r7, #4]
     bd2:	2200      	movs	r2, #0
     bd4:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
     bd6:	687b      	ldr	r3, [r7, #4]
     bd8:	2213      	movs	r2, #19
     bda:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     bdc:	687b      	ldr	r3, [r7, #4]
     bde:	2200      	movs	r2, #0
     be0:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
     be2:	46c0      	nop			; (mov r8, r8)
     be4:	46bd      	mov	sp, r7
     be6:	b002      	add	sp, #8
     be8:	bd80      	pop	{r7, pc}
	...

00000bec <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
     bec:	b580      	push	{r7, lr}
     bee:	b084      	sub	sp, #16
     bf0:	af00      	add	r7, sp, #0
     bf2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     bf4:	687b      	ldr	r3, [r7, #4]
     bf6:	681b      	ldr	r3, [r3, #0]
     bf8:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     bfa:	687b      	ldr	r3, [r7, #4]
     bfc:	681b      	ldr	r3, [r3, #0]
     bfe:	0018      	movs	r0, r3
     c00:	4b09      	ldr	r3, [pc, #36]	; (c28 <usart_enable+0x3c>)
     c02:	4798      	blx	r3
     c04:	0003      	movs	r3, r0
     c06:	0018      	movs	r0, r3
     c08:	4b08      	ldr	r3, [pc, #32]	; (c2c <usart_enable+0x40>)
     c0a:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     c0c:	687b      	ldr	r3, [r7, #4]
     c0e:	0018      	movs	r0, r3
     c10:	4b07      	ldr	r3, [pc, #28]	; (c30 <usart_enable+0x44>)
     c12:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     c14:	68fb      	ldr	r3, [r7, #12]
     c16:	681b      	ldr	r3, [r3, #0]
     c18:	2202      	movs	r2, #2
     c1a:	431a      	orrs	r2, r3
     c1c:	68fb      	ldr	r3, [r7, #12]
     c1e:	601a      	str	r2, [r3, #0]
}
     c20:	46c0      	nop			; (mov r8, r8)
     c22:	46bd      	mov	sp, r7
     c24:	b004      	add	sp, #16
     c26:	bd80      	pop	{r7, pc}
     c28:	00003ecd 	.word	0x00003ecd
     c2c:	00000a8d 	.word	0x00000a8d
     c30:	00000b09 	.word	0x00000b09

00000c34 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
     c34:	b580      	push	{r7, lr}
     c36:	b084      	sub	sp, #16
     c38:	af00      	add	r7, sp, #0
     c3a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     c3c:	687b      	ldr	r3, [r7, #4]
     c3e:	681b      	ldr	r3, [r3, #0]
     c40:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	681b      	ldr	r3, [r3, #0]
     c46:	0018      	movs	r0, r3
     c48:	4b0a      	ldr	r3, [pc, #40]	; (c74 <usart_disable+0x40>)
     c4a:	4798      	blx	r3
     c4c:	0003      	movs	r3, r0
     c4e:	0018      	movs	r0, r3
     c50:	4b09      	ldr	r3, [pc, #36]	; (c78 <usart_disable+0x44>)
     c52:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     c54:	687b      	ldr	r3, [r7, #4]
     c56:	0018      	movs	r0, r3
     c58:	4b08      	ldr	r3, [pc, #32]	; (c7c <usart_disable+0x48>)
     c5a:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     c5c:	68fb      	ldr	r3, [r7, #12]
     c5e:	681b      	ldr	r3, [r3, #0]
     c60:	2202      	movs	r2, #2
     c62:	4393      	bics	r3, r2
     c64:	001a      	movs	r2, r3
     c66:	68fb      	ldr	r3, [r7, #12]
     c68:	601a      	str	r2, [r3, #0]
}
     c6a:	46c0      	nop			; (mov r8, r8)
     c6c:	46bd      	mov	sp, r7
     c6e:	b004      	add	sp, #16
     c70:	bd80      	pop	{r7, pc}
     c72:	46c0      	nop			; (mov r8, r8)
     c74:	00003ecd 	.word	0x00003ecd
     c78:	00000ab9 	.word	0x00000ab9
     c7c:	00000b09 	.word	0x00000b09

00000c80 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
     c80:	b580      	push	{r7, lr}
     c82:	b082      	sub	sp, #8
     c84:	af00      	add	r7, sp, #0
     c86:	6078      	str	r0, [r7, #4]
     c88:	000a      	movs	r2, r1
     c8a:	1cfb      	adds	r3, r7, #3
     c8c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     c8e:	687b      	ldr	r3, [r7, #4]
     c90:	2231      	movs	r2, #49	; 0x31
     c92:	5c9b      	ldrb	r3, [r3, r2]
     c94:	b25a      	sxtb	r2, r3
     c96:	1cfb      	adds	r3, r7, #3
     c98:	781b      	ldrb	r3, [r3, #0]
     c9a:	2101      	movs	r1, #1
     c9c:	4099      	lsls	r1, r3
     c9e:	000b      	movs	r3, r1
     ca0:	b25b      	sxtb	r3, r3
     ca2:	4313      	orrs	r3, r2
     ca4:	b25b      	sxtb	r3, r3
     ca6:	b2d9      	uxtb	r1, r3
     ca8:	687b      	ldr	r3, [r7, #4]
     caa:	2231      	movs	r2, #49	; 0x31
     cac:	5499      	strb	r1, [r3, r2]

}
     cae:	46c0      	nop			; (mov r8, r8)
     cb0:	46bd      	mov	sp, r7
     cb2:	b002      	add	sp, #8
     cb4:	bd80      	pop	{r7, pc}
	...

00000cb8 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     cb8:	b580      	push	{r7, lr}
     cba:	b082      	sub	sp, #8
     cbc:	af00      	add	r7, sp, #0
     cbe:	6078      	str	r0, [r7, #4]
     cc0:	000a      	movs	r2, r1
     cc2:	1cfb      	adds	r3, r7, #3
     cc4:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
     cc6:	46c0      	nop			; (mov r8, r8)
     cc8:	1cfb      	adds	r3, r7, #3
     cca:	781b      	ldrb	r3, [r3, #0]
     ccc:	b29a      	uxth	r2, r3
     cce:	687b      	ldr	r3, [r7, #4]
     cd0:	0011      	movs	r1, r2
     cd2:	0018      	movs	r0, r3
     cd4:	4b04      	ldr	r3, [pc, #16]	; (ce8 <usart_serial_putchar+0x30>)
     cd6:	4798      	blx	r3
     cd8:	1e03      	subs	r3, r0, #0
     cda:	d1f5      	bne.n	cc8 <usart_serial_putchar+0x10>

	return STATUS_OK;
     cdc:	2300      	movs	r3, #0
}
     cde:	0018      	movs	r0, r3
     ce0:	46bd      	mov	sp, r7
     ce2:	b002      	add	sp, #8
     ce4:	bd80      	pop	{r7, pc}
     ce6:	46c0      	nop			; (mov r8, r8)
     ce8:	000055e5 	.word	0x000055e5

00000cec <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     cec:	b580      	push	{r7, lr}
     cee:	b084      	sub	sp, #16
     cf0:	af00      	add	r7, sp, #0
     cf2:	6078      	str	r0, [r7, #4]
     cf4:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
     cf6:	230e      	movs	r3, #14
     cf8:	18fb      	adds	r3, r7, r3
     cfa:	2200      	movs	r2, #0
     cfc:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
     cfe:	46c0      	nop			; (mov r8, r8)
     d00:	230e      	movs	r3, #14
     d02:	18fa      	adds	r2, r7, r3
     d04:	687b      	ldr	r3, [r7, #4]
     d06:	0011      	movs	r1, r2
     d08:	0018      	movs	r0, r3
     d0a:	4b07      	ldr	r3, [pc, #28]	; (d28 <usart_serial_getchar+0x3c>)
     d0c:	4798      	blx	r3
     d0e:	1e03      	subs	r3, r0, #0
     d10:	d1f6      	bne.n	d00 <usart_serial_getchar+0x14>

	*c = temp;
     d12:	230e      	movs	r3, #14
     d14:	18fb      	adds	r3, r7, r3
     d16:	881b      	ldrh	r3, [r3, #0]
     d18:	b2da      	uxtb	r2, r3
     d1a:	683b      	ldr	r3, [r7, #0]
     d1c:	701a      	strb	r2, [r3, #0]
}
     d1e:	46c0      	nop			; (mov r8, r8)
     d20:	46bd      	mov	sp, r7
     d22:	b004      	add	sp, #16
     d24:	bd80      	pop	{r7, pc}
     d26:	46c0      	nop			; (mov r8, r8)
     d28:	00005649 	.word	0x00005649

00000d2c <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
     d2c:	b580      	push	{r7, lr}
     d2e:	b084      	sub	sp, #16
     d30:	af00      	add	r7, sp, #0
     d32:	60f8      	str	r0, [r7, #12]
     d34:	60b9      	str	r1, [r7, #8]
     d36:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
     d38:	4b0d      	ldr	r3, [pc, #52]	; (d70 <stdio_serial_init+0x44>)
     d3a:	68fa      	ldr	r2, [r7, #12]
     d3c:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     d3e:	4b0d      	ldr	r3, [pc, #52]	; (d74 <stdio_serial_init+0x48>)
     d40:	4a0d      	ldr	r2, [pc, #52]	; (d78 <stdio_serial_init+0x4c>)
     d42:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     d44:	4b0d      	ldr	r3, [pc, #52]	; (d7c <stdio_serial_init+0x50>)
     d46:	4a0e      	ldr	r2, [pc, #56]	; (d80 <stdio_serial_init+0x54>)
     d48:	601a      	str	r2, [r3, #0]

	//usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     d4a:	4b0e      	ldr	r3, [pc, #56]	; (d84 <stdio_serial_init+0x58>)
     d4c:	681b      	ldr	r3, [r3, #0]
     d4e:	689b      	ldr	r3, [r3, #8]
     d50:	2100      	movs	r1, #0
     d52:	0018      	movs	r0, r3
     d54:	4b0c      	ldr	r3, [pc, #48]	; (d88 <stdio_serial_init+0x5c>)
     d56:	4798      	blx	r3
	setbuf(stdin, NULL);
     d58:	4b0a      	ldr	r3, [pc, #40]	; (d84 <stdio_serial_init+0x58>)
     d5a:	681b      	ldr	r3, [r3, #0]
     d5c:	685b      	ldr	r3, [r3, #4]
     d5e:	2100      	movs	r1, #0
     d60:	0018      	movs	r0, r3
     d62:	4b09      	ldr	r3, [pc, #36]	; (d88 <stdio_serial_init+0x5c>)
     d64:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
     d66:	46c0      	nop			; (mov r8, r8)
     d68:	46bd      	mov	sp, r7
     d6a:	b004      	add	sp, #16
     d6c:	bd80      	pop	{r7, pc}
     d6e:	46c0      	nop			; (mov r8, r8)
     d70:	20000a34 	.word	0x20000a34
     d74:	20000a30 	.word	0x20000a30
     d78:	00000cb9 	.word	0x00000cb9
     d7c:	20000a2c 	.word	0x20000a2c
     d80:	00000ced 	.word	0x00000ced
     d84:	2000006c 	.word	0x2000006c
     d88:	0000be01 	.word	0x0000be01

00000d8c <InitializeSerialConsole>:
*				asynchronous reads and writes. 
* @note			Call from main once to initialize Hardware.
*****************************************************************************/

void InitializeSerialConsole()
{
     d8c:	b580      	push	{r7, lr}
     d8e:	af00      	add	r7, sp, #0

	//Initialize circular buffers for RX and TX
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
     d90:	2380      	movs	r3, #128	; 0x80
     d92:	00da      	lsls	r2, r3, #3
     d94:	4b0f      	ldr	r3, [pc, #60]	; (dd4 <InitializeSerialConsole+0x48>)
     d96:	0011      	movs	r1, r2
     d98:	0018      	movs	r0, r3
     d9a:	4b0f      	ldr	r3, [pc, #60]	; (dd8 <InitializeSerialConsole+0x4c>)
     d9c:	4798      	blx	r3
     d9e:	0002      	movs	r2, r0
     da0:	4b0e      	ldr	r3, [pc, #56]	; (ddc <InitializeSerialConsole+0x50>)
     da2:	601a      	str	r2, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, TX_BUFFER_SIZE);
     da4:	2380      	movs	r3, #128	; 0x80
     da6:	00da      	lsls	r2, r3, #3
     da8:	4b0d      	ldr	r3, [pc, #52]	; (de0 <InitializeSerialConsole+0x54>)
     daa:	0011      	movs	r1, r2
     dac:	0018      	movs	r0, r3
     dae:	4b0a      	ldr	r3, [pc, #40]	; (dd8 <InitializeSerialConsole+0x4c>)
     db0:	4798      	blx	r3
     db2:	0002      	movs	r2, r0
     db4:	4b0b      	ldr	r3, [pc, #44]	; (de4 <InitializeSerialConsole+0x58>)
     db6:	601a      	str	r2, [r3, #0]

	//Configure USART and Callbacks
	configure_usart();
     db8:	4b0b      	ldr	r3, [pc, #44]	; (de8 <InitializeSerialConsole+0x5c>)
     dba:	4798      	blx	r3
	configure_usart_callbacks();
     dbc:	4b0b      	ldr	r3, [pc, #44]	; (dec <InitializeSerialConsole+0x60>)
     dbe:	4798      	blx	r3

	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
     dc0:	490b      	ldr	r1, [pc, #44]	; (df0 <InitializeSerialConsole+0x64>)
     dc2:	4b0c      	ldr	r3, [pc, #48]	; (df4 <InitializeSerialConsole+0x68>)
     dc4:	2201      	movs	r2, #1
     dc6:	0018      	movs	r0, r3
     dc8:	4b0b      	ldr	r3, [pc, #44]	; (df8 <InitializeSerialConsole+0x6c>)
     dca:	4798      	blx	r3

	//Add any other calls you need to do to initialize your Serial Console
}
     dcc:	46c0      	nop			; (mov r8, r8)
     dce:	46bd      	mov	sp, r7
     dd0:	bd80      	pop	{r7, pc}
     dd2:	46c0      	nop			; (mov r8, r8)
     dd4:	20000604 	.word	0x20000604
     dd8:	0000096d 	.word	0x0000096d
     ddc:	200001fc 	.word	0x200001fc
     de0:	20000204 	.word	0x20000204
     de4:	20000a08 	.word	0x20000a08
     de8:	00000ec1 	.word	0x00000ec1
     dec:	00000f49 	.word	0x00000f49
     df0:	20000200 	.word	0x20000200
     df4:	200001c8 	.word	0x200001c8
     df8:	00005905 	.word	0x00005905

00000dfc <DeinitializeSerialConsole>:


void DeinitializeSerialConsole()
{
     dfc:	b580      	push	{r7, lr}
     dfe:	af00      	add	r7, sp, #0
	usart_disable(&usart_instance);
     e00:	4b03      	ldr	r3, [pc, #12]	; (e10 <DeinitializeSerialConsole+0x14>)
     e02:	0018      	movs	r0, r3
     e04:	4b03      	ldr	r3, [pc, #12]	; (e14 <DeinitializeSerialConsole+0x18>)
     e06:	4798      	blx	r3
}
     e08:	46c0      	nop			; (mov r8, r8)
     e0a:	46bd      	mov	sp, r7
     e0c:	bd80      	pop	{r7, pc}
     e0e:	46c0      	nop			; (mov r8, r8)
     e10:	200001c8 	.word	0x200001c8
     e14:	00000c35 	.word	0x00000c35

00000e18 <SerialConsoleWriteString>:
* @brief		Writes a string to be written to the uart. Copies the string to a ring buffer that is used to hold the text send to the uart
* @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'
* @note			Use to send a string of characters to the user via UART
*****************************************************************************/
void SerialConsoleWriteString(char * string)
{
     e18:	b580      	push	{r7, lr}
     e1a:	b084      	sub	sp, #16
     e1c:	af00      	add	r7, sp, #0
     e1e:	6078      	str	r0, [r7, #4]
	if(string != NULL)
     e20:	687b      	ldr	r3, [r7, #4]
     e22:	2b00      	cmp	r3, #0
     e24:	d02a      	beq.n	e7c <SerialConsoleWriteString+0x64>
	{
		for (size_t iter = 0; iter < strlen(string); iter++)
     e26:	2300      	movs	r3, #0
     e28:	60fb      	str	r3, [r7, #12]
     e2a:	e00b      	b.n	e44 <SerialConsoleWriteString+0x2c>
		{
			circular_buf_put(cbufTx, string[iter]);
     e2c:	4b15      	ldr	r3, [pc, #84]	; (e84 <SerialConsoleWriteString+0x6c>)
     e2e:	6818      	ldr	r0, [r3, #0]
     e30:	687a      	ldr	r2, [r7, #4]
     e32:	68fb      	ldr	r3, [r7, #12]
     e34:	18d3      	adds	r3, r2, r3
     e36:	781b      	ldrb	r3, [r3, #0]
     e38:	0019      	movs	r1, r3
     e3a:	4b13      	ldr	r3, [pc, #76]	; (e88 <SerialConsoleWriteString+0x70>)
     e3c:	4798      	blx	r3
		for (size_t iter = 0; iter < strlen(string); iter++)
     e3e:	68fb      	ldr	r3, [r7, #12]
     e40:	3301      	adds	r3, #1
     e42:	60fb      	str	r3, [r7, #12]
     e44:	687b      	ldr	r3, [r7, #4]
     e46:	0018      	movs	r0, r3
     e48:	4b10      	ldr	r3, [pc, #64]	; (e8c <SerialConsoleWriteString+0x74>)
     e4a:	4798      	blx	r3
     e4c:	0002      	movs	r2, r0
     e4e:	68fb      	ldr	r3, [r7, #12]
     e50:	429a      	cmp	r2, r3
     e52:	d8eb      	bhi.n	e2c <SerialConsoleWriteString+0x14>
		}
		
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
     e54:	4b0e      	ldr	r3, [pc, #56]	; (e90 <SerialConsoleWriteString+0x78>)
     e56:	2101      	movs	r1, #1
     e58:	0018      	movs	r0, r3
     e5a:	4b0e      	ldr	r3, [pc, #56]	; (e94 <SerialConsoleWriteString+0x7c>)
     e5c:	4798      	blx	r3
     e5e:	1e03      	subs	r3, r0, #0
     e60:	d10c      	bne.n	e7c <SerialConsoleWriteString+0x64>
		{
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
     e62:	4b08      	ldr	r3, [pc, #32]	; (e84 <SerialConsoleWriteString+0x6c>)
     e64:	681b      	ldr	r3, [r3, #0]
     e66:	4a0c      	ldr	r2, [pc, #48]	; (e98 <SerialConsoleWriteString+0x80>)
     e68:	0011      	movs	r1, r2
     e6a:	0018      	movs	r0, r3
     e6c:	4b0b      	ldr	r3, [pc, #44]	; (e9c <SerialConsoleWriteString+0x84>)
     e6e:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     e70:	4909      	ldr	r1, [pc, #36]	; (e98 <SerialConsoleWriteString+0x80>)
     e72:	4b07      	ldr	r3, [pc, #28]	; (e90 <SerialConsoleWriteString+0x78>)
     e74:	2201      	movs	r2, #1
     e76:	0018      	movs	r0, r3
     e78:	4b09      	ldr	r3, [pc, #36]	; (ea0 <SerialConsoleWriteString+0x88>)
     e7a:	4798      	blx	r3
		}
	}
}
     e7c:	46c0      	nop			; (mov r8, r8)
     e7e:	46bd      	mov	sp, r7
     e80:	b004      	add	sp, #16
     e82:	bd80      	pop	{r7, pc}
     e84:	20000a08 	.word	0x20000a08
     e88:	000009cd 	.word	0x000009cd
     e8c:	0000bfd1 	.word	0x0000bfd1
     e90:	200001c8 	.word	0x200001c8
     e94:	0000594d 	.word	0x0000594d
     e98:	20000a04 	.word	0x20000a04
     e9c:	00000a01 	.word	0x00000a01
     ea0:	000058bd 	.word	0x000058bd

00000ea4 <LogMessage>:
* @fn			LogMessage (Students to fill out this)
* @brief
* @note
*****************************************************************************/
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
     ea4:	b40e      	push	{r1, r2, r3}
     ea6:	b580      	push	{r7, lr}
     ea8:	b083      	sub	sp, #12
     eaa:	af00      	add	r7, sp, #0
     eac:	0002      	movs	r2, r0
     eae:	1dfb      	adds	r3, r7, #7
     eb0:	701a      	strb	r2, [r3, #0]


};
     eb2:	46c0      	nop			; (mov r8, r8)
     eb4:	46bd      	mov	sp, r7
     eb6:	b003      	add	sp, #12
     eb8:	bc80      	pop	{r7}
     eba:	bc08      	pop	{r3}
     ebc:	b003      	add	sp, #12
     ebe:	4718      	bx	r3

00000ec0 <configure_usart>:
* @fn			static void configure_usart(void)
* @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
* @note			
*****************************************************************************/
static void configure_usart(void)
{
     ec0:	b580      	push	{r7, lr}
     ec2:	b090      	sub	sp, #64	; 0x40
     ec4:	af00      	add	r7, sp, #0
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
     ec6:	003b      	movs	r3, r7
     ec8:	0018      	movs	r0, r3
     eca:	4b17      	ldr	r3, [pc, #92]	; (f28 <configure_usart+0x68>)
     ecc:	4798      	blx	r3

	config_usart.baudrate    = 115200;
     ece:	003b      	movs	r3, r7
     ed0:	22e1      	movs	r2, #225	; 0xe1
     ed2:	0252      	lsls	r2, r2, #9
     ed4:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     ed6:	003b      	movs	r3, r7
     ed8:	22c4      	movs	r2, #196	; 0xc4
     eda:	0392      	lsls	r2, r2, #14
     edc:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     ede:	003b      	movs	r3, r7
     ee0:	2201      	movs	r2, #1
     ee2:	4252      	negs	r2, r2
     ee4:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     ee6:	003b      	movs	r3, r7
     ee8:	2201      	movs	r2, #1
     eea:	4252      	negs	r2, r2
     eec:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     eee:	003b      	movs	r3, r7
     ef0:	4a0e      	ldr	r2, [pc, #56]	; (f2c <configure_usart+0x6c>)
     ef2:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     ef4:	003b      	movs	r3, r7
     ef6:	4a0e      	ldr	r2, [pc, #56]	; (f30 <configure_usart+0x70>)
     ef8:	63da      	str	r2, [r3, #60]	; 0x3c
	while (usart_init(&usart_instance,
     efa:	46c0      	nop			; (mov r8, r8)
     efc:	003a      	movs	r2, r7
     efe:	490d      	ldr	r1, [pc, #52]	; (f34 <configure_usart+0x74>)
     f00:	4b0d      	ldr	r3, [pc, #52]	; (f38 <configure_usart+0x78>)
     f02:	0018      	movs	r0, r3
     f04:	4b0d      	ldr	r3, [pc, #52]	; (f3c <configure_usart+0x7c>)
     f06:	4798      	blx	r3
     f08:	1e03      	subs	r3, r0, #0
     f0a:	d1f7      	bne.n	efc <configure_usart+0x3c>
					  EDBG_CDC_MODULE, 
					  &config_usart) != STATUS_OK) 
	{

	}
	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &config_usart);
     f0c:	003a      	movs	r2, r7
     f0e:	4909      	ldr	r1, [pc, #36]	; (f34 <configure_usart+0x74>)
     f10:	4b09      	ldr	r3, [pc, #36]	; (f38 <configure_usart+0x78>)
     f12:	0018      	movs	r0, r3
     f14:	4b0a      	ldr	r3, [pc, #40]	; (f40 <configure_usart+0x80>)
     f16:	4798      	blx	r3
	usart_enable(&usart_instance);
     f18:	4b07      	ldr	r3, [pc, #28]	; (f38 <configure_usart+0x78>)
     f1a:	0018      	movs	r0, r3
     f1c:	4b09      	ldr	r3, [pc, #36]	; (f44 <configure_usart+0x84>)
     f1e:	4798      	blx	r3
}
     f20:	46c0      	nop			; (mov r8, r8)
     f22:	46bd      	mov	sp, r7
     f24:	b010      	add	sp, #64	; 0x40
     f26:	bd80      	pop	{r7, pc}
     f28:	00000b2d 	.word	0x00000b2d
     f2c:	002a0003 	.word	0x002a0003
     f30:	002b0003 	.word	0x002b0003
     f34:	42001800 	.word	0x42001800
     f38:	200001c8 	.word	0x200001c8
     f3c:	00005371 	.word	0x00005371
     f40:	00000d2d 	.word	0x00000d2d
     f44:	00000bed 	.word	0x00000bed

00000f48 <configure_usart_callbacks>:
* @fn			static void configure_usart_callbacks(void)
* @brief		Code to register callbacks
* @note
*****************************************************************************/
static void configure_usart_callbacks(void)
{
     f48:	b580      	push	{r7, lr}
     f4a:	af00      	add	r7, sp, #0
	usart_register_callback(&usart_instance,
     f4c:	490c      	ldr	r1, [pc, #48]	; (f80 <configure_usart_callbacks+0x38>)
     f4e:	4b0d      	ldr	r3, [pc, #52]	; (f84 <configure_usart_callbacks+0x3c>)
     f50:	2200      	movs	r2, #0
     f52:	0018      	movs	r0, r3
     f54:	4b0c      	ldr	r3, [pc, #48]	; (f88 <configure_usart_callbacks+0x40>)
     f56:	4798      	blx	r3
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
     f58:	490c      	ldr	r1, [pc, #48]	; (f8c <configure_usart_callbacks+0x44>)
     f5a:	4b0a      	ldr	r3, [pc, #40]	; (f84 <configure_usart_callbacks+0x3c>)
     f5c:	2201      	movs	r2, #1
     f5e:	0018      	movs	r0, r3
     f60:	4b09      	ldr	r3, [pc, #36]	; (f88 <configure_usart_callbacks+0x40>)
     f62:	4798      	blx	r3
	usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
     f64:	4b07      	ldr	r3, [pc, #28]	; (f84 <configure_usart_callbacks+0x3c>)
     f66:	2100      	movs	r1, #0
     f68:	0018      	movs	r0, r3
     f6a:	4b09      	ldr	r3, [pc, #36]	; (f90 <configure_usart_callbacks+0x48>)
     f6c:	4798      	blx	r3
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
     f6e:	4b05      	ldr	r3, [pc, #20]	; (f84 <configure_usart_callbacks+0x3c>)
     f70:	2101      	movs	r1, #1
     f72:	0018      	movs	r0, r3
     f74:	4b06      	ldr	r3, [pc, #24]	; (f90 <configure_usart_callbacks+0x48>)
     f76:	4798      	blx	r3
}
     f78:	46c0      	nop			; (mov r8, r8)
     f7a:	46bd      	mov	sp, r7
     f7c:	bd80      	pop	{r7, pc}
     f7e:	46c0      	nop			; (mov r8, r8)
     f80:	00001005 	.word	0x00001005
     f84:	200001c8 	.word	0x200001c8
     f88:	00005875 	.word	0x00005875
     f8c:	00000f95 	.word	0x00000f95
     f90:	00000c81 	.word	0x00000c81

00000f94 <usart_read_callback>:
* @fn			void usart_read_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_read_callback(struct usart_module *const usart_module)
{
     f94:	b580      	push	{r7, lr}
     f96:	b084      	sub	sp, #16
     f98:	af00      	add	r7, sp, #0
     f9a:	6078      	str	r0, [r7, #4]
	//Order Echo
	SerialConsoleWriteString(&latestRx);
     f9c:	4b13      	ldr	r3, [pc, #76]	; (fec <usart_read_callback+0x58>)
     f9e:	0018      	movs	r0, r3
     fa0:	4b13      	ldr	r3, [pc, #76]	; (ff0 <usart_read_callback+0x5c>)
     fa2:	4798      	blx	r3
	if(latestRx == 0x08)
     fa4:	4b11      	ldr	r3, [pc, #68]	; (fec <usart_read_callback+0x58>)
     fa6:	781b      	ldrb	r3, [r3, #0]
     fa8:	2b08      	cmp	r3, #8
     faa:	d10c      	bne.n	fc6 <usart_read_callback+0x32>
	{
	char a[3];
	a[0] = 0x20;
     fac:	230c      	movs	r3, #12
     fae:	18fb      	adds	r3, r7, r3
     fb0:	2220      	movs	r2, #32
     fb2:	701a      	strb	r2, [r3, #0]
	a[1]= 0x08;
     fb4:	230c      	movs	r3, #12
     fb6:	18fb      	adds	r3, r7, r3
     fb8:	2208      	movs	r2, #8
     fba:	705a      	strb	r2, [r3, #1]
	SerialConsoleWriteString(&a);
     fbc:	230c      	movs	r3, #12
     fbe:	18fb      	adds	r3, r7, r3
     fc0:	0018      	movs	r0, r3
     fc2:	4b0b      	ldr	r3, [pc, #44]	; (ff0 <usart_read_callback+0x5c>)
     fc4:	4798      	blx	r3
	}
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
     fc6:	4b0b      	ldr	r3, [pc, #44]	; (ff4 <usart_read_callback+0x60>)
     fc8:	681a      	ldr	r2, [r3, #0]
     fca:	4b08      	ldr	r3, [pc, #32]	; (fec <usart_read_callback+0x58>)
     fcc:	781b      	ldrb	r3, [r3, #0]
     fce:	0019      	movs	r1, r3
     fd0:	0010      	movs	r0, r2
     fd2:	4b09      	ldr	r3, [pc, #36]	; (ff8 <usart_read_callback+0x64>)
     fd4:	4798      	blx	r3

	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
     fd6:	4905      	ldr	r1, [pc, #20]	; (fec <usart_read_callback+0x58>)
     fd8:	4b08      	ldr	r3, [pc, #32]	; (ffc <usart_read_callback+0x68>)
     fda:	2201      	movs	r2, #1
     fdc:	0018      	movs	r0, r3
     fde:	4b08      	ldr	r3, [pc, #32]	; (1000 <usart_read_callback+0x6c>)
     fe0:	4798      	blx	r3
}
     fe2:	46c0      	nop			; (mov r8, r8)
     fe4:	46bd      	mov	sp, r7
     fe6:	b004      	add	sp, #16
     fe8:	bd80      	pop	{r7, pc}
     fea:	46c0      	nop			; (mov r8, r8)
     fec:	20000200 	.word	0x20000200
     ff0:	00000e19 	.word	0x00000e19
     ff4:	200001fc 	.word	0x200001fc
     ff8:	000009cd 	.word	0x000009cd
     ffc:	200001c8 	.word	0x200001c8
    1000:	00005905 	.word	0x00005905

00001004 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
    1004:	b580      	push	{r7, lr}
    1006:	b082      	sub	sp, #8
    1008:	af00      	add	r7, sp, #0
    100a:	6078      	str	r0, [r7, #4]
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
    100c:	4b09      	ldr	r3, [pc, #36]	; (1034 <usart_write_callback+0x30>)
    100e:	681b      	ldr	r3, [r3, #0]
    1010:	4a09      	ldr	r2, [pc, #36]	; (1038 <usart_write_callback+0x34>)
    1012:	0011      	movs	r1, r2
    1014:	0018      	movs	r0, r3
    1016:	4b09      	ldr	r3, [pc, #36]	; (103c <usart_write_callback+0x38>)
    1018:	4798      	blx	r3
    101a:	0003      	movs	r3, r0
    101c:	3301      	adds	r3, #1
    101e:	d005      	beq.n	102c <usart_write_callback+0x28>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    1020:	4905      	ldr	r1, [pc, #20]	; (1038 <usart_write_callback+0x34>)
    1022:	4b07      	ldr	r3, [pc, #28]	; (1040 <usart_write_callback+0x3c>)
    1024:	2201      	movs	r2, #1
    1026:	0018      	movs	r0, r3
    1028:	4b06      	ldr	r3, [pc, #24]	; (1044 <usart_write_callback+0x40>)
    102a:	4798      	blx	r3
	}
	
}
    102c:	46c0      	nop			; (mov r8, r8)
    102e:	46bd      	mov	sp, r7
    1030:	b002      	add	sp, #8
    1032:	bd80      	pop	{r7, pc}
    1034:	20000a08 	.word	0x20000a08
    1038:	20000a04 	.word	0x20000a04
    103c:	00000a01 	.word	0x00000a01
    1040:	200001c8 	.word	0x200001c8
    1044:	000058bd 	.word	0x000058bd

00001048 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
    1048:	b590      	push	{r4, r7, lr}
    104a:	b087      	sub	sp, #28
    104c:	af00      	add	r7, sp, #0
    104e:	60f8      	str	r0, [r7, #12]
    1050:	000c      	movs	r4, r1
    1052:	0010      	movs	r0, r2
    1054:	0019      	movs	r1, r3
    1056:	230a      	movs	r3, #10
    1058:	18fb      	adds	r3, r7, r3
    105a:	1c22      	adds	r2, r4, #0
    105c:	801a      	strh	r2, [r3, #0]
    105e:	2308      	movs	r3, #8
    1060:	18fb      	adds	r3, r7, r3
    1062:	1c02      	adds	r2, r0, #0
    1064:	801a      	strh	r2, [r3, #0]
    1066:	1dfb      	adds	r3, r7, #7
    1068:	1c0a      	adds	r2, r1, #0
    106a:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    106c:	230a      	movs	r3, #10
    106e:	18fb      	adds	r3, r7, r3
    1070:	881a      	ldrh	r2, [r3, #0]
    1072:	2308      	movs	r3, #8
    1074:	18fb      	adds	r3, r7, r3
    1076:	881b      	ldrh	r3, [r3, #0]
    1078:	1ad3      	subs	r3, r2, r3
    107a:	3307      	adds	r3, #7
    107c:	2b00      	cmp	r3, #0
    107e:	da00      	bge.n	1082 <SDMMC_UNSTUFF_BITS+0x3a>
    1080:	3307      	adds	r3, #7
    1082:	10db      	asrs	r3, r3, #3
    1084:	3b01      	subs	r3, #1
    1086:	68fa      	ldr	r2, [r7, #12]
    1088:	18d3      	adds	r3, r2, r3
    108a:	781b      	ldrb	r3, [r3, #0]
    108c:	0019      	movs	r1, r3
    108e:	2308      	movs	r3, #8
    1090:	18fb      	adds	r3, r7, r3
    1092:	881b      	ldrh	r3, [r3, #0]
    1094:	2207      	movs	r2, #7
    1096:	4013      	ands	r3, r2
    1098:	4119      	asrs	r1, r3
    109a:	000b      	movs	r3, r1
    109c:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
    109e:	2308      	movs	r3, #8
    10a0:	18fb      	adds	r3, r7, r3
    10a2:	881b      	ldrh	r3, [r3, #0]
    10a4:	2207      	movs	r2, #7
    10a6:	401a      	ands	r2, r3
    10a8:	1dfb      	adds	r3, r7, #7
    10aa:	781b      	ldrb	r3, [r3, #0]
    10ac:	18d3      	adds	r3, r2, r3
    10ae:	2b08      	cmp	r3, #8
    10b0:	dd1c      	ble.n	10ec <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    10b2:	230a      	movs	r3, #10
    10b4:	18fb      	adds	r3, r7, r3
    10b6:	881a      	ldrh	r2, [r3, #0]
    10b8:	2308      	movs	r3, #8
    10ba:	18fb      	adds	r3, r7, r3
    10bc:	881b      	ldrh	r3, [r3, #0]
    10be:	1ad3      	subs	r3, r2, r3
    10c0:	3307      	adds	r3, #7
    10c2:	2b00      	cmp	r3, #0
    10c4:	da00      	bge.n	10c8 <SDMMC_UNSTUFF_BITS+0x80>
    10c6:	3307      	adds	r3, #7
    10c8:	10db      	asrs	r3, r3, #3
    10ca:	3b02      	subs	r3, #2
    10cc:	68fa      	ldr	r2, [r7, #12]
    10ce:	18d3      	adds	r3, r2, r3
    10d0:	781b      	ldrb	r3, [r3, #0]
    10d2:	0019      	movs	r1, r3
    10d4:	2308      	movs	r3, #8
    10d6:	18fb      	adds	r3, r7, r3
    10d8:	881b      	ldrh	r3, [r3, #0]
    10da:	2207      	movs	r2, #7
    10dc:	4013      	ands	r3, r2
    10de:	2208      	movs	r2, #8
    10e0:	1ad3      	subs	r3, r2, r3
    10e2:	4099      	lsls	r1, r3
    10e4:	000b      	movs	r3, r1
    10e6:	697a      	ldr	r2, [r7, #20]
    10e8:	4313      	orrs	r3, r2
    10ea:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    10ec:	2308      	movs	r3, #8
    10ee:	18fb      	adds	r3, r7, r3
    10f0:	881b      	ldrh	r3, [r3, #0]
    10f2:	2207      	movs	r2, #7
    10f4:	401a      	ands	r2, r3
    10f6:	1dfb      	adds	r3, r7, #7
    10f8:	781b      	ldrb	r3, [r3, #0]
    10fa:	18d3      	adds	r3, r2, r3
    10fc:	2b10      	cmp	r3, #16
    10fe:	dd1c      	ble.n	113a <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    1100:	230a      	movs	r3, #10
    1102:	18fb      	adds	r3, r7, r3
    1104:	881a      	ldrh	r2, [r3, #0]
    1106:	2308      	movs	r3, #8
    1108:	18fb      	adds	r3, r7, r3
    110a:	881b      	ldrh	r3, [r3, #0]
    110c:	1ad3      	subs	r3, r2, r3
    110e:	3307      	adds	r3, #7
    1110:	2b00      	cmp	r3, #0
    1112:	da00      	bge.n	1116 <SDMMC_UNSTUFF_BITS+0xce>
    1114:	3307      	adds	r3, #7
    1116:	10db      	asrs	r3, r3, #3
    1118:	3b03      	subs	r3, #3
    111a:	68fa      	ldr	r2, [r7, #12]
    111c:	18d3      	adds	r3, r2, r3
    111e:	781b      	ldrb	r3, [r3, #0]
    1120:	0019      	movs	r1, r3
    1122:	2308      	movs	r3, #8
    1124:	18fb      	adds	r3, r7, r3
    1126:	881b      	ldrh	r3, [r3, #0]
    1128:	2207      	movs	r2, #7
    112a:	4013      	ands	r3, r2
    112c:	2210      	movs	r2, #16
    112e:	1ad3      	subs	r3, r2, r3
    1130:	4099      	lsls	r1, r3
    1132:	000b      	movs	r3, r1
    1134:	697a      	ldr	r2, [r7, #20]
    1136:	4313      	orrs	r3, r2
    1138:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    113a:	2308      	movs	r3, #8
    113c:	18fb      	adds	r3, r7, r3
    113e:	881b      	ldrh	r3, [r3, #0]
    1140:	2207      	movs	r2, #7
    1142:	401a      	ands	r2, r3
    1144:	1dfb      	adds	r3, r7, #7
    1146:	781b      	ldrb	r3, [r3, #0]
    1148:	18d3      	adds	r3, r2, r3
    114a:	2b10      	cmp	r3, #16
    114c:	dd1c      	ble.n	1188 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    114e:	230a      	movs	r3, #10
    1150:	18fb      	adds	r3, r7, r3
    1152:	881a      	ldrh	r2, [r3, #0]
    1154:	2308      	movs	r3, #8
    1156:	18fb      	adds	r3, r7, r3
    1158:	881b      	ldrh	r3, [r3, #0]
    115a:	1ad3      	subs	r3, r2, r3
    115c:	3307      	adds	r3, #7
    115e:	2b00      	cmp	r3, #0
    1160:	da00      	bge.n	1164 <SDMMC_UNSTUFF_BITS+0x11c>
    1162:	3307      	adds	r3, #7
    1164:	10db      	asrs	r3, r3, #3
    1166:	3b03      	subs	r3, #3
    1168:	68fa      	ldr	r2, [r7, #12]
    116a:	18d3      	adds	r3, r2, r3
    116c:	781b      	ldrb	r3, [r3, #0]
    116e:	0019      	movs	r1, r3
    1170:	2308      	movs	r3, #8
    1172:	18fb      	adds	r3, r7, r3
    1174:	881b      	ldrh	r3, [r3, #0]
    1176:	2207      	movs	r2, #7
    1178:	4013      	ands	r3, r2
    117a:	2210      	movs	r2, #16
    117c:	1ad3      	subs	r3, r2, r3
    117e:	4099      	lsls	r1, r3
    1180:	000b      	movs	r3, r1
    1182:	697a      	ldr	r2, [r7, #20]
    1184:	4313      	orrs	r3, r2
    1186:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
    1188:	1dfb      	adds	r3, r7, #7
    118a:	781b      	ldrb	r3, [r3, #0]
    118c:	2201      	movs	r2, #1
    118e:	409a      	lsls	r2, r3
    1190:	0013      	movs	r3, r2
    1192:	1e5a      	subs	r2, r3, #1
    1194:	697b      	ldr	r3, [r7, #20]
    1196:	4013      	ands	r3, r2
    1198:	617b      	str	r3, [r7, #20]
	return value;
    119a:	697b      	ldr	r3, [r7, #20]
}
    119c:	0018      	movs	r0, r3
    119e:	46bd      	mov	sp, r7
    11a0:	b007      	add	sp, #28
    11a2:	bd90      	pop	{r4, r7, pc}

000011a4 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
    11a4:	b580      	push	{r7, lr}
    11a6:	b082      	sub	sp, #8
    11a8:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    11aa:	4b23      	ldr	r3, [pc, #140]	; (1238 <mmc_spi_op_cond+0x94>)
    11ac:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    11ae:	4b23      	ldr	r3, [pc, #140]	; (123c <mmc_spi_op_cond+0x98>)
    11b0:	2100      	movs	r1, #0
    11b2:	0018      	movs	r0, r3
    11b4:	4b22      	ldr	r3, [pc, #136]	; (1240 <mmc_spi_op_cond+0x9c>)
    11b6:	4798      	blx	r3
    11b8:	0003      	movs	r3, r0
    11ba:	001a      	movs	r2, r3
    11bc:	2301      	movs	r3, #1
    11be:	4053      	eors	r3, r2
    11c0:	b2db      	uxtb	r3, r3
    11c2:	2b00      	cmp	r3, #0
    11c4:	d001      	beq.n	11ca <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
    11c6:	2300      	movs	r3, #0
    11c8:	e031      	b.n	122e <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
    11ca:	4b1e      	ldr	r3, [pc, #120]	; (1244 <mmc_spi_op_cond+0xa0>)
    11cc:	4798      	blx	r3
    11ce:	0003      	movs	r3, r0
    11d0:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
    11d2:	683b      	ldr	r3, [r7, #0]
    11d4:	2201      	movs	r2, #1
    11d6:	4013      	ands	r3, r2
    11d8:	d006      	beq.n	11e8 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
    11da:	687b      	ldr	r3, [r7, #4]
    11dc:	1e5a      	subs	r2, r3, #1
    11de:	607a      	str	r2, [r7, #4]
    11e0:	2b00      	cmp	r3, #0
    11e2:	d1e4      	bne.n	11ae <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
    11e4:	2300      	movs	r3, #0
    11e6:	e022      	b.n	122e <mmc_spi_op_cond+0x8a>
			break;
    11e8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    11ea:	4b17      	ldr	r3, [pc, #92]	; (1248 <mmc_spi_op_cond+0xa4>)
    11ec:	2100      	movs	r1, #0
    11ee:	0018      	movs	r0, r3
    11f0:	4b13      	ldr	r3, [pc, #76]	; (1240 <mmc_spi_op_cond+0x9c>)
    11f2:	4798      	blx	r3
    11f4:	0003      	movs	r3, r0
    11f6:	001a      	movs	r2, r3
    11f8:	2301      	movs	r3, #1
    11fa:	4053      	eors	r3, r2
    11fc:	b2db      	uxtb	r3, r3
    11fe:	2b00      	cmp	r3, #0
    1200:	d001      	beq.n	1206 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    1202:	2300      	movs	r3, #0
    1204:	e013      	b.n	122e <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    1206:	4b0f      	ldr	r3, [pc, #60]	; (1244 <mmc_spi_op_cond+0xa0>)
    1208:	4798      	blx	r3
    120a:	0002      	movs	r2, r0
    120c:	23c0      	movs	r3, #192	; 0xc0
    120e:	05db      	lsls	r3, r3, #23
    1210:	401a      	ands	r2, r3
    1212:	2380      	movs	r3, #128	; 0x80
    1214:	05db      	lsls	r3, r3, #23
    1216:	429a      	cmp	r2, r3
    1218:	d108      	bne.n	122c <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
    121a:	4b0c      	ldr	r3, [pc, #48]	; (124c <mmc_spi_op_cond+0xa8>)
    121c:	681a      	ldr	r2, [r3, #0]
    121e:	4b0b      	ldr	r3, [pc, #44]	; (124c <mmc_spi_op_cond+0xa8>)
    1220:	681b      	ldr	r3, [r3, #0]
    1222:	7adb      	ldrb	r3, [r3, #11]
    1224:	2108      	movs	r1, #8
    1226:	430b      	orrs	r3, r1
    1228:	b2db      	uxtb	r3, r3
    122a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    122c:	2301      	movs	r3, #1
}
    122e:	0018      	movs	r0, r3
    1230:	46bd      	mov	sp, r7
    1232:	b002      	add	sp, #8
    1234:	bd80      	pop	{r7, pc}
    1236:	46c0      	nop			; (mov r8, r8)
    1238:	00001bee 	.word	0x00001bee
    123c:	00001101 	.word	0x00001101
    1240:	00002c3d 	.word	0x00002c3d
    1244:	00002e7d 	.word	0x00002e7d
    1248:	0000053a 	.word	0x0000053a
    124c:	2000011c 	.word	0x2000011c

00001250 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
    1250:	b580      	push	{r7, lr}
    1252:	b086      	sub	sp, #24
    1254:	af00      	add	r7, sp, #0
    1256:	0002      	movs	r2, r0
    1258:	1dfb      	adds	r3, r7, #7
    125a:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    125c:	4b2e      	ldr	r3, [pc, #184]	; (1318 <sd_spi_op_cond+0xc8>)
    125e:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    1260:	4b2e      	ldr	r3, [pc, #184]	; (131c <sd_spi_op_cond+0xcc>)
    1262:	2100      	movs	r1, #0
    1264:	0018      	movs	r0, r3
    1266:	4b2e      	ldr	r3, [pc, #184]	; (1320 <sd_spi_op_cond+0xd0>)
    1268:	4798      	blx	r3
    126a:	0003      	movs	r3, r0
    126c:	001a      	movs	r2, r3
    126e:	2301      	movs	r3, #1
    1270:	4053      	eors	r3, r2
    1272:	b2db      	uxtb	r3, r3
    1274:	2b00      	cmp	r3, #0
    1276:	d001      	beq.n	127c <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
    1278:	2300      	movs	r3, #0
    127a:	e048      	b.n	130e <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
    127c:	2300      	movs	r3, #0
    127e:	617b      	str	r3, [r7, #20]
		if (v2) {
    1280:	1dfb      	adds	r3, r7, #7
    1282:	781b      	ldrb	r3, [r3, #0]
    1284:	2b00      	cmp	r3, #0
    1286:	d004      	beq.n	1292 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
    1288:	697b      	ldr	r3, [r7, #20]
    128a:	2280      	movs	r2, #128	; 0x80
    128c:	05d2      	lsls	r2, r2, #23
    128e:	4313      	orrs	r3, r2
    1290:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    1292:	697b      	ldr	r3, [r7, #20]
    1294:	4a23      	ldr	r2, [pc, #140]	; (1324 <sd_spi_op_cond+0xd4>)
    1296:	0019      	movs	r1, r3
    1298:	0010      	movs	r0, r2
    129a:	4b21      	ldr	r3, [pc, #132]	; (1320 <sd_spi_op_cond+0xd0>)
    129c:	4798      	blx	r3
    129e:	0003      	movs	r3, r0
    12a0:	001a      	movs	r2, r3
    12a2:	2301      	movs	r3, #1
    12a4:	4053      	eors	r3, r2
    12a6:	b2db      	uxtb	r3, r3
    12a8:	2b00      	cmp	r3, #0
    12aa:	d001      	beq.n	12b0 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
    12ac:	2300      	movs	r3, #0
    12ae:	e02e      	b.n	130e <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
    12b0:	4b1d      	ldr	r3, [pc, #116]	; (1328 <sd_spi_op_cond+0xd8>)
    12b2:	4798      	blx	r3
    12b4:	0003      	movs	r3, r0
    12b6:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
    12b8:	68fb      	ldr	r3, [r7, #12]
    12ba:	2201      	movs	r2, #1
    12bc:	4013      	ands	r3, r2
    12be:	d006      	beq.n	12ce <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
    12c0:	693b      	ldr	r3, [r7, #16]
    12c2:	1e5a      	subs	r2, r3, #1
    12c4:	613a      	str	r2, [r7, #16]
    12c6:	2b00      	cmp	r3, #0
    12c8:	d1ca      	bne.n	1260 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
    12ca:	2300      	movs	r3, #0
    12cc:	e01f      	b.n	130e <sd_spi_op_cond+0xbe>
			break;
    12ce:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    12d0:	4b16      	ldr	r3, [pc, #88]	; (132c <sd_spi_op_cond+0xdc>)
    12d2:	2100      	movs	r1, #0
    12d4:	0018      	movs	r0, r3
    12d6:	4b12      	ldr	r3, [pc, #72]	; (1320 <sd_spi_op_cond+0xd0>)
    12d8:	4798      	blx	r3
    12da:	0003      	movs	r3, r0
    12dc:	001a      	movs	r2, r3
    12de:	2301      	movs	r3, #1
    12e0:	4053      	eors	r3, r2
    12e2:	b2db      	uxtb	r3, r3
    12e4:	2b00      	cmp	r3, #0
    12e6:	d001      	beq.n	12ec <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    12e8:	2300      	movs	r3, #0
    12ea:	e010      	b.n	130e <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
    12ec:	4b0e      	ldr	r3, [pc, #56]	; (1328 <sd_spi_op_cond+0xd8>)
    12ee:	4798      	blx	r3
    12f0:	0002      	movs	r2, r0
    12f2:	2380      	movs	r3, #128	; 0x80
    12f4:	05db      	lsls	r3, r3, #23
    12f6:	4013      	ands	r3, r2
    12f8:	d008      	beq.n	130c <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
    12fa:	4b0d      	ldr	r3, [pc, #52]	; (1330 <sd_spi_op_cond+0xe0>)
    12fc:	681a      	ldr	r2, [r3, #0]
    12fe:	4b0c      	ldr	r3, [pc, #48]	; (1330 <sd_spi_op_cond+0xe0>)
    1300:	681b      	ldr	r3, [r3, #0]
    1302:	7adb      	ldrb	r3, [r3, #11]
    1304:	2108      	movs	r1, #8
    1306:	430b      	orrs	r3, r1
    1308:	b2db      	uxtb	r3, r3
    130a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    130c:	2301      	movs	r3, #1
}
    130e:	0018      	movs	r0, r3
    1310:	46bd      	mov	sp, r7
    1312:	b006      	add	sp, #24
    1314:	bd80      	pop	{r7, pc}
    1316:	46c0      	nop			; (mov r8, r8)
    1318:	00001bee 	.word	0x00001bee
    131c:	00001137 	.word	0x00001137
    1320:	00002c3d 	.word	0x00002c3d
    1324:	00001129 	.word	0x00001129
    1328:	00002e7d 	.word	0x00002e7d
    132c:	0000053a 	.word	0x0000053a
    1330:	2000011c 	.word	0x2000011c

00001334 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
    1334:	b580      	push	{r7, lr}
    1336:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
    1338:	2301      	movs	r3, #1
}
    133a:	0018      	movs	r0, r3
    133c:	46bd      	mov	sp, r7
    133e:	bd80      	pop	{r7, pc}

00001340 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
    1340:	b580      	push	{r7, lr}
    1342:	b084      	sub	sp, #16
    1344:	af00      	add	r7, sp, #0
    1346:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
    1348:	687b      	ldr	r3, [r7, #4]
    134a:	2200      	movs	r2, #0
    134c:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    134e:	23d5      	movs	r3, #213	; 0xd5
    1350:	005b      	lsls	r3, r3, #1
    1352:	4a14      	ldr	r2, [pc, #80]	; (13a4 <sd_cmd8+0x64>)
    1354:	0019      	movs	r1, r3
    1356:	0010      	movs	r0, r2
    1358:	4b13      	ldr	r3, [pc, #76]	; (13a8 <sd_cmd8+0x68>)
    135a:	4798      	blx	r3
    135c:	0003      	movs	r3, r0
    135e:	001a      	movs	r2, r3
    1360:	2301      	movs	r3, #1
    1362:	4053      	eors	r3, r2
    1364:	b2db      	uxtb	r3, r3
    1366:	2b00      	cmp	r3, #0
    1368:	d001      	beq.n	136e <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
    136a:	2301      	movs	r3, #1
    136c:	e015      	b.n	139a <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
    136e:	4b0f      	ldr	r3, [pc, #60]	; (13ac <sd_cmd8+0x6c>)
    1370:	4798      	blx	r3
    1372:	0003      	movs	r3, r0
    1374:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
    1376:	68fb      	ldr	r3, [r7, #12]
    1378:	3301      	adds	r3, #1
    137a:	d101      	bne.n	1380 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
    137c:	2301      	movs	r3, #1
    137e:	e00c      	b.n	139a <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    1380:	68fb      	ldr	r3, [r7, #12]
    1382:	051b      	lsls	r3, r3, #20
    1384:	0d1a      	lsrs	r2, r3, #20
    1386:	23d5      	movs	r3, #213	; 0xd5
    1388:	005b      	lsls	r3, r3, #1
    138a:	429a      	cmp	r2, r3
    138c:	d001      	beq.n	1392 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
    138e:	2300      	movs	r3, #0
    1390:	e003      	b.n	139a <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
    1392:	687b      	ldr	r3, [r7, #4]
    1394:	2201      	movs	r2, #1
    1396:	701a      	strb	r2, [r3, #0]
	return true;
    1398:	2301      	movs	r3, #1
}
    139a:	0018      	movs	r0, r3
    139c:	46bd      	mov	sp, r7
    139e:	b004      	add	sp, #16
    13a0:	bd80      	pop	{r7, pc}
    13a2:	46c0      	nop			; (mov r8, r8)
    13a4:	00005508 	.word	0x00005508
    13a8:	00002c3d 	.word	0x00002c3d
    13ac:	00002e7d 	.word	0x00002e7d

000013b0 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
    13b0:	b590      	push	{r4, r7, lr}
    13b2:	b089      	sub	sp, #36	; 0x24
    13b4:	af02      	add	r7, sp, #8
    13b6:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    13b8:	2380      	movs	r3, #128	; 0x80
    13ba:	009a      	lsls	r2, r3, #2
    13bc:	4841      	ldr	r0, [pc, #260]	; (14c4 <mmc_cmd8+0x114>)
    13be:	2300      	movs	r3, #0
    13c0:	9300      	str	r3, [sp, #0]
    13c2:	2301      	movs	r3, #1
    13c4:	2100      	movs	r1, #0
    13c6:	4c40      	ldr	r4, [pc, #256]	; (14c8 <mmc_cmd8+0x118>)
    13c8:	47a0      	blx	r4
    13ca:	0003      	movs	r3, r0
    13cc:	001a      	movs	r2, r3
    13ce:	2301      	movs	r3, #1
    13d0:	4053      	eors	r3, r2
    13d2:	b2db      	uxtb	r3, r3
    13d4:	2b00      	cmp	r3, #0
    13d6:	d001      	beq.n	13dc <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
    13d8:	2300      	movs	r3, #0
    13da:	e06e      	b.n	14ba <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    13dc:	2316      	movs	r3, #22
    13de:	18fb      	adds	r3, r7, r3
    13e0:	2200      	movs	r2, #0
    13e2:	801a      	strh	r2, [r3, #0]
    13e4:	e014      	b.n	1410 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
    13e6:	2310      	movs	r3, #16
    13e8:	18fb      	adds	r3, r7, r3
    13ea:	0018      	movs	r0, r3
    13ec:	4b37      	ldr	r3, [pc, #220]	; (14cc <mmc_cmd8+0x11c>)
    13ee:	4798      	blx	r3
    13f0:	0003      	movs	r3, r0
    13f2:	001a      	movs	r2, r3
    13f4:	2301      	movs	r3, #1
    13f6:	4053      	eors	r3, r2
    13f8:	b2db      	uxtb	r3, r3
    13fa:	2b00      	cmp	r3, #0
    13fc:	d001      	beq.n	1402 <mmc_cmd8+0x52>
			return false;
    13fe:	2300      	movs	r3, #0
    1400:	e05b      	b.n	14ba <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    1402:	2316      	movs	r3, #22
    1404:	18fb      	adds	r3, r7, r3
    1406:	881a      	ldrh	r2, [r3, #0]
    1408:	2316      	movs	r3, #22
    140a:	18fb      	adds	r3, r7, r3
    140c:	3201      	adds	r2, #1
    140e:	801a      	strh	r2, [r3, #0]
    1410:	2316      	movs	r3, #22
    1412:	18fb      	adds	r3, r7, r3
    1414:	881b      	ldrh	r3, [r3, #0]
    1416:	2b31      	cmp	r3, #49	; 0x31
    1418:	d9e5      	bls.n	13e6 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
    141a:	693b      	ldr	r3, [r7, #16]
    141c:	b2db      	uxtb	r3, r3
    141e:	2202      	movs	r2, #2
    1420:	4013      	ands	r3, r2
    1422:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
    1424:	687b      	ldr	r3, [r7, #4]
    1426:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    1428:	4b29      	ldr	r3, [pc, #164]	; (14d0 <mmc_cmd8+0x120>)
    142a:	681b      	ldr	r3, [r3, #0]
    142c:	330e      	adds	r3, #14
    142e:	0018      	movs	r0, r3
    1430:	230c      	movs	r3, #12
    1432:	223e      	movs	r2, #62	; 0x3e
    1434:	2180      	movs	r1, #128	; 0x80
    1436:	4c27      	ldr	r4, [pc, #156]	; (14d4 <mmc_cmd8+0x124>)
    1438:	47a0      	blx	r4
    143a:	0002      	movs	r2, r0
    143c:	4b26      	ldr	r3, [pc, #152]	; (14d8 <mmc_cmd8+0x128>)
    143e:	429a      	cmp	r2, r3
    1440:	d135      	bne.n	14ae <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    1442:	e014      	b.n	146e <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
    1444:	230c      	movs	r3, #12
    1446:	18fb      	adds	r3, r7, r3
    1448:	0018      	movs	r0, r3
    144a:	4b20      	ldr	r3, [pc, #128]	; (14cc <mmc_cmd8+0x11c>)
    144c:	4798      	blx	r3
    144e:	0003      	movs	r3, r0
    1450:	001a      	movs	r2, r3
    1452:	2301      	movs	r3, #1
    1454:	4053      	eors	r3, r2
    1456:	b2db      	uxtb	r3, r3
    1458:	2b00      	cmp	r3, #0
    145a:	d001      	beq.n	1460 <mmc_cmd8+0xb0>
				return false;
    145c:	2300      	movs	r3, #0
    145e:	e02c      	b.n	14ba <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    1460:	2316      	movs	r3, #22
    1462:	18fb      	adds	r3, r7, r3
    1464:	881a      	ldrh	r2, [r3, #0]
    1466:	2316      	movs	r3, #22
    1468:	18fb      	adds	r3, r7, r3
    146a:	3201      	adds	r2, #1
    146c:	801a      	strh	r2, [r3, #0]
    146e:	2316      	movs	r3, #22
    1470:	18fb      	adds	r3, r7, r3
    1472:	881b      	ldrh	r3, [r3, #0]
    1474:	2b35      	cmp	r3, #53	; 0x35
    1476:	d9e5      	bls.n	1444 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
    1478:	4b15      	ldr	r3, [pc, #84]	; (14d0 <mmc_cmd8+0x120>)
    147a:	681b      	ldr	r3, [r3, #0]
    147c:	68fa      	ldr	r2, [r7, #12]
    147e:	0852      	lsrs	r2, r2, #1
    1480:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    1482:	e014      	b.n	14ae <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
    1484:	230c      	movs	r3, #12
    1486:	18fb      	adds	r3, r7, r3
    1488:	0018      	movs	r0, r3
    148a:	4b10      	ldr	r3, [pc, #64]	; (14cc <mmc_cmd8+0x11c>)
    148c:	4798      	blx	r3
    148e:	0003      	movs	r3, r0
    1490:	001a      	movs	r2, r3
    1492:	2301      	movs	r3, #1
    1494:	4053      	eors	r3, r2
    1496:	b2db      	uxtb	r3, r3
    1498:	2b00      	cmp	r3, #0
    149a:	d001      	beq.n	14a0 <mmc_cmd8+0xf0>
			return false;
    149c:	2300      	movs	r3, #0
    149e:	e00c      	b.n	14ba <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    14a0:	2316      	movs	r3, #22
    14a2:	18fb      	adds	r3, r7, r3
    14a4:	881a      	ldrh	r2, [r3, #0]
    14a6:	2316      	movs	r3, #22
    14a8:	18fb      	adds	r3, r7, r3
    14aa:	3201      	adds	r2, #1
    14ac:	801a      	strh	r2, [r3, #0]
    14ae:	2316      	movs	r3, #22
    14b0:	18fb      	adds	r3, r7, r3
    14b2:	881b      	ldrh	r3, [r3, #0]
    14b4:	2b7f      	cmp	r3, #127	; 0x7f
    14b6:	d9e5      	bls.n	1484 <mmc_cmd8+0xd4>
		}
	}
	return true;
    14b8:	2301      	movs	r3, #1
}
    14ba:	0018      	movs	r0, r3
    14bc:	46bd      	mov	sp, r7
    14be:	b007      	add	sp, #28
    14c0:	bd90      	pop	{r4, r7, pc}
    14c2:	46c0      	nop			; (mov r8, r8)
    14c4:	00081108 	.word	0x00081108
    14c8:	00002c65 	.word	0x00002c65
    14cc:	00002e91 	.word	0x00002e91
    14d0:	2000011c 	.word	0x2000011c
    14d4:	00001049 	.word	0x00001049
    14d8:	00000fff 	.word	0x00000fff

000014dc <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
    14dc:	b590      	push	{r4, r7, lr}
    14de:	b083      	sub	sp, #12
    14e0:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    14e2:	4b15      	ldr	r3, [pc, #84]	; (1538 <sd_mmc_cmd9_spi+0x5c>)
    14e4:	681b      	ldr	r3, [r3, #0]
    14e6:	891b      	ldrh	r3, [r3, #8]
    14e8:	0419      	lsls	r1, r3, #16
    14ea:	4814      	ldr	r0, [pc, #80]	; (153c <sd_mmc_cmd9_spi+0x60>)
    14ec:	2301      	movs	r3, #1
    14ee:	9300      	str	r3, [sp, #0]
    14f0:	2301      	movs	r3, #1
    14f2:	2210      	movs	r2, #16
    14f4:	4c12      	ldr	r4, [pc, #72]	; (1540 <sd_mmc_cmd9_spi+0x64>)
    14f6:	47a0      	blx	r4
    14f8:	0003      	movs	r3, r0
    14fa:	001a      	movs	r2, r3
    14fc:	2301      	movs	r3, #1
    14fe:	4053      	eors	r3, r2
    1500:	b2db      	uxtb	r3, r3
    1502:	2b00      	cmp	r3, #0
    1504:	d001      	beq.n	150a <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
    1506:	2300      	movs	r3, #0
    1508:	e012      	b.n	1530 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    150a:	4b0b      	ldr	r3, [pc, #44]	; (1538 <sd_mmc_cmd9_spi+0x5c>)
    150c:	681b      	ldr	r3, [r3, #0]
    150e:	330e      	adds	r3, #14
    1510:	2101      	movs	r1, #1
    1512:	0018      	movs	r0, r3
    1514:	4b0b      	ldr	r3, [pc, #44]	; (1544 <sd_mmc_cmd9_spi+0x68>)
    1516:	4798      	blx	r3
    1518:	0003      	movs	r3, r0
    151a:	001a      	movs	r2, r3
    151c:	2301      	movs	r3, #1
    151e:	4053      	eors	r3, r2
    1520:	b2db      	uxtb	r3, r3
    1522:	2b00      	cmp	r3, #0
    1524:	d001      	beq.n	152a <sd_mmc_cmd9_spi+0x4e>
		return false;
    1526:	2300      	movs	r3, #0
    1528:	e002      	b.n	1530 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
    152a:	4b07      	ldr	r3, [pc, #28]	; (1548 <sd_mmc_cmd9_spi+0x6c>)
    152c:	4798      	blx	r3
    152e:	0003      	movs	r3, r0
}
    1530:	0018      	movs	r0, r3
    1532:	46bd      	mov	sp, r7
    1534:	b001      	add	sp, #4
    1536:	bd90      	pop	{r4, r7, pc}
    1538:	2000011c 	.word	0x2000011c
    153c:	00081109 	.word	0x00081109
    1540:	00002c65 	.word	0x00002c65
    1544:	00002f35 	.word	0x00002f35
    1548:	00002fd9 	.word	0x00002fd9

0000154c <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
    154c:	b5b0      	push	{r4, r5, r7, lr}
    154e:	b084      	sub	sp, #16
    1550:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    1552:	4b45      	ldr	r3, [pc, #276]	; (1668 <mmc_decode_csd+0x11c>)
    1554:	681b      	ldr	r3, [r3, #0]
    1556:	330e      	adds	r3, #14
    1558:	0018      	movs	r0, r3
    155a:	2304      	movs	r3, #4
    155c:	227a      	movs	r2, #122	; 0x7a
    155e:	2180      	movs	r1, #128	; 0x80
    1560:	4c42      	ldr	r4, [pc, #264]	; (166c <mmc_decode_csd+0x120>)
    1562:	47a0      	blx	r4
    1564:	0003      	movs	r3, r0
    1566:	2b02      	cmp	r3, #2
    1568:	d011      	beq.n	158e <mmc_decode_csd+0x42>
    156a:	d802      	bhi.n	1572 <mmc_decode_csd+0x26>
    156c:	2b01      	cmp	r3, #1
    156e:	d009      	beq.n	1584 <mmc_decode_csd+0x38>
    1570:	e003      	b.n	157a <mmc_decode_csd+0x2e>
    1572:	2b03      	cmp	r3, #3
    1574:	d010      	beq.n	1598 <mmc_decode_csd+0x4c>
    1576:	2b04      	cmp	r3, #4
    1578:	d013      	beq.n	15a2 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    157a:	4b3b      	ldr	r3, [pc, #236]	; (1668 <mmc_decode_csd+0x11c>)
    157c:	681b      	ldr	r3, [r3, #0]
    157e:	2212      	movs	r2, #18
    1580:	731a      	strb	r2, [r3, #12]
		break;
    1582:	e013      	b.n	15ac <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    1584:	4b38      	ldr	r3, [pc, #224]	; (1668 <mmc_decode_csd+0x11c>)
    1586:	681b      	ldr	r3, [r3, #0]
    1588:	2214      	movs	r2, #20
    158a:	731a      	strb	r2, [r3, #12]
		break;
    158c:	e00e      	b.n	15ac <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    158e:	4b36      	ldr	r3, [pc, #216]	; (1668 <mmc_decode_csd+0x11c>)
    1590:	681b      	ldr	r3, [r3, #0]
    1592:	2222      	movs	r2, #34	; 0x22
    1594:	731a      	strb	r2, [r3, #12]
		break;
    1596:	e009      	b.n	15ac <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
    1598:	4b33      	ldr	r3, [pc, #204]	; (1668 <mmc_decode_csd+0x11c>)
    159a:	681b      	ldr	r3, [r3, #0]
    159c:	2230      	movs	r2, #48	; 0x30
    159e:	731a      	strb	r2, [r3, #12]
		break;
    15a0:	e004      	b.n	15ac <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
    15a2:	4b31      	ldr	r3, [pc, #196]	; (1668 <mmc_decode_csd+0x11c>)
    15a4:	681b      	ldr	r3, [r3, #0]
    15a6:	2240      	movs	r2, #64	; 0x40
    15a8:	731a      	strb	r2, [r3, #12]
		break;
    15aa:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    15ac:	4b2e      	ldr	r3, [pc, #184]	; (1668 <mmc_decode_csd+0x11c>)
    15ae:	681b      	ldr	r3, [r3, #0]
    15b0:	330e      	adds	r3, #14
    15b2:	0018      	movs	r0, r3
    15b4:	2308      	movs	r3, #8
    15b6:	2260      	movs	r2, #96	; 0x60
    15b8:	2180      	movs	r1, #128	; 0x80
    15ba:	4c2c      	ldr	r4, [pc, #176]	; (166c <mmc_decode_csd+0x120>)
    15bc:	47a0      	blx	r4
    15be:	0003      	movs	r3, r0
    15c0:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    15c2:	68fb      	ldr	r3, [r7, #12]
    15c4:	2207      	movs	r2, #7
    15c6:	401a      	ands	r2, r3
    15c8:	4b29      	ldr	r3, [pc, #164]	; (1670 <mmc_decode_csd+0x124>)
    15ca:	0092      	lsls	r2, r2, #2
    15cc:	58d3      	ldr	r3, [r2, r3]
    15ce:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    15d0:	68fb      	ldr	r3, [r7, #12]
    15d2:	08db      	lsrs	r3, r3, #3
    15d4:	220f      	movs	r2, #15
    15d6:	401a      	ands	r2, r3
    15d8:	4b26      	ldr	r3, [pc, #152]	; (1674 <mmc_decode_csd+0x128>)
    15da:	0092      	lsls	r2, r2, #2
    15dc:	58d3      	ldr	r3, [r2, r3]
    15de:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    15e0:	4b21      	ldr	r3, [pc, #132]	; (1668 <mmc_decode_csd+0x11c>)
    15e2:	681b      	ldr	r3, [r3, #0]
    15e4:	68ba      	ldr	r2, [r7, #8]
    15e6:	6879      	ldr	r1, [r7, #4]
    15e8:	434a      	muls	r2, r1
    15ea:	21fa      	movs	r1, #250	; 0xfa
    15ec:	0089      	lsls	r1, r1, #2
    15ee:	434a      	muls	r2, r1
    15f0:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    15f2:	4b1d      	ldr	r3, [pc, #116]	; (1668 <mmc_decode_csd+0x11c>)
    15f4:	681b      	ldr	r3, [r3, #0]
    15f6:	330e      	adds	r3, #14
    15f8:	0018      	movs	r0, r3
    15fa:	230c      	movs	r3, #12
    15fc:	223e      	movs	r2, #62	; 0x3e
    15fe:	2180      	movs	r1, #128	; 0x80
    1600:	4c1a      	ldr	r4, [pc, #104]	; (166c <mmc_decode_csd+0x120>)
    1602:	47a0      	blx	r4
    1604:	0002      	movs	r2, r0
    1606:	4b1c      	ldr	r3, [pc, #112]	; (1678 <mmc_decode_csd+0x12c>)
    1608:	429a      	cmp	r2, r3
    160a:	d028      	beq.n	165e <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    160c:	4b16      	ldr	r3, [pc, #88]	; (1668 <mmc_decode_csd+0x11c>)
    160e:	681b      	ldr	r3, [r3, #0]
    1610:	330e      	adds	r3, #14
    1612:	0018      	movs	r0, r3
    1614:	230c      	movs	r3, #12
    1616:	223e      	movs	r2, #62	; 0x3e
    1618:	2180      	movs	r1, #128	; 0x80
    161a:	4c14      	ldr	r4, [pc, #80]	; (166c <mmc_decode_csd+0x120>)
    161c:	47a0      	blx	r4
    161e:	0003      	movs	r3, r0
    1620:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    1622:	4b11      	ldr	r3, [pc, #68]	; (1668 <mmc_decode_csd+0x11c>)
    1624:	681b      	ldr	r3, [r3, #0]
    1626:	330e      	adds	r3, #14
    1628:	0018      	movs	r0, r3
    162a:	2303      	movs	r3, #3
    162c:	222f      	movs	r2, #47	; 0x2f
    162e:	2180      	movs	r1, #128	; 0x80
    1630:	4d0e      	ldr	r5, [pc, #56]	; (166c <mmc_decode_csd+0x120>)
    1632:	47a8      	blx	r5
    1634:	0003      	movs	r3, r0
    1636:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    1638:	409c      	lsls	r4, r3
    163a:	0023      	movs	r3, r4
    163c:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    163e:	4b0a      	ldr	r3, [pc, #40]	; (1668 <mmc_decode_csd+0x11c>)
    1640:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    1642:	4b09      	ldr	r3, [pc, #36]	; (1668 <mmc_decode_csd+0x11c>)
    1644:	681b      	ldr	r3, [r3, #0]
    1646:	330e      	adds	r3, #14
    1648:	0018      	movs	r0, r3
    164a:	2304      	movs	r3, #4
    164c:	2250      	movs	r2, #80	; 0x50
    164e:	2180      	movs	r1, #128	; 0x80
    1650:	4d06      	ldr	r5, [pc, #24]	; (166c <mmc_decode_csd+0x120>)
    1652:	47a8      	blx	r5
    1654:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    1656:	683b      	ldr	r3, [r7, #0]
    1658:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    165a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    165c:	6063      	str	r3, [r4, #4]
	}
}
    165e:	46c0      	nop			; (mov r8, r8)
    1660:	46bd      	mov	sp, r7
    1662:	b004      	add	sp, #16
    1664:	bdb0      	pop	{r4, r5, r7, pc}
    1666:	46c0      	nop			; (mov r8, r8)
    1668:	2000011c 	.word	0x2000011c
    166c:	00001049 	.word	0x00001049
    1670:	0000cc34 	.word	0x0000cc34
    1674:	0000cc90 	.word	0x0000cc90
    1678:	00000fff 	.word	0x00000fff

0000167c <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
    167c:	b5b0      	push	{r4, r5, r7, lr}
    167e:	b084      	sub	sp, #16
    1680:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    1682:	4b35      	ldr	r3, [pc, #212]	; (1758 <sd_decode_csd+0xdc>)
    1684:	681b      	ldr	r3, [r3, #0]
    1686:	330e      	adds	r3, #14
    1688:	0018      	movs	r0, r3
    168a:	2308      	movs	r3, #8
    168c:	2260      	movs	r2, #96	; 0x60
    168e:	2180      	movs	r1, #128	; 0x80
    1690:	4c32      	ldr	r4, [pc, #200]	; (175c <sd_decode_csd+0xe0>)
    1692:	47a0      	blx	r4
    1694:	0003      	movs	r3, r0
    1696:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    1698:	68fb      	ldr	r3, [r7, #12]
    169a:	2207      	movs	r2, #7
    169c:	401a      	ands	r2, r3
    169e:	4b30      	ldr	r3, [pc, #192]	; (1760 <sd_decode_csd+0xe4>)
    16a0:	0092      	lsls	r2, r2, #2
    16a2:	58d3      	ldr	r3, [r2, r3]
    16a4:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    16a6:	68fb      	ldr	r3, [r7, #12]
    16a8:	08db      	lsrs	r3, r3, #3
    16aa:	220f      	movs	r2, #15
    16ac:	401a      	ands	r2, r3
    16ae:	4b2d      	ldr	r3, [pc, #180]	; (1764 <sd_decode_csd+0xe8>)
    16b0:	0092      	lsls	r2, r2, #2
    16b2:	58d3      	ldr	r3, [r2, r3]
    16b4:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    16b6:	4b28      	ldr	r3, [pc, #160]	; (1758 <sd_decode_csd+0xdc>)
    16b8:	681b      	ldr	r3, [r3, #0]
    16ba:	68ba      	ldr	r2, [r7, #8]
    16bc:	6879      	ldr	r1, [r7, #4]
    16be:	434a      	muls	r2, r1
    16c0:	21fa      	movs	r1, #250	; 0xfa
    16c2:	0089      	lsls	r1, r1, #2
    16c4:	434a      	muls	r2, r1
    16c6:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    16c8:	4b23      	ldr	r3, [pc, #140]	; (1758 <sd_decode_csd+0xdc>)
    16ca:	681b      	ldr	r3, [r3, #0]
    16cc:	330e      	adds	r3, #14
    16ce:	0018      	movs	r0, r3
    16d0:	2302      	movs	r3, #2
    16d2:	227e      	movs	r2, #126	; 0x7e
    16d4:	2180      	movs	r1, #128	; 0x80
    16d6:	4c21      	ldr	r4, [pc, #132]	; (175c <sd_decode_csd+0xe0>)
    16d8:	47a0      	blx	r4
    16da:	1e03      	subs	r3, r0, #0
    16dc:	d00f      	beq.n	16fe <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
    16de:	4b1e      	ldr	r3, [pc, #120]	; (1758 <sd_decode_csd+0xdc>)
    16e0:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
    16e2:	4b1d      	ldr	r3, [pc, #116]	; (1758 <sd_decode_csd+0xdc>)
    16e4:	681b      	ldr	r3, [r3, #0]
    16e6:	330e      	adds	r3, #14
    16e8:	0018      	movs	r0, r3
    16ea:	2316      	movs	r3, #22
    16ec:	2230      	movs	r2, #48	; 0x30
    16ee:	2180      	movs	r1, #128	; 0x80
    16f0:	4d1a      	ldr	r5, [pc, #104]	; (175c <sd_decode_csd+0xe0>)
    16f2:	47a8      	blx	r5
    16f4:	0003      	movs	r3, r0
				* 512;
    16f6:	3301      	adds	r3, #1
    16f8:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
    16fa:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
    16fc:	e028      	b.n	1750 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    16fe:	4b16      	ldr	r3, [pc, #88]	; (1758 <sd_decode_csd+0xdc>)
    1700:	681b      	ldr	r3, [r3, #0]
    1702:	330e      	adds	r3, #14
    1704:	0018      	movs	r0, r3
    1706:	230c      	movs	r3, #12
    1708:	223e      	movs	r2, #62	; 0x3e
    170a:	2180      	movs	r1, #128	; 0x80
    170c:	4c13      	ldr	r4, [pc, #76]	; (175c <sd_decode_csd+0xe0>)
    170e:	47a0      	blx	r4
    1710:	0003      	movs	r3, r0
    1712:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    1714:	4b10      	ldr	r3, [pc, #64]	; (1758 <sd_decode_csd+0xdc>)
    1716:	681b      	ldr	r3, [r3, #0]
    1718:	330e      	adds	r3, #14
    171a:	0018      	movs	r0, r3
    171c:	2303      	movs	r3, #3
    171e:	222f      	movs	r2, #47	; 0x2f
    1720:	2180      	movs	r1, #128	; 0x80
    1722:	4d0e      	ldr	r5, [pc, #56]	; (175c <sd_decode_csd+0xe0>)
    1724:	47a8      	blx	r5
    1726:	0003      	movs	r3, r0
    1728:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    172a:	409c      	lsls	r4, r3
    172c:	0023      	movs	r3, r4
    172e:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    1730:	4b09      	ldr	r3, [pc, #36]	; (1758 <sd_decode_csd+0xdc>)
    1732:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
    1734:	4b08      	ldr	r3, [pc, #32]	; (1758 <sd_decode_csd+0xdc>)
    1736:	681b      	ldr	r3, [r3, #0]
    1738:	330e      	adds	r3, #14
    173a:	0018      	movs	r0, r3
    173c:	2304      	movs	r3, #4
    173e:	2250      	movs	r2, #80	; 0x50
    1740:	2180      	movs	r1, #128	; 0x80
    1742:	4d06      	ldr	r5, [pc, #24]	; (175c <sd_decode_csd+0xe0>)
    1744:	47a8      	blx	r5
    1746:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    1748:	683b      	ldr	r3, [r7, #0]
    174a:	4093      	lsls	r3, r2
				/ 1024;
    174c:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    174e:	6063      	str	r3, [r4, #4]
}
    1750:	46c0      	nop			; (mov r8, r8)
    1752:	46bd      	mov	sp, r7
    1754:	b004      	add	sp, #16
    1756:	bdb0      	pop	{r4, r5, r7, pc}
    1758:	2000011c 	.word	0x2000011c
    175c:	00001049 	.word	0x00001049
    1760:	0000cc34 	.word	0x0000cc34
    1764:	0000cc50 	.word	0x0000cc50

00001768 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
    1768:	b580      	push	{r7, lr}
    176a:	b082      	sub	sp, #8
    176c:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
    176e:	4b11      	ldr	r3, [pc, #68]	; (17b4 <sd_mmc_cmd13+0x4c>)
    1770:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    1772:	4b11      	ldr	r3, [pc, #68]	; (17b8 <sd_mmc_cmd13+0x50>)
    1774:	2100      	movs	r1, #0
    1776:	0018      	movs	r0, r3
    1778:	4b10      	ldr	r3, [pc, #64]	; (17bc <sd_mmc_cmd13+0x54>)
    177a:	4798      	blx	r3
    177c:	0003      	movs	r3, r0
    177e:	001a      	movs	r2, r3
    1780:	2301      	movs	r3, #1
    1782:	4053      	eors	r3, r2
    1784:	b2db      	uxtb	r3, r3
    1786:	2b00      	cmp	r3, #0
    1788:	d001      	beq.n	178e <sd_mmc_cmd13+0x26>
				return false;
    178a:	2300      	movs	r3, #0
    178c:	e00e      	b.n	17ac <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
    178e:	4b0c      	ldr	r3, [pc, #48]	; (17c0 <sd_mmc_cmd13+0x58>)
    1790:	4798      	blx	r3
    1792:	0002      	movs	r2, r0
    1794:	23ff      	movs	r3, #255	; 0xff
    1796:	4013      	ands	r3, r2
    1798:	d006      	beq.n	17a8 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
    179a:	687b      	ldr	r3, [r7, #4]
    179c:	1e5a      	subs	r2, r3, #1
    179e:	607a      	str	r2, [r7, #4]
    17a0:	2b00      	cmp	r3, #0
    17a2:	d1e6      	bne.n	1772 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
    17a4:	2300      	movs	r3, #0
    17a6:	e001      	b.n	17ac <sd_mmc_cmd13+0x44>
				break;
    17a8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
    17aa:	2301      	movs	r3, #1
}
    17ac:	0018      	movs	r0, r3
    17ae:	46bd      	mov	sp, r7
    17b0:	b002      	add	sp, #8
    17b2:	bd80      	pop	{r7, pc}
    17b4:	00030d40 	.word	0x00030d40
    17b8:	00001b0d 	.word	0x00001b0d
    17bc:	00002c3d 	.word	0x00002c3d
    17c0:	00002e7d 	.word	0x00002e7d

000017c4 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
    17c4:	b590      	push	{r4, r7, lr}
    17c6:	b085      	sub	sp, #20
    17c8:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    17ca:	4b38      	ldr	r3, [pc, #224]	; (18ac <sd_acmd51+0xe8>)
    17cc:	681b      	ldr	r3, [r3, #0]
    17ce:	891b      	ldrh	r3, [r3, #8]
    17d0:	041b      	lsls	r3, r3, #16
    17d2:	4a37      	ldr	r2, [pc, #220]	; (18b0 <sd_acmd51+0xec>)
    17d4:	0019      	movs	r1, r3
    17d6:	0010      	movs	r0, r2
    17d8:	4b36      	ldr	r3, [pc, #216]	; (18b4 <sd_acmd51+0xf0>)
    17da:	4798      	blx	r3
    17dc:	0003      	movs	r3, r0
    17de:	001a      	movs	r2, r3
    17e0:	2301      	movs	r3, #1
    17e2:	4053      	eors	r3, r2
    17e4:	b2db      	uxtb	r3, r3
    17e6:	2b00      	cmp	r3, #0
    17e8:	d001      	beq.n	17ee <sd_acmd51+0x2a>
		return false;
    17ea:	2300      	movs	r3, #0
    17ec:	e059      	b.n	18a2 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    17ee:	4832      	ldr	r0, [pc, #200]	; (18b8 <sd_acmd51+0xf4>)
    17f0:	2301      	movs	r3, #1
    17f2:	9300      	str	r3, [sp, #0]
    17f4:	2301      	movs	r3, #1
    17f6:	2208      	movs	r2, #8
    17f8:	2100      	movs	r1, #0
    17fa:	4c30      	ldr	r4, [pc, #192]	; (18bc <sd_acmd51+0xf8>)
    17fc:	47a0      	blx	r4
    17fe:	0003      	movs	r3, r0
    1800:	001a      	movs	r2, r3
    1802:	2301      	movs	r3, #1
    1804:	4053      	eors	r3, r2
    1806:	b2db      	uxtb	r3, r3
    1808:	2b00      	cmp	r3, #0
    180a:	d001      	beq.n	1810 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
    180c:	2300      	movs	r3, #0
    180e:	e048      	b.n	18a2 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
    1810:	003b      	movs	r3, r7
    1812:	2101      	movs	r1, #1
    1814:	0018      	movs	r0, r3
    1816:	4b2a      	ldr	r3, [pc, #168]	; (18c0 <sd_acmd51+0xfc>)
    1818:	4798      	blx	r3
    181a:	0003      	movs	r3, r0
    181c:	001a      	movs	r2, r3
    181e:	2301      	movs	r3, #1
    1820:	4053      	eors	r3, r2
    1822:	b2db      	uxtb	r3, r3
    1824:	2b00      	cmp	r3, #0
    1826:	d001      	beq.n	182c <sd_acmd51+0x68>
		return false;
    1828:	2300      	movs	r3, #0
    182a:	e03a      	b.n	18a2 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
    182c:	4b25      	ldr	r3, [pc, #148]	; (18c4 <sd_acmd51+0x100>)
    182e:	4798      	blx	r3
    1830:	0003      	movs	r3, r0
    1832:	001a      	movs	r2, r3
    1834:	2301      	movs	r3, #1
    1836:	4053      	eors	r3, r2
    1838:	b2db      	uxtb	r3, r3
    183a:	2b00      	cmp	r3, #0
    183c:	d001      	beq.n	1842 <sd_acmd51+0x7e>
		return false;
    183e:	2300      	movs	r3, #0
    1840:	e02f      	b.n	18a2 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
    1842:	0038      	movs	r0, r7
    1844:	2304      	movs	r3, #4
    1846:	2238      	movs	r2, #56	; 0x38
    1848:	2140      	movs	r1, #64	; 0x40
    184a:	4c1f      	ldr	r4, [pc, #124]	; (18c8 <sd_acmd51+0x104>)
    184c:	47a0      	blx	r4
    184e:	0003      	movs	r3, r0
    1850:	2b01      	cmp	r3, #1
    1852:	d008      	beq.n	1866 <sd_acmd51+0xa2>
    1854:	d302      	bcc.n	185c <sd_acmd51+0x98>
    1856:	2b02      	cmp	r3, #2
    1858:	d00a      	beq.n	1870 <sd_acmd51+0xac>
    185a:	e01c      	b.n	1896 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    185c:	4b13      	ldr	r3, [pc, #76]	; (18ac <sd_acmd51+0xe8>)
    185e:	681b      	ldr	r3, [r3, #0]
    1860:	2210      	movs	r2, #16
    1862:	731a      	strb	r2, [r3, #12]
		break;
    1864:	e01c      	b.n	18a0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
    1866:	4b11      	ldr	r3, [pc, #68]	; (18ac <sd_acmd51+0xe8>)
    1868:	681b      	ldr	r3, [r3, #0]
    186a:	221a      	movs	r2, #26
    186c:	731a      	strb	r2, [r3, #12]
		break;
    186e:	e017      	b.n	18a0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    1870:	0038      	movs	r0, r7
    1872:	2301      	movs	r3, #1
    1874:	222f      	movs	r2, #47	; 0x2f
    1876:	2140      	movs	r1, #64	; 0x40
    1878:	4c13      	ldr	r4, [pc, #76]	; (18c8 <sd_acmd51+0x104>)
    187a:	47a0      	blx	r4
    187c:	0003      	movs	r3, r0
    187e:	2b01      	cmp	r3, #1
    1880:	d104      	bne.n	188c <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    1882:	4b0a      	ldr	r3, [pc, #40]	; (18ac <sd_acmd51+0xe8>)
    1884:	681b      	ldr	r3, [r3, #0]
    1886:	2230      	movs	r2, #48	; 0x30
    1888:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
    188a:	e009      	b.n	18a0 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    188c:	4b07      	ldr	r3, [pc, #28]	; (18ac <sd_acmd51+0xe8>)
    188e:	681b      	ldr	r3, [r3, #0]
    1890:	2220      	movs	r2, #32
    1892:	731a      	strb	r2, [r3, #12]
		break;
    1894:	e004      	b.n	18a0 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    1896:	4b05      	ldr	r3, [pc, #20]	; (18ac <sd_acmd51+0xe8>)
    1898:	681b      	ldr	r3, [r3, #0]
    189a:	2210      	movs	r2, #16
    189c:	731a      	strb	r2, [r3, #12]
		break;
    189e:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    18a0:	2301      	movs	r3, #1
}
    18a2:	0018      	movs	r0, r3
    18a4:	46bd      	mov	sp, r7
    18a6:	b003      	add	sp, #12
    18a8:	bd90      	pop	{r4, r7, pc}
    18aa:	46c0      	nop			; (mov r8, r8)
    18ac:	2000011c 	.word	0x2000011c
    18b0:	00001137 	.word	0x00001137
    18b4:	00002c3d 	.word	0x00002c3d
    18b8:	00081133 	.word	0x00081133
    18bc:	00002c65 	.word	0x00002c65
    18c0:	00002f35 	.word	0x00002f35
    18c4:	00002fd9 	.word	0x00002fd9
    18c8:	00001049 	.word	0x00001049

000018cc <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
    18cc:	b580      	push	{r7, lr}
    18ce:	b082      	sub	sp, #8
    18d0:	af00      	add	r7, sp, #0
    18d2:	0002      	movs	r2, r0
    18d4:	1dfb      	adds	r3, r7, #7
    18d6:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
    18d8:	1dfb      	adds	r3, r7, #7
    18da:	781b      	ldrb	r3, [r3, #0]
    18dc:	2b00      	cmp	r3, #0
    18de:	d001      	beq.n	18e4 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
    18e0:	2304      	movs	r3, #4
    18e2:	e047      	b.n	1974 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    18e4:	1dfb      	adds	r3, r7, #7
    18e6:	781b      	ldrb	r3, [r3, #0]
    18e8:	4a24      	ldr	r2, [pc, #144]	; (197c <sd_mmc_select_slot+0xb0>)
    18ea:	015b      	lsls	r3, r3, #5
    18ec:	18d3      	adds	r3, r2, r3
    18ee:	330a      	adds	r3, #10
    18f0:	781b      	ldrb	r3, [r3, #0]
    18f2:	2b04      	cmp	r3, #4
    18f4:	d008      	beq.n	1908 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    18f6:	1dfb      	adds	r3, r7, #7
    18f8:	781b      	ldrb	r3, [r3, #0]
    18fa:	4a20      	ldr	r2, [pc, #128]	; (197c <sd_mmc_select_slot+0xb0>)
    18fc:	015b      	lsls	r3, r3, #5
    18fe:	18d3      	adds	r3, r2, r3
    1900:	330a      	adds	r3, #10
    1902:	781b      	ldrb	r3, [r3, #0]
    1904:	2b03      	cmp	r3, #3
    1906:	d11d      	bne.n	1944 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    1908:	1dfb      	adds	r3, r7, #7
    190a:	781b      	ldrb	r3, [r3, #0]
    190c:	4a1b      	ldr	r2, [pc, #108]	; (197c <sd_mmc_select_slot+0xb0>)
    190e:	015b      	lsls	r3, r3, #5
    1910:	18d3      	adds	r3, r2, r3
    1912:	330a      	adds	r3, #10
    1914:	2202      	movs	r2, #2
    1916:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    1918:	1dfb      	adds	r3, r7, #7
    191a:	781a      	ldrb	r2, [r3, #0]
    191c:	4b17      	ldr	r3, [pc, #92]	; (197c <sd_mmc_select_slot+0xb0>)
    191e:	0152      	lsls	r2, r2, #5
    1920:	4917      	ldr	r1, [pc, #92]	; (1980 <sd_mmc_select_slot+0xb4>)
    1922:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
    1924:	1dfb      	adds	r3, r7, #7
    1926:	781b      	ldrb	r3, [r3, #0]
    1928:	4a14      	ldr	r2, [pc, #80]	; (197c <sd_mmc_select_slot+0xb0>)
    192a:	015b      	lsls	r3, r3, #5
    192c:	18d3      	adds	r3, r2, r3
    192e:	330d      	adds	r3, #13
    1930:	2201      	movs	r2, #1
    1932:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
    1934:	1dfb      	adds	r3, r7, #7
    1936:	781b      	ldrb	r3, [r3, #0]
    1938:	4a10      	ldr	r2, [pc, #64]	; (197c <sd_mmc_select_slot+0xb0>)
    193a:	015b      	lsls	r3, r3, #5
    193c:	18d3      	adds	r3, r2, r3
    193e:	331e      	adds	r3, #30
    1940:	2200      	movs	r2, #0
    1942:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
    1944:	4b0f      	ldr	r3, [pc, #60]	; (1984 <sd_mmc_select_slot+0xb8>)
    1946:	1dfa      	adds	r2, r7, #7
    1948:	7812      	ldrb	r2, [r2, #0]
    194a:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    194c:	1dfb      	adds	r3, r7, #7
    194e:	781b      	ldrb	r3, [r3, #0]
    1950:	015a      	lsls	r2, r3, #5
    1952:	4b0a      	ldr	r3, [pc, #40]	; (197c <sd_mmc_select_slot+0xb0>)
    1954:	18d2      	adds	r2, r2, r3
    1956:	4b0c      	ldr	r3, [pc, #48]	; (1988 <sd_mmc_select_slot+0xbc>)
    1958:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
    195a:	4b0c      	ldr	r3, [pc, #48]	; (198c <sd_mmc_select_slot+0xc0>)
    195c:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
    195e:	1dfb      	adds	r3, r7, #7
    1960:	781b      	ldrb	r3, [r3, #0]
    1962:	4a06      	ldr	r2, [pc, #24]	; (197c <sd_mmc_select_slot+0xb0>)
    1964:	015b      	lsls	r3, r3, #5
    1966:	18d3      	adds	r3, r2, r3
    1968:	330a      	adds	r3, #10
    196a:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    196c:	3b02      	subs	r3, #2
    196e:	425a      	negs	r2, r3
    1970:	4153      	adcs	r3, r2
    1972:	b2db      	uxtb	r3, r3
}
    1974:	0018      	movs	r0, r3
    1976:	46bd      	mov	sp, r7
    1978:	b002      	add	sp, #8
    197a:	bd80      	pop	{r7, pc}
    197c:	200000f8 	.word	0x200000f8
    1980:	00061a80 	.word	0x00061a80
    1984:	20000118 	.word	0x20000118
    1988:	2000011c 	.word	0x2000011c
    198c:	00001991 	.word	0x00001991

00001990 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    1990:	b5b0      	push	{r4, r5, r7, lr}
    1992:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    1994:	4b09      	ldr	r3, [pc, #36]	; (19bc <sd_mmc_configure_slot+0x2c>)
    1996:	7818      	ldrb	r0, [r3, #0]
    1998:	4b09      	ldr	r3, [pc, #36]	; (19c0 <sd_mmc_configure_slot+0x30>)
    199a:	681b      	ldr	r3, [r3, #0]
    199c:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    199e:	4b08      	ldr	r3, [pc, #32]	; (19c0 <sd_mmc_configure_slot+0x30>)
    19a0:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    19a2:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    19a4:	4b06      	ldr	r3, [pc, #24]	; (19c0 <sd_mmc_configure_slot+0x30>)
    19a6:	681b      	ldr	r3, [r3, #0]
    19a8:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    19aa:	1e5c      	subs	r4, r3, #1
    19ac:	41a3      	sbcs	r3, r4
    19ae:	b2db      	uxtb	r3, r3
    19b0:	4c04      	ldr	r4, [pc, #16]	; (19c4 <sd_mmc_configure_slot+0x34>)
    19b2:	47a0      	blx	r4
}
    19b4:	46c0      	nop			; (mov r8, r8)
    19b6:	46bd      	mov	sp, r7
    19b8:	bdb0      	pop	{r4, r5, r7, pc}
    19ba:	46c0      	nop			; (mov r8, r8)
    19bc:	20000118 	.word	0x20000118
    19c0:	2000011c 	.word	0x2000011c
    19c4:	00002b25 	.word	0x00002b25

000019c8 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    19c8:	b580      	push	{r7, lr}
    19ca:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    19cc:	4b05      	ldr	r3, [pc, #20]	; (19e4 <sd_mmc_deselect_slot+0x1c>)
    19ce:	781b      	ldrb	r3, [r3, #0]
    19d0:	2b00      	cmp	r3, #0
    19d2:	d104      	bne.n	19de <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
    19d4:	4b03      	ldr	r3, [pc, #12]	; (19e4 <sd_mmc_deselect_slot+0x1c>)
    19d6:	781b      	ldrb	r3, [r3, #0]
    19d8:	0018      	movs	r0, r3
    19da:	4b03      	ldr	r3, [pc, #12]	; (19e8 <sd_mmc_deselect_slot+0x20>)
    19dc:	4798      	blx	r3
	}
}
    19de:	46c0      	nop			; (mov r8, r8)
    19e0:	46bd      	mov	sp, r7
    19e2:	bd80      	pop	{r7, pc}
    19e4:	20000118 	.word	0x20000118
    19e8:	00002bad 	.word	0x00002bad

000019ec <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
    19ec:	b580      	push	{r7, lr}
    19ee:	b082      	sub	sp, #8
    19f0:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
    19f2:	1dfb      	adds	r3, r7, #7
    19f4:	2200      	movs	r2, #0
    19f6:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
    19f8:	4b59      	ldr	r3, [pc, #356]	; (1b60 <sd_mmc_spi_card_init+0x174>)
    19fa:	681b      	ldr	r3, [r3, #0]
    19fc:	2201      	movs	r2, #1
    19fe:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    1a00:	4b57      	ldr	r3, [pc, #348]	; (1b60 <sd_mmc_spi_card_init+0x174>)
    1a02:	681b      	ldr	r3, [r3, #0]
    1a04:	2200      	movs	r2, #0
    1a06:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    1a08:	4b55      	ldr	r3, [pc, #340]	; (1b60 <sd_mmc_spi_card_init+0x174>)
    1a0a:	681b      	ldr	r3, [r3, #0]
    1a0c:	2200      	movs	r2, #0
    1a0e:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
    1a10:	4b54      	ldr	r3, [pc, #336]	; (1b64 <sd_mmc_spi_card_init+0x178>)
    1a12:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    1a14:	2388      	movs	r3, #136	; 0x88
    1a16:	015b      	lsls	r3, r3, #5
    1a18:	2100      	movs	r1, #0
    1a1a:	0018      	movs	r0, r3
    1a1c:	4b52      	ldr	r3, [pc, #328]	; (1b68 <sd_mmc_spi_card_init+0x17c>)
    1a1e:	4798      	blx	r3
    1a20:	0003      	movs	r3, r0
    1a22:	001a      	movs	r2, r3
    1a24:	2301      	movs	r3, #1
    1a26:	4053      	eors	r3, r2
    1a28:	b2db      	uxtb	r3, r3
    1a2a:	2b00      	cmp	r3, #0
    1a2c:	d001      	beq.n	1a32 <sd_mmc_spi_card_init+0x46>
		return false;
    1a2e:	2300      	movs	r3, #0
    1a30:	e092      	b.n	1b58 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
    1a32:	1dfb      	adds	r3, r7, #7
    1a34:	0018      	movs	r0, r3
    1a36:	4b4d      	ldr	r3, [pc, #308]	; (1b6c <sd_mmc_spi_card_init+0x180>)
    1a38:	4798      	blx	r3
    1a3a:	0003      	movs	r3, r0
    1a3c:	001a      	movs	r2, r3
    1a3e:	2301      	movs	r3, #1
    1a40:	4053      	eors	r3, r2
    1a42:	b2db      	uxtb	r3, r3
    1a44:	2b00      	cmp	r3, #0
    1a46:	d001      	beq.n	1a4c <sd_mmc_spi_card_init+0x60>
		return false;
    1a48:	2300      	movs	r3, #0
    1a4a:	e085      	b.n	1b58 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
    1a4c:	4b48      	ldr	r3, [pc, #288]	; (1b70 <sd_mmc_spi_card_init+0x184>)
    1a4e:	4798      	blx	r3
    1a50:	0003      	movs	r3, r0
    1a52:	001a      	movs	r2, r3
    1a54:	2301      	movs	r3, #1
    1a56:	4053      	eors	r3, r2
    1a58:	b2db      	uxtb	r3, r3
    1a5a:	2b00      	cmp	r3, #0
    1a5c:	d001      	beq.n	1a62 <sd_mmc_spi_card_init+0x76>
		return false;
    1a5e:	2300      	movs	r3, #0
    1a60:	e07a      	b.n	1b58 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1a62:	4b3f      	ldr	r3, [pc, #252]	; (1b60 <sd_mmc_spi_card_init+0x174>)
    1a64:	681b      	ldr	r3, [r3, #0]
    1a66:	7adb      	ldrb	r3, [r3, #11]
    1a68:	001a      	movs	r2, r3
    1a6a:	2301      	movs	r3, #1
    1a6c:	4013      	ands	r3, r2
    1a6e:	d021      	beq.n	1ab4 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
    1a70:	1dfb      	adds	r3, r7, #7
    1a72:	781b      	ldrb	r3, [r3, #0]
    1a74:	0018      	movs	r0, r3
    1a76:	4b3f      	ldr	r3, [pc, #252]	; (1b74 <sd_mmc_spi_card_init+0x188>)
    1a78:	4798      	blx	r3
    1a7a:	0003      	movs	r3, r0
    1a7c:	001a      	movs	r2, r3
    1a7e:	2301      	movs	r3, #1
    1a80:	4053      	eors	r3, r2
    1a82:	b2db      	uxtb	r3, r3
    1a84:	2b00      	cmp	r3, #0
    1a86:	d007      	beq.n	1a98 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
    1a88:	4b35      	ldr	r3, [pc, #212]	; (1b60 <sd_mmc_spi_card_init+0x174>)
    1a8a:	681b      	ldr	r3, [r3, #0]
    1a8c:	2202      	movs	r2, #2
    1a8e:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
    1a90:	4b39      	ldr	r3, [pc, #228]	; (1b78 <sd_mmc_spi_card_init+0x18c>)
    1a92:	4798      	blx	r3
    1a94:	0003      	movs	r3, r0
    1a96:	e05f      	b.n	1b58 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    1a98:	4b38      	ldr	r3, [pc, #224]	; (1b7c <sd_mmc_spi_card_init+0x190>)
    1a9a:	2100      	movs	r1, #0
    1a9c:	0018      	movs	r0, r3
    1a9e:	4b32      	ldr	r3, [pc, #200]	; (1b68 <sd_mmc_spi_card_init+0x17c>)
    1aa0:	4798      	blx	r3
    1aa2:	0003      	movs	r3, r0
    1aa4:	001a      	movs	r2, r3
    1aa6:	2301      	movs	r3, #1
    1aa8:	4053      	eors	r3, r2
    1aaa:	b2db      	uxtb	r3, r3
    1aac:	2b00      	cmp	r3, #0
    1aae:	d001      	beq.n	1ab4 <sd_mmc_spi_card_init+0xc8>
			return false;
    1ab0:	2300      	movs	r3, #0
    1ab2:	e051      	b.n	1b58 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1ab4:	4b2a      	ldr	r3, [pc, #168]	; (1b60 <sd_mmc_spi_card_init+0x174>)
    1ab6:	681b      	ldr	r3, [r3, #0]
    1ab8:	7adb      	ldrb	r3, [r3, #11]
    1aba:	001a      	movs	r2, r3
    1abc:	2301      	movs	r3, #1
    1abe:	4013      	ands	r3, r2
    1ac0:	d017      	beq.n	1af2 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
    1ac2:	4b2f      	ldr	r3, [pc, #188]	; (1b80 <sd_mmc_spi_card_init+0x194>)
    1ac4:	4798      	blx	r3
    1ac6:	0003      	movs	r3, r0
    1ac8:	001a      	movs	r2, r3
    1aca:	2301      	movs	r3, #1
    1acc:	4053      	eors	r3, r2
    1ace:	b2db      	uxtb	r3, r3
    1ad0:	2b00      	cmp	r3, #0
    1ad2:	d001      	beq.n	1ad8 <sd_mmc_spi_card_init+0xec>
			return false;
    1ad4:	2300      	movs	r3, #0
    1ad6:	e03f      	b.n	1b58 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
    1ad8:	4b2a      	ldr	r3, [pc, #168]	; (1b84 <sd_mmc_spi_card_init+0x198>)
    1ada:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
    1adc:	4b2a      	ldr	r3, [pc, #168]	; (1b88 <sd_mmc_spi_card_init+0x19c>)
    1ade:	4798      	blx	r3
    1ae0:	0003      	movs	r3, r0
    1ae2:	001a      	movs	r2, r3
    1ae4:	2301      	movs	r3, #1
    1ae6:	4053      	eors	r3, r2
    1ae8:	b2db      	uxtb	r3, r3
    1aea:	2b00      	cmp	r3, #0
    1aec:	d001      	beq.n	1af2 <sd_mmc_spi_card_init+0x106>
			return false;
    1aee:	2300      	movs	r3, #0
    1af0:	e032      	b.n	1b58 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    1af2:	4b1b      	ldr	r3, [pc, #108]	; (1b60 <sd_mmc_spi_card_init+0x174>)
    1af4:	681b      	ldr	r3, [r3, #0]
    1af6:	7adb      	ldrb	r3, [r3, #11]
    1af8:	001a      	movs	r2, r3
    1afa:	2301      	movs	r3, #1
    1afc:	4013      	ands	r3, r2
    1afe:	d016      	beq.n	1b2e <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
    1b00:	4b17      	ldr	r3, [pc, #92]	; (1b60 <sd_mmc_spi_card_init+0x174>)
    1b02:	681b      	ldr	r3, [r3, #0]
    1b04:	7adb      	ldrb	r3, [r3, #11]
    1b06:	001a      	movs	r2, r3
    1b08:	2308      	movs	r3, #8
    1b0a:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    1b0c:	d10f      	bne.n	1b2e <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    1b0e:	2380      	movs	r3, #128	; 0x80
    1b10:	009b      	lsls	r3, r3, #2
    1b12:	4a1e      	ldr	r2, [pc, #120]	; (1b8c <sd_mmc_spi_card_init+0x1a0>)
    1b14:	0019      	movs	r1, r3
    1b16:	0010      	movs	r0, r2
    1b18:	4b13      	ldr	r3, [pc, #76]	; (1b68 <sd_mmc_spi_card_init+0x17c>)
    1b1a:	4798      	blx	r3
    1b1c:	0003      	movs	r3, r0
    1b1e:	001a      	movs	r2, r3
    1b20:	2301      	movs	r3, #1
    1b22:	4053      	eors	r3, r2
    1b24:	b2db      	uxtb	r3, r3
    1b26:	2b00      	cmp	r3, #0
    1b28:	d001      	beq.n	1b2e <sd_mmc_spi_card_init+0x142>
			return false;
    1b2a:	2300      	movs	r3, #0
    1b2c:	e014      	b.n	1b58 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1b2e:	4b0c      	ldr	r3, [pc, #48]	; (1b60 <sd_mmc_spi_card_init+0x174>)
    1b30:	681b      	ldr	r3, [r3, #0]
    1b32:	7adb      	ldrb	r3, [r3, #11]
    1b34:	001a      	movs	r2, r3
    1b36:	2301      	movs	r3, #1
    1b38:	4013      	ands	r3, r2
    1b3a:	d00a      	beq.n	1b52 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
    1b3c:	4b14      	ldr	r3, [pc, #80]	; (1b90 <sd_mmc_spi_card_init+0x1a4>)
    1b3e:	4798      	blx	r3
    1b40:	0003      	movs	r3, r0
    1b42:	001a      	movs	r2, r3
    1b44:	2301      	movs	r3, #1
    1b46:	4053      	eors	r3, r2
    1b48:	b2db      	uxtb	r3, r3
    1b4a:	2b00      	cmp	r3, #0
    1b4c:	d001      	beq.n	1b52 <sd_mmc_spi_card_init+0x166>
			return false;
    1b4e:	2300      	movs	r3, #0
    1b50:	e002      	b.n	1b58 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    1b52:	4b10      	ldr	r3, [pc, #64]	; (1b94 <sd_mmc_spi_card_init+0x1a8>)
    1b54:	4798      	blx	r3
	return true;
    1b56:	2301      	movs	r3, #1
}
    1b58:	0018      	movs	r0, r3
    1b5a:	46bd      	mov	sp, r7
    1b5c:	b002      	add	sp, #8
    1b5e:	bd80      	pop	{r7, pc}
    1b60:	2000011c 	.word	0x2000011c
    1b64:	00002bf1 	.word	0x00002bf1
    1b68:	00002c3d 	.word	0x00002c3d
    1b6c:	00001341 	.word	0x00001341
    1b70:	00001335 	.word	0x00001335
    1b74:	00001251 	.word	0x00001251
    1b78:	00001b99 	.word	0x00001b99
    1b7c:	0000113b 	.word	0x0000113b
    1b80:	000014dd 	.word	0x000014dd
    1b84:	0000167d 	.word	0x0000167d
    1b88:	000017c5 	.word	0x000017c5
    1b8c:	00001110 	.word	0x00001110
    1b90:	00001769 	.word	0x00001769
    1b94:	00001991 	.word	0x00001991

00001b98 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
    1b98:	b580      	push	{r7, lr}
    1b9a:	b082      	sub	sp, #8
    1b9c:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    1b9e:	2388      	movs	r3, #136	; 0x88
    1ba0:	015b      	lsls	r3, r3, #5
    1ba2:	2100      	movs	r1, #0
    1ba4:	0018      	movs	r0, r3
    1ba6:	4b32      	ldr	r3, [pc, #200]	; (1c70 <sd_mmc_spi_install_mmc+0xd8>)
    1ba8:	4798      	blx	r3
    1baa:	0003      	movs	r3, r0
    1bac:	001a      	movs	r2, r3
    1bae:	2301      	movs	r3, #1
    1bb0:	4053      	eors	r3, r2
    1bb2:	b2db      	uxtb	r3, r3
    1bb4:	2b00      	cmp	r3, #0
    1bb6:	d001      	beq.n	1bbc <sd_mmc_spi_install_mmc+0x24>
		return false;
    1bb8:	2300      	movs	r3, #0
    1bba:	e055      	b.n	1c68 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
    1bbc:	4b2d      	ldr	r3, [pc, #180]	; (1c74 <sd_mmc_spi_install_mmc+0xdc>)
    1bbe:	4798      	blx	r3
    1bc0:	0003      	movs	r3, r0
    1bc2:	001a      	movs	r2, r3
    1bc4:	2301      	movs	r3, #1
    1bc6:	4053      	eors	r3, r2
    1bc8:	b2db      	uxtb	r3, r3
    1bca:	2b00      	cmp	r3, #0
    1bcc:	d001      	beq.n	1bd2 <sd_mmc_spi_install_mmc+0x3a>
		return false;
    1bce:	2300      	movs	r3, #0
    1bd0:	e04a      	b.n	1c68 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    1bd2:	4b29      	ldr	r3, [pc, #164]	; (1c78 <sd_mmc_spi_install_mmc+0xe0>)
    1bd4:	2100      	movs	r1, #0
    1bd6:	0018      	movs	r0, r3
    1bd8:	4b25      	ldr	r3, [pc, #148]	; (1c70 <sd_mmc_spi_install_mmc+0xd8>)
    1bda:	4798      	blx	r3
    1bdc:	0003      	movs	r3, r0
    1bde:	001a      	movs	r2, r3
    1be0:	2301      	movs	r3, #1
    1be2:	4053      	eors	r3, r2
    1be4:	b2db      	uxtb	r3, r3
    1be6:	2b00      	cmp	r3, #0
    1be8:	d001      	beq.n	1bee <sd_mmc_spi_install_mmc+0x56>
		return false;
    1bea:	2300      	movs	r3, #0
    1bec:	e03c      	b.n	1c68 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
    1bee:	4b23      	ldr	r3, [pc, #140]	; (1c7c <sd_mmc_spi_install_mmc+0xe4>)
    1bf0:	4798      	blx	r3
    1bf2:	0003      	movs	r3, r0
    1bf4:	001a      	movs	r2, r3
    1bf6:	2301      	movs	r3, #1
    1bf8:	4053      	eors	r3, r2
    1bfa:	b2db      	uxtb	r3, r3
    1bfc:	2b00      	cmp	r3, #0
    1bfe:	d001      	beq.n	1c04 <sd_mmc_spi_install_mmc+0x6c>
		return false;
    1c00:	2300      	movs	r3, #0
    1c02:	e031      	b.n	1c68 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
    1c04:	4b1e      	ldr	r3, [pc, #120]	; (1c80 <sd_mmc_spi_install_mmc+0xe8>)
    1c06:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    1c08:	4b1e      	ldr	r3, [pc, #120]	; (1c84 <sd_mmc_spi_install_mmc+0xec>)
    1c0a:	681b      	ldr	r3, [r3, #0]
    1c0c:	7b1b      	ldrb	r3, [r3, #12]
    1c0e:	2b3f      	cmp	r3, #63	; 0x3f
    1c10:	d90c      	bls.n	1c2c <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
    1c12:	1dfb      	adds	r3, r7, #7
    1c14:	0018      	movs	r0, r3
    1c16:	4b1c      	ldr	r3, [pc, #112]	; (1c88 <sd_mmc_spi_install_mmc+0xf0>)
    1c18:	4798      	blx	r3
    1c1a:	0003      	movs	r3, r0
    1c1c:	001a      	movs	r2, r3
    1c1e:	2301      	movs	r3, #1
    1c20:	4053      	eors	r3, r2
    1c22:	b2db      	uxtb	r3, r3
    1c24:	2b00      	cmp	r3, #0
    1c26:	d001      	beq.n	1c2c <sd_mmc_spi_install_mmc+0x94>
			return false;
    1c28:	2300      	movs	r3, #0
    1c2a:	e01d      	b.n	1c68 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    1c2c:	2380      	movs	r3, #128	; 0x80
    1c2e:	009b      	lsls	r3, r3, #2
    1c30:	4a16      	ldr	r2, [pc, #88]	; (1c8c <sd_mmc_spi_install_mmc+0xf4>)
    1c32:	0019      	movs	r1, r3
    1c34:	0010      	movs	r0, r2
    1c36:	4b0e      	ldr	r3, [pc, #56]	; (1c70 <sd_mmc_spi_install_mmc+0xd8>)
    1c38:	4798      	blx	r3
    1c3a:	0003      	movs	r3, r0
    1c3c:	001a      	movs	r2, r3
    1c3e:	2301      	movs	r3, #1
    1c40:	4053      	eors	r3, r2
    1c42:	b2db      	uxtb	r3, r3
    1c44:	2b00      	cmp	r3, #0
    1c46:	d001      	beq.n	1c4c <sd_mmc_spi_install_mmc+0xb4>
		return false;
    1c48:	2300      	movs	r3, #0
    1c4a:	e00d      	b.n	1c68 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
    1c4c:	4b10      	ldr	r3, [pc, #64]	; (1c90 <sd_mmc_spi_install_mmc+0xf8>)
    1c4e:	4798      	blx	r3
    1c50:	0003      	movs	r3, r0
    1c52:	001a      	movs	r2, r3
    1c54:	2301      	movs	r3, #1
    1c56:	4053      	eors	r3, r2
    1c58:	b2db      	uxtb	r3, r3
    1c5a:	2b00      	cmp	r3, #0
    1c5c:	d001      	beq.n	1c62 <sd_mmc_spi_install_mmc+0xca>
		return false;
    1c5e:	2300      	movs	r3, #0
    1c60:	e002      	b.n	1c68 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    1c62:	4b0c      	ldr	r3, [pc, #48]	; (1c94 <sd_mmc_spi_install_mmc+0xfc>)
    1c64:	4798      	blx	r3
	return true;
    1c66:	2301      	movs	r3, #1
}
    1c68:	0018      	movs	r0, r3
    1c6a:	46bd      	mov	sp, r7
    1c6c:	b002      	add	sp, #8
    1c6e:	bd80      	pop	{r7, pc}
    1c70:	00002c3d 	.word	0x00002c3d
    1c74:	000011a5 	.word	0x000011a5
    1c78:	0000113b 	.word	0x0000113b
    1c7c:	000014dd 	.word	0x000014dd
    1c80:	0000154d 	.word	0x0000154d
    1c84:	2000011c 	.word	0x2000011c
    1c88:	000013b1 	.word	0x000013b1
    1c8c:	00001110 	.word	0x00001110
    1c90:	00001769 	.word	0x00001769
    1c94:	00001991 	.word	0x00001991

00001c98 <sd_mmc_init>:
//--------------------- PUBLIC FUNCTIONS ----------------------------



void sd_mmc_init(void)
{
    1c98:	b580      	push	{r7, lr}
    1c9a:	b082      	sub	sp, #8
    1c9c:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    1c9e:	1dfb      	adds	r3, r7, #7
    1ca0:	2200      	movs	r2, #0
    1ca2:	701a      	strb	r2, [r3, #0]
    1ca4:	e00c      	b.n	1cc0 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    1ca6:	1dfb      	adds	r3, r7, #7
    1ca8:	781b      	ldrb	r3, [r3, #0]
    1caa:	4a0c      	ldr	r2, [pc, #48]	; (1cdc <sd_mmc_init+0x44>)
    1cac:	015b      	lsls	r3, r3, #5
    1cae:	18d3      	adds	r3, r2, r3
    1cb0:	330a      	adds	r3, #10
    1cb2:	2204      	movs	r2, #4
    1cb4:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    1cb6:	1dfb      	adds	r3, r7, #7
    1cb8:	781a      	ldrb	r2, [r3, #0]
    1cba:	1dfb      	adds	r3, r7, #7
    1cbc:	3201      	adds	r2, #1
    1cbe:	701a      	strb	r2, [r3, #0]
    1cc0:	1dfb      	adds	r3, r7, #7
    1cc2:	781b      	ldrb	r3, [r3, #0]
    1cc4:	2b00      	cmp	r3, #0
    1cc6:	d0ee      	beq.n	1ca6 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    1cc8:	4b05      	ldr	r3, [pc, #20]	; (1ce0 <sd_mmc_init+0x48>)
    1cca:	22ff      	movs	r2, #255	; 0xff
    1ccc:	701a      	strb	r2, [r3, #0]
	driver_init();
    1cce:	4b05      	ldr	r3, [pc, #20]	; (1ce4 <sd_mmc_init+0x4c>)
    1cd0:	4798      	blx	r3
}
    1cd2:	46c0      	nop			; (mov r8, r8)
    1cd4:	46bd      	mov	sp, r7
    1cd6:	b002      	add	sp, #8
    1cd8:	bd80      	pop	{r7, pc}
    1cda:	46c0      	nop			; (mov r8, r8)
    1cdc:	200000f8 	.word	0x200000f8
    1ce0:	20000118 	.word	0x20000118
    1ce4:	00002a5d 	.word	0x00002a5d

00001ce8 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    1ce8:	b590      	push	{r4, r7, lr}
    1cea:	b085      	sub	sp, #20
    1cec:	af00      	add	r7, sp, #0
    1cee:	0002      	movs	r2, r0
    1cf0:	1dfb      	adds	r3, r7, #7
    1cf2:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1cf4:	230f      	movs	r3, #15
    1cf6:	18fc      	adds	r4, r7, r3
    1cf8:	1dfb      	adds	r3, r7, #7
    1cfa:	781b      	ldrb	r3, [r3, #0]
    1cfc:	0018      	movs	r0, r3
    1cfe:	4b13      	ldr	r3, [pc, #76]	; (1d4c <sd_mmc_check+0x64>)
    1d00:	4798      	blx	r3
    1d02:	0003      	movs	r3, r0
    1d04:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    1d06:	230f      	movs	r3, #15
    1d08:	18fb      	adds	r3, r7, r3
    1d0a:	781b      	ldrb	r3, [r3, #0]
    1d0c:	2b01      	cmp	r3, #1
    1d0e:	d005      	beq.n	1d1c <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
    1d10:	4b0f      	ldr	r3, [pc, #60]	; (1d50 <sd_mmc_check+0x68>)
    1d12:	4798      	blx	r3
		return sd_mmc_err;
    1d14:	230f      	movs	r3, #15
    1d16:	18fb      	adds	r3, r7, r3
    1d18:	781b      	ldrb	r3, [r3, #0]
    1d1a:	e012      	b.n	1d42 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
    1d1c:	4b0d      	ldr	r3, [pc, #52]	; (1d54 <sd_mmc_check+0x6c>)
    1d1e:	4798      	blx	r3
    1d20:	1e03      	subs	r3, r0, #0
    1d22:	d007      	beq.n	1d34 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    1d24:	4b0c      	ldr	r3, [pc, #48]	; (1d58 <sd_mmc_check+0x70>)
    1d26:	681b      	ldr	r3, [r3, #0]
    1d28:	2200      	movs	r2, #0
    1d2a:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    1d2c:	4b08      	ldr	r3, [pc, #32]	; (1d50 <sd_mmc_check+0x68>)
    1d2e:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
    1d30:	2301      	movs	r3, #1
    1d32:	e006      	b.n	1d42 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    1d34:	4b08      	ldr	r3, [pc, #32]	; (1d58 <sd_mmc_check+0x70>)
    1d36:	681b      	ldr	r3, [r3, #0]
    1d38:	2203      	movs	r2, #3
    1d3a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    1d3c:	4b04      	ldr	r3, [pc, #16]	; (1d50 <sd_mmc_check+0x68>)
    1d3e:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    1d40:	2303      	movs	r3, #3
}
    1d42:	0018      	movs	r0, r3
    1d44:	46bd      	mov	sp, r7
    1d46:	b005      	add	sp, #20
    1d48:	bd90      	pop	{r4, r7, pc}
    1d4a:	46c0      	nop			; (mov r8, r8)
    1d4c:	000018cd 	.word	0x000018cd
    1d50:	000019c9 	.word	0x000019c9
    1d54:	000019ed 	.word	0x000019ed
    1d58:	2000011c 	.word	0x2000011c

00001d5c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    1d5c:	b580      	push	{r7, lr}
    1d5e:	b082      	sub	sp, #8
    1d60:	af00      	add	r7, sp, #0
    1d62:	0002      	movs	r2, r0
    1d64:	1dfb      	adds	r3, r7, #7
    1d66:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1d68:	1dfb      	adds	r3, r7, #7
    1d6a:	781b      	ldrb	r3, [r3, #0]
    1d6c:	0018      	movs	r0, r3
    1d6e:	4b07      	ldr	r3, [pc, #28]	; (1d8c <sd_mmc_get_type+0x30>)
    1d70:	4798      	blx	r3
    1d72:	1e03      	subs	r3, r0, #0
    1d74:	d001      	beq.n	1d7a <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
    1d76:	2300      	movs	r3, #0
    1d78:	e004      	b.n	1d84 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
    1d7a:	4b05      	ldr	r3, [pc, #20]	; (1d90 <sd_mmc_get_type+0x34>)
    1d7c:	4798      	blx	r3
	return sd_mmc_card->type;
    1d7e:	4b05      	ldr	r3, [pc, #20]	; (1d94 <sd_mmc_get_type+0x38>)
    1d80:	681b      	ldr	r3, [r3, #0]
    1d82:	7adb      	ldrb	r3, [r3, #11]
}
    1d84:	0018      	movs	r0, r3
    1d86:	46bd      	mov	sp, r7
    1d88:	b002      	add	sp, #8
    1d8a:	bd80      	pop	{r7, pc}
    1d8c:	000018cd 	.word	0x000018cd
    1d90:	000019c9 	.word	0x000019c9
    1d94:	2000011c 	.word	0x2000011c

00001d98 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    1d98:	b580      	push	{r7, lr}
    1d9a:	b082      	sub	sp, #8
    1d9c:	af00      	add	r7, sp, #0
    1d9e:	0002      	movs	r2, r0
    1da0:	1dfb      	adds	r3, r7, #7
    1da2:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1da4:	1dfb      	adds	r3, r7, #7
    1da6:	781b      	ldrb	r3, [r3, #0]
    1da8:	0018      	movs	r0, r3
    1daa:	4b07      	ldr	r3, [pc, #28]	; (1dc8 <sd_mmc_get_capacity+0x30>)
    1dac:	4798      	blx	r3
    1dae:	1e03      	subs	r3, r0, #0
    1db0:	d001      	beq.n	1db6 <sd_mmc_get_capacity+0x1e>
		return 0;
    1db2:	2300      	movs	r3, #0
    1db4:	e004      	b.n	1dc0 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
    1db6:	4b05      	ldr	r3, [pc, #20]	; (1dcc <sd_mmc_get_capacity+0x34>)
    1db8:	4798      	blx	r3
	return sd_mmc_card->capacity;
    1dba:	4b05      	ldr	r3, [pc, #20]	; (1dd0 <sd_mmc_get_capacity+0x38>)
    1dbc:	681b      	ldr	r3, [r3, #0]
    1dbe:	685b      	ldr	r3, [r3, #4]
}
    1dc0:	0018      	movs	r0, r3
    1dc2:	46bd      	mov	sp, r7
    1dc4:	b002      	add	sp, #8
    1dc6:	bd80      	pop	{r7, pc}
    1dc8:	000018cd 	.word	0x000018cd
    1dcc:	000019c9 	.word	0x000019c9
    1dd0:	2000011c 	.word	0x2000011c

00001dd4 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
    1dd4:	b580      	push	{r7, lr}
    1dd6:	b082      	sub	sp, #8
    1dd8:	af00      	add	r7, sp, #0
    1dda:	0002      	movs	r2, r0
    1ddc:	1dfb      	adds	r3, r7, #7
    1dde:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
    1de0:	2300      	movs	r3, #0
}
    1de2:	0018      	movs	r0, r3
    1de4:	46bd      	mov	sp, r7
    1de6:	b002      	add	sp, #8
    1de8:	bd80      	pop	{r7, pc}
	...

00001dec <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1dec:	b590      	push	{r4, r7, lr}
    1dee:	b089      	sub	sp, #36	; 0x24
    1df0:	af02      	add	r7, sp, #8
    1df2:	6039      	str	r1, [r7, #0]
    1df4:	0011      	movs	r1, r2
    1df6:	1dfb      	adds	r3, r7, #7
    1df8:	1c02      	adds	r2, r0, #0
    1dfa:	701a      	strb	r2, [r3, #0]
    1dfc:	1d3b      	adds	r3, r7, #4
    1dfe:	1c0a      	adds	r2, r1, #0
    1e00:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1e02:	230f      	movs	r3, #15
    1e04:	18fc      	adds	r4, r7, r3
    1e06:	1dfb      	adds	r3, r7, #7
    1e08:	781b      	ldrb	r3, [r3, #0]
    1e0a:	0018      	movs	r0, r3
    1e0c:	4b29      	ldr	r3, [pc, #164]	; (1eb4 <sd_mmc_init_read_blocks+0xc8>)
    1e0e:	4798      	blx	r3
    1e10:	0003      	movs	r3, r0
    1e12:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    1e14:	230f      	movs	r3, #15
    1e16:	18fb      	adds	r3, r7, r3
    1e18:	781b      	ldrb	r3, [r3, #0]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d003      	beq.n	1e26 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
    1e1e:	230f      	movs	r3, #15
    1e20:	18fb      	adds	r3, r7, r3
    1e22:	781b      	ldrb	r3, [r3, #0]
    1e24:	e041      	b.n	1eaa <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
    1e26:	4b24      	ldr	r3, [pc, #144]	; (1eb8 <sd_mmc_init_read_blocks+0xcc>)
    1e28:	4798      	blx	r3
    1e2a:	0003      	movs	r3, r0
    1e2c:	001a      	movs	r2, r3
    1e2e:	2301      	movs	r3, #1
    1e30:	4053      	eors	r3, r2
    1e32:	b2db      	uxtb	r3, r3
    1e34:	2b00      	cmp	r3, #0
    1e36:	d003      	beq.n	1e40 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
    1e38:	4b20      	ldr	r3, [pc, #128]	; (1ebc <sd_mmc_init_read_blocks+0xd0>)
    1e3a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1e3c:	2305      	movs	r3, #5
    1e3e:	e034      	b.n	1eaa <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
    1e40:	1d3b      	adds	r3, r7, #4
    1e42:	881b      	ldrh	r3, [r3, #0]
    1e44:	2b01      	cmp	r3, #1
    1e46:	d902      	bls.n	1e4e <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    1e48:	4b1d      	ldr	r3, [pc, #116]	; (1ec0 <sd_mmc_init_read_blocks+0xd4>)
    1e4a:	617b      	str	r3, [r7, #20]
    1e4c:	e001      	b.n	1e52 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    1e4e:	4b1d      	ldr	r3, [pc, #116]	; (1ec4 <sd_mmc_init_read_blocks+0xd8>)
    1e50:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    1e52:	4b1d      	ldr	r3, [pc, #116]	; (1ec8 <sd_mmc_init_read_blocks+0xdc>)
    1e54:	681b      	ldr	r3, [r3, #0]
    1e56:	7adb      	ldrb	r3, [r3, #11]
    1e58:	001a      	movs	r2, r3
    1e5a:	2308      	movs	r3, #8
    1e5c:	4013      	ands	r3, r2
    1e5e:	d002      	beq.n	1e66 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
    1e60:	683b      	ldr	r3, [r7, #0]
    1e62:	613b      	str	r3, [r7, #16]
    1e64:	e002      	b.n	1e6c <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    1e66:	683b      	ldr	r3, [r7, #0]
    1e68:	025b      	lsls	r3, r3, #9
    1e6a:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    1e6c:	1d3b      	adds	r3, r7, #4
    1e6e:	881c      	ldrh	r4, [r3, #0]
    1e70:	2380      	movs	r3, #128	; 0x80
    1e72:	009a      	lsls	r2, r3, #2
    1e74:	6939      	ldr	r1, [r7, #16]
    1e76:	6978      	ldr	r0, [r7, #20]
    1e78:	2301      	movs	r3, #1
    1e7a:	9300      	str	r3, [sp, #0]
    1e7c:	0023      	movs	r3, r4
    1e7e:	4c13      	ldr	r4, [pc, #76]	; (1ecc <sd_mmc_init_read_blocks+0xe0>)
    1e80:	47a0      	blx	r4
    1e82:	0003      	movs	r3, r0
    1e84:	001a      	movs	r2, r3
    1e86:	2301      	movs	r3, #1
    1e88:	4053      	eors	r3, r2
    1e8a:	b2db      	uxtb	r3, r3
    1e8c:	2b00      	cmp	r3, #0
    1e8e:	d003      	beq.n	1e98 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
    1e90:	4b0a      	ldr	r3, [pc, #40]	; (1ebc <sd_mmc_init_read_blocks+0xd0>)
    1e92:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1e94:	2305      	movs	r3, #5
    1e96:	e008      	b.n	1eaa <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    1e98:	4b0d      	ldr	r3, [pc, #52]	; (1ed0 <sd_mmc_init_read_blocks+0xe4>)
    1e9a:	1d3a      	adds	r2, r7, #4
    1e9c:	8812      	ldrh	r2, [r2, #0]
    1e9e:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    1ea0:	4b0c      	ldr	r3, [pc, #48]	; (1ed4 <sd_mmc_init_read_blocks+0xe8>)
    1ea2:	1d3a      	adds	r2, r7, #4
    1ea4:	8812      	ldrh	r2, [r2, #0]
    1ea6:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    1ea8:	2300      	movs	r3, #0
}
    1eaa:	0018      	movs	r0, r3
    1eac:	46bd      	mov	sp, r7
    1eae:	b007      	add	sp, #28
    1eb0:	bd90      	pop	{r4, r7, pc}
    1eb2:	46c0      	nop			; (mov r8, r8)
    1eb4:	000018cd 	.word	0x000018cd
    1eb8:	00001769 	.word	0x00001769
    1ebc:	000019c9 	.word	0x000019c9
    1ec0:	00101112 	.word	0x00101112
    1ec4:	00081111 	.word	0x00081111
    1ec8:	2000011c 	.word	0x2000011c
    1ecc:	00002c65 	.word	0x00002c65
    1ed0:	20000122 	.word	0x20000122
    1ed4:	20000120 	.word	0x20000120

00001ed8 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    1ed8:	b580      	push	{r7, lr}
    1eda:	b082      	sub	sp, #8
    1edc:	af00      	add	r7, sp, #0
    1ede:	6078      	str	r0, [r7, #4]
    1ee0:	000a      	movs	r2, r1
    1ee2:	1cbb      	adds	r3, r7, #2
    1ee4:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    1ee6:	1cbb      	adds	r3, r7, #2
    1ee8:	881a      	ldrh	r2, [r3, #0]
    1eea:	687b      	ldr	r3, [r7, #4]
    1eec:	0011      	movs	r1, r2
    1eee:	0018      	movs	r0, r3
    1ef0:	4b0d      	ldr	r3, [pc, #52]	; (1f28 <sd_mmc_start_read_blocks+0x50>)
    1ef2:	4798      	blx	r3
    1ef4:	0003      	movs	r3, r0
    1ef6:	001a      	movs	r2, r3
    1ef8:	2301      	movs	r3, #1
    1efa:	4053      	eors	r3, r2
    1efc:	b2db      	uxtb	r3, r3
    1efe:	2b00      	cmp	r3, #0
    1f00:	d004      	beq.n	1f0c <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    1f02:	4b0a      	ldr	r3, [pc, #40]	; (1f2c <sd_mmc_start_read_blocks+0x54>)
    1f04:	2200      	movs	r2, #0
    1f06:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    1f08:	2305      	movs	r3, #5
    1f0a:	e008      	b.n	1f1e <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    1f0c:	4b07      	ldr	r3, [pc, #28]	; (1f2c <sd_mmc_start_read_blocks+0x54>)
    1f0e:	881a      	ldrh	r2, [r3, #0]
    1f10:	1cbb      	adds	r3, r7, #2
    1f12:	881b      	ldrh	r3, [r3, #0]
    1f14:	1ad3      	subs	r3, r2, r3
    1f16:	b29a      	uxth	r2, r3
    1f18:	4b04      	ldr	r3, [pc, #16]	; (1f2c <sd_mmc_start_read_blocks+0x54>)
    1f1a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    1f1c:	2300      	movs	r3, #0
}
    1f1e:	0018      	movs	r0, r3
    1f20:	46bd      	mov	sp, r7
    1f22:	b002      	add	sp, #8
    1f24:	bd80      	pop	{r7, pc}
    1f26:	46c0      	nop			; (mov r8, r8)
    1f28:	00002f35 	.word	0x00002f35
    1f2c:	20000122 	.word	0x20000122

00001f30 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    1f30:	b580      	push	{r7, lr}
    1f32:	b082      	sub	sp, #8
    1f34:	af00      	add	r7, sp, #0
    1f36:	0002      	movs	r2, r0
    1f38:	1dfb      	adds	r3, r7, #7
    1f3a:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
    1f3c:	4b1c      	ldr	r3, [pc, #112]	; (1fb0 <sd_mmc_wait_end_of_read_blocks+0x80>)
    1f3e:	4798      	blx	r3
    1f40:	0003      	movs	r3, r0
    1f42:	001a      	movs	r2, r3
    1f44:	2301      	movs	r3, #1
    1f46:	4053      	eors	r3, r2
    1f48:	b2db      	uxtb	r3, r3
    1f4a:	2b00      	cmp	r3, #0
    1f4c:	d001      	beq.n	1f52 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
    1f4e:	2305      	movs	r3, #5
    1f50:	e029      	b.n	1fa6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
    1f52:	1dfb      	adds	r3, r7, #7
    1f54:	781b      	ldrb	r3, [r3, #0]
    1f56:	2b00      	cmp	r3, #0
    1f58:	d003      	beq.n	1f62 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    1f5a:	4b16      	ldr	r3, [pc, #88]	; (1fb4 <sd_mmc_wait_end_of_read_blocks+0x84>)
    1f5c:	2200      	movs	r2, #0
    1f5e:	801a      	strh	r2, [r3, #0]
    1f60:	e005      	b.n	1f6e <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    1f62:	4b14      	ldr	r3, [pc, #80]	; (1fb4 <sd_mmc_wait_end_of_read_blocks+0x84>)
    1f64:	881b      	ldrh	r3, [r3, #0]
    1f66:	2b00      	cmp	r3, #0
    1f68:	d001      	beq.n	1f6e <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
    1f6a:	2300      	movs	r3, #0
    1f6c:	e01b      	b.n	1fa6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    1f6e:	4b12      	ldr	r3, [pc, #72]	; (1fb8 <sd_mmc_wait_end_of_read_blocks+0x88>)
    1f70:	881b      	ldrh	r3, [r3, #0]
    1f72:	2b01      	cmp	r3, #1
    1f74:	d103      	bne.n	1f7e <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    1f76:	4b11      	ldr	r3, [pc, #68]	; (1fbc <sd_mmc_wait_end_of_read_blocks+0x8c>)
    1f78:	4798      	blx	r3
		return SD_MMC_OK;
    1f7a:	2300      	movs	r3, #0
    1f7c:	e013      	b.n	1fa6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    1f7e:	4b10      	ldr	r3, [pc, #64]	; (1fc0 <sd_mmc_wait_end_of_read_blocks+0x90>)
    1f80:	2100      	movs	r1, #0
    1f82:	0018      	movs	r0, r3
    1f84:	4b0f      	ldr	r3, [pc, #60]	; (1fc4 <sd_mmc_wait_end_of_read_blocks+0x94>)
    1f86:	4798      	blx	r3
    1f88:	0003      	movs	r3, r0
    1f8a:	001a      	movs	r2, r3
    1f8c:	2301      	movs	r3, #1
    1f8e:	4053      	eors	r3, r2
    1f90:	b2db      	uxtb	r3, r3
    1f92:	2b00      	cmp	r3, #0
    1f94:	d004      	beq.n	1fa0 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    1f96:	4b0a      	ldr	r3, [pc, #40]	; (1fc0 <sd_mmc_wait_end_of_read_blocks+0x90>)
    1f98:	2100      	movs	r1, #0
    1f9a:	0018      	movs	r0, r3
    1f9c:	4b09      	ldr	r3, [pc, #36]	; (1fc4 <sd_mmc_wait_end_of_read_blocks+0x94>)
    1f9e:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
    1fa0:	4b06      	ldr	r3, [pc, #24]	; (1fbc <sd_mmc_wait_end_of_read_blocks+0x8c>)
    1fa2:	4798      	blx	r3
	return SD_MMC_OK;
    1fa4:	2300      	movs	r3, #0
}
    1fa6:	0018      	movs	r0, r3
    1fa8:	46bd      	mov	sp, r7
    1faa:	b002      	add	sp, #8
    1fac:	bd80      	pop	{r7, pc}
    1fae:	46c0      	nop			; (mov r8, r8)
    1fb0:	00002fd9 	.word	0x00002fd9
    1fb4:	20000122 	.word	0x20000122
    1fb8:	20000120 	.word	0x20000120
    1fbc:	000019c9 	.word	0x000019c9
    1fc0:	0000310c 	.word	0x0000310c
    1fc4:	00002c3d 	.word	0x00002c3d

00001fc8 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1fc8:	b590      	push	{r4, r7, lr}
    1fca:	b089      	sub	sp, #36	; 0x24
    1fcc:	af02      	add	r7, sp, #8
    1fce:	6039      	str	r1, [r7, #0]
    1fd0:	0011      	movs	r1, r2
    1fd2:	1dfb      	adds	r3, r7, #7
    1fd4:	1c02      	adds	r2, r0, #0
    1fd6:	701a      	strb	r2, [r3, #0]
    1fd8:	1d3b      	adds	r3, r7, #4
    1fda:	1c0a      	adds	r2, r1, #0
    1fdc:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1fde:	230f      	movs	r3, #15
    1fe0:	18fc      	adds	r4, r7, r3
    1fe2:	1dfb      	adds	r3, r7, #7
    1fe4:	781b      	ldrb	r3, [r3, #0]
    1fe6:	0018      	movs	r0, r3
    1fe8:	4b28      	ldr	r3, [pc, #160]	; (208c <STACK_SIZE+0x8c>)
    1fea:	4798      	blx	r3
    1fec:	0003      	movs	r3, r0
    1fee:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    1ff0:	230f      	movs	r3, #15
    1ff2:	18fb      	adds	r3, r7, r3
    1ff4:	781b      	ldrb	r3, [r3, #0]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d003      	beq.n	2002 <STACK_SIZE+0x2>
		return sd_mmc_err;
    1ffa:	230f      	movs	r3, #15
    1ffc:	18fb      	adds	r3, r7, r3
    1ffe:	781b      	ldrb	r3, [r3, #0]
    2000:	e03f      	b.n	2082 <STACK_SIZE+0x82>
	}
	if (sd_mmc_is_write_protected(slot)) {
    2002:	1dfb      	adds	r3, r7, #7
    2004:	781b      	ldrb	r3, [r3, #0]
    2006:	0018      	movs	r0, r3
    2008:	4b21      	ldr	r3, [pc, #132]	; (2090 <STACK_SIZE+0x90>)
    200a:	4798      	blx	r3
    200c:	1e03      	subs	r3, r0, #0
    200e:	d003      	beq.n	2018 <STACK_SIZE+0x18>
		sd_mmc_deselect_slot();
    2010:	4b20      	ldr	r3, [pc, #128]	; (2094 <STACK_SIZE+0x94>)
    2012:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    2014:	2307      	movs	r3, #7
    2016:	e034      	b.n	2082 <STACK_SIZE+0x82>
	}

	if (nb_block > 1) {
    2018:	1d3b      	adds	r3, r7, #4
    201a:	881b      	ldrh	r3, [r3, #0]
    201c:	2b01      	cmp	r3, #1
    201e:	d902      	bls.n	2026 <STACK_SIZE+0x26>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    2020:	4b1d      	ldr	r3, [pc, #116]	; (2098 <STACK_SIZE+0x98>)
    2022:	617b      	str	r3, [r7, #20]
    2024:	e001      	b.n	202a <STACK_SIZE+0x2a>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    2026:	4b1d      	ldr	r3, [pc, #116]	; (209c <STACK_SIZE+0x9c>)
    2028:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    202a:	4b1d      	ldr	r3, [pc, #116]	; (20a0 <STACK_SIZE+0xa0>)
    202c:	681b      	ldr	r3, [r3, #0]
    202e:	7adb      	ldrb	r3, [r3, #11]
    2030:	001a      	movs	r2, r3
    2032:	2308      	movs	r3, #8
    2034:	4013      	ands	r3, r2
    2036:	d002      	beq.n	203e <STACK_SIZE+0x3e>
		arg = start;
    2038:	683b      	ldr	r3, [r7, #0]
    203a:	613b      	str	r3, [r7, #16]
    203c:	e002      	b.n	2044 <STACK_SIZE+0x44>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    203e:	683b      	ldr	r3, [r7, #0]
    2040:	025b      	lsls	r3, r3, #9
    2042:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    2044:	1d3b      	adds	r3, r7, #4
    2046:	881c      	ldrh	r4, [r3, #0]
    2048:	2380      	movs	r3, #128	; 0x80
    204a:	009a      	lsls	r2, r3, #2
    204c:	6939      	ldr	r1, [r7, #16]
    204e:	6978      	ldr	r0, [r7, #20]
    2050:	2301      	movs	r3, #1
    2052:	9300      	str	r3, [sp, #0]
    2054:	0023      	movs	r3, r4
    2056:	4c13      	ldr	r4, [pc, #76]	; (20a4 <STACK_SIZE+0xa4>)
    2058:	47a0      	blx	r4
    205a:	0003      	movs	r3, r0
    205c:	001a      	movs	r2, r3
    205e:	2301      	movs	r3, #1
    2060:	4053      	eors	r3, r2
    2062:	b2db      	uxtb	r3, r3
    2064:	2b00      	cmp	r3, #0
    2066:	d003      	beq.n	2070 <STACK_SIZE+0x70>
		sd_mmc_deselect_slot();
    2068:	4b0a      	ldr	r3, [pc, #40]	; (2094 <STACK_SIZE+0x94>)
    206a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    206c:	2305      	movs	r3, #5
    206e:	e008      	b.n	2082 <STACK_SIZE+0x82>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    2070:	4b0d      	ldr	r3, [pc, #52]	; (20a8 <STACK_SIZE+0xa8>)
    2072:	1d3a      	adds	r2, r7, #4
    2074:	8812      	ldrh	r2, [r2, #0]
    2076:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    2078:	4b0c      	ldr	r3, [pc, #48]	; (20ac <STACK_SIZE+0xac>)
    207a:	1d3a      	adds	r2, r7, #4
    207c:	8812      	ldrh	r2, [r2, #0]
    207e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    2080:	2300      	movs	r3, #0
}
    2082:	0018      	movs	r0, r3
    2084:	46bd      	mov	sp, r7
    2086:	b007      	add	sp, #28
    2088:	bd90      	pop	{r4, r7, pc}
    208a:	46c0      	nop			; (mov r8, r8)
    208c:	000018cd 	.word	0x000018cd
    2090:	00001dd5 	.word	0x00001dd5
    2094:	000019c9 	.word	0x000019c9
    2098:	00109119 	.word	0x00109119
    209c:	00089118 	.word	0x00089118
    20a0:	2000011c 	.word	0x2000011c
    20a4:	00002c65 	.word	0x00002c65
    20a8:	20000122 	.word	0x20000122
    20ac:	20000120 	.word	0x20000120

000020b0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    20b0:	b580      	push	{r7, lr}
    20b2:	b082      	sub	sp, #8
    20b4:	af00      	add	r7, sp, #0
    20b6:	6078      	str	r0, [r7, #4]
    20b8:	000a      	movs	r2, r1
    20ba:	1cbb      	adds	r3, r7, #2
    20bc:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    20be:	1cbb      	adds	r3, r7, #2
    20c0:	881a      	ldrh	r2, [r3, #0]
    20c2:	687b      	ldr	r3, [r7, #4]
    20c4:	0011      	movs	r1, r2
    20c6:	0018      	movs	r0, r3
    20c8:	4b0d      	ldr	r3, [pc, #52]	; (2100 <sd_mmc_start_write_blocks+0x50>)
    20ca:	4798      	blx	r3
    20cc:	0003      	movs	r3, r0
    20ce:	001a      	movs	r2, r3
    20d0:	2301      	movs	r3, #1
    20d2:	4053      	eors	r3, r2
    20d4:	b2db      	uxtb	r3, r3
    20d6:	2b00      	cmp	r3, #0
    20d8:	d004      	beq.n	20e4 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    20da:	4b0a      	ldr	r3, [pc, #40]	; (2104 <sd_mmc_start_write_blocks+0x54>)
    20dc:	2200      	movs	r2, #0
    20de:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    20e0:	2305      	movs	r3, #5
    20e2:	e008      	b.n	20f6 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    20e4:	4b07      	ldr	r3, [pc, #28]	; (2104 <sd_mmc_start_write_blocks+0x54>)
    20e6:	881a      	ldrh	r2, [r3, #0]
    20e8:	1cbb      	adds	r3, r7, #2
    20ea:	881b      	ldrh	r3, [r3, #0]
    20ec:	1ad3      	subs	r3, r2, r3
    20ee:	b29a      	uxth	r2, r3
    20f0:	4b04      	ldr	r3, [pc, #16]	; (2104 <sd_mmc_start_write_blocks+0x54>)
    20f2:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    20f4:	2300      	movs	r3, #0
}
    20f6:	0018      	movs	r0, r3
    20f8:	46bd      	mov	sp, r7
    20fa:	b002      	add	sp, #8
    20fc:	bd80      	pop	{r7, pc}
    20fe:	46c0      	nop			; (mov r8, r8)
    2100:	00002fe5 	.word	0x00002fe5
    2104:	20000122 	.word	0x20000122

00002108 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    2108:	b580      	push	{r7, lr}
    210a:	b082      	sub	sp, #8
    210c:	af00      	add	r7, sp, #0
    210e:	0002      	movs	r2, r0
    2110:	1dfb      	adds	r3, r7, #7
    2112:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
    2114:	4b13      	ldr	r3, [pc, #76]	; (2164 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    2116:	4798      	blx	r3
    2118:	0003      	movs	r3, r0
    211a:	001a      	movs	r2, r3
    211c:	2301      	movs	r3, #1
    211e:	4053      	eors	r3, r2
    2120:	b2db      	uxtb	r3, r3
    2122:	2b00      	cmp	r3, #0
    2124:	d001      	beq.n	212a <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
    2126:	2305      	movs	r3, #5
    2128:	e018      	b.n	215c <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
    212a:	1dfb      	adds	r3, r7, #7
    212c:	781b      	ldrb	r3, [r3, #0]
    212e:	2b00      	cmp	r3, #0
    2130:	d003      	beq.n	213a <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    2132:	4b0d      	ldr	r3, [pc, #52]	; (2168 <sd_mmc_wait_end_of_write_blocks+0x60>)
    2134:	2200      	movs	r2, #0
    2136:	801a      	strh	r2, [r3, #0]
    2138:	e005      	b.n	2146 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    213a:	4b0b      	ldr	r3, [pc, #44]	; (2168 <sd_mmc_wait_end_of_write_blocks+0x60>)
    213c:	881b      	ldrh	r3, [r3, #0]
    213e:	2b00      	cmp	r3, #0
    2140:	d001      	beq.n	2146 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
    2142:	2300      	movs	r3, #0
    2144:	e00a      	b.n	215c <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    2146:	4b09      	ldr	r3, [pc, #36]	; (216c <sd_mmc_wait_end_of_write_blocks+0x64>)
    2148:	881b      	ldrh	r3, [r3, #0]
    214a:	2b01      	cmp	r3, #1
    214c:	d103      	bne.n	2156 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    214e:	4b08      	ldr	r3, [pc, #32]	; (2170 <sd_mmc_wait_end_of_write_blocks+0x68>)
    2150:	4798      	blx	r3
		return SD_MMC_OK;
    2152:	2300      	movs	r3, #0
    2154:	e002      	b.n	215c <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
    2156:	4b06      	ldr	r3, [pc, #24]	; (2170 <sd_mmc_wait_end_of_write_blocks+0x68>)
    2158:	4798      	blx	r3
	return SD_MMC_OK;
    215a:	2300      	movs	r3, #0
}
    215c:	0018      	movs	r0, r3
    215e:	46bd      	mov	sp, r7
    2160:	b002      	add	sp, #8
    2162:	bd80      	pop	{r7, pc}
    2164:	000030a5 	.word	0x000030a5
    2168:	20000122 	.word	0x20000122
    216c:	20000120 	.word	0x20000120
    2170:	000019c9 	.word	0x000019c9

00002174 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    2174:	b580      	push	{r7, lr}
    2176:	b082      	sub	sp, #8
    2178:	af00      	add	r7, sp, #0
    217a:	0002      	movs	r2, r0
    217c:	1dfb      	adds	r3, r7, #7
    217e:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
    2180:	1dfb      	adds	r3, r7, #7
    2182:	781b      	ldrb	r3, [r3, #0]
    2184:	0018      	movs	r0, r3
    2186:	4b16      	ldr	r3, [pc, #88]	; (21e0 <sd_mmc_test_unit_ready+0x6c>)
    2188:	4798      	blx	r3
    218a:	0003      	movs	r3, r0
    218c:	2b01      	cmp	r3, #1
    218e:	d019      	beq.n	21c4 <sd_mmc_test_unit_ready+0x50>
    2190:	2b02      	cmp	r3, #2
    2192:	d019      	beq.n	21c8 <sd_mmc_test_unit_ready+0x54>
    2194:	2b00      	cmp	r3, #0
    2196:	d11e      	bne.n	21d6 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
    2198:	1dfb      	adds	r3, r7, #7
    219a:	781b      	ldrb	r3, [r3, #0]
    219c:	4a11      	ldr	r2, [pc, #68]	; (21e4 <sd_mmc_test_unit_ready+0x70>)
    219e:	5cd3      	ldrb	r3, [r2, r3]
    21a0:	2b00      	cmp	r3, #0
    21a2:	d001      	beq.n	21a8 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
    21a4:	2302      	movs	r3, #2
    21a6:	e017      	b.n	21d8 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    21a8:	1dfb      	adds	r3, r7, #7
    21aa:	781b      	ldrb	r3, [r3, #0]
    21ac:	0018      	movs	r0, r3
    21ae:	4b0e      	ldr	r3, [pc, #56]	; (21e8 <sd_mmc_test_unit_ready+0x74>)
    21b0:	4798      	blx	r3
    21b2:	0003      	movs	r3, r0
    21b4:	001a      	movs	r2, r3
    21b6:	2303      	movs	r3, #3
    21b8:	4013      	ands	r3, r2
    21ba:	d001      	beq.n	21c0 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
    21bc:	2300      	movs	r3, #0
    21be:	e00b      	b.n	21d8 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
    21c0:	2302      	movs	r3, #2
    21c2:	e009      	b.n	21d8 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
    21c4:	2303      	movs	r3, #3
    21c6:	e007      	b.n	21d8 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
    21c8:	1dfb      	adds	r3, r7, #7
    21ca:	781b      	ldrb	r3, [r3, #0]
    21cc:	4a05      	ldr	r2, [pc, #20]	; (21e4 <sd_mmc_test_unit_ready+0x70>)
    21ce:	2100      	movs	r1, #0
    21d0:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
    21d2:	2302      	movs	r3, #2
    21d4:	e000      	b.n	21d8 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
    21d6:	2301      	movs	r3, #1
	}
}
    21d8:	0018      	movs	r0, r3
    21da:	46bd      	mov	sp, r7
    21dc:	b002      	add	sp, #8
    21de:	bd80      	pop	{r7, pc}
    21e0:	00001ce9 	.word	0x00001ce9
    21e4:	20000124 	.word	0x20000124
    21e8:	00001d5d 	.word	0x00001d5d

000021ec <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    21ec:	b580      	push	{r7, lr}
    21ee:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
    21f0:	2000      	movs	r0, #0
    21f2:	4b03      	ldr	r3, [pc, #12]	; (2200 <sd_mmc_test_unit_ready_0+0x14>)
    21f4:	4798      	blx	r3
    21f6:	0003      	movs	r3, r0
}
    21f8:	0018      	movs	r0, r3
    21fa:	46bd      	mov	sp, r7
    21fc:	bd80      	pop	{r7, pc}
    21fe:	46c0      	nop			; (mov r8, r8)
    2200:	00002175 	.word	0x00002175

00002204 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    2204:	b580      	push	{r7, lr}
    2206:	b082      	sub	sp, #8
    2208:	af00      	add	r7, sp, #0
    220a:	0002      	movs	r2, r0
    220c:	6039      	str	r1, [r7, #0]
    220e:	1dfb      	adds	r3, r7, #7
    2210:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    2212:	1dfb      	adds	r3, r7, #7
    2214:	781b      	ldrb	r3, [r3, #0]
    2216:	0018      	movs	r0, r3
    2218:	4b08      	ldr	r3, [pc, #32]	; (223c <sd_mmc_read_capacity+0x38>)
    221a:	4798      	blx	r3
    221c:	0003      	movs	r3, r0
    221e:	005b      	lsls	r3, r3, #1
    2220:	1e5a      	subs	r2, r3, #1
    2222:	683b      	ldr	r3, [r7, #0]
    2224:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
    2226:	1dfb      	adds	r3, r7, #7
    2228:	781b      	ldrb	r3, [r3, #0]
    222a:	0018      	movs	r0, r3
    222c:	4b04      	ldr	r3, [pc, #16]	; (2240 <sd_mmc_read_capacity+0x3c>)
    222e:	4798      	blx	r3
    2230:	0003      	movs	r3, r0
}
    2232:	0018      	movs	r0, r3
    2234:	46bd      	mov	sp, r7
    2236:	b002      	add	sp, #8
    2238:	bd80      	pop	{r7, pc}
    223a:	46c0      	nop			; (mov r8, r8)
    223c:	00001d99 	.word	0x00001d99
    2240:	00002175 	.word	0x00002175

00002244 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    2244:	b580      	push	{r7, lr}
    2246:	b082      	sub	sp, #8
    2248:	af00      	add	r7, sp, #0
    224a:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
    224c:	687b      	ldr	r3, [r7, #4]
    224e:	0019      	movs	r1, r3
    2250:	2000      	movs	r0, #0
    2252:	4b03      	ldr	r3, [pc, #12]	; (2260 <sd_mmc_read_capacity_0+0x1c>)
    2254:	4798      	blx	r3
    2256:	0003      	movs	r3, r0
}
    2258:	0018      	movs	r0, r3
    225a:	46bd      	mov	sp, r7
    225c:	b002      	add	sp, #8
    225e:	bd80      	pop	{r7, pc}
    2260:	00002205 	.word	0x00002205

00002264 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
    2264:	b580      	push	{r7, lr}
    2266:	b082      	sub	sp, #8
    2268:	af00      	add	r7, sp, #0
    226a:	0002      	movs	r2, r0
    226c:	1dfb      	adds	r3, r7, #7
    226e:	701a      	strb	r2, [r3, #0]
    2270:	1dbb      	adds	r3, r7, #6
    2272:	1c0a      	adds	r2, r1, #0
    2274:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
    2276:	1dfb      	adds	r3, r7, #7
    2278:	781b      	ldrb	r3, [r3, #0]
    227a:	4a04      	ldr	r2, [pc, #16]	; (228c <sd_mmc_unload+0x28>)
    227c:	1db9      	adds	r1, r7, #6
    227e:	7809      	ldrb	r1, [r1, #0]
    2280:	54d1      	strb	r1, [r2, r3]
	return true;
    2282:	2301      	movs	r3, #1
}
    2284:	0018      	movs	r0, r3
    2286:	46bd      	mov	sp, r7
    2288:	b002      	add	sp, #8
    228a:	bd80      	pop	{r7, pc}
    228c:	20000124 	.word	0x20000124

00002290 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
    2290:	b580      	push	{r7, lr}
    2292:	b082      	sub	sp, #8
    2294:	af00      	add	r7, sp, #0
    2296:	0002      	movs	r2, r0
    2298:	1dfb      	adds	r3, r7, #7
    229a:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
    229c:	1dfb      	adds	r3, r7, #7
    229e:	781b      	ldrb	r3, [r3, #0]
    22a0:	0019      	movs	r1, r3
    22a2:	2000      	movs	r0, #0
    22a4:	4b03      	ldr	r3, [pc, #12]	; (22b4 <sd_mmc_unload_0+0x24>)
    22a6:	4798      	blx	r3
    22a8:	0003      	movs	r3, r0
}
    22aa:	0018      	movs	r0, r3
    22ac:	46bd      	mov	sp, r7
    22ae:	b002      	add	sp, #8
    22b0:	bd80      	pop	{r7, pc}
    22b2:	46c0      	nop			; (mov r8, r8)
    22b4:	00002265 	.word	0x00002265

000022b8 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
    22b8:	b580      	push	{r7, lr}
    22ba:	b082      	sub	sp, #8
    22bc:	af00      	add	r7, sp, #0
    22be:	0002      	movs	r2, r0
    22c0:	1dfb      	adds	r3, r7, #7
    22c2:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
    22c4:	1dfb      	adds	r3, r7, #7
    22c6:	781b      	ldrb	r3, [r3, #0]
    22c8:	0018      	movs	r0, r3
    22ca:	4b03      	ldr	r3, [pc, #12]	; (22d8 <sd_mmc_wr_protect+0x20>)
    22cc:	4798      	blx	r3
    22ce:	0003      	movs	r3, r0
}
    22d0:	0018      	movs	r0, r3
    22d2:	46bd      	mov	sp, r7
    22d4:	b002      	add	sp, #8
    22d6:	bd80      	pop	{r7, pc}
    22d8:	00001dd5 	.word	0x00001dd5

000022dc <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
    22dc:	b580      	push	{r7, lr}
    22de:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
    22e0:	2000      	movs	r0, #0
    22e2:	4b03      	ldr	r3, [pc, #12]	; (22f0 <sd_mmc_wr_protect_0+0x14>)
    22e4:	4798      	blx	r3
    22e6:	0003      	movs	r3, r0
}
    22e8:	0018      	movs	r0, r3
    22ea:	46bd      	mov	sp, r7
    22ec:	bd80      	pop	{r7, pc}
    22ee:	46c0      	nop			; (mov r8, r8)
    22f0:	000022b9 	.word	0x000022b9

000022f4 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
    22f4:	b580      	push	{r7, lr}
    22f6:	b082      	sub	sp, #8
    22f8:	af00      	add	r7, sp, #0
    22fa:	0002      	movs	r2, r0
    22fc:	1dfb      	adds	r3, r7, #7
    22fe:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
    2300:	2301      	movs	r3, #1
}
    2302:	0018      	movs	r0, r3
    2304:	46bd      	mov	sp, r7
    2306:	b002      	add	sp, #8
    2308:	bd80      	pop	{r7, pc}
	...

0000230c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
    230c:	b580      	push	{r7, lr}
    230e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
    2310:	2000      	movs	r0, #0
    2312:	4b03      	ldr	r3, [pc, #12]	; (2320 <sd_mmc_removal_0+0x14>)
    2314:	4798      	blx	r3
    2316:	0003      	movs	r3, r0
}
    2318:	0018      	movs	r0, r3
    231a:	46bd      	mov	sp, r7
    231c:	bd80      	pop	{r7, pc}
    231e:	46c0      	nop			; (mov r8, r8)
    2320:	000022f5 	.word	0x000022f5

00002324 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    2324:	b580      	push	{r7, lr}
    2326:	b084      	sub	sp, #16
    2328:	af00      	add	r7, sp, #0
    232a:	60b9      	str	r1, [r7, #8]
    232c:	607a      	str	r2, [r7, #4]
    232e:	230f      	movs	r3, #15
    2330:	18fb      	adds	r3, r7, r3
    2332:	1c02      	adds	r2, r0, #0
    2334:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    2336:	68b9      	ldr	r1, [r7, #8]
    2338:	230f      	movs	r3, #15
    233a:	18fb      	adds	r3, r7, r3
    233c:	781b      	ldrb	r3, [r3, #0]
    233e:	2201      	movs	r2, #1
    2340:	0018      	movs	r0, r3
    2342:	4b10      	ldr	r3, [pc, #64]	; (2384 <sd_mmc_mem_2_ram+0x60>)
    2344:	4798      	blx	r3
    2346:	1e03      	subs	r3, r0, #0
    2348:	d005      	beq.n	2356 <sd_mmc_mem_2_ram+0x32>
    234a:	2b02      	cmp	r3, #2
    234c:	d101      	bne.n	2352 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    234e:	2302      	movs	r3, #2
    2350:	e013      	b.n	237a <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
    2352:	2301      	movs	r3, #1
    2354:	e011      	b.n	237a <sd_mmc_mem_2_ram+0x56>
		break;
    2356:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    2358:	687b      	ldr	r3, [r7, #4]
    235a:	2101      	movs	r1, #1
    235c:	0018      	movs	r0, r3
    235e:	4b0a      	ldr	r3, [pc, #40]	; (2388 <sd_mmc_mem_2_ram+0x64>)
    2360:	4798      	blx	r3
    2362:	1e03      	subs	r3, r0, #0
    2364:	d001      	beq.n	236a <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
    2366:	2301      	movs	r3, #1
    2368:	e007      	b.n	237a <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    236a:	2000      	movs	r0, #0
    236c:	4b07      	ldr	r3, [pc, #28]	; (238c <sd_mmc_mem_2_ram+0x68>)
    236e:	4798      	blx	r3
    2370:	1e03      	subs	r3, r0, #0
    2372:	d001      	beq.n	2378 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
    2374:	2301      	movs	r3, #1
    2376:	e000      	b.n	237a <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
    2378:	2300      	movs	r3, #0
}
    237a:	0018      	movs	r0, r3
    237c:	46bd      	mov	sp, r7
    237e:	b004      	add	sp, #16
    2380:	bd80      	pop	{r7, pc}
    2382:	46c0      	nop			; (mov r8, r8)
    2384:	00001ded 	.word	0x00001ded
    2388:	00001ed9 	.word	0x00001ed9
    238c:	00001f31 	.word	0x00001f31

00002390 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    2390:	b580      	push	{r7, lr}
    2392:	b082      	sub	sp, #8
    2394:	af00      	add	r7, sp, #0
    2396:	6078      	str	r0, [r7, #4]
    2398:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
    239a:	683a      	ldr	r2, [r7, #0]
    239c:	687b      	ldr	r3, [r7, #4]
    239e:	0019      	movs	r1, r3
    23a0:	2000      	movs	r0, #0
    23a2:	4b03      	ldr	r3, [pc, #12]	; (23b0 <sd_mmc_mem_2_ram_0+0x20>)
    23a4:	4798      	blx	r3
    23a6:	0003      	movs	r3, r0
}
    23a8:	0018      	movs	r0, r3
    23aa:	46bd      	mov	sp, r7
    23ac:	b002      	add	sp, #8
    23ae:	bd80      	pop	{r7, pc}
    23b0:	00002325 	.word	0x00002325

000023b4 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    23b4:	b580      	push	{r7, lr}
    23b6:	b084      	sub	sp, #16
    23b8:	af00      	add	r7, sp, #0
    23ba:	60b9      	str	r1, [r7, #8]
    23bc:	607a      	str	r2, [r7, #4]
    23be:	230f      	movs	r3, #15
    23c0:	18fb      	adds	r3, r7, r3
    23c2:	1c02      	adds	r2, r0, #0
    23c4:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    23c6:	68b9      	ldr	r1, [r7, #8]
    23c8:	230f      	movs	r3, #15
    23ca:	18fb      	adds	r3, r7, r3
    23cc:	781b      	ldrb	r3, [r3, #0]
    23ce:	2201      	movs	r2, #1
    23d0:	0018      	movs	r0, r3
    23d2:	4b10      	ldr	r3, [pc, #64]	; (2414 <sd_mmc_ram_2_mem+0x60>)
    23d4:	4798      	blx	r3
    23d6:	1e03      	subs	r3, r0, #0
    23d8:	d005      	beq.n	23e6 <sd_mmc_ram_2_mem+0x32>
    23da:	2b02      	cmp	r3, #2
    23dc:	d101      	bne.n	23e2 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    23de:	2302      	movs	r3, #2
    23e0:	e013      	b.n	240a <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
    23e2:	2301      	movs	r3, #1
    23e4:	e011      	b.n	240a <sd_mmc_ram_2_mem+0x56>
		break;
    23e6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    23e8:	687b      	ldr	r3, [r7, #4]
    23ea:	2101      	movs	r1, #1
    23ec:	0018      	movs	r0, r3
    23ee:	4b0a      	ldr	r3, [pc, #40]	; (2418 <sd_mmc_ram_2_mem+0x64>)
    23f0:	4798      	blx	r3
    23f2:	1e03      	subs	r3, r0, #0
    23f4:	d001      	beq.n	23fa <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
    23f6:	2301      	movs	r3, #1
    23f8:	e007      	b.n	240a <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    23fa:	2000      	movs	r0, #0
    23fc:	4b07      	ldr	r3, [pc, #28]	; (241c <sd_mmc_ram_2_mem+0x68>)
    23fe:	4798      	blx	r3
    2400:	1e03      	subs	r3, r0, #0
    2402:	d001      	beq.n	2408 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
    2404:	2301      	movs	r3, #1
    2406:	e000      	b.n	240a <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
    2408:	2300      	movs	r3, #0
}
    240a:	0018      	movs	r0, r3
    240c:	46bd      	mov	sp, r7
    240e:	b004      	add	sp, #16
    2410:	bd80      	pop	{r7, pc}
    2412:	46c0      	nop			; (mov r8, r8)
    2414:	00001fc9 	.word	0x00001fc9
    2418:	000020b1 	.word	0x000020b1
    241c:	00002109 	.word	0x00002109

00002420 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    2420:	b580      	push	{r7, lr}
    2422:	b082      	sub	sp, #8
    2424:	af00      	add	r7, sp, #0
    2426:	6078      	str	r0, [r7, #4]
    2428:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
    242a:	683a      	ldr	r2, [r7, #0]
    242c:	687b      	ldr	r3, [r7, #4]
    242e:	0019      	movs	r1, r3
    2430:	2000      	movs	r0, #0
    2432:	4b03      	ldr	r3, [pc, #12]	; (2440 <sd_mmc_ram_2_mem_0+0x20>)
    2434:	4798      	blx	r3
    2436:	0003      	movs	r3, r0
}
    2438:	0018      	movs	r0, r3
    243a:	46bd      	mov	sp, r7
    243c:	b002      	add	sp, #8
    243e:	bd80      	pop	{r7, pc}
    2440:	000023b5 	.word	0x000023b5

00002444 <system_pinmux_get_group_from_gpio_pin>:
{
    2444:	b580      	push	{r7, lr}
    2446:	b084      	sub	sp, #16
    2448:	af00      	add	r7, sp, #0
    244a:	0002      	movs	r2, r0
    244c:	1dfb      	adds	r3, r7, #7
    244e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2450:	230f      	movs	r3, #15
    2452:	18fb      	adds	r3, r7, r3
    2454:	1dfa      	adds	r2, r7, #7
    2456:	7812      	ldrb	r2, [r2, #0]
    2458:	09d2      	lsrs	r2, r2, #7
    245a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    245c:	230e      	movs	r3, #14
    245e:	18fb      	adds	r3, r7, r3
    2460:	1dfa      	adds	r2, r7, #7
    2462:	7812      	ldrb	r2, [r2, #0]
    2464:	0952      	lsrs	r2, r2, #5
    2466:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2468:	4b0d      	ldr	r3, [pc, #52]	; (24a0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    246a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    246c:	230f      	movs	r3, #15
    246e:	18fb      	adds	r3, r7, r3
    2470:	781b      	ldrb	r3, [r3, #0]
    2472:	2b00      	cmp	r3, #0
    2474:	d10f      	bne.n	2496 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2476:	230f      	movs	r3, #15
    2478:	18fb      	adds	r3, r7, r3
    247a:	781b      	ldrb	r3, [r3, #0]
    247c:	009b      	lsls	r3, r3, #2
    247e:	2210      	movs	r2, #16
    2480:	4694      	mov	ip, r2
    2482:	44bc      	add	ip, r7
    2484:	4463      	add	r3, ip
    2486:	3b08      	subs	r3, #8
    2488:	681a      	ldr	r2, [r3, #0]
    248a:	230e      	movs	r3, #14
    248c:	18fb      	adds	r3, r7, r3
    248e:	781b      	ldrb	r3, [r3, #0]
    2490:	01db      	lsls	r3, r3, #7
    2492:	18d3      	adds	r3, r2, r3
    2494:	e000      	b.n	2498 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    2496:	2300      	movs	r3, #0
}
    2498:	0018      	movs	r0, r3
    249a:	46bd      	mov	sp, r7
    249c:	b004      	add	sp, #16
    249e:	bd80      	pop	{r7, pc}
    24a0:	41004400 	.word	0x41004400

000024a4 <port_get_group_from_gpio_pin>:
{
    24a4:	b580      	push	{r7, lr}
    24a6:	b082      	sub	sp, #8
    24a8:	af00      	add	r7, sp, #0
    24aa:	0002      	movs	r2, r0
    24ac:	1dfb      	adds	r3, r7, #7
    24ae:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    24b0:	1dfb      	adds	r3, r7, #7
    24b2:	781b      	ldrb	r3, [r3, #0]
    24b4:	0018      	movs	r0, r3
    24b6:	4b03      	ldr	r3, [pc, #12]	; (24c4 <port_get_group_from_gpio_pin+0x20>)
    24b8:	4798      	blx	r3
    24ba:	0003      	movs	r3, r0
}
    24bc:	0018      	movs	r0, r3
    24be:	46bd      	mov	sp, r7
    24c0:	b002      	add	sp, #8
    24c2:	bd80      	pop	{r7, pc}
    24c4:	00002445 	.word	0x00002445

000024c8 <port_get_config_defaults>:
{
    24c8:	b580      	push	{r7, lr}
    24ca:	b082      	sub	sp, #8
    24cc:	af00      	add	r7, sp, #0
    24ce:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    24d0:	687b      	ldr	r3, [r7, #4]
    24d2:	2200      	movs	r2, #0
    24d4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    24d6:	687b      	ldr	r3, [r7, #4]
    24d8:	2201      	movs	r2, #1
    24da:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	2200      	movs	r2, #0
    24e0:	709a      	strb	r2, [r3, #2]
}
    24e2:	46c0      	nop			; (mov r8, r8)
    24e4:	46bd      	mov	sp, r7
    24e6:	b002      	add	sp, #8
    24e8:	bd80      	pop	{r7, pc}
	...

000024ec <port_pin_set_output_level>:
{
    24ec:	b580      	push	{r7, lr}
    24ee:	b084      	sub	sp, #16
    24f0:	af00      	add	r7, sp, #0
    24f2:	0002      	movs	r2, r0
    24f4:	1dfb      	adds	r3, r7, #7
    24f6:	701a      	strb	r2, [r3, #0]
    24f8:	1dbb      	adds	r3, r7, #6
    24fa:	1c0a      	adds	r2, r1, #0
    24fc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    24fe:	1dfb      	adds	r3, r7, #7
    2500:	781b      	ldrb	r3, [r3, #0]
    2502:	0018      	movs	r0, r3
    2504:	4b0d      	ldr	r3, [pc, #52]	; (253c <port_pin_set_output_level+0x50>)
    2506:	4798      	blx	r3
    2508:	0003      	movs	r3, r0
    250a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    250c:	1dfb      	adds	r3, r7, #7
    250e:	781b      	ldrb	r3, [r3, #0]
    2510:	221f      	movs	r2, #31
    2512:	4013      	ands	r3, r2
    2514:	2201      	movs	r2, #1
    2516:	409a      	lsls	r2, r3
    2518:	0013      	movs	r3, r2
    251a:	60bb      	str	r3, [r7, #8]
	if (level) {
    251c:	1dbb      	adds	r3, r7, #6
    251e:	781b      	ldrb	r3, [r3, #0]
    2520:	2b00      	cmp	r3, #0
    2522:	d003      	beq.n	252c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2524:	68fb      	ldr	r3, [r7, #12]
    2526:	68ba      	ldr	r2, [r7, #8]
    2528:	619a      	str	r2, [r3, #24]
}
    252a:	e002      	b.n	2532 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    252c:	68fb      	ldr	r3, [r7, #12]
    252e:	68ba      	ldr	r2, [r7, #8]
    2530:	615a      	str	r2, [r3, #20]
}
    2532:	46c0      	nop			; (mov r8, r8)
    2534:	46bd      	mov	sp, r7
    2536:	b004      	add	sp, #16
    2538:	bd80      	pop	{r7, pc}
    253a:	46c0      	nop			; (mov r8, r8)
    253c:	000024a5 	.word	0x000024a5

00002540 <system_interrupt_enable>:
{
    2540:	b580      	push	{r7, lr}
    2542:	b082      	sub	sp, #8
    2544:	af00      	add	r7, sp, #0
    2546:	0002      	movs	r2, r0
    2548:	1dfb      	adds	r3, r7, #7
    254a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    254c:	4b06      	ldr	r3, [pc, #24]	; (2568 <system_interrupt_enable+0x28>)
    254e:	1dfa      	adds	r2, r7, #7
    2550:	7812      	ldrb	r2, [r2, #0]
    2552:	0011      	movs	r1, r2
    2554:	221f      	movs	r2, #31
    2556:	400a      	ands	r2, r1
    2558:	2101      	movs	r1, #1
    255a:	4091      	lsls	r1, r2
    255c:	000a      	movs	r2, r1
    255e:	601a      	str	r2, [r3, #0]
}
    2560:	46c0      	nop			; (mov r8, r8)
    2562:	46bd      	mov	sp, r7
    2564:	b002      	add	sp, #8
    2566:	bd80      	pop	{r7, pc}
    2568:	e000e100 	.word	0xe000e100

0000256c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    256c:	b580      	push	{r7, lr}
    256e:	b084      	sub	sp, #16
    2570:	af00      	add	r7, sp, #0
    2572:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2574:	687b      	ldr	r3, [r7, #4]
    2576:	681b      	ldr	r3, [r3, #0]
    2578:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    257a:	68fb      	ldr	r3, [r7, #12]
    257c:	69db      	ldr	r3, [r3, #28]
    257e:	1e5a      	subs	r2, r3, #1
    2580:	4193      	sbcs	r3, r2
    2582:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    2584:	0018      	movs	r0, r3
    2586:	46bd      	mov	sp, r7
    2588:	b004      	add	sp, #16
    258a:	bd80      	pop	{r7, pc}

0000258c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    258c:	b580      	push	{r7, lr}
    258e:	b082      	sub	sp, #8
    2590:	af00      	add	r7, sp, #0
    2592:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    2594:	687b      	ldr	r3, [r7, #4]
    2596:	2201      	movs	r2, #1
    2598:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    259a:	687b      	ldr	r3, [r7, #4]
    259c:	2200      	movs	r2, #0
    259e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	2200      	movs	r2, #0
    25a4:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    25a6:	687b      	ldr	r3, [r7, #4]
    25a8:	22c0      	movs	r2, #192	; 0xc0
    25aa:	0392      	lsls	r2, r2, #14
    25ac:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    25ae:	687b      	ldr	r3, [r7, #4]
    25b0:	2200      	movs	r2, #0
    25b2:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    25b4:	687b      	ldr	r3, [r7, #4]
    25b6:	2200      	movs	r2, #0
    25b8:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    25ba:	687b      	ldr	r3, [r7, #4]
    25bc:	2201      	movs	r2, #1
    25be:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    25c0:	687b      	ldr	r3, [r7, #4]
    25c2:	2201      	movs	r2, #1
    25c4:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    25c6:	687b      	ldr	r3, [r7, #4]
    25c8:	2200      	movs	r2, #0
    25ca:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    25cc:	687b      	ldr	r3, [r7, #4]
    25ce:	2224      	movs	r2, #36	; 0x24
    25d0:	2100      	movs	r1, #0
    25d2:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    25d4:	687b      	ldr	r3, [r7, #4]
    25d6:	3318      	adds	r3, #24
    25d8:	220c      	movs	r2, #12
    25da:	2100      	movs	r1, #0
    25dc:	0018      	movs	r0, r3
    25de:	4b0a      	ldr	r3, [pc, #40]	; (2608 <spi_get_config_defaults+0x7c>)
    25e0:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    25e2:	687b      	ldr	r3, [r7, #4]
    25e4:	4a09      	ldr	r2, [pc, #36]	; (260c <spi_get_config_defaults+0x80>)
    25e6:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    25e8:	687b      	ldr	r3, [r7, #4]
    25ea:	2200      	movs	r2, #0
    25ec:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    25ee:	687b      	ldr	r3, [r7, #4]
    25f0:	2200      	movs	r2, #0
    25f2:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    25f4:	687b      	ldr	r3, [r7, #4]
    25f6:	2200      	movs	r2, #0
    25f8:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    25fa:	687b      	ldr	r3, [r7, #4]
    25fc:	2200      	movs	r2, #0
    25fe:	635a      	str	r2, [r3, #52]	; 0x34

};
    2600:	46c0      	nop			; (mov r8, r8)
    2602:	46bd      	mov	sp, r7
    2604:	b002      	add	sp, #8
    2606:	bd80      	pop	{r7, pc}
    2608:	0000bc7b 	.word	0x0000bc7b
    260c:	000186a0 	.word	0x000186a0

00002610 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    2610:	b580      	push	{r7, lr}
    2612:	b082      	sub	sp, #8
    2614:	af00      	add	r7, sp, #0
    2616:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    2618:	687b      	ldr	r3, [r7, #4]
    261a:	220a      	movs	r2, #10
    261c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    261e:	687b      	ldr	r3, [r7, #4]
    2620:	2200      	movs	r2, #0
    2622:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    2624:	687b      	ldr	r3, [r7, #4]
    2626:	2200      	movs	r2, #0
    2628:	709a      	strb	r2, [r3, #2]
}
    262a:	46c0      	nop			; (mov r8, r8)
    262c:	46bd      	mov	sp, r7
    262e:	b002      	add	sp, #8
    2630:	bd80      	pop	{r7, pc}
	...

00002634 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    2634:	b580      	push	{r7, lr}
    2636:	b084      	sub	sp, #16
    2638:	af00      	add	r7, sp, #0
    263a:	6078      	str	r0, [r7, #4]
    263c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    263e:	683b      	ldr	r3, [r7, #0]
    2640:	781a      	ldrb	r2, [r3, #0]
    2642:	687b      	ldr	r3, [r7, #4]
    2644:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    2646:	683b      	ldr	r3, [r7, #0]
    2648:	785a      	ldrb	r2, [r3, #1]
    264a:	687b      	ldr	r3, [r7, #4]
    264c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    264e:	683b      	ldr	r3, [r7, #0]
    2650:	789a      	ldrb	r2, [r3, #2]
    2652:	687b      	ldr	r3, [r7, #4]
    2654:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    2656:	230c      	movs	r3, #12
    2658:	18fb      	adds	r3, r7, r3
    265a:	0018      	movs	r0, r3
    265c:	4b0b      	ldr	r3, [pc, #44]	; (268c <spi_attach_slave+0x58>)
    265e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2660:	230c      	movs	r3, #12
    2662:	18fb      	adds	r3, r7, r3
    2664:	2201      	movs	r2, #1
    2666:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2668:	687b      	ldr	r3, [r7, #4]
    266a:	781b      	ldrb	r3, [r3, #0]
    266c:	220c      	movs	r2, #12
    266e:	18ba      	adds	r2, r7, r2
    2670:	0011      	movs	r1, r2
    2672:	0018      	movs	r0, r3
    2674:	4b06      	ldr	r3, [pc, #24]	; (2690 <spi_attach_slave+0x5c>)
    2676:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    2678:	687b      	ldr	r3, [r7, #4]
    267a:	781b      	ldrb	r3, [r3, #0]
    267c:	2101      	movs	r1, #1
    267e:	0018      	movs	r0, r3
    2680:	4b04      	ldr	r3, [pc, #16]	; (2694 <spi_attach_slave+0x60>)
    2682:	4798      	blx	r3
}
    2684:	46c0      	nop			; (mov r8, r8)
    2686:	46bd      	mov	sp, r7
    2688:	b004      	add	sp, #16
    268a:	bd80      	pop	{r7, pc}
    268c:	000024c9 	.word	0x000024c9
    2690:	00003341 	.word	0x00003341
    2694:	000024ed 	.word	0x000024ed

00002698 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    2698:	b580      	push	{r7, lr}
    269a:	b084      	sub	sp, #16
    269c:	af00      	add	r7, sp, #0
    269e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    26a0:	687b      	ldr	r3, [r7, #4]
    26a2:	681b      	ldr	r3, [r3, #0]
    26a4:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    26a6:	687b      	ldr	r3, [r7, #4]
    26a8:	681b      	ldr	r3, [r3, #0]
    26aa:	0018      	movs	r0, r3
    26ac:	4b0b      	ldr	r3, [pc, #44]	; (26dc <spi_enable+0x44>)
    26ae:	4798      	blx	r3
    26b0:	0003      	movs	r3, r0
    26b2:	0018      	movs	r0, r3
    26b4:	4b0a      	ldr	r3, [pc, #40]	; (26e0 <spi_enable+0x48>)
    26b6:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    26b8:	46c0      	nop			; (mov r8, r8)
    26ba:	687b      	ldr	r3, [r7, #4]
    26bc:	0018      	movs	r0, r3
    26be:	4b09      	ldr	r3, [pc, #36]	; (26e4 <spi_enable+0x4c>)
    26c0:	4798      	blx	r3
    26c2:	1e03      	subs	r3, r0, #0
    26c4:	d1f9      	bne.n	26ba <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    26c6:	68fb      	ldr	r3, [r7, #12]
    26c8:	681b      	ldr	r3, [r3, #0]
    26ca:	2202      	movs	r2, #2
    26cc:	431a      	orrs	r2, r3
    26ce:	68fb      	ldr	r3, [r7, #12]
    26d0:	601a      	str	r2, [r3, #0]
}
    26d2:	46c0      	nop			; (mov r8, r8)
    26d4:	46bd      	mov	sp, r7
    26d6:	b004      	add	sp, #16
    26d8:	bd80      	pop	{r7, pc}
    26da:	46c0      	nop			; (mov r8, r8)
    26dc:	00003ecd 	.word	0x00003ecd
    26e0:	00002541 	.word	0x00002541
    26e4:	0000256d 	.word	0x0000256d

000026e8 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
    26e8:	b580      	push	{r7, lr}
    26ea:	b084      	sub	sp, #16
    26ec:	af00      	add	r7, sp, #0
    26ee:	6078      	str	r0, [r7, #4]
    26f0:	000a      	movs	r2, r1
    26f2:	1cfb      	adds	r3, r7, #3
    26f4:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
    26f6:	230f      	movs	r3, #15
    26f8:	18fb      	adds	r3, r7, r3
    26fa:	2200      	movs	r2, #0
    26fc:	701a      	strb	r2, [r3, #0]
	while (size--) {
    26fe:	e038      	b.n	2772 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
    2700:	687b      	ldr	r3, [r7, #4]
    2702:	1c5a      	adds	r2, r3, #1
    2704:	607a      	str	r2, [r7, #4]
    2706:	220e      	movs	r2, #14
    2708:	18ba      	adds	r2, r7, r2
    270a:	781b      	ldrb	r3, [r3, #0]
    270c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    270e:	230d      	movs	r3, #13
    2710:	18fb      	adds	r3, r7, r3
    2712:	2200      	movs	r2, #0
    2714:	701a      	strb	r2, [r3, #0]
    2716:	e027      	b.n	2768 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
    2718:	230f      	movs	r3, #15
    271a:	18fa      	adds	r2, r7, r3
    271c:	230f      	movs	r3, #15
    271e:	18fb      	adds	r3, r7, r3
    2720:	781b      	ldrb	r3, [r3, #0]
    2722:	18db      	adds	r3, r3, r3
    2724:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
    2726:	230e      	movs	r3, #14
    2728:	18fa      	adds	r2, r7, r3
    272a:	230f      	movs	r3, #15
    272c:	18fb      	adds	r3, r7, r3
    272e:	7812      	ldrb	r2, [r2, #0]
    2730:	781b      	ldrb	r3, [r3, #0]
    2732:	4053      	eors	r3, r2
    2734:	b2db      	uxtb	r3, r3
    2736:	b25b      	sxtb	r3, r3
    2738:	2b00      	cmp	r3, #0
    273a:	da07      	bge.n	274c <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
    273c:	230f      	movs	r3, #15
    273e:	18fb      	adds	r3, r7, r3
    2740:	220f      	movs	r2, #15
    2742:	18ba      	adds	r2, r7, r2
    2744:	7812      	ldrb	r2, [r2, #0]
    2746:	2109      	movs	r1, #9
    2748:	404a      	eors	r2, r1
    274a:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
    274c:	230e      	movs	r3, #14
    274e:	18fa      	adds	r2, r7, r3
    2750:	230e      	movs	r3, #14
    2752:	18fb      	adds	r3, r7, r3
    2754:	781b      	ldrb	r3, [r3, #0]
    2756:	18db      	adds	r3, r3, r3
    2758:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    275a:	230d      	movs	r3, #13
    275c:	18fb      	adds	r3, r7, r3
    275e:	781a      	ldrb	r2, [r3, #0]
    2760:	230d      	movs	r3, #13
    2762:	18fb      	adds	r3, r7, r3
    2764:	3201      	adds	r2, #1
    2766:	701a      	strb	r2, [r3, #0]
    2768:	230d      	movs	r3, #13
    276a:	18fb      	adds	r3, r7, r3
    276c:	781b      	ldrb	r3, [r3, #0]
    276e:	2b07      	cmp	r3, #7
    2770:	d9d2      	bls.n	2718 <sd_mmc_spi_crc7+0x30>
	while (size--) {
    2772:	1cfb      	adds	r3, r7, #3
    2774:	781b      	ldrb	r3, [r3, #0]
    2776:	1cfa      	adds	r2, r7, #3
    2778:	1e59      	subs	r1, r3, #1
    277a:	7011      	strb	r1, [r2, #0]
    277c:	2b00      	cmp	r3, #0
    277e:	d1bf      	bne.n	2700 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
    2780:	230f      	movs	r3, #15
    2782:	18fb      	adds	r3, r7, r3
    2784:	781b      	ldrb	r3, [r3, #0]
    2786:	005b      	lsls	r3, r3, #1
    2788:	b25b      	sxtb	r3, r3
    278a:	2201      	movs	r2, #1
    278c:	4313      	orrs	r3, r2
    278e:	b25a      	sxtb	r2, r3
    2790:	230f      	movs	r3, #15
    2792:	18fb      	adds	r3, r7, r3
    2794:	701a      	strb	r2, [r3, #0]
	return crc;
    2796:	230f      	movs	r3, #15
    2798:	18fb      	adds	r3, r7, r3
    279a:	781b      	ldrb	r3, [r3, #0]
}
    279c:	0018      	movs	r0, r3
    279e:	46bd      	mov	sp, r7
    27a0:	b004      	add	sp, #16
    27a2:	bd80      	pop	{r7, pc}

000027a4 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
    27a4:	b590      	push	{r4, r7, lr}
    27a6:	b083      	sub	sp, #12
    27a8:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
    27aa:	1c7b      	adds	r3, r7, #1
    27ac:	22ff      	movs	r2, #255	; 0xff
    27ae:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
    27b0:	1cbb      	adds	r3, r7, #2
    27b2:	22ff      	movs	r2, #255	; 0xff
    27b4:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    27b6:	1cbb      	adds	r3, r7, #2
    27b8:	881b      	ldrh	r3, [r3, #0]
    27ba:	1c79      	adds	r1, r7, #1
    27bc:	4811      	ldr	r0, [pc, #68]	; (2804 <sd_mmc_spi_wait_busy+0x60>)
    27be:	2201      	movs	r2, #1
    27c0:	4c11      	ldr	r4, [pc, #68]	; (2808 <sd_mmc_spi_wait_busy+0x64>)
    27c2:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
    27c4:	4b11      	ldr	r3, [pc, #68]	; (280c <sd_mmc_spi_wait_busy+0x68>)
    27c6:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    27c8:	1cbb      	adds	r3, r7, #2
    27ca:	881b      	ldrh	r3, [r3, #0]
    27cc:	1c79      	adds	r1, r7, #1
    27ce:	480d      	ldr	r0, [pc, #52]	; (2804 <sd_mmc_spi_wait_busy+0x60>)
    27d0:	2201      	movs	r2, #1
    27d2:	4c0d      	ldr	r4, [pc, #52]	; (2808 <sd_mmc_spi_wait_busy+0x64>)
    27d4:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    27d6:	1cbb      	adds	r3, r7, #2
    27d8:	881b      	ldrh	r3, [r3, #0]
    27da:	1c79      	adds	r1, r7, #1
    27dc:	4809      	ldr	r0, [pc, #36]	; (2804 <sd_mmc_spi_wait_busy+0x60>)
    27de:	2201      	movs	r2, #1
    27e0:	4c09      	ldr	r4, [pc, #36]	; (2808 <sd_mmc_spi_wait_busy+0x64>)
    27e2:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
    27e4:	687b      	ldr	r3, [r7, #4]
    27e6:	1e5a      	subs	r2, r3, #1
    27e8:	607a      	str	r2, [r7, #4]
    27ea:	2b00      	cmp	r3, #0
    27ec:	d101      	bne.n	27f2 <sd_mmc_spi_wait_busy+0x4e>
			return false;
    27ee:	2300      	movs	r3, #0
    27f0:	e004      	b.n	27fc <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
    27f2:	1c7b      	adds	r3, r7, #1
    27f4:	781b      	ldrb	r3, [r3, #0]
    27f6:	2bff      	cmp	r3, #255	; 0xff
    27f8:	d1ed      	bne.n	27d6 <sd_mmc_spi_wait_busy+0x32>
	return true;
    27fa:	2301      	movs	r3, #1
}
    27fc:	0018      	movs	r0, r3
    27fe:	46bd      	mov	sp, r7
    2800:	b003      	add	sp, #12
    2802:	bd90      	pop	{r4, r7, pc}
    2804:	20000128 	.word	0x20000128
    2808:	0000484d 	.word	0x0000484d
    280c:	00030d40 	.word	0x00030d40

00002810 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
    2810:	b590      	push	{r4, r7, lr}
    2812:	b083      	sub	sp, #12
    2814:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
    2816:	1cbb      	adds	r3, r7, #2
    2818:	22ff      	movs	r2, #255	; 0xff
    281a:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
    281c:	1c7b      	adds	r3, r7, #1
    281e:	2200      	movs	r2, #0
    2820:	701a      	strb	r2, [r3, #0]
	i = 500000;
    2822:	4b18      	ldr	r3, [pc, #96]	; (2884 <sd_mmc_spi_start_read_block+0x74>)
    2824:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
    2826:	687b      	ldr	r3, [r7, #4]
    2828:	1e5a      	subs	r2, r3, #1
    282a:	607a      	str	r2, [r7, #4]
    282c:	2b00      	cmp	r3, #0
    282e:	d104      	bne.n	283a <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    2830:	4b15      	ldr	r3, [pc, #84]	; (2888 <sd_mmc_spi_start_read_block+0x78>)
    2832:	2204      	movs	r2, #4
    2834:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
    2836:	2300      	movs	r3, #0
    2838:	e020      	b.n	287c <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    283a:	1cbb      	adds	r3, r7, #2
    283c:	881b      	ldrh	r3, [r3, #0]
    283e:	1c79      	adds	r1, r7, #1
    2840:	4812      	ldr	r0, [pc, #72]	; (288c <sd_mmc_spi_start_read_block+0x7c>)
    2842:	2201      	movs	r2, #1
    2844:	4c12      	ldr	r4, [pc, #72]	; (2890 <sd_mmc_spi_start_read_block+0x80>)
    2846:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    2848:	1c7b      	adds	r3, r7, #1
    284a:	781b      	ldrb	r3, [r3, #0]
    284c:	001a      	movs	r2, r3
    284e:	23f0      	movs	r3, #240	; 0xf0
    2850:	4013      	ands	r3, r2
    2852:	d10e      	bne.n	2872 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    2854:	1c7b      	adds	r3, r7, #1
    2856:	781b      	ldrb	r3, [r3, #0]
    2858:	001a      	movs	r2, r3
    285a:	2307      	movs	r3, #7
    285c:	4013      	ands	r3, r2
    285e:	d003      	beq.n	2868 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    2860:	4b09      	ldr	r3, [pc, #36]	; (2888 <sd_mmc_spi_start_read_block+0x78>)
    2862:	2207      	movs	r2, #7
    2864:	701a      	strb	r2, [r3, #0]
    2866:	e002      	b.n	286e <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    2868:	4b07      	ldr	r3, [pc, #28]	; (2888 <sd_mmc_spi_start_read_block+0x78>)
    286a:	220b      	movs	r2, #11
    286c:	701a      	strb	r2, [r3, #0]
			}
			return false;
    286e:	2300      	movs	r3, #0
    2870:	e004      	b.n	287c <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    2872:	1c7b      	adds	r3, r7, #1
    2874:	781b      	ldrb	r3, [r3, #0]
    2876:	2bfe      	cmp	r3, #254	; 0xfe
    2878:	d1d5      	bne.n	2826 <sd_mmc_spi_start_read_block+0x16>

	return true;
    287a:	2301      	movs	r3, #1
}
    287c:	0018      	movs	r0, r3
    287e:	46bd      	mov	sp, r7
    2880:	b003      	add	sp, #12
    2882:	bd90      	pop	{r4, r7, pc}
    2884:	0007a120 	.word	0x0007a120
    2888:	2000016b 	.word	0x2000016b
    288c:	20000128 	.word	0x20000128
    2890:	0000484d 	.word	0x0000484d

00002894 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
    2894:	b590      	push	{r4, r7, lr}
    2896:	b083      	sub	sp, #12
    2898:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
    289a:	1dbb      	adds	r3, r7, #6
    289c:	22ff      	movs	r2, #255	; 0xff
    289e:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    28a0:	1dbb      	adds	r3, r7, #6
    28a2:	881b      	ldrh	r3, [r3, #0]
    28a4:	1d39      	adds	r1, r7, #4
    28a6:	4804      	ldr	r0, [pc, #16]	; (28b8 <sd_mmc_spi_stop_read_block+0x24>)
    28a8:	2202      	movs	r2, #2
    28aa:	4c04      	ldr	r4, [pc, #16]	; (28bc <sd_mmc_spi_stop_read_block+0x28>)
    28ac:	47a0      	blx	r4
			dummy);
}
    28ae:	46c0      	nop			; (mov r8, r8)
    28b0:	46bd      	mov	sp, r7
    28b2:	b003      	add	sp, #12
    28b4:	bd90      	pop	{r4, r7, pc}
    28b6:	46c0      	nop			; (mov r8, r8)
    28b8:	20000128 	.word	0x20000128
    28bc:	0000484d 	.word	0x0000484d

000028c0 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    28c0:	b580      	push	{r7, lr}
    28c2:	b082      	sub	sp, #8
    28c4:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
    28c6:	1dfb      	adds	r3, r7, #7
    28c8:	22ff      	movs	r2, #255	; 0xff
    28ca:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    28cc:	1df9      	adds	r1, r7, #7
    28ce:	4b0d      	ldr	r3, [pc, #52]	; (2904 <sd_mmc_spi_start_write_block+0x44>)
    28d0:	2201      	movs	r2, #1
    28d2:	0018      	movs	r0, r3
    28d4:	4b0c      	ldr	r3, [pc, #48]	; (2908 <sd_mmc_spi_start_write_block+0x48>)
    28d6:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    28d8:	4b0c      	ldr	r3, [pc, #48]	; (290c <sd_mmc_spi_start_write_block+0x4c>)
    28da:	881b      	ldrh	r3, [r3, #0]
    28dc:	2b01      	cmp	r3, #1
    28de:	d103      	bne.n	28e8 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
    28e0:	1dbb      	adds	r3, r7, #6
    28e2:	22fe      	movs	r2, #254	; 0xfe
    28e4:	701a      	strb	r2, [r3, #0]
    28e6:	e002      	b.n	28ee <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    28e8:	1dbb      	adds	r3, r7, #6
    28ea:	22fc      	movs	r2, #252	; 0xfc
    28ec:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    28ee:	1db9      	adds	r1, r7, #6
    28f0:	4b04      	ldr	r3, [pc, #16]	; (2904 <sd_mmc_spi_start_write_block+0x44>)
    28f2:	2201      	movs	r2, #1
    28f4:	0018      	movs	r0, r3
    28f6:	4b04      	ldr	r3, [pc, #16]	; (2908 <sd_mmc_spi_start_write_block+0x48>)
    28f8:	4798      	blx	r3
}
    28fa:	46c0      	nop			; (mov r8, r8)
    28fc:	46bd      	mov	sp, r7
    28fe:	b002      	add	sp, #8
    2900:	bd80      	pop	{r7, pc}
    2902:	46c0      	nop			; (mov r8, r8)
    2904:	20000128 	.word	0x20000128
    2908:	00004a71 	.word	0x00004a71
    290c:	20000176 	.word	0x20000176

00002910 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
    2910:	b590      	push	{r4, r7, lr}
    2912:	b083      	sub	sp, #12
    2914:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
    2916:	1dbb      	adds	r3, r7, #6
    2918:	22ff      	movs	r2, #255	; 0xff
    291a:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    291c:	1cbb      	adds	r3, r7, #2
    291e:	2201      	movs	r2, #1
    2920:	4252      	negs	r2, r2
    2922:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    2924:	1cb9      	adds	r1, r7, #2
    2926:	4b1b      	ldr	r3, [pc, #108]	; (2994 <sd_mmc_spi_stop_write_block+0x84>)
    2928:	2202      	movs	r2, #2
    292a:	0018      	movs	r0, r3
    292c:	4b1a      	ldr	r3, [pc, #104]	; (2998 <sd_mmc_spi_stop_write_block+0x88>)
    292e:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    2930:	1dbb      	adds	r3, r7, #6
    2932:	881b      	ldrh	r3, [r3, #0]
    2934:	1d79      	adds	r1, r7, #5
    2936:	4817      	ldr	r0, [pc, #92]	; (2994 <sd_mmc_spi_stop_write_block+0x84>)
    2938:	2201      	movs	r2, #1
    293a:	4c18      	ldr	r4, [pc, #96]	; (299c <sd_mmc_spi_stop_write_block+0x8c>)
    293c:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    293e:	1d7b      	adds	r3, r7, #5
    2940:	781b      	ldrb	r3, [r3, #0]
    2942:	001a      	movs	r2, r3
    2944:	2310      	movs	r3, #16
    2946:	4013      	ands	r3, r2
    2948:	d105      	bne.n	2956 <sd_mmc_spi_stop_write_block+0x46>
    294a:	1d7b      	adds	r3, r7, #5
    294c:	781b      	ldrb	r3, [r3, #0]
    294e:	001a      	movs	r2, r3
    2950:	2301      	movs	r3, #1
    2952:	4013      	ands	r3, r2
    2954:	d104      	bne.n	2960 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    2956:	4b12      	ldr	r3, [pc, #72]	; (29a0 <sd_mmc_spi_stop_write_block+0x90>)
    2958:	2201      	movs	r2, #1
    295a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
    295c:	2300      	movs	r3, #0
    295e:	e014      	b.n	298a <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    2960:	1d7b      	adds	r3, r7, #5
    2962:	781b      	ldrb	r3, [r3, #0]
    2964:	001a      	movs	r2, r3
    2966:	231e      	movs	r3, #30
    2968:	4013      	ands	r3, r2
    296a:	2b04      	cmp	r3, #4
    296c:	d00b      	beq.n	2986 <sd_mmc_spi_stop_write_block+0x76>
    296e:	2b0a      	cmp	r3, #10
    2970:	d104      	bne.n	297c <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    2972:	4b0b      	ldr	r3, [pc, #44]	; (29a0 <sd_mmc_spi_stop_write_block+0x90>)
    2974:	2208      	movs	r2, #8
    2976:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
    2978:	2300      	movs	r3, #0
    297a:	e006      	b.n	298a <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    297c:	4b08      	ldr	r3, [pc, #32]	; (29a0 <sd_mmc_spi_stop_write_block+0x90>)
    297e:	220a      	movs	r2, #10
    2980:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
    2982:	2300      	movs	r3, #0
    2984:	e001      	b.n	298a <sd_mmc_spi_stop_write_block+0x7a>
		break;
    2986:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    2988:	2301      	movs	r3, #1
}
    298a:	0018      	movs	r0, r3
    298c:	46bd      	mov	sp, r7
    298e:	b003      	add	sp, #12
    2990:	bd90      	pop	{r4, r7, pc}
    2992:	46c0      	nop			; (mov r8, r8)
    2994:	20000128 	.word	0x20000128
    2998:	00004a71 	.word	0x00004a71
    299c:	0000484d 	.word	0x0000484d
    29a0:	2000016b 	.word	0x2000016b

000029a4 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    29a4:	b590      	push	{r4, r7, lr}
    29a6:	b083      	sub	sp, #12
    29a8:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    29aa:	4b1d      	ldr	r3, [pc, #116]	; (2a20 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    29ac:	881b      	ldrh	r3, [r3, #0]
    29ae:	2b01      	cmp	r3, #1
    29b0:	d101      	bne.n	29b6 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
    29b2:	2301      	movs	r3, #1
    29b4:	e030      	b.n	2a18 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
    29b6:	4b1a      	ldr	r3, [pc, #104]	; (2a20 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    29b8:	881b      	ldrh	r3, [r3, #0]
    29ba:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    29bc:	4b19      	ldr	r3, [pc, #100]	; (2a24 <sd_mmc_spi_stop_multiwrite_block+0x80>)
    29be:	681a      	ldr	r2, [r3, #0]
    29c0:	4b19      	ldr	r3, [pc, #100]	; (2a28 <sd_mmc_spi_stop_multiwrite_block+0x84>)
    29c2:	881b      	ldrh	r3, [r3, #0]
    29c4:	0019      	movs	r1, r3
    29c6:	4b19      	ldr	r3, [pc, #100]	; (2a2c <sd_mmc_spi_stop_multiwrite_block+0x88>)
    29c8:	0010      	movs	r0, r2
    29ca:	4798      	blx	r3
    29cc:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
    29ce:	429c      	cmp	r4, r3
    29d0:	d901      	bls.n	29d6 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
    29d2:	2301      	movs	r3, #1
    29d4:	e020      	b.n	2a18 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
    29d6:	1dfb      	adds	r3, r7, #7
    29d8:	22ff      	movs	r2, #255	; 0xff
    29da:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    29dc:	1df9      	adds	r1, r7, #7
    29de:	4b14      	ldr	r3, [pc, #80]	; (2a30 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    29e0:	2201      	movs	r2, #1
    29e2:	0018      	movs	r0, r3
    29e4:	4b13      	ldr	r3, [pc, #76]	; (2a34 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    29e6:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
    29e8:	1dfb      	adds	r3, r7, #7
    29ea:	22fd      	movs	r2, #253	; 0xfd
    29ec:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    29ee:	1df9      	adds	r1, r7, #7
    29f0:	4b0f      	ldr	r3, [pc, #60]	; (2a30 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    29f2:	2201      	movs	r2, #1
    29f4:	0018      	movs	r0, r3
    29f6:	4b0f      	ldr	r3, [pc, #60]	; (2a34 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    29f8:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
    29fa:	4b0f      	ldr	r3, [pc, #60]	; (2a38 <sd_mmc_spi_stop_multiwrite_block+0x94>)
    29fc:	4798      	blx	r3
    29fe:	0003      	movs	r3, r0
    2a00:	001a      	movs	r2, r3
    2a02:	2301      	movs	r3, #1
    2a04:	4053      	eors	r3, r2
    2a06:	b2db      	uxtb	r3, r3
    2a08:	2b00      	cmp	r3, #0
    2a0a:	d004      	beq.n	2a16 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    2a0c:	4b0b      	ldr	r3, [pc, #44]	; (2a3c <sd_mmc_spi_stop_multiwrite_block+0x98>)
    2a0e:	2205      	movs	r2, #5
    2a10:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
    2a12:	2300      	movs	r3, #0
    2a14:	e000      	b.n	2a18 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
    2a16:	2301      	movs	r3, #1
}
    2a18:	0018      	movs	r0, r3
    2a1a:	46bd      	mov	sp, r7
    2a1c:	b003      	add	sp, #12
    2a1e:	bd90      	pop	{r4, r7, pc}
    2a20:	20000176 	.word	0x20000176
    2a24:	20000170 	.word	0x20000170
    2a28:	20000174 	.word	0x20000174
    2a2c:	0000b8cd 	.word	0x0000b8cd
    2a30:	20000128 	.word	0x20000128
    2a34:	00004a71 	.word	0x00004a71
    2a38:	000027a5 	.word	0x000027a5
    2a3c:	2000016b 	.word	0x2000016b

00002a40 <sd_mmc_deinit>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_deinit(void)
{
    2a40:	b580      	push	{r7, lr}
    2a42:	af00      	add	r7, sp, #0
	spi_reset(&sd_mmc_master);
    2a44:	4b03      	ldr	r3, [pc, #12]	; (2a54 <sd_mmc_deinit+0x14>)
    2a46:	0018      	movs	r0, r3
    2a48:	4b03      	ldr	r3, [pc, #12]	; (2a58 <sd_mmc_deinit+0x18>)
    2a4a:	4798      	blx	r3
}
    2a4c:	46c0      	nop			; (mov r8, r8)
    2a4e:	46bd      	mov	sp, r7
    2a50:	bd80      	pop	{r7, pc}
    2a52:	46c0      	nop			; (mov r8, r8)
    2a54:	20000128 	.word	0x20000128
    2a58:	000043a5 	.word	0x000043a5

00002a5c <sd_mmc_spi_init>:


void sd_mmc_spi_init(void)
{
    2a5c:	b580      	push	{r7, lr}
    2a5e:	b090      	sub	sp, #64	; 0x40
    2a60:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2a62:	4b1f      	ldr	r3, [pc, #124]	; (2ae0 <sd_mmc_spi_init+0x84>)
    2a64:	2200      	movs	r2, #0
    2a66:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    2a68:	233c      	movs	r3, #60	; 0x3c
    2a6a:	18fb      	adds	r3, r7, r3
    2a6c:	0018      	movs	r0, r3
    2a6e:	4b1d      	ldr	r3, [pc, #116]	; (2ae4 <sd_mmc_spi_init+0x88>)
    2a70:	4798      	blx	r3
	//pin_conf.input_pull = PORT_PIN_PULL_UP;
	//port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
    2a72:	1d3b      	adds	r3, r7, #4
    2a74:	0018      	movs	r0, r3
    2a76:	4b1c      	ldr	r3, [pc, #112]	; (2ae8 <sd_mmc_spi_init+0x8c>)
    2a78:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    2a7a:	1d3b      	adds	r3, r7, #4
    2a7c:	2280      	movs	r2, #128	; 0x80
    2a7e:	0252      	lsls	r2, r2, #9
    2a80:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    2a82:	1d3b      	adds	r3, r7, #4
    2a84:	4a19      	ldr	r2, [pc, #100]	; (2aec <sd_mmc_spi_init+0x90>)
    2a86:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    2a88:	1d3b      	adds	r3, r7, #4
    2a8a:	4a19      	ldr	r2, [pc, #100]	; (2af0 <sd_mmc_spi_init+0x94>)
    2a8c:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    2a8e:	1d3b      	adds	r3, r7, #4
    2a90:	4a18      	ldr	r2, [pc, #96]	; (2af4 <sd_mmc_spi_init+0x98>)
    2a92:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    2a94:	1d3b      	adds	r3, r7, #4
    2a96:	4a18      	ldr	r2, [pc, #96]	; (2af8 <sd_mmc_spi_init+0x9c>)
    2a98:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
    2a9a:	1d3b      	adds	r3, r7, #4
    2a9c:	2224      	movs	r2, #36	; 0x24
    2a9e:	2100      	movs	r1, #0
    2aa0:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    2aa2:	1d3b      	adds	r3, r7, #4
    2aa4:	4a15      	ldr	r2, [pc, #84]	; (2afc <sd_mmc_spi_init+0xa0>)
    2aa6:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    2aa8:	1d3a      	adds	r2, r7, #4
    2aaa:	4915      	ldr	r1, [pc, #84]	; (2b00 <sd_mmc_spi_init+0xa4>)
    2aac:	4b15      	ldr	r3, [pc, #84]	; (2b04 <sd_mmc_spi_init+0xa8>)
    2aae:	0018      	movs	r0, r3
    2ab0:	4b15      	ldr	r3, [pc, #84]	; (2b08 <sd_mmc_spi_init+0xac>)
    2ab2:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
    2ab4:	4b13      	ldr	r3, [pc, #76]	; (2b04 <sd_mmc_spi_init+0xa8>)
    2ab6:	0018      	movs	r0, r3
    2ab8:	4b14      	ldr	r3, [pc, #80]	; (2b0c <sd_mmc_spi_init+0xb0>)
    2aba:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
    2abc:	4b14      	ldr	r3, [pc, #80]	; (2b10 <sd_mmc_spi_init+0xb4>)
    2abe:	0018      	movs	r0, r3
    2ac0:	4b14      	ldr	r3, [pc, #80]	; (2b14 <sd_mmc_spi_init+0xb8>)
    2ac2:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
    2ac4:	4b14      	ldr	r3, [pc, #80]	; (2b18 <sd_mmc_spi_init+0xbc>)
    2ac6:	781a      	ldrb	r2, [r3, #0]
    2ac8:	4b11      	ldr	r3, [pc, #68]	; (2b10 <sd_mmc_spi_init+0xb4>)
    2aca:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
    2acc:	4a10      	ldr	r2, [pc, #64]	; (2b10 <sd_mmc_spi_init+0xb4>)
    2ace:	4b13      	ldr	r3, [pc, #76]	; (2b1c <sd_mmc_spi_init+0xc0>)
    2ad0:	0011      	movs	r1, r2
    2ad2:	0018      	movs	r0, r3
    2ad4:	4b12      	ldr	r3, [pc, #72]	; (2b20 <sd_mmc_spi_init+0xc4>)
    2ad6:	4798      	blx	r3
}
    2ad8:	46c0      	nop			; (mov r8, r8)
    2ada:	46bd      	mov	sp, r7
    2adc:	b010      	add	sp, #64	; 0x40
    2ade:	bd80      	pop	{r7, pc}
    2ae0:	2000016b 	.word	0x2000016b
    2ae4:	000024c9 	.word	0x000024c9
    2ae8:	0000258d 	.word	0x0000258d
    2aec:	00100002 	.word	0x00100002
    2af0:	00110002 	.word	0x00110002
    2af4:	00120002 	.word	0x00120002
    2af8:	00130002 	.word	0x00130002
    2afc:	00061a80 	.word	0x00061a80
    2b00:	42000c00 	.word	0x42000c00
    2b04:	20000128 	.word	0x20000128
    2b08:	000046bd 	.word	0x000046bd
    2b0c:	00002699 	.word	0x00002699
    2b10:	20000168 	.word	0x20000168
    2b14:	00002611 	.word	0x00002611
    2b18:	20000008 	.word	0x20000008
    2b1c:	20000164 	.word	0x20000164
    2b20:	00002635 	.word	0x00002635

00002b24 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    2b24:	b590      	push	{r4, r7, lr}
    2b26:	b083      	sub	sp, #12
    2b28:	af00      	add	r7, sp, #0
    2b2a:	0004      	movs	r4, r0
    2b2c:	6039      	str	r1, [r7, #0]
    2b2e:	0010      	movs	r0, r2
    2b30:	0019      	movs	r1, r3
    2b32:	1dfb      	adds	r3, r7, #7
    2b34:	1c22      	adds	r2, r4, #0
    2b36:	701a      	strb	r2, [r3, #0]
    2b38:	1dbb      	adds	r3, r7, #6
    2b3a:	1c02      	adds	r2, r0, #0
    2b3c:	701a      	strb	r2, [r3, #0]
    2b3e:	1d7b      	adds	r3, r7, #5
    2b40:	1c0a      	adds	r2, r1, #0
    2b42:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2b44:	4b13      	ldr	r3, [pc, #76]	; (2b94 <sd_mmc_spi_select_device+0x70>)
    2b46:	2200      	movs	r2, #0
    2b48:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
    2b4a:	683b      	ldr	r3, [r7, #0]
    2b4c:	4a12      	ldr	r2, [pc, #72]	; (2b98 <sd_mmc_spi_select_device+0x74>)
    2b4e:	4293      	cmp	r3, r2
    2b50:	d907      	bls.n	2b62 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
    2b52:	4b11      	ldr	r3, [pc, #68]	; (2b98 <sd_mmc_spi_select_device+0x74>)
    2b54:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    2b56:	e004      	b.n	2b62 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
    2b58:	683b      	ldr	r3, [r7, #0]
    2b5a:	08db      	lsrs	r3, r3, #3
    2b5c:	683a      	ldr	r2, [r7, #0]
    2b5e:	1ad3      	subs	r3, r2, r3
    2b60:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    2b62:	683a      	ldr	r2, [r7, #0]
    2b64:	4b0d      	ldr	r3, [pc, #52]	; (2b9c <sd_mmc_spi_select_device+0x78>)
    2b66:	0011      	movs	r1, r2
    2b68:	0018      	movs	r0, r3
    2b6a:	4b0d      	ldr	r3, [pc, #52]	; (2ba0 <sd_mmc_spi_select_device+0x7c>)
    2b6c:	4798      	blx	r3
    2b6e:	0003      	movs	r3, r0
    2b70:	2b17      	cmp	r3, #23
    2b72:	d0f1      	beq.n	2b58 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    2b74:	1dfb      	adds	r3, r7, #7
    2b76:	781a      	ldrb	r2, [r3, #0]
    2b78:	0013      	movs	r3, r2
    2b7a:	005b      	lsls	r3, r3, #1
    2b7c:	189b      	adds	r3, r3, r2
    2b7e:	4a09      	ldr	r2, [pc, #36]	; (2ba4 <sd_mmc_spi_select_device+0x80>)
    2b80:	1899      	adds	r1, r3, r2
    2b82:	4b06      	ldr	r3, [pc, #24]	; (2b9c <sd_mmc_spi_select_device+0x78>)
    2b84:	2201      	movs	r2, #1
    2b86:	0018      	movs	r0, r3
    2b88:	4b07      	ldr	r3, [pc, #28]	; (2ba8 <sd_mmc_spi_select_device+0x84>)
    2b8a:	4798      	blx	r3
}
    2b8c:	46c0      	nop			; (mov r8, r8)
    2b8e:	46bd      	mov	sp, r7
    2b90:	b003      	add	sp, #12
    2b92:	bd90      	pop	{r4, r7, pc}
    2b94:	2000016b 	.word	0x2000016b
    2b98:	00989680 	.word	0x00989680
    2b9c:	20000128 	.word	0x20000128
    2ba0:	000043e5 	.word	0x000043e5
    2ba4:	20000164 	.word	0x20000164
    2ba8:	00004981 	.word	0x00004981

00002bac <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    2bac:	b580      	push	{r7, lr}
    2bae:	b082      	sub	sp, #8
    2bb0:	af00      	add	r7, sp, #0
    2bb2:	0002      	movs	r2, r0
    2bb4:	1dfb      	adds	r3, r7, #7
    2bb6:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2bb8:	4b09      	ldr	r3, [pc, #36]	; (2be0 <sd_mmc_spi_deselect_device+0x34>)
    2bba:	2200      	movs	r2, #0
    2bbc:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    2bbe:	1dfb      	adds	r3, r7, #7
    2bc0:	781a      	ldrb	r2, [r3, #0]
    2bc2:	0013      	movs	r3, r2
    2bc4:	005b      	lsls	r3, r3, #1
    2bc6:	189b      	adds	r3, r3, r2
    2bc8:	4a06      	ldr	r2, [pc, #24]	; (2be4 <sd_mmc_spi_deselect_device+0x38>)
    2bca:	1899      	adds	r1, r3, r2
    2bcc:	4b06      	ldr	r3, [pc, #24]	; (2be8 <sd_mmc_spi_deselect_device+0x3c>)
    2bce:	2200      	movs	r2, #0
    2bd0:	0018      	movs	r0, r3
    2bd2:	4b06      	ldr	r3, [pc, #24]	; (2bec <sd_mmc_spi_deselect_device+0x40>)
    2bd4:	4798      	blx	r3
}
    2bd6:	46c0      	nop			; (mov r8, r8)
    2bd8:	46bd      	mov	sp, r7
    2bda:	b002      	add	sp, #8
    2bdc:	bd80      	pop	{r7, pc}
    2bde:	46c0      	nop			; (mov r8, r8)
    2be0:	2000016b 	.word	0x2000016b
    2be4:	20000164 	.word	0x20000164
    2be8:	20000128 	.word	0x20000128
    2bec:	00004981 	.word	0x00004981

00002bf0 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    2bf0:	b580      	push	{r7, lr}
    2bf2:	b082      	sub	sp, #8
    2bf4:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
    2bf6:	1dbb      	adds	r3, r7, #6
    2bf8:	22ff      	movs	r2, #255	; 0xff
    2bfa:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2bfc:	4b0c      	ldr	r3, [pc, #48]	; (2c30 <sd_mmc_spi_send_clock+0x40>)
    2bfe:	2200      	movs	r2, #0
    2c00:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
    2c02:	1dfb      	adds	r3, r7, #7
    2c04:	2200      	movs	r2, #0
    2c06:	701a      	strb	r2, [r3, #0]
    2c08:	e00a      	b.n	2c20 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    2c0a:	1db9      	adds	r1, r7, #6
    2c0c:	4b09      	ldr	r3, [pc, #36]	; (2c34 <sd_mmc_spi_send_clock+0x44>)
    2c0e:	2201      	movs	r2, #1
    2c10:	0018      	movs	r0, r3
    2c12:	4b09      	ldr	r3, [pc, #36]	; (2c38 <sd_mmc_spi_send_clock+0x48>)
    2c14:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
    2c16:	1dfb      	adds	r3, r7, #7
    2c18:	781a      	ldrb	r2, [r3, #0]
    2c1a:	1dfb      	adds	r3, r7, #7
    2c1c:	3201      	adds	r2, #1
    2c1e:	701a      	strb	r2, [r3, #0]
    2c20:	1dfb      	adds	r3, r7, #7
    2c22:	781b      	ldrb	r3, [r3, #0]
    2c24:	2b09      	cmp	r3, #9
    2c26:	d9f0      	bls.n	2c0a <sd_mmc_spi_send_clock+0x1a>
	}
}
    2c28:	46c0      	nop			; (mov r8, r8)
    2c2a:	46bd      	mov	sp, r7
    2c2c:	b002      	add	sp, #8
    2c2e:	bd80      	pop	{r7, pc}
    2c30:	2000016b 	.word	0x2000016b
    2c34:	20000128 	.word	0x20000128
    2c38:	00004a71 	.word	0x00004a71

00002c3c <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
    2c3c:	b590      	push	{r4, r7, lr}
    2c3e:	b085      	sub	sp, #20
    2c40:	af02      	add	r7, sp, #8
    2c42:	6078      	str	r0, [r7, #4]
    2c44:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    2c46:	6839      	ldr	r1, [r7, #0]
    2c48:	6878      	ldr	r0, [r7, #4]
    2c4a:	2300      	movs	r3, #0
    2c4c:	9300      	str	r3, [sp, #0]
    2c4e:	2300      	movs	r3, #0
    2c50:	2200      	movs	r2, #0
    2c52:	4c03      	ldr	r4, [pc, #12]	; (2c60 <sd_mmc_spi_send_cmd+0x24>)
    2c54:	47a0      	blx	r4
    2c56:	0003      	movs	r3, r0
}
    2c58:	0018      	movs	r0, r3
    2c5a:	46bd      	mov	sp, r7
    2c5c:	b003      	add	sp, #12
    2c5e:	bd90      	pop	{r4, r7, pc}
    2c60:	00002c65 	.word	0x00002c65

00002c64 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    2c64:	b590      	push	{r4, r7, lr}
    2c66:	b089      	sub	sp, #36	; 0x24
    2c68:	af00      	add	r7, sp, #0
    2c6a:	60f8      	str	r0, [r7, #12]
    2c6c:	60b9      	str	r1, [r7, #8]
    2c6e:	0019      	movs	r1, r3
    2c70:	1dbb      	adds	r3, r7, #6
    2c72:	801a      	strh	r2, [r3, #0]
    2c74:	1d3b      	adds	r3, r7, #4
    2c76:	1c0a      	adds	r2, r1, #0
    2c78:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
    2c7a:	231b      	movs	r3, #27
    2c7c:	18fb      	adds	r3, r7, r3
    2c7e:	22ff      	movs	r2, #255	; 0xff
    2c80:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
    2c82:	231c      	movs	r3, #28
    2c84:	18fb      	adds	r3, r7, r3
    2c86:	22ff      	movs	r2, #255	; 0xff
    2c88:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2c8a:	4b72      	ldr	r3, [pc, #456]	; (2e54 <sd_mmc_spi_adtc_start+0x1f0>)
    2c8c:	2200      	movs	r2, #0
    2c8e:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    2c90:	68fb      	ldr	r3, [r7, #12]
    2c92:	b2db      	uxtb	r3, r3
    2c94:	223f      	movs	r2, #63	; 0x3f
    2c96:	4013      	ands	r3, r2
    2c98:	b2db      	uxtb	r3, r3
    2c9a:	2240      	movs	r2, #64	; 0x40
    2c9c:	4313      	orrs	r3, r2
    2c9e:	b2da      	uxtb	r2, r3
    2ca0:	2314      	movs	r3, #20
    2ca2:	18fb      	adds	r3, r7, r3
    2ca4:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    2ca6:	68bb      	ldr	r3, [r7, #8]
    2ca8:	0e1b      	lsrs	r3, r3, #24
    2caa:	b2da      	uxtb	r2, r3
    2cac:	2314      	movs	r3, #20
    2cae:	18fb      	adds	r3, r7, r3
    2cb0:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    2cb2:	68bb      	ldr	r3, [r7, #8]
    2cb4:	0c1b      	lsrs	r3, r3, #16
    2cb6:	b2da      	uxtb	r2, r3
    2cb8:	2314      	movs	r3, #20
    2cba:	18fb      	adds	r3, r7, r3
    2cbc:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    2cbe:	68bb      	ldr	r3, [r7, #8]
    2cc0:	0a1b      	lsrs	r3, r3, #8
    2cc2:	b2da      	uxtb	r2, r3
    2cc4:	2314      	movs	r3, #20
    2cc6:	18fb      	adds	r3, r7, r3
    2cc8:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    2cca:	68bb      	ldr	r3, [r7, #8]
    2ccc:	b2da      	uxtb	r2, r3
    2cce:	2314      	movs	r3, #20
    2cd0:	18fb      	adds	r3, r7, r3
    2cd2:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    2cd4:	2314      	movs	r3, #20
    2cd6:	18fb      	adds	r3, r7, r3
    2cd8:	2105      	movs	r1, #5
    2cda:	0018      	movs	r0, r3
    2cdc:	4b5e      	ldr	r3, [pc, #376]	; (2e58 <sd_mmc_spi_adtc_start+0x1f4>)
    2cde:	4798      	blx	r3
    2ce0:	0003      	movs	r3, r0
    2ce2:	001a      	movs	r2, r3
    2ce4:	2314      	movs	r3, #20
    2ce6:	18fb      	adds	r3, r7, r3
    2ce8:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    2cea:	231b      	movs	r3, #27
    2cec:	18f9      	adds	r1, r7, r3
    2cee:	4b5b      	ldr	r3, [pc, #364]	; (2e5c <sd_mmc_spi_adtc_start+0x1f8>)
    2cf0:	2201      	movs	r2, #1
    2cf2:	0018      	movs	r0, r3
    2cf4:	4b5a      	ldr	r3, [pc, #360]	; (2e60 <sd_mmc_spi_adtc_start+0x1fc>)
    2cf6:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    2cf8:	2314      	movs	r3, #20
    2cfa:	18f9      	adds	r1, r7, r3
    2cfc:	4b57      	ldr	r3, [pc, #348]	; (2e5c <sd_mmc_spi_adtc_start+0x1f8>)
    2cfe:	2206      	movs	r2, #6
    2d00:	0018      	movs	r0, r3
    2d02:	4b57      	ldr	r3, [pc, #348]	; (2e60 <sd_mmc_spi_adtc_start+0x1fc>)
    2d04:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    2d06:	2313      	movs	r3, #19
    2d08:	18fb      	adds	r3, r7, r3
    2d0a:	22ff      	movs	r2, #255	; 0xff
    2d0c:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    2d0e:	231c      	movs	r3, #28
    2d10:	18fb      	adds	r3, r7, r3
    2d12:	881b      	ldrh	r3, [r3, #0]
    2d14:	2213      	movs	r2, #19
    2d16:	18b9      	adds	r1, r7, r2
    2d18:	4850      	ldr	r0, [pc, #320]	; (2e5c <sd_mmc_spi_adtc_start+0x1f8>)
    2d1a:	2201      	movs	r2, #1
    2d1c:	4c51      	ldr	r4, [pc, #324]	; (2e64 <sd_mmc_spi_adtc_start+0x200>)
    2d1e:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
    2d20:	231f      	movs	r3, #31
    2d22:	18fb      	adds	r3, r7, r3
    2d24:	2207      	movs	r2, #7
    2d26:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    2d28:	231c      	movs	r3, #28
    2d2a:	18fb      	adds	r3, r7, r3
    2d2c:	881b      	ldrh	r3, [r3, #0]
    2d2e:	2213      	movs	r2, #19
    2d30:	18b9      	adds	r1, r7, r2
    2d32:	484a      	ldr	r0, [pc, #296]	; (2e5c <sd_mmc_spi_adtc_start+0x1f8>)
    2d34:	2201      	movs	r2, #1
    2d36:	4c4b      	ldr	r4, [pc, #300]	; (2e64 <sd_mmc_spi_adtc_start+0x200>)
    2d38:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    2d3a:	2313      	movs	r3, #19
    2d3c:	18fb      	adds	r3, r7, r3
    2d3e:	781b      	ldrb	r3, [r3, #0]
    2d40:	b25b      	sxtb	r3, r3
    2d42:	2b00      	cmp	r3, #0
    2d44:	da10      	bge.n	2d68 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    2d46:	231f      	movs	r3, #31
    2d48:	18fb      	adds	r3, r7, r3
    2d4a:	221f      	movs	r2, #31
    2d4c:	18ba      	adds	r2, r7, r2
    2d4e:	7812      	ldrb	r2, [r2, #0]
    2d50:	3a01      	subs	r2, #1
    2d52:	701a      	strb	r2, [r3, #0]
    2d54:	231f      	movs	r3, #31
    2d56:	18fb      	adds	r3, r7, r3
    2d58:	781b      	ldrb	r3, [r3, #0]
    2d5a:	2b00      	cmp	r3, #0
    2d5c:	d1e4      	bne.n	2d28 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    2d5e:	4b3d      	ldr	r3, [pc, #244]	; (2e54 <sd_mmc_spi_adtc_start+0x1f0>)
    2d60:	2202      	movs	r2, #2
    2d62:	701a      	strb	r2, [r3, #0]
			return false;
    2d64:	2300      	movs	r3, #0
    2d66:	e070      	b.n	2e4a <sd_mmc_spi_adtc_start+0x1e6>
			break;
    2d68:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
    2d6a:	2313      	movs	r3, #19
    2d6c:	18fb      	adds	r3, r7, r3
    2d6e:	781b      	ldrb	r3, [r3, #0]
    2d70:	001a      	movs	r2, r3
    2d72:	4b3d      	ldr	r3, [pc, #244]	; (2e68 <sd_mmc_spi_adtc_start+0x204>)
    2d74:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
    2d76:	2313      	movs	r3, #19
    2d78:	18fb      	adds	r3, r7, r3
    2d7a:	781b      	ldrb	r3, [r3, #0]
    2d7c:	001a      	movs	r2, r3
    2d7e:	2308      	movs	r3, #8
    2d80:	4013      	ands	r3, r2
    2d82:	d004      	beq.n	2d8e <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    2d84:	4b33      	ldr	r3, [pc, #204]	; (2e54 <sd_mmc_spi_adtc_start+0x1f0>)
    2d86:	2206      	movs	r2, #6
    2d88:	701a      	strb	r2, [r3, #0]
		return false;
    2d8a:	2300      	movs	r3, #0
    2d8c:	e05d      	b.n	2e4a <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    2d8e:	2313      	movs	r3, #19
    2d90:	18fb      	adds	r3, r7, r3
    2d92:	781b      	ldrb	r3, [r3, #0]
    2d94:	001a      	movs	r2, r3
    2d96:	2304      	movs	r3, #4
    2d98:	4013      	ands	r3, r2
    2d9a:	d004      	beq.n	2da6 <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    2d9c:	4b2d      	ldr	r3, [pc, #180]	; (2e54 <sd_mmc_spi_adtc_start+0x1f0>)
    2d9e:	2209      	movs	r2, #9
    2da0:	701a      	strb	r2, [r3, #0]
		return false;
    2da2:	2300      	movs	r3, #0
    2da4:	e051      	b.n	2e4a <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
    2da6:	2313      	movs	r3, #19
    2da8:	18fb      	adds	r3, r7, r3
    2daa:	781b      	ldrb	r3, [r3, #0]
    2dac:	001a      	movs	r2, r3
    2dae:	2301      	movs	r3, #1
    2db0:	439a      	bics	r2, r3
    2db2:	1e13      	subs	r3, r2, #0
    2db4:	d004      	beq.n	2dc0 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    2db6:	4b27      	ldr	r3, [pc, #156]	; (2e54 <sd_mmc_spi_adtc_start+0x1f0>)
    2db8:	2201      	movs	r2, #1
    2dba:	701a      	strb	r2, [r3, #0]
		return false;
    2dbc:	2300      	movs	r3, #0
    2dbe:	e044      	b.n	2e4a <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
    2dc0:	68fa      	ldr	r2, [r7, #12]
    2dc2:	2380      	movs	r3, #128	; 0x80
    2dc4:	019b      	lsls	r3, r3, #6
    2dc6:	4013      	ands	r3, r2
    2dc8:	d00d      	beq.n	2de6 <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
    2dca:	4b28      	ldr	r3, [pc, #160]	; (2e6c <sd_mmc_spi_adtc_start+0x208>)
    2dcc:	4798      	blx	r3
    2dce:	0003      	movs	r3, r0
    2dd0:	001a      	movs	r2, r3
    2dd2:	2301      	movs	r3, #1
    2dd4:	4053      	eors	r3, r2
    2dd6:	b2db      	uxtb	r3, r3
    2dd8:	2b00      	cmp	r3, #0
    2dda:	d004      	beq.n	2de6 <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    2ddc:	4b1d      	ldr	r3, [pc, #116]	; (2e54 <sd_mmc_spi_adtc_start+0x1f0>)
    2dde:	2203      	movs	r2, #3
    2de0:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
    2de2:	2300      	movs	r3, #0
    2de4:	e031      	b.n	2e4a <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
    2de6:	68fa      	ldr	r2, [r7, #12]
    2de8:	2380      	movs	r3, #128	; 0x80
    2dea:	009b      	lsls	r3, r3, #2
    2dec:	4013      	ands	r3, r2
    2dee:	d00e      	beq.n	2e0e <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
    2df0:	4b1d      	ldr	r3, [pc, #116]	; (2e68 <sd_mmc_spi_adtc_start+0x204>)
    2df2:	2200      	movs	r2, #0
    2df4:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    2df6:	231c      	movs	r3, #28
    2df8:	18fb      	adds	r3, r7, r3
    2dfa:	881b      	ldrh	r3, [r3, #0]
    2dfc:	491a      	ldr	r1, [pc, #104]	; (2e68 <sd_mmc_spi_adtc_start+0x204>)
    2dfe:	4817      	ldr	r0, [pc, #92]	; (2e5c <sd_mmc_spi_adtc_start+0x1f8>)
    2e00:	2201      	movs	r2, #1
    2e02:	4c18      	ldr	r4, [pc, #96]	; (2e64 <sd_mmc_spi_adtc_start+0x200>)
    2e04:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
    2e06:	4b18      	ldr	r3, [pc, #96]	; (2e68 <sd_mmc_spi_adtc_start+0x204>)
    2e08:	681a      	ldr	r2, [r3, #0]
    2e0a:	4b17      	ldr	r3, [pc, #92]	; (2e68 <sd_mmc_spi_adtc_start+0x204>)
    2e0c:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
    2e0e:	68fa      	ldr	r2, [r7, #12]
    2e10:	2380      	movs	r3, #128	; 0x80
    2e12:	00db      	lsls	r3, r3, #3
    2e14:	4013      	ands	r3, r2
    2e16:	d00c      	beq.n	2e32 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    2e18:	231c      	movs	r3, #28
    2e1a:	18fb      	adds	r3, r7, r3
    2e1c:	881b      	ldrh	r3, [r3, #0]
    2e1e:	4912      	ldr	r1, [pc, #72]	; (2e68 <sd_mmc_spi_adtc_start+0x204>)
    2e20:	480e      	ldr	r0, [pc, #56]	; (2e5c <sd_mmc_spi_adtc_start+0x1f8>)
    2e22:	2204      	movs	r2, #4
    2e24:	4c0f      	ldr	r4, [pc, #60]	; (2e64 <sd_mmc_spi_adtc_start+0x200>)
    2e26:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    2e28:	4b0f      	ldr	r3, [pc, #60]	; (2e68 <sd_mmc_spi_adtc_start+0x204>)
    2e2a:	681b      	ldr	r3, [r3, #0]
    2e2c:	ba1a      	rev	r2, r3
    2e2e:	4b0e      	ldr	r3, [pc, #56]	; (2e68 <sd_mmc_spi_adtc_start+0x204>)
    2e30:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
    2e32:	4b0f      	ldr	r3, [pc, #60]	; (2e70 <sd_mmc_spi_adtc_start+0x20c>)
    2e34:	1dba      	adds	r2, r7, #6
    2e36:	8812      	ldrh	r2, [r2, #0]
    2e38:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    2e3a:	4b0e      	ldr	r3, [pc, #56]	; (2e74 <sd_mmc_spi_adtc_start+0x210>)
    2e3c:	1d3a      	adds	r2, r7, #4
    2e3e:	8812      	ldrh	r2, [r2, #0]
    2e40:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    2e42:	4b0d      	ldr	r3, [pc, #52]	; (2e78 <sd_mmc_spi_adtc_start+0x214>)
    2e44:	2200      	movs	r2, #0
    2e46:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    2e48:	2301      	movs	r3, #1
}
    2e4a:	0018      	movs	r0, r3
    2e4c:	46bd      	mov	sp, r7
    2e4e:	b009      	add	sp, #36	; 0x24
    2e50:	bd90      	pop	{r4, r7, pc}
    2e52:	46c0      	nop			; (mov r8, r8)
    2e54:	2000016b 	.word	0x2000016b
    2e58:	000026e9 	.word	0x000026e9
    2e5c:	20000128 	.word	0x20000128
    2e60:	00004a71 	.word	0x00004a71
    2e64:	0000484d 	.word	0x0000484d
    2e68:	2000016c 	.word	0x2000016c
    2e6c:	000027a5 	.word	0x000027a5
    2e70:	20000174 	.word	0x20000174
    2e74:	20000176 	.word	0x20000176
    2e78:	20000170 	.word	0x20000170

00002e7c <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
    2e7c:	b580      	push	{r7, lr}
    2e7e:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
    2e80:	4b02      	ldr	r3, [pc, #8]	; (2e8c <sd_mmc_spi_get_response+0x10>)
    2e82:	681b      	ldr	r3, [r3, #0]
}
    2e84:	0018      	movs	r0, r3
    2e86:	46bd      	mov	sp, r7
    2e88:	bd80      	pop	{r7, pc}
    2e8a:	46c0      	nop			; (mov r8, r8)
    2e8c:	2000016c 	.word	0x2000016c

00002e90 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    2e90:	b590      	push	{r4, r7, lr}
    2e92:	b085      	sub	sp, #20
    2e94:	af00      	add	r7, sp, #0
    2e96:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
    2e98:	230e      	movs	r3, #14
    2e9a:	18fb      	adds	r3, r7, r3
    2e9c:	22ff      	movs	r2, #255	; 0xff
    2e9e:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2ea0:	4b1c      	ldr	r3, [pc, #112]	; (2f14 <sd_mmc_spi_read_word+0x84>)
    2ea2:	2200      	movs	r2, #0
    2ea4:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    2ea6:	4b1c      	ldr	r3, [pc, #112]	; (2f18 <sd_mmc_spi_read_word+0x88>)
    2ea8:	681a      	ldr	r2, [r3, #0]
    2eaa:	4b1c      	ldr	r3, [pc, #112]	; (2f1c <sd_mmc_spi_read_word+0x8c>)
    2eac:	881b      	ldrh	r3, [r3, #0]
    2eae:	0019      	movs	r1, r3
    2eb0:	4b1b      	ldr	r3, [pc, #108]	; (2f20 <sd_mmc_spi_read_word+0x90>)
    2eb2:	0010      	movs	r0, r2
    2eb4:	4798      	blx	r3
    2eb6:	1e0b      	subs	r3, r1, #0
    2eb8:	d10a      	bne.n	2ed0 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    2eba:	4b1a      	ldr	r3, [pc, #104]	; (2f24 <sd_mmc_spi_read_word+0x94>)
    2ebc:	4798      	blx	r3
    2ebe:	0003      	movs	r3, r0
    2ec0:	001a      	movs	r2, r3
    2ec2:	2301      	movs	r3, #1
    2ec4:	4053      	eors	r3, r2
    2ec6:	b2db      	uxtb	r3, r3
    2ec8:	2b00      	cmp	r3, #0
    2eca:	d001      	beq.n	2ed0 <sd_mmc_spi_read_word+0x40>
			return false;
    2ecc:	2300      	movs	r3, #0
    2ece:	e01d      	b.n	2f0c <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    2ed0:	230e      	movs	r3, #14
    2ed2:	18fb      	adds	r3, r7, r3
    2ed4:	881b      	ldrh	r3, [r3, #0]
    2ed6:	1d39      	adds	r1, r7, #4
    2ed8:	4813      	ldr	r0, [pc, #76]	; (2f28 <sd_mmc_spi_read_word+0x98>)
    2eda:	2204      	movs	r2, #4
    2edc:	4c13      	ldr	r4, [pc, #76]	; (2f2c <sd_mmc_spi_read_word+0x9c>)
    2ede:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
    2ee0:	687b      	ldr	r3, [r7, #4]
    2ee2:	687a      	ldr	r2, [r7, #4]
    2ee4:	6812      	ldr	r2, [r2, #0]
    2ee6:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
    2ee8:	4b0b      	ldr	r3, [pc, #44]	; (2f18 <sd_mmc_spi_read_word+0x88>)
    2eea:	681b      	ldr	r3, [r3, #0]
    2eec:	1d1a      	adds	r2, r3, #4
    2eee:	4b0a      	ldr	r3, [pc, #40]	; (2f18 <sd_mmc_spi_read_word+0x88>)
    2ef0:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    2ef2:	4b09      	ldr	r3, [pc, #36]	; (2f18 <sd_mmc_spi_read_word+0x88>)
    2ef4:	681a      	ldr	r2, [r3, #0]
    2ef6:	4b09      	ldr	r3, [pc, #36]	; (2f1c <sd_mmc_spi_read_word+0x8c>)
    2ef8:	881b      	ldrh	r3, [r3, #0]
    2efa:	0019      	movs	r1, r3
    2efc:	4b08      	ldr	r3, [pc, #32]	; (2f20 <sd_mmc_spi_read_word+0x90>)
    2efe:	0010      	movs	r0, r2
    2f00:	4798      	blx	r3
    2f02:	1e0b      	subs	r3, r1, #0
    2f04:	d101      	bne.n	2f0a <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
    2f06:	4b0a      	ldr	r3, [pc, #40]	; (2f30 <sd_mmc_spi_read_word+0xa0>)
    2f08:	4798      	blx	r3
	}
	return true;
    2f0a:	2301      	movs	r3, #1
}
    2f0c:	0018      	movs	r0, r3
    2f0e:	46bd      	mov	sp, r7
    2f10:	b005      	add	sp, #20
    2f12:	bd90      	pop	{r4, r7, pc}
    2f14:	2000016b 	.word	0x2000016b
    2f18:	20000170 	.word	0x20000170
    2f1c:	20000174 	.word	0x20000174
    2f20:	0000b9d9 	.word	0x0000b9d9
    2f24:	00002811 	.word	0x00002811
    2f28:	20000128 	.word	0x20000128
    2f2c:	0000484d 	.word	0x0000484d
    2f30:	00002895 	.word	0x00002895

00002f34 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    2f34:	b590      	push	{r4, r7, lr}
    2f36:	b085      	sub	sp, #20
    2f38:	af00      	add	r7, sp, #0
    2f3a:	6078      	str	r0, [r7, #4]
    2f3c:	000a      	movs	r2, r1
    2f3e:	1cbb      	adds	r3, r7, #2
    2f40:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
    2f42:	230a      	movs	r3, #10
    2f44:	18fb      	adds	r3, r7, r3
    2f46:	22ff      	movs	r2, #255	; 0xff
    2f48:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2f4a:	4b1c      	ldr	r3, [pc, #112]	; (2fbc <sd_mmc_spi_start_read_blocks+0x88>)
    2f4c:	2200      	movs	r2, #0
    2f4e:	701a      	strb	r2, [r3, #0]
	pos = 0;
    2f50:	2300      	movs	r3, #0
    2f52:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    2f54:	e025      	b.n	2fa2 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    2f56:	4b1a      	ldr	r3, [pc, #104]	; (2fc0 <sd_mmc_spi_start_read_blocks+0x8c>)
    2f58:	4798      	blx	r3
    2f5a:	0003      	movs	r3, r0
    2f5c:	001a      	movs	r2, r3
    2f5e:	2301      	movs	r3, #1
    2f60:	4053      	eors	r3, r2
    2f62:	b2db      	uxtb	r3, r3
    2f64:	2b00      	cmp	r3, #0
    2f66:	d001      	beq.n	2f6c <sd_mmc_spi_start_read_blocks+0x38>
			return false;
    2f68:	2300      	movs	r3, #0
    2f6a:	e022      	b.n	2fb2 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    2f6c:	687a      	ldr	r2, [r7, #4]
    2f6e:	68fb      	ldr	r3, [r7, #12]
    2f70:	18d1      	adds	r1, r2, r3
    2f72:	4b14      	ldr	r3, [pc, #80]	; (2fc4 <sd_mmc_spi_start_read_blocks+0x90>)
    2f74:	881a      	ldrh	r2, [r3, #0]
    2f76:	230a      	movs	r3, #10
    2f78:	18fb      	adds	r3, r7, r3
    2f7a:	881b      	ldrh	r3, [r3, #0]
    2f7c:	4812      	ldr	r0, [pc, #72]	; (2fc8 <sd_mmc_spi_start_read_blocks+0x94>)
    2f7e:	4c13      	ldr	r4, [pc, #76]	; (2fcc <sd_mmc_spi_start_read_blocks+0x98>)
    2f80:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    2f82:	4b10      	ldr	r3, [pc, #64]	; (2fc4 <sd_mmc_spi_start_read_blocks+0x90>)
    2f84:	881b      	ldrh	r3, [r3, #0]
    2f86:	001a      	movs	r2, r3
    2f88:	68fb      	ldr	r3, [r7, #12]
    2f8a:	189b      	adds	r3, r3, r2
    2f8c:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    2f8e:	4b0d      	ldr	r3, [pc, #52]	; (2fc4 <sd_mmc_spi_start_read_blocks+0x90>)
    2f90:	881b      	ldrh	r3, [r3, #0]
    2f92:	001a      	movs	r2, r3
    2f94:	4b0e      	ldr	r3, [pc, #56]	; (2fd0 <sd_mmc_spi_start_read_blocks+0x9c>)
    2f96:	681b      	ldr	r3, [r3, #0]
    2f98:	18d2      	adds	r2, r2, r3
    2f9a:	4b0d      	ldr	r3, [pc, #52]	; (2fd0 <sd_mmc_spi_start_read_blocks+0x9c>)
    2f9c:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
    2f9e:	4b0d      	ldr	r3, [pc, #52]	; (2fd4 <sd_mmc_spi_start_read_blocks+0xa0>)
    2fa0:	4798      	blx	r3
	while (nb_block--) {
    2fa2:	1cbb      	adds	r3, r7, #2
    2fa4:	881b      	ldrh	r3, [r3, #0]
    2fa6:	1cba      	adds	r2, r7, #2
    2fa8:	1e59      	subs	r1, r3, #1
    2faa:	8011      	strh	r1, [r2, #0]
    2fac:	2b00      	cmp	r3, #0
    2fae:	d1d2      	bne.n	2f56 <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
    2fb0:	2301      	movs	r3, #1
}
    2fb2:	0018      	movs	r0, r3
    2fb4:	46bd      	mov	sp, r7
    2fb6:	b005      	add	sp, #20
    2fb8:	bd90      	pop	{r4, r7, pc}
    2fba:	46c0      	nop			; (mov r8, r8)
    2fbc:	2000016b 	.word	0x2000016b
    2fc0:	00002811 	.word	0x00002811
    2fc4:	20000174 	.word	0x20000174
    2fc8:	20000128 	.word	0x20000128
    2fcc:	0000484d 	.word	0x0000484d
    2fd0:	20000170 	.word	0x20000170
    2fd4:	00002895 	.word	0x00002895

00002fd8 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
    2fd8:	b580      	push	{r7, lr}
    2fda:	af00      	add	r7, sp, #0
	return true;
    2fdc:	2301      	movs	r3, #1
}
    2fde:	0018      	movs	r0, r3
    2fe0:	46bd      	mov	sp, r7
    2fe2:	bd80      	pop	{r7, pc}

00002fe4 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    2fe4:	b580      	push	{r7, lr}
    2fe6:	b084      	sub	sp, #16
    2fe8:	af00      	add	r7, sp, #0
    2fea:	6078      	str	r0, [r7, #4]
    2fec:	000a      	movs	r2, r1
    2fee:	1cbb      	adds	r3, r7, #2
    2ff0:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2ff2:	4b24      	ldr	r3, [pc, #144]	; (3084 <sd_mmc_spi_start_write_blocks+0xa0>)
    2ff4:	2200      	movs	r2, #0
    2ff6:	701a      	strb	r2, [r3, #0]
	pos = 0;
    2ff8:	2300      	movs	r3, #0
    2ffa:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    2ffc:	e035      	b.n	306a <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    2ffe:	4b22      	ldr	r3, [pc, #136]	; (3088 <sd_mmc_spi_start_write_blocks+0xa4>)
    3000:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    3002:	687a      	ldr	r2, [r7, #4]
    3004:	68fb      	ldr	r3, [r7, #12]
    3006:	18d1      	adds	r1, r2, r3
    3008:	4b20      	ldr	r3, [pc, #128]	; (308c <sd_mmc_spi_start_write_blocks+0xa8>)
    300a:	881a      	ldrh	r2, [r3, #0]
    300c:	4b20      	ldr	r3, [pc, #128]	; (3090 <sd_mmc_spi_start_write_blocks+0xac>)
    300e:	0018      	movs	r0, r3
    3010:	4b20      	ldr	r3, [pc, #128]	; (3094 <sd_mmc_spi_start_write_blocks+0xb0>)
    3012:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    3014:	4b1d      	ldr	r3, [pc, #116]	; (308c <sd_mmc_spi_start_write_blocks+0xa8>)
    3016:	881b      	ldrh	r3, [r3, #0]
    3018:	001a      	movs	r2, r3
    301a:	68fb      	ldr	r3, [r7, #12]
    301c:	189b      	adds	r3, r3, r2
    301e:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    3020:	4b1a      	ldr	r3, [pc, #104]	; (308c <sd_mmc_spi_start_write_blocks+0xa8>)
    3022:	881b      	ldrh	r3, [r3, #0]
    3024:	001a      	movs	r2, r3
    3026:	4b1c      	ldr	r3, [pc, #112]	; (3098 <sd_mmc_spi_start_write_blocks+0xb4>)
    3028:	681b      	ldr	r3, [r3, #0]
    302a:	18d2      	adds	r2, r2, r3
    302c:	4b1a      	ldr	r3, [pc, #104]	; (3098 <sd_mmc_spi_start_write_blocks+0xb4>)
    302e:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    3030:	4b1a      	ldr	r3, [pc, #104]	; (309c <sd_mmc_spi_start_write_blocks+0xb8>)
    3032:	4798      	blx	r3
    3034:	0003      	movs	r3, r0
    3036:	001a      	movs	r2, r3
    3038:	2301      	movs	r3, #1
    303a:	4053      	eors	r3, r2
    303c:	b2db      	uxtb	r3, r3
    303e:	2b00      	cmp	r3, #0
    3040:	d001      	beq.n	3046 <sd_mmc_spi_start_write_blocks+0x62>
			return false;
    3042:	2300      	movs	r3, #0
    3044:	e019      	b.n	307a <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    3046:	1cbb      	adds	r3, r7, #2
    3048:	881b      	ldrh	r3, [r3, #0]
    304a:	2b00      	cmp	r3, #0
    304c:	d00d      	beq.n	306a <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    304e:	4b14      	ldr	r3, [pc, #80]	; (30a0 <sd_mmc_spi_start_write_blocks+0xbc>)
    3050:	4798      	blx	r3
    3052:	0003      	movs	r3, r0
    3054:	001a      	movs	r2, r3
    3056:	2301      	movs	r3, #1
    3058:	4053      	eors	r3, r2
    305a:	b2db      	uxtb	r3, r3
    305c:	2b00      	cmp	r3, #0
    305e:	d004      	beq.n	306a <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    3060:	4b08      	ldr	r3, [pc, #32]	; (3084 <sd_mmc_spi_start_write_blocks+0xa0>)
    3062:	2205      	movs	r2, #5
    3064:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    3066:	2300      	movs	r3, #0
    3068:	e007      	b.n	307a <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
    306a:	1cbb      	adds	r3, r7, #2
    306c:	881b      	ldrh	r3, [r3, #0]
    306e:	1cba      	adds	r2, r7, #2
    3070:	1e59      	subs	r1, r3, #1
    3072:	8011      	strh	r1, [r2, #0]
    3074:	2b00      	cmp	r3, #0
    3076:	d1c2      	bne.n	2ffe <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
    3078:	2301      	movs	r3, #1
}
    307a:	0018      	movs	r0, r3
    307c:	46bd      	mov	sp, r7
    307e:	b004      	add	sp, #16
    3080:	bd80      	pop	{r7, pc}
    3082:	46c0      	nop			; (mov r8, r8)
    3084:	2000016b 	.word	0x2000016b
    3088:	000028c1 	.word	0x000028c1
    308c:	20000174 	.word	0x20000174
    3090:	20000128 	.word	0x20000128
    3094:	00004a71 	.word	0x00004a71
    3098:	20000170 	.word	0x20000170
    309c:	00002911 	.word	0x00002911
    30a0:	000027a5 	.word	0x000027a5

000030a4 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    30a4:	b580      	push	{r7, lr}
    30a6:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    30a8:	4b09      	ldr	r3, [pc, #36]	; (30d0 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
    30aa:	4798      	blx	r3
    30ac:	0003      	movs	r3, r0
    30ae:	001a      	movs	r2, r3
    30b0:	2301      	movs	r3, #1
    30b2:	4053      	eors	r3, r2
    30b4:	b2db      	uxtb	r3, r3
    30b6:	2b00      	cmp	r3, #0
    30b8:	d004      	beq.n	30c4 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    30ba:	4b06      	ldr	r3, [pc, #24]	; (30d4 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
    30bc:	2205      	movs	r2, #5
    30be:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
    30c0:	2300      	movs	r3, #0
    30c2:	e002      	b.n	30ca <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
    30c4:	4b04      	ldr	r3, [pc, #16]	; (30d8 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
    30c6:	4798      	blx	r3
    30c8:	0003      	movs	r3, r0
}
    30ca:	0018      	movs	r0, r3
    30cc:	46bd      	mov	sp, r7
    30ce:	bd80      	pop	{r7, pc}
    30d0:	000027a5 	.word	0x000027a5
    30d4:	2000016b 	.word	0x2000016b
    30d8:	000029a5 	.word	0x000029a5

000030dc <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    30dc:	b580      	push	{r7, lr}
    30de:	b084      	sub	sp, #16
    30e0:	af00      	add	r7, sp, #0
    30e2:	0002      	movs	r2, r0
    30e4:	1dfb      	adds	r3, r7, #7
    30e6:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    30e8:	1dfb      	adds	r3, r7, #7
    30ea:	781b      	ldrb	r3, [r3, #0]
    30ec:	2b00      	cmp	r3, #0
    30ee:	d108      	bne.n	3102 <mem_test_unit_ready+0x26>
    30f0:	1dfb      	adds	r3, r7, #7
    30f2:	781a      	ldrb	r2, [r3, #0]
    30f4:	4b08      	ldr	r3, [pc, #32]	; (3118 <mem_test_unit_ready+0x3c>)
    30f6:	0152      	lsls	r2, r2, #5
    30f8:	58d3      	ldr	r3, [r2, r3]
    30fa:	4798      	blx	r3
    30fc:	0003      	movs	r3, r0
    30fe:	001a      	movs	r2, r3
    3100:	e000      	b.n	3104 <mem_test_unit_ready+0x28>
    3102:	2201      	movs	r2, #1
  status =
    3104:	230f      	movs	r3, #15
    3106:	18fb      	adds	r3, r7, r3
    3108:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    310a:	230f      	movs	r3, #15
    310c:	18fb      	adds	r3, r7, r3
    310e:	781b      	ldrb	r3, [r3, #0]
}
    3110:	0018      	movs	r0, r3
    3112:	46bd      	mov	sp, r7
    3114:	b004      	add	sp, #16
    3116:	bd80      	pop	{r7, pc}
    3118:	0000cce8 	.word	0x0000cce8

0000311c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    311c:	b580      	push	{r7, lr}
    311e:	b084      	sub	sp, #16
    3120:	af00      	add	r7, sp, #0
    3122:	0002      	movs	r2, r0
    3124:	6039      	str	r1, [r7, #0]
    3126:	1dfb      	adds	r3, r7, #7
    3128:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    312a:	1dfb      	adds	r3, r7, #7
    312c:	781b      	ldrb	r3, [r3, #0]
    312e:	2b00      	cmp	r3, #0
    3130:	d10c      	bne.n	314c <mem_read_capacity+0x30>
    3132:	1dfb      	adds	r3, r7, #7
    3134:	781b      	ldrb	r3, [r3, #0]
    3136:	4a0b      	ldr	r2, [pc, #44]	; (3164 <mem_read_capacity+0x48>)
    3138:	015b      	lsls	r3, r3, #5
    313a:	18d3      	adds	r3, r2, r3
    313c:	3304      	adds	r3, #4
    313e:	681b      	ldr	r3, [r3, #0]
    3140:	683a      	ldr	r2, [r7, #0]
    3142:	0010      	movs	r0, r2
    3144:	4798      	blx	r3
    3146:	0003      	movs	r3, r0
    3148:	001a      	movs	r2, r3
    314a:	e000      	b.n	314e <mem_read_capacity+0x32>
    314c:	2201      	movs	r2, #1
  status =
    314e:	230f      	movs	r3, #15
    3150:	18fb      	adds	r3, r7, r3
    3152:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    3154:	230f      	movs	r3, #15
    3156:	18fb      	adds	r3, r7, r3
    3158:	781b      	ldrb	r3, [r3, #0]
}
    315a:	0018      	movs	r0, r3
    315c:	46bd      	mov	sp, r7
    315e:	b004      	add	sp, #16
    3160:	bd80      	pop	{r7, pc}
    3162:	46c0      	nop			; (mov r8, r8)
    3164:	0000cce8 	.word	0x0000cce8

00003168 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
    3168:	b580      	push	{r7, lr}
    316a:	b084      	sub	sp, #16
    316c:	af00      	add	r7, sp, #0
    316e:	0002      	movs	r2, r0
    3170:	1dfb      	adds	r3, r7, #7
    3172:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    3174:	1dfb      	adds	r3, r7, #7
    3176:	781b      	ldrb	r3, [r3, #0]
    3178:	425a      	negs	r2, r3
    317a:	4153      	adcs	r3, r2
    317c:	b2da      	uxtb	r2, r3
  sector_size =
    317e:	230f      	movs	r3, #15
    3180:	18fb      	adds	r3, r7, r3
    3182:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
    3184:	230f      	movs	r3, #15
    3186:	18fb      	adds	r3, r7, r3
    3188:	781b      	ldrb	r3, [r3, #0]
}
    318a:	0018      	movs	r0, r3
    318c:	46bd      	mov	sp, r7
    318e:	b004      	add	sp, #16
    3190:	bd80      	pop	{r7, pc}
	...

00003194 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    3194:	b580      	push	{r7, lr}
    3196:	b084      	sub	sp, #16
    3198:	af00      	add	r7, sp, #0
    319a:	0002      	movs	r2, r0
    319c:	1dfb      	adds	r3, r7, #7
    319e:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    31a0:	1dfb      	adds	r3, r7, #7
    31a2:	781b      	ldrb	r3, [r3, #0]
    31a4:	2b00      	cmp	r3, #0
    31a6:	d109      	bne.n	31bc <mem_wr_protect+0x28>
    31a8:	1dfb      	adds	r3, r7, #7
    31aa:	781b      	ldrb	r3, [r3, #0]
    31ac:	4a0a      	ldr	r2, [pc, #40]	; (31d8 <mem_wr_protect+0x44>)
    31ae:	015b      	lsls	r3, r3, #5
    31b0:	18d3      	adds	r3, r2, r3
    31b2:	330c      	adds	r3, #12
    31b4:	681b      	ldr	r3, [r3, #0]
    31b6:	4798      	blx	r3
    31b8:	1e03      	subs	r3, r0, #0
    31ba:	d001      	beq.n	31c0 <mem_wr_protect+0x2c>
    31bc:	2201      	movs	r2, #1
    31be:	e000      	b.n	31c2 <mem_wr_protect+0x2e>
    31c0:	2200      	movs	r2, #0
  wr_protect =
    31c2:	230f      	movs	r3, #15
    31c4:	18fb      	adds	r3, r7, r3
    31c6:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
    31c8:	230f      	movs	r3, #15
    31ca:	18fb      	adds	r3, r7, r3
    31cc:	781b      	ldrb	r3, [r3, #0]
}
    31ce:	0018      	movs	r0, r3
    31d0:	46bd      	mov	sp, r7
    31d2:	b004      	add	sp, #16
    31d4:	bd80      	pop	{r7, pc}
    31d6:	46c0      	nop			; (mov r8, r8)
    31d8:	0000cce8 	.word	0x0000cce8

000031dc <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    31dc:	b580      	push	{r7, lr}
    31de:	b086      	sub	sp, #24
    31e0:	af00      	add	r7, sp, #0
    31e2:	60b9      	str	r1, [r7, #8]
    31e4:	607a      	str	r2, [r7, #4]
    31e6:	230f      	movs	r3, #15
    31e8:	18fb      	adds	r3, r7, r3
    31ea:	1c02      	adds	r2, r0, #0
    31ec:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    31ee:	230f      	movs	r3, #15
    31f0:	18fb      	adds	r3, r7, r3
    31f2:	781b      	ldrb	r3, [r3, #0]
    31f4:	2b00      	cmp	r3, #0
    31f6:	d10e      	bne.n	3216 <memory_2_ram+0x3a>
    31f8:	230f      	movs	r3, #15
    31fa:	18fb      	adds	r3, r7, r3
    31fc:	781b      	ldrb	r3, [r3, #0]
    31fe:	4a0b      	ldr	r2, [pc, #44]	; (322c <memory_2_ram+0x50>)
    3200:	015b      	lsls	r3, r3, #5
    3202:	18d3      	adds	r3, r2, r3
    3204:	3314      	adds	r3, #20
    3206:	681b      	ldr	r3, [r3, #0]
    3208:	6879      	ldr	r1, [r7, #4]
    320a:	68ba      	ldr	r2, [r7, #8]
    320c:	0010      	movs	r0, r2
    320e:	4798      	blx	r3
    3210:	0003      	movs	r3, r0
    3212:	001a      	movs	r2, r3
    3214:	e000      	b.n	3218 <memory_2_ram+0x3c>
    3216:	2201      	movs	r2, #1
  status =
    3218:	2317      	movs	r3, #23
    321a:	18fb      	adds	r3, r7, r3
    321c:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
    321e:	2317      	movs	r3, #23
    3220:	18fb      	adds	r3, r7, r3
    3222:	781b      	ldrb	r3, [r3, #0]
}
    3224:	0018      	movs	r0, r3
    3226:	46bd      	mov	sp, r7
    3228:	b006      	add	sp, #24
    322a:	bd80      	pop	{r7, pc}
    322c:	0000cce8 	.word	0x0000cce8

00003230 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    3230:	b580      	push	{r7, lr}
    3232:	b086      	sub	sp, #24
    3234:	af00      	add	r7, sp, #0
    3236:	60b9      	str	r1, [r7, #8]
    3238:	607a      	str	r2, [r7, #4]
    323a:	230f      	movs	r3, #15
    323c:	18fb      	adds	r3, r7, r3
    323e:	1c02      	adds	r2, r0, #0
    3240:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    3242:	230f      	movs	r3, #15
    3244:	18fb      	adds	r3, r7, r3
    3246:	781b      	ldrb	r3, [r3, #0]
    3248:	2b00      	cmp	r3, #0
    324a:	d10e      	bne.n	326a <ram_2_memory+0x3a>
    324c:	230f      	movs	r3, #15
    324e:	18fb      	adds	r3, r7, r3
    3250:	781b      	ldrb	r3, [r3, #0]
    3252:	4a0b      	ldr	r2, [pc, #44]	; (3280 <ram_2_memory+0x50>)
    3254:	015b      	lsls	r3, r3, #5
    3256:	18d3      	adds	r3, r2, r3
    3258:	3318      	adds	r3, #24
    325a:	681b      	ldr	r3, [r3, #0]
    325c:	6879      	ldr	r1, [r7, #4]
    325e:	68ba      	ldr	r2, [r7, #8]
    3260:	0010      	movs	r0, r2
    3262:	4798      	blx	r3
    3264:	0003      	movs	r3, r0
    3266:	001a      	movs	r2, r3
    3268:	e000      	b.n	326c <ram_2_memory+0x3c>
    326a:	2201      	movs	r2, #1
  status =
    326c:	2317      	movs	r3, #23
    326e:	18fb      	adds	r3, r7, r3
    3270:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
    3272:	2317      	movs	r3, #23
    3274:	18fb      	adds	r3, r7, r3
    3276:	781b      	ldrb	r3, [r3, #0]
}
    3278:	0018      	movs	r0, r3
    327a:	46bd      	mov	sp, r7
    327c:	b006      	add	sp, #24
    327e:	bd80      	pop	{r7, pc}
    3280:	0000cce8 	.word	0x0000cce8

00003284 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    3284:	b580      	push	{r7, lr}
    3286:	b082      	sub	sp, #8
    3288:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    328a:	4b10      	ldr	r3, [pc, #64]	; (32cc <cpu_irq_enter_critical+0x48>)
    328c:	681b      	ldr	r3, [r3, #0]
    328e:	2b00      	cmp	r3, #0
    3290:	d112      	bne.n	32b8 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3292:	f3ef 8310 	mrs	r3, PRIMASK
    3296:	607b      	str	r3, [r7, #4]
  return(result);
    3298:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    329a:	2b00      	cmp	r3, #0
    329c:	d109      	bne.n	32b2 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    329e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    32a0:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    32a4:	4b0a      	ldr	r3, [pc, #40]	; (32d0 <cpu_irq_enter_critical+0x4c>)
    32a6:	2200      	movs	r2, #0
    32a8:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    32aa:	4b0a      	ldr	r3, [pc, #40]	; (32d4 <cpu_irq_enter_critical+0x50>)
    32ac:	2201      	movs	r2, #1
    32ae:	701a      	strb	r2, [r3, #0]
    32b0:	e002      	b.n	32b8 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    32b2:	4b08      	ldr	r3, [pc, #32]	; (32d4 <cpu_irq_enter_critical+0x50>)
    32b4:	2200      	movs	r2, #0
    32b6:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    32b8:	4b04      	ldr	r3, [pc, #16]	; (32cc <cpu_irq_enter_critical+0x48>)
    32ba:	681b      	ldr	r3, [r3, #0]
    32bc:	1c5a      	adds	r2, r3, #1
    32be:	4b03      	ldr	r3, [pc, #12]	; (32cc <cpu_irq_enter_critical+0x48>)
    32c0:	601a      	str	r2, [r3, #0]
}
    32c2:	46c0      	nop			; (mov r8, r8)
    32c4:	46bd      	mov	sp, r7
    32c6:	b002      	add	sp, #8
    32c8:	bd80      	pop	{r7, pc}
    32ca:	46c0      	nop			; (mov r8, r8)
    32cc:	20000178 	.word	0x20000178
    32d0:	20000009 	.word	0x20000009
    32d4:	2000017c 	.word	0x2000017c

000032d8 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    32d8:	b580      	push	{r7, lr}
    32da:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    32dc:	4b0b      	ldr	r3, [pc, #44]	; (330c <cpu_irq_leave_critical+0x34>)
    32de:	681b      	ldr	r3, [r3, #0]
    32e0:	1e5a      	subs	r2, r3, #1
    32e2:	4b0a      	ldr	r3, [pc, #40]	; (330c <cpu_irq_leave_critical+0x34>)
    32e4:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    32e6:	4b09      	ldr	r3, [pc, #36]	; (330c <cpu_irq_leave_critical+0x34>)
    32e8:	681b      	ldr	r3, [r3, #0]
    32ea:	2b00      	cmp	r3, #0
    32ec:	d10a      	bne.n	3304 <cpu_irq_leave_critical+0x2c>
    32ee:	4b08      	ldr	r3, [pc, #32]	; (3310 <cpu_irq_leave_critical+0x38>)
    32f0:	781b      	ldrb	r3, [r3, #0]
    32f2:	b2db      	uxtb	r3, r3
    32f4:	2b00      	cmp	r3, #0
    32f6:	d005      	beq.n	3304 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    32f8:	4b06      	ldr	r3, [pc, #24]	; (3314 <cpu_irq_leave_critical+0x3c>)
    32fa:	2201      	movs	r2, #1
    32fc:	701a      	strb	r2, [r3, #0]
    32fe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3302:	b662      	cpsie	i
	}
}
    3304:	46c0      	nop			; (mov r8, r8)
    3306:	46bd      	mov	sp, r7
    3308:	bd80      	pop	{r7, pc}
    330a:	46c0      	nop			; (mov r8, r8)
    330c:	20000178 	.word	0x20000178
    3310:	2000017c 	.word	0x2000017c
    3314:	20000009 	.word	0x20000009

00003318 <system_pinmux_get_config_defaults>:
{
    3318:	b580      	push	{r7, lr}
    331a:	b082      	sub	sp, #8
    331c:	af00      	add	r7, sp, #0
    331e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3320:	687b      	ldr	r3, [r7, #4]
    3322:	2280      	movs	r2, #128	; 0x80
    3324:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3326:	687b      	ldr	r3, [r7, #4]
    3328:	2200      	movs	r2, #0
    332a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    332c:	687b      	ldr	r3, [r7, #4]
    332e:	2201      	movs	r2, #1
    3330:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3332:	687b      	ldr	r3, [r7, #4]
    3334:	2200      	movs	r2, #0
    3336:	70da      	strb	r2, [r3, #3]
}
    3338:	46c0      	nop			; (mov r8, r8)
    333a:	46bd      	mov	sp, r7
    333c:	b002      	add	sp, #8
    333e:	bd80      	pop	{r7, pc}

00003340 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3340:	b580      	push	{r7, lr}
    3342:	b084      	sub	sp, #16
    3344:	af00      	add	r7, sp, #0
    3346:	0002      	movs	r2, r0
    3348:	6039      	str	r1, [r7, #0]
    334a:	1dfb      	adds	r3, r7, #7
    334c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    334e:	230c      	movs	r3, #12
    3350:	18fb      	adds	r3, r7, r3
    3352:	0018      	movs	r0, r3
    3354:	4b10      	ldr	r3, [pc, #64]	; (3398 <port_pin_set_config+0x58>)
    3356:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    3358:	230c      	movs	r3, #12
    335a:	18fb      	adds	r3, r7, r3
    335c:	2280      	movs	r2, #128	; 0x80
    335e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    3360:	683b      	ldr	r3, [r7, #0]
    3362:	781a      	ldrb	r2, [r3, #0]
    3364:	230c      	movs	r3, #12
    3366:	18fb      	adds	r3, r7, r3
    3368:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    336a:	683b      	ldr	r3, [r7, #0]
    336c:	785a      	ldrb	r2, [r3, #1]
    336e:	230c      	movs	r3, #12
    3370:	18fb      	adds	r3, r7, r3
    3372:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3374:	683b      	ldr	r3, [r7, #0]
    3376:	789a      	ldrb	r2, [r3, #2]
    3378:	230c      	movs	r3, #12
    337a:	18fb      	adds	r3, r7, r3
    337c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    337e:	230c      	movs	r3, #12
    3380:	18fa      	adds	r2, r7, r3
    3382:	1dfb      	adds	r3, r7, #7
    3384:	781b      	ldrb	r3, [r3, #0]
    3386:	0011      	movs	r1, r2
    3388:	0018      	movs	r0, r3
    338a:	4b04      	ldr	r3, [pc, #16]	; (339c <port_pin_set_config+0x5c>)
    338c:	4798      	blx	r3
}
    338e:	46c0      	nop			; (mov r8, r8)
    3390:	46bd      	mov	sp, r7
    3392:	b004      	add	sp, #16
    3394:	bd80      	pop	{r7, pc}
    3396:	46c0      	nop			; (mov r8, r8)
    3398:	00003319 	.word	0x00003319
    339c:	00006bfd 	.word	0x00006bfd

000033a0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    33a0:	b580      	push	{r7, lr}
    33a2:	b082      	sub	sp, #8
    33a4:	af00      	add	r7, sp, #0
    33a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    33a8:	687b      	ldr	r3, [r7, #4]
    33aa:	2200      	movs	r2, #0
    33ac:	701a      	strb	r2, [r3, #0]
}
    33ae:	46c0      	nop			; (mov r8, r8)
    33b0:	46bd      	mov	sp, r7
    33b2:	b002      	add	sp, #8
    33b4:	bd80      	pop	{r7, pc}
	...

000033b8 <system_apb_clock_set_mask>:
{
    33b8:	b580      	push	{r7, lr}
    33ba:	b082      	sub	sp, #8
    33bc:	af00      	add	r7, sp, #0
    33be:	0002      	movs	r2, r0
    33c0:	6039      	str	r1, [r7, #0]
    33c2:	1dfb      	adds	r3, r7, #7
    33c4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    33c6:	1dfb      	adds	r3, r7, #7
    33c8:	781b      	ldrb	r3, [r3, #0]
    33ca:	2b01      	cmp	r3, #1
    33cc:	d00a      	beq.n	33e4 <system_apb_clock_set_mask+0x2c>
    33ce:	2b02      	cmp	r3, #2
    33d0:	d00f      	beq.n	33f2 <system_apb_clock_set_mask+0x3a>
    33d2:	2b00      	cmp	r3, #0
    33d4:	d114      	bne.n	3400 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    33d6:	4b0e      	ldr	r3, [pc, #56]	; (3410 <system_apb_clock_set_mask+0x58>)
    33d8:	4a0d      	ldr	r2, [pc, #52]	; (3410 <system_apb_clock_set_mask+0x58>)
    33da:	6991      	ldr	r1, [r2, #24]
    33dc:	683a      	ldr	r2, [r7, #0]
    33de:	430a      	orrs	r2, r1
    33e0:	619a      	str	r2, [r3, #24]
			break;
    33e2:	e00f      	b.n	3404 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    33e4:	4b0a      	ldr	r3, [pc, #40]	; (3410 <system_apb_clock_set_mask+0x58>)
    33e6:	4a0a      	ldr	r2, [pc, #40]	; (3410 <system_apb_clock_set_mask+0x58>)
    33e8:	69d1      	ldr	r1, [r2, #28]
    33ea:	683a      	ldr	r2, [r7, #0]
    33ec:	430a      	orrs	r2, r1
    33ee:	61da      	str	r2, [r3, #28]
			break;
    33f0:	e008      	b.n	3404 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    33f2:	4b07      	ldr	r3, [pc, #28]	; (3410 <system_apb_clock_set_mask+0x58>)
    33f4:	4a06      	ldr	r2, [pc, #24]	; (3410 <system_apb_clock_set_mask+0x58>)
    33f6:	6a11      	ldr	r1, [r2, #32]
    33f8:	683a      	ldr	r2, [r7, #0]
    33fa:	430a      	orrs	r2, r1
    33fc:	621a      	str	r2, [r3, #32]
			break;
    33fe:	e001      	b.n	3404 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    3400:	2317      	movs	r3, #23
    3402:	e000      	b.n	3406 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    3404:	2300      	movs	r3, #0
}
    3406:	0018      	movs	r0, r3
    3408:	46bd      	mov	sp, r7
    340a:	b002      	add	sp, #8
    340c:	bd80      	pop	{r7, pc}
    340e:	46c0      	nop			; (mov r8, r8)
    3410:	40000400 	.word	0x40000400

00003414 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
    3414:	b580      	push	{r7, lr}
    3416:	b084      	sub	sp, #16
    3418:	af00      	add	r7, sp, #0
    341a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    341c:	687b      	ldr	r3, [r7, #4]
    341e:	681b      	ldr	r3, [r3, #0]
    3420:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    3422:	68fb      	ldr	r3, [r7, #12]
    3424:	7a9b      	ldrb	r3, [r3, #10]
    3426:	b2db      	uxtb	r3, r3
    3428:	b25b      	sxtb	r3, r3
    342a:	2b00      	cmp	r3, #0
    342c:	da01      	bge.n	3432 <rtc_calendar_is_syncing+0x1e>
                return true;
    342e:	2301      	movs	r3, #1
    3430:	e000      	b.n	3434 <rtc_calendar_is_syncing+0x20>
        }

        return false;
    3432:	2300      	movs	r3, #0
}
    3434:	0018      	movs	r0, r3
    3436:	46bd      	mov	sp, r7
    3438:	b004      	add	sp, #16
    343a:	bd80      	pop	{r7, pc}

0000343c <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
    343c:	b580      	push	{r7, lr}
    343e:	b084      	sub	sp, #16
    3440:	af00      	add	r7, sp, #0
    3442:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3444:	687b      	ldr	r3, [r7, #4]
    3446:	681b      	ldr	r3, [r3, #0]
    3448:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    344a:	46c0      	nop			; (mov r8, r8)
    344c:	687b      	ldr	r3, [r7, #4]
    344e:	0018      	movs	r0, r3
    3450:	4b07      	ldr	r3, [pc, #28]	; (3470 <rtc_calendar_enable+0x34>)
    3452:	4798      	blx	r3
    3454:	1e03      	subs	r3, r0, #0
    3456:	d1f9      	bne.n	344c <rtc_calendar_enable+0x10>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    3458:	68fb      	ldr	r3, [r7, #12]
    345a:	881b      	ldrh	r3, [r3, #0]
    345c:	b29b      	uxth	r3, r3
    345e:	2202      	movs	r2, #2
    3460:	4313      	orrs	r3, r2
    3462:	b29a      	uxth	r2, r3
    3464:	68fb      	ldr	r3, [r7, #12]
    3466:	801a      	strh	r2, [r3, #0]
}
    3468:	46c0      	nop			; (mov r8, r8)
    346a:	46bd      	mov	sp, r7
    346c:	b004      	add	sp, #16
    346e:	bd80      	pop	{r7, pc}
    3470:	00003415 	.word	0x00003415

00003474 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    3474:	b580      	push	{r7, lr}
    3476:	b084      	sub	sp, #16
    3478:	af00      	add	r7, sp, #0
    347a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    347c:	687b      	ldr	r3, [r7, #4]
    347e:	681b      	ldr	r3, [r3, #0]
    3480:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    3482:	46c0      	nop			; (mov r8, r8)
    3484:	687b      	ldr	r3, [r7, #4]
    3486:	0018      	movs	r0, r3
    3488:	4b0a      	ldr	r3, [pc, #40]	; (34b4 <rtc_calendar_disable+0x40>)
    348a:	4798      	blx	r3
    348c:	1e03      	subs	r3, r0, #0
    348e:	d1f9      	bne.n	3484 <rtc_calendar_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    3490:	68fb      	ldr	r3, [r7, #12]
    3492:	22c1      	movs	r2, #193	; 0xc1
    3494:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    3496:	68fb      	ldr	r3, [r7, #12]
    3498:	22c1      	movs	r2, #193	; 0xc1
    349a:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    349c:	68fb      	ldr	r3, [r7, #12]
    349e:	881b      	ldrh	r3, [r3, #0]
    34a0:	b29b      	uxth	r3, r3
    34a2:	2202      	movs	r2, #2
    34a4:	4393      	bics	r3, r2
    34a6:	b29a      	uxth	r2, r3
    34a8:	68fb      	ldr	r3, [r7, #12]
    34aa:	801a      	strh	r2, [r3, #0]
}
    34ac:	46c0      	nop			; (mov r8, r8)
    34ae:	46bd      	mov	sp, r7
    34b0:	b004      	add	sp, #16
    34b2:	bd80      	pop	{r7, pc}
    34b4:	00003415 	.word	0x00003415

000034b8 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    34b8:	b580      	push	{r7, lr}
    34ba:	b084      	sub	sp, #16
    34bc:	af00      	add	r7, sp, #0
    34be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    34c0:	687b      	ldr	r3, [r7, #4]
    34c2:	681b      	ldr	r3, [r3, #0]
    34c4:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    34c6:	687b      	ldr	r3, [r7, #4]
    34c8:	0018      	movs	r0, r3
    34ca:	4b0a      	ldr	r3, [pc, #40]	; (34f4 <rtc_calendar_reset+0x3c>)
    34cc:	4798      	blx	r3
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    34ce:	46c0      	nop			; (mov r8, r8)
    34d0:	687b      	ldr	r3, [r7, #4]
    34d2:	0018      	movs	r0, r3
    34d4:	4b08      	ldr	r3, [pc, #32]	; (34f8 <rtc_calendar_reset+0x40>)
    34d6:	4798      	blx	r3
    34d8:	1e03      	subs	r3, r0, #0
    34da:	d1f9      	bne.n	34d0 <rtc_calendar_reset+0x18>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    34dc:	68fb      	ldr	r3, [r7, #12]
    34de:	881b      	ldrh	r3, [r3, #0]
    34e0:	b29b      	uxth	r3, r3
    34e2:	2201      	movs	r2, #1
    34e4:	4313      	orrs	r3, r2
    34e6:	b29a      	uxth	r2, r3
    34e8:	68fb      	ldr	r3, [r7, #12]
    34ea:	801a      	strh	r2, [r3, #0]
}
    34ec:	46c0      	nop			; (mov r8, r8)
    34ee:	46bd      	mov	sp, r7
    34f0:	b004      	add	sp, #16
    34f2:	bd80      	pop	{r7, pc}
    34f4:	00003475 	.word	0x00003475
    34f8:	00003415 	.word	0x00003415

000034fc <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    34fc:	b580      	push	{r7, lr}
    34fe:	b084      	sub	sp, #16
    3500:	af00      	add	r7, sp, #0
    3502:	6078      	str	r0, [r7, #4]
    3504:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    3506:	683b      	ldr	r3, [r7, #0]
    3508:	88db      	ldrh	r3, [r3, #6]
    350a:	001a      	movs	r2, r3
    350c:	687b      	ldr	r3, [r7, #4]
    350e:	88db      	ldrh	r3, [r3, #6]
    3510:	1ad3      	subs	r3, r2, r3
    3512:	069b      	lsls	r3, r3, #26
    3514:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    3516:	683b      	ldr	r3, [r7, #0]
    3518:	795b      	ldrb	r3, [r3, #5]
    351a:	059b      	lsls	r3, r3, #22
    351c:	001a      	movs	r2, r3
    351e:	68fb      	ldr	r3, [r7, #12]
    3520:	4313      	orrs	r3, r2
    3522:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    3524:	683b      	ldr	r3, [r7, #0]
    3526:	791b      	ldrb	r3, [r3, #4]
    3528:	045b      	lsls	r3, r3, #17
    352a:	001a      	movs	r2, r3
    352c:	68fb      	ldr	r3, [r7, #12]
    352e:	4313      	orrs	r3, r2
    3530:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    3532:	683b      	ldr	r3, [r7, #0]
    3534:	789b      	ldrb	r3, [r3, #2]
    3536:	031b      	lsls	r3, r3, #12
    3538:	001a      	movs	r2, r3
    353a:	68fb      	ldr	r3, [r7, #12]
    353c:	4313      	orrs	r3, r2
    353e:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    3540:	687b      	ldr	r3, [r7, #4]
    3542:	791b      	ldrb	r3, [r3, #4]
    3544:	2201      	movs	r2, #1
    3546:	4053      	eors	r3, r2
    3548:	b2db      	uxtb	r3, r3
    354a:	2b00      	cmp	r3, #0
    354c:	d008      	beq.n	3560 <rtc_calendar_time_to_register_value+0x64>
    354e:	683b      	ldr	r3, [r7, #0]
    3550:	78db      	ldrb	r3, [r3, #3]
    3552:	2b00      	cmp	r3, #0
    3554:	d004      	beq.n	3560 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    3556:	68fb      	ldr	r3, [r7, #12]
    3558:	2280      	movs	r2, #128	; 0x80
    355a:	0252      	lsls	r2, r2, #9
    355c:	4313      	orrs	r3, r2
    355e:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    3560:	683b      	ldr	r3, [r7, #0]
    3562:	785b      	ldrb	r3, [r3, #1]
    3564:	019b      	lsls	r3, r3, #6
    3566:	001a      	movs	r2, r3
    3568:	68fb      	ldr	r3, [r7, #12]
    356a:	4313      	orrs	r3, r2
    356c:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    356e:	683b      	ldr	r3, [r7, #0]
    3570:	781b      	ldrb	r3, [r3, #0]
    3572:	001a      	movs	r2, r3
    3574:	68fb      	ldr	r3, [r7, #12]
    3576:	4313      	orrs	r3, r2
    3578:	60fb      	str	r3, [r7, #12]

	return register_value;
    357a:	68fb      	ldr	r3, [r7, #12]
}
    357c:	0018      	movs	r0, r3
    357e:	46bd      	mov	sp, r7
    3580:	b004      	add	sp, #16
    3582:	bd80      	pop	{r7, pc}

00003584 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    3584:	b580      	push	{r7, lr}
    3586:	b084      	sub	sp, #16
    3588:	af00      	add	r7, sp, #0
    358a:	60f8      	str	r0, [r7, #12]
    358c:	60b9      	str	r1, [r7, #8]
    358e:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    3590:	68bb      	ldr	r3, [r7, #8]
    3592:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    3594:	b29a      	uxth	r2, r3
    3596:	68fb      	ldr	r3, [r7, #12]
    3598:	88db      	ldrh	r3, [r3, #6]
    359a:	18d3      	adds	r3, r2, r3
    359c:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    359e:	687b      	ldr	r3, [r7, #4]
    35a0:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    35a2:	68bb      	ldr	r3, [r7, #8]
    35a4:	0d9b      	lsrs	r3, r3, #22
    35a6:	b2db      	uxtb	r3, r3
    35a8:	220f      	movs	r2, #15
    35aa:	4013      	ands	r3, r2
    35ac:	b2da      	uxtb	r2, r3
    35ae:	687b      	ldr	r3, [r7, #4]
    35b0:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    35b2:	68bb      	ldr	r3, [r7, #8]
    35b4:	0c5b      	lsrs	r3, r3, #17
    35b6:	b2db      	uxtb	r3, r3
    35b8:	221f      	movs	r2, #31
    35ba:	4013      	ands	r3, r2
    35bc:	b2da      	uxtb	r2, r3
    35be:	687b      	ldr	r3, [r7, #4]
    35c0:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    35c2:	68fb      	ldr	r3, [r7, #12]
    35c4:	791b      	ldrb	r3, [r3, #4]
    35c6:	2b00      	cmp	r3, #0
    35c8:	d008      	beq.n	35dc <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    35ca:	68bb      	ldr	r3, [r7, #8]
    35cc:	0b1b      	lsrs	r3, r3, #12
    35ce:	b2db      	uxtb	r3, r3
    35d0:	221f      	movs	r2, #31
    35d2:	4013      	ands	r3, r2
    35d4:	b2da      	uxtb	r2, r3
    35d6:	687b      	ldr	r3, [r7, #4]
    35d8:	709a      	strb	r2, [r3, #2]
    35da:	e010      	b.n	35fe <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    35dc:	68bb      	ldr	r3, [r7, #8]
    35de:	0b1b      	lsrs	r3, r3, #12
    35e0:	b2db      	uxtb	r3, r3
    35e2:	220f      	movs	r2, #15
    35e4:	4013      	ands	r3, r2
    35e6:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
    35e8:	687b      	ldr	r3, [r7, #4]
    35ea:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    35ec:	68ba      	ldr	r2, [r7, #8]
    35ee:	2380      	movs	r3, #128	; 0x80
    35f0:	025b      	lsls	r3, r3, #9
    35f2:	4013      	ands	r3, r2
    35f4:	1e5a      	subs	r2, r3, #1
    35f6:	4193      	sbcs	r3, r2
    35f8:	b2da      	uxtb	r2, r3
    35fa:	687b      	ldr	r3, [r7, #4]
    35fc:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    35fe:	68bb      	ldr	r3, [r7, #8]
    3600:	099b      	lsrs	r3, r3, #6
    3602:	b2db      	uxtb	r3, r3
    3604:	223f      	movs	r2, #63	; 0x3f
    3606:	4013      	ands	r3, r2
    3608:	b2da      	uxtb	r2, r3
    360a:	687b      	ldr	r3, [r7, #4]
    360c:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    360e:	68bb      	ldr	r3, [r7, #8]
    3610:	b2db      	uxtb	r3, r3
    3612:	223f      	movs	r2, #63	; 0x3f
    3614:	4013      	ands	r3, r2
    3616:	b2da      	uxtb	r2, r3
    3618:	687b      	ldr	r3, [r7, #4]
    361a:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    361c:	46c0      	nop			; (mov r8, r8)
    361e:	46bd      	mov	sp, r7
    3620:	b004      	add	sp, #16
    3622:	bd80      	pop	{r7, pc}

00003624 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
    3624:	b580      	push	{r7, lr}
    3626:	b084      	sub	sp, #16
    3628:	af00      	add	r7, sp, #0
    362a:	6078      	str	r0, [r7, #4]
    362c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    362e:	687b      	ldr	r3, [r7, #4]
    3630:	681b      	ldr	r3, [r3, #0]
    3632:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    3634:	683b      	ldr	r3, [r7, #0]
    3636:	881a      	ldrh	r2, [r3, #0]
    3638:	230e      	movs	r3, #14
    363a:	18fb      	adds	r3, r7, r3
    363c:	2108      	movs	r1, #8
    363e:	430a      	orrs	r2, r1
    3640:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
    3642:	683b      	ldr	r3, [r7, #0]
    3644:	791b      	ldrb	r3, [r3, #4]
    3646:	2201      	movs	r2, #1
    3648:	4053      	eors	r3, r2
    364a:	b2db      	uxtb	r3, r3
    364c:	2b00      	cmp	r3, #0
    364e:	d007      	beq.n	3660 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    3650:	230e      	movs	r3, #14
    3652:	18fb      	adds	r3, r7, r3
    3654:	220e      	movs	r2, #14
    3656:	18ba      	adds	r2, r7, r2
    3658:	8812      	ldrh	r2, [r2, #0]
    365a:	2140      	movs	r1, #64	; 0x40
    365c:	430a      	orrs	r2, r1
    365e:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
    3660:	683b      	ldr	r3, [r7, #0]
    3662:	789b      	ldrb	r3, [r3, #2]
    3664:	2b00      	cmp	r3, #0
    3666:	d007      	beq.n	3678 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    3668:	230e      	movs	r3, #14
    366a:	18fb      	adds	r3, r7, r3
    366c:	220e      	movs	r2, #14
    366e:	18ba      	adds	r2, r7, r2
    3670:	8812      	ldrh	r2, [r2, #0]
    3672:	2180      	movs	r1, #128	; 0x80
    3674:	430a      	orrs	r2, r1
    3676:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    3678:	68bb      	ldr	r3, [r7, #8]
    367a:	220e      	movs	r2, #14
    367c:	18ba      	adds	r2, r7, r2
    367e:	8812      	ldrh	r2, [r2, #0]
    3680:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
    3682:	683b      	ldr	r3, [r7, #0]
    3684:	78db      	ldrb	r3, [r3, #3]
    3686:	2b00      	cmp	r3, #0
    3688:	d008      	beq.n	369c <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    368a:	68bb      	ldr	r3, [r7, #8]
    368c:	885b      	ldrh	r3, [r3, #2]
    368e:	b29b      	uxth	r3, r3
    3690:	2280      	movs	r2, #128	; 0x80
    3692:	01d2      	lsls	r2, r2, #7
    3694:	4313      	orrs	r3, r2
    3696:	b29a      	uxth	r2, r3
    3698:	68bb      	ldr	r3, [r7, #8]
    369a:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    369c:	230d      	movs	r3, #13
    369e:	18fb      	adds	r3, r7, r3
    36a0:	2200      	movs	r2, #0
    36a2:	701a      	strb	r2, [r3, #0]
    36a4:	e017      	b.n	36d6 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    36a6:	230d      	movs	r3, #13
    36a8:	18fb      	adds	r3, r7, r3
    36aa:	781a      	ldrb	r2, [r3, #0]
    36ac:	0013      	movs	r3, r2
    36ae:	009b      	lsls	r3, r3, #2
    36b0:	189b      	adds	r3, r3, r2
    36b2:	005b      	lsls	r3, r3, #1
    36b4:	3308      	adds	r3, #8
    36b6:	683a      	ldr	r2, [r7, #0]
    36b8:	18d1      	adds	r1, r2, r3
    36ba:	230d      	movs	r3, #13
    36bc:	18fb      	adds	r3, r7, r3
    36be:	781a      	ldrb	r2, [r3, #0]
    36c0:	687b      	ldr	r3, [r7, #4]
    36c2:	0018      	movs	r0, r3
    36c4:	4b08      	ldr	r3, [pc, #32]	; (36e8 <_rtc_calendar_set_config+0xc4>)
    36c6:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    36c8:	230d      	movs	r3, #13
    36ca:	18fb      	adds	r3, r7, r3
    36cc:	781a      	ldrb	r2, [r3, #0]
    36ce:	230d      	movs	r3, #13
    36d0:	18fb      	adds	r3, r7, r3
    36d2:	3201      	adds	r2, #1
    36d4:	701a      	strb	r2, [r3, #0]
    36d6:	230d      	movs	r3, #13
    36d8:	18fb      	adds	r3, r7, r3
    36da:	781b      	ldrb	r3, [r3, #0]
    36dc:	2b00      	cmp	r3, #0
    36de:	d0e2      	beq.n	36a6 <_rtc_calendar_set_config+0x82>
	}
}
    36e0:	46c0      	nop			; (mov r8, r8)
    36e2:	46bd      	mov	sp, r7
    36e4:	b004      	add	sp, #16
    36e6:	bd80      	pop	{r7, pc}
    36e8:	0000380d 	.word	0x0000380d

000036ec <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
    36ec:	b580      	push	{r7, lr}
    36ee:	b086      	sub	sp, #24
    36f0:	af00      	add	r7, sp, #0
    36f2:	60f8      	str	r0, [r7, #12]
    36f4:	60b9      	str	r1, [r7, #8]
    36f6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    36f8:	68fb      	ldr	r3, [r7, #12]
    36fa:	68ba      	ldr	r2, [r7, #8]
    36fc:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
    36fe:	2120      	movs	r1, #32
    3700:	2000      	movs	r0, #0
    3702:	4b18      	ldr	r3, [pc, #96]	; (3764 <rtc_calendar_init+0x78>)
    3704:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3706:	2314      	movs	r3, #20
    3708:	18fb      	adds	r3, r7, r3
    370a:	0018      	movs	r0, r3
    370c:	4b16      	ldr	r3, [pc, #88]	; (3768 <rtc_calendar_init+0x7c>)
    370e:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    3710:	2314      	movs	r3, #20
    3712:	18fb      	adds	r3, r7, r3
    3714:	2202      	movs	r2, #2
    3716:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    3718:	2314      	movs	r3, #20
    371a:	18fb      	adds	r3, r7, r3
    371c:	0019      	movs	r1, r3
    371e:	2004      	movs	r0, #4
    3720:	4b12      	ldr	r3, [pc, #72]	; (376c <rtc_calendar_init+0x80>)
    3722:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    3724:	2004      	movs	r0, #4
    3726:	4b12      	ldr	r3, [pc, #72]	; (3770 <rtc_calendar_init+0x84>)
    3728:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
    372a:	68fb      	ldr	r3, [r7, #12]
    372c:	0018      	movs	r0, r3
    372e:	4b11      	ldr	r3, [pc, #68]	; (3774 <rtc_calendar_init+0x88>)
    3730:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
    3732:	687b      	ldr	r3, [r7, #4]
    3734:	791a      	ldrb	r2, [r3, #4]
    3736:	68fb      	ldr	r3, [r7, #12]
    3738:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
    373a:	687b      	ldr	r3, [r7, #4]
    373c:	78da      	ldrb	r2, [r3, #3]
    373e:	68fb      	ldr	r3, [r7, #12]
    3740:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
    3742:	687b      	ldr	r3, [r7, #4]
    3744:	88da      	ldrh	r2, [r3, #6]
    3746:	68fb      	ldr	r3, [r7, #12]
    3748:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    374a:	4b0b      	ldr	r3, [pc, #44]	; (3778 <rtc_calendar_init+0x8c>)
    374c:	68fa      	ldr	r2, [r7, #12]
    374e:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
    3750:	687a      	ldr	r2, [r7, #4]
    3752:	68fb      	ldr	r3, [r7, #12]
    3754:	0011      	movs	r1, r2
    3756:	0018      	movs	r0, r3
    3758:	4b08      	ldr	r3, [pc, #32]	; (377c <rtc_calendar_init+0x90>)
    375a:	4798      	blx	r3
}
    375c:	46c0      	nop			; (mov r8, r8)
    375e:	46bd      	mov	sp, r7
    3760:	b006      	add	sp, #24
    3762:	bd80      	pop	{r7, pc}
    3764:	000033b9 	.word	0x000033b9
    3768:	000033a1 	.word	0x000033a1
    376c:	00006911 	.word	0x00006911
    3770:	00006955 	.word	0x00006955
    3774:	000034b9 	.word	0x000034b9
    3778:	20000a0c 	.word	0x20000a0c
    377c:	00003625 	.word	0x00003625

00003780 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    3780:	b580      	push	{r7, lr}
    3782:	b084      	sub	sp, #16
    3784:	af00      	add	r7, sp, #0
    3786:	6078      	str	r0, [r7, #4]
    3788:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    378a:	687b      	ldr	r3, [r7, #4]
    378c:	681b      	ldr	r3, [r3, #0]
    378e:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    3790:	687b      	ldr	r3, [r7, #4]
    3792:	795b      	ldrb	r3, [r3, #5]
    3794:	2201      	movs	r2, #1
    3796:	4053      	eors	r3, r2
    3798:	b2db      	uxtb	r3, r3
    379a:	2b00      	cmp	r3, #0
    379c:	d00a      	beq.n	37b4 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    379e:	68fb      	ldr	r3, [r7, #12]
    37a0:	4a16      	ldr	r2, [pc, #88]	; (37fc <rtc_calendar_get_time+0x7c>)
    37a2:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
    37a4:	46c0      	nop			; (mov r8, r8)
    37a6:	687b      	ldr	r3, [r7, #4]
    37a8:	0018      	movs	r0, r3
    37aa:	4b15      	ldr	r3, [pc, #84]	; (3800 <rtc_calendar_get_time+0x80>)
    37ac:	4798      	blx	r3
    37ae:	1e03      	subs	r3, r0, #0
    37b0:	d1f9      	bne.n	37a6 <rtc_calendar_get_time+0x26>
    37b2:	e016      	b.n	37e2 <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    37b4:	68fb      	ldr	r3, [r7, #12]
    37b6:	885b      	ldrh	r3, [r3, #2]
    37b8:	b29b      	uxth	r3, r3
    37ba:	001a      	movs	r2, r3
    37bc:	2380      	movs	r3, #128	; 0x80
    37be:	01db      	lsls	r3, r3, #7
    37c0:	4013      	ands	r3, r2
    37c2:	d10e      	bne.n	37e2 <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    37c4:	68fb      	ldr	r3, [r7, #12]
    37c6:	885b      	ldrh	r3, [r3, #2]
    37c8:	b29b      	uxth	r3, r3
    37ca:	4a0e      	ldr	r2, [pc, #56]	; (3804 <rtc_calendar_get_time+0x84>)
    37cc:	4313      	orrs	r3, r2
    37ce:	b29a      	uxth	r2, r3
    37d0:	68fb      	ldr	r3, [r7, #12]
    37d2:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
    37d4:	46c0      	nop			; (mov r8, r8)
    37d6:	687b      	ldr	r3, [r7, #4]
    37d8:	0018      	movs	r0, r3
    37da:	4b09      	ldr	r3, [pc, #36]	; (3800 <rtc_calendar_get_time+0x80>)
    37dc:	4798      	blx	r3
    37de:	1e03      	subs	r3, r0, #0
    37e0:	d1f9      	bne.n	37d6 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    37e2:	68fb      	ldr	r3, [r7, #12]
    37e4:	691b      	ldr	r3, [r3, #16]
    37e6:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    37e8:	683a      	ldr	r2, [r7, #0]
    37ea:	68b9      	ldr	r1, [r7, #8]
    37ec:	687b      	ldr	r3, [r7, #4]
    37ee:	0018      	movs	r0, r3
    37f0:	4b05      	ldr	r3, [pc, #20]	; (3808 <rtc_calendar_get_time+0x88>)
    37f2:	4798      	blx	r3
}
    37f4:	46c0      	nop			; (mov r8, r8)
    37f6:	46bd      	mov	sp, r7
    37f8:	b004      	add	sp, #16
    37fa:	bd80      	pop	{r7, pc}
    37fc:	ffff8000 	.word	0xffff8000
    3800:	00003415 	.word	0x00003415
    3804:	ffffc000 	.word	0xffffc000
    3808:	00003585 	.word	0x00003585

0000380c <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    380c:	b580      	push	{r7, lr}
    380e:	b086      	sub	sp, #24
    3810:	af00      	add	r7, sp, #0
    3812:	60f8      	str	r0, [r7, #12]
    3814:	60b9      	str	r1, [r7, #8]
    3816:	1dfb      	adds	r3, r7, #7
    3818:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    381a:	68fb      	ldr	r3, [r7, #12]
    381c:	681b      	ldr	r3, [r3, #0]
    381e:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    3820:	1dfb      	adds	r3, r7, #7
    3822:	781b      	ldrb	r3, [r3, #0]
    3824:	2b01      	cmp	r3, #1
    3826:	d901      	bls.n	382c <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
    3828:	2317      	movs	r3, #23
    382a:	e021      	b.n	3870 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    382c:	68ba      	ldr	r2, [r7, #8]
    382e:	68fb      	ldr	r3, [r7, #12]
    3830:	0011      	movs	r1, r2
    3832:	0018      	movs	r0, r3
    3834:	4b10      	ldr	r3, [pc, #64]	; (3878 <rtc_calendar_set_alarm+0x6c>)
    3836:	4798      	blx	r3
    3838:	0003      	movs	r3, r0
    383a:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
    383c:	46c0      	nop			; (mov r8, r8)
    383e:	68fb      	ldr	r3, [r7, #12]
    3840:	0018      	movs	r0, r3
    3842:	4b0e      	ldr	r3, [pc, #56]	; (387c <rtc_calendar_set_alarm+0x70>)
    3844:	4798      	blx	r3
    3846:	1e03      	subs	r3, r0, #0
    3848:	d1f9      	bne.n	383e <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    384a:	1dfb      	adds	r3, r7, #7
    384c:	781a      	ldrb	r2, [r3, #0]
    384e:	697b      	ldr	r3, [r7, #20]
    3850:	3203      	adds	r2, #3
    3852:	00d2      	lsls	r2, r2, #3
    3854:	6939      	ldr	r1, [r7, #16]
    3856:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    3858:	1dfb      	adds	r3, r7, #7
    385a:	781b      	ldrb	r3, [r3, #0]
    385c:	68ba      	ldr	r2, [r7, #8]
    385e:	7a11      	ldrb	r1, [r2, #8]
    3860:	697a      	ldr	r2, [r7, #20]
    3862:	3303      	adds	r3, #3
    3864:	00db      	lsls	r3, r3, #3
    3866:	18d3      	adds	r3, r2, r3
    3868:	3304      	adds	r3, #4
    386a:	1c0a      	adds	r2, r1, #0
    386c:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    386e:	2300      	movs	r3, #0
}
    3870:	0018      	movs	r0, r3
    3872:	46bd      	mov	sp, r7
    3874:	b006      	add	sp, #24
    3876:	bd80      	pop	{r7, pc}
    3878:	000034fd 	.word	0x000034fd
    387c:	00003415 	.word	0x00003415

00003880 <system_gclk_chan_get_config_defaults>:
{
    3880:	b580      	push	{r7, lr}
    3882:	b082      	sub	sp, #8
    3884:	af00      	add	r7, sp, #0
    3886:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    3888:	687b      	ldr	r3, [r7, #4]
    388a:	2200      	movs	r2, #0
    388c:	701a      	strb	r2, [r3, #0]
}
    388e:	46c0      	nop			; (mov r8, r8)
    3890:	46bd      	mov	sp, r7
    3892:	b002      	add	sp, #8
    3894:	bd80      	pop	{r7, pc}

00003896 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    3896:	b5f0      	push	{r4, r5, r6, r7, lr}
    3898:	b08d      	sub	sp, #52	; 0x34
    389a:	af00      	add	r7, sp, #0
    389c:	60b8      	str	r0, [r7, #8]
    389e:	60f9      	str	r1, [r7, #12]
    38a0:	603a      	str	r2, [r7, #0]
    38a2:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    38a4:	2300      	movs	r3, #0
    38a6:	2400      	movs	r4, #0
    38a8:	623b      	str	r3, [r7, #32]
    38aa:	627c      	str	r4, [r7, #36]	; 0x24
    38ac:	2300      	movs	r3, #0
    38ae:	2400      	movs	r4, #0
    38b0:	61bb      	str	r3, [r7, #24]
    38b2:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    38b4:	233f      	movs	r3, #63	; 0x3f
    38b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    38b8:	e053      	b.n	3962 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    38ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38bc:	3b20      	subs	r3, #32
    38be:	2b00      	cmp	r3, #0
    38c0:	db04      	blt.n	38cc <long_division+0x36>
    38c2:	2201      	movs	r2, #1
    38c4:	409a      	lsls	r2, r3
    38c6:	0013      	movs	r3, r2
    38c8:	617b      	str	r3, [r7, #20]
    38ca:	e00b      	b.n	38e4 <long_division+0x4e>
    38cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38ce:	2220      	movs	r2, #32
    38d0:	1ad3      	subs	r3, r2, r3
    38d2:	2201      	movs	r2, #1
    38d4:	40da      	lsrs	r2, r3
    38d6:	0013      	movs	r3, r2
    38d8:	2100      	movs	r1, #0
    38da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    38dc:	4091      	lsls	r1, r2
    38de:	000a      	movs	r2, r1
    38e0:	4313      	orrs	r3, r2
    38e2:	617b      	str	r3, [r7, #20]
    38e4:	2201      	movs	r2, #1
    38e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38e8:	409a      	lsls	r2, r3
    38ea:	0013      	movs	r3, r2
    38ec:	613b      	str	r3, [r7, #16]

		r = r << 1;
    38ee:	69bb      	ldr	r3, [r7, #24]
    38f0:	69fc      	ldr	r4, [r7, #28]
    38f2:	18db      	adds	r3, r3, r3
    38f4:	4164      	adcs	r4, r4
    38f6:	61bb      	str	r3, [r7, #24]
    38f8:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    38fa:	68bb      	ldr	r3, [r7, #8]
    38fc:	693a      	ldr	r2, [r7, #16]
    38fe:	401a      	ands	r2, r3
    3900:	0015      	movs	r5, r2
    3902:	68fb      	ldr	r3, [r7, #12]
    3904:	697a      	ldr	r2, [r7, #20]
    3906:	401a      	ands	r2, r3
    3908:	0016      	movs	r6, r2
    390a:	002b      	movs	r3, r5
    390c:	4333      	orrs	r3, r6
    390e:	d007      	beq.n	3920 <long_division+0x8a>
			r |= 0x01;
    3910:	69bb      	ldr	r3, [r7, #24]
    3912:	2201      	movs	r2, #1
    3914:	4313      	orrs	r3, r2
    3916:	61bb      	str	r3, [r7, #24]
    3918:	69fb      	ldr	r3, [r7, #28]
    391a:	2200      	movs	r2, #0
    391c:	4313      	orrs	r3, r2
    391e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    3920:	687a      	ldr	r2, [r7, #4]
    3922:	69fb      	ldr	r3, [r7, #28]
    3924:	429a      	cmp	r2, r3
    3926:	d819      	bhi.n	395c <long_division+0xc6>
    3928:	687a      	ldr	r2, [r7, #4]
    392a:	69fb      	ldr	r3, [r7, #28]
    392c:	429a      	cmp	r2, r3
    392e:	d103      	bne.n	3938 <long_division+0xa2>
    3930:	683a      	ldr	r2, [r7, #0]
    3932:	69bb      	ldr	r3, [r7, #24]
    3934:	429a      	cmp	r2, r3
    3936:	d811      	bhi.n	395c <long_division+0xc6>
			r = r - d;
    3938:	69b9      	ldr	r1, [r7, #24]
    393a:	69fa      	ldr	r2, [r7, #28]
    393c:	683b      	ldr	r3, [r7, #0]
    393e:	687c      	ldr	r4, [r7, #4]
    3940:	1ac9      	subs	r1, r1, r3
    3942:	41a2      	sbcs	r2, r4
    3944:	000b      	movs	r3, r1
    3946:	0014      	movs	r4, r2
    3948:	61bb      	str	r3, [r7, #24]
    394a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    394c:	6a3a      	ldr	r2, [r7, #32]
    394e:	693b      	ldr	r3, [r7, #16]
    3950:	4313      	orrs	r3, r2
    3952:	623b      	str	r3, [r7, #32]
    3954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3956:	697b      	ldr	r3, [r7, #20]
    3958:	4313      	orrs	r3, r2
    395a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    395c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    395e:	3b01      	subs	r3, #1
    3960:	62fb      	str	r3, [r7, #44]	; 0x2c
    3962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3964:	2b00      	cmp	r3, #0
    3966:	daa8      	bge.n	38ba <long_division+0x24>
		}
	}

	return q;
    3968:	6a3b      	ldr	r3, [r7, #32]
    396a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    396c:	0018      	movs	r0, r3
    396e:	0021      	movs	r1, r4
    3970:	46bd      	mov	sp, r7
    3972:	b00d      	add	sp, #52	; 0x34
    3974:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003976 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    3976:	b580      	push	{r7, lr}
    3978:	b086      	sub	sp, #24
    397a:	af00      	add	r7, sp, #0
    397c:	60f8      	str	r0, [r7, #12]
    397e:	60b9      	str	r1, [r7, #8]
    3980:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    3982:	2316      	movs	r3, #22
    3984:	18fb      	adds	r3, r7, r3
    3986:	2200      	movs	r2, #0
    3988:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    398a:	68bb      	ldr	r3, [r7, #8]
    398c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    398e:	68bb      	ldr	r3, [r7, #8]
    3990:	085a      	lsrs	r2, r3, #1
    3992:	68fb      	ldr	r3, [r7, #12]
    3994:	429a      	cmp	r2, r3
    3996:	d201      	bcs.n	399c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3998:	2340      	movs	r3, #64	; 0x40
    399a:	e026      	b.n	39ea <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    399c:	68bb      	ldr	r3, [r7, #8]
    399e:	085b      	lsrs	r3, r3, #1
    39a0:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    39a2:	e00a      	b.n	39ba <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    39a4:	693a      	ldr	r2, [r7, #16]
    39a6:	68fb      	ldr	r3, [r7, #12]
    39a8:	1ad3      	subs	r3, r2, r3
    39aa:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    39ac:	2316      	movs	r3, #22
    39ae:	18fb      	adds	r3, r7, r3
    39b0:	881a      	ldrh	r2, [r3, #0]
    39b2:	2316      	movs	r3, #22
    39b4:	18fb      	adds	r3, r7, r3
    39b6:	3201      	adds	r2, #1
    39b8:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    39ba:	693a      	ldr	r2, [r7, #16]
    39bc:	68fb      	ldr	r3, [r7, #12]
    39be:	429a      	cmp	r2, r3
    39c0:	d2f0      	bcs.n	39a4 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    39c2:	2316      	movs	r3, #22
    39c4:	18fb      	adds	r3, r7, r3
    39c6:	2216      	movs	r2, #22
    39c8:	18ba      	adds	r2, r7, r2
    39ca:	8812      	ldrh	r2, [r2, #0]
    39cc:	3a01      	subs	r2, #1
    39ce:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    39d0:	2316      	movs	r3, #22
    39d2:	18fb      	adds	r3, r7, r3
    39d4:	881b      	ldrh	r3, [r3, #0]
    39d6:	2bff      	cmp	r3, #255	; 0xff
    39d8:	d901      	bls.n	39de <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    39da:	2340      	movs	r3, #64	; 0x40
    39dc:	e005      	b.n	39ea <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    39de:	687b      	ldr	r3, [r7, #4]
    39e0:	2216      	movs	r2, #22
    39e2:	18ba      	adds	r2, r7, r2
    39e4:	8812      	ldrh	r2, [r2, #0]
    39e6:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    39e8:	2300      	movs	r3, #0
	}
}
    39ea:	0018      	movs	r0, r3
    39ec:	46bd      	mov	sp, r7
    39ee:	b006      	add	sp, #24
    39f0:	bd80      	pop	{r7, pc}
	...

000039f4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    39f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    39f6:	b0a1      	sub	sp, #132	; 0x84
    39f8:	af00      	add	r7, sp, #0
    39fa:	64f8      	str	r0, [r7, #76]	; 0x4c
    39fc:	64b9      	str	r1, [r7, #72]	; 0x48
    39fe:	647a      	str	r2, [r7, #68]	; 0x44
    3a00:	2243      	movs	r2, #67	; 0x43
    3a02:	18ba      	adds	r2, r7, r2
    3a04:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    3a06:	2300      	movs	r3, #0
    3a08:	2400      	movs	r4, #0
    3a0a:	673b      	str	r3, [r7, #112]	; 0x70
    3a0c:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    3a0e:	2300      	movs	r3, #0
    3a10:	2400      	movs	r4, #0
    3a12:	66bb      	str	r3, [r7, #104]	; 0x68
    3a14:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    3a16:	2300      	movs	r3, #0
    3a18:	2400      	movs	r4, #0
    3a1a:	67bb      	str	r3, [r7, #120]	; 0x78
    3a1c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    3a1e:	2300      	movs	r3, #0
    3a20:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    3a22:	2358      	movs	r3, #88	; 0x58
    3a24:	2240      	movs	r2, #64	; 0x40
    3a26:	4694      	mov	ip, r2
    3a28:	44bc      	add	ip, r7
    3a2a:	4463      	add	r3, ip
    3a2c:	781a      	ldrb	r2, [r3, #0]
    3a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3a30:	435a      	muls	r2, r3
    3a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3a34:	429a      	cmp	r2, r3
    3a36:	d901      	bls.n	3a3c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3a38:	2340      	movs	r3, #64	; 0x40
    3a3a:	e0b3      	b.n	3ba4 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    3a3c:	2343      	movs	r3, #67	; 0x43
    3a3e:	18fb      	adds	r3, r7, r3
    3a40:	781b      	ldrb	r3, [r3, #0]
    3a42:	2b00      	cmp	r3, #0
    3a44:	d13d      	bne.n	3ac2 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    3a46:	2358      	movs	r3, #88	; 0x58
    3a48:	2240      	movs	r2, #64	; 0x40
    3a4a:	4694      	mov	ip, r2
    3a4c:	44bc      	add	ip, r7
    3a4e:	4463      	add	r3, ip
    3a50:	781b      	ldrb	r3, [r3, #0]
    3a52:	b2db      	uxtb	r3, r3
    3a54:	613b      	str	r3, [r7, #16]
    3a56:	2300      	movs	r3, #0
    3a58:	617b      	str	r3, [r7, #20]
    3a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3a5c:	60bb      	str	r3, [r7, #8]
    3a5e:	2300      	movs	r3, #0
    3a60:	60fb      	str	r3, [r7, #12]
    3a62:	4c52      	ldr	r4, [pc, #328]	; (3bac <_sercom_get_async_baud_val+0x1b8>)
    3a64:	68ba      	ldr	r2, [r7, #8]
    3a66:	68fb      	ldr	r3, [r7, #12]
    3a68:	6938      	ldr	r0, [r7, #16]
    3a6a:	6979      	ldr	r1, [r7, #20]
    3a6c:	47a0      	blx	r4
    3a6e:	0003      	movs	r3, r0
    3a70:	000c      	movs	r4, r1
    3a72:	001b      	movs	r3, r3
    3a74:	65fb      	str	r3, [r7, #92]	; 0x5c
    3a76:	2300      	movs	r3, #0
    3a78:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    3a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3a7c:	603b      	str	r3, [r7, #0]
    3a7e:	2300      	movs	r3, #0
    3a80:	607b      	str	r3, [r7, #4]
    3a82:	6db8      	ldr	r0, [r7, #88]	; 0x58
    3a84:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    3a86:	683a      	ldr	r2, [r7, #0]
    3a88:	687b      	ldr	r3, [r7, #4]
    3a8a:	4c49      	ldr	r4, [pc, #292]	; (3bb0 <_sercom_get_async_baud_val+0x1bc>)
    3a8c:	47a0      	blx	r4
    3a8e:	0003      	movs	r3, r0
    3a90:	000c      	movs	r4, r1
    3a92:	673b      	str	r3, [r7, #112]	; 0x70
    3a94:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    3a96:	2100      	movs	r1, #0
    3a98:	2201      	movs	r2, #1
    3a9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    3a9c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    3a9e:	1ac9      	subs	r1, r1, r3
    3aa0:	41a2      	sbcs	r2, r4
    3aa2:	000b      	movs	r3, r1
    3aa4:	0014      	movs	r4, r2
    3aa6:	66bb      	str	r3, [r7, #104]	; 0x68
    3aa8:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    3aaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3aac:	0c1b      	lsrs	r3, r3, #16
    3aae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    3ab0:	0416      	lsls	r6, r2, #16
    3ab2:	431e      	orrs	r6, r3
    3ab4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3ab6:	041d      	lsls	r5, r3, #16
    3ab8:	0033      	movs	r3, r6
    3aba:	67bb      	str	r3, [r7, #120]	; 0x78
    3abc:	2300      	movs	r3, #0
    3abe:	67fb      	str	r3, [r7, #124]	; 0x7c
    3ac0:	e06a      	b.n	3b98 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    3ac2:	2343      	movs	r3, #67	; 0x43
    3ac4:	18fb      	adds	r3, r7, r3
    3ac6:	781b      	ldrb	r3, [r3, #0]
    3ac8:	2b01      	cmp	r3, #1
    3aca:	d165      	bne.n	3b98 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    3acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3ace:	633b      	str	r3, [r7, #48]	; 0x30
    3ad0:	2300      	movs	r3, #0
    3ad2:	637b      	str	r3, [r7, #52]	; 0x34
    3ad4:	2358      	movs	r3, #88	; 0x58
    3ad6:	2240      	movs	r2, #64	; 0x40
    3ad8:	4694      	mov	ip, r2
    3ada:	44bc      	add	ip, r7
    3adc:	4463      	add	r3, ip
    3ade:	781b      	ldrb	r3, [r3, #0]
    3ae0:	b2db      	uxtb	r3, r3
    3ae2:	62bb      	str	r3, [r7, #40]	; 0x28
    3ae4:	2300      	movs	r3, #0
    3ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    3ae8:	4c30      	ldr	r4, [pc, #192]	; (3bac <_sercom_get_async_baud_val+0x1b8>)
    3aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3aee:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3af0:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3af2:	47a0      	blx	r4
    3af4:	0003      	movs	r3, r0
    3af6:	000c      	movs	r4, r1
    3af8:	65bb      	str	r3, [r7, #88]	; 0x58
    3afa:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    3afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3afe:	623b      	str	r3, [r7, #32]
    3b00:	2300      	movs	r3, #0
    3b02:	627b      	str	r3, [r7, #36]	; 0x24
    3b04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3b06:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3b08:	001a      	movs	r2, r3
    3b0a:	0023      	movs	r3, r4
    3b0c:	6a38      	ldr	r0, [r7, #32]
    3b0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3b10:	4c27      	ldr	r4, [pc, #156]	; (3bb0 <_sercom_get_async_baud_val+0x1bc>)
    3b12:	47a0      	blx	r4
    3b14:	0003      	movs	r3, r0
    3b16:	000c      	movs	r4, r1
    3b18:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    3b1a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    3b1c:	2380      	movs	r3, #128	; 0x80
    3b1e:	019b      	lsls	r3, r3, #6
    3b20:	429a      	cmp	r2, r3
    3b22:	d901      	bls.n	3b28 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3b24:	2340      	movs	r3, #64	; 0x40
    3b26:	e03d      	b.n	3ba4 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    3b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3b2a:	61bb      	str	r3, [r7, #24]
    3b2c:	2300      	movs	r3, #0
    3b2e:	61fb      	str	r3, [r7, #28]
    3b30:	69b9      	ldr	r1, [r7, #24]
    3b32:	69fa      	ldr	r2, [r7, #28]
    3b34:	000b      	movs	r3, r1
    3b36:	0f5b      	lsrs	r3, r3, #29
    3b38:	0010      	movs	r0, r2
    3b3a:	00c0      	lsls	r0, r0, #3
    3b3c:	63f8      	str	r0, [r7, #60]	; 0x3c
    3b3e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    3b40:	4318      	orrs	r0, r3
    3b42:	63f8      	str	r0, [r7, #60]	; 0x3c
    3b44:	000b      	movs	r3, r1
    3b46:	00db      	lsls	r3, r3, #3
    3b48:	63bb      	str	r3, [r7, #56]	; 0x38
    3b4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3b4c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3b4e:	001a      	movs	r2, r3
    3b50:	0023      	movs	r3, r4
    3b52:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3b54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3b56:	4c16      	ldr	r4, [pc, #88]	; (3bb0 <_sercom_get_async_baud_val+0x1bc>)
    3b58:	47a0      	blx	r4
    3b5a:	0003      	movs	r3, r0
    3b5c:	000c      	movs	r4, r1
    3b5e:	65bb      	str	r3, [r7, #88]	; 0x58
    3b60:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    3b62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3b64:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3b66:	b2d9      	uxtb	r1, r3
    3b68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3b6a:	b2db      	uxtb	r3, r3
    3b6c:	00db      	lsls	r3, r3, #3
    3b6e:	b2da      	uxtb	r2, r3
    3b70:	2317      	movs	r3, #23
    3b72:	2040      	movs	r0, #64	; 0x40
    3b74:	4684      	mov	ip, r0
    3b76:	44bc      	add	ip, r7
    3b78:	4463      	add	r3, ip
    3b7a:	1a8a      	subs	r2, r1, r2
    3b7c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    3b7e:	2317      	movs	r3, #23
    3b80:	2240      	movs	r2, #64	; 0x40
    3b82:	4694      	mov	ip, r2
    3b84:	44bc      	add	ip, r7
    3b86:	4463      	add	r3, ip
    3b88:	781b      	ldrb	r3, [r3, #0]
    3b8a:	035b      	lsls	r3, r3, #13
    3b8c:	001a      	movs	r2, r3
    3b8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3b90:	4313      	orrs	r3, r2
    3b92:	67bb      	str	r3, [r7, #120]	; 0x78
    3b94:	2300      	movs	r3, #0
    3b96:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    3b98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3b9a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    3b9c:	b29a      	uxth	r2, r3
    3b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3ba0:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    3ba2:	2300      	movs	r3, #0
}
    3ba4:	0018      	movs	r0, r3
    3ba6:	46bd      	mov	sp, r7
    3ba8:	b021      	add	sp, #132	; 0x84
    3baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bac:	0000bbb9 	.word	0x0000bbb9
    3bb0:	00003897 	.word	0x00003897

00003bb4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3bb4:	b580      	push	{r7, lr}
    3bb6:	b084      	sub	sp, #16
    3bb8:	af00      	add	r7, sp, #0
    3bba:	0002      	movs	r2, r0
    3bbc:	1dfb      	adds	r3, r7, #7
    3bbe:	701a      	strb	r2, [r3, #0]
    3bc0:	1dbb      	adds	r3, r7, #6
    3bc2:	1c0a      	adds	r2, r1, #0
    3bc4:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3bc6:	4b1a      	ldr	r3, [pc, #104]	; (3c30 <sercom_set_gclk_generator+0x7c>)
    3bc8:	781b      	ldrb	r3, [r3, #0]
    3bca:	2201      	movs	r2, #1
    3bcc:	4053      	eors	r3, r2
    3bce:	b2db      	uxtb	r3, r3
    3bd0:	2b00      	cmp	r3, #0
    3bd2:	d103      	bne.n	3bdc <sercom_set_gclk_generator+0x28>
    3bd4:	1dbb      	adds	r3, r7, #6
    3bd6:	781b      	ldrb	r3, [r3, #0]
    3bd8:	2b00      	cmp	r3, #0
    3bda:	d01b      	beq.n	3c14 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3bdc:	230c      	movs	r3, #12
    3bde:	18fb      	adds	r3, r7, r3
    3be0:	0018      	movs	r0, r3
    3be2:	4b14      	ldr	r3, [pc, #80]	; (3c34 <sercom_set_gclk_generator+0x80>)
    3be4:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    3be6:	230c      	movs	r3, #12
    3be8:	18fb      	adds	r3, r7, r3
    3bea:	1dfa      	adds	r2, r7, #7
    3bec:	7812      	ldrb	r2, [r2, #0]
    3bee:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3bf0:	230c      	movs	r3, #12
    3bf2:	18fb      	adds	r3, r7, r3
    3bf4:	0019      	movs	r1, r3
    3bf6:	2013      	movs	r0, #19
    3bf8:	4b0f      	ldr	r3, [pc, #60]	; (3c38 <sercom_set_gclk_generator+0x84>)
    3bfa:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3bfc:	2013      	movs	r0, #19
    3bfe:	4b0f      	ldr	r3, [pc, #60]	; (3c3c <sercom_set_gclk_generator+0x88>)
    3c00:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    3c02:	4b0b      	ldr	r3, [pc, #44]	; (3c30 <sercom_set_gclk_generator+0x7c>)
    3c04:	1dfa      	adds	r2, r7, #7
    3c06:	7812      	ldrb	r2, [r2, #0]
    3c08:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    3c0a:	4b09      	ldr	r3, [pc, #36]	; (3c30 <sercom_set_gclk_generator+0x7c>)
    3c0c:	2201      	movs	r2, #1
    3c0e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    3c10:	2300      	movs	r3, #0
    3c12:	e008      	b.n	3c26 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    3c14:	4b06      	ldr	r3, [pc, #24]	; (3c30 <sercom_set_gclk_generator+0x7c>)
    3c16:	785b      	ldrb	r3, [r3, #1]
    3c18:	1dfa      	adds	r2, r7, #7
    3c1a:	7812      	ldrb	r2, [r2, #0]
    3c1c:	429a      	cmp	r2, r3
    3c1e:	d101      	bne.n	3c24 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    3c20:	2300      	movs	r3, #0
    3c22:	e000      	b.n	3c26 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3c24:	231d      	movs	r3, #29
}
    3c26:	0018      	movs	r0, r3
    3c28:	46bd      	mov	sp, r7
    3c2a:	b004      	add	sp, #16
    3c2c:	bd80      	pop	{r7, pc}
    3c2e:	46c0      	nop			; (mov r8, r8)
    3c30:	20000180 	.word	0x20000180
    3c34:	00003881 	.word	0x00003881
    3c38:	00006911 	.word	0x00006911
    3c3c:	00006955 	.word	0x00006955

00003c40 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    3c40:	b580      	push	{r7, lr}
    3c42:	b082      	sub	sp, #8
    3c44:	af00      	add	r7, sp, #0
    3c46:	6078      	str	r0, [r7, #4]
    3c48:	000a      	movs	r2, r1
    3c4a:	1cfb      	adds	r3, r7, #3
    3c4c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    3c4e:	687b      	ldr	r3, [r7, #4]
    3c50:	4a4d      	ldr	r2, [pc, #308]	; (3d88 <_sercom_get_default_pad+0x148>)
    3c52:	4293      	cmp	r3, r2
    3c54:	d03f      	beq.n	3cd6 <_sercom_get_default_pad+0x96>
    3c56:	4a4c      	ldr	r2, [pc, #304]	; (3d88 <_sercom_get_default_pad+0x148>)
    3c58:	4293      	cmp	r3, r2
    3c5a:	d806      	bhi.n	3c6a <_sercom_get_default_pad+0x2a>
    3c5c:	4a4b      	ldr	r2, [pc, #300]	; (3d8c <_sercom_get_default_pad+0x14c>)
    3c5e:	4293      	cmp	r3, r2
    3c60:	d00f      	beq.n	3c82 <_sercom_get_default_pad+0x42>
    3c62:	4a4b      	ldr	r2, [pc, #300]	; (3d90 <_sercom_get_default_pad+0x150>)
    3c64:	4293      	cmp	r3, r2
    3c66:	d021      	beq.n	3cac <_sercom_get_default_pad+0x6c>
    3c68:	e089      	b.n	3d7e <_sercom_get_default_pad+0x13e>
    3c6a:	4a4a      	ldr	r2, [pc, #296]	; (3d94 <_sercom_get_default_pad+0x154>)
    3c6c:	4293      	cmp	r3, r2
    3c6e:	d100      	bne.n	3c72 <_sercom_get_default_pad+0x32>
    3c70:	e05b      	b.n	3d2a <_sercom_get_default_pad+0xea>
    3c72:	4a49      	ldr	r2, [pc, #292]	; (3d98 <_sercom_get_default_pad+0x158>)
    3c74:	4293      	cmp	r3, r2
    3c76:	d100      	bne.n	3c7a <_sercom_get_default_pad+0x3a>
    3c78:	e06c      	b.n	3d54 <_sercom_get_default_pad+0x114>
    3c7a:	4a48      	ldr	r2, [pc, #288]	; (3d9c <_sercom_get_default_pad+0x15c>)
    3c7c:	4293      	cmp	r3, r2
    3c7e:	d03f      	beq.n	3d00 <_sercom_get_default_pad+0xc0>
    3c80:	e07d      	b.n	3d7e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3c82:	1cfb      	adds	r3, r7, #3
    3c84:	781b      	ldrb	r3, [r3, #0]
    3c86:	2b01      	cmp	r3, #1
    3c88:	d00a      	beq.n	3ca0 <_sercom_get_default_pad+0x60>
    3c8a:	dc02      	bgt.n	3c92 <_sercom_get_default_pad+0x52>
    3c8c:	2b00      	cmp	r3, #0
    3c8e:	d005      	beq.n	3c9c <_sercom_get_default_pad+0x5c>
    3c90:	e075      	b.n	3d7e <_sercom_get_default_pad+0x13e>
    3c92:	2b02      	cmp	r3, #2
    3c94:	d006      	beq.n	3ca4 <_sercom_get_default_pad+0x64>
    3c96:	2b03      	cmp	r3, #3
    3c98:	d006      	beq.n	3ca8 <_sercom_get_default_pad+0x68>
    3c9a:	e070      	b.n	3d7e <_sercom_get_default_pad+0x13e>
    3c9c:	4b40      	ldr	r3, [pc, #256]	; (3da0 <_sercom_get_default_pad+0x160>)
    3c9e:	e06f      	b.n	3d80 <_sercom_get_default_pad+0x140>
    3ca0:	4b40      	ldr	r3, [pc, #256]	; (3da4 <_sercom_get_default_pad+0x164>)
    3ca2:	e06d      	b.n	3d80 <_sercom_get_default_pad+0x140>
    3ca4:	4b40      	ldr	r3, [pc, #256]	; (3da8 <_sercom_get_default_pad+0x168>)
    3ca6:	e06b      	b.n	3d80 <_sercom_get_default_pad+0x140>
    3ca8:	4b40      	ldr	r3, [pc, #256]	; (3dac <_sercom_get_default_pad+0x16c>)
    3caa:	e069      	b.n	3d80 <_sercom_get_default_pad+0x140>
    3cac:	1cfb      	adds	r3, r7, #3
    3cae:	781b      	ldrb	r3, [r3, #0]
    3cb0:	2b01      	cmp	r3, #1
    3cb2:	d00a      	beq.n	3cca <_sercom_get_default_pad+0x8a>
    3cb4:	dc02      	bgt.n	3cbc <_sercom_get_default_pad+0x7c>
    3cb6:	2b00      	cmp	r3, #0
    3cb8:	d005      	beq.n	3cc6 <_sercom_get_default_pad+0x86>
    3cba:	e060      	b.n	3d7e <_sercom_get_default_pad+0x13e>
    3cbc:	2b02      	cmp	r3, #2
    3cbe:	d006      	beq.n	3cce <_sercom_get_default_pad+0x8e>
    3cc0:	2b03      	cmp	r3, #3
    3cc2:	d006      	beq.n	3cd2 <_sercom_get_default_pad+0x92>
    3cc4:	e05b      	b.n	3d7e <_sercom_get_default_pad+0x13e>
    3cc6:	2303      	movs	r3, #3
    3cc8:	e05a      	b.n	3d80 <_sercom_get_default_pad+0x140>
    3cca:	4b39      	ldr	r3, [pc, #228]	; (3db0 <_sercom_get_default_pad+0x170>)
    3ccc:	e058      	b.n	3d80 <_sercom_get_default_pad+0x140>
    3cce:	4b39      	ldr	r3, [pc, #228]	; (3db4 <_sercom_get_default_pad+0x174>)
    3cd0:	e056      	b.n	3d80 <_sercom_get_default_pad+0x140>
    3cd2:	4b39      	ldr	r3, [pc, #228]	; (3db8 <_sercom_get_default_pad+0x178>)
    3cd4:	e054      	b.n	3d80 <_sercom_get_default_pad+0x140>
    3cd6:	1cfb      	adds	r3, r7, #3
    3cd8:	781b      	ldrb	r3, [r3, #0]
    3cda:	2b01      	cmp	r3, #1
    3cdc:	d00a      	beq.n	3cf4 <_sercom_get_default_pad+0xb4>
    3cde:	dc02      	bgt.n	3ce6 <_sercom_get_default_pad+0xa6>
    3ce0:	2b00      	cmp	r3, #0
    3ce2:	d005      	beq.n	3cf0 <_sercom_get_default_pad+0xb0>
    3ce4:	e04b      	b.n	3d7e <_sercom_get_default_pad+0x13e>
    3ce6:	2b02      	cmp	r3, #2
    3ce8:	d006      	beq.n	3cf8 <_sercom_get_default_pad+0xb8>
    3cea:	2b03      	cmp	r3, #3
    3cec:	d006      	beq.n	3cfc <_sercom_get_default_pad+0xbc>
    3cee:	e046      	b.n	3d7e <_sercom_get_default_pad+0x13e>
    3cf0:	4b32      	ldr	r3, [pc, #200]	; (3dbc <_sercom_get_default_pad+0x17c>)
    3cf2:	e045      	b.n	3d80 <_sercom_get_default_pad+0x140>
    3cf4:	4b32      	ldr	r3, [pc, #200]	; (3dc0 <_sercom_get_default_pad+0x180>)
    3cf6:	e043      	b.n	3d80 <_sercom_get_default_pad+0x140>
    3cf8:	4b32      	ldr	r3, [pc, #200]	; (3dc4 <_sercom_get_default_pad+0x184>)
    3cfa:	e041      	b.n	3d80 <_sercom_get_default_pad+0x140>
    3cfc:	4b32      	ldr	r3, [pc, #200]	; (3dc8 <_sercom_get_default_pad+0x188>)
    3cfe:	e03f      	b.n	3d80 <_sercom_get_default_pad+0x140>
    3d00:	1cfb      	adds	r3, r7, #3
    3d02:	781b      	ldrb	r3, [r3, #0]
    3d04:	2b01      	cmp	r3, #1
    3d06:	d00a      	beq.n	3d1e <_sercom_get_default_pad+0xde>
    3d08:	dc02      	bgt.n	3d10 <_sercom_get_default_pad+0xd0>
    3d0a:	2b00      	cmp	r3, #0
    3d0c:	d005      	beq.n	3d1a <_sercom_get_default_pad+0xda>
    3d0e:	e036      	b.n	3d7e <_sercom_get_default_pad+0x13e>
    3d10:	2b02      	cmp	r3, #2
    3d12:	d006      	beq.n	3d22 <_sercom_get_default_pad+0xe2>
    3d14:	2b03      	cmp	r3, #3
    3d16:	d006      	beq.n	3d26 <_sercom_get_default_pad+0xe6>
    3d18:	e031      	b.n	3d7e <_sercom_get_default_pad+0x13e>
    3d1a:	4b2c      	ldr	r3, [pc, #176]	; (3dcc <_sercom_get_default_pad+0x18c>)
    3d1c:	e030      	b.n	3d80 <_sercom_get_default_pad+0x140>
    3d1e:	4b2c      	ldr	r3, [pc, #176]	; (3dd0 <_sercom_get_default_pad+0x190>)
    3d20:	e02e      	b.n	3d80 <_sercom_get_default_pad+0x140>
    3d22:	4b2c      	ldr	r3, [pc, #176]	; (3dd4 <_sercom_get_default_pad+0x194>)
    3d24:	e02c      	b.n	3d80 <_sercom_get_default_pad+0x140>
    3d26:	4b2c      	ldr	r3, [pc, #176]	; (3dd8 <_sercom_get_default_pad+0x198>)
    3d28:	e02a      	b.n	3d80 <_sercom_get_default_pad+0x140>
    3d2a:	1cfb      	adds	r3, r7, #3
    3d2c:	781b      	ldrb	r3, [r3, #0]
    3d2e:	2b01      	cmp	r3, #1
    3d30:	d00a      	beq.n	3d48 <_sercom_get_default_pad+0x108>
    3d32:	dc02      	bgt.n	3d3a <_sercom_get_default_pad+0xfa>
    3d34:	2b00      	cmp	r3, #0
    3d36:	d005      	beq.n	3d44 <_sercom_get_default_pad+0x104>
    3d38:	e021      	b.n	3d7e <_sercom_get_default_pad+0x13e>
    3d3a:	2b02      	cmp	r3, #2
    3d3c:	d006      	beq.n	3d4c <_sercom_get_default_pad+0x10c>
    3d3e:	2b03      	cmp	r3, #3
    3d40:	d006      	beq.n	3d50 <_sercom_get_default_pad+0x110>
    3d42:	e01c      	b.n	3d7e <_sercom_get_default_pad+0x13e>
    3d44:	4b25      	ldr	r3, [pc, #148]	; (3ddc <_sercom_get_default_pad+0x19c>)
    3d46:	e01b      	b.n	3d80 <_sercom_get_default_pad+0x140>
    3d48:	4b25      	ldr	r3, [pc, #148]	; (3de0 <_sercom_get_default_pad+0x1a0>)
    3d4a:	e019      	b.n	3d80 <_sercom_get_default_pad+0x140>
    3d4c:	4b25      	ldr	r3, [pc, #148]	; (3de4 <_sercom_get_default_pad+0x1a4>)
    3d4e:	e017      	b.n	3d80 <_sercom_get_default_pad+0x140>
    3d50:	4b25      	ldr	r3, [pc, #148]	; (3de8 <_sercom_get_default_pad+0x1a8>)
    3d52:	e015      	b.n	3d80 <_sercom_get_default_pad+0x140>
    3d54:	1cfb      	adds	r3, r7, #3
    3d56:	781b      	ldrb	r3, [r3, #0]
    3d58:	2b01      	cmp	r3, #1
    3d5a:	d00a      	beq.n	3d72 <_sercom_get_default_pad+0x132>
    3d5c:	dc02      	bgt.n	3d64 <_sercom_get_default_pad+0x124>
    3d5e:	2b00      	cmp	r3, #0
    3d60:	d005      	beq.n	3d6e <_sercom_get_default_pad+0x12e>
    3d62:	e00c      	b.n	3d7e <_sercom_get_default_pad+0x13e>
    3d64:	2b02      	cmp	r3, #2
    3d66:	d006      	beq.n	3d76 <_sercom_get_default_pad+0x136>
    3d68:	2b03      	cmp	r3, #3
    3d6a:	d006      	beq.n	3d7a <_sercom_get_default_pad+0x13a>
    3d6c:	e007      	b.n	3d7e <_sercom_get_default_pad+0x13e>
    3d6e:	4b1f      	ldr	r3, [pc, #124]	; (3dec <_sercom_get_default_pad+0x1ac>)
    3d70:	e006      	b.n	3d80 <_sercom_get_default_pad+0x140>
    3d72:	4b1f      	ldr	r3, [pc, #124]	; (3df0 <_sercom_get_default_pad+0x1b0>)
    3d74:	e004      	b.n	3d80 <_sercom_get_default_pad+0x140>
    3d76:	4b1f      	ldr	r3, [pc, #124]	; (3df4 <_sercom_get_default_pad+0x1b4>)
    3d78:	e002      	b.n	3d80 <_sercom_get_default_pad+0x140>
    3d7a:	4b1f      	ldr	r3, [pc, #124]	; (3df8 <_sercom_get_default_pad+0x1b8>)
    3d7c:	e000      	b.n	3d80 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    3d7e:	2300      	movs	r3, #0
}
    3d80:	0018      	movs	r0, r3
    3d82:	46bd      	mov	sp, r7
    3d84:	b002      	add	sp, #8
    3d86:	bd80      	pop	{r7, pc}
    3d88:	42001000 	.word	0x42001000
    3d8c:	42000800 	.word	0x42000800
    3d90:	42000c00 	.word	0x42000c00
    3d94:	42001800 	.word	0x42001800
    3d98:	42001c00 	.word	0x42001c00
    3d9c:	42001400 	.word	0x42001400
    3da0:	00040003 	.word	0x00040003
    3da4:	00050003 	.word	0x00050003
    3da8:	00060003 	.word	0x00060003
    3dac:	00070003 	.word	0x00070003
    3db0:	00010003 	.word	0x00010003
    3db4:	001e0003 	.word	0x001e0003
    3db8:	001f0003 	.word	0x001f0003
    3dbc:	00080003 	.word	0x00080003
    3dc0:	00090003 	.word	0x00090003
    3dc4:	000a0003 	.word	0x000a0003
    3dc8:	000b0003 	.word	0x000b0003
    3dcc:	00100003 	.word	0x00100003
    3dd0:	00110003 	.word	0x00110003
    3dd4:	00120003 	.word	0x00120003
    3dd8:	00130003 	.word	0x00130003
    3ddc:	000c0003 	.word	0x000c0003
    3de0:	000d0003 	.word	0x000d0003
    3de4:	000e0003 	.word	0x000e0003
    3de8:	000f0003 	.word	0x000f0003
    3dec:	00160003 	.word	0x00160003
    3df0:	00170003 	.word	0x00170003
    3df4:	00180003 	.word	0x00180003
    3df8:	00190003 	.word	0x00190003

00003dfc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    3dfc:	b590      	push	{r4, r7, lr}
    3dfe:	b08b      	sub	sp, #44	; 0x2c
    3e00:	af00      	add	r7, sp, #0
    3e02:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3e04:	230c      	movs	r3, #12
    3e06:	18fb      	adds	r3, r7, r3
    3e08:	4a0f      	ldr	r2, [pc, #60]	; (3e48 <_sercom_get_sercom_inst_index+0x4c>)
    3e0a:	ca13      	ldmia	r2!, {r0, r1, r4}
    3e0c:	c313      	stmia	r3!, {r0, r1, r4}
    3e0e:	ca13      	ldmia	r2!, {r0, r1, r4}
    3e10:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3e12:	2300      	movs	r3, #0
    3e14:	627b      	str	r3, [r7, #36]	; 0x24
    3e16:	e00e      	b.n	3e36 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3e18:	230c      	movs	r3, #12
    3e1a:	18fb      	adds	r3, r7, r3
    3e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3e1e:	0092      	lsls	r2, r2, #2
    3e20:	58d3      	ldr	r3, [r2, r3]
    3e22:	001a      	movs	r2, r3
    3e24:	687b      	ldr	r3, [r7, #4]
    3e26:	429a      	cmp	r2, r3
    3e28:	d102      	bne.n	3e30 <_sercom_get_sercom_inst_index+0x34>
			return i;
    3e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e2c:	b2db      	uxtb	r3, r3
    3e2e:	e006      	b.n	3e3e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e32:	3301      	adds	r3, #1
    3e34:	627b      	str	r3, [r7, #36]	; 0x24
    3e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e38:	2b05      	cmp	r3, #5
    3e3a:	d9ed      	bls.n	3e18 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    3e3c:	2300      	movs	r3, #0
}
    3e3e:	0018      	movs	r0, r3
    3e40:	46bd      	mov	sp, r7
    3e42:	b00b      	add	sp, #44	; 0x2c
    3e44:	bd90      	pop	{r4, r7, pc}
    3e46:	46c0      	nop			; (mov r8, r8)
    3e48:	0000cd08 	.word	0x0000cd08

00003e4c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    3e4c:	b580      	push	{r7, lr}
    3e4e:	b082      	sub	sp, #8
    3e50:	af00      	add	r7, sp, #0
    3e52:	0002      	movs	r2, r0
    3e54:	1dfb      	adds	r3, r7, #7
    3e56:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    3e58:	46c0      	nop			; (mov r8, r8)
    3e5a:	46bd      	mov	sp, r7
    3e5c:	b002      	add	sp, #8
    3e5e:	bd80      	pop	{r7, pc}

00003e60 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    3e60:	b580      	push	{r7, lr}
    3e62:	b084      	sub	sp, #16
    3e64:	af00      	add	r7, sp, #0
    3e66:	0002      	movs	r2, r0
    3e68:	6039      	str	r1, [r7, #0]
    3e6a:	1dfb      	adds	r3, r7, #7
    3e6c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    3e6e:	4b13      	ldr	r3, [pc, #76]	; (3ebc <_sercom_set_handler+0x5c>)
    3e70:	781b      	ldrb	r3, [r3, #0]
    3e72:	2201      	movs	r2, #1
    3e74:	4053      	eors	r3, r2
    3e76:	b2db      	uxtb	r3, r3
    3e78:	2b00      	cmp	r3, #0
    3e7a:	d015      	beq.n	3ea8 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3e7c:	2300      	movs	r3, #0
    3e7e:	60fb      	str	r3, [r7, #12]
    3e80:	e00c      	b.n	3e9c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3e82:	4b0f      	ldr	r3, [pc, #60]	; (3ec0 <_sercom_set_handler+0x60>)
    3e84:	68fa      	ldr	r2, [r7, #12]
    3e86:	0092      	lsls	r2, r2, #2
    3e88:	490e      	ldr	r1, [pc, #56]	; (3ec4 <_sercom_set_handler+0x64>)
    3e8a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    3e8c:	4b0e      	ldr	r3, [pc, #56]	; (3ec8 <_sercom_set_handler+0x68>)
    3e8e:	68fa      	ldr	r2, [r7, #12]
    3e90:	0092      	lsls	r2, r2, #2
    3e92:	2100      	movs	r1, #0
    3e94:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3e96:	68fb      	ldr	r3, [r7, #12]
    3e98:	3301      	adds	r3, #1
    3e9a:	60fb      	str	r3, [r7, #12]
    3e9c:	68fb      	ldr	r3, [r7, #12]
    3e9e:	2b05      	cmp	r3, #5
    3ea0:	d9ef      	bls.n	3e82 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    3ea2:	4b06      	ldr	r3, [pc, #24]	; (3ebc <_sercom_set_handler+0x5c>)
    3ea4:	2201      	movs	r2, #1
    3ea6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    3ea8:	1dfb      	adds	r3, r7, #7
    3eaa:	781a      	ldrb	r2, [r3, #0]
    3eac:	4b04      	ldr	r3, [pc, #16]	; (3ec0 <_sercom_set_handler+0x60>)
    3eae:	0092      	lsls	r2, r2, #2
    3eb0:	6839      	ldr	r1, [r7, #0]
    3eb2:	50d1      	str	r1, [r2, r3]
}
    3eb4:	46c0      	nop			; (mov r8, r8)
    3eb6:	46bd      	mov	sp, r7
    3eb8:	b004      	add	sp, #16
    3eba:	bd80      	pop	{r7, pc}
    3ebc:	20000182 	.word	0x20000182
    3ec0:	20000184 	.word	0x20000184
    3ec4:	00003e4d 	.word	0x00003e4d
    3ec8:	20000a10 	.word	0x20000a10

00003ecc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3ecc:	b590      	push	{r4, r7, lr}
    3ece:	b085      	sub	sp, #20
    3ed0:	af00      	add	r7, sp, #0
    3ed2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    3ed4:	2308      	movs	r3, #8
    3ed6:	18fb      	adds	r3, r7, r3
    3ed8:	4a0b      	ldr	r2, [pc, #44]	; (3f08 <_sercom_get_interrupt_vector+0x3c>)
    3eda:	6811      	ldr	r1, [r2, #0]
    3edc:	6019      	str	r1, [r3, #0]
    3ede:	8892      	ldrh	r2, [r2, #4]
    3ee0:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    3ee2:	230f      	movs	r3, #15
    3ee4:	18fc      	adds	r4, r7, r3
    3ee6:	687b      	ldr	r3, [r7, #4]
    3ee8:	0018      	movs	r0, r3
    3eea:	4b08      	ldr	r3, [pc, #32]	; (3f0c <_sercom_get_interrupt_vector+0x40>)
    3eec:	4798      	blx	r3
    3eee:	0003      	movs	r3, r0
    3ef0:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    3ef2:	230f      	movs	r3, #15
    3ef4:	18fb      	adds	r3, r7, r3
    3ef6:	781b      	ldrb	r3, [r3, #0]
    3ef8:	2208      	movs	r2, #8
    3efa:	18ba      	adds	r2, r7, r2
    3efc:	5cd3      	ldrb	r3, [r2, r3]
    3efe:	b25b      	sxtb	r3, r3
}
    3f00:	0018      	movs	r0, r3
    3f02:	46bd      	mov	sp, r7
    3f04:	b005      	add	sp, #20
    3f06:	bd90      	pop	{r4, r7, pc}
    3f08:	0000cd20 	.word	0x0000cd20
    3f0c:	00003dfd 	.word	0x00003dfd

00003f10 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    3f10:	b580      	push	{r7, lr}
    3f12:	af00      	add	r7, sp, #0
    3f14:	4b03      	ldr	r3, [pc, #12]	; (3f24 <SERCOM0_Handler+0x14>)
    3f16:	681b      	ldr	r3, [r3, #0]
    3f18:	2000      	movs	r0, #0
    3f1a:	4798      	blx	r3
    3f1c:	46c0      	nop			; (mov r8, r8)
    3f1e:	46bd      	mov	sp, r7
    3f20:	bd80      	pop	{r7, pc}
    3f22:	46c0      	nop			; (mov r8, r8)
    3f24:	20000184 	.word	0x20000184

00003f28 <SERCOM1_Handler>:
    3f28:	b580      	push	{r7, lr}
    3f2a:	af00      	add	r7, sp, #0
    3f2c:	4b03      	ldr	r3, [pc, #12]	; (3f3c <SERCOM1_Handler+0x14>)
    3f2e:	685b      	ldr	r3, [r3, #4]
    3f30:	2001      	movs	r0, #1
    3f32:	4798      	blx	r3
    3f34:	46c0      	nop			; (mov r8, r8)
    3f36:	46bd      	mov	sp, r7
    3f38:	bd80      	pop	{r7, pc}
    3f3a:	46c0      	nop			; (mov r8, r8)
    3f3c:	20000184 	.word	0x20000184

00003f40 <SERCOM2_Handler>:
    3f40:	b580      	push	{r7, lr}
    3f42:	af00      	add	r7, sp, #0
    3f44:	4b03      	ldr	r3, [pc, #12]	; (3f54 <SERCOM2_Handler+0x14>)
    3f46:	689b      	ldr	r3, [r3, #8]
    3f48:	2002      	movs	r0, #2
    3f4a:	4798      	blx	r3
    3f4c:	46c0      	nop			; (mov r8, r8)
    3f4e:	46bd      	mov	sp, r7
    3f50:	bd80      	pop	{r7, pc}
    3f52:	46c0      	nop			; (mov r8, r8)
    3f54:	20000184 	.word	0x20000184

00003f58 <SERCOM3_Handler>:
    3f58:	b580      	push	{r7, lr}
    3f5a:	af00      	add	r7, sp, #0
    3f5c:	4b03      	ldr	r3, [pc, #12]	; (3f6c <SERCOM3_Handler+0x14>)
    3f5e:	68db      	ldr	r3, [r3, #12]
    3f60:	2003      	movs	r0, #3
    3f62:	4798      	blx	r3
    3f64:	46c0      	nop			; (mov r8, r8)
    3f66:	46bd      	mov	sp, r7
    3f68:	bd80      	pop	{r7, pc}
    3f6a:	46c0      	nop			; (mov r8, r8)
    3f6c:	20000184 	.word	0x20000184

00003f70 <SERCOM4_Handler>:
    3f70:	b580      	push	{r7, lr}
    3f72:	af00      	add	r7, sp, #0
    3f74:	4b03      	ldr	r3, [pc, #12]	; (3f84 <SERCOM4_Handler+0x14>)
    3f76:	691b      	ldr	r3, [r3, #16]
    3f78:	2004      	movs	r0, #4
    3f7a:	4798      	blx	r3
    3f7c:	46c0      	nop			; (mov r8, r8)
    3f7e:	46bd      	mov	sp, r7
    3f80:	bd80      	pop	{r7, pc}
    3f82:	46c0      	nop			; (mov r8, r8)
    3f84:	20000184 	.word	0x20000184

00003f88 <SERCOM5_Handler>:
    3f88:	b580      	push	{r7, lr}
    3f8a:	af00      	add	r7, sp, #0
    3f8c:	4b03      	ldr	r3, [pc, #12]	; (3f9c <SERCOM5_Handler+0x14>)
    3f8e:	695b      	ldr	r3, [r3, #20]
    3f90:	2005      	movs	r0, #5
    3f92:	4798      	blx	r3
    3f94:	46c0      	nop			; (mov r8, r8)
    3f96:	46bd      	mov	sp, r7
    3f98:	bd80      	pop	{r7, pc}
    3f9a:	46c0      	nop			; (mov r8, r8)
    3f9c:	20000184 	.word	0x20000184

00003fa0 <system_pinmux_get_config_defaults>:
{
    3fa0:	b580      	push	{r7, lr}
    3fa2:	b082      	sub	sp, #8
    3fa4:	af00      	add	r7, sp, #0
    3fa6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3fa8:	687b      	ldr	r3, [r7, #4]
    3faa:	2280      	movs	r2, #128	; 0x80
    3fac:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3fae:	687b      	ldr	r3, [r7, #4]
    3fb0:	2200      	movs	r2, #0
    3fb2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3fb4:	687b      	ldr	r3, [r7, #4]
    3fb6:	2201      	movs	r2, #1
    3fb8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3fba:	687b      	ldr	r3, [r7, #4]
    3fbc:	2200      	movs	r2, #0
    3fbe:	70da      	strb	r2, [r3, #3]
}
    3fc0:	46c0      	nop			; (mov r8, r8)
    3fc2:	46bd      	mov	sp, r7
    3fc4:	b002      	add	sp, #8
    3fc6:	bd80      	pop	{r7, pc}

00003fc8 <system_pinmux_get_group_from_gpio_pin>:
{
    3fc8:	b580      	push	{r7, lr}
    3fca:	b084      	sub	sp, #16
    3fcc:	af00      	add	r7, sp, #0
    3fce:	0002      	movs	r2, r0
    3fd0:	1dfb      	adds	r3, r7, #7
    3fd2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3fd4:	230f      	movs	r3, #15
    3fd6:	18fb      	adds	r3, r7, r3
    3fd8:	1dfa      	adds	r2, r7, #7
    3fda:	7812      	ldrb	r2, [r2, #0]
    3fdc:	09d2      	lsrs	r2, r2, #7
    3fde:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3fe0:	230e      	movs	r3, #14
    3fe2:	18fb      	adds	r3, r7, r3
    3fe4:	1dfa      	adds	r2, r7, #7
    3fe6:	7812      	ldrb	r2, [r2, #0]
    3fe8:	0952      	lsrs	r2, r2, #5
    3fea:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3fec:	4b0d      	ldr	r3, [pc, #52]	; (4024 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3fee:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3ff0:	230f      	movs	r3, #15
    3ff2:	18fb      	adds	r3, r7, r3
    3ff4:	781b      	ldrb	r3, [r3, #0]
    3ff6:	2b00      	cmp	r3, #0
    3ff8:	d10f      	bne.n	401a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3ffa:	230f      	movs	r3, #15
    3ffc:	18fb      	adds	r3, r7, r3
    3ffe:	781b      	ldrb	r3, [r3, #0]
    4000:	009b      	lsls	r3, r3, #2
    4002:	2210      	movs	r2, #16
    4004:	4694      	mov	ip, r2
    4006:	44bc      	add	ip, r7
    4008:	4463      	add	r3, ip
    400a:	3b08      	subs	r3, #8
    400c:	681a      	ldr	r2, [r3, #0]
    400e:	230e      	movs	r3, #14
    4010:	18fb      	adds	r3, r7, r3
    4012:	781b      	ldrb	r3, [r3, #0]
    4014:	01db      	lsls	r3, r3, #7
    4016:	18d3      	adds	r3, r2, r3
    4018:	e000      	b.n	401c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    401a:	2300      	movs	r3, #0
}
    401c:	0018      	movs	r0, r3
    401e:	46bd      	mov	sp, r7
    4020:	b004      	add	sp, #16
    4022:	bd80      	pop	{r7, pc}
    4024:	41004400 	.word	0x41004400

00004028 <port_get_group_from_gpio_pin>:
{
    4028:	b580      	push	{r7, lr}
    402a:	b082      	sub	sp, #8
    402c:	af00      	add	r7, sp, #0
    402e:	0002      	movs	r2, r0
    4030:	1dfb      	adds	r3, r7, #7
    4032:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4034:	1dfb      	adds	r3, r7, #7
    4036:	781b      	ldrb	r3, [r3, #0]
    4038:	0018      	movs	r0, r3
    403a:	4b03      	ldr	r3, [pc, #12]	; (4048 <port_get_group_from_gpio_pin+0x20>)
    403c:	4798      	blx	r3
    403e:	0003      	movs	r3, r0
}
    4040:	0018      	movs	r0, r3
    4042:	46bd      	mov	sp, r7
    4044:	b002      	add	sp, #8
    4046:	bd80      	pop	{r7, pc}
    4048:	00003fc9 	.word	0x00003fc9

0000404c <port_pin_set_output_level>:
{
    404c:	b580      	push	{r7, lr}
    404e:	b084      	sub	sp, #16
    4050:	af00      	add	r7, sp, #0
    4052:	0002      	movs	r2, r0
    4054:	1dfb      	adds	r3, r7, #7
    4056:	701a      	strb	r2, [r3, #0]
    4058:	1dbb      	adds	r3, r7, #6
    405a:	1c0a      	adds	r2, r1, #0
    405c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    405e:	1dfb      	adds	r3, r7, #7
    4060:	781b      	ldrb	r3, [r3, #0]
    4062:	0018      	movs	r0, r3
    4064:	4b0d      	ldr	r3, [pc, #52]	; (409c <port_pin_set_output_level+0x50>)
    4066:	4798      	blx	r3
    4068:	0003      	movs	r3, r0
    406a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    406c:	1dfb      	adds	r3, r7, #7
    406e:	781b      	ldrb	r3, [r3, #0]
    4070:	221f      	movs	r2, #31
    4072:	4013      	ands	r3, r2
    4074:	2201      	movs	r2, #1
    4076:	409a      	lsls	r2, r3
    4078:	0013      	movs	r3, r2
    407a:	60bb      	str	r3, [r7, #8]
	if (level) {
    407c:	1dbb      	adds	r3, r7, #6
    407e:	781b      	ldrb	r3, [r3, #0]
    4080:	2b00      	cmp	r3, #0
    4082:	d003      	beq.n	408c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    4084:	68fb      	ldr	r3, [r7, #12]
    4086:	68ba      	ldr	r2, [r7, #8]
    4088:	619a      	str	r2, [r3, #24]
}
    408a:	e002      	b.n	4092 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    408c:	68fb      	ldr	r3, [r7, #12]
    408e:	68ba      	ldr	r2, [r7, #8]
    4090:	615a      	str	r2, [r3, #20]
}
    4092:	46c0      	nop			; (mov r8, r8)
    4094:	46bd      	mov	sp, r7
    4096:	b004      	add	sp, #16
    4098:	bd80      	pop	{r7, pc}
    409a:	46c0      	nop			; (mov r8, r8)
    409c:	00004029 	.word	0x00004029

000040a0 <system_gclk_chan_get_config_defaults>:
{
    40a0:	b580      	push	{r7, lr}
    40a2:	b082      	sub	sp, #8
    40a4:	af00      	add	r7, sp, #0
    40a6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    40a8:	687b      	ldr	r3, [r7, #4]
    40aa:	2200      	movs	r2, #0
    40ac:	701a      	strb	r2, [r3, #0]
}
    40ae:	46c0      	nop			; (mov r8, r8)
    40b0:	46bd      	mov	sp, r7
    40b2:	b002      	add	sp, #8
    40b4:	bd80      	pop	{r7, pc}
	...

000040b8 <system_apb_clock_set_mask>:
{
    40b8:	b580      	push	{r7, lr}
    40ba:	b082      	sub	sp, #8
    40bc:	af00      	add	r7, sp, #0
    40be:	0002      	movs	r2, r0
    40c0:	6039      	str	r1, [r7, #0]
    40c2:	1dfb      	adds	r3, r7, #7
    40c4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    40c6:	1dfb      	adds	r3, r7, #7
    40c8:	781b      	ldrb	r3, [r3, #0]
    40ca:	2b01      	cmp	r3, #1
    40cc:	d00a      	beq.n	40e4 <system_apb_clock_set_mask+0x2c>
    40ce:	2b02      	cmp	r3, #2
    40d0:	d00f      	beq.n	40f2 <system_apb_clock_set_mask+0x3a>
    40d2:	2b00      	cmp	r3, #0
    40d4:	d114      	bne.n	4100 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    40d6:	4b0e      	ldr	r3, [pc, #56]	; (4110 <system_apb_clock_set_mask+0x58>)
    40d8:	4a0d      	ldr	r2, [pc, #52]	; (4110 <system_apb_clock_set_mask+0x58>)
    40da:	6991      	ldr	r1, [r2, #24]
    40dc:	683a      	ldr	r2, [r7, #0]
    40de:	430a      	orrs	r2, r1
    40e0:	619a      	str	r2, [r3, #24]
			break;
    40e2:	e00f      	b.n	4104 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    40e4:	4b0a      	ldr	r3, [pc, #40]	; (4110 <system_apb_clock_set_mask+0x58>)
    40e6:	4a0a      	ldr	r2, [pc, #40]	; (4110 <system_apb_clock_set_mask+0x58>)
    40e8:	69d1      	ldr	r1, [r2, #28]
    40ea:	683a      	ldr	r2, [r7, #0]
    40ec:	430a      	orrs	r2, r1
    40ee:	61da      	str	r2, [r3, #28]
			break;
    40f0:	e008      	b.n	4104 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    40f2:	4b07      	ldr	r3, [pc, #28]	; (4110 <system_apb_clock_set_mask+0x58>)
    40f4:	4a06      	ldr	r2, [pc, #24]	; (4110 <system_apb_clock_set_mask+0x58>)
    40f6:	6a11      	ldr	r1, [r2, #32]
    40f8:	683a      	ldr	r2, [r7, #0]
    40fa:	430a      	orrs	r2, r1
    40fc:	621a      	str	r2, [r3, #32]
			break;
    40fe:	e001      	b.n	4104 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4100:	2317      	movs	r3, #23
    4102:	e000      	b.n	4106 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4104:	2300      	movs	r3, #0
}
    4106:	0018      	movs	r0, r3
    4108:	46bd      	mov	sp, r7
    410a:	b002      	add	sp, #8
    410c:	bd80      	pop	{r7, pc}
    410e:	46c0      	nop			; (mov r8, r8)
    4110:	40000400 	.word	0x40000400

00004114 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    4114:	b580      	push	{r7, lr}
    4116:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4118:	4b05      	ldr	r3, [pc, #20]	; (4130 <system_is_debugger_present+0x1c>)
    411a:	789b      	ldrb	r3, [r3, #2]
    411c:	b2db      	uxtb	r3, r3
    411e:	001a      	movs	r2, r3
    4120:	2302      	movs	r3, #2
    4122:	4013      	ands	r3, r2
    4124:	1e5a      	subs	r2, r3, #1
    4126:	4193      	sbcs	r3, r2
    4128:	b2db      	uxtb	r3, r3
}
    412a:	0018      	movs	r0, r3
    412c:	46bd      	mov	sp, r7
    412e:	bd80      	pop	{r7, pc}
    4130:	41002000 	.word	0x41002000

00004134 <system_interrupt_enable>:
{
    4134:	b580      	push	{r7, lr}
    4136:	b082      	sub	sp, #8
    4138:	af00      	add	r7, sp, #0
    413a:	0002      	movs	r2, r0
    413c:	1dfb      	adds	r3, r7, #7
    413e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4140:	4b06      	ldr	r3, [pc, #24]	; (415c <system_interrupt_enable+0x28>)
    4142:	1dfa      	adds	r2, r7, #7
    4144:	7812      	ldrb	r2, [r2, #0]
    4146:	0011      	movs	r1, r2
    4148:	221f      	movs	r2, #31
    414a:	400a      	ands	r2, r1
    414c:	2101      	movs	r1, #1
    414e:	4091      	lsls	r1, r2
    4150:	000a      	movs	r2, r1
    4152:	601a      	str	r2, [r3, #0]
}
    4154:	46c0      	nop			; (mov r8, r8)
    4156:	46bd      	mov	sp, r7
    4158:	b002      	add	sp, #8
    415a:	bd80      	pop	{r7, pc}
    415c:	e000e100 	.word	0xe000e100

00004160 <system_interrupt_disable>:
{
    4160:	b580      	push	{r7, lr}
    4162:	b082      	sub	sp, #8
    4164:	af00      	add	r7, sp, #0
    4166:	0002      	movs	r2, r0
    4168:	1dfb      	adds	r3, r7, #7
    416a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    416c:	4a07      	ldr	r2, [pc, #28]	; (418c <system_interrupt_disable+0x2c>)
    416e:	1dfb      	adds	r3, r7, #7
    4170:	781b      	ldrb	r3, [r3, #0]
    4172:	0019      	movs	r1, r3
    4174:	231f      	movs	r3, #31
    4176:	400b      	ands	r3, r1
    4178:	2101      	movs	r1, #1
    417a:	4099      	lsls	r1, r3
    417c:	000b      	movs	r3, r1
    417e:	0019      	movs	r1, r3
    4180:	2380      	movs	r3, #128	; 0x80
    4182:	50d1      	str	r1, [r2, r3]
}
    4184:	46c0      	nop			; (mov r8, r8)
    4186:	46bd      	mov	sp, r7
    4188:	b002      	add	sp, #8
    418a:	bd80      	pop	{r7, pc}
    418c:	e000e100 	.word	0xe000e100

00004190 <spi_is_syncing>:
{
    4190:	b580      	push	{r7, lr}
    4192:	b084      	sub	sp, #16
    4194:	af00      	add	r7, sp, #0
    4196:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4198:	687b      	ldr	r3, [r7, #4]
    419a:	681b      	ldr	r3, [r3, #0]
    419c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    419e:	68fb      	ldr	r3, [r7, #12]
    41a0:	69db      	ldr	r3, [r3, #28]
    41a2:	1e5a      	subs	r2, r3, #1
    41a4:	4193      	sbcs	r3, r2
    41a6:	b2db      	uxtb	r3, r3
}
    41a8:	0018      	movs	r0, r3
    41aa:	46bd      	mov	sp, r7
    41ac:	b004      	add	sp, #16
    41ae:	bd80      	pop	{r7, pc}

000041b0 <spi_enable>:
{
    41b0:	b580      	push	{r7, lr}
    41b2:	b084      	sub	sp, #16
    41b4:	af00      	add	r7, sp, #0
    41b6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    41b8:	687b      	ldr	r3, [r7, #4]
    41ba:	681b      	ldr	r3, [r3, #0]
    41bc:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    41be:	687b      	ldr	r3, [r7, #4]
    41c0:	681b      	ldr	r3, [r3, #0]
    41c2:	0018      	movs	r0, r3
    41c4:	4b0b      	ldr	r3, [pc, #44]	; (41f4 <spi_enable+0x44>)
    41c6:	4798      	blx	r3
    41c8:	0003      	movs	r3, r0
    41ca:	0018      	movs	r0, r3
    41cc:	4b0a      	ldr	r3, [pc, #40]	; (41f8 <spi_enable+0x48>)
    41ce:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    41d0:	46c0      	nop			; (mov r8, r8)
    41d2:	687b      	ldr	r3, [r7, #4]
    41d4:	0018      	movs	r0, r3
    41d6:	4b09      	ldr	r3, [pc, #36]	; (41fc <spi_enable+0x4c>)
    41d8:	4798      	blx	r3
    41da:	1e03      	subs	r3, r0, #0
    41dc:	d1f9      	bne.n	41d2 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    41de:	68fb      	ldr	r3, [r7, #12]
    41e0:	681b      	ldr	r3, [r3, #0]
    41e2:	2202      	movs	r2, #2
    41e4:	431a      	orrs	r2, r3
    41e6:	68fb      	ldr	r3, [r7, #12]
    41e8:	601a      	str	r2, [r3, #0]
}
    41ea:	46c0      	nop			; (mov r8, r8)
    41ec:	46bd      	mov	sp, r7
    41ee:	b004      	add	sp, #16
    41f0:	bd80      	pop	{r7, pc}
    41f2:	46c0      	nop			; (mov r8, r8)
    41f4:	00003ecd 	.word	0x00003ecd
    41f8:	00004135 	.word	0x00004135
    41fc:	00004191 	.word	0x00004191

00004200 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    4200:	b580      	push	{r7, lr}
    4202:	b084      	sub	sp, #16
    4204:	af00      	add	r7, sp, #0
    4206:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4208:	687b      	ldr	r3, [r7, #4]
    420a:	681b      	ldr	r3, [r3, #0]
    420c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    420e:	687b      	ldr	r3, [r7, #4]
    4210:	681b      	ldr	r3, [r3, #0]
    4212:	0018      	movs	r0, r3
    4214:	4b0e      	ldr	r3, [pc, #56]	; (4250 <spi_disable+0x50>)
    4216:	4798      	blx	r3
    4218:	0003      	movs	r3, r0
    421a:	0018      	movs	r0, r3
    421c:	4b0d      	ldr	r3, [pc, #52]	; (4254 <spi_disable+0x54>)
    421e:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    4220:	46c0      	nop			; (mov r8, r8)
    4222:	687b      	ldr	r3, [r7, #4]
    4224:	0018      	movs	r0, r3
    4226:	4b0c      	ldr	r3, [pc, #48]	; (4258 <spi_disable+0x58>)
    4228:	4798      	blx	r3
    422a:	1e03      	subs	r3, r0, #0
    422c:	d1f9      	bne.n	4222 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    422e:	68fb      	ldr	r3, [r7, #12]
    4230:	228f      	movs	r2, #143	; 0x8f
    4232:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    4234:	68fb      	ldr	r3, [r7, #12]
    4236:	228f      	movs	r2, #143	; 0x8f
    4238:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    423a:	68fb      	ldr	r3, [r7, #12]
    423c:	681b      	ldr	r3, [r3, #0]
    423e:	2202      	movs	r2, #2
    4240:	4393      	bics	r3, r2
    4242:	001a      	movs	r2, r3
    4244:	68fb      	ldr	r3, [r7, #12]
    4246:	601a      	str	r2, [r3, #0]
}
    4248:	46c0      	nop			; (mov r8, r8)
    424a:	46bd      	mov	sp, r7
    424c:	b004      	add	sp, #16
    424e:	bd80      	pop	{r7, pc}
    4250:	00003ecd 	.word	0x00003ecd
    4254:	00004161 	.word	0x00004161
    4258:	00004191 	.word	0x00004191

0000425c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    425c:	b580      	push	{r7, lr}
    425e:	b084      	sub	sp, #16
    4260:	af00      	add	r7, sp, #0
    4262:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4264:	687b      	ldr	r3, [r7, #4]
    4266:	681b      	ldr	r3, [r3, #0]
    4268:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    426a:	68fb      	ldr	r3, [r7, #12]
    426c:	7e1b      	ldrb	r3, [r3, #24]
    426e:	b2db      	uxtb	r3, r3
    4270:	001a      	movs	r2, r3
    4272:	2302      	movs	r3, #2
    4274:	4013      	ands	r3, r2
    4276:	1e5a      	subs	r2, r3, #1
    4278:	4193      	sbcs	r3, r2
    427a:	b2db      	uxtb	r3, r3
}
    427c:	0018      	movs	r0, r3
    427e:	46bd      	mov	sp, r7
    4280:	b004      	add	sp, #16
    4282:	bd80      	pop	{r7, pc}

00004284 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    4284:	b580      	push	{r7, lr}
    4286:	b084      	sub	sp, #16
    4288:	af00      	add	r7, sp, #0
    428a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    428c:	687b      	ldr	r3, [r7, #4]
    428e:	681b      	ldr	r3, [r3, #0]
    4290:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4292:	68fb      	ldr	r3, [r7, #12]
    4294:	7e1b      	ldrb	r3, [r3, #24]
    4296:	b2db      	uxtb	r3, r3
    4298:	001a      	movs	r2, r3
    429a:	2301      	movs	r3, #1
    429c:	4013      	ands	r3, r2
    429e:	1e5a      	subs	r2, r3, #1
    42a0:	4193      	sbcs	r3, r2
    42a2:	b2db      	uxtb	r3, r3
}
    42a4:	0018      	movs	r0, r3
    42a6:	46bd      	mov	sp, r7
    42a8:	b004      	add	sp, #16
    42aa:	bd80      	pop	{r7, pc}

000042ac <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    42ac:	b580      	push	{r7, lr}
    42ae:	b084      	sub	sp, #16
    42b0:	af00      	add	r7, sp, #0
    42b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    42b4:	687b      	ldr	r3, [r7, #4]
    42b6:	681b      	ldr	r3, [r3, #0]
    42b8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    42ba:	68fb      	ldr	r3, [r7, #12]
    42bc:	7e1b      	ldrb	r3, [r3, #24]
    42be:	b2db      	uxtb	r3, r3
    42c0:	001a      	movs	r2, r3
    42c2:	2304      	movs	r3, #4
    42c4:	4013      	ands	r3, r2
    42c6:	1e5a      	subs	r2, r3, #1
    42c8:	4193      	sbcs	r3, r2
    42ca:	b2db      	uxtb	r3, r3
}
    42cc:	0018      	movs	r0, r3
    42ce:	46bd      	mov	sp, r7
    42d0:	b004      	add	sp, #16
    42d2:	bd80      	pop	{r7, pc}

000042d4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    42d4:	b580      	push	{r7, lr}
    42d6:	b084      	sub	sp, #16
    42d8:	af00      	add	r7, sp, #0
    42da:	6078      	str	r0, [r7, #4]
    42dc:	000a      	movs	r2, r1
    42de:	1cbb      	adds	r3, r7, #2
    42e0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    42e2:	687b      	ldr	r3, [r7, #4]
    42e4:	681b      	ldr	r3, [r3, #0]
    42e6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    42e8:	687b      	ldr	r3, [r7, #4]
    42ea:	0018      	movs	r0, r3
    42ec:	4b0a      	ldr	r3, [pc, #40]	; (4318 <spi_write+0x44>)
    42ee:	4798      	blx	r3
    42f0:	0003      	movs	r3, r0
    42f2:	001a      	movs	r2, r3
    42f4:	2301      	movs	r3, #1
    42f6:	4053      	eors	r3, r2
    42f8:	b2db      	uxtb	r3, r3
    42fa:	2b00      	cmp	r3, #0
    42fc:	d001      	beq.n	4302 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    42fe:	2305      	movs	r3, #5
    4300:	e006      	b.n	4310 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4302:	1cbb      	adds	r3, r7, #2
    4304:	881b      	ldrh	r3, [r3, #0]
    4306:	05db      	lsls	r3, r3, #23
    4308:	0dda      	lsrs	r2, r3, #23
    430a:	68fb      	ldr	r3, [r7, #12]
    430c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    430e:	2300      	movs	r3, #0
}
    4310:	0018      	movs	r0, r3
    4312:	46bd      	mov	sp, r7
    4314:	b004      	add	sp, #16
    4316:	bd80      	pop	{r7, pc}
    4318:	00004285 	.word	0x00004285

0000431c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    431c:	b580      	push	{r7, lr}
    431e:	b084      	sub	sp, #16
    4320:	af00      	add	r7, sp, #0
    4322:	6078      	str	r0, [r7, #4]
    4324:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4326:	687b      	ldr	r3, [r7, #4]
    4328:	681b      	ldr	r3, [r3, #0]
    432a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    432c:	687b      	ldr	r3, [r7, #4]
    432e:	0018      	movs	r0, r3
    4330:	4b1b      	ldr	r3, [pc, #108]	; (43a0 <spi_read+0x84>)
    4332:	4798      	blx	r3
    4334:	0003      	movs	r3, r0
    4336:	001a      	movs	r2, r3
    4338:	2301      	movs	r3, #1
    433a:	4053      	eors	r3, r2
    433c:	b2db      	uxtb	r3, r3
    433e:	2b00      	cmp	r3, #0
    4340:	d001      	beq.n	4346 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    4342:	2310      	movs	r3, #16
    4344:	e027      	b.n	4396 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    4346:	230f      	movs	r3, #15
    4348:	18fb      	adds	r3, r7, r3
    434a:	2200      	movs	r2, #0
    434c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    434e:	68bb      	ldr	r3, [r7, #8]
    4350:	8b5b      	ldrh	r3, [r3, #26]
    4352:	b29b      	uxth	r3, r3
    4354:	001a      	movs	r2, r3
    4356:	2304      	movs	r3, #4
    4358:	4013      	ands	r3, r2
    435a:	d006      	beq.n	436a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    435c:	230f      	movs	r3, #15
    435e:	18fb      	adds	r3, r7, r3
    4360:	221e      	movs	r2, #30
    4362:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4364:	68bb      	ldr	r3, [r7, #8]
    4366:	2204      	movs	r2, #4
    4368:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    436a:	687b      	ldr	r3, [r7, #4]
    436c:	799b      	ldrb	r3, [r3, #6]
    436e:	2b01      	cmp	r3, #1
    4370:	d108      	bne.n	4384 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4372:	68bb      	ldr	r3, [r7, #8]
    4374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4376:	b29b      	uxth	r3, r3
    4378:	05db      	lsls	r3, r3, #23
    437a:	0ddb      	lsrs	r3, r3, #23
    437c:	b29a      	uxth	r2, r3
    437e:	683b      	ldr	r3, [r7, #0]
    4380:	801a      	strh	r2, [r3, #0]
    4382:	e005      	b.n	4390 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4384:	68bb      	ldr	r3, [r7, #8]
    4386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4388:	b2db      	uxtb	r3, r3
    438a:	b29a      	uxth	r2, r3
    438c:	683b      	ldr	r3, [r7, #0]
    438e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    4390:	230f      	movs	r3, #15
    4392:	18fb      	adds	r3, r7, r3
    4394:	781b      	ldrb	r3, [r3, #0]
}
    4396:	0018      	movs	r0, r3
    4398:	46bd      	mov	sp, r7
    439a:	b004      	add	sp, #16
    439c:	bd80      	pop	{r7, pc}
    439e:	46c0      	nop			; (mov r8, r8)
    43a0:	000042ad 	.word	0x000042ad

000043a4 <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    43a4:	b580      	push	{r7, lr}
    43a6:	b084      	sub	sp, #16
    43a8:	af00      	add	r7, sp, #0
    43aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    43ac:	687b      	ldr	r3, [r7, #4]
    43ae:	681b      	ldr	r3, [r3, #0]
    43b0:	60fb      	str	r3, [r7, #12]

	/* Disable the module */
	spi_disable(module);
    43b2:	687b      	ldr	r3, [r7, #4]
    43b4:	0018      	movs	r0, r3
    43b6:	4b09      	ldr	r3, [pc, #36]	; (43dc <spi_reset+0x38>)
    43b8:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    43ba:	46c0      	nop			; (mov r8, r8)
    43bc:	687b      	ldr	r3, [r7, #4]
    43be:	0018      	movs	r0, r3
    43c0:	4b07      	ldr	r3, [pc, #28]	; (43e0 <spi_reset+0x3c>)
    43c2:	4798      	blx	r3
    43c4:	1e03      	subs	r3, r0, #0
    43c6:	d1f9      	bne.n	43bc <spi_reset+0x18>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    43c8:	68fb      	ldr	r3, [r7, #12]
    43ca:	681b      	ldr	r3, [r3, #0]
    43cc:	2201      	movs	r2, #1
    43ce:	431a      	orrs	r2, r3
    43d0:	68fb      	ldr	r3, [r7, #12]
    43d2:	601a      	str	r2, [r3, #0]
}
    43d4:	46c0      	nop			; (mov r8, r8)
    43d6:	46bd      	mov	sp, r7
    43d8:	b004      	add	sp, #16
    43da:	bd80      	pop	{r7, pc}
    43dc:	00004201 	.word	0x00004201
    43e0:	00004191 	.word	0x00004191

000043e4 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    43e4:	b590      	push	{r4, r7, lr}
    43e6:	b089      	sub	sp, #36	; 0x24
    43e8:	af00      	add	r7, sp, #0
    43ea:	6078      	str	r0, [r7, #4]
    43ec:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    43ee:	230c      	movs	r3, #12
    43f0:	18fb      	adds	r3, r7, r3
    43f2:	2200      	movs	r2, #0
    43f4:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    43f6:	687b      	ldr	r3, [r7, #4]
    43f8:	681b      	ldr	r3, [r3, #0]
    43fa:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
    43fc:	687b      	ldr	r3, [r7, #4]
    43fe:	0018      	movs	r0, r3
    4400:	4b24      	ldr	r3, [pc, #144]	; (4494 <spi_set_baudrate+0xb0>)
    4402:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    4404:	46c0      	nop			; (mov r8, r8)
    4406:	687b      	ldr	r3, [r7, #4]
    4408:	0018      	movs	r0, r3
    440a:	4b23      	ldr	r3, [pc, #140]	; (4498 <spi_set_baudrate+0xb4>)
    440c:	4798      	blx	r3
    440e:	1e03      	subs	r3, r0, #0
    4410:	d1f9      	bne.n	4406 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4412:	687b      	ldr	r3, [r7, #4]
    4414:	681b      	ldr	r3, [r3, #0]
    4416:	0018      	movs	r0, r3
    4418:	4b20      	ldr	r3, [pc, #128]	; (449c <spi_set_baudrate+0xb8>)
    441a:	4798      	blx	r3
    441c:	0003      	movs	r3, r0
    441e:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4420:	69bb      	ldr	r3, [r7, #24]
    4422:	3314      	adds	r3, #20
    4424:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4426:	697b      	ldr	r3, [r7, #20]
    4428:	b2db      	uxtb	r3, r3
    442a:	0018      	movs	r0, r3
    442c:	4b1c      	ldr	r3, [pc, #112]	; (44a0 <spi_set_baudrate+0xbc>)
    442e:	4798      	blx	r3
    4430:	0003      	movs	r3, r0
    4432:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    4434:	230f      	movs	r3, #15
    4436:	18fc      	adds	r4, r7, r3
    4438:	230c      	movs	r3, #12
    443a:	18fa      	adds	r2, r7, r3
    443c:	6939      	ldr	r1, [r7, #16]
    443e:	683b      	ldr	r3, [r7, #0]
    4440:	0018      	movs	r0, r3
    4442:	4b18      	ldr	r3, [pc, #96]	; (44a4 <spi_set_baudrate+0xc0>)
    4444:	4798      	blx	r3
    4446:	0003      	movs	r3, r0
    4448:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    444a:	230f      	movs	r3, #15
    444c:	18fb      	adds	r3, r7, r3
    444e:	781b      	ldrb	r3, [r3, #0]
    4450:	2b00      	cmp	r3, #0
    4452:	d001      	beq.n	4458 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    4454:	2317      	movs	r3, #23
    4456:	e018      	b.n	448a <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
    4458:	230c      	movs	r3, #12
    445a:	18fb      	adds	r3, r7, r3
    445c:	881b      	ldrh	r3, [r3, #0]
    445e:	b2da      	uxtb	r2, r3
    4460:	69fb      	ldr	r3, [r7, #28]
    4462:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
    4464:	46c0      	nop			; (mov r8, r8)
    4466:	687b      	ldr	r3, [r7, #4]
    4468:	0018      	movs	r0, r3
    446a:	4b0b      	ldr	r3, [pc, #44]	; (4498 <spi_set_baudrate+0xb4>)
    446c:	4798      	blx	r3
    446e:	1e03      	subs	r3, r0, #0
    4470:	d1f9      	bne.n	4466 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
    4472:	687b      	ldr	r3, [r7, #4]
    4474:	0018      	movs	r0, r3
    4476:	4b0c      	ldr	r3, [pc, #48]	; (44a8 <spi_set_baudrate+0xc4>)
    4478:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    447a:	46c0      	nop			; (mov r8, r8)
    447c:	687b      	ldr	r3, [r7, #4]
    447e:	0018      	movs	r0, r3
    4480:	4b05      	ldr	r3, [pc, #20]	; (4498 <spi_set_baudrate+0xb4>)
    4482:	4798      	blx	r3
    4484:	1e03      	subs	r3, r0, #0
    4486:	d1f9      	bne.n	447c <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
    4488:	2300      	movs	r3, #0
}
    448a:	0018      	movs	r0, r3
    448c:	46bd      	mov	sp, r7
    448e:	b009      	add	sp, #36	; 0x24
    4490:	bd90      	pop	{r4, r7, pc}
    4492:	46c0      	nop			; (mov r8, r8)
    4494:	00004201 	.word	0x00004201
    4498:	00004191 	.word	0x00004191
    449c:	00003dfd 	.word	0x00003dfd
    44a0:	00006a35 	.word	0x00006a35
    44a4:	00003977 	.word	0x00003977
    44a8:	000041b1 	.word	0x000041b1

000044ac <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    44ac:	b590      	push	{r4, r7, lr}
    44ae:	b093      	sub	sp, #76	; 0x4c
    44b0:	af00      	add	r7, sp, #0
    44b2:	6078      	str	r0, [r7, #4]
    44b4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    44b6:	687b      	ldr	r3, [r7, #4]
    44b8:	681b      	ldr	r3, [r3, #0]
    44ba:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    44bc:	687b      	ldr	r3, [r7, #4]
    44be:	681b      	ldr	r3, [r3, #0]
    44c0:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    44c2:	231c      	movs	r3, #28
    44c4:	18fb      	adds	r3, r7, r3
    44c6:	0018      	movs	r0, r3
    44c8:	4b75      	ldr	r3, [pc, #468]	; (46a0 <_spi_set_config+0x1f4>)
    44ca:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    44cc:	231c      	movs	r3, #28
    44ce:	18fb      	adds	r3, r7, r3
    44d0:	2200      	movs	r2, #0
    44d2:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    44d4:	683b      	ldr	r3, [r7, #0]
    44d6:	781b      	ldrb	r3, [r3, #0]
    44d8:	2b00      	cmp	r3, #0
    44da:	d103      	bne.n	44e4 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    44dc:	231c      	movs	r3, #28
    44de:	18fb      	adds	r3, r7, r3
    44e0:	2200      	movs	r2, #0
    44e2:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    44e4:	683b      	ldr	r3, [r7, #0]
    44e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    44e8:	230c      	movs	r3, #12
    44ea:	18fb      	adds	r3, r7, r3
    44ec:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    44ee:	683b      	ldr	r3, [r7, #0]
    44f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    44f2:	230c      	movs	r3, #12
    44f4:	18fb      	adds	r3, r7, r3
    44f6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    44f8:	683b      	ldr	r3, [r7, #0]
    44fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    44fc:	230c      	movs	r3, #12
    44fe:	18fb      	adds	r3, r7, r3
    4500:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    4502:	683b      	ldr	r3, [r7, #0]
    4504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    4506:	230c      	movs	r3, #12
    4508:	18fb      	adds	r3, r7, r3
    450a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    450c:	2347      	movs	r3, #71	; 0x47
    450e:	18fb      	adds	r3, r7, r3
    4510:	2200      	movs	r2, #0
    4512:	701a      	strb	r2, [r3, #0]
    4514:	e02c      	b.n	4570 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4516:	2347      	movs	r3, #71	; 0x47
    4518:	18fb      	adds	r3, r7, r3
    451a:	781a      	ldrb	r2, [r3, #0]
    451c:	230c      	movs	r3, #12
    451e:	18fb      	adds	r3, r7, r3
    4520:	0092      	lsls	r2, r2, #2
    4522:	58d3      	ldr	r3, [r2, r3]
    4524:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    4526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4528:	2b00      	cmp	r3, #0
    452a:	d109      	bne.n	4540 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    452c:	2347      	movs	r3, #71	; 0x47
    452e:	18fb      	adds	r3, r7, r3
    4530:	781a      	ldrb	r2, [r3, #0]
    4532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4534:	0011      	movs	r1, r2
    4536:	0018      	movs	r0, r3
    4538:	4b5a      	ldr	r3, [pc, #360]	; (46a4 <_spi_set_config+0x1f8>)
    453a:	4798      	blx	r3
    453c:	0003      	movs	r3, r0
    453e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    4540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4542:	3301      	adds	r3, #1
    4544:	d00d      	beq.n	4562 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4548:	b2da      	uxtb	r2, r3
    454a:	231c      	movs	r3, #28
    454c:	18fb      	adds	r3, r7, r3
    454e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4552:	0c1b      	lsrs	r3, r3, #16
    4554:	b2db      	uxtb	r3, r3
    4556:	221c      	movs	r2, #28
    4558:	18ba      	adds	r2, r7, r2
    455a:	0011      	movs	r1, r2
    455c:	0018      	movs	r0, r3
    455e:	4b52      	ldr	r3, [pc, #328]	; (46a8 <_spi_set_config+0x1fc>)
    4560:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    4562:	2347      	movs	r3, #71	; 0x47
    4564:	18fb      	adds	r3, r7, r3
    4566:	781a      	ldrb	r2, [r3, #0]
    4568:	2347      	movs	r3, #71	; 0x47
    456a:	18fb      	adds	r3, r7, r3
    456c:	3201      	adds	r2, #1
    456e:	701a      	strb	r2, [r3, #0]
    4570:	2347      	movs	r3, #71	; 0x47
    4572:	18fb      	adds	r3, r7, r3
    4574:	781b      	ldrb	r3, [r3, #0]
    4576:	2b03      	cmp	r3, #3
    4578:	d9cd      	bls.n	4516 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    457a:	683b      	ldr	r3, [r7, #0]
    457c:	781a      	ldrb	r2, [r3, #0]
    457e:	687b      	ldr	r3, [r7, #4]
    4580:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    4582:	683b      	ldr	r3, [r7, #0]
    4584:	7c1a      	ldrb	r2, [r3, #16]
    4586:	687b      	ldr	r3, [r7, #4]
    4588:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    458a:	683b      	ldr	r3, [r7, #0]
    458c:	7c9a      	ldrb	r2, [r3, #18]
    458e:	687b      	ldr	r3, [r7, #4]
    4590:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    4592:	683b      	ldr	r3, [r7, #0]
    4594:	7d1a      	ldrb	r2, [r3, #20]
    4596:	687b      	ldr	r3, [r7, #4]
    4598:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    459a:	230a      	movs	r3, #10
    459c:	18fb      	adds	r3, r7, r3
    459e:	2200      	movs	r2, #0
    45a0:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    45a2:	2300      	movs	r3, #0
    45a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    45a6:	2300      	movs	r3, #0
    45a8:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    45aa:	683b      	ldr	r3, [r7, #0]
    45ac:	781b      	ldrb	r3, [r3, #0]
    45ae:	2b01      	cmp	r3, #1
    45b0:	d129      	bne.n	4606 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    45b2:	687b      	ldr	r3, [r7, #4]
    45b4:	681b      	ldr	r3, [r3, #0]
    45b6:	0018      	movs	r0, r3
    45b8:	4b3c      	ldr	r3, [pc, #240]	; (46ac <_spi_set_config+0x200>)
    45ba:	4798      	blx	r3
    45bc:	0003      	movs	r3, r0
    45be:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    45c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    45c2:	3314      	adds	r3, #20
    45c4:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    45c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    45c8:	b2db      	uxtb	r3, r3
    45ca:	0018      	movs	r0, r3
    45cc:	4b38      	ldr	r3, [pc, #224]	; (46b0 <_spi_set_config+0x204>)
    45ce:	4798      	blx	r3
    45d0:	0003      	movs	r3, r0
    45d2:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    45d4:	683b      	ldr	r3, [r7, #0]
    45d6:	699b      	ldr	r3, [r3, #24]
    45d8:	2223      	movs	r2, #35	; 0x23
    45da:	18bc      	adds	r4, r7, r2
    45dc:	220a      	movs	r2, #10
    45de:	18ba      	adds	r2, r7, r2
    45e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
    45e2:	0018      	movs	r0, r3
    45e4:	4b33      	ldr	r3, [pc, #204]	; (46b4 <_spi_set_config+0x208>)
    45e6:	4798      	blx	r3
    45e8:	0003      	movs	r3, r0
    45ea:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    45ec:	2323      	movs	r3, #35	; 0x23
    45ee:	18fb      	adds	r3, r7, r3
    45f0:	781b      	ldrb	r3, [r3, #0]
    45f2:	2b00      	cmp	r3, #0
    45f4:	d001      	beq.n	45fa <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    45f6:	2317      	movs	r3, #23
    45f8:	e04e      	b.n	4698 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    45fa:	230a      	movs	r3, #10
    45fc:	18fb      	adds	r3, r7, r3
    45fe:	881b      	ldrh	r3, [r3, #0]
    4600:	b2da      	uxtb	r2, r3
    4602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4604:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    4606:	683b      	ldr	r3, [r7, #0]
    4608:	685b      	ldr	r3, [r3, #4]
    460a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    460c:	4313      	orrs	r3, r2
    460e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    4610:	683b      	ldr	r3, [r7, #0]
    4612:	689b      	ldr	r3, [r3, #8]
    4614:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4616:	4313      	orrs	r3, r2
    4618:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    461a:	683b      	ldr	r3, [r7, #0]
    461c:	68db      	ldr	r3, [r3, #12]
    461e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4620:	4313      	orrs	r3, r2
    4622:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    4624:	683b      	ldr	r3, [r7, #0]
    4626:	7c1b      	ldrb	r3, [r3, #16]
    4628:	001a      	movs	r2, r3
    462a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    462c:	4313      	orrs	r3, r2
    462e:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    4630:	683b      	ldr	r3, [r7, #0]
    4632:	7c5b      	ldrb	r3, [r3, #17]
    4634:	2b00      	cmp	r3, #0
    4636:	d103      	bne.n	4640 <_spi_set_config+0x194>
    4638:	4b1f      	ldr	r3, [pc, #124]	; (46b8 <_spi_set_config+0x20c>)
    463a:	4798      	blx	r3
    463c:	1e03      	subs	r3, r0, #0
    463e:	d003      	beq.n	4648 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4642:	2280      	movs	r2, #128	; 0x80
    4644:	4313      	orrs	r3, r2
    4646:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    4648:	683b      	ldr	r3, [r7, #0]
    464a:	7c9b      	ldrb	r3, [r3, #18]
    464c:	2b00      	cmp	r3, #0
    464e:	d004      	beq.n	465a <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4652:	2280      	movs	r2, #128	; 0x80
    4654:	0292      	lsls	r2, r2, #10
    4656:	4313      	orrs	r3, r2
    4658:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    465a:	683b      	ldr	r3, [r7, #0]
    465c:	7cdb      	ldrb	r3, [r3, #19]
    465e:	2b00      	cmp	r3, #0
    4660:	d004      	beq.n	466c <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4664:	2280      	movs	r2, #128	; 0x80
    4666:	0092      	lsls	r2, r2, #2
    4668:	4313      	orrs	r3, r2
    466a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    466c:	683b      	ldr	r3, [r7, #0]
    466e:	7d1b      	ldrb	r3, [r3, #20]
    4670:	2b00      	cmp	r3, #0
    4672:	d004      	beq.n	467e <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    4674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4676:	2280      	movs	r2, #128	; 0x80
    4678:	0192      	lsls	r2, r2, #6
    467a:	4313      	orrs	r3, r2
    467c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    467e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4680:	681a      	ldr	r2, [r3, #0]
    4682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4684:	431a      	orrs	r2, r3
    4686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4688:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    468a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    468c:	685a      	ldr	r2, [r3, #4]
    468e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4690:	431a      	orrs	r2, r3
    4692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4694:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    4696:	2300      	movs	r3, #0
}
    4698:	0018      	movs	r0, r3
    469a:	46bd      	mov	sp, r7
    469c:	b013      	add	sp, #76	; 0x4c
    469e:	bd90      	pop	{r4, r7, pc}
    46a0:	00003fa1 	.word	0x00003fa1
    46a4:	00003c41 	.word	0x00003c41
    46a8:	00006bfd 	.word	0x00006bfd
    46ac:	00003dfd 	.word	0x00003dfd
    46b0:	00006a35 	.word	0x00006a35
    46b4:	00003977 	.word	0x00003977
    46b8:	00004115 	.word	0x00004115

000046bc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    46bc:	b590      	push	{r4, r7, lr}
    46be:	b08b      	sub	sp, #44	; 0x2c
    46c0:	af00      	add	r7, sp, #0
    46c2:	60f8      	str	r0, [r7, #12]
    46c4:	60b9      	str	r1, [r7, #8]
    46c6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    46c8:	68fb      	ldr	r3, [r7, #12]
    46ca:	68ba      	ldr	r2, [r7, #8]
    46cc:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    46ce:	68fb      	ldr	r3, [r7, #12]
    46d0:	681b      	ldr	r3, [r3, #0]
    46d2:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    46d4:	6a3b      	ldr	r3, [r7, #32]
    46d6:	681b      	ldr	r3, [r3, #0]
    46d8:	2202      	movs	r2, #2
    46da:	4013      	ands	r3, r2
    46dc:	d001      	beq.n	46e2 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    46de:	231c      	movs	r3, #28
    46e0:	e09c      	b.n	481c <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    46e2:	6a3b      	ldr	r3, [r7, #32]
    46e4:	681b      	ldr	r3, [r3, #0]
    46e6:	2201      	movs	r2, #1
    46e8:	4013      	ands	r3, r2
    46ea:	d001      	beq.n	46f0 <spi_init+0x34>
		return STATUS_BUSY;
    46ec:	2305      	movs	r3, #5
    46ee:	e095      	b.n	481c <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    46f0:	68fb      	ldr	r3, [r7, #12]
    46f2:	681b      	ldr	r3, [r3, #0]
    46f4:	0018      	movs	r0, r3
    46f6:	4b4b      	ldr	r3, [pc, #300]	; (4824 <spi_init+0x168>)
    46f8:	4798      	blx	r3
    46fa:	0003      	movs	r3, r0
    46fc:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    46fe:	69fb      	ldr	r3, [r7, #28]
    4700:	3302      	adds	r3, #2
    4702:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4704:	69fb      	ldr	r3, [r7, #28]
    4706:	3314      	adds	r3, #20
    4708:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    470a:	2201      	movs	r2, #1
    470c:	69bb      	ldr	r3, [r7, #24]
    470e:	409a      	lsls	r2, r3
    4710:	0013      	movs	r3, r2
    4712:	0019      	movs	r1, r3
    4714:	2002      	movs	r0, #2
    4716:	4b44      	ldr	r3, [pc, #272]	; (4828 <spi_init+0x16c>)
    4718:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    471a:	2310      	movs	r3, #16
    471c:	18fb      	adds	r3, r7, r3
    471e:	0018      	movs	r0, r3
    4720:	4b42      	ldr	r3, [pc, #264]	; (482c <spi_init+0x170>)
    4722:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    4724:	687b      	ldr	r3, [r7, #4]
    4726:	2224      	movs	r2, #36	; 0x24
    4728:	5c9a      	ldrb	r2, [r3, r2]
    472a:	2310      	movs	r3, #16
    472c:	18fb      	adds	r3, r7, r3
    472e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4730:	697b      	ldr	r3, [r7, #20]
    4732:	b2db      	uxtb	r3, r3
    4734:	2210      	movs	r2, #16
    4736:	18ba      	adds	r2, r7, r2
    4738:	0011      	movs	r1, r2
    473a:	0018      	movs	r0, r3
    473c:	4b3c      	ldr	r3, [pc, #240]	; (4830 <spi_init+0x174>)
    473e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4740:	697b      	ldr	r3, [r7, #20]
    4742:	b2db      	uxtb	r3, r3
    4744:	0018      	movs	r0, r3
    4746:	4b3b      	ldr	r3, [pc, #236]	; (4834 <spi_init+0x178>)
    4748:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    474a:	687b      	ldr	r3, [r7, #4]
    474c:	2224      	movs	r2, #36	; 0x24
    474e:	5c9b      	ldrb	r3, [r3, r2]
    4750:	2100      	movs	r1, #0
    4752:	0018      	movs	r0, r3
    4754:	4b38      	ldr	r3, [pc, #224]	; (4838 <spi_init+0x17c>)
    4756:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    4758:	687b      	ldr	r3, [r7, #4]
    475a:	781b      	ldrb	r3, [r3, #0]
    475c:	2b01      	cmp	r3, #1
    475e:	d105      	bne.n	476c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    4760:	6a3b      	ldr	r3, [r7, #32]
    4762:	681b      	ldr	r3, [r3, #0]
    4764:	220c      	movs	r2, #12
    4766:	431a      	orrs	r2, r3
    4768:	6a3b      	ldr	r3, [r7, #32]
    476a:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    476c:	2327      	movs	r3, #39	; 0x27
    476e:	18fb      	adds	r3, r7, r3
    4770:	2200      	movs	r2, #0
    4772:	701a      	strb	r2, [r3, #0]
    4774:	e010      	b.n	4798 <spi_init+0xdc>
		module->callback[i]        = NULL;
    4776:	2327      	movs	r3, #39	; 0x27
    4778:	18fb      	adds	r3, r7, r3
    477a:	781b      	ldrb	r3, [r3, #0]
    477c:	68fa      	ldr	r2, [r7, #12]
    477e:	3302      	adds	r3, #2
    4780:	009b      	lsls	r3, r3, #2
    4782:	18d3      	adds	r3, r2, r3
    4784:	3304      	adds	r3, #4
    4786:	2200      	movs	r2, #0
    4788:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    478a:	2327      	movs	r3, #39	; 0x27
    478c:	18fb      	adds	r3, r7, r3
    478e:	781a      	ldrb	r2, [r3, #0]
    4790:	2327      	movs	r3, #39	; 0x27
    4792:	18fb      	adds	r3, r7, r3
    4794:	3201      	adds	r2, #1
    4796:	701a      	strb	r2, [r3, #0]
    4798:	2327      	movs	r3, #39	; 0x27
    479a:	18fb      	adds	r3, r7, r3
    479c:	781b      	ldrb	r3, [r3, #0]
    479e:	2b06      	cmp	r3, #6
    47a0:	d9e9      	bls.n	4776 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
    47a2:	68fb      	ldr	r3, [r7, #12]
    47a4:	2200      	movs	r2, #0
    47a6:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    47a8:	68fb      	ldr	r3, [r7, #12]
    47aa:	2200      	movs	r2, #0
    47ac:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    47ae:	68fb      	ldr	r3, [r7, #12]
    47b0:	2200      	movs	r2, #0
    47b2:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    47b4:	68fb      	ldr	r3, [r7, #12]
    47b6:	2200      	movs	r2, #0
    47b8:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    47ba:	68fb      	ldr	r3, [r7, #12]
    47bc:	2236      	movs	r2, #54	; 0x36
    47be:	2100      	movs	r1, #0
    47c0:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    47c2:	68fb      	ldr	r3, [r7, #12]
    47c4:	2237      	movs	r2, #55	; 0x37
    47c6:	2100      	movs	r1, #0
    47c8:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    47ca:	68fb      	ldr	r3, [r7, #12]
    47cc:	2238      	movs	r2, #56	; 0x38
    47ce:	2100      	movs	r1, #0
    47d0:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    47d2:	68fb      	ldr	r3, [r7, #12]
    47d4:	2203      	movs	r2, #3
    47d6:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    47d8:	68fb      	ldr	r3, [r7, #12]
    47da:	2200      	movs	r2, #0
    47dc:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    47de:	68fb      	ldr	r3, [r7, #12]
    47e0:	681b      	ldr	r3, [r3, #0]
    47e2:	2213      	movs	r2, #19
    47e4:	18bc      	adds	r4, r7, r2
    47e6:	0018      	movs	r0, r3
    47e8:	4b0e      	ldr	r3, [pc, #56]	; (4824 <spi_init+0x168>)
    47ea:	4798      	blx	r3
    47ec:	0003      	movs	r3, r0
    47ee:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    47f0:	4a12      	ldr	r2, [pc, #72]	; (483c <spi_init+0x180>)
    47f2:	2313      	movs	r3, #19
    47f4:	18fb      	adds	r3, r7, r3
    47f6:	781b      	ldrb	r3, [r3, #0]
    47f8:	0011      	movs	r1, r2
    47fa:	0018      	movs	r0, r3
    47fc:	4b10      	ldr	r3, [pc, #64]	; (4840 <spi_init+0x184>)
    47fe:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4800:	2313      	movs	r3, #19
    4802:	18fb      	adds	r3, r7, r3
    4804:	781a      	ldrb	r2, [r3, #0]
    4806:	4b0f      	ldr	r3, [pc, #60]	; (4844 <spi_init+0x188>)
    4808:	0092      	lsls	r2, r2, #2
    480a:	68f9      	ldr	r1, [r7, #12]
    480c:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    480e:	687a      	ldr	r2, [r7, #4]
    4810:	68fb      	ldr	r3, [r7, #12]
    4812:	0011      	movs	r1, r2
    4814:	0018      	movs	r0, r3
    4816:	4b0c      	ldr	r3, [pc, #48]	; (4848 <spi_init+0x18c>)
    4818:	4798      	blx	r3
    481a:	0003      	movs	r3, r0
}
    481c:	0018      	movs	r0, r3
    481e:	46bd      	mov	sp, r7
    4820:	b00b      	add	sp, #44	; 0x2c
    4822:	bd90      	pop	{r4, r7, pc}
    4824:	00003dfd 	.word	0x00003dfd
    4828:	000040b9 	.word	0x000040b9
    482c:	000040a1 	.word	0x000040a1
    4830:	00006911 	.word	0x00006911
    4834:	00006955 	.word	0x00006955
    4838:	00003bb5 	.word	0x00003bb5
    483c:	00004d15 	.word	0x00004d15
    4840:	00003e61 	.word	0x00003e61
    4844:	20000a10 	.word	0x20000a10
    4848:	000044ad 	.word	0x000044ad

0000484c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    484c:	b590      	push	{r4, r7, lr}
    484e:	b087      	sub	sp, #28
    4850:	af00      	add	r7, sp, #0
    4852:	60f8      	str	r0, [r7, #12]
    4854:	60b9      	str	r1, [r7, #8]
    4856:	0019      	movs	r1, r3
    4858:	1dbb      	adds	r3, r7, #6
    485a:	801a      	strh	r2, [r3, #0]
    485c:	1d3b      	adds	r3, r7, #4
    485e:	1c0a      	adds	r2, r1, #0
    4860:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    4862:	68fb      	ldr	r3, [r7, #12]
    4864:	2238      	movs	r2, #56	; 0x38
    4866:	5c9b      	ldrb	r3, [r3, r2]
    4868:	b2db      	uxtb	r3, r3
    486a:	2b05      	cmp	r3, #5
    486c:	d101      	bne.n	4872 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    486e:	2305      	movs	r3, #5
    4870:	e07a      	b.n	4968 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    4872:	1dbb      	adds	r3, r7, #6
    4874:	881b      	ldrh	r3, [r3, #0]
    4876:	2b00      	cmp	r3, #0
    4878:	d101      	bne.n	487e <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    487a:	2317      	movs	r3, #23
    487c:	e074      	b.n	4968 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
    487e:	68fb      	ldr	r3, [r7, #12]
    4880:	79db      	ldrb	r3, [r3, #7]
    4882:	2201      	movs	r2, #1
    4884:	4053      	eors	r3, r2
    4886:	b2db      	uxtb	r3, r3
    4888:	2b00      	cmp	r3, #0
    488a:	d001      	beq.n	4890 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    488c:	231c      	movs	r3, #28
    488e:	e06b      	b.n	4968 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
    4890:	2316      	movs	r3, #22
    4892:	18fb      	adds	r3, r7, r3
    4894:	2200      	movs	r2, #0
    4896:	801a      	strh	r2, [r3, #0]

	while (length--) {
    4898:	e05e      	b.n	4958 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    489a:	68fb      	ldr	r3, [r7, #12]
    489c:	795b      	ldrb	r3, [r3, #5]
    489e:	2b01      	cmp	r3, #1
    48a0:	d112      	bne.n	48c8 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    48a2:	46c0      	nop			; (mov r8, r8)
    48a4:	68fb      	ldr	r3, [r7, #12]
    48a6:	0018      	movs	r0, r3
    48a8:	4b31      	ldr	r3, [pc, #196]	; (4970 <spi_read_buffer_wait+0x124>)
    48aa:	4798      	blx	r3
    48ac:	0003      	movs	r3, r0
    48ae:	001a      	movs	r2, r3
    48b0:	2301      	movs	r3, #1
    48b2:	4053      	eors	r3, r2
    48b4:	b2db      	uxtb	r3, r3
    48b6:	2b00      	cmp	r3, #0
    48b8:	d1f4      	bne.n	48a4 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    48ba:	1d3b      	adds	r3, r7, #4
    48bc:	881a      	ldrh	r2, [r3, #0]
    48be:	68fb      	ldr	r3, [r7, #12]
    48c0:	0011      	movs	r1, r2
    48c2:	0018      	movs	r0, r3
    48c4:	4b2b      	ldr	r3, [pc, #172]	; (4974 <spi_read_buffer_wait+0x128>)
    48c6:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    48c8:	46c0      	nop			; (mov r8, r8)
    48ca:	68fb      	ldr	r3, [r7, #12]
    48cc:	0018      	movs	r0, r3
    48ce:	4b2a      	ldr	r3, [pc, #168]	; (4978 <spi_read_buffer_wait+0x12c>)
    48d0:	4798      	blx	r3
    48d2:	0003      	movs	r3, r0
    48d4:	001a      	movs	r2, r3
    48d6:	2301      	movs	r3, #1
    48d8:	4053      	eors	r3, r2
    48da:	b2db      	uxtb	r3, r3
    48dc:	2b00      	cmp	r3, #0
    48de:	d1f4      	bne.n	48ca <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
    48e0:	2312      	movs	r3, #18
    48e2:	18fb      	adds	r3, r7, r3
    48e4:	2200      	movs	r2, #0
    48e6:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    48e8:	2315      	movs	r3, #21
    48ea:	18fc      	adds	r4, r7, r3
    48ec:	2312      	movs	r3, #18
    48ee:	18fa      	adds	r2, r7, r3
    48f0:	68fb      	ldr	r3, [r7, #12]
    48f2:	0011      	movs	r1, r2
    48f4:	0018      	movs	r0, r3
    48f6:	4b21      	ldr	r3, [pc, #132]	; (497c <spi_read_buffer_wait+0x130>)
    48f8:	4798      	blx	r3
    48fa:	0003      	movs	r3, r0
    48fc:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    48fe:	2315      	movs	r3, #21
    4900:	18fb      	adds	r3, r7, r3
    4902:	781b      	ldrb	r3, [r3, #0]
    4904:	2b00      	cmp	r3, #0
    4906:	d003      	beq.n	4910 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
    4908:	2315      	movs	r3, #21
    490a:	18fb      	adds	r3, r7, r3
    490c:	781b      	ldrb	r3, [r3, #0]
    490e:	e02b      	b.n	4968 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    4910:	2316      	movs	r3, #22
    4912:	18fb      	adds	r3, r7, r3
    4914:	881b      	ldrh	r3, [r3, #0]
    4916:	2216      	movs	r2, #22
    4918:	18ba      	adds	r2, r7, r2
    491a:	1c59      	adds	r1, r3, #1
    491c:	8011      	strh	r1, [r2, #0]
    491e:	001a      	movs	r2, r3
    4920:	68bb      	ldr	r3, [r7, #8]
    4922:	189b      	adds	r3, r3, r2
    4924:	2212      	movs	r2, #18
    4926:	18ba      	adds	r2, r7, r2
    4928:	8812      	ldrh	r2, [r2, #0]
    492a:	b2d2      	uxtb	r2, r2
    492c:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    492e:	68fb      	ldr	r3, [r7, #12]
    4930:	799b      	ldrb	r3, [r3, #6]
    4932:	2b01      	cmp	r3, #1
    4934:	d110      	bne.n	4958 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
    4936:	2316      	movs	r3, #22
    4938:	18fb      	adds	r3, r7, r3
    493a:	881b      	ldrh	r3, [r3, #0]
    493c:	2216      	movs	r2, #22
    493e:	18ba      	adds	r2, r7, r2
    4940:	1c59      	adds	r1, r3, #1
    4942:	8011      	strh	r1, [r2, #0]
    4944:	001a      	movs	r2, r3
    4946:	68bb      	ldr	r3, [r7, #8]
    4948:	189b      	adds	r3, r3, r2
    494a:	2212      	movs	r2, #18
    494c:	18ba      	adds	r2, r7, r2
    494e:	8812      	ldrh	r2, [r2, #0]
    4950:	0a12      	lsrs	r2, r2, #8
    4952:	b292      	uxth	r2, r2
    4954:	b2d2      	uxtb	r2, r2
    4956:	701a      	strb	r2, [r3, #0]
	while (length--) {
    4958:	1dbb      	adds	r3, r7, #6
    495a:	881b      	ldrh	r3, [r3, #0]
    495c:	1dba      	adds	r2, r7, #6
    495e:	1e59      	subs	r1, r3, #1
    4960:	8011      	strh	r1, [r2, #0]
    4962:	2b00      	cmp	r3, #0
    4964:	d199      	bne.n	489a <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
    4966:	2300      	movs	r3, #0
}
    4968:	0018      	movs	r0, r3
    496a:	46bd      	mov	sp, r7
    496c:	b007      	add	sp, #28
    496e:	bd90      	pop	{r4, r7, pc}
    4970:	00004285 	.word	0x00004285
    4974:	000042d5 	.word	0x000042d5
    4978:	000042ad 	.word	0x000042ad
    497c:	0000431d 	.word	0x0000431d

00004980 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    4980:	b580      	push	{r7, lr}
    4982:	b086      	sub	sp, #24
    4984:	af00      	add	r7, sp, #0
    4986:	60f8      	str	r0, [r7, #12]
    4988:	60b9      	str	r1, [r7, #8]
    498a:	1dfb      	adds	r3, r7, #7
    498c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    498e:	68fb      	ldr	r3, [r7, #12]
    4990:	795b      	ldrb	r3, [r3, #5]
    4992:	2b01      	cmp	r3, #1
    4994:	d001      	beq.n	499a <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    4996:	2315      	movs	r3, #21
    4998:	e05c      	b.n	4a54 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    499a:	68fb      	ldr	r3, [r7, #12]
    499c:	7a1b      	ldrb	r3, [r3, #8]
    499e:	2201      	movs	r2, #1
    49a0:	4053      	eors	r3, r2
    49a2:	b2db      	uxtb	r3, r3
    49a4:	2b00      	cmp	r3, #0
    49a6:	d054      	beq.n	4a52 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    49a8:	1dfb      	adds	r3, r7, #7
    49aa:	781b      	ldrb	r3, [r3, #0]
    49ac:	2b00      	cmp	r3, #0
    49ae:	d04a      	beq.n	4a46 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    49b0:	68bb      	ldr	r3, [r7, #8]
    49b2:	785b      	ldrb	r3, [r3, #1]
    49b4:	2b00      	cmp	r3, #0
    49b6:	d03f      	beq.n	4a38 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    49b8:	68fb      	ldr	r3, [r7, #12]
    49ba:	0018      	movs	r0, r3
    49bc:	4b27      	ldr	r3, [pc, #156]	; (4a5c <spi_select_slave+0xdc>)
    49be:	4798      	blx	r3
    49c0:	0003      	movs	r3, r0
    49c2:	001a      	movs	r2, r3
    49c4:	2301      	movs	r3, #1
    49c6:	4053      	eors	r3, r2
    49c8:	b2db      	uxtb	r3, r3
    49ca:	2b00      	cmp	r3, #0
    49cc:	d007      	beq.n	49de <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    49ce:	68bb      	ldr	r3, [r7, #8]
    49d0:	781b      	ldrb	r3, [r3, #0]
    49d2:	2101      	movs	r1, #1
    49d4:	0018      	movs	r0, r3
    49d6:	4b22      	ldr	r3, [pc, #136]	; (4a60 <spi_select_slave+0xe0>)
    49d8:	4798      	blx	r3
					return STATUS_BUSY;
    49da:	2305      	movs	r3, #5
    49dc:	e03a      	b.n	4a54 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    49de:	68bb      	ldr	r3, [r7, #8]
    49e0:	781b      	ldrb	r3, [r3, #0]
    49e2:	2100      	movs	r1, #0
    49e4:	0018      	movs	r0, r3
    49e6:	4b1e      	ldr	r3, [pc, #120]	; (4a60 <spi_select_slave+0xe0>)
    49e8:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    49ea:	68bb      	ldr	r3, [r7, #8]
    49ec:	789b      	ldrb	r3, [r3, #2]
    49ee:	b29a      	uxth	r2, r3
    49f0:	68fb      	ldr	r3, [r7, #12]
    49f2:	0011      	movs	r1, r2
    49f4:	0018      	movs	r0, r3
    49f6:	4b1b      	ldr	r3, [pc, #108]	; (4a64 <spi_select_slave+0xe4>)
    49f8:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    49fa:	68fb      	ldr	r3, [r7, #12]
    49fc:	79db      	ldrb	r3, [r3, #7]
    49fe:	2201      	movs	r2, #1
    4a00:	4053      	eors	r3, r2
    4a02:	b2db      	uxtb	r3, r3
    4a04:	2b00      	cmp	r3, #0
    4a06:	d024      	beq.n	4a52 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    4a08:	46c0      	nop			; (mov r8, r8)
    4a0a:	68fb      	ldr	r3, [r7, #12]
    4a0c:	0018      	movs	r0, r3
    4a0e:	4b16      	ldr	r3, [pc, #88]	; (4a68 <spi_select_slave+0xe8>)
    4a10:	4798      	blx	r3
    4a12:	0003      	movs	r3, r0
    4a14:	001a      	movs	r2, r3
    4a16:	2301      	movs	r3, #1
    4a18:	4053      	eors	r3, r2
    4a1a:	b2db      	uxtb	r3, r3
    4a1c:	2b00      	cmp	r3, #0
    4a1e:	d1f4      	bne.n	4a0a <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    4a20:	2316      	movs	r3, #22
    4a22:	18fb      	adds	r3, r7, r3
    4a24:	2200      	movs	r2, #0
    4a26:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    4a28:	2316      	movs	r3, #22
    4a2a:	18fa      	adds	r2, r7, r3
    4a2c:	68fb      	ldr	r3, [r7, #12]
    4a2e:	0011      	movs	r1, r2
    4a30:	0018      	movs	r0, r3
    4a32:	4b0e      	ldr	r3, [pc, #56]	; (4a6c <spi_select_slave+0xec>)
    4a34:	4798      	blx	r3
    4a36:	e00c      	b.n	4a52 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    4a38:	68bb      	ldr	r3, [r7, #8]
    4a3a:	781b      	ldrb	r3, [r3, #0]
    4a3c:	2100      	movs	r1, #0
    4a3e:	0018      	movs	r0, r3
    4a40:	4b07      	ldr	r3, [pc, #28]	; (4a60 <spi_select_slave+0xe0>)
    4a42:	4798      	blx	r3
    4a44:	e005      	b.n	4a52 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    4a46:	68bb      	ldr	r3, [r7, #8]
    4a48:	781b      	ldrb	r3, [r3, #0]
    4a4a:	2101      	movs	r1, #1
    4a4c:	0018      	movs	r0, r3
    4a4e:	4b04      	ldr	r3, [pc, #16]	; (4a60 <spi_select_slave+0xe0>)
    4a50:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    4a52:	2300      	movs	r3, #0
}
    4a54:	0018      	movs	r0, r3
    4a56:	46bd      	mov	sp, r7
    4a58:	b006      	add	sp, #24
    4a5a:	bd80      	pop	{r7, pc}
    4a5c:	00004285 	.word	0x00004285
    4a60:	0000404d 	.word	0x0000404d
    4a64:	000042d5 	.word	0x000042d5
    4a68:	000042ad 	.word	0x000042ad
    4a6c:	0000431d 	.word	0x0000431d

00004a70 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    4a70:	b580      	push	{r7, lr}
    4a72:	b086      	sub	sp, #24
    4a74:	af00      	add	r7, sp, #0
    4a76:	60f8      	str	r0, [r7, #12]
    4a78:	60b9      	str	r1, [r7, #8]
    4a7a:	1dbb      	adds	r3, r7, #6
    4a7c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    4a7e:	68fb      	ldr	r3, [r7, #12]
    4a80:	2238      	movs	r2, #56	; 0x38
    4a82:	5c9b      	ldrb	r3, [r3, r2]
    4a84:	b2db      	uxtb	r3, r3
    4a86:	2b05      	cmp	r3, #5
    4a88:	d101      	bne.n	4a8e <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    4a8a:	2305      	movs	r3, #5
    4a8c:	e087      	b.n	4b9e <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
    4a8e:	1dbb      	adds	r3, r7, #6
    4a90:	881b      	ldrh	r3, [r3, #0]
    4a92:	2b00      	cmp	r3, #0
    4a94:	d101      	bne.n	4a9a <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    4a96:	2317      	movs	r3, #23
    4a98:	e081      	b.n	4b9e <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
    4a9a:	2316      	movs	r3, #22
    4a9c:	18fb      	adds	r3, r7, r3
    4a9e:	2200      	movs	r2, #0
    4aa0:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    4aa2:	2314      	movs	r3, #20
    4aa4:	18fb      	adds	r3, r7, r3
    4aa6:	1dba      	adds	r2, r7, #6
    4aa8:	8812      	ldrh	r2, [r2, #0]
    4aaa:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    4aac:	e05f      	b.n	4b6e <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    4aae:	46c0      	nop			; (mov r8, r8)
    4ab0:	68fb      	ldr	r3, [r7, #12]
    4ab2:	0018      	movs	r0, r3
    4ab4:	4b3c      	ldr	r3, [pc, #240]	; (4ba8 <spi_write_buffer_wait+0x138>)
    4ab6:	4798      	blx	r3
    4ab8:	0003      	movs	r3, r0
    4aba:	001a      	movs	r2, r3
    4abc:	2301      	movs	r3, #1
    4abe:	4053      	eors	r3, r2
    4ac0:	b2db      	uxtb	r3, r3
    4ac2:	2b00      	cmp	r3, #0
    4ac4:	d1f4      	bne.n	4ab0 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    4ac6:	2316      	movs	r3, #22
    4ac8:	18fb      	adds	r3, r7, r3
    4aca:	881b      	ldrh	r3, [r3, #0]
    4acc:	2216      	movs	r2, #22
    4ace:	18ba      	adds	r2, r7, r2
    4ad0:	1c59      	adds	r1, r3, #1
    4ad2:	8011      	strh	r1, [r2, #0]
    4ad4:	001a      	movs	r2, r3
    4ad6:	68bb      	ldr	r3, [r7, #8]
    4ad8:	189b      	adds	r3, r3, r2
    4ada:	781a      	ldrb	r2, [r3, #0]
    4adc:	2312      	movs	r3, #18
    4ade:	18fb      	adds	r3, r7, r3
    4ae0:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4ae2:	68fb      	ldr	r3, [r7, #12]
    4ae4:	799b      	ldrb	r3, [r3, #6]
    4ae6:	2b01      	cmp	r3, #1
    4ae8:	d115      	bne.n	4b16 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    4aea:	2316      	movs	r3, #22
    4aec:	18fb      	adds	r3, r7, r3
    4aee:	881b      	ldrh	r3, [r3, #0]
    4af0:	2216      	movs	r2, #22
    4af2:	18ba      	adds	r2, r7, r2
    4af4:	1c59      	adds	r1, r3, #1
    4af6:	8011      	strh	r1, [r2, #0]
    4af8:	001a      	movs	r2, r3
    4afa:	68bb      	ldr	r3, [r7, #8]
    4afc:	189b      	adds	r3, r3, r2
    4afe:	781b      	ldrb	r3, [r3, #0]
    4b00:	021b      	lsls	r3, r3, #8
    4b02:	b21a      	sxth	r2, r3
    4b04:	2312      	movs	r3, #18
    4b06:	18fb      	adds	r3, r7, r3
    4b08:	2100      	movs	r1, #0
    4b0a:	5e5b      	ldrsh	r3, [r3, r1]
    4b0c:	4313      	orrs	r3, r2
    4b0e:	b21a      	sxth	r2, r3
    4b10:	2312      	movs	r3, #18
    4b12:	18fb      	adds	r3, r7, r3
    4b14:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    4b16:	2312      	movs	r3, #18
    4b18:	18fb      	adds	r3, r7, r3
    4b1a:	881a      	ldrh	r2, [r3, #0]
    4b1c:	68fb      	ldr	r3, [r7, #12]
    4b1e:	0011      	movs	r1, r2
    4b20:	0018      	movs	r0, r3
    4b22:	4b22      	ldr	r3, [pc, #136]	; (4bac <spi_write_buffer_wait+0x13c>)
    4b24:	4798      	blx	r3

		if (module->receiver_enabled) {
    4b26:	68fb      	ldr	r3, [r7, #12]
    4b28:	79db      	ldrb	r3, [r3, #7]
    4b2a:	2214      	movs	r2, #20
    4b2c:	18ba      	adds	r2, r7, r2
    4b2e:	2114      	movs	r1, #20
    4b30:	1879      	adds	r1, r7, r1
    4b32:	8809      	ldrh	r1, [r1, #0]
    4b34:	8011      	strh	r1, [r2, #0]
    4b36:	2b00      	cmp	r3, #0
    4b38:	d019      	beq.n	4b6e <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    4b3a:	46c0      	nop			; (mov r8, r8)
    4b3c:	68fb      	ldr	r3, [r7, #12]
    4b3e:	0018      	movs	r0, r3
    4b40:	4b1b      	ldr	r3, [pc, #108]	; (4bb0 <spi_write_buffer_wait+0x140>)
    4b42:	4798      	blx	r3
    4b44:	0003      	movs	r3, r0
    4b46:	001a      	movs	r2, r3
    4b48:	2301      	movs	r3, #1
    4b4a:	4053      	eors	r3, r2
    4b4c:	b2db      	uxtb	r3, r3
    4b4e:	2b00      	cmp	r3, #0
    4b50:	d1f4      	bne.n	4b3c <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    4b52:	2310      	movs	r3, #16
    4b54:	18fa      	adds	r2, r7, r3
    4b56:	68fb      	ldr	r3, [r7, #12]
    4b58:	0011      	movs	r1, r2
    4b5a:	0018      	movs	r0, r3
    4b5c:	4b15      	ldr	r3, [pc, #84]	; (4bb4 <spi_write_buffer_wait+0x144>)
    4b5e:	4798      	blx	r3
			flush_length--;
    4b60:	2314      	movs	r3, #20
    4b62:	18fb      	adds	r3, r7, r3
    4b64:	881a      	ldrh	r2, [r3, #0]
    4b66:	2314      	movs	r3, #20
    4b68:	18fb      	adds	r3, r7, r3
    4b6a:	3a01      	subs	r2, #1
    4b6c:	801a      	strh	r2, [r3, #0]
	while (length--) {
    4b6e:	1dbb      	adds	r3, r7, #6
    4b70:	881b      	ldrh	r3, [r3, #0]
    4b72:	1dba      	adds	r2, r7, #6
    4b74:	1e59      	subs	r1, r3, #1
    4b76:	8011      	strh	r1, [r2, #0]
    4b78:	2b00      	cmp	r3, #0
    4b7a:	d198      	bne.n	4aae <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    4b7c:	68fb      	ldr	r3, [r7, #12]
    4b7e:	795b      	ldrb	r3, [r3, #5]
    4b80:	2b01      	cmp	r3, #1
    4b82:	d10b      	bne.n	4b9c <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    4b84:	46c0      	nop			; (mov r8, r8)
    4b86:	68fb      	ldr	r3, [r7, #12]
    4b88:	0018      	movs	r0, r3
    4b8a:	4b0b      	ldr	r3, [pc, #44]	; (4bb8 <spi_write_buffer_wait+0x148>)
    4b8c:	4798      	blx	r3
    4b8e:	0003      	movs	r3, r0
    4b90:	001a      	movs	r2, r3
    4b92:	2301      	movs	r3, #1
    4b94:	4053      	eors	r3, r2
    4b96:	b2db      	uxtb	r3, r3
    4b98:	2b00      	cmp	r3, #0
    4b9a:	d1f4      	bne.n	4b86 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    4b9c:	2300      	movs	r3, #0
}
    4b9e:	0018      	movs	r0, r3
    4ba0:	46bd      	mov	sp, r7
    4ba2:	b006      	add	sp, #24
    4ba4:	bd80      	pop	{r7, pc}
    4ba6:	46c0      	nop			; (mov r8, r8)
    4ba8:	00004285 	.word	0x00004285
    4bac:	000042d5 	.word	0x000042d5
    4bb0:	000042ad 	.word	0x000042ad
    4bb4:	0000431d 	.word	0x0000431d
    4bb8:	0000425d 	.word	0x0000425d

00004bbc <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    4bbc:	b580      	push	{r7, lr}
    4bbe:	b084      	sub	sp, #16
    4bc0:	af00      	add	r7, sp, #0
    4bc2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4bc4:	687b      	ldr	r3, [r7, #4]
    4bc6:	681b      	ldr	r3, [r3, #0]
    4bc8:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4bca:	687b      	ldr	r3, [r7, #4]
    4bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4bce:	781b      	ldrb	r3, [r3, #0]
    4bd0:	b2da      	uxtb	r2, r3
    4bd2:	230e      	movs	r3, #14
    4bd4:	18fb      	adds	r3, r7, r3
    4bd6:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    4bd8:	687b      	ldr	r3, [r7, #4]
    4bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4bdc:	1c5a      	adds	r2, r3, #1
    4bde:	687b      	ldr	r3, [r7, #4]
    4be0:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4be2:	687b      	ldr	r3, [r7, #4]
    4be4:	799b      	ldrb	r3, [r3, #6]
    4be6:	2b01      	cmp	r3, #1
    4be8:	d113      	bne.n	4c12 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    4bea:	687b      	ldr	r3, [r7, #4]
    4bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4bee:	781b      	ldrb	r3, [r3, #0]
    4bf0:	b2db      	uxtb	r3, r3
    4bf2:	021b      	lsls	r3, r3, #8
    4bf4:	b21a      	sxth	r2, r3
    4bf6:	230e      	movs	r3, #14
    4bf8:	18fb      	adds	r3, r7, r3
    4bfa:	2100      	movs	r1, #0
    4bfc:	5e5b      	ldrsh	r3, [r3, r1]
    4bfe:	4313      	orrs	r3, r2
    4c00:	b21a      	sxth	r2, r3
    4c02:	230e      	movs	r3, #14
    4c04:	18fb      	adds	r3, r7, r3
    4c06:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    4c08:	687b      	ldr	r3, [r7, #4]
    4c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4c0c:	1c5a      	adds	r2, r3, #1
    4c0e:	687b      	ldr	r3, [r7, #4]
    4c10:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    4c12:	230e      	movs	r3, #14
    4c14:	18fb      	adds	r3, r7, r3
    4c16:	881b      	ldrh	r3, [r3, #0]
    4c18:	05db      	lsls	r3, r3, #23
    4c1a:	0dda      	lsrs	r2, r3, #23
    4c1c:	68bb      	ldr	r3, [r7, #8]
    4c1e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    4c20:	687b      	ldr	r3, [r7, #4]
    4c22:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    4c24:	b29b      	uxth	r3, r3
    4c26:	3b01      	subs	r3, #1
    4c28:	b29a      	uxth	r2, r3
    4c2a:	687b      	ldr	r3, [r7, #4]
    4c2c:	869a      	strh	r2, [r3, #52]	; 0x34
}
    4c2e:	46c0      	nop			; (mov r8, r8)
    4c30:	46bd      	mov	sp, r7
    4c32:	b004      	add	sp, #16
    4c34:	bd80      	pop	{r7, pc}
	...

00004c38 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    4c38:	b580      	push	{r7, lr}
    4c3a:	b084      	sub	sp, #16
    4c3c:	af00      	add	r7, sp, #0
    4c3e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4c40:	687b      	ldr	r3, [r7, #4]
    4c42:	681b      	ldr	r3, [r3, #0]
    4c44:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    4c46:	4b08      	ldr	r3, [pc, #32]	; (4c68 <_spi_write_dummy+0x30>)
    4c48:	881b      	ldrh	r3, [r3, #0]
    4c4a:	001a      	movs	r2, r3
    4c4c:	68fb      	ldr	r3, [r7, #12]
    4c4e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4c50:	687b      	ldr	r3, [r7, #4]
    4c52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4c54:	b29b      	uxth	r3, r3
    4c56:	3b01      	subs	r3, #1
    4c58:	b29a      	uxth	r2, r3
    4c5a:	687b      	ldr	r3, [r7, #4]
    4c5c:	865a      	strh	r2, [r3, #50]	; 0x32
}
    4c5e:	46c0      	nop			; (mov r8, r8)
    4c60:	46bd      	mov	sp, r7
    4c62:	b004      	add	sp, #16
    4c64:	bd80      	pop	{r7, pc}
    4c66:	46c0      	nop			; (mov r8, r8)
    4c68:	20000a28 	.word	0x20000a28

00004c6c <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    4c6c:	b580      	push	{r7, lr}
    4c6e:	b084      	sub	sp, #16
    4c70:	af00      	add	r7, sp, #0
    4c72:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4c74:	687b      	ldr	r3, [r7, #4]
    4c76:	681b      	ldr	r3, [r3, #0]
    4c78:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    4c7a:	230a      	movs	r3, #10
    4c7c:	18fb      	adds	r3, r7, r3
    4c7e:	2200      	movs	r2, #0
    4c80:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    4c82:	68fb      	ldr	r3, [r7, #12]
    4c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4c86:	230a      	movs	r3, #10
    4c88:	18fb      	adds	r3, r7, r3
    4c8a:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4c8c:	687b      	ldr	r3, [r7, #4]
    4c8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4c90:	b29b      	uxth	r3, r3
    4c92:	3b01      	subs	r3, #1
    4c94:	b29a      	uxth	r2, r3
    4c96:	687b      	ldr	r3, [r7, #4]
    4c98:	865a      	strh	r2, [r3, #50]	; 0x32
}
    4c9a:	46c0      	nop			; (mov r8, r8)
    4c9c:	46bd      	mov	sp, r7
    4c9e:	b004      	add	sp, #16
    4ca0:	bd80      	pop	{r7, pc}

00004ca2 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    4ca2:	b580      	push	{r7, lr}
    4ca4:	b084      	sub	sp, #16
    4ca6:	af00      	add	r7, sp, #0
    4ca8:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4caa:	687b      	ldr	r3, [r7, #4]
    4cac:	681b      	ldr	r3, [r3, #0]
    4cae:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    4cb0:	68fb      	ldr	r3, [r7, #12]
    4cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4cb4:	b29a      	uxth	r2, r3
    4cb6:	230a      	movs	r3, #10
    4cb8:	18fb      	adds	r3, r7, r3
    4cba:	05d2      	lsls	r2, r2, #23
    4cbc:	0dd2      	lsrs	r2, r2, #23
    4cbe:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    4cc0:	687b      	ldr	r3, [r7, #4]
    4cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4cc4:	220a      	movs	r2, #10
    4cc6:	18ba      	adds	r2, r7, r2
    4cc8:	8812      	ldrh	r2, [r2, #0]
    4cca:	b2d2      	uxtb	r2, r2
    4ccc:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    4cce:	687b      	ldr	r3, [r7, #4]
    4cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4cd2:	1c5a      	adds	r2, r3, #1
    4cd4:	687b      	ldr	r3, [r7, #4]
    4cd6:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4cd8:	687b      	ldr	r3, [r7, #4]
    4cda:	799b      	ldrb	r3, [r3, #6]
    4cdc:	2b01      	cmp	r3, #1
    4cde:	d10d      	bne.n	4cfc <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    4ce0:	687b      	ldr	r3, [r7, #4]
    4ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ce4:	220a      	movs	r2, #10
    4ce6:	18ba      	adds	r2, r7, r2
    4ce8:	8812      	ldrh	r2, [r2, #0]
    4cea:	0a12      	lsrs	r2, r2, #8
    4cec:	b292      	uxth	r2, r2
    4cee:	b2d2      	uxtb	r2, r2
    4cf0:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    4cf2:	687b      	ldr	r3, [r7, #4]
    4cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4cf6:	1c5a      	adds	r2, r3, #1
    4cf8:	687b      	ldr	r3, [r7, #4]
    4cfa:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    4cfc:	687b      	ldr	r3, [r7, #4]
    4cfe:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    4d00:	b29b      	uxth	r3, r3
    4d02:	3b01      	subs	r3, #1
    4d04:	b29a      	uxth	r2, r3
    4d06:	687b      	ldr	r3, [r7, #4]
    4d08:	861a      	strh	r2, [r3, #48]	; 0x30
}
    4d0a:	46c0      	nop			; (mov r8, r8)
    4d0c:	46bd      	mov	sp, r7
    4d0e:	b004      	add	sp, #16
    4d10:	bd80      	pop	{r7, pc}
	...

00004d14 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    4d14:	b580      	push	{r7, lr}
    4d16:	b086      	sub	sp, #24
    4d18:	af00      	add	r7, sp, #0
    4d1a:	0002      	movs	r2, r0
    4d1c:	1dfb      	adds	r3, r7, #7
    4d1e:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    4d20:	1dfb      	adds	r3, r7, #7
    4d22:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    4d24:	4b96      	ldr	r3, [pc, #600]	; (4f80 <_spi_interrupt_handler+0x26c>)
    4d26:	0092      	lsls	r2, r2, #2
    4d28:	58d3      	ldr	r3, [r2, r3]
    4d2a:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4d2c:	697b      	ldr	r3, [r7, #20]
    4d2e:	681b      	ldr	r3, [r3, #0]
    4d30:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    4d32:	697b      	ldr	r3, [r7, #20]
    4d34:	2237      	movs	r2, #55	; 0x37
    4d36:	5c9a      	ldrb	r2, [r3, r2]
    4d38:	697b      	ldr	r3, [r7, #20]
    4d3a:	2136      	movs	r1, #54	; 0x36
    4d3c:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    4d3e:	230f      	movs	r3, #15
    4d40:	18fb      	adds	r3, r7, r3
    4d42:	400a      	ands	r2, r1
    4d44:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    4d46:	693b      	ldr	r3, [r7, #16]
    4d48:	7e1b      	ldrb	r3, [r3, #24]
    4d4a:	b2da      	uxtb	r2, r3
    4d4c:	230c      	movs	r3, #12
    4d4e:	18fb      	adds	r3, r7, r3
    4d50:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    4d52:	693b      	ldr	r3, [r7, #16]
    4d54:	7d9b      	ldrb	r3, [r3, #22]
    4d56:	b2db      	uxtb	r3, r3
    4d58:	b29a      	uxth	r2, r3
    4d5a:	230c      	movs	r3, #12
    4d5c:	18fb      	adds	r3, r7, r3
    4d5e:	210c      	movs	r1, #12
    4d60:	1879      	adds	r1, r7, r1
    4d62:	8809      	ldrh	r1, [r1, #0]
    4d64:	400a      	ands	r2, r1
    4d66:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    4d68:	230c      	movs	r3, #12
    4d6a:	18fb      	adds	r3, r7, r3
    4d6c:	881b      	ldrh	r3, [r3, #0]
    4d6e:	2201      	movs	r2, #1
    4d70:	4013      	ands	r3, r2
    4d72:	d038      	beq.n	4de6 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4d74:	697b      	ldr	r3, [r7, #20]
    4d76:	795b      	ldrb	r3, [r3, #5]
    4d78:	2b01      	cmp	r3, #1
    4d7a:	d110      	bne.n	4d9e <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    4d7c:	697b      	ldr	r3, [r7, #20]
    4d7e:	7a5b      	ldrb	r3, [r3, #9]
    4d80:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    4d82:	2b00      	cmp	r3, #0
    4d84:	d10b      	bne.n	4d9e <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    4d86:	697b      	ldr	r3, [r7, #20]
    4d88:	0018      	movs	r0, r3
    4d8a:	4b7e      	ldr	r3, [pc, #504]	; (4f84 <_spi_interrupt_handler+0x270>)
    4d8c:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    4d8e:	697b      	ldr	r3, [r7, #20]
    4d90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4d92:	b29b      	uxth	r3, r3
    4d94:	2b00      	cmp	r3, #0
    4d96:	d102      	bne.n	4d9e <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4d98:	693b      	ldr	r3, [r7, #16]
    4d9a:	2201      	movs	r2, #1
    4d9c:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    4d9e:	697b      	ldr	r3, [r7, #20]
    4da0:	795b      	ldrb	r3, [r3, #5]
		if (0
    4da2:	2b01      	cmp	r3, #1
    4da4:	d11f      	bne.n	4de6 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
    4da6:	697b      	ldr	r3, [r7, #20]
    4da8:	7a5b      	ldrb	r3, [r3, #9]
    4daa:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    4dac:	2b00      	cmp	r3, #0
    4dae:	d01a      	beq.n	4de6 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    4db0:	697b      	ldr	r3, [r7, #20]
    4db2:	0018      	movs	r0, r3
    4db4:	4b74      	ldr	r3, [pc, #464]	; (4f88 <_spi_interrupt_handler+0x274>)
    4db6:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    4db8:	697b      	ldr	r3, [r7, #20]
    4dba:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    4dbc:	b29b      	uxth	r3, r3
    4dbe:	2b00      	cmp	r3, #0
    4dc0:	d111      	bne.n	4de6 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4dc2:	693b      	ldr	r3, [r7, #16]
    4dc4:	2201      	movs	r2, #1
    4dc6:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    4dc8:	697b      	ldr	r3, [r7, #20]
    4dca:	7a5b      	ldrb	r3, [r3, #9]
    4dcc:	b2db      	uxtb	r3, r3
    4dce:	2b01      	cmp	r3, #1
    4dd0:	d109      	bne.n	4de6 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    4dd2:	697b      	ldr	r3, [r7, #20]
    4dd4:	79db      	ldrb	r3, [r3, #7]
    4dd6:	2201      	movs	r2, #1
    4dd8:	4053      	eors	r3, r2
    4dda:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    4ddc:	2b00      	cmp	r3, #0
    4dde:	d002      	beq.n	4de6 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4de0:	693b      	ldr	r3, [r7, #16]
    4de2:	2202      	movs	r2, #2
    4de4:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    4de6:	230c      	movs	r3, #12
    4de8:	18fb      	adds	r3, r7, r3
    4dea:	881b      	ldrh	r3, [r3, #0]
    4dec:	2204      	movs	r2, #4
    4dee:	4013      	ands	r3, r2
    4df0:	d100      	bne.n	4df4 <_spi_interrupt_handler+0xe0>
    4df2:	e07e      	b.n	4ef2 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4df4:	693b      	ldr	r3, [r7, #16]
    4df6:	8b5b      	ldrh	r3, [r3, #26]
    4df8:	b29b      	uxth	r3, r3
    4dfa:	001a      	movs	r2, r3
    4dfc:	2304      	movs	r3, #4
    4dfe:	4013      	ands	r3, r2
    4e00:	d022      	beq.n	4e48 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    4e02:	697b      	ldr	r3, [r7, #20]
    4e04:	7a5b      	ldrb	r3, [r3, #9]
    4e06:	b2db      	uxtb	r3, r3
    4e08:	2b01      	cmp	r3, #1
    4e0a:	d014      	beq.n	4e36 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    4e0c:	697b      	ldr	r3, [r7, #20]
    4e0e:	2238      	movs	r2, #56	; 0x38
    4e10:	211e      	movs	r1, #30
    4e12:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    4e14:	697b      	ldr	r3, [r7, #20]
    4e16:	2203      	movs	r2, #3
    4e18:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    4e1a:	693b      	ldr	r3, [r7, #16]
    4e1c:	2205      	movs	r2, #5
    4e1e:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    4e20:	230f      	movs	r3, #15
    4e22:	18fb      	adds	r3, r7, r3
    4e24:	781b      	ldrb	r3, [r3, #0]
    4e26:	2208      	movs	r2, #8
    4e28:	4013      	ands	r3, r2
    4e2a:	d004      	beq.n	4e36 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    4e2c:	697b      	ldr	r3, [r7, #20]
    4e2e:	699b      	ldr	r3, [r3, #24]
    4e30:	697a      	ldr	r2, [r7, #20]
    4e32:	0010      	movs	r0, r2
    4e34:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    4e36:	693b      	ldr	r3, [r7, #16]
    4e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4e3a:	230a      	movs	r3, #10
    4e3c:	18fb      	adds	r3, r7, r3
    4e3e:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4e40:	693b      	ldr	r3, [r7, #16]
    4e42:	2204      	movs	r2, #4
    4e44:	835a      	strh	r2, [r3, #26]
    4e46:	e054      	b.n	4ef2 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    4e48:	697b      	ldr	r3, [r7, #20]
    4e4a:	7a5b      	ldrb	r3, [r3, #9]
    4e4c:	b2db      	uxtb	r3, r3
    4e4e:	2b01      	cmp	r3, #1
    4e50:	d11e      	bne.n	4e90 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    4e52:	697b      	ldr	r3, [r7, #20]
    4e54:	0018      	movs	r0, r3
    4e56:	4b4d      	ldr	r3, [pc, #308]	; (4f8c <_spi_interrupt_handler+0x278>)
    4e58:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    4e5a:	697b      	ldr	r3, [r7, #20]
    4e5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4e5e:	b29b      	uxth	r3, r3
    4e60:	2b00      	cmp	r3, #0
    4e62:	d146      	bne.n	4ef2 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4e64:	693b      	ldr	r3, [r7, #16]
    4e66:	2204      	movs	r2, #4
    4e68:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    4e6a:	697b      	ldr	r3, [r7, #20]
    4e6c:	2238      	movs	r2, #56	; 0x38
    4e6e:	2100      	movs	r1, #0
    4e70:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    4e72:	697b      	ldr	r3, [r7, #20]
    4e74:	2203      	movs	r2, #3
    4e76:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    4e78:	230f      	movs	r3, #15
    4e7a:	18fb      	adds	r3, r7, r3
    4e7c:	781b      	ldrb	r3, [r3, #0]
    4e7e:	2201      	movs	r2, #1
    4e80:	4013      	ands	r3, r2
    4e82:	d036      	beq.n	4ef2 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    4e84:	697b      	ldr	r3, [r7, #20]
    4e86:	68db      	ldr	r3, [r3, #12]
    4e88:	697a      	ldr	r2, [r7, #20]
    4e8a:	0010      	movs	r0, r2
    4e8c:	4798      	blx	r3
    4e8e:	e030      	b.n	4ef2 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    4e90:	697b      	ldr	r3, [r7, #20]
    4e92:	0018      	movs	r0, r3
    4e94:	4b3e      	ldr	r3, [pc, #248]	; (4f90 <_spi_interrupt_handler+0x27c>)
    4e96:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    4e98:	697b      	ldr	r3, [r7, #20]
    4e9a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    4e9c:	b29b      	uxth	r3, r3
    4e9e:	2b00      	cmp	r3, #0
    4ea0:	d127      	bne.n	4ef2 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    4ea2:	697b      	ldr	r3, [r7, #20]
    4ea4:	2238      	movs	r2, #56	; 0x38
    4ea6:	2100      	movs	r1, #0
    4ea8:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4eaa:	693b      	ldr	r3, [r7, #16]
    4eac:	2204      	movs	r2, #4
    4eae:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    4eb0:	697b      	ldr	r3, [r7, #20]
    4eb2:	7a5b      	ldrb	r3, [r3, #9]
    4eb4:	b2db      	uxtb	r3, r3
    4eb6:	2b02      	cmp	r3, #2
    4eb8:	d10b      	bne.n	4ed2 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    4eba:	230f      	movs	r3, #15
    4ebc:	18fb      	adds	r3, r7, r3
    4ebe:	781b      	ldrb	r3, [r3, #0]
    4ec0:	2204      	movs	r2, #4
    4ec2:	4013      	ands	r3, r2
    4ec4:	d015      	beq.n	4ef2 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    4ec6:	697b      	ldr	r3, [r7, #20]
    4ec8:	695b      	ldr	r3, [r3, #20]
    4eca:	697a      	ldr	r2, [r7, #20]
    4ecc:	0010      	movs	r0, r2
    4ece:	4798      	blx	r3
    4ed0:	e00f      	b.n	4ef2 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    4ed2:	697b      	ldr	r3, [r7, #20]
    4ed4:	7a5b      	ldrb	r3, [r3, #9]
    4ed6:	b2db      	uxtb	r3, r3
    4ed8:	2b00      	cmp	r3, #0
    4eda:	d10a      	bne.n	4ef2 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    4edc:	230f      	movs	r3, #15
    4ede:	18fb      	adds	r3, r7, r3
    4ee0:	781b      	ldrb	r3, [r3, #0]
    4ee2:	2202      	movs	r2, #2
    4ee4:	4013      	ands	r3, r2
    4ee6:	d004      	beq.n	4ef2 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    4ee8:	697b      	ldr	r3, [r7, #20]
    4eea:	691b      	ldr	r3, [r3, #16]
    4eec:	697a      	ldr	r2, [r7, #20]
    4eee:	0010      	movs	r0, r2
    4ef0:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    4ef2:	230c      	movs	r3, #12
    4ef4:	18fb      	adds	r3, r7, r3
    4ef6:	881b      	ldrh	r3, [r3, #0]
    4ef8:	2202      	movs	r2, #2
    4efa:	4013      	ands	r3, r2
    4efc:	d024      	beq.n	4f48 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4efe:	697b      	ldr	r3, [r7, #20]
    4f00:	795b      	ldrb	r3, [r3, #5]
    4f02:	2b01      	cmp	r3, #1
    4f04:	d120      	bne.n	4f48 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4f06:	697b      	ldr	r3, [r7, #20]
    4f08:	7a5b      	ldrb	r3, [r3, #9]
    4f0a:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    4f0c:	2b01      	cmp	r3, #1
    4f0e:	d11b      	bne.n	4f48 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4f10:	697b      	ldr	r3, [r7, #20]
    4f12:	79db      	ldrb	r3, [r3, #7]
    4f14:	2201      	movs	r2, #1
    4f16:	4053      	eors	r3, r2
    4f18:	b2db      	uxtb	r3, r3
    4f1a:	2b00      	cmp	r3, #0
    4f1c:	d014      	beq.n	4f48 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4f1e:	693b      	ldr	r3, [r7, #16]
    4f20:	2202      	movs	r2, #2
    4f22:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    4f24:	697b      	ldr	r3, [r7, #20]
    4f26:	2203      	movs	r2, #3
    4f28:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    4f2a:	697b      	ldr	r3, [r7, #20]
    4f2c:	2238      	movs	r2, #56	; 0x38
    4f2e:	2100      	movs	r1, #0
    4f30:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    4f32:	230f      	movs	r3, #15
    4f34:	18fb      	adds	r3, r7, r3
    4f36:	781b      	ldrb	r3, [r3, #0]
    4f38:	2201      	movs	r2, #1
    4f3a:	4013      	ands	r3, r2
    4f3c:	d004      	beq.n	4f48 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    4f3e:	697b      	ldr	r3, [r7, #20]
    4f40:	68db      	ldr	r3, [r3, #12]
    4f42:	697a      	ldr	r2, [r7, #20]
    4f44:	0010      	movs	r0, r2
    4f46:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    4f48:	230c      	movs	r3, #12
    4f4a:	18fb      	adds	r3, r7, r3
    4f4c:	881b      	ldrh	r3, [r3, #0]
    4f4e:	2280      	movs	r2, #128	; 0x80
    4f50:	4013      	ands	r3, r2
    4f52:	d010      	beq.n	4f76 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4f54:	693b      	ldr	r3, [r7, #16]
    4f56:	2280      	movs	r2, #128	; 0x80
    4f58:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4f5a:	693b      	ldr	r3, [r7, #16]
    4f5c:	2280      	movs	r2, #128	; 0x80
    4f5e:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    4f60:	230f      	movs	r3, #15
    4f62:	18fb      	adds	r3, r7, r3
    4f64:	781b      	ldrb	r3, [r3, #0]
    4f66:	2240      	movs	r2, #64	; 0x40
    4f68:	4013      	ands	r3, r2
    4f6a:	d004      	beq.n	4f76 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    4f6c:	697b      	ldr	r3, [r7, #20]
    4f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4f70:	697a      	ldr	r2, [r7, #20]
    4f72:	0010      	movs	r0, r2
    4f74:	4798      	blx	r3
		}
	}
#  endif
}
    4f76:	46c0      	nop			; (mov r8, r8)
    4f78:	46bd      	mov	sp, r7
    4f7a:	b006      	add	sp, #24
    4f7c:	bd80      	pop	{r7, pc}
    4f7e:	46c0      	nop			; (mov r8, r8)
    4f80:	20000a10 	.word	0x20000a10
    4f84:	00004c39 	.word	0x00004c39
    4f88:	00004bbd 	.word	0x00004bbd
    4f8c:	00004c6d 	.word	0x00004c6d
    4f90:	00004ca3 	.word	0x00004ca3

00004f94 <system_gclk_chan_get_config_defaults>:
{
    4f94:	b580      	push	{r7, lr}
    4f96:	b082      	sub	sp, #8
    4f98:	af00      	add	r7, sp, #0
    4f9a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    4f9c:	687b      	ldr	r3, [r7, #4]
    4f9e:	2200      	movs	r2, #0
    4fa0:	701a      	strb	r2, [r3, #0]
}
    4fa2:	46c0      	nop			; (mov r8, r8)
    4fa4:	46bd      	mov	sp, r7
    4fa6:	b002      	add	sp, #8
    4fa8:	bd80      	pop	{r7, pc}
	...

00004fac <system_apb_clock_set_mask>:
{
    4fac:	b580      	push	{r7, lr}
    4fae:	b082      	sub	sp, #8
    4fb0:	af00      	add	r7, sp, #0
    4fb2:	0002      	movs	r2, r0
    4fb4:	6039      	str	r1, [r7, #0]
    4fb6:	1dfb      	adds	r3, r7, #7
    4fb8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4fba:	1dfb      	adds	r3, r7, #7
    4fbc:	781b      	ldrb	r3, [r3, #0]
    4fbe:	2b01      	cmp	r3, #1
    4fc0:	d00a      	beq.n	4fd8 <system_apb_clock_set_mask+0x2c>
    4fc2:	2b02      	cmp	r3, #2
    4fc4:	d00f      	beq.n	4fe6 <system_apb_clock_set_mask+0x3a>
    4fc6:	2b00      	cmp	r3, #0
    4fc8:	d114      	bne.n	4ff4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4fca:	4b0e      	ldr	r3, [pc, #56]	; (5004 <system_apb_clock_set_mask+0x58>)
    4fcc:	4a0d      	ldr	r2, [pc, #52]	; (5004 <system_apb_clock_set_mask+0x58>)
    4fce:	6991      	ldr	r1, [r2, #24]
    4fd0:	683a      	ldr	r2, [r7, #0]
    4fd2:	430a      	orrs	r2, r1
    4fd4:	619a      	str	r2, [r3, #24]
			break;
    4fd6:	e00f      	b.n	4ff8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4fd8:	4b0a      	ldr	r3, [pc, #40]	; (5004 <system_apb_clock_set_mask+0x58>)
    4fda:	4a0a      	ldr	r2, [pc, #40]	; (5004 <system_apb_clock_set_mask+0x58>)
    4fdc:	69d1      	ldr	r1, [r2, #28]
    4fde:	683a      	ldr	r2, [r7, #0]
    4fe0:	430a      	orrs	r2, r1
    4fe2:	61da      	str	r2, [r3, #28]
			break;
    4fe4:	e008      	b.n	4ff8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    4fe6:	4b07      	ldr	r3, [pc, #28]	; (5004 <system_apb_clock_set_mask+0x58>)
    4fe8:	4a06      	ldr	r2, [pc, #24]	; (5004 <system_apb_clock_set_mask+0x58>)
    4fea:	6a11      	ldr	r1, [r2, #32]
    4fec:	683a      	ldr	r2, [r7, #0]
    4fee:	430a      	orrs	r2, r1
    4ff0:	621a      	str	r2, [r3, #32]
			break;
    4ff2:	e001      	b.n	4ff8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4ff4:	2317      	movs	r3, #23
    4ff6:	e000      	b.n	4ffa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4ff8:	2300      	movs	r3, #0
}
    4ffa:	0018      	movs	r0, r3
    4ffc:	46bd      	mov	sp, r7
    4ffe:	b002      	add	sp, #8
    5000:	bd80      	pop	{r7, pc}
    5002:	46c0      	nop			; (mov r8, r8)
    5004:	40000400 	.word	0x40000400

00005008 <system_pinmux_get_config_defaults>:
{
    5008:	b580      	push	{r7, lr}
    500a:	b082      	sub	sp, #8
    500c:	af00      	add	r7, sp, #0
    500e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5010:	687b      	ldr	r3, [r7, #4]
    5012:	2280      	movs	r2, #128	; 0x80
    5014:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5016:	687b      	ldr	r3, [r7, #4]
    5018:	2200      	movs	r2, #0
    501a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    501c:	687b      	ldr	r3, [r7, #4]
    501e:	2201      	movs	r2, #1
    5020:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5022:	687b      	ldr	r3, [r7, #4]
    5024:	2200      	movs	r2, #0
    5026:	70da      	strb	r2, [r3, #3]
}
    5028:	46c0      	nop			; (mov r8, r8)
    502a:	46bd      	mov	sp, r7
    502c:	b002      	add	sp, #8
    502e:	bd80      	pop	{r7, pc}

00005030 <system_is_debugger_present>:
{
    5030:	b580      	push	{r7, lr}
    5032:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    5034:	4b05      	ldr	r3, [pc, #20]	; (504c <system_is_debugger_present+0x1c>)
    5036:	789b      	ldrb	r3, [r3, #2]
    5038:	b2db      	uxtb	r3, r3
    503a:	001a      	movs	r2, r3
    503c:	2302      	movs	r3, #2
    503e:	4013      	ands	r3, r2
    5040:	1e5a      	subs	r2, r3, #1
    5042:	4193      	sbcs	r3, r2
    5044:	b2db      	uxtb	r3, r3
}
    5046:	0018      	movs	r0, r3
    5048:	46bd      	mov	sp, r7
    504a:	bd80      	pop	{r7, pc}
    504c:	41002000 	.word	0x41002000

00005050 <usart_is_syncing>:
{
    5050:	b580      	push	{r7, lr}
    5052:	b084      	sub	sp, #16
    5054:	af00      	add	r7, sp, #0
    5056:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5058:	687b      	ldr	r3, [r7, #4]
    505a:	681b      	ldr	r3, [r3, #0]
    505c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    505e:	68fb      	ldr	r3, [r7, #12]
    5060:	69db      	ldr	r3, [r3, #28]
    5062:	1e5a      	subs	r2, r3, #1
    5064:	4193      	sbcs	r3, r2
    5066:	b2db      	uxtb	r3, r3
}
    5068:	0018      	movs	r0, r3
    506a:	46bd      	mov	sp, r7
    506c:	b004      	add	sp, #16
    506e:	bd80      	pop	{r7, pc}

00005070 <_usart_wait_for_sync>:
{
    5070:	b580      	push	{r7, lr}
    5072:	b082      	sub	sp, #8
    5074:	af00      	add	r7, sp, #0
    5076:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    5078:	46c0      	nop			; (mov r8, r8)
    507a:	687b      	ldr	r3, [r7, #4]
    507c:	0018      	movs	r0, r3
    507e:	4b04      	ldr	r3, [pc, #16]	; (5090 <_usart_wait_for_sync+0x20>)
    5080:	4798      	blx	r3
    5082:	1e03      	subs	r3, r0, #0
    5084:	d1f9      	bne.n	507a <_usart_wait_for_sync+0xa>
}
    5086:	46c0      	nop			; (mov r8, r8)
    5088:	46bd      	mov	sp, r7
    508a:	b002      	add	sp, #8
    508c:	bd80      	pop	{r7, pc}
    508e:	46c0      	nop			; (mov r8, r8)
    5090:	00005051 	.word	0x00005051

00005094 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    5094:	b5b0      	push	{r4, r5, r7, lr}
    5096:	b08c      	sub	sp, #48	; 0x30
    5098:	af02      	add	r7, sp, #8
    509a:	6078      	str	r0, [r7, #4]
    509c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    509e:	687b      	ldr	r3, [r7, #4]
    50a0:	681b      	ldr	r3, [r3, #0]
    50a2:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    50a4:	687b      	ldr	r3, [r7, #4]
    50a6:	681b      	ldr	r3, [r3, #0]
    50a8:	0018      	movs	r0, r3
    50aa:	4bab      	ldr	r3, [pc, #684]	; (5358 <_usart_set_config+0x2c4>)
    50ac:	4798      	blx	r3
    50ae:	0003      	movs	r3, r0
    50b0:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    50b2:	697b      	ldr	r3, [r7, #20]
    50b4:	3314      	adds	r3, #20
    50b6:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    50b8:	2300      	movs	r3, #0
    50ba:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    50bc:	2300      	movs	r3, #0
    50be:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    50c0:	230a      	movs	r3, #10
    50c2:	18fb      	adds	r3, r7, r3
    50c4:	2200      	movs	r2, #0
    50c6:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    50c8:	231f      	movs	r3, #31
    50ca:	18fb      	adds	r3, r7, r3
    50cc:	2200      	movs	r2, #0
    50ce:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    50d0:	231e      	movs	r3, #30
    50d2:	18fb      	adds	r3, r7, r3
    50d4:	2210      	movs	r2, #16
    50d6:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    50d8:	683b      	ldr	r3, [r7, #0]
    50da:	8a1b      	ldrh	r3, [r3, #16]
    50dc:	2280      	movs	r2, #128	; 0x80
    50de:	01d2      	lsls	r2, r2, #7
    50e0:	4293      	cmp	r3, r2
    50e2:	d01c      	beq.n	511e <_usart_set_config+0x8a>
    50e4:	2280      	movs	r2, #128	; 0x80
    50e6:	01d2      	lsls	r2, r2, #7
    50e8:	4293      	cmp	r3, r2
    50ea:	dc06      	bgt.n	50fa <_usart_set_config+0x66>
    50ec:	2b00      	cmp	r3, #0
    50ee:	d00d      	beq.n	510c <_usart_set_config+0x78>
    50f0:	2280      	movs	r2, #128	; 0x80
    50f2:	0192      	lsls	r2, r2, #6
    50f4:	4293      	cmp	r3, r2
    50f6:	d024      	beq.n	5142 <_usart_set_config+0xae>
    50f8:	e035      	b.n	5166 <_usart_set_config+0xd2>
    50fa:	22c0      	movs	r2, #192	; 0xc0
    50fc:	01d2      	lsls	r2, r2, #7
    50fe:	4293      	cmp	r3, r2
    5100:	d028      	beq.n	5154 <_usart_set_config+0xc0>
    5102:	2280      	movs	r2, #128	; 0x80
    5104:	0212      	lsls	r2, r2, #8
    5106:	4293      	cmp	r3, r2
    5108:	d012      	beq.n	5130 <_usart_set_config+0x9c>
    510a:	e02c      	b.n	5166 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    510c:	231f      	movs	r3, #31
    510e:	18fb      	adds	r3, r7, r3
    5110:	2200      	movs	r2, #0
    5112:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5114:	231e      	movs	r3, #30
    5116:	18fb      	adds	r3, r7, r3
    5118:	2210      	movs	r2, #16
    511a:	701a      	strb	r2, [r3, #0]
			break;
    511c:	e023      	b.n	5166 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    511e:	231f      	movs	r3, #31
    5120:	18fb      	adds	r3, r7, r3
    5122:	2200      	movs	r2, #0
    5124:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5126:	231e      	movs	r3, #30
    5128:	18fb      	adds	r3, r7, r3
    512a:	2208      	movs	r2, #8
    512c:	701a      	strb	r2, [r3, #0]
			break;
    512e:	e01a      	b.n	5166 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5130:	231f      	movs	r3, #31
    5132:	18fb      	adds	r3, r7, r3
    5134:	2200      	movs	r2, #0
    5136:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    5138:	231e      	movs	r3, #30
    513a:	18fb      	adds	r3, r7, r3
    513c:	2203      	movs	r2, #3
    513e:	701a      	strb	r2, [r3, #0]
			break;
    5140:	e011      	b.n	5166 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5142:	231f      	movs	r3, #31
    5144:	18fb      	adds	r3, r7, r3
    5146:	2201      	movs	r2, #1
    5148:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    514a:	231e      	movs	r3, #30
    514c:	18fb      	adds	r3, r7, r3
    514e:	2210      	movs	r2, #16
    5150:	701a      	strb	r2, [r3, #0]
			break;
    5152:	e008      	b.n	5166 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5154:	231f      	movs	r3, #31
    5156:	18fb      	adds	r3, r7, r3
    5158:	2201      	movs	r2, #1
    515a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    515c:	231e      	movs	r3, #30
    515e:	18fb      	adds	r3, r7, r3
    5160:	2208      	movs	r2, #8
    5162:	701a      	strb	r2, [r3, #0]
			break;
    5164:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    5166:	683b      	ldr	r3, [r7, #0]
    5168:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    516a:	683b      	ldr	r3, [r7, #0]
    516c:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    516e:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    5170:	683b      	ldr	r3, [r7, #0]
    5172:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    5174:	4313      	orrs	r3, r2
		config->sample_rate |
    5176:	683a      	ldr	r2, [r7, #0]
    5178:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    517a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    517c:	683a      	ldr	r2, [r7, #0]
    517e:	7e12      	ldrb	r2, [r2, #24]
    5180:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    5182:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5184:	683a      	ldr	r2, [r7, #0]
    5186:	2126      	movs	r1, #38	; 0x26
    5188:	5c52      	ldrb	r2, [r2, r1]
    518a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    518c:	4313      	orrs	r3, r2
    518e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    5190:	231d      	movs	r3, #29
    5192:	18fb      	adds	r3, r7, r3
    5194:	2200      	movs	r2, #0
    5196:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    5198:	683b      	ldr	r3, [r7, #0]
    519a:	685b      	ldr	r3, [r3, #4]
    519c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    519e:	68fb      	ldr	r3, [r7, #12]
    51a0:	2b00      	cmp	r3, #0
    51a2:	d01e      	beq.n	51e2 <_usart_set_config+0x14e>
    51a4:	2280      	movs	r2, #128	; 0x80
    51a6:	0552      	lsls	r2, r2, #21
    51a8:	4293      	cmp	r3, r2
    51aa:	d14f      	bne.n	524c <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    51ac:	683b      	ldr	r3, [r7, #0]
    51ae:	2227      	movs	r2, #39	; 0x27
    51b0:	5c9b      	ldrb	r3, [r3, r2]
    51b2:	2201      	movs	r2, #1
    51b4:	4053      	eors	r3, r2
    51b6:	b2db      	uxtb	r3, r3
    51b8:	2b00      	cmp	r3, #0
    51ba:	d046      	beq.n	524a <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    51bc:	683b      	ldr	r3, [r7, #0]
    51be:	6a1d      	ldr	r5, [r3, #32]
    51c0:	693b      	ldr	r3, [r7, #16]
    51c2:	b2db      	uxtb	r3, r3
    51c4:	0018      	movs	r0, r3
    51c6:	4b65      	ldr	r3, [pc, #404]	; (535c <_usart_set_config+0x2c8>)
    51c8:	4798      	blx	r3
    51ca:	0001      	movs	r1, r0
    51cc:	231d      	movs	r3, #29
    51ce:	18fc      	adds	r4, r7, r3
    51d0:	230a      	movs	r3, #10
    51d2:	18fb      	adds	r3, r7, r3
    51d4:	001a      	movs	r2, r3
    51d6:	0028      	movs	r0, r5
    51d8:	4b61      	ldr	r3, [pc, #388]	; (5360 <_usart_set_config+0x2cc>)
    51da:	4798      	blx	r3
    51dc:	0003      	movs	r3, r0
    51de:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    51e0:	e033      	b.n	524a <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    51e2:	683b      	ldr	r3, [r7, #0]
    51e4:	2227      	movs	r2, #39	; 0x27
    51e6:	5c9b      	ldrb	r3, [r3, r2]
    51e8:	2b00      	cmp	r3, #0
    51ea:	d014      	beq.n	5216 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    51ec:	683b      	ldr	r3, [r7, #0]
    51ee:	6a18      	ldr	r0, [r3, #32]
    51f0:	683b      	ldr	r3, [r7, #0]
    51f2:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    51f4:	231d      	movs	r3, #29
    51f6:	18fc      	adds	r4, r7, r3
    51f8:	231f      	movs	r3, #31
    51fa:	18fb      	adds	r3, r7, r3
    51fc:	781d      	ldrb	r5, [r3, #0]
    51fe:	230a      	movs	r3, #10
    5200:	18fa      	adds	r2, r7, r3
    5202:	231e      	movs	r3, #30
    5204:	18fb      	adds	r3, r7, r3
    5206:	781b      	ldrb	r3, [r3, #0]
    5208:	9300      	str	r3, [sp, #0]
    520a:	002b      	movs	r3, r5
    520c:	4d55      	ldr	r5, [pc, #340]	; (5364 <_usart_set_config+0x2d0>)
    520e:	47a8      	blx	r5
    5210:	0003      	movs	r3, r0
    5212:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    5214:	e01a      	b.n	524c <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    5216:	683b      	ldr	r3, [r7, #0]
    5218:	6a1d      	ldr	r5, [r3, #32]
    521a:	693b      	ldr	r3, [r7, #16]
    521c:	b2db      	uxtb	r3, r3
    521e:	0018      	movs	r0, r3
    5220:	4b4e      	ldr	r3, [pc, #312]	; (535c <_usart_set_config+0x2c8>)
    5222:	4798      	blx	r3
				status_code =
    5224:	231d      	movs	r3, #29
    5226:	18fc      	adds	r4, r7, r3
    5228:	231f      	movs	r3, #31
    522a:	18fb      	adds	r3, r7, r3
    522c:	7819      	ldrb	r1, [r3, #0]
    522e:	230a      	movs	r3, #10
    5230:	18fa      	adds	r2, r7, r3
    5232:	231e      	movs	r3, #30
    5234:	18fb      	adds	r3, r7, r3
    5236:	781b      	ldrb	r3, [r3, #0]
    5238:	9300      	str	r3, [sp, #0]
    523a:	000b      	movs	r3, r1
    523c:	0001      	movs	r1, r0
    523e:	0028      	movs	r0, r5
    5240:	4d48      	ldr	r5, [pc, #288]	; (5364 <_usart_set_config+0x2d0>)
    5242:	47a8      	blx	r5
    5244:	0003      	movs	r3, r0
    5246:	7023      	strb	r3, [r4, #0]
			break;
    5248:	e000      	b.n	524c <_usart_set_config+0x1b8>
			break;
    524a:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    524c:	231d      	movs	r3, #29
    524e:	18fb      	adds	r3, r7, r3
    5250:	781b      	ldrb	r3, [r3, #0]
    5252:	2b00      	cmp	r3, #0
    5254:	d003      	beq.n	525e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    5256:	231d      	movs	r3, #29
    5258:	18fb      	adds	r3, r7, r3
    525a:	781b      	ldrb	r3, [r3, #0]
    525c:	e077      	b.n	534e <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    525e:	683b      	ldr	r3, [r7, #0]
    5260:	7e5b      	ldrb	r3, [r3, #25]
    5262:	2b00      	cmp	r3, #0
    5264:	d003      	beq.n	526e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    5266:	683b      	ldr	r3, [r7, #0]
    5268:	7e9a      	ldrb	r2, [r3, #26]
    526a:	69bb      	ldr	r3, [r7, #24]
    526c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    526e:	687b      	ldr	r3, [r7, #4]
    5270:	0018      	movs	r0, r3
    5272:	4b3d      	ldr	r3, [pc, #244]	; (5368 <_usart_set_config+0x2d4>)
    5274:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    5276:	230a      	movs	r3, #10
    5278:	18fb      	adds	r3, r7, r3
    527a:	881a      	ldrh	r2, [r3, #0]
    527c:	69bb      	ldr	r3, [r7, #24]
    527e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    5280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5282:	68fb      	ldr	r3, [r7, #12]
    5284:	4313      	orrs	r3, r2
    5286:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    5288:	683b      	ldr	r3, [r7, #0]
    528a:	2227      	movs	r2, #39	; 0x27
    528c:	5c9b      	ldrb	r3, [r3, r2]
    528e:	2201      	movs	r2, #1
    5290:	4053      	eors	r3, r2
    5292:	b2db      	uxtb	r3, r3
    5294:	2b00      	cmp	r3, #0
    5296:	d003      	beq.n	52a0 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    5298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    529a:	2204      	movs	r2, #4
    529c:	4313      	orrs	r3, r2
    529e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    52a0:	683b      	ldr	r3, [r7, #0]
    52a2:	7e5b      	ldrb	r3, [r3, #25]
    52a4:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    52a6:	683b      	ldr	r3, [r7, #0]
    52a8:	7f1b      	ldrb	r3, [r3, #28]
    52aa:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    52ac:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    52ae:	683b      	ldr	r3, [r7, #0]
    52b0:	7f5b      	ldrb	r3, [r3, #29]
    52b2:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    52b4:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    52b6:	683b      	ldr	r3, [r7, #0]
    52b8:	2124      	movs	r1, #36	; 0x24
    52ba:	5c5b      	ldrb	r3, [r3, r1]
    52bc:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    52be:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    52c0:	683b      	ldr	r3, [r7, #0]
    52c2:	2125      	movs	r1, #37	; 0x25
    52c4:	5c5b      	ldrb	r3, [r3, r1]
    52c6:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    52c8:	4313      	orrs	r3, r2
	ctrlb =  
    52ca:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    52cc:	683b      	ldr	r3, [r7, #0]
    52ce:	7a9b      	ldrb	r3, [r3, #10]
    52d0:	001a      	movs	r2, r3
    52d2:	6a3b      	ldr	r3, [r7, #32]
    52d4:	4313      	orrs	r3, r2
    52d6:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    52d8:	683b      	ldr	r3, [r7, #0]
    52da:	7adb      	ldrb	r3, [r3, #11]
    52dc:	001a      	movs	r2, r3
    52de:	6a3b      	ldr	r3, [r7, #32]
    52e0:	4313      	orrs	r3, r2
    52e2:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    52e4:	683b      	ldr	r3, [r7, #0]
    52e6:	891b      	ldrh	r3, [r3, #8]
    52e8:	2bff      	cmp	r3, #255	; 0xff
    52ea:	d00b      	beq.n	5304 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    52ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    52ee:	2280      	movs	r2, #128	; 0x80
    52f0:	0452      	lsls	r2, r2, #17
    52f2:	4313      	orrs	r3, r2
    52f4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    52f6:	683b      	ldr	r3, [r7, #0]
    52f8:	891b      	ldrh	r3, [r3, #8]
    52fa:	001a      	movs	r2, r3
    52fc:	6a3b      	ldr	r3, [r7, #32]
    52fe:	4313      	orrs	r3, r2
    5300:	623b      	str	r3, [r7, #32]
    5302:	e008      	b.n	5316 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    5304:	683b      	ldr	r3, [r7, #0]
    5306:	7edb      	ldrb	r3, [r3, #27]
    5308:	2b00      	cmp	r3, #0
    530a:	d004      	beq.n	5316 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    530e:	2280      	movs	r2, #128	; 0x80
    5310:	04d2      	lsls	r2, r2, #19
    5312:	4313      	orrs	r3, r2
    5314:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    5316:	683b      	ldr	r3, [r7, #0]
    5318:	222c      	movs	r2, #44	; 0x2c
    531a:	5c9b      	ldrb	r3, [r3, r2]
    531c:	2b00      	cmp	r3, #0
    531e:	d103      	bne.n	5328 <_usart_set_config+0x294>
    5320:	4b12      	ldr	r3, [pc, #72]	; (536c <_usart_set_config+0x2d8>)
    5322:	4798      	blx	r3
    5324:	1e03      	subs	r3, r0, #0
    5326:	d003      	beq.n	5330 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    5328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    532a:	2280      	movs	r2, #128	; 0x80
    532c:	4313      	orrs	r3, r2
    532e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5330:	687b      	ldr	r3, [r7, #4]
    5332:	0018      	movs	r0, r3
    5334:	4b0c      	ldr	r3, [pc, #48]	; (5368 <_usart_set_config+0x2d4>)
    5336:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    5338:	69bb      	ldr	r3, [r7, #24]
    533a:	6a3a      	ldr	r2, [r7, #32]
    533c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    533e:	687b      	ldr	r3, [r7, #4]
    5340:	0018      	movs	r0, r3
    5342:	4b09      	ldr	r3, [pc, #36]	; (5368 <_usart_set_config+0x2d4>)
    5344:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    5346:	69bb      	ldr	r3, [r7, #24]
    5348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    534a:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    534c:	2300      	movs	r3, #0
}
    534e:	0018      	movs	r0, r3
    5350:	46bd      	mov	sp, r7
    5352:	b00a      	add	sp, #40	; 0x28
    5354:	bdb0      	pop	{r4, r5, r7, pc}
    5356:	46c0      	nop			; (mov r8, r8)
    5358:	00003dfd 	.word	0x00003dfd
    535c:	00006a35 	.word	0x00006a35
    5360:	00003977 	.word	0x00003977
    5364:	000039f5 	.word	0x000039f5
    5368:	00005071 	.word	0x00005071
    536c:	00005031 	.word	0x00005031

00005370 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    5370:	b590      	push	{r4, r7, lr}
    5372:	b093      	sub	sp, #76	; 0x4c
    5374:	af00      	add	r7, sp, #0
    5376:	60f8      	str	r0, [r7, #12]
    5378:	60b9      	str	r1, [r7, #8]
    537a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    537c:	233b      	movs	r3, #59	; 0x3b
    537e:	18fb      	adds	r3, r7, r3
    5380:	2200      	movs	r2, #0
    5382:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    5384:	68fb      	ldr	r3, [r7, #12]
    5386:	68ba      	ldr	r2, [r7, #8]
    5388:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    538a:	68fb      	ldr	r3, [r7, #12]
    538c:	681b      	ldr	r3, [r3, #0]
    538e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5390:	68fb      	ldr	r3, [r7, #12]
    5392:	681b      	ldr	r3, [r3, #0]
    5394:	0018      	movs	r0, r3
    5396:	4b86      	ldr	r3, [pc, #536]	; (55b0 <usart_init+0x240>)
    5398:	4798      	blx	r3
    539a:	0003      	movs	r3, r0
    539c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    53a0:	3302      	adds	r3, #2
    53a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    53a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    53a6:	3314      	adds	r3, #20
    53a8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    53aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53ac:	681b      	ldr	r3, [r3, #0]
    53ae:	2201      	movs	r2, #1
    53b0:	4013      	ands	r3, r2
    53b2:	d001      	beq.n	53b8 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    53b4:	2305      	movs	r3, #5
    53b6:	e0f6      	b.n	55a6 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    53b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    53ba:	681b      	ldr	r3, [r3, #0]
    53bc:	2202      	movs	r2, #2
    53be:	4013      	ands	r3, r2
    53c0:	d001      	beq.n	53c6 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    53c2:	231c      	movs	r3, #28
    53c4:	e0ef      	b.n	55a6 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    53c6:	2201      	movs	r2, #1
    53c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    53ca:	409a      	lsls	r2, r3
    53cc:	0013      	movs	r3, r2
    53ce:	0019      	movs	r1, r3
    53d0:	2002      	movs	r0, #2
    53d2:	4b78      	ldr	r3, [pc, #480]	; (55b4 <usart_init+0x244>)
    53d4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    53d6:	2324      	movs	r3, #36	; 0x24
    53d8:	18fb      	adds	r3, r7, r3
    53da:	0018      	movs	r0, r3
    53dc:	4b76      	ldr	r3, [pc, #472]	; (55b8 <usart_init+0x248>)
    53de:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    53e0:	687b      	ldr	r3, [r7, #4]
    53e2:	222d      	movs	r2, #45	; 0x2d
    53e4:	5c9a      	ldrb	r2, [r3, r2]
    53e6:	2324      	movs	r3, #36	; 0x24
    53e8:	18fb      	adds	r3, r7, r3
    53ea:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    53ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    53ee:	b2db      	uxtb	r3, r3
    53f0:	2224      	movs	r2, #36	; 0x24
    53f2:	18ba      	adds	r2, r7, r2
    53f4:	0011      	movs	r1, r2
    53f6:	0018      	movs	r0, r3
    53f8:	4b70      	ldr	r3, [pc, #448]	; (55bc <usart_init+0x24c>)
    53fa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    53fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    53fe:	b2db      	uxtb	r3, r3
    5400:	0018      	movs	r0, r3
    5402:	4b6f      	ldr	r3, [pc, #444]	; (55c0 <usart_init+0x250>)
    5404:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5406:	687b      	ldr	r3, [r7, #4]
    5408:	222d      	movs	r2, #45	; 0x2d
    540a:	5c9b      	ldrb	r3, [r3, r2]
    540c:	2100      	movs	r1, #0
    540e:	0018      	movs	r0, r3
    5410:	4b6c      	ldr	r3, [pc, #432]	; (55c4 <usart_init+0x254>)
    5412:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    5414:	687b      	ldr	r3, [r7, #4]
    5416:	7ada      	ldrb	r2, [r3, #11]
    5418:	68fb      	ldr	r3, [r7, #12]
    541a:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    541c:	687b      	ldr	r3, [r7, #4]
    541e:	2224      	movs	r2, #36	; 0x24
    5420:	5c9a      	ldrb	r2, [r3, r2]
    5422:	68fb      	ldr	r3, [r7, #12]
    5424:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    5426:	687b      	ldr	r3, [r7, #4]
    5428:	2225      	movs	r2, #37	; 0x25
    542a:	5c9a      	ldrb	r2, [r3, r2]
    542c:	68fb      	ldr	r3, [r7, #12]
    542e:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    5430:	687b      	ldr	r3, [r7, #4]
    5432:	7eda      	ldrb	r2, [r3, #27]
    5434:	68fb      	ldr	r3, [r7, #12]
    5436:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    5438:	687b      	ldr	r3, [r7, #4]
    543a:	7f1a      	ldrb	r2, [r3, #28]
    543c:	68fb      	ldr	r3, [r7, #12]
    543e:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    5440:	233b      	movs	r3, #59	; 0x3b
    5442:	18fc      	adds	r4, r7, r3
    5444:	687a      	ldr	r2, [r7, #4]
    5446:	68fb      	ldr	r3, [r7, #12]
    5448:	0011      	movs	r1, r2
    544a:	0018      	movs	r0, r3
    544c:	4b5e      	ldr	r3, [pc, #376]	; (55c8 <usart_init+0x258>)
    544e:	4798      	blx	r3
    5450:	0003      	movs	r3, r0
    5452:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    5454:	233b      	movs	r3, #59	; 0x3b
    5456:	18fb      	adds	r3, r7, r3
    5458:	781b      	ldrb	r3, [r3, #0]
    545a:	2b00      	cmp	r3, #0
    545c:	d003      	beq.n	5466 <usart_init+0xf6>
		return status_code;
    545e:	233b      	movs	r3, #59	; 0x3b
    5460:	18fb      	adds	r3, r7, r3
    5462:	781b      	ldrb	r3, [r3, #0]
    5464:	e09f      	b.n	55a6 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    5466:	2320      	movs	r3, #32
    5468:	18fb      	adds	r3, r7, r3
    546a:	0018      	movs	r0, r3
    546c:	4b57      	ldr	r3, [pc, #348]	; (55cc <usart_init+0x25c>)
    546e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5470:	2320      	movs	r3, #32
    5472:	18fb      	adds	r3, r7, r3
    5474:	2200      	movs	r2, #0
    5476:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5478:	2320      	movs	r3, #32
    547a:	18fb      	adds	r3, r7, r3
    547c:	2200      	movs	r2, #0
    547e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    5480:	687b      	ldr	r3, [r7, #4]
    5482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    5484:	2310      	movs	r3, #16
    5486:	18fb      	adds	r3, r7, r3
    5488:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    548a:	687b      	ldr	r3, [r7, #4]
    548c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    548e:	2310      	movs	r3, #16
    5490:	18fb      	adds	r3, r7, r3
    5492:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    5494:	687b      	ldr	r3, [r7, #4]
    5496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    5498:	2310      	movs	r3, #16
    549a:	18fb      	adds	r3, r7, r3
    549c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    549e:	687b      	ldr	r3, [r7, #4]
    54a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    54a2:	2310      	movs	r3, #16
    54a4:	18fb      	adds	r3, r7, r3
    54a6:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    54a8:	2347      	movs	r3, #71	; 0x47
    54aa:	18fb      	adds	r3, r7, r3
    54ac:	2200      	movs	r2, #0
    54ae:	701a      	strb	r2, [r3, #0]
    54b0:	e02c      	b.n	550c <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    54b2:	2347      	movs	r3, #71	; 0x47
    54b4:	18fb      	adds	r3, r7, r3
    54b6:	781a      	ldrb	r2, [r3, #0]
    54b8:	2310      	movs	r3, #16
    54ba:	18fb      	adds	r3, r7, r3
    54bc:	0092      	lsls	r2, r2, #2
    54be:	58d3      	ldr	r3, [r2, r3]
    54c0:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    54c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    54c4:	2b00      	cmp	r3, #0
    54c6:	d109      	bne.n	54dc <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    54c8:	2347      	movs	r3, #71	; 0x47
    54ca:	18fb      	adds	r3, r7, r3
    54cc:	781a      	ldrb	r2, [r3, #0]
    54ce:	68bb      	ldr	r3, [r7, #8]
    54d0:	0011      	movs	r1, r2
    54d2:	0018      	movs	r0, r3
    54d4:	4b3e      	ldr	r3, [pc, #248]	; (55d0 <usart_init+0x260>)
    54d6:	4798      	blx	r3
    54d8:	0003      	movs	r3, r0
    54da:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    54dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    54de:	3301      	adds	r3, #1
    54e0:	d00d      	beq.n	54fe <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    54e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    54e4:	b2da      	uxtb	r2, r3
    54e6:	2320      	movs	r3, #32
    54e8:	18fb      	adds	r3, r7, r3
    54ea:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    54ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    54ee:	0c1b      	lsrs	r3, r3, #16
    54f0:	b2db      	uxtb	r3, r3
    54f2:	2220      	movs	r2, #32
    54f4:	18ba      	adds	r2, r7, r2
    54f6:	0011      	movs	r1, r2
    54f8:	0018      	movs	r0, r3
    54fa:	4b36      	ldr	r3, [pc, #216]	; (55d4 <usart_init+0x264>)
    54fc:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    54fe:	2347      	movs	r3, #71	; 0x47
    5500:	18fb      	adds	r3, r7, r3
    5502:	781a      	ldrb	r2, [r3, #0]
    5504:	2347      	movs	r3, #71	; 0x47
    5506:	18fb      	adds	r3, r7, r3
    5508:	3201      	adds	r2, #1
    550a:	701a      	strb	r2, [r3, #0]
    550c:	2347      	movs	r3, #71	; 0x47
    550e:	18fb      	adds	r3, r7, r3
    5510:	781b      	ldrb	r3, [r3, #0]
    5512:	2b03      	cmp	r3, #3
    5514:	d9cd      	bls.n	54b2 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    5516:	2300      	movs	r3, #0
    5518:	63fb      	str	r3, [r7, #60]	; 0x3c
    551a:	e00a      	b.n	5532 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    551c:	68fa      	ldr	r2, [r7, #12]
    551e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5520:	3302      	adds	r3, #2
    5522:	009b      	lsls	r3, r3, #2
    5524:	18d3      	adds	r3, r2, r3
    5526:	3304      	adds	r3, #4
    5528:	2200      	movs	r2, #0
    552a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    552c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    552e:	3301      	adds	r3, #1
    5530:	63fb      	str	r3, [r7, #60]	; 0x3c
    5532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5534:	2b05      	cmp	r3, #5
    5536:	d9f1      	bls.n	551c <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    5538:	68fb      	ldr	r3, [r7, #12]
    553a:	2200      	movs	r2, #0
    553c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    553e:	68fb      	ldr	r3, [r7, #12]
    5540:	2200      	movs	r2, #0
    5542:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    5544:	68fb      	ldr	r3, [r7, #12]
    5546:	2200      	movs	r2, #0
    5548:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    554a:	68fb      	ldr	r3, [r7, #12]
    554c:	2200      	movs	r2, #0
    554e:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    5550:	68fb      	ldr	r3, [r7, #12]
    5552:	2230      	movs	r2, #48	; 0x30
    5554:	2100      	movs	r1, #0
    5556:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    5558:	68fb      	ldr	r3, [r7, #12]
    555a:	2231      	movs	r2, #49	; 0x31
    555c:	2100      	movs	r1, #0
    555e:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    5560:	68fb      	ldr	r3, [r7, #12]
    5562:	2232      	movs	r2, #50	; 0x32
    5564:	2100      	movs	r1, #0
    5566:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    5568:	68fb      	ldr	r3, [r7, #12]
    556a:	2233      	movs	r2, #51	; 0x33
    556c:	2100      	movs	r1, #0
    556e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    5570:	68fb      	ldr	r3, [r7, #12]
    5572:	681b      	ldr	r3, [r3, #0]
    5574:	2227      	movs	r2, #39	; 0x27
    5576:	18bc      	adds	r4, r7, r2
    5578:	0018      	movs	r0, r3
    557a:	4b0d      	ldr	r3, [pc, #52]	; (55b0 <usart_init+0x240>)
    557c:	4798      	blx	r3
    557e:	0003      	movs	r3, r0
    5580:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    5582:	4a15      	ldr	r2, [pc, #84]	; (55d8 <usart_init+0x268>)
    5584:	2327      	movs	r3, #39	; 0x27
    5586:	18fb      	adds	r3, r7, r3
    5588:	781b      	ldrb	r3, [r3, #0]
    558a:	0011      	movs	r1, r2
    558c:	0018      	movs	r0, r3
    558e:	4b13      	ldr	r3, [pc, #76]	; (55dc <usart_init+0x26c>)
    5590:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5592:	2327      	movs	r3, #39	; 0x27
    5594:	18fb      	adds	r3, r7, r3
    5596:	781a      	ldrb	r2, [r3, #0]
    5598:	4b11      	ldr	r3, [pc, #68]	; (55e0 <usart_init+0x270>)
    559a:	0092      	lsls	r2, r2, #2
    559c:	68f9      	ldr	r1, [r7, #12]
    559e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    55a0:	233b      	movs	r3, #59	; 0x3b
    55a2:	18fb      	adds	r3, r7, r3
    55a4:	781b      	ldrb	r3, [r3, #0]
}
    55a6:	0018      	movs	r0, r3
    55a8:	46bd      	mov	sp, r7
    55aa:	b013      	add	sp, #76	; 0x4c
    55ac:	bd90      	pop	{r4, r7, pc}
    55ae:	46c0      	nop			; (mov r8, r8)
    55b0:	00003dfd 	.word	0x00003dfd
    55b4:	00004fad 	.word	0x00004fad
    55b8:	00004f95 	.word	0x00004f95
    55bc:	00006911 	.word	0x00006911
    55c0:	00006955 	.word	0x00006955
    55c4:	00003bb5 	.word	0x00003bb5
    55c8:	00005095 	.word	0x00005095
    55cc:	00005009 	.word	0x00005009
    55d0:	00003c41 	.word	0x00003c41
    55d4:	00006bfd 	.word	0x00006bfd
    55d8:	0000599d 	.word	0x0000599d
    55dc:	00003e61 	.word	0x00003e61
    55e0:	20000a10 	.word	0x20000a10

000055e4 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    55e4:	b580      	push	{r7, lr}
    55e6:	b084      	sub	sp, #16
    55e8:	af00      	add	r7, sp, #0
    55ea:	6078      	str	r0, [r7, #4]
    55ec:	000a      	movs	r2, r1
    55ee:	1cbb      	adds	r3, r7, #2
    55f0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    55f2:	687b      	ldr	r3, [r7, #4]
    55f4:	681b      	ldr	r3, [r3, #0]
    55f6:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    55f8:	687b      	ldr	r3, [r7, #4]
    55fa:	79db      	ldrb	r3, [r3, #7]
    55fc:	2201      	movs	r2, #1
    55fe:	4053      	eors	r3, r2
    5600:	b2db      	uxtb	r3, r3
    5602:	2b00      	cmp	r3, #0
    5604:	d001      	beq.n	560a <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    5606:	231c      	movs	r3, #28
    5608:	e017      	b.n	563a <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    560a:	687b      	ldr	r3, [r7, #4]
    560c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    560e:	b29b      	uxth	r3, r3
    5610:	2b00      	cmp	r3, #0
    5612:	d001      	beq.n	5618 <usart_write_wait+0x34>
		return STATUS_BUSY;
    5614:	2305      	movs	r3, #5
    5616:	e010      	b.n	563a <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5618:	687b      	ldr	r3, [r7, #4]
    561a:	0018      	movs	r0, r3
    561c:	4b09      	ldr	r3, [pc, #36]	; (5644 <usart_write_wait+0x60>)
    561e:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    5620:	68fb      	ldr	r3, [r7, #12]
    5622:	1cba      	adds	r2, r7, #2
    5624:	8812      	ldrh	r2, [r2, #0]
    5626:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    5628:	46c0      	nop			; (mov r8, r8)
    562a:	68fb      	ldr	r3, [r7, #12]
    562c:	7e1b      	ldrb	r3, [r3, #24]
    562e:	b2db      	uxtb	r3, r3
    5630:	001a      	movs	r2, r3
    5632:	2302      	movs	r3, #2
    5634:	4013      	ands	r3, r2
    5636:	d0f8      	beq.n	562a <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    5638:	2300      	movs	r3, #0
}
    563a:	0018      	movs	r0, r3
    563c:	46bd      	mov	sp, r7
    563e:	b004      	add	sp, #16
    5640:	bd80      	pop	{r7, pc}
    5642:	46c0      	nop			; (mov r8, r8)
    5644:	00005071 	.word	0x00005071

00005648 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    5648:	b580      	push	{r7, lr}
    564a:	b084      	sub	sp, #16
    564c:	af00      	add	r7, sp, #0
    564e:	6078      	str	r0, [r7, #4]
    5650:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5652:	687b      	ldr	r3, [r7, #4]
    5654:	681b      	ldr	r3, [r3, #0]
    5656:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5658:	687b      	ldr	r3, [r7, #4]
    565a:	799b      	ldrb	r3, [r3, #6]
    565c:	2201      	movs	r2, #1
    565e:	4053      	eors	r3, r2
    5660:	b2db      	uxtb	r3, r3
    5662:	2b00      	cmp	r3, #0
    5664:	d001      	beq.n	566a <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    5666:	231c      	movs	r3, #28
    5668:	e05e      	b.n	5728 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    566a:	687b      	ldr	r3, [r7, #4]
    566c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    566e:	b29b      	uxth	r3, r3
    5670:	2b00      	cmp	r3, #0
    5672:	d001      	beq.n	5678 <usart_read_wait+0x30>
		return STATUS_BUSY;
    5674:	2305      	movs	r3, #5
    5676:	e057      	b.n	5728 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    5678:	68fb      	ldr	r3, [r7, #12]
    567a:	7e1b      	ldrb	r3, [r3, #24]
    567c:	b2db      	uxtb	r3, r3
    567e:	001a      	movs	r2, r3
    5680:	2304      	movs	r3, #4
    5682:	4013      	ands	r3, r2
    5684:	d101      	bne.n	568a <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    5686:	2305      	movs	r3, #5
    5688:	e04e      	b.n	5728 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    568a:	687b      	ldr	r3, [r7, #4]
    568c:	0018      	movs	r0, r3
    568e:	4b28      	ldr	r3, [pc, #160]	; (5730 <usart_read_wait+0xe8>)
    5690:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5692:	68fb      	ldr	r3, [r7, #12]
    5694:	8b5b      	ldrh	r3, [r3, #26]
    5696:	b29b      	uxth	r3, r3
    5698:	b2da      	uxtb	r2, r3
    569a:	230b      	movs	r3, #11
    569c:	18fb      	adds	r3, r7, r3
    569e:	213f      	movs	r1, #63	; 0x3f
    56a0:	400a      	ands	r2, r1
    56a2:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    56a4:	230b      	movs	r3, #11
    56a6:	18fb      	adds	r3, r7, r3
    56a8:	781b      	ldrb	r3, [r3, #0]
    56aa:	2b00      	cmp	r3, #0
    56ac:	d036      	beq.n	571c <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    56ae:	230b      	movs	r3, #11
    56b0:	18fb      	adds	r3, r7, r3
    56b2:	781b      	ldrb	r3, [r3, #0]
    56b4:	2202      	movs	r2, #2
    56b6:	4013      	ands	r3, r2
    56b8:	d004      	beq.n	56c4 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    56ba:	68fb      	ldr	r3, [r7, #12]
    56bc:	2202      	movs	r2, #2
    56be:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    56c0:	231a      	movs	r3, #26
    56c2:	e031      	b.n	5728 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    56c4:	230b      	movs	r3, #11
    56c6:	18fb      	adds	r3, r7, r3
    56c8:	781b      	ldrb	r3, [r3, #0]
    56ca:	2204      	movs	r2, #4
    56cc:	4013      	ands	r3, r2
    56ce:	d004      	beq.n	56da <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    56d0:	68fb      	ldr	r3, [r7, #12]
    56d2:	2204      	movs	r2, #4
    56d4:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    56d6:	231e      	movs	r3, #30
    56d8:	e026      	b.n	5728 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    56da:	230b      	movs	r3, #11
    56dc:	18fb      	adds	r3, r7, r3
    56de:	781b      	ldrb	r3, [r3, #0]
    56e0:	2201      	movs	r2, #1
    56e2:	4013      	ands	r3, r2
    56e4:	d004      	beq.n	56f0 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    56e6:	68fb      	ldr	r3, [r7, #12]
    56e8:	2201      	movs	r2, #1
    56ea:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    56ec:	2313      	movs	r3, #19
    56ee:	e01b      	b.n	5728 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    56f0:	230b      	movs	r3, #11
    56f2:	18fb      	adds	r3, r7, r3
    56f4:	781b      	ldrb	r3, [r3, #0]
    56f6:	2210      	movs	r2, #16
    56f8:	4013      	ands	r3, r2
    56fa:	d004      	beq.n	5706 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    56fc:	68fb      	ldr	r3, [r7, #12]
    56fe:	2210      	movs	r2, #16
    5700:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    5702:	2342      	movs	r3, #66	; 0x42
    5704:	e010      	b.n	5728 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    5706:	230b      	movs	r3, #11
    5708:	18fb      	adds	r3, r7, r3
    570a:	781b      	ldrb	r3, [r3, #0]
    570c:	2220      	movs	r2, #32
    570e:	4013      	ands	r3, r2
    5710:	d004      	beq.n	571c <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    5712:	68fb      	ldr	r3, [r7, #12]
    5714:	2220      	movs	r2, #32
    5716:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    5718:	2341      	movs	r3, #65	; 0x41
    571a:	e005      	b.n	5728 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    571c:	68fb      	ldr	r3, [r7, #12]
    571e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5720:	b29a      	uxth	r2, r3
    5722:	683b      	ldr	r3, [r7, #0]
    5724:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    5726:	2300      	movs	r3, #0
}
    5728:	0018      	movs	r0, r3
    572a:	46bd      	mov	sp, r7
    572c:	b004      	add	sp, #16
    572e:	bd80      	pop	{r7, pc}
    5730:	00005071 	.word	0x00005071

00005734 <system_interrupt_enter_critical_section>:
{
    5734:	b580      	push	{r7, lr}
    5736:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    5738:	4b02      	ldr	r3, [pc, #8]	; (5744 <system_interrupt_enter_critical_section+0x10>)
    573a:	4798      	blx	r3
}
    573c:	46c0      	nop			; (mov r8, r8)
    573e:	46bd      	mov	sp, r7
    5740:	bd80      	pop	{r7, pc}
    5742:	46c0      	nop			; (mov r8, r8)
    5744:	00003285 	.word	0x00003285

00005748 <system_interrupt_leave_critical_section>:
{
    5748:	b580      	push	{r7, lr}
    574a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    574c:	4b02      	ldr	r3, [pc, #8]	; (5758 <system_interrupt_leave_critical_section+0x10>)
    574e:	4798      	blx	r3
}
    5750:	46c0      	nop			; (mov r8, r8)
    5752:	46bd      	mov	sp, r7
    5754:	bd80      	pop	{r7, pc}
    5756:	46c0      	nop			; (mov r8, r8)
    5758:	000032d9 	.word	0x000032d9

0000575c <usart_is_syncing>:
{
    575c:	b580      	push	{r7, lr}
    575e:	b084      	sub	sp, #16
    5760:	af00      	add	r7, sp, #0
    5762:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5764:	687b      	ldr	r3, [r7, #4]
    5766:	681b      	ldr	r3, [r3, #0]
    5768:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    576a:	68fb      	ldr	r3, [r7, #12]
    576c:	69db      	ldr	r3, [r3, #28]
    576e:	1e5a      	subs	r2, r3, #1
    5770:	4193      	sbcs	r3, r2
    5772:	b2db      	uxtb	r3, r3
}
    5774:	0018      	movs	r0, r3
    5776:	46bd      	mov	sp, r7
    5778:	b004      	add	sp, #16
    577a:	bd80      	pop	{r7, pc}

0000577c <_usart_wait_for_sync>:
{
    577c:	b580      	push	{r7, lr}
    577e:	b082      	sub	sp, #8
    5780:	af00      	add	r7, sp, #0
    5782:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    5784:	46c0      	nop			; (mov r8, r8)
    5786:	687b      	ldr	r3, [r7, #4]
    5788:	0018      	movs	r0, r3
    578a:	4b04      	ldr	r3, [pc, #16]	; (579c <_usart_wait_for_sync+0x20>)
    578c:	4798      	blx	r3
    578e:	1e03      	subs	r3, r0, #0
    5790:	d1f9      	bne.n	5786 <_usart_wait_for_sync+0xa>
}
    5792:	46c0      	nop			; (mov r8, r8)
    5794:	46bd      	mov	sp, r7
    5796:	b002      	add	sp, #8
    5798:	bd80      	pop	{r7, pc}
    579a:	46c0      	nop			; (mov r8, r8)
    579c:	0000575d 	.word	0x0000575d

000057a0 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    57a0:	b580      	push	{r7, lr}
    57a2:	b086      	sub	sp, #24
    57a4:	af00      	add	r7, sp, #0
    57a6:	60f8      	str	r0, [r7, #12]
    57a8:	60b9      	str	r1, [r7, #8]
    57aa:	1dbb      	adds	r3, r7, #6
    57ac:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    57ae:	68fb      	ldr	r3, [r7, #12]
    57b0:	681b      	ldr	r3, [r3, #0]
    57b2:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    57b4:	4b0f      	ldr	r3, [pc, #60]	; (57f4 <_usart_write_buffer+0x54>)
    57b6:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    57b8:	68fb      	ldr	r3, [r7, #12]
    57ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    57bc:	b29b      	uxth	r3, r3
    57be:	2b00      	cmp	r3, #0
    57c0:	d003      	beq.n	57ca <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
    57c2:	4b0d      	ldr	r3, [pc, #52]	; (57f8 <_usart_write_buffer+0x58>)
    57c4:	4798      	blx	r3
		return STATUS_BUSY;
    57c6:	2305      	movs	r3, #5
    57c8:	e010      	b.n	57ec <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    57ca:	68fb      	ldr	r3, [r7, #12]
    57cc:	1dba      	adds	r2, r7, #6
    57ce:	8812      	ldrh	r2, [r2, #0]
    57d0:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
    57d2:	4b09      	ldr	r3, [pc, #36]	; (57f8 <_usart_write_buffer+0x58>)
    57d4:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
    57d6:	68fb      	ldr	r3, [r7, #12]
    57d8:	68ba      	ldr	r2, [r7, #8]
    57da:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    57dc:	68fb      	ldr	r3, [r7, #12]
    57de:	2233      	movs	r2, #51	; 0x33
    57e0:	2105      	movs	r1, #5
    57e2:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    57e4:	697b      	ldr	r3, [r7, #20]
    57e6:	2201      	movs	r2, #1
    57e8:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
    57ea:	2300      	movs	r3, #0
}
    57ec:	0018      	movs	r0, r3
    57ee:	46bd      	mov	sp, r7
    57f0:	b006      	add	sp, #24
    57f2:	bd80      	pop	{r7, pc}
    57f4:	00005735 	.word	0x00005735
    57f8:	00005749 	.word	0x00005749

000057fc <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    57fc:	b580      	push	{r7, lr}
    57fe:	b086      	sub	sp, #24
    5800:	af00      	add	r7, sp, #0
    5802:	60f8      	str	r0, [r7, #12]
    5804:	60b9      	str	r1, [r7, #8]
    5806:	1dbb      	adds	r3, r7, #6
    5808:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    580a:	68fb      	ldr	r3, [r7, #12]
    580c:	681b      	ldr	r3, [r3, #0]
    580e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    5810:	4b16      	ldr	r3, [pc, #88]	; (586c <_usart_read_buffer+0x70>)
    5812:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    5814:	68fb      	ldr	r3, [r7, #12]
    5816:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5818:	b29b      	uxth	r3, r3
    581a:	2b00      	cmp	r3, #0
    581c:	d003      	beq.n	5826 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    581e:	4b14      	ldr	r3, [pc, #80]	; (5870 <_usart_read_buffer+0x74>)
    5820:	4798      	blx	r3
		return STATUS_BUSY;
    5822:	2305      	movs	r3, #5
    5824:	e01e      	b.n	5864 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    5826:	68fb      	ldr	r3, [r7, #12]
    5828:	1dba      	adds	r2, r7, #6
    582a:	8812      	ldrh	r2, [r2, #0]
    582c:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    582e:	4b10      	ldr	r3, [pc, #64]	; (5870 <_usart_read_buffer+0x74>)
    5830:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    5832:	68fb      	ldr	r3, [r7, #12]
    5834:	68ba      	ldr	r2, [r7, #8]
    5836:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    5838:	68fb      	ldr	r3, [r7, #12]
    583a:	2232      	movs	r2, #50	; 0x32
    583c:	2105      	movs	r1, #5
    583e:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    5840:	697b      	ldr	r3, [r7, #20]
    5842:	2204      	movs	r2, #4
    5844:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    5846:	68fb      	ldr	r3, [r7, #12]
    5848:	7a1b      	ldrb	r3, [r3, #8]
    584a:	2b00      	cmp	r3, #0
    584c:	d002      	beq.n	5854 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    584e:	697b      	ldr	r3, [r7, #20]
    5850:	2220      	movs	r2, #32
    5852:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    5854:	68fb      	ldr	r3, [r7, #12]
    5856:	7a5b      	ldrb	r3, [r3, #9]
    5858:	2b00      	cmp	r3, #0
    585a:	d002      	beq.n	5862 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    585c:	697b      	ldr	r3, [r7, #20]
    585e:	2208      	movs	r2, #8
    5860:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    5862:	2300      	movs	r3, #0
}
    5864:	0018      	movs	r0, r3
    5866:	46bd      	mov	sp, r7
    5868:	b006      	add	sp, #24
    586a:	bd80      	pop	{r7, pc}
    586c:	00005735 	.word	0x00005735
    5870:	00005749 	.word	0x00005749

00005874 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    5874:	b580      	push	{r7, lr}
    5876:	b084      	sub	sp, #16
    5878:	af00      	add	r7, sp, #0
    587a:	60f8      	str	r0, [r7, #12]
    587c:	60b9      	str	r1, [r7, #8]
    587e:	1dfb      	adds	r3, r7, #7
    5880:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    5882:	1dfb      	adds	r3, r7, #7
    5884:	781b      	ldrb	r3, [r3, #0]
    5886:	68fa      	ldr	r2, [r7, #12]
    5888:	3302      	adds	r3, #2
    588a:	009b      	lsls	r3, r3, #2
    588c:	18d3      	adds	r3, r2, r3
    588e:	3304      	adds	r3, #4
    5890:	68ba      	ldr	r2, [r7, #8]
    5892:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    5894:	68fb      	ldr	r3, [r7, #12]
    5896:	2230      	movs	r2, #48	; 0x30
    5898:	5c9b      	ldrb	r3, [r3, r2]
    589a:	b25a      	sxtb	r2, r3
    589c:	1dfb      	adds	r3, r7, #7
    589e:	781b      	ldrb	r3, [r3, #0]
    58a0:	2101      	movs	r1, #1
    58a2:	4099      	lsls	r1, r3
    58a4:	000b      	movs	r3, r1
    58a6:	b25b      	sxtb	r3, r3
    58a8:	4313      	orrs	r3, r2
    58aa:	b25b      	sxtb	r3, r3
    58ac:	b2d9      	uxtb	r1, r3
    58ae:	68fb      	ldr	r3, [r7, #12]
    58b0:	2230      	movs	r2, #48	; 0x30
    58b2:	5499      	strb	r1, [r3, r2]
}
    58b4:	46c0      	nop			; (mov r8, r8)
    58b6:	46bd      	mov	sp, r7
    58b8:	b004      	add	sp, #16
    58ba:	bd80      	pop	{r7, pc}

000058bc <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    58bc:	b580      	push	{r7, lr}
    58be:	b084      	sub	sp, #16
    58c0:	af00      	add	r7, sp, #0
    58c2:	60f8      	str	r0, [r7, #12]
    58c4:	60b9      	str	r1, [r7, #8]
    58c6:	1dbb      	adds	r3, r7, #6
    58c8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    58ca:	1dbb      	adds	r3, r7, #6
    58cc:	881b      	ldrh	r3, [r3, #0]
    58ce:	2b00      	cmp	r3, #0
    58d0:	d101      	bne.n	58d6 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    58d2:	2317      	movs	r3, #23
    58d4:	e010      	b.n	58f8 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    58d6:	68fb      	ldr	r3, [r7, #12]
    58d8:	79db      	ldrb	r3, [r3, #7]
    58da:	2201      	movs	r2, #1
    58dc:	4053      	eors	r3, r2
    58de:	b2db      	uxtb	r3, r3
    58e0:	2b00      	cmp	r3, #0
    58e2:	d001      	beq.n	58e8 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    58e4:	231c      	movs	r3, #28
    58e6:	e007      	b.n	58f8 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    58e8:	1dbb      	adds	r3, r7, #6
    58ea:	881a      	ldrh	r2, [r3, #0]
    58ec:	68b9      	ldr	r1, [r7, #8]
    58ee:	68fb      	ldr	r3, [r7, #12]
    58f0:	0018      	movs	r0, r3
    58f2:	4b03      	ldr	r3, [pc, #12]	; (5900 <usart_write_buffer_job+0x44>)
    58f4:	4798      	blx	r3
    58f6:	0003      	movs	r3, r0
}
    58f8:	0018      	movs	r0, r3
    58fa:	46bd      	mov	sp, r7
    58fc:	b004      	add	sp, #16
    58fe:	bd80      	pop	{r7, pc}
    5900:	000057a1 	.word	0x000057a1

00005904 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    5904:	b580      	push	{r7, lr}
    5906:	b084      	sub	sp, #16
    5908:	af00      	add	r7, sp, #0
    590a:	60f8      	str	r0, [r7, #12]
    590c:	60b9      	str	r1, [r7, #8]
    590e:	1dbb      	adds	r3, r7, #6
    5910:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    5912:	1dbb      	adds	r3, r7, #6
    5914:	881b      	ldrh	r3, [r3, #0]
    5916:	2b00      	cmp	r3, #0
    5918:	d101      	bne.n	591e <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    591a:	2317      	movs	r3, #23
    591c:	e010      	b.n	5940 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    591e:	68fb      	ldr	r3, [r7, #12]
    5920:	799b      	ldrb	r3, [r3, #6]
    5922:	2201      	movs	r2, #1
    5924:	4053      	eors	r3, r2
    5926:	b2db      	uxtb	r3, r3
    5928:	2b00      	cmp	r3, #0
    592a:	d001      	beq.n	5930 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    592c:	231c      	movs	r3, #28
    592e:	e007      	b.n	5940 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    5930:	1dbb      	adds	r3, r7, #6
    5932:	881a      	ldrh	r2, [r3, #0]
    5934:	68b9      	ldr	r1, [r7, #8]
    5936:	68fb      	ldr	r3, [r7, #12]
    5938:	0018      	movs	r0, r3
    593a:	4b03      	ldr	r3, [pc, #12]	; (5948 <usart_read_buffer_job+0x44>)
    593c:	4798      	blx	r3
    593e:	0003      	movs	r3, r0
}
    5940:	0018      	movs	r0, r3
    5942:	46bd      	mov	sp, r7
    5944:	b004      	add	sp, #16
    5946:	bd80      	pop	{r7, pc}
    5948:	000057fd 	.word	0x000057fd

0000594c <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    594c:	b580      	push	{r7, lr}
    594e:	b084      	sub	sp, #16
    5950:	af00      	add	r7, sp, #0
    5952:	6078      	str	r0, [r7, #4]
    5954:	000a      	movs	r2, r1
    5956:	1cfb      	adds	r3, r7, #3
    5958:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    595a:	1cfb      	adds	r3, r7, #3
    595c:	781b      	ldrb	r3, [r3, #0]
    595e:	2b00      	cmp	r3, #0
    5960:	d002      	beq.n	5968 <usart_get_job_status+0x1c>
    5962:	2b01      	cmp	r3, #1
    5964:	d007      	beq.n	5976 <usart_get_job_status+0x2a>
    5966:	e00d      	b.n	5984 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
    5968:	230f      	movs	r3, #15
    596a:	18fb      	adds	r3, r7, r3
    596c:	687a      	ldr	r2, [r7, #4]
    596e:	2132      	movs	r1, #50	; 0x32
    5970:	5c52      	ldrb	r2, [r2, r1]
    5972:	701a      	strb	r2, [r3, #0]
			break;
    5974:	e00b      	b.n	598e <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
    5976:	230f      	movs	r3, #15
    5978:	18fb      	adds	r3, r7, r3
    597a:	687a      	ldr	r2, [r7, #4]
    597c:	2133      	movs	r1, #51	; 0x33
    597e:	5c52      	ldrb	r2, [r2, r1]
    5980:	701a      	strb	r2, [r3, #0]
			break;
    5982:	e004      	b.n	598e <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    5984:	230f      	movs	r3, #15
    5986:	18fb      	adds	r3, r7, r3
    5988:	2217      	movs	r2, #23
    598a:	701a      	strb	r2, [r3, #0]
			break;
    598c:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
    598e:	230f      	movs	r3, #15
    5990:	18fb      	adds	r3, r7, r3
    5992:	781b      	ldrb	r3, [r3, #0]
}
    5994:	0018      	movs	r0, r3
    5996:	46bd      	mov	sp, r7
    5998:	b004      	add	sp, #16
    599a:	bd80      	pop	{r7, pc}

0000599c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    599c:	b580      	push	{r7, lr}
    599e:	b088      	sub	sp, #32
    59a0:	af00      	add	r7, sp, #0
    59a2:	0002      	movs	r2, r0
    59a4:	1dfb      	adds	r3, r7, #7
    59a6:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    59a8:	1dfb      	adds	r3, r7, #7
    59aa:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    59ac:	4ba3      	ldr	r3, [pc, #652]	; (5c3c <_usart_interrupt_handler+0x2a0>)
    59ae:	0092      	lsls	r2, r2, #2
    59b0:	58d3      	ldr	r3, [r2, r3]
    59b2:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    59b4:	69bb      	ldr	r3, [r7, #24]
    59b6:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    59b8:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    59ba:	69bb      	ldr	r3, [r7, #24]
    59bc:	0018      	movs	r0, r3
    59be:	4ba0      	ldr	r3, [pc, #640]	; (5c40 <_usart_interrupt_handler+0x2a4>)
    59c0:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    59c2:	697b      	ldr	r3, [r7, #20]
    59c4:	7e1b      	ldrb	r3, [r3, #24]
    59c6:	b2da      	uxtb	r2, r3
    59c8:	2312      	movs	r3, #18
    59ca:	18fb      	adds	r3, r7, r3
    59cc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    59ce:	697b      	ldr	r3, [r7, #20]
    59d0:	7d9b      	ldrb	r3, [r3, #22]
    59d2:	b2db      	uxtb	r3, r3
    59d4:	b29a      	uxth	r2, r3
    59d6:	2312      	movs	r3, #18
    59d8:	18fb      	adds	r3, r7, r3
    59da:	2112      	movs	r1, #18
    59dc:	1879      	adds	r1, r7, r1
    59de:	8809      	ldrh	r1, [r1, #0]
    59e0:	400a      	ands	r2, r1
    59e2:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    59e4:	69bb      	ldr	r3, [r7, #24]
    59e6:	2230      	movs	r2, #48	; 0x30
    59e8:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    59ea:	69ba      	ldr	r2, [r7, #24]
    59ec:	2131      	movs	r1, #49	; 0x31
    59ee:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    59f0:	4013      	ands	r3, r2
    59f2:	b2da      	uxtb	r2, r3
    59f4:	2310      	movs	r3, #16
    59f6:	18fb      	adds	r3, r7, r3
    59f8:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    59fa:	2312      	movs	r3, #18
    59fc:	18fb      	adds	r3, r7, r3
    59fe:	881b      	ldrh	r3, [r3, #0]
    5a00:	2201      	movs	r2, #1
    5a02:	4013      	ands	r3, r2
    5a04:	d044      	beq.n	5a90 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    5a06:	69bb      	ldr	r3, [r7, #24]
    5a08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5a0a:	b29b      	uxth	r3, r3
    5a0c:	2b00      	cmp	r3, #0
    5a0e:	d03c      	beq.n	5a8a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5a10:	69bb      	ldr	r3, [r7, #24]
    5a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5a14:	781b      	ldrb	r3, [r3, #0]
    5a16:	b2da      	uxtb	r2, r3
    5a18:	231c      	movs	r3, #28
    5a1a:	18fb      	adds	r3, r7, r3
    5a1c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    5a1e:	69bb      	ldr	r3, [r7, #24]
    5a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5a22:	1c5a      	adds	r2, r3, #1
    5a24:	69bb      	ldr	r3, [r7, #24]
    5a26:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5a28:	69bb      	ldr	r3, [r7, #24]
    5a2a:	795b      	ldrb	r3, [r3, #5]
    5a2c:	2b01      	cmp	r3, #1
    5a2e:	d113      	bne.n	5a58 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    5a30:	69bb      	ldr	r3, [r7, #24]
    5a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5a34:	781b      	ldrb	r3, [r3, #0]
    5a36:	b2db      	uxtb	r3, r3
    5a38:	021b      	lsls	r3, r3, #8
    5a3a:	b21a      	sxth	r2, r3
    5a3c:	231c      	movs	r3, #28
    5a3e:	18fb      	adds	r3, r7, r3
    5a40:	2100      	movs	r1, #0
    5a42:	5e5b      	ldrsh	r3, [r3, r1]
    5a44:	4313      	orrs	r3, r2
    5a46:	b21a      	sxth	r2, r3
    5a48:	231c      	movs	r3, #28
    5a4a:	18fb      	adds	r3, r7, r3
    5a4c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    5a4e:	69bb      	ldr	r3, [r7, #24]
    5a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5a52:	1c5a      	adds	r2, r3, #1
    5a54:	69bb      	ldr	r3, [r7, #24]
    5a56:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    5a58:	231c      	movs	r3, #28
    5a5a:	18fb      	adds	r3, r7, r3
    5a5c:	881b      	ldrh	r3, [r3, #0]
    5a5e:	05db      	lsls	r3, r3, #23
    5a60:	0ddb      	lsrs	r3, r3, #23
    5a62:	b29a      	uxth	r2, r3
    5a64:	697b      	ldr	r3, [r7, #20]
    5a66:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    5a68:	69bb      	ldr	r3, [r7, #24]
    5a6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5a6c:	b29b      	uxth	r3, r3
    5a6e:	3b01      	subs	r3, #1
    5a70:	b29b      	uxth	r3, r3
    5a72:	69ba      	ldr	r2, [r7, #24]
    5a74:	1c19      	adds	r1, r3, #0
    5a76:	85d1      	strh	r1, [r2, #46]	; 0x2e
    5a78:	2b00      	cmp	r3, #0
    5a7a:	d109      	bne.n	5a90 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5a7c:	697b      	ldr	r3, [r7, #20]
    5a7e:	2201      	movs	r2, #1
    5a80:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    5a82:	697b      	ldr	r3, [r7, #20]
    5a84:	2202      	movs	r2, #2
    5a86:	759a      	strb	r2, [r3, #22]
    5a88:	e002      	b.n	5a90 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5a8a:	697b      	ldr	r3, [r7, #20]
    5a8c:	2201      	movs	r2, #1
    5a8e:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    5a90:	2312      	movs	r3, #18
    5a92:	18fb      	adds	r3, r7, r3
    5a94:	881b      	ldrh	r3, [r3, #0]
    5a96:	2202      	movs	r2, #2
    5a98:	4013      	ands	r3, r2
    5a9a:	d011      	beq.n	5ac0 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    5a9c:	697b      	ldr	r3, [r7, #20]
    5a9e:	2202      	movs	r2, #2
    5aa0:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    5aa2:	69bb      	ldr	r3, [r7, #24]
    5aa4:	2233      	movs	r2, #51	; 0x33
    5aa6:	2100      	movs	r1, #0
    5aa8:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    5aaa:	2310      	movs	r3, #16
    5aac:	18fb      	adds	r3, r7, r3
    5aae:	881b      	ldrh	r3, [r3, #0]
    5ab0:	2201      	movs	r2, #1
    5ab2:	4013      	ands	r3, r2
    5ab4:	d004      	beq.n	5ac0 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    5ab6:	69bb      	ldr	r3, [r7, #24]
    5ab8:	68db      	ldr	r3, [r3, #12]
    5aba:	69ba      	ldr	r2, [r7, #24]
    5abc:	0010      	movs	r0, r2
    5abe:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    5ac0:	2312      	movs	r3, #18
    5ac2:	18fb      	adds	r3, r7, r3
    5ac4:	881b      	ldrh	r3, [r3, #0]
    5ac6:	2204      	movs	r2, #4
    5ac8:	4013      	ands	r3, r2
    5aca:	d100      	bne.n	5ace <_usart_interrupt_handler+0x132>
    5acc:	e0bd      	b.n	5c4a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    5ace:	69bb      	ldr	r3, [r7, #24]
    5ad0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5ad2:	b29b      	uxth	r3, r3
    5ad4:	2b00      	cmp	r3, #0
    5ad6:	d100      	bne.n	5ada <_usart_interrupt_handler+0x13e>
    5ad8:	e0b4      	b.n	5c44 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5ada:	697b      	ldr	r3, [r7, #20]
    5adc:	8b5b      	ldrh	r3, [r3, #26]
    5ade:	b29b      	uxth	r3, r3
    5ae0:	b2da      	uxtb	r2, r3
    5ae2:	231f      	movs	r3, #31
    5ae4:	18fb      	adds	r3, r7, r3
    5ae6:	213f      	movs	r1, #63	; 0x3f
    5ae8:	400a      	ands	r2, r1
    5aea:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    5aec:	231f      	movs	r3, #31
    5aee:	18fb      	adds	r3, r7, r3
    5af0:	781b      	ldrb	r3, [r3, #0]
    5af2:	2208      	movs	r2, #8
    5af4:	4013      	ands	r3, r2
    5af6:	d007      	beq.n	5b08 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    5af8:	231f      	movs	r3, #31
    5afa:	18fb      	adds	r3, r7, r3
    5afc:	221f      	movs	r2, #31
    5afe:	18ba      	adds	r2, r7, r2
    5b00:	7812      	ldrb	r2, [r2, #0]
    5b02:	2108      	movs	r1, #8
    5b04:	438a      	bics	r2, r1
    5b06:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    5b08:	231f      	movs	r3, #31
    5b0a:	18fb      	adds	r3, r7, r3
    5b0c:	781b      	ldrb	r3, [r3, #0]
    5b0e:	2b00      	cmp	r3, #0
    5b10:	d050      	beq.n	5bb4 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    5b12:	231f      	movs	r3, #31
    5b14:	18fb      	adds	r3, r7, r3
    5b16:	781b      	ldrb	r3, [r3, #0]
    5b18:	2202      	movs	r2, #2
    5b1a:	4013      	ands	r3, r2
    5b1c:	d007      	beq.n	5b2e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    5b1e:	69bb      	ldr	r3, [r7, #24]
    5b20:	2232      	movs	r2, #50	; 0x32
    5b22:	211a      	movs	r1, #26
    5b24:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    5b26:	697b      	ldr	r3, [r7, #20]
    5b28:	2202      	movs	r2, #2
    5b2a:	835a      	strh	r2, [r3, #26]
    5b2c:	e036      	b.n	5b9c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5b2e:	231f      	movs	r3, #31
    5b30:	18fb      	adds	r3, r7, r3
    5b32:	781b      	ldrb	r3, [r3, #0]
    5b34:	2204      	movs	r2, #4
    5b36:	4013      	ands	r3, r2
    5b38:	d007      	beq.n	5b4a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    5b3a:	69bb      	ldr	r3, [r7, #24]
    5b3c:	2232      	movs	r2, #50	; 0x32
    5b3e:	211e      	movs	r1, #30
    5b40:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    5b42:	697b      	ldr	r3, [r7, #20]
    5b44:	2204      	movs	r2, #4
    5b46:	835a      	strh	r2, [r3, #26]
    5b48:	e028      	b.n	5b9c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    5b4a:	231f      	movs	r3, #31
    5b4c:	18fb      	adds	r3, r7, r3
    5b4e:	781b      	ldrb	r3, [r3, #0]
    5b50:	2201      	movs	r2, #1
    5b52:	4013      	ands	r3, r2
    5b54:	d007      	beq.n	5b66 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    5b56:	69bb      	ldr	r3, [r7, #24]
    5b58:	2232      	movs	r2, #50	; 0x32
    5b5a:	2113      	movs	r1, #19
    5b5c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    5b5e:	697b      	ldr	r3, [r7, #20]
    5b60:	2201      	movs	r2, #1
    5b62:	835a      	strh	r2, [r3, #26]
    5b64:	e01a      	b.n	5b9c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    5b66:	231f      	movs	r3, #31
    5b68:	18fb      	adds	r3, r7, r3
    5b6a:	781b      	ldrb	r3, [r3, #0]
    5b6c:	2210      	movs	r2, #16
    5b6e:	4013      	ands	r3, r2
    5b70:	d007      	beq.n	5b82 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    5b72:	69bb      	ldr	r3, [r7, #24]
    5b74:	2232      	movs	r2, #50	; 0x32
    5b76:	2142      	movs	r1, #66	; 0x42
    5b78:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    5b7a:	697b      	ldr	r3, [r7, #20]
    5b7c:	2210      	movs	r2, #16
    5b7e:	835a      	strh	r2, [r3, #26]
    5b80:	e00c      	b.n	5b9c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    5b82:	231f      	movs	r3, #31
    5b84:	18fb      	adds	r3, r7, r3
    5b86:	781b      	ldrb	r3, [r3, #0]
    5b88:	2220      	movs	r2, #32
    5b8a:	4013      	ands	r3, r2
    5b8c:	d006      	beq.n	5b9c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    5b8e:	69bb      	ldr	r3, [r7, #24]
    5b90:	2232      	movs	r2, #50	; 0x32
    5b92:	2141      	movs	r1, #65	; 0x41
    5b94:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    5b96:	697b      	ldr	r3, [r7, #20]
    5b98:	2220      	movs	r2, #32
    5b9a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    5b9c:	2310      	movs	r3, #16
    5b9e:	18fb      	adds	r3, r7, r3
    5ba0:	881b      	ldrh	r3, [r3, #0]
    5ba2:	2204      	movs	r2, #4
    5ba4:	4013      	ands	r3, r2
				if (callback_status
    5ba6:	d050      	beq.n	5c4a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    5ba8:	69bb      	ldr	r3, [r7, #24]
    5baa:	695b      	ldr	r3, [r3, #20]
    5bac:	69ba      	ldr	r2, [r7, #24]
    5bae:	0010      	movs	r0, r2
    5bb0:	4798      	blx	r3
    5bb2:	e04a      	b.n	5c4a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    5bb4:	697b      	ldr	r3, [r7, #20]
    5bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5bb8:	b29a      	uxth	r2, r3
    5bba:	230e      	movs	r3, #14
    5bbc:	18fb      	adds	r3, r7, r3
    5bbe:	05d2      	lsls	r2, r2, #23
    5bc0:	0dd2      	lsrs	r2, r2, #23
    5bc2:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    5bc4:	69bb      	ldr	r3, [r7, #24]
    5bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5bc8:	220e      	movs	r2, #14
    5bca:	18ba      	adds	r2, r7, r2
    5bcc:	8812      	ldrh	r2, [r2, #0]
    5bce:	b2d2      	uxtb	r2, r2
    5bd0:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    5bd2:	69bb      	ldr	r3, [r7, #24]
    5bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5bd6:	1c5a      	adds	r2, r3, #1
    5bd8:	69bb      	ldr	r3, [r7, #24]
    5bda:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5bdc:	69bb      	ldr	r3, [r7, #24]
    5bde:	795b      	ldrb	r3, [r3, #5]
    5be0:	2b01      	cmp	r3, #1
    5be2:	d10d      	bne.n	5c00 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    5be4:	69bb      	ldr	r3, [r7, #24]
    5be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5be8:	220e      	movs	r2, #14
    5bea:	18ba      	adds	r2, r7, r2
    5bec:	8812      	ldrh	r2, [r2, #0]
    5bee:	0a12      	lsrs	r2, r2, #8
    5bf0:	b292      	uxth	r2, r2
    5bf2:	b2d2      	uxtb	r2, r2
    5bf4:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    5bf6:	69bb      	ldr	r3, [r7, #24]
    5bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5bfa:	1c5a      	adds	r2, r3, #1
    5bfc:	69bb      	ldr	r3, [r7, #24]
    5bfe:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    5c00:	69bb      	ldr	r3, [r7, #24]
    5c02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5c04:	b29b      	uxth	r3, r3
    5c06:	3b01      	subs	r3, #1
    5c08:	b29b      	uxth	r3, r3
    5c0a:	69ba      	ldr	r2, [r7, #24]
    5c0c:	1c19      	adds	r1, r3, #0
    5c0e:	8591      	strh	r1, [r2, #44]	; 0x2c
    5c10:	2b00      	cmp	r3, #0
    5c12:	d11a      	bne.n	5c4a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5c14:	697b      	ldr	r3, [r7, #20]
    5c16:	2204      	movs	r2, #4
    5c18:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    5c1a:	69bb      	ldr	r3, [r7, #24]
    5c1c:	2232      	movs	r2, #50	; 0x32
    5c1e:	2100      	movs	r1, #0
    5c20:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    5c22:	2310      	movs	r3, #16
    5c24:	18fb      	adds	r3, r7, r3
    5c26:	881b      	ldrh	r3, [r3, #0]
    5c28:	2202      	movs	r2, #2
    5c2a:	4013      	ands	r3, r2
					if (callback_status
    5c2c:	d00d      	beq.n	5c4a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    5c2e:	69bb      	ldr	r3, [r7, #24]
    5c30:	691b      	ldr	r3, [r3, #16]
    5c32:	69ba      	ldr	r2, [r7, #24]
    5c34:	0010      	movs	r0, r2
    5c36:	4798      	blx	r3
    5c38:	e007      	b.n	5c4a <_usart_interrupt_handler+0x2ae>
    5c3a:	46c0      	nop			; (mov r8, r8)
    5c3c:	20000a10 	.word	0x20000a10
    5c40:	0000577d 	.word	0x0000577d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5c44:	697b      	ldr	r3, [r7, #20]
    5c46:	2204      	movs	r2, #4
    5c48:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    5c4a:	2312      	movs	r3, #18
    5c4c:	18fb      	adds	r3, r7, r3
    5c4e:	881b      	ldrh	r3, [r3, #0]
    5c50:	2210      	movs	r2, #16
    5c52:	4013      	ands	r3, r2
    5c54:	d010      	beq.n	5c78 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    5c56:	697b      	ldr	r3, [r7, #20]
    5c58:	2210      	movs	r2, #16
    5c5a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    5c5c:	697b      	ldr	r3, [r7, #20]
    5c5e:	2210      	movs	r2, #16
    5c60:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    5c62:	2310      	movs	r3, #16
    5c64:	18fb      	adds	r3, r7, r3
    5c66:	881b      	ldrh	r3, [r3, #0]
    5c68:	2210      	movs	r2, #16
    5c6a:	4013      	ands	r3, r2
    5c6c:	d004      	beq.n	5c78 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    5c6e:	69bb      	ldr	r3, [r7, #24]
    5c70:	69db      	ldr	r3, [r3, #28]
    5c72:	69ba      	ldr	r2, [r7, #24]
    5c74:	0010      	movs	r0, r2
    5c76:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    5c78:	2312      	movs	r3, #18
    5c7a:	18fb      	adds	r3, r7, r3
    5c7c:	881b      	ldrh	r3, [r3, #0]
    5c7e:	2220      	movs	r2, #32
    5c80:	4013      	ands	r3, r2
    5c82:	d010      	beq.n	5ca6 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    5c84:	697b      	ldr	r3, [r7, #20]
    5c86:	2220      	movs	r2, #32
    5c88:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    5c8a:	697b      	ldr	r3, [r7, #20]
    5c8c:	2220      	movs	r2, #32
    5c8e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    5c90:	2310      	movs	r3, #16
    5c92:	18fb      	adds	r3, r7, r3
    5c94:	881b      	ldrh	r3, [r3, #0]
    5c96:	2208      	movs	r2, #8
    5c98:	4013      	ands	r3, r2
    5c9a:	d004      	beq.n	5ca6 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    5c9c:	69bb      	ldr	r3, [r7, #24]
    5c9e:	699b      	ldr	r3, [r3, #24]
    5ca0:	69ba      	ldr	r2, [r7, #24]
    5ca2:	0010      	movs	r0, r2
    5ca4:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    5ca6:	2312      	movs	r3, #18
    5ca8:	18fb      	adds	r3, r7, r3
    5caa:	881b      	ldrh	r3, [r3, #0]
    5cac:	2208      	movs	r2, #8
    5cae:	4013      	ands	r3, r2
    5cb0:	d010      	beq.n	5cd4 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    5cb2:	697b      	ldr	r3, [r7, #20]
    5cb4:	2208      	movs	r2, #8
    5cb6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    5cb8:	697b      	ldr	r3, [r7, #20]
    5cba:	2208      	movs	r2, #8
    5cbc:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    5cbe:	2310      	movs	r3, #16
    5cc0:	18fb      	adds	r3, r7, r3
    5cc2:	881b      	ldrh	r3, [r3, #0]
    5cc4:	2220      	movs	r2, #32
    5cc6:	4013      	ands	r3, r2
    5cc8:	d004      	beq.n	5cd4 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    5cca:	69bb      	ldr	r3, [r7, #24]
    5ccc:	6a1b      	ldr	r3, [r3, #32]
    5cce:	69ba      	ldr	r2, [r7, #24]
    5cd0:	0010      	movs	r0, r2
    5cd2:	4798      	blx	r3
		}
	}
#endif
}
    5cd4:	46c0      	nop			; (mov r8, r8)
    5cd6:	46bd      	mov	sp, r7
    5cd8:	b008      	add	sp, #32
    5cda:	bd80      	pop	{r7, pc}

00005cdc <system_gclk_gen_get_config_defaults>:
{
    5cdc:	b580      	push	{r7, lr}
    5cde:	b082      	sub	sp, #8
    5ce0:	af00      	add	r7, sp, #0
    5ce2:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    5ce4:	687b      	ldr	r3, [r7, #4]
    5ce6:	2201      	movs	r2, #1
    5ce8:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    5cea:	687b      	ldr	r3, [r7, #4]
    5cec:	2200      	movs	r2, #0
    5cee:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    5cf0:	687b      	ldr	r3, [r7, #4]
    5cf2:	2206      	movs	r2, #6
    5cf4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    5cf6:	687b      	ldr	r3, [r7, #4]
    5cf8:	2200      	movs	r2, #0
    5cfa:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    5cfc:	687b      	ldr	r3, [r7, #4]
    5cfe:	2200      	movs	r2, #0
    5d00:	725a      	strb	r2, [r3, #9]
}
    5d02:	46c0      	nop			; (mov r8, r8)
    5d04:	46bd      	mov	sp, r7
    5d06:	b002      	add	sp, #8
    5d08:	bd80      	pop	{r7, pc}

00005d0a <system_gclk_chan_get_config_defaults>:
{
    5d0a:	b580      	push	{r7, lr}
    5d0c:	b082      	sub	sp, #8
    5d0e:	af00      	add	r7, sp, #0
    5d10:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    5d12:	687b      	ldr	r3, [r7, #4]
    5d14:	2200      	movs	r2, #0
    5d16:	701a      	strb	r2, [r3, #0]
}
    5d18:	46c0      	nop			; (mov r8, r8)
    5d1a:	46bd      	mov	sp, r7
    5d1c:	b002      	add	sp, #8
    5d1e:	bd80      	pop	{r7, pc}

00005d20 <system_clock_source_xosc32k_get_config_defaults>:
{
    5d20:	b580      	push	{r7, lr}
    5d22:	b082      	sub	sp, #8
    5d24:	af00      	add	r7, sp, #0
    5d26:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    5d28:	687b      	ldr	r3, [r7, #4]
    5d2a:	2200      	movs	r2, #0
    5d2c:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    5d2e:	687b      	ldr	r3, [r7, #4]
    5d30:	2204      	movs	r2, #4
    5d32:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    5d34:	687b      	ldr	r3, [r7, #4]
    5d36:	2200      	movs	r2, #0
    5d38:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    5d3a:	687b      	ldr	r3, [r7, #4]
    5d3c:	2280      	movs	r2, #128	; 0x80
    5d3e:	0212      	lsls	r2, r2, #8
    5d40:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    5d42:	687b      	ldr	r3, [r7, #4]
    5d44:	2200      	movs	r2, #0
    5d46:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    5d48:	687b      	ldr	r3, [r7, #4]
    5d4a:	2201      	movs	r2, #1
    5d4c:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    5d4e:	687b      	ldr	r3, [r7, #4]
    5d50:	2200      	movs	r2, #0
    5d52:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    5d54:	687b      	ldr	r3, [r7, #4]
    5d56:	2201      	movs	r2, #1
    5d58:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    5d5a:	687b      	ldr	r3, [r7, #4]
    5d5c:	2200      	movs	r2, #0
    5d5e:	739a      	strb	r2, [r3, #14]
}
    5d60:	46c0      	nop			; (mov r8, r8)
    5d62:	46bd      	mov	sp, r7
    5d64:	b002      	add	sp, #8
    5d66:	bd80      	pop	{r7, pc}

00005d68 <system_clock_source_osc8m_get_config_defaults>:
{
    5d68:	b580      	push	{r7, lr}
    5d6a:	b082      	sub	sp, #8
    5d6c:	af00      	add	r7, sp, #0
    5d6e:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    5d70:	687b      	ldr	r3, [r7, #4]
    5d72:	2203      	movs	r2, #3
    5d74:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    5d76:	687b      	ldr	r3, [r7, #4]
    5d78:	2200      	movs	r2, #0
    5d7a:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    5d7c:	687b      	ldr	r3, [r7, #4]
    5d7e:	2201      	movs	r2, #1
    5d80:	709a      	strb	r2, [r3, #2]
}
    5d82:	46c0      	nop			; (mov r8, r8)
    5d84:	46bd      	mov	sp, r7
    5d86:	b002      	add	sp, #8
    5d88:	bd80      	pop	{r7, pc}

00005d8a <system_clock_source_dfll_get_config_defaults>:
{
    5d8a:	b580      	push	{r7, lr}
    5d8c:	b082      	sub	sp, #8
    5d8e:	af00      	add	r7, sp, #0
    5d90:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    5d92:	687b      	ldr	r3, [r7, #4]
    5d94:	2200      	movs	r2, #0
    5d96:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5d98:	687b      	ldr	r3, [r7, #4]
    5d9a:	2200      	movs	r2, #0
    5d9c:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5d9e:	687b      	ldr	r3, [r7, #4]
    5da0:	2200      	movs	r2, #0
    5da2:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5da4:	687b      	ldr	r3, [r7, #4]
    5da6:	2200      	movs	r2, #0
    5da8:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5daa:	687b      	ldr	r3, [r7, #4]
    5dac:	2200      	movs	r2, #0
    5dae:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    5db0:	687b      	ldr	r3, [r7, #4]
    5db2:	2201      	movs	r2, #1
    5db4:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    5db6:	687b      	ldr	r3, [r7, #4]
    5db8:	2207      	movs	r2, #7
    5dba:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    5dbc:	687b      	ldr	r3, [r7, #4]
    5dbe:	223f      	movs	r2, #63	; 0x3f
    5dc0:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    5dc2:	687b      	ldr	r3, [r7, #4]
    5dc4:	2201      	movs	r2, #1
    5dc6:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    5dc8:	687b      	ldr	r3, [r7, #4]
    5dca:	2201      	movs	r2, #1
    5dcc:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    5dce:	687b      	ldr	r3, [r7, #4]
    5dd0:	2206      	movs	r2, #6
    5dd2:	821a      	strh	r2, [r3, #16]
}
    5dd4:	46c0      	nop			; (mov r8, r8)
    5dd6:	46bd      	mov	sp, r7
    5dd8:	b002      	add	sp, #8
    5dda:	bd80      	pop	{r7, pc}

00005ddc <system_cpu_clock_set_divider>:
{
    5ddc:	b580      	push	{r7, lr}
    5dde:	b082      	sub	sp, #8
    5de0:	af00      	add	r7, sp, #0
    5de2:	0002      	movs	r2, r0
    5de4:	1dfb      	adds	r3, r7, #7
    5de6:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    5de8:	4a03      	ldr	r2, [pc, #12]	; (5df8 <system_cpu_clock_set_divider+0x1c>)
    5dea:	1dfb      	adds	r3, r7, #7
    5dec:	781b      	ldrb	r3, [r3, #0]
    5dee:	7213      	strb	r3, [r2, #8]
}
    5df0:	46c0      	nop			; (mov r8, r8)
    5df2:	46bd      	mov	sp, r7
    5df4:	b002      	add	sp, #8
    5df6:	bd80      	pop	{r7, pc}
    5df8:	40000400 	.word	0x40000400

00005dfc <system_apb_clock_set_divider>:
{
    5dfc:	b580      	push	{r7, lr}
    5dfe:	b082      	sub	sp, #8
    5e00:	af00      	add	r7, sp, #0
    5e02:	0002      	movs	r2, r0
    5e04:	1dfb      	adds	r3, r7, #7
    5e06:	701a      	strb	r2, [r3, #0]
    5e08:	1dbb      	adds	r3, r7, #6
    5e0a:	1c0a      	adds	r2, r1, #0
    5e0c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5e0e:	1dfb      	adds	r3, r7, #7
    5e10:	781b      	ldrb	r3, [r3, #0]
    5e12:	2b01      	cmp	r3, #1
    5e14:	d008      	beq.n	5e28 <system_apb_clock_set_divider+0x2c>
    5e16:	2b02      	cmp	r3, #2
    5e18:	d00b      	beq.n	5e32 <system_apb_clock_set_divider+0x36>
    5e1a:	2b00      	cmp	r3, #0
    5e1c:	d10e      	bne.n	5e3c <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    5e1e:	4a0b      	ldr	r2, [pc, #44]	; (5e4c <system_apb_clock_set_divider+0x50>)
    5e20:	1dbb      	adds	r3, r7, #6
    5e22:	781b      	ldrb	r3, [r3, #0]
    5e24:	7253      	strb	r3, [r2, #9]
			break;
    5e26:	e00b      	b.n	5e40 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    5e28:	4a08      	ldr	r2, [pc, #32]	; (5e4c <system_apb_clock_set_divider+0x50>)
    5e2a:	1dbb      	adds	r3, r7, #6
    5e2c:	781b      	ldrb	r3, [r3, #0]
    5e2e:	7293      	strb	r3, [r2, #10]
			break;
    5e30:	e006      	b.n	5e40 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    5e32:	4a06      	ldr	r2, [pc, #24]	; (5e4c <system_apb_clock_set_divider+0x50>)
    5e34:	1dbb      	adds	r3, r7, #6
    5e36:	781b      	ldrb	r3, [r3, #0]
    5e38:	72d3      	strb	r3, [r2, #11]
			break;
    5e3a:	e001      	b.n	5e40 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    5e3c:	2317      	movs	r3, #23
    5e3e:	e000      	b.n	5e42 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    5e40:	2300      	movs	r3, #0
}
    5e42:	0018      	movs	r0, r3
    5e44:	46bd      	mov	sp, r7
    5e46:	b002      	add	sp, #8
    5e48:	bd80      	pop	{r7, pc}
    5e4a:	46c0      	nop			; (mov r8, r8)
    5e4c:	40000400 	.word	0x40000400

00005e50 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    5e50:	b580      	push	{r7, lr}
    5e52:	b082      	sub	sp, #8
    5e54:	af00      	add	r7, sp, #0
    5e56:	0002      	movs	r2, r0
    5e58:	1dfb      	adds	r3, r7, #7
    5e5a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5e5c:	4a08      	ldr	r2, [pc, #32]	; (5e80 <system_flash_set_waitstates+0x30>)
    5e5e:	1dfb      	adds	r3, r7, #7
    5e60:	781b      	ldrb	r3, [r3, #0]
    5e62:	210f      	movs	r1, #15
    5e64:	400b      	ands	r3, r1
    5e66:	b2d9      	uxtb	r1, r3
    5e68:	6853      	ldr	r3, [r2, #4]
    5e6a:	200f      	movs	r0, #15
    5e6c:	4001      	ands	r1, r0
    5e6e:	0049      	lsls	r1, r1, #1
    5e70:	201e      	movs	r0, #30
    5e72:	4383      	bics	r3, r0
    5e74:	430b      	orrs	r3, r1
    5e76:	6053      	str	r3, [r2, #4]
}
    5e78:	46c0      	nop			; (mov r8, r8)
    5e7a:	46bd      	mov	sp, r7
    5e7c:	b002      	add	sp, #8
    5e7e:	bd80      	pop	{r7, pc}
    5e80:	41004000 	.word	0x41004000

00005e84 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    5e84:	b580      	push	{r7, lr}
    5e86:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5e88:	46c0      	nop			; (mov r8, r8)
    5e8a:	4b04      	ldr	r3, [pc, #16]	; (5e9c <_system_dfll_wait_for_sync+0x18>)
    5e8c:	68db      	ldr	r3, [r3, #12]
    5e8e:	2210      	movs	r2, #16
    5e90:	4013      	ands	r3, r2
    5e92:	d0fa      	beq.n	5e8a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    5e94:	46c0      	nop			; (mov r8, r8)
    5e96:	46bd      	mov	sp, r7
    5e98:	bd80      	pop	{r7, pc}
    5e9a:	46c0      	nop			; (mov r8, r8)
    5e9c:	40000800 	.word	0x40000800

00005ea0 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    5ea0:	b580      	push	{r7, lr}
    5ea2:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    5ea4:	4b0c      	ldr	r3, [pc, #48]	; (5ed8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5ea6:	2202      	movs	r2, #2
    5ea8:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    5eaa:	4b0c      	ldr	r3, [pc, #48]	; (5edc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    5eac:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    5eae:	4a0a      	ldr	r2, [pc, #40]	; (5ed8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5eb0:	4b0b      	ldr	r3, [pc, #44]	; (5ee0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5eb2:	689b      	ldr	r3, [r3, #8]
    5eb4:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    5eb6:	4a08      	ldr	r2, [pc, #32]	; (5ed8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5eb8:	4b09      	ldr	r3, [pc, #36]	; (5ee0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5eba:	685b      	ldr	r3, [r3, #4]
    5ebc:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    5ebe:	4b06      	ldr	r3, [pc, #24]	; (5ed8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5ec0:	2200      	movs	r2, #0
    5ec2:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    5ec4:	4b05      	ldr	r3, [pc, #20]	; (5edc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    5ec6:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    5ec8:	4a03      	ldr	r2, [pc, #12]	; (5ed8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5eca:	4b05      	ldr	r3, [pc, #20]	; (5ee0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5ecc:	681b      	ldr	r3, [r3, #0]
    5ece:	b29b      	uxth	r3, r3
    5ed0:	8493      	strh	r3, [r2, #36]	; 0x24
}
    5ed2:	46c0      	nop			; (mov r8, r8)
    5ed4:	46bd      	mov	sp, r7
    5ed6:	bd80      	pop	{r7, pc}
    5ed8:	40000800 	.word	0x40000800
    5edc:	00005e85 	.word	0x00005e85
    5ee0:	2000019c 	.word	0x2000019c

00005ee4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    5ee4:	b580      	push	{r7, lr}
    5ee6:	b082      	sub	sp, #8
    5ee8:	af00      	add	r7, sp, #0
    5eea:	0002      	movs	r2, r0
    5eec:	1dfb      	adds	r3, r7, #7
    5eee:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    5ef0:	1dfb      	adds	r3, r7, #7
    5ef2:	781b      	ldrb	r3, [r3, #0]
    5ef4:	2b08      	cmp	r3, #8
    5ef6:	d841      	bhi.n	5f7c <system_clock_source_get_hz+0x98>
    5ef8:	009a      	lsls	r2, r3, #2
    5efa:	4b23      	ldr	r3, [pc, #140]	; (5f88 <system_clock_source_get_hz+0xa4>)
    5efc:	18d3      	adds	r3, r2, r3
    5efe:	681b      	ldr	r3, [r3, #0]
    5f00:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    5f02:	4b22      	ldr	r3, [pc, #136]	; (5f8c <system_clock_source_get_hz+0xa8>)
    5f04:	691b      	ldr	r3, [r3, #16]
    5f06:	e03a      	b.n	5f7e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    5f08:	4b21      	ldr	r3, [pc, #132]	; (5f90 <system_clock_source_get_hz+0xac>)
    5f0a:	6a1b      	ldr	r3, [r3, #32]
    5f0c:	059b      	lsls	r3, r3, #22
    5f0e:	0f9b      	lsrs	r3, r3, #30
    5f10:	b2db      	uxtb	r3, r3
    5f12:	001a      	movs	r2, r3
    5f14:	4b1f      	ldr	r3, [pc, #124]	; (5f94 <system_clock_source_get_hz+0xb0>)
    5f16:	40d3      	lsrs	r3, r2
    5f18:	e031      	b.n	5f7e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    5f1a:	2380      	movs	r3, #128	; 0x80
    5f1c:	021b      	lsls	r3, r3, #8
    5f1e:	e02e      	b.n	5f7e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    5f20:	2380      	movs	r3, #128	; 0x80
    5f22:	021b      	lsls	r3, r3, #8
    5f24:	e02b      	b.n	5f7e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    5f26:	4b19      	ldr	r3, [pc, #100]	; (5f8c <system_clock_source_get_hz+0xa8>)
    5f28:	695b      	ldr	r3, [r3, #20]
    5f2a:	e028      	b.n	5f7e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    5f2c:	4b17      	ldr	r3, [pc, #92]	; (5f8c <system_clock_source_get_hz+0xa8>)
    5f2e:	681b      	ldr	r3, [r3, #0]
    5f30:	2202      	movs	r2, #2
    5f32:	4013      	ands	r3, r2
    5f34:	d101      	bne.n	5f3a <system_clock_source_get_hz+0x56>
			return 0;
    5f36:	2300      	movs	r3, #0
    5f38:	e021      	b.n	5f7e <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    5f3a:	4b17      	ldr	r3, [pc, #92]	; (5f98 <system_clock_source_get_hz+0xb4>)
    5f3c:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    5f3e:	4b13      	ldr	r3, [pc, #76]	; (5f8c <system_clock_source_get_hz+0xa8>)
    5f40:	681b      	ldr	r3, [r3, #0]
    5f42:	2224      	movs	r2, #36	; 0x24
    5f44:	4013      	ands	r3, r2
    5f46:	2b04      	cmp	r3, #4
    5f48:	d109      	bne.n	5f5e <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5f4a:	2000      	movs	r0, #0
    5f4c:	4b13      	ldr	r3, [pc, #76]	; (5f9c <system_clock_source_get_hz+0xb8>)
    5f4e:	4798      	blx	r3
    5f50:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    5f52:	4b0e      	ldr	r3, [pc, #56]	; (5f8c <system_clock_source_get_hz+0xa8>)
    5f54:	689b      	ldr	r3, [r3, #8]
    5f56:	041b      	lsls	r3, r3, #16
    5f58:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5f5a:	4353      	muls	r3, r2
    5f5c:	e00f      	b.n	5f7e <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
    5f5e:	4b10      	ldr	r3, [pc, #64]	; (5fa0 <system_clock_source_get_hz+0xbc>)
    5f60:	e00d      	b.n	5f7e <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    5f62:	4a0b      	ldr	r2, [pc, #44]	; (5f90 <system_clock_source_get_hz+0xac>)
    5f64:	2350      	movs	r3, #80	; 0x50
    5f66:	5cd3      	ldrb	r3, [r2, r3]
    5f68:	b2db      	uxtb	r3, r3
    5f6a:	001a      	movs	r2, r3
    5f6c:	2304      	movs	r3, #4
    5f6e:	4013      	ands	r3, r2
    5f70:	d101      	bne.n	5f76 <system_clock_source_get_hz+0x92>
			return 0;
    5f72:	2300      	movs	r3, #0
    5f74:	e003      	b.n	5f7e <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
    5f76:	4b05      	ldr	r3, [pc, #20]	; (5f8c <system_clock_source_get_hz+0xa8>)
    5f78:	68db      	ldr	r3, [r3, #12]
    5f7a:	e000      	b.n	5f7e <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
    5f7c:	2300      	movs	r3, #0
	}
}
    5f7e:	0018      	movs	r0, r3
    5f80:	46bd      	mov	sp, r7
    5f82:	b002      	add	sp, #8
    5f84:	bd80      	pop	{r7, pc}
    5f86:	46c0      	nop			; (mov r8, r8)
    5f88:	0000cd28 	.word	0x0000cd28
    5f8c:	2000019c 	.word	0x2000019c
    5f90:	40000800 	.word	0x40000800
    5f94:	007a1200 	.word	0x007a1200
    5f98:	00005e85 	.word	0x00005e85
    5f9c:	00006a35 	.word	0x00006a35
    5fa0:	02dc6c00 	.word	0x02dc6c00

00005fa4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    5fa4:	b580      	push	{r7, lr}
    5fa6:	b084      	sub	sp, #16
    5fa8:	af00      	add	r7, sp, #0
    5faa:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    5fac:	4b1a      	ldr	r3, [pc, #104]	; (6018 <system_clock_source_osc8m_set_config+0x74>)
    5fae:	6a1b      	ldr	r3, [r3, #32]
    5fb0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    5fb2:	687b      	ldr	r3, [r7, #4]
    5fb4:	781b      	ldrb	r3, [r3, #0]
    5fb6:	1c1a      	adds	r2, r3, #0
    5fb8:	2303      	movs	r3, #3
    5fba:	4013      	ands	r3, r2
    5fbc:	b2da      	uxtb	r2, r3
    5fbe:	230d      	movs	r3, #13
    5fc0:	18fb      	adds	r3, r7, r3
    5fc2:	2103      	movs	r1, #3
    5fc4:	400a      	ands	r2, r1
    5fc6:	0010      	movs	r0, r2
    5fc8:	781a      	ldrb	r2, [r3, #0]
    5fca:	2103      	movs	r1, #3
    5fcc:	438a      	bics	r2, r1
    5fce:	1c11      	adds	r1, r2, #0
    5fd0:	1c02      	adds	r2, r0, #0
    5fd2:	430a      	orrs	r2, r1
    5fd4:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    5fd6:	687b      	ldr	r3, [r7, #4]
    5fd8:	789a      	ldrb	r2, [r3, #2]
    5fda:	230c      	movs	r3, #12
    5fdc:	18fb      	adds	r3, r7, r3
    5fde:	01d0      	lsls	r0, r2, #7
    5fe0:	781a      	ldrb	r2, [r3, #0]
    5fe2:	217f      	movs	r1, #127	; 0x7f
    5fe4:	400a      	ands	r2, r1
    5fe6:	1c11      	adds	r1, r2, #0
    5fe8:	1c02      	adds	r2, r0, #0
    5fea:	430a      	orrs	r2, r1
    5fec:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5fee:	687b      	ldr	r3, [r7, #4]
    5ff0:	785a      	ldrb	r2, [r3, #1]
    5ff2:	230c      	movs	r3, #12
    5ff4:	18fb      	adds	r3, r7, r3
    5ff6:	2101      	movs	r1, #1
    5ff8:	400a      	ands	r2, r1
    5ffa:	0190      	lsls	r0, r2, #6
    5ffc:	781a      	ldrb	r2, [r3, #0]
    5ffe:	2140      	movs	r1, #64	; 0x40
    6000:	438a      	bics	r2, r1
    6002:	1c11      	adds	r1, r2, #0
    6004:	1c02      	adds	r2, r0, #0
    6006:	430a      	orrs	r2, r1
    6008:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    600a:	4b03      	ldr	r3, [pc, #12]	; (6018 <system_clock_source_osc8m_set_config+0x74>)
    600c:	68fa      	ldr	r2, [r7, #12]
    600e:	621a      	str	r2, [r3, #32]
}
    6010:	46c0      	nop			; (mov r8, r8)
    6012:	46bd      	mov	sp, r7
    6014:	b004      	add	sp, #16
    6016:	bd80      	pop	{r7, pc}
    6018:	40000800 	.word	0x40000800

0000601c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    601c:	b580      	push	{r7, lr}
    601e:	b084      	sub	sp, #16
    6020:	af00      	add	r7, sp, #0
    6022:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    6024:	4a43      	ldr	r2, [pc, #268]	; (6134 <system_clock_source_xosc32k_set_config+0x118>)
    6026:	230c      	movs	r3, #12
    6028:	18fb      	adds	r3, r7, r3
    602a:	8a92      	ldrh	r2, [r2, #20]
    602c:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    602e:	687b      	ldr	r3, [r7, #4]
    6030:	785b      	ldrb	r3, [r3, #1]
    6032:	1c1a      	adds	r2, r3, #0
    6034:	2307      	movs	r3, #7
    6036:	4013      	ands	r3, r2
    6038:	b2da      	uxtb	r2, r3
    603a:	230c      	movs	r3, #12
    603c:	18fb      	adds	r3, r7, r3
    603e:	2107      	movs	r1, #7
    6040:	400a      	ands	r2, r1
    6042:	0010      	movs	r0, r2
    6044:	785a      	ldrb	r2, [r3, #1]
    6046:	2107      	movs	r1, #7
    6048:	438a      	bics	r2, r1
    604a:	1c11      	adds	r1, r2, #0
    604c:	1c02      	adds	r2, r0, #0
    604e:	430a      	orrs	r2, r1
    6050:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    6052:	687b      	ldr	r3, [r7, #4]
    6054:	781b      	ldrb	r3, [r3, #0]
    6056:	2b00      	cmp	r3, #0
    6058:	d106      	bne.n	6068 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    605a:	230c      	movs	r3, #12
    605c:	18fb      	adds	r3, r7, r3
    605e:	781a      	ldrb	r2, [r3, #0]
    6060:	2104      	movs	r1, #4
    6062:	430a      	orrs	r2, r1
    6064:	701a      	strb	r2, [r3, #0]
    6066:	e005      	b.n	6074 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    6068:	230c      	movs	r3, #12
    606a:	18fb      	adds	r3, r7, r3
    606c:	781a      	ldrb	r2, [r3, #0]
    606e:	2104      	movs	r1, #4
    6070:	438a      	bics	r2, r1
    6072:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    6074:	687b      	ldr	r3, [r7, #4]
    6076:	789a      	ldrb	r2, [r3, #2]
    6078:	230c      	movs	r3, #12
    607a:	18fb      	adds	r3, r7, r3
    607c:	2101      	movs	r1, #1
    607e:	400a      	ands	r2, r1
    6080:	0150      	lsls	r0, r2, #5
    6082:	781a      	ldrb	r2, [r3, #0]
    6084:	2120      	movs	r1, #32
    6086:	438a      	bics	r2, r1
    6088:	1c11      	adds	r1, r2, #0
    608a:	1c02      	adds	r2, r0, #0
    608c:	430a      	orrs	r2, r1
    608e:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    6090:	687b      	ldr	r3, [r7, #4]
    6092:	78da      	ldrb	r2, [r3, #3]
    6094:	230c      	movs	r3, #12
    6096:	18fb      	adds	r3, r7, r3
    6098:	2101      	movs	r1, #1
    609a:	400a      	ands	r2, r1
    609c:	0110      	lsls	r0, r2, #4
    609e:	781a      	ldrb	r2, [r3, #0]
    60a0:	2110      	movs	r1, #16
    60a2:	438a      	bics	r2, r1
    60a4:	1c11      	adds	r1, r2, #0
    60a6:	1c02      	adds	r2, r0, #0
    60a8:	430a      	orrs	r2, r1
    60aa:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    60ac:	687b      	ldr	r3, [r7, #4]
    60ae:	791a      	ldrb	r2, [r3, #4]
    60b0:	230c      	movs	r3, #12
    60b2:	18fb      	adds	r3, r7, r3
    60b4:	2101      	movs	r1, #1
    60b6:	400a      	ands	r2, r1
    60b8:	00d0      	lsls	r0, r2, #3
    60ba:	781a      	ldrb	r2, [r3, #0]
    60bc:	2108      	movs	r1, #8
    60be:	438a      	bics	r2, r1
    60c0:	1c11      	adds	r1, r2, #0
    60c2:	1c02      	adds	r2, r0, #0
    60c4:	430a      	orrs	r2, r1
    60c6:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    60c8:	687b      	ldr	r3, [r7, #4]
    60ca:	7b5a      	ldrb	r2, [r3, #13]
    60cc:	230c      	movs	r3, #12
    60ce:	18fb      	adds	r3, r7, r3
    60d0:	01d0      	lsls	r0, r2, #7
    60d2:	781a      	ldrb	r2, [r3, #0]
    60d4:	217f      	movs	r1, #127	; 0x7f
    60d6:	400a      	ands	r2, r1
    60d8:	1c11      	adds	r1, r2, #0
    60da:	1c02      	adds	r2, r0, #0
    60dc:	430a      	orrs	r2, r1
    60de:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    60e0:	687b      	ldr	r3, [r7, #4]
    60e2:	7b1a      	ldrb	r2, [r3, #12]
    60e4:	230c      	movs	r3, #12
    60e6:	18fb      	adds	r3, r7, r3
    60e8:	2101      	movs	r1, #1
    60ea:	400a      	ands	r2, r1
    60ec:	0190      	lsls	r0, r2, #6
    60ee:	781a      	ldrb	r2, [r3, #0]
    60f0:	2140      	movs	r1, #64	; 0x40
    60f2:	438a      	bics	r2, r1
    60f4:	1c11      	adds	r1, r2, #0
    60f6:	1c02      	adds	r2, r0, #0
    60f8:	430a      	orrs	r2, r1
    60fa:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    60fc:	687b      	ldr	r3, [r7, #4]
    60fe:	7b9a      	ldrb	r2, [r3, #14]
    6100:	230c      	movs	r3, #12
    6102:	18fb      	adds	r3, r7, r3
    6104:	2101      	movs	r1, #1
    6106:	400a      	ands	r2, r1
    6108:	0110      	lsls	r0, r2, #4
    610a:	785a      	ldrb	r2, [r3, #1]
    610c:	2110      	movs	r1, #16
    610e:	438a      	bics	r2, r1
    6110:	1c11      	adds	r1, r2, #0
    6112:	1c02      	adds	r2, r0, #0
    6114:	430a      	orrs	r2, r1
    6116:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    6118:	687b      	ldr	r3, [r7, #4]
    611a:	689a      	ldr	r2, [r3, #8]
    611c:	4b06      	ldr	r3, [pc, #24]	; (6138 <system_clock_source_xosc32k_set_config+0x11c>)
    611e:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    6120:	4a04      	ldr	r2, [pc, #16]	; (6134 <system_clock_source_xosc32k_set_config+0x118>)
    6122:	230c      	movs	r3, #12
    6124:	18fb      	adds	r3, r7, r3
    6126:	881b      	ldrh	r3, [r3, #0]
    6128:	8293      	strh	r3, [r2, #20]
}
    612a:	46c0      	nop			; (mov r8, r8)
    612c:	46bd      	mov	sp, r7
    612e:	b004      	add	sp, #16
    6130:	bd80      	pop	{r7, pc}
    6132:	46c0      	nop			; (mov r8, r8)
    6134:	40000800 	.word	0x40000800
    6138:	2000019c 	.word	0x2000019c

0000613c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    613c:	b580      	push	{r7, lr}
    613e:	b082      	sub	sp, #8
    6140:	af00      	add	r7, sp, #0
    6142:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    6144:	687b      	ldr	r3, [r7, #4]
    6146:	7a1b      	ldrb	r3, [r3, #8]
    6148:	029b      	lsls	r3, r3, #10
    614a:	041b      	lsls	r3, r3, #16
    614c:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    614e:	687b      	ldr	r3, [r7, #4]
    6150:	895b      	ldrh	r3, [r3, #10]
    6152:	059b      	lsls	r3, r3, #22
    6154:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    6156:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    6158:	4b2a      	ldr	r3, [pc, #168]	; (6204 <system_clock_source_dfll_set_config+0xc8>)
    615a:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    615c:	687b      	ldr	r3, [r7, #4]
    615e:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    6160:	687b      	ldr	r3, [r7, #4]
    6162:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    6164:	4313      	orrs	r3, r2
    6166:	b2db      	uxtb	r3, r3
    6168:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    616a:	687b      	ldr	r3, [r7, #4]
    616c:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    616e:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    6170:	687a      	ldr	r2, [r7, #4]
    6172:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    6174:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    6176:	687b      	ldr	r3, [r7, #4]
    6178:	785b      	ldrb	r3, [r3, #1]
    617a:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    617c:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    617e:	4b21      	ldr	r3, [pc, #132]	; (6204 <system_clock_source_dfll_set_config+0xc8>)
    6180:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    6182:	687b      	ldr	r3, [r7, #4]
    6184:	781b      	ldrb	r3, [r3, #0]
    6186:	2b04      	cmp	r3, #4
    6188:	d116      	bne.n	61b8 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    618a:	687b      	ldr	r3, [r7, #4]
    618c:	7b1b      	ldrb	r3, [r3, #12]
    618e:	069b      	lsls	r3, r3, #26
    6190:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6192:	687b      	ldr	r3, [r7, #4]
    6194:	89db      	ldrh	r3, [r3, #14]
    6196:	041b      	lsls	r3, r3, #16
    6198:	0019      	movs	r1, r3
    619a:	4b1b      	ldr	r3, [pc, #108]	; (6208 <system_clock_source_dfll_set_config+0xcc>)
    619c:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    619e:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    61a0:	687a      	ldr	r2, [r7, #4]
    61a2:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    61a4:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    61a6:	4b17      	ldr	r3, [pc, #92]	; (6204 <system_clock_source_dfll_set_config+0xc8>)
    61a8:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    61aa:	4b16      	ldr	r3, [pc, #88]	; (6204 <system_clock_source_dfll_set_config+0xc8>)
    61ac:	681b      	ldr	r3, [r3, #0]
    61ae:	687a      	ldr	r2, [r7, #4]
    61b0:	7812      	ldrb	r2, [r2, #0]
    61b2:	431a      	orrs	r2, r3
    61b4:	4b13      	ldr	r3, [pc, #76]	; (6204 <system_clock_source_dfll_set_config+0xc8>)
    61b6:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    61b8:	687b      	ldr	r3, [r7, #4]
    61ba:	781b      	ldrb	r3, [r3, #0]
    61bc:	2b20      	cmp	r3, #32
    61be:	d11c      	bne.n	61fa <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    61c0:	687b      	ldr	r3, [r7, #4]
    61c2:	7b1b      	ldrb	r3, [r3, #12]
    61c4:	069b      	lsls	r3, r3, #26
    61c6:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    61c8:	687b      	ldr	r3, [r7, #4]
    61ca:	89db      	ldrh	r3, [r3, #14]
    61cc:	041b      	lsls	r3, r3, #16
    61ce:	0019      	movs	r1, r3
    61d0:	4b0d      	ldr	r3, [pc, #52]	; (6208 <system_clock_source_dfll_set_config+0xcc>)
    61d2:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    61d4:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    61d6:	687a      	ldr	r2, [r7, #4]
    61d8:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    61da:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    61dc:	4b09      	ldr	r3, [pc, #36]	; (6204 <system_clock_source_dfll_set_config+0xc8>)
    61de:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    61e0:	4b08      	ldr	r3, [pc, #32]	; (6204 <system_clock_source_dfll_set_config+0xc8>)
    61e2:	681b      	ldr	r3, [r3, #0]
    61e4:	687a      	ldr	r2, [r7, #4]
    61e6:	7812      	ldrb	r2, [r2, #0]
    61e8:	2104      	movs	r1, #4
    61ea:	430a      	orrs	r2, r1
    61ec:	b2d2      	uxtb	r2, r2
    61ee:	4313      	orrs	r3, r2
    61f0:	2280      	movs	r2, #128	; 0x80
    61f2:	00d2      	lsls	r2, r2, #3
    61f4:	431a      	orrs	r2, r3
    61f6:	4b03      	ldr	r3, [pc, #12]	; (6204 <system_clock_source_dfll_set_config+0xc8>)
    61f8:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    61fa:	46c0      	nop			; (mov r8, r8)
    61fc:	46bd      	mov	sp, r7
    61fe:	b002      	add	sp, #8
    6200:	bd80      	pop	{r7, pc}
    6202:	46c0      	nop			; (mov r8, r8)
    6204:	2000019c 	.word	0x2000019c
    6208:	03ff0000 	.word	0x03ff0000

0000620c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    620c:	b580      	push	{r7, lr}
    620e:	b082      	sub	sp, #8
    6210:	af00      	add	r7, sp, #0
    6212:	0002      	movs	r2, r0
    6214:	1dfb      	adds	r3, r7, #7
    6216:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    6218:	1dfb      	adds	r3, r7, #7
    621a:	781b      	ldrb	r3, [r3, #0]
    621c:	2b08      	cmp	r3, #8
    621e:	d83b      	bhi.n	6298 <system_clock_source_enable+0x8c>
    6220:	009a      	lsls	r2, r3, #2
    6222:	4b21      	ldr	r3, [pc, #132]	; (62a8 <system_clock_source_enable+0x9c>)
    6224:	18d3      	adds	r3, r2, r3
    6226:	681b      	ldr	r3, [r3, #0]
    6228:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    622a:	4b20      	ldr	r3, [pc, #128]	; (62ac <system_clock_source_enable+0xa0>)
    622c:	4a1f      	ldr	r2, [pc, #124]	; (62ac <system_clock_source_enable+0xa0>)
    622e:	6a12      	ldr	r2, [r2, #32]
    6230:	2102      	movs	r1, #2
    6232:	430a      	orrs	r2, r1
    6234:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    6236:	2300      	movs	r3, #0
    6238:	e031      	b.n	629e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    623a:	4b1c      	ldr	r3, [pc, #112]	; (62ac <system_clock_source_enable+0xa0>)
    623c:	4a1b      	ldr	r2, [pc, #108]	; (62ac <system_clock_source_enable+0xa0>)
    623e:	6992      	ldr	r2, [r2, #24]
    6240:	2102      	movs	r1, #2
    6242:	430a      	orrs	r2, r1
    6244:	619a      	str	r2, [r3, #24]
		break;
    6246:	e029      	b.n	629c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    6248:	4a18      	ldr	r2, [pc, #96]	; (62ac <system_clock_source_enable+0xa0>)
    624a:	4b18      	ldr	r3, [pc, #96]	; (62ac <system_clock_source_enable+0xa0>)
    624c:	8a1b      	ldrh	r3, [r3, #16]
    624e:	b29b      	uxth	r3, r3
    6250:	2102      	movs	r1, #2
    6252:	430b      	orrs	r3, r1
    6254:	b29b      	uxth	r3, r3
    6256:	8213      	strh	r3, [r2, #16]
		break;
    6258:	e020      	b.n	629c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    625a:	4a14      	ldr	r2, [pc, #80]	; (62ac <system_clock_source_enable+0xa0>)
    625c:	4b13      	ldr	r3, [pc, #76]	; (62ac <system_clock_source_enable+0xa0>)
    625e:	8a9b      	ldrh	r3, [r3, #20]
    6260:	b29b      	uxth	r3, r3
    6262:	2102      	movs	r1, #2
    6264:	430b      	orrs	r3, r1
    6266:	b29b      	uxth	r3, r3
    6268:	8293      	strh	r3, [r2, #20]
		break;
    626a:	e017      	b.n	629c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    626c:	4b10      	ldr	r3, [pc, #64]	; (62b0 <system_clock_source_enable+0xa4>)
    626e:	681b      	ldr	r3, [r3, #0]
    6270:	2202      	movs	r2, #2
    6272:	431a      	orrs	r2, r3
    6274:	4b0e      	ldr	r3, [pc, #56]	; (62b0 <system_clock_source_enable+0xa4>)
    6276:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    6278:	4b0e      	ldr	r3, [pc, #56]	; (62b4 <system_clock_source_enable+0xa8>)
    627a:	4798      	blx	r3
		break;
    627c:	e00e      	b.n	629c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    627e:	4a0b      	ldr	r2, [pc, #44]	; (62ac <system_clock_source_enable+0xa0>)
    6280:	490a      	ldr	r1, [pc, #40]	; (62ac <system_clock_source_enable+0xa0>)
    6282:	2344      	movs	r3, #68	; 0x44
    6284:	5ccb      	ldrb	r3, [r1, r3]
    6286:	b2db      	uxtb	r3, r3
    6288:	2102      	movs	r1, #2
    628a:	430b      	orrs	r3, r1
    628c:	b2d9      	uxtb	r1, r3
    628e:	2344      	movs	r3, #68	; 0x44
    6290:	54d1      	strb	r1, [r2, r3]
		break;
    6292:	e003      	b.n	629c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    6294:	2300      	movs	r3, #0
    6296:	e002      	b.n	629e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6298:	2317      	movs	r3, #23
    629a:	e000      	b.n	629e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    629c:	2300      	movs	r3, #0
}
    629e:	0018      	movs	r0, r3
    62a0:	46bd      	mov	sp, r7
    62a2:	b002      	add	sp, #8
    62a4:	bd80      	pop	{r7, pc}
    62a6:	46c0      	nop			; (mov r8, r8)
    62a8:	0000cd4c 	.word	0x0000cd4c
    62ac:	40000800 	.word	0x40000800
    62b0:	2000019c 	.word	0x2000019c
    62b4:	00005ea1 	.word	0x00005ea1

000062b8 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    62b8:	b580      	push	{r7, lr}
    62ba:	b084      	sub	sp, #16
    62bc:	af00      	add	r7, sp, #0
    62be:	0002      	movs	r2, r0
    62c0:	1dfb      	adds	r3, r7, #7
    62c2:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    62c4:	2300      	movs	r3, #0
    62c6:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    62c8:	1dfb      	adds	r3, r7, #7
    62ca:	781b      	ldrb	r3, [r3, #0]
    62cc:	2b08      	cmp	r3, #8
    62ce:	d821      	bhi.n	6314 <system_clock_source_is_ready+0x5c>
    62d0:	009a      	lsls	r2, r3, #2
    62d2:	4b18      	ldr	r3, [pc, #96]	; (6334 <system_clock_source_is_ready+0x7c>)
    62d4:	18d3      	adds	r3, r2, r3
    62d6:	681b      	ldr	r3, [r3, #0]
    62d8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    62da:	2308      	movs	r3, #8
    62dc:	60fb      	str	r3, [r7, #12]
		break;
    62de:	e01b      	b.n	6318 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    62e0:	2304      	movs	r3, #4
    62e2:	60fb      	str	r3, [r7, #12]
		break;
    62e4:	e018      	b.n	6318 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    62e6:	2301      	movs	r3, #1
    62e8:	60fb      	str	r3, [r7, #12]
		break;
    62ea:	e015      	b.n	6318 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    62ec:	2302      	movs	r3, #2
    62ee:	60fb      	str	r3, [r7, #12]
		break;
    62f0:	e012      	b.n	6318 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    62f2:	23d0      	movs	r3, #208	; 0xd0
    62f4:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    62f6:	e00f      	b.n	6318 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    62f8:	4a0f      	ldr	r2, [pc, #60]	; (6338 <system_clock_source_is_ready+0x80>)
    62fa:	2350      	movs	r3, #80	; 0x50
    62fc:	5cd3      	ldrb	r3, [r2, r3]
    62fe:	b2db      	uxtb	r3, r3
    6300:	001a      	movs	r2, r3
    6302:	2303      	movs	r3, #3
    6304:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    6306:	3b03      	subs	r3, #3
    6308:	425a      	negs	r2, r3
    630a:	4153      	adcs	r3, r2
    630c:	b2db      	uxtb	r3, r3
    630e:	e00c      	b.n	632a <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    6310:	2301      	movs	r3, #1
    6312:	e00a      	b.n	632a <system_clock_source_is_ready+0x72>

	default:
		return false;
    6314:	2300      	movs	r3, #0
    6316:	e008      	b.n	632a <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    6318:	4b07      	ldr	r3, [pc, #28]	; (6338 <system_clock_source_is_ready+0x80>)
    631a:	68db      	ldr	r3, [r3, #12]
    631c:	68fa      	ldr	r2, [r7, #12]
    631e:	401a      	ands	r2, r3
    6320:	68fb      	ldr	r3, [r7, #12]
    6322:	1ad3      	subs	r3, r2, r3
    6324:	425a      	negs	r2, r3
    6326:	4153      	adcs	r3, r2
    6328:	b2db      	uxtb	r3, r3
}
    632a:	0018      	movs	r0, r3
    632c:	46bd      	mov	sp, r7
    632e:	b004      	add	sp, #16
    6330:	bd80      	pop	{r7, pc}
    6332:	46c0      	nop			; (mov r8, r8)
    6334:	0000cd70 	.word	0x0000cd70
    6338:	40000800 	.word	0x40000800

0000633c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    633c:	b580      	push	{r7, lr}
    633e:	b082      	sub	sp, #8
    6340:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    6342:	003b      	movs	r3, r7
    6344:	2202      	movs	r2, #2
    6346:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6348:	2300      	movs	r3, #0
    634a:	607b      	str	r3, [r7, #4]
    634c:	e009      	b.n	6362 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    634e:	687b      	ldr	r3, [r7, #4]
    6350:	b2db      	uxtb	r3, r3
    6352:	003a      	movs	r2, r7
    6354:	0011      	movs	r1, r2
    6356:	0018      	movs	r0, r3
    6358:	4b05      	ldr	r3, [pc, #20]	; (6370 <_switch_peripheral_gclk+0x34>)
    635a:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    635c:	687b      	ldr	r3, [r7, #4]
    635e:	3301      	adds	r3, #1
    6360:	607b      	str	r3, [r7, #4]
    6362:	687b      	ldr	r3, [r7, #4]
    6364:	2b24      	cmp	r3, #36	; 0x24
    6366:	d9f2      	bls.n	634e <_switch_peripheral_gclk+0x12>
	}
}
    6368:	46c0      	nop			; (mov r8, r8)
    636a:	46bd      	mov	sp, r7
    636c:	b002      	add	sp, #8
    636e:	bd80      	pop	{r7, pc}
    6370:	00006911 	.word	0x00006911

00006374 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    6374:	b580      	push	{r7, lr}
    6376:	b0aa      	sub	sp, #168	; 0xa8
    6378:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    637a:	4b85      	ldr	r3, [pc, #532]	; (6590 <system_clock_init+0x21c>)
    637c:	22c2      	movs	r2, #194	; 0xc2
    637e:	00d2      	lsls	r2, r2, #3
    6380:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    6382:	2002      	movs	r0, #2
    6384:	4b83      	ldr	r3, [pc, #524]	; (6594 <system_clock_init+0x220>)
    6386:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    6388:	4b83      	ldr	r3, [pc, #524]	; (6598 <system_clock_init+0x224>)
    638a:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    638c:	2394      	movs	r3, #148	; 0x94
    638e:	18fb      	adds	r3, r7, r3
    6390:	0018      	movs	r0, r3
    6392:	4b82      	ldr	r3, [pc, #520]	; (659c <system_clock_init+0x228>)
    6394:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    6396:	2394      	movs	r3, #148	; 0x94
    6398:	18fb      	adds	r3, r7, r3
    639a:	2280      	movs	r2, #128	; 0x80
    639c:	0212      	lsls	r2, r2, #8
    639e:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    63a0:	2394      	movs	r3, #148	; 0x94
    63a2:	18fb      	adds	r3, r7, r3
    63a4:	2200      	movs	r2, #0
    63a6:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    63a8:	2394      	movs	r3, #148	; 0x94
    63aa:	18fb      	adds	r3, r7, r3
    63ac:	2206      	movs	r2, #6
    63ae:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    63b0:	2394      	movs	r3, #148	; 0x94
    63b2:	18fb      	adds	r3, r7, r3
    63b4:	2200      	movs	r2, #0
    63b6:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    63b8:	2394      	movs	r3, #148	; 0x94
    63ba:	18fb      	adds	r3, r7, r3
    63bc:	2200      	movs	r2, #0
    63be:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    63c0:	2394      	movs	r3, #148	; 0x94
    63c2:	18fb      	adds	r3, r7, r3
    63c4:	2201      	movs	r2, #1
    63c6:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    63c8:	2394      	movs	r3, #148	; 0x94
    63ca:	18fb      	adds	r3, r7, r3
    63cc:	2200      	movs	r2, #0
    63ce:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    63d0:	2394      	movs	r3, #148	; 0x94
    63d2:	18fb      	adds	r3, r7, r3
    63d4:	2201      	movs	r2, #1
    63d6:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    63d8:	2394      	movs	r3, #148	; 0x94
    63da:	18fb      	adds	r3, r7, r3
    63dc:	0018      	movs	r0, r3
    63de:	4b70      	ldr	r3, [pc, #448]	; (65a0 <system_clock_init+0x22c>)
    63e0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    63e2:	2005      	movs	r0, #5
    63e4:	4b6f      	ldr	r3, [pc, #444]	; (65a4 <system_clock_init+0x230>)
    63e6:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    63e8:	46c0      	nop			; (mov r8, r8)
    63ea:	2005      	movs	r0, #5
    63ec:	4b6e      	ldr	r3, [pc, #440]	; (65a8 <system_clock_init+0x234>)
    63ee:	4798      	blx	r3
    63f0:	0003      	movs	r3, r0
    63f2:	001a      	movs	r2, r3
    63f4:	2301      	movs	r3, #1
    63f6:	4053      	eors	r3, r2
    63f8:	b2db      	uxtb	r3, r3
    63fa:	2b00      	cmp	r3, #0
    63fc:	d1f5      	bne.n	63ea <system_clock_init+0x76>


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    63fe:	2380      	movs	r3, #128	; 0x80
    6400:	18fb      	adds	r3, r7, r3
    6402:	0018      	movs	r0, r3
    6404:	4b69      	ldr	r3, [pc, #420]	; (65ac <system_clock_init+0x238>)
    6406:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    6408:	2380      	movs	r3, #128	; 0x80
    640a:	18fb      	adds	r3, r7, r3
    640c:	2204      	movs	r2, #4
    640e:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    6410:	2380      	movs	r3, #128	; 0x80
    6412:	18fb      	adds	r3, r7, r3
    6414:	2200      	movs	r2, #0
    6416:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    6418:	4b65      	ldr	r3, [pc, #404]	; (65b0 <system_clock_init+0x23c>)
    641a:	681b      	ldr	r3, [r3, #0]
    641c:	0e9b      	lsrs	r3, r3, #26
    641e:	22a4      	movs	r2, #164	; 0xa4
    6420:	18ba      	adds	r2, r7, r2
    6422:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    6424:	23a4      	movs	r3, #164	; 0xa4
    6426:	18fb      	adds	r3, r7, r3
    6428:	681b      	ldr	r3, [r3, #0]
    642a:	2b3f      	cmp	r3, #63	; 0x3f
    642c:	d103      	bne.n	6436 <system_clock_init+0xc2>
		coarse = 0x1f;
    642e:	231f      	movs	r3, #31
    6430:	22a4      	movs	r2, #164	; 0xa4
    6432:	18ba      	adds	r2, r7, r2
    6434:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    6436:	23a4      	movs	r3, #164	; 0xa4
    6438:	18fb      	adds	r3, r7, r3
    643a:	681b      	ldr	r3, [r3, #0]
    643c:	b2da      	uxtb	r2, r3
    643e:	2380      	movs	r3, #128	; 0x80
    6440:	18fb      	adds	r3, r7, r3
    6442:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    6444:	2380      	movs	r3, #128	; 0x80
    6446:	18fb      	adds	r3, r7, r3
    6448:	2200      	movs	r2, #0
    644a:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    644c:	2380      	movs	r3, #128	; 0x80
    644e:	18fb      	adds	r3, r7, r3
    6450:	2200      	movs	r2, #0
    6452:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    6454:	2380      	movs	r3, #128	; 0x80
    6456:	18fb      	adds	r3, r7, r3
    6458:	2200      	movs	r2, #0
    645a:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    645c:	2380      	movs	r3, #128	; 0x80
    645e:	18fb      	adds	r3, r7, r3
    6460:	2200      	movs	r2, #0
    6462:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    6464:	2380      	movs	r3, #128	; 0x80
    6466:	18fb      	adds	r3, r7, r3
    6468:	22b7      	movs	r2, #183	; 0xb7
    646a:	00d2      	lsls	r2, r2, #3
    646c:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    646e:	2380      	movs	r3, #128	; 0x80
    6470:	18fb      	adds	r3, r7, r3
    6472:	2203      	movs	r2, #3
    6474:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    6476:	2380      	movs	r3, #128	; 0x80
    6478:	18fb      	adds	r3, r7, r3
    647a:	221f      	movs	r2, #31
    647c:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    647e:	2380      	movs	r3, #128	; 0x80
    6480:	18fb      	adds	r3, r7, r3
    6482:	0018      	movs	r0, r3
    6484:	4b4b      	ldr	r3, [pc, #300]	; (65b4 <system_clock_init+0x240>)
    6486:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    6488:	237c      	movs	r3, #124	; 0x7c
    648a:	18fb      	adds	r3, r7, r3
    648c:	0018      	movs	r0, r3
    648e:	4b4a      	ldr	r3, [pc, #296]	; (65b8 <system_clock_init+0x244>)
    6490:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    6492:	237c      	movs	r3, #124	; 0x7c
    6494:	18fb      	adds	r3, r7, r3
    6496:	2200      	movs	r2, #0
    6498:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    649a:	237c      	movs	r3, #124	; 0x7c
    649c:	18fb      	adds	r3, r7, r3
    649e:	2201      	movs	r2, #1
    64a0:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    64a2:	237c      	movs	r3, #124	; 0x7c
    64a4:	18fb      	adds	r3, r7, r3
    64a6:	2201      	movs	r2, #1
    64a8:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    64aa:	237c      	movs	r3, #124	; 0x7c
    64ac:	18fb      	adds	r3, r7, r3
    64ae:	0018      	movs	r0, r3
    64b0:	4b42      	ldr	r3, [pc, #264]	; (65bc <system_clock_init+0x248>)
    64b2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    64b4:	2006      	movs	r0, #6
    64b6:	4b3b      	ldr	r3, [pc, #236]	; (65a4 <system_clock_init+0x230>)
    64b8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    64ba:	4b41      	ldr	r3, [pc, #260]	; (65c0 <system_clock_init+0x24c>)
    64bc:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    64be:	2364      	movs	r3, #100	; 0x64
    64c0:	18fb      	adds	r3, r7, r3
    64c2:	0018      	movs	r0, r3
    64c4:	4b3f      	ldr	r3, [pc, #252]	; (65c4 <system_clock_init+0x250>)
    64c6:	4798      	blx	r3
    64c8:	2364      	movs	r3, #100	; 0x64
    64ca:	18fb      	adds	r3, r7, r3
    64cc:	2205      	movs	r2, #5
    64ce:	701a      	strb	r2, [r3, #0]
    64d0:	2364      	movs	r3, #100	; 0x64
    64d2:	18fb      	adds	r3, r7, r3
    64d4:	2201      	movs	r2, #1
    64d6:	605a      	str	r2, [r3, #4]
    64d8:	2364      	movs	r3, #100	; 0x64
    64da:	18fb      	adds	r3, r7, r3
    64dc:	2200      	movs	r2, #0
    64de:	721a      	strb	r2, [r3, #8]
    64e0:	2364      	movs	r3, #100	; 0x64
    64e2:	18fb      	adds	r3, r7, r3
    64e4:	2200      	movs	r2, #0
    64e6:	725a      	strb	r2, [r3, #9]
    64e8:	2364      	movs	r3, #100	; 0x64
    64ea:	18fb      	adds	r3, r7, r3
    64ec:	0019      	movs	r1, r3
    64ee:	2001      	movs	r0, #1
    64f0:	4b35      	ldr	r3, [pc, #212]	; (65c8 <system_clock_init+0x254>)
    64f2:	4798      	blx	r3
    64f4:	2001      	movs	r0, #1
    64f6:	4b35      	ldr	r3, [pc, #212]	; (65cc <system_clock_init+0x258>)
    64f8:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    64fa:	230c      	movs	r3, #12
    64fc:	18fb      	adds	r3, r7, r3
    64fe:	0018      	movs	r0, r3
    6500:	4b33      	ldr	r3, [pc, #204]	; (65d0 <system_clock_init+0x25c>)
    6502:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    6504:	230c      	movs	r3, #12
    6506:	18fb      	adds	r3, r7, r3
    6508:	2201      	movs	r2, #1
    650a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    650c:	230c      	movs	r3, #12
    650e:	18fb      	adds	r3, r7, r3
    6510:	0019      	movs	r1, r3
    6512:	2000      	movs	r0, #0
    6514:	4b2f      	ldr	r3, [pc, #188]	; (65d4 <system_clock_init+0x260>)
    6516:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    6518:	2000      	movs	r0, #0
    651a:	4b2f      	ldr	r3, [pc, #188]	; (65d8 <system_clock_init+0x264>)
    651c:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    651e:	2007      	movs	r0, #7
    6520:	4b20      	ldr	r3, [pc, #128]	; (65a4 <system_clock_init+0x230>)
    6522:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    6524:	46c0      	nop			; (mov r8, r8)
    6526:	2007      	movs	r0, #7
    6528:	4b1f      	ldr	r3, [pc, #124]	; (65a8 <system_clock_init+0x234>)
    652a:	4798      	blx	r3
    652c:	0003      	movs	r3, r0
    652e:	001a      	movs	r2, r3
    6530:	2301      	movs	r3, #1
    6532:	4053      	eors	r3, r2
    6534:	b2db      	uxtb	r3, r3
    6536:	2b00      	cmp	r3, #0
    6538:	d1f5      	bne.n	6526 <system_clock_init+0x1b2>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    653a:	2000      	movs	r0, #0
    653c:	4b27      	ldr	r3, [pc, #156]	; (65dc <system_clock_init+0x268>)
    653e:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    6540:	2100      	movs	r1, #0
    6542:	2000      	movs	r0, #0
    6544:	4b26      	ldr	r3, [pc, #152]	; (65e0 <system_clock_init+0x26c>)
    6546:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    6548:	2100      	movs	r1, #0
    654a:	2001      	movs	r0, #1
    654c:	4b24      	ldr	r3, [pc, #144]	; (65e0 <system_clock_init+0x26c>)
    654e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    6550:	2100      	movs	r1, #0
    6552:	2002      	movs	r0, #2
    6554:	4b22      	ldr	r3, [pc, #136]	; (65e0 <system_clock_init+0x26c>)
    6556:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    6558:	003b      	movs	r3, r7
    655a:	0018      	movs	r0, r3
    655c:	4b19      	ldr	r3, [pc, #100]	; (65c4 <system_clock_init+0x250>)
    655e:	4798      	blx	r3
    6560:	003b      	movs	r3, r7
    6562:	2207      	movs	r2, #7
    6564:	701a      	strb	r2, [r3, #0]
    6566:	003b      	movs	r3, r7
    6568:	2201      	movs	r2, #1
    656a:	605a      	str	r2, [r3, #4]
    656c:	003b      	movs	r3, r7
    656e:	2201      	movs	r2, #1
    6570:	721a      	strb	r2, [r3, #8]
    6572:	003b      	movs	r3, r7
    6574:	2200      	movs	r2, #0
    6576:	725a      	strb	r2, [r3, #9]
    6578:	003b      	movs	r3, r7
    657a:	0019      	movs	r1, r3
    657c:	2000      	movs	r0, #0
    657e:	4b12      	ldr	r3, [pc, #72]	; (65c8 <system_clock_init+0x254>)
    6580:	4798      	blx	r3
    6582:	2000      	movs	r0, #0
    6584:	4b11      	ldr	r3, [pc, #68]	; (65cc <system_clock_init+0x258>)
    6586:	4798      	blx	r3
#endif
}
    6588:	46c0      	nop			; (mov r8, r8)
    658a:	46bd      	mov	sp, r7
    658c:	b02a      	add	sp, #168	; 0xa8
    658e:	bd80      	pop	{r7, pc}
    6590:	40000800 	.word	0x40000800
    6594:	00005e51 	.word	0x00005e51
    6598:	0000633d 	.word	0x0000633d
    659c:	00005d21 	.word	0x00005d21
    65a0:	0000601d 	.word	0x0000601d
    65a4:	0000620d 	.word	0x0000620d
    65a8:	000062b9 	.word	0x000062b9
    65ac:	00005d8b 	.word	0x00005d8b
    65b0:	00806024 	.word	0x00806024
    65b4:	0000613d 	.word	0x0000613d
    65b8:	00005d69 	.word	0x00005d69
    65bc:	00005fa5 	.word	0x00005fa5
    65c0:	00006689 	.word	0x00006689
    65c4:	00005cdd 	.word	0x00005cdd
    65c8:	000066b9 	.word	0x000066b9
    65cc:	000067dd 	.word	0x000067dd
    65d0:	00005d0b 	.word	0x00005d0b
    65d4:	00006911 	.word	0x00006911
    65d8:	00006955 	.word	0x00006955
    65dc:	00005ddd 	.word	0x00005ddd
    65e0:	00005dfd 	.word	0x00005dfd

000065e4 <system_apb_clock_set_mask>:
{
    65e4:	b580      	push	{r7, lr}
    65e6:	b082      	sub	sp, #8
    65e8:	af00      	add	r7, sp, #0
    65ea:	0002      	movs	r2, r0
    65ec:	6039      	str	r1, [r7, #0]
    65ee:	1dfb      	adds	r3, r7, #7
    65f0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    65f2:	1dfb      	adds	r3, r7, #7
    65f4:	781b      	ldrb	r3, [r3, #0]
    65f6:	2b01      	cmp	r3, #1
    65f8:	d00a      	beq.n	6610 <system_apb_clock_set_mask+0x2c>
    65fa:	2b02      	cmp	r3, #2
    65fc:	d00f      	beq.n	661e <system_apb_clock_set_mask+0x3a>
    65fe:	2b00      	cmp	r3, #0
    6600:	d114      	bne.n	662c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    6602:	4b0e      	ldr	r3, [pc, #56]	; (663c <system_apb_clock_set_mask+0x58>)
    6604:	4a0d      	ldr	r2, [pc, #52]	; (663c <system_apb_clock_set_mask+0x58>)
    6606:	6991      	ldr	r1, [r2, #24]
    6608:	683a      	ldr	r2, [r7, #0]
    660a:	430a      	orrs	r2, r1
    660c:	619a      	str	r2, [r3, #24]
			break;
    660e:	e00f      	b.n	6630 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    6610:	4b0a      	ldr	r3, [pc, #40]	; (663c <system_apb_clock_set_mask+0x58>)
    6612:	4a0a      	ldr	r2, [pc, #40]	; (663c <system_apb_clock_set_mask+0x58>)
    6614:	69d1      	ldr	r1, [r2, #28]
    6616:	683a      	ldr	r2, [r7, #0]
    6618:	430a      	orrs	r2, r1
    661a:	61da      	str	r2, [r3, #28]
			break;
    661c:	e008      	b.n	6630 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    661e:	4b07      	ldr	r3, [pc, #28]	; (663c <system_apb_clock_set_mask+0x58>)
    6620:	4a06      	ldr	r2, [pc, #24]	; (663c <system_apb_clock_set_mask+0x58>)
    6622:	6a11      	ldr	r1, [r2, #32]
    6624:	683a      	ldr	r2, [r7, #0]
    6626:	430a      	orrs	r2, r1
    6628:	621a      	str	r2, [r3, #32]
			break;
    662a:	e001      	b.n	6630 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    662c:	2317      	movs	r3, #23
    662e:	e000      	b.n	6632 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    6630:	2300      	movs	r3, #0
}
    6632:	0018      	movs	r0, r3
    6634:	46bd      	mov	sp, r7
    6636:	b002      	add	sp, #8
    6638:	bd80      	pop	{r7, pc}
    663a:	46c0      	nop			; (mov r8, r8)
    663c:	40000400 	.word	0x40000400

00006640 <system_interrupt_enter_critical_section>:
{
    6640:	b580      	push	{r7, lr}
    6642:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    6644:	4b02      	ldr	r3, [pc, #8]	; (6650 <system_interrupt_enter_critical_section+0x10>)
    6646:	4798      	blx	r3
}
    6648:	46c0      	nop			; (mov r8, r8)
    664a:	46bd      	mov	sp, r7
    664c:	bd80      	pop	{r7, pc}
    664e:	46c0      	nop			; (mov r8, r8)
    6650:	00003285 	.word	0x00003285

00006654 <system_interrupt_leave_critical_section>:
{
    6654:	b580      	push	{r7, lr}
    6656:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    6658:	4b02      	ldr	r3, [pc, #8]	; (6664 <system_interrupt_leave_critical_section+0x10>)
    665a:	4798      	blx	r3
}
    665c:	46c0      	nop			; (mov r8, r8)
    665e:	46bd      	mov	sp, r7
    6660:	bd80      	pop	{r7, pc}
    6662:	46c0      	nop			; (mov r8, r8)
    6664:	000032d9 	.word	0x000032d9

00006668 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    6668:	b580      	push	{r7, lr}
    666a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    666c:	4b05      	ldr	r3, [pc, #20]	; (6684 <system_gclk_is_syncing+0x1c>)
    666e:	785b      	ldrb	r3, [r3, #1]
    6670:	b2db      	uxtb	r3, r3
    6672:	b25b      	sxtb	r3, r3
    6674:	2b00      	cmp	r3, #0
    6676:	da01      	bge.n	667c <system_gclk_is_syncing+0x14>
		return true;
    6678:	2301      	movs	r3, #1
    667a:	e000      	b.n	667e <system_gclk_is_syncing+0x16>
	}

	return false;
    667c:	2300      	movs	r3, #0
}
    667e:	0018      	movs	r0, r3
    6680:	46bd      	mov	sp, r7
    6682:	bd80      	pop	{r7, pc}
    6684:	40000c00 	.word	0x40000c00

00006688 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    6688:	b580      	push	{r7, lr}
    668a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    668c:	2108      	movs	r1, #8
    668e:	2000      	movs	r0, #0
    6690:	4b07      	ldr	r3, [pc, #28]	; (66b0 <system_gclk_init+0x28>)
    6692:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    6694:	4b07      	ldr	r3, [pc, #28]	; (66b4 <system_gclk_init+0x2c>)
    6696:	2201      	movs	r2, #1
    6698:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    669a:	46c0      	nop			; (mov r8, r8)
    669c:	4b05      	ldr	r3, [pc, #20]	; (66b4 <system_gclk_init+0x2c>)
    669e:	781b      	ldrb	r3, [r3, #0]
    66a0:	b2db      	uxtb	r3, r3
    66a2:	001a      	movs	r2, r3
    66a4:	2301      	movs	r3, #1
    66a6:	4013      	ands	r3, r2
    66a8:	d1f8      	bne.n	669c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    66aa:	46c0      	nop			; (mov r8, r8)
    66ac:	46bd      	mov	sp, r7
    66ae:	bd80      	pop	{r7, pc}
    66b0:	000065e5 	.word	0x000065e5
    66b4:	40000c00 	.word	0x40000c00

000066b8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    66b8:	b580      	push	{r7, lr}
    66ba:	b086      	sub	sp, #24
    66bc:	af00      	add	r7, sp, #0
    66be:	0002      	movs	r2, r0
    66c0:	6039      	str	r1, [r7, #0]
    66c2:	1dfb      	adds	r3, r7, #7
    66c4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    66c6:	1dfb      	adds	r3, r7, #7
    66c8:	781b      	ldrb	r3, [r3, #0]
    66ca:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    66cc:	1dfb      	adds	r3, r7, #7
    66ce:	781b      	ldrb	r3, [r3, #0]
    66d0:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    66d2:	683b      	ldr	r3, [r7, #0]
    66d4:	781b      	ldrb	r3, [r3, #0]
    66d6:	021b      	lsls	r3, r3, #8
    66d8:	001a      	movs	r2, r3
    66da:	697b      	ldr	r3, [r7, #20]
    66dc:	4313      	orrs	r3, r2
    66de:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    66e0:	683b      	ldr	r3, [r7, #0]
    66e2:	785b      	ldrb	r3, [r3, #1]
    66e4:	2b00      	cmp	r3, #0
    66e6:	d004      	beq.n	66f2 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    66e8:	697b      	ldr	r3, [r7, #20]
    66ea:	2280      	movs	r2, #128	; 0x80
    66ec:	02d2      	lsls	r2, r2, #11
    66ee:	4313      	orrs	r3, r2
    66f0:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    66f2:	683b      	ldr	r3, [r7, #0]
    66f4:	7a5b      	ldrb	r3, [r3, #9]
    66f6:	2b00      	cmp	r3, #0
    66f8:	d004      	beq.n	6704 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    66fa:	697b      	ldr	r3, [r7, #20]
    66fc:	2280      	movs	r2, #128	; 0x80
    66fe:	0312      	lsls	r2, r2, #12
    6700:	4313      	orrs	r3, r2
    6702:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    6704:	683b      	ldr	r3, [r7, #0]
    6706:	685b      	ldr	r3, [r3, #4]
    6708:	2b01      	cmp	r3, #1
    670a:	d92c      	bls.n	6766 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    670c:	683b      	ldr	r3, [r7, #0]
    670e:	685a      	ldr	r2, [r3, #4]
    6710:	683b      	ldr	r3, [r7, #0]
    6712:	685b      	ldr	r3, [r3, #4]
    6714:	3b01      	subs	r3, #1
    6716:	4013      	ands	r3, r2
    6718:	d11a      	bne.n	6750 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    671a:	2300      	movs	r3, #0
    671c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    671e:	2302      	movs	r3, #2
    6720:	60bb      	str	r3, [r7, #8]
    6722:	e005      	b.n	6730 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    6724:	68fb      	ldr	r3, [r7, #12]
    6726:	3301      	adds	r3, #1
    6728:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    672a:	68bb      	ldr	r3, [r7, #8]
    672c:	005b      	lsls	r3, r3, #1
    672e:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    6730:	683b      	ldr	r3, [r7, #0]
    6732:	685a      	ldr	r2, [r3, #4]
    6734:	68bb      	ldr	r3, [r7, #8]
    6736:	429a      	cmp	r2, r3
    6738:	d8f4      	bhi.n	6724 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    673a:	68fb      	ldr	r3, [r7, #12]
    673c:	021b      	lsls	r3, r3, #8
    673e:	693a      	ldr	r2, [r7, #16]
    6740:	4313      	orrs	r3, r2
    6742:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    6744:	697b      	ldr	r3, [r7, #20]
    6746:	2280      	movs	r2, #128	; 0x80
    6748:	0352      	lsls	r2, r2, #13
    674a:	4313      	orrs	r3, r2
    674c:	617b      	str	r3, [r7, #20]
    674e:	e00a      	b.n	6766 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    6750:	683b      	ldr	r3, [r7, #0]
    6752:	685b      	ldr	r3, [r3, #4]
    6754:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    6756:	693a      	ldr	r2, [r7, #16]
    6758:	4313      	orrs	r3, r2
    675a:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    675c:	697b      	ldr	r3, [r7, #20]
    675e:	2280      	movs	r2, #128	; 0x80
    6760:	0292      	lsls	r2, r2, #10
    6762:	4313      	orrs	r3, r2
    6764:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    6766:	683b      	ldr	r3, [r7, #0]
    6768:	7a1b      	ldrb	r3, [r3, #8]
    676a:	2b00      	cmp	r3, #0
    676c:	d004      	beq.n	6778 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    676e:	697b      	ldr	r3, [r7, #20]
    6770:	2280      	movs	r2, #128	; 0x80
    6772:	0392      	lsls	r2, r2, #14
    6774:	4313      	orrs	r3, r2
    6776:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    6778:	46c0      	nop			; (mov r8, r8)
    677a:	4b13      	ldr	r3, [pc, #76]	; (67c8 <system_gclk_gen_set_config+0x110>)
    677c:	4798      	blx	r3
    677e:	1e03      	subs	r3, r0, #0
    6780:	d1fb      	bne.n	677a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6782:	4b12      	ldr	r3, [pc, #72]	; (67cc <system_gclk_gen_set_config+0x114>)
    6784:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6786:	4a12      	ldr	r2, [pc, #72]	; (67d0 <system_gclk_gen_set_config+0x118>)
    6788:	1dfb      	adds	r3, r7, #7
    678a:	781b      	ldrb	r3, [r3, #0]
    678c:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    678e:	46c0      	nop			; (mov r8, r8)
    6790:	4b0d      	ldr	r3, [pc, #52]	; (67c8 <system_gclk_gen_set_config+0x110>)
    6792:	4798      	blx	r3
    6794:	1e03      	subs	r3, r0, #0
    6796:	d1fb      	bne.n	6790 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    6798:	4b0e      	ldr	r3, [pc, #56]	; (67d4 <system_gclk_gen_set_config+0x11c>)
    679a:	693a      	ldr	r2, [r7, #16]
    679c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    679e:	46c0      	nop			; (mov r8, r8)
    67a0:	4b09      	ldr	r3, [pc, #36]	; (67c8 <system_gclk_gen_set_config+0x110>)
    67a2:	4798      	blx	r3
    67a4:	1e03      	subs	r3, r0, #0
    67a6:	d1fb      	bne.n	67a0 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    67a8:	4b0a      	ldr	r3, [pc, #40]	; (67d4 <system_gclk_gen_set_config+0x11c>)
    67aa:	4a0a      	ldr	r2, [pc, #40]	; (67d4 <system_gclk_gen_set_config+0x11c>)
    67ac:	6851      	ldr	r1, [r2, #4]
    67ae:	2280      	movs	r2, #128	; 0x80
    67b0:	0252      	lsls	r2, r2, #9
    67b2:	4011      	ands	r1, r2
    67b4:	697a      	ldr	r2, [r7, #20]
    67b6:	430a      	orrs	r2, r1
    67b8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    67ba:	4b07      	ldr	r3, [pc, #28]	; (67d8 <system_gclk_gen_set_config+0x120>)
    67bc:	4798      	blx	r3
}
    67be:	46c0      	nop			; (mov r8, r8)
    67c0:	46bd      	mov	sp, r7
    67c2:	b006      	add	sp, #24
    67c4:	bd80      	pop	{r7, pc}
    67c6:	46c0      	nop			; (mov r8, r8)
    67c8:	00006669 	.word	0x00006669
    67cc:	00006641 	.word	0x00006641
    67d0:	40000c08 	.word	0x40000c08
    67d4:	40000c00 	.word	0x40000c00
    67d8:	00006655 	.word	0x00006655

000067dc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    67dc:	b580      	push	{r7, lr}
    67de:	b082      	sub	sp, #8
    67e0:	af00      	add	r7, sp, #0
    67e2:	0002      	movs	r2, r0
    67e4:	1dfb      	adds	r3, r7, #7
    67e6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    67e8:	46c0      	nop			; (mov r8, r8)
    67ea:	4b0e      	ldr	r3, [pc, #56]	; (6824 <system_gclk_gen_enable+0x48>)
    67ec:	4798      	blx	r3
    67ee:	1e03      	subs	r3, r0, #0
    67f0:	d1fb      	bne.n	67ea <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    67f2:	4b0d      	ldr	r3, [pc, #52]	; (6828 <system_gclk_gen_enable+0x4c>)
    67f4:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    67f6:	4a0d      	ldr	r2, [pc, #52]	; (682c <system_gclk_gen_enable+0x50>)
    67f8:	1dfb      	adds	r3, r7, #7
    67fa:	781b      	ldrb	r3, [r3, #0]
    67fc:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    67fe:	46c0      	nop			; (mov r8, r8)
    6800:	4b08      	ldr	r3, [pc, #32]	; (6824 <system_gclk_gen_enable+0x48>)
    6802:	4798      	blx	r3
    6804:	1e03      	subs	r3, r0, #0
    6806:	d1fb      	bne.n	6800 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    6808:	4b09      	ldr	r3, [pc, #36]	; (6830 <system_gclk_gen_enable+0x54>)
    680a:	4a09      	ldr	r2, [pc, #36]	; (6830 <system_gclk_gen_enable+0x54>)
    680c:	6852      	ldr	r2, [r2, #4]
    680e:	2180      	movs	r1, #128	; 0x80
    6810:	0249      	lsls	r1, r1, #9
    6812:	430a      	orrs	r2, r1
    6814:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    6816:	4b07      	ldr	r3, [pc, #28]	; (6834 <system_gclk_gen_enable+0x58>)
    6818:	4798      	blx	r3
}
    681a:	46c0      	nop			; (mov r8, r8)
    681c:	46bd      	mov	sp, r7
    681e:	b002      	add	sp, #8
    6820:	bd80      	pop	{r7, pc}
    6822:	46c0      	nop			; (mov r8, r8)
    6824:	00006669 	.word	0x00006669
    6828:	00006641 	.word	0x00006641
    682c:	40000c04 	.word	0x40000c04
    6830:	40000c00 	.word	0x40000c00
    6834:	00006655 	.word	0x00006655

00006838 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    6838:	b580      	push	{r7, lr}
    683a:	b086      	sub	sp, #24
    683c:	af00      	add	r7, sp, #0
    683e:	0002      	movs	r2, r0
    6840:	1dfb      	adds	r3, r7, #7
    6842:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6844:	46c0      	nop			; (mov r8, r8)
    6846:	4b2a      	ldr	r3, [pc, #168]	; (68f0 <system_gclk_gen_get_hz+0xb8>)
    6848:	4798      	blx	r3
    684a:	1e03      	subs	r3, r0, #0
    684c:	d1fb      	bne.n	6846 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    684e:	4b29      	ldr	r3, [pc, #164]	; (68f4 <system_gclk_gen_get_hz+0xbc>)
    6850:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6852:	4a29      	ldr	r2, [pc, #164]	; (68f8 <system_gclk_gen_get_hz+0xc0>)
    6854:	1dfb      	adds	r3, r7, #7
    6856:	781b      	ldrb	r3, [r3, #0]
    6858:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    685a:	46c0      	nop			; (mov r8, r8)
    685c:	4b24      	ldr	r3, [pc, #144]	; (68f0 <system_gclk_gen_get_hz+0xb8>)
    685e:	4798      	blx	r3
    6860:	1e03      	subs	r3, r0, #0
    6862:	d1fb      	bne.n	685c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    6864:	4b25      	ldr	r3, [pc, #148]	; (68fc <system_gclk_gen_get_hz+0xc4>)
    6866:	685b      	ldr	r3, [r3, #4]
    6868:	04db      	lsls	r3, r3, #19
    686a:	0edb      	lsrs	r3, r3, #27
    686c:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    686e:	0018      	movs	r0, r3
    6870:	4b23      	ldr	r3, [pc, #140]	; (6900 <system_gclk_gen_get_hz+0xc8>)
    6872:	4798      	blx	r3
    6874:	0003      	movs	r3, r0
    6876:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6878:	4a1f      	ldr	r2, [pc, #124]	; (68f8 <system_gclk_gen_get_hz+0xc0>)
    687a:	1dfb      	adds	r3, r7, #7
    687c:	781b      	ldrb	r3, [r3, #0]
    687e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    6880:	4b1e      	ldr	r3, [pc, #120]	; (68fc <system_gclk_gen_get_hz+0xc4>)
    6882:	685b      	ldr	r3, [r3, #4]
    6884:	02db      	lsls	r3, r3, #11
    6886:	0fdb      	lsrs	r3, r3, #31
    6888:	b2da      	uxtb	r2, r3
    688a:	2313      	movs	r3, #19
    688c:	18fb      	adds	r3, r7, r3
    688e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6890:	4a1c      	ldr	r2, [pc, #112]	; (6904 <system_gclk_gen_get_hz+0xcc>)
    6892:	1dfb      	adds	r3, r7, #7
    6894:	781b      	ldrb	r3, [r3, #0]
    6896:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    6898:	46c0      	nop			; (mov r8, r8)
    689a:	4b15      	ldr	r3, [pc, #84]	; (68f0 <system_gclk_gen_get_hz+0xb8>)
    689c:	4798      	blx	r3
    689e:	1e03      	subs	r3, r0, #0
    68a0:	d1fb      	bne.n	689a <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    68a2:	4b16      	ldr	r3, [pc, #88]	; (68fc <system_gclk_gen_get_hz+0xc4>)
    68a4:	689b      	ldr	r3, [r3, #8]
    68a6:	021b      	lsls	r3, r3, #8
    68a8:	0c1b      	lsrs	r3, r3, #16
    68aa:	b29b      	uxth	r3, r3
    68ac:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    68ae:	4b16      	ldr	r3, [pc, #88]	; (6908 <system_gclk_gen_get_hz+0xd0>)
    68b0:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    68b2:	2313      	movs	r3, #19
    68b4:	18fb      	adds	r3, r7, r3
    68b6:	781b      	ldrb	r3, [r3, #0]
    68b8:	2b00      	cmp	r3, #0
    68ba:	d109      	bne.n	68d0 <system_gclk_gen_get_hz+0x98>
    68bc:	68fb      	ldr	r3, [r7, #12]
    68be:	2b01      	cmp	r3, #1
    68c0:	d906      	bls.n	68d0 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    68c2:	4b12      	ldr	r3, [pc, #72]	; (690c <system_gclk_gen_get_hz+0xd4>)
    68c4:	68f9      	ldr	r1, [r7, #12]
    68c6:	6978      	ldr	r0, [r7, #20]
    68c8:	4798      	blx	r3
    68ca:	0003      	movs	r3, r0
    68cc:	617b      	str	r3, [r7, #20]
    68ce:	e00a      	b.n	68e6 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    68d0:	2313      	movs	r3, #19
    68d2:	18fb      	adds	r3, r7, r3
    68d4:	781b      	ldrb	r3, [r3, #0]
    68d6:	2b00      	cmp	r3, #0
    68d8:	d005      	beq.n	68e6 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    68da:	68fb      	ldr	r3, [r7, #12]
    68dc:	3301      	adds	r3, #1
    68de:	697a      	ldr	r2, [r7, #20]
    68e0:	40da      	lsrs	r2, r3
    68e2:	0013      	movs	r3, r2
    68e4:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    68e6:	697b      	ldr	r3, [r7, #20]
}
    68e8:	0018      	movs	r0, r3
    68ea:	46bd      	mov	sp, r7
    68ec:	b006      	add	sp, #24
    68ee:	bd80      	pop	{r7, pc}
    68f0:	00006669 	.word	0x00006669
    68f4:	00006641 	.word	0x00006641
    68f8:	40000c04 	.word	0x40000c04
    68fc:	40000c00 	.word	0x40000c00
    6900:	00005ee5 	.word	0x00005ee5
    6904:	40000c08 	.word	0x40000c08
    6908:	00006655 	.word	0x00006655
    690c:	0000b8cd 	.word	0x0000b8cd

00006910 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    6910:	b580      	push	{r7, lr}
    6912:	b084      	sub	sp, #16
    6914:	af00      	add	r7, sp, #0
    6916:	0002      	movs	r2, r0
    6918:	6039      	str	r1, [r7, #0]
    691a:	1dfb      	adds	r3, r7, #7
    691c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    691e:	1dfb      	adds	r3, r7, #7
    6920:	781b      	ldrb	r3, [r3, #0]
    6922:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    6924:	683b      	ldr	r3, [r7, #0]
    6926:	781b      	ldrb	r3, [r3, #0]
    6928:	021b      	lsls	r3, r3, #8
    692a:	001a      	movs	r2, r3
    692c:	68fb      	ldr	r3, [r7, #12]
    692e:	4313      	orrs	r3, r2
    6930:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    6932:	1dfb      	adds	r3, r7, #7
    6934:	781b      	ldrb	r3, [r3, #0]
    6936:	0018      	movs	r0, r3
    6938:	4b04      	ldr	r3, [pc, #16]	; (694c <system_gclk_chan_set_config+0x3c>)
    693a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    693c:	4b04      	ldr	r3, [pc, #16]	; (6950 <system_gclk_chan_set_config+0x40>)
    693e:	68fa      	ldr	r2, [r7, #12]
    6940:	b292      	uxth	r2, r2
    6942:	805a      	strh	r2, [r3, #2]
}
    6944:	46c0      	nop			; (mov r8, r8)
    6946:	46bd      	mov	sp, r7
    6948:	b004      	add	sp, #16
    694a:	bd80      	pop	{r7, pc}
    694c:	0000699d 	.word	0x0000699d
    6950:	40000c00 	.word	0x40000c00

00006954 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6954:	b580      	push	{r7, lr}
    6956:	b082      	sub	sp, #8
    6958:	af00      	add	r7, sp, #0
    695a:	0002      	movs	r2, r0
    695c:	1dfb      	adds	r3, r7, #7
    695e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6960:	4b0a      	ldr	r3, [pc, #40]	; (698c <system_gclk_chan_enable+0x38>)
    6962:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6964:	4a0a      	ldr	r2, [pc, #40]	; (6990 <system_gclk_chan_enable+0x3c>)
    6966:	1dfb      	adds	r3, r7, #7
    6968:	781b      	ldrb	r3, [r3, #0]
    696a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    696c:	4909      	ldr	r1, [pc, #36]	; (6994 <system_gclk_chan_enable+0x40>)
    696e:	4b09      	ldr	r3, [pc, #36]	; (6994 <system_gclk_chan_enable+0x40>)
    6970:	885b      	ldrh	r3, [r3, #2]
    6972:	b29b      	uxth	r3, r3
    6974:	2280      	movs	r2, #128	; 0x80
    6976:	01d2      	lsls	r2, r2, #7
    6978:	4313      	orrs	r3, r2
    697a:	b29b      	uxth	r3, r3
    697c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    697e:	4b06      	ldr	r3, [pc, #24]	; (6998 <system_gclk_chan_enable+0x44>)
    6980:	4798      	blx	r3
}
    6982:	46c0      	nop			; (mov r8, r8)
    6984:	46bd      	mov	sp, r7
    6986:	b002      	add	sp, #8
    6988:	bd80      	pop	{r7, pc}
    698a:	46c0      	nop			; (mov r8, r8)
    698c:	00006641 	.word	0x00006641
    6990:	40000c02 	.word	0x40000c02
    6994:	40000c00 	.word	0x40000c00
    6998:	00006655 	.word	0x00006655

0000699c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    699c:	b580      	push	{r7, lr}
    699e:	b084      	sub	sp, #16
    69a0:	af00      	add	r7, sp, #0
    69a2:	0002      	movs	r2, r0
    69a4:	1dfb      	adds	r3, r7, #7
    69a6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    69a8:	4b1c      	ldr	r3, [pc, #112]	; (6a1c <system_gclk_chan_disable+0x80>)
    69aa:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    69ac:	4a1c      	ldr	r2, [pc, #112]	; (6a20 <system_gclk_chan_disable+0x84>)
    69ae:	1dfb      	adds	r3, r7, #7
    69b0:	781b      	ldrb	r3, [r3, #0]
    69b2:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    69b4:	4b1b      	ldr	r3, [pc, #108]	; (6a24 <system_gclk_chan_disable+0x88>)
    69b6:	885b      	ldrh	r3, [r3, #2]
    69b8:	051b      	lsls	r3, r3, #20
    69ba:	0f1b      	lsrs	r3, r3, #28
    69bc:	b2db      	uxtb	r3, r3
    69be:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    69c0:	4a18      	ldr	r2, [pc, #96]	; (6a24 <system_gclk_chan_disable+0x88>)
    69c2:	8853      	ldrh	r3, [r2, #2]
    69c4:	4918      	ldr	r1, [pc, #96]	; (6a28 <system_gclk_chan_disable+0x8c>)
    69c6:	400b      	ands	r3, r1
    69c8:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    69ca:	4a16      	ldr	r2, [pc, #88]	; (6a24 <system_gclk_chan_disable+0x88>)
    69cc:	4b15      	ldr	r3, [pc, #84]	; (6a24 <system_gclk_chan_disable+0x88>)
    69ce:	885b      	ldrh	r3, [r3, #2]
    69d0:	b29b      	uxth	r3, r3
    69d2:	4916      	ldr	r1, [pc, #88]	; (6a2c <system_gclk_chan_disable+0x90>)
    69d4:	400b      	ands	r3, r1
    69d6:	b29b      	uxth	r3, r3
    69d8:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    69da:	46c0      	nop			; (mov r8, r8)
    69dc:	4b11      	ldr	r3, [pc, #68]	; (6a24 <system_gclk_chan_disable+0x88>)
    69de:	885b      	ldrh	r3, [r3, #2]
    69e0:	b29b      	uxth	r3, r3
    69e2:	001a      	movs	r2, r3
    69e4:	2380      	movs	r3, #128	; 0x80
    69e6:	01db      	lsls	r3, r3, #7
    69e8:	4013      	ands	r3, r2
    69ea:	d1f7      	bne.n	69dc <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    69ec:	4a0d      	ldr	r2, [pc, #52]	; (6a24 <system_gclk_chan_disable+0x88>)
    69ee:	68fb      	ldr	r3, [r7, #12]
    69f0:	b2db      	uxtb	r3, r3
    69f2:	1c19      	adds	r1, r3, #0
    69f4:	230f      	movs	r3, #15
    69f6:	400b      	ands	r3, r1
    69f8:	b2d9      	uxtb	r1, r3
    69fa:	8853      	ldrh	r3, [r2, #2]
    69fc:	1c08      	adds	r0, r1, #0
    69fe:	210f      	movs	r1, #15
    6a00:	4001      	ands	r1, r0
    6a02:	0208      	lsls	r0, r1, #8
    6a04:	4908      	ldr	r1, [pc, #32]	; (6a28 <system_gclk_chan_disable+0x8c>)
    6a06:	400b      	ands	r3, r1
    6a08:	1c19      	adds	r1, r3, #0
    6a0a:	1c03      	adds	r3, r0, #0
    6a0c:	430b      	orrs	r3, r1
    6a0e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    6a10:	4b07      	ldr	r3, [pc, #28]	; (6a30 <system_gclk_chan_disable+0x94>)
    6a12:	4798      	blx	r3
}
    6a14:	46c0      	nop			; (mov r8, r8)
    6a16:	46bd      	mov	sp, r7
    6a18:	b004      	add	sp, #16
    6a1a:	bd80      	pop	{r7, pc}
    6a1c:	00006641 	.word	0x00006641
    6a20:	40000c02 	.word	0x40000c02
    6a24:	40000c00 	.word	0x40000c00
    6a28:	fffff0ff 	.word	0xfffff0ff
    6a2c:	ffffbfff 	.word	0xffffbfff
    6a30:	00006655 	.word	0x00006655

00006a34 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6a34:	b580      	push	{r7, lr}
    6a36:	b084      	sub	sp, #16
    6a38:	af00      	add	r7, sp, #0
    6a3a:	0002      	movs	r2, r0
    6a3c:	1dfb      	adds	r3, r7, #7
    6a3e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    6a40:	4b0d      	ldr	r3, [pc, #52]	; (6a78 <system_gclk_chan_get_hz+0x44>)
    6a42:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6a44:	4a0d      	ldr	r2, [pc, #52]	; (6a7c <system_gclk_chan_get_hz+0x48>)
    6a46:	1dfb      	adds	r3, r7, #7
    6a48:	781b      	ldrb	r3, [r3, #0]
    6a4a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6a4c:	4b0c      	ldr	r3, [pc, #48]	; (6a80 <system_gclk_chan_get_hz+0x4c>)
    6a4e:	885b      	ldrh	r3, [r3, #2]
    6a50:	051b      	lsls	r3, r3, #20
    6a52:	0f1b      	lsrs	r3, r3, #28
    6a54:	b2da      	uxtb	r2, r3
    6a56:	230f      	movs	r3, #15
    6a58:	18fb      	adds	r3, r7, r3
    6a5a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    6a5c:	4b09      	ldr	r3, [pc, #36]	; (6a84 <system_gclk_chan_get_hz+0x50>)
    6a5e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6a60:	230f      	movs	r3, #15
    6a62:	18fb      	adds	r3, r7, r3
    6a64:	781b      	ldrb	r3, [r3, #0]
    6a66:	0018      	movs	r0, r3
    6a68:	4b07      	ldr	r3, [pc, #28]	; (6a88 <system_gclk_chan_get_hz+0x54>)
    6a6a:	4798      	blx	r3
    6a6c:	0003      	movs	r3, r0
}
    6a6e:	0018      	movs	r0, r3
    6a70:	46bd      	mov	sp, r7
    6a72:	b004      	add	sp, #16
    6a74:	bd80      	pop	{r7, pc}
    6a76:	46c0      	nop			; (mov r8, r8)
    6a78:	00006641 	.word	0x00006641
    6a7c:	40000c02 	.word	0x40000c02
    6a80:	40000c00 	.word	0x40000c00
    6a84:	00006655 	.word	0x00006655
    6a88:	00006839 	.word	0x00006839

00006a8c <system_pinmux_get_group_from_gpio_pin>:
{
    6a8c:	b580      	push	{r7, lr}
    6a8e:	b084      	sub	sp, #16
    6a90:	af00      	add	r7, sp, #0
    6a92:	0002      	movs	r2, r0
    6a94:	1dfb      	adds	r3, r7, #7
    6a96:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6a98:	230f      	movs	r3, #15
    6a9a:	18fb      	adds	r3, r7, r3
    6a9c:	1dfa      	adds	r2, r7, #7
    6a9e:	7812      	ldrb	r2, [r2, #0]
    6aa0:	09d2      	lsrs	r2, r2, #7
    6aa2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6aa4:	230e      	movs	r3, #14
    6aa6:	18fb      	adds	r3, r7, r3
    6aa8:	1dfa      	adds	r2, r7, #7
    6aaa:	7812      	ldrb	r2, [r2, #0]
    6aac:	0952      	lsrs	r2, r2, #5
    6aae:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6ab0:	4b0d      	ldr	r3, [pc, #52]	; (6ae8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    6ab2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    6ab4:	230f      	movs	r3, #15
    6ab6:	18fb      	adds	r3, r7, r3
    6ab8:	781b      	ldrb	r3, [r3, #0]
    6aba:	2b00      	cmp	r3, #0
    6abc:	d10f      	bne.n	6ade <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    6abe:	230f      	movs	r3, #15
    6ac0:	18fb      	adds	r3, r7, r3
    6ac2:	781b      	ldrb	r3, [r3, #0]
    6ac4:	009b      	lsls	r3, r3, #2
    6ac6:	2210      	movs	r2, #16
    6ac8:	4694      	mov	ip, r2
    6aca:	44bc      	add	ip, r7
    6acc:	4463      	add	r3, ip
    6ace:	3b08      	subs	r3, #8
    6ad0:	681a      	ldr	r2, [r3, #0]
    6ad2:	230e      	movs	r3, #14
    6ad4:	18fb      	adds	r3, r7, r3
    6ad6:	781b      	ldrb	r3, [r3, #0]
    6ad8:	01db      	lsls	r3, r3, #7
    6ada:	18d3      	adds	r3, r2, r3
    6adc:	e000      	b.n	6ae0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    6ade:	2300      	movs	r3, #0
}
    6ae0:	0018      	movs	r0, r3
    6ae2:	46bd      	mov	sp, r7
    6ae4:	b004      	add	sp, #16
    6ae6:	bd80      	pop	{r7, pc}
    6ae8:	41004400 	.word	0x41004400

00006aec <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6aec:	b580      	push	{r7, lr}
    6aee:	b088      	sub	sp, #32
    6af0:	af00      	add	r7, sp, #0
    6af2:	60f8      	str	r0, [r7, #12]
    6af4:	60b9      	str	r1, [r7, #8]
    6af6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    6af8:	2300      	movs	r3, #0
    6afa:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6afc:	687b      	ldr	r3, [r7, #4]
    6afe:	78db      	ldrb	r3, [r3, #3]
    6b00:	2201      	movs	r2, #1
    6b02:	4053      	eors	r3, r2
    6b04:	b2db      	uxtb	r3, r3
    6b06:	2b00      	cmp	r3, #0
    6b08:	d035      	beq.n	6b76 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    6b0a:	687b      	ldr	r3, [r7, #4]
    6b0c:	781b      	ldrb	r3, [r3, #0]
    6b0e:	2b80      	cmp	r3, #128	; 0x80
    6b10:	d00b      	beq.n	6b2a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    6b12:	69fb      	ldr	r3, [r7, #28]
    6b14:	2280      	movs	r2, #128	; 0x80
    6b16:	0252      	lsls	r2, r2, #9
    6b18:	4313      	orrs	r3, r2
    6b1a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6b1c:	687b      	ldr	r3, [r7, #4]
    6b1e:	781b      	ldrb	r3, [r3, #0]
    6b20:	061b      	lsls	r3, r3, #24
    6b22:	001a      	movs	r2, r3
    6b24:	69fb      	ldr	r3, [r7, #28]
    6b26:	4313      	orrs	r3, r2
    6b28:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6b2a:	687b      	ldr	r3, [r7, #4]
    6b2c:	785b      	ldrb	r3, [r3, #1]
    6b2e:	2b00      	cmp	r3, #0
    6b30:	d003      	beq.n	6b3a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6b32:	687b      	ldr	r3, [r7, #4]
    6b34:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6b36:	2b02      	cmp	r3, #2
    6b38:	d110      	bne.n	6b5c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    6b3a:	69fb      	ldr	r3, [r7, #28]
    6b3c:	2280      	movs	r2, #128	; 0x80
    6b3e:	0292      	lsls	r2, r2, #10
    6b40:	4313      	orrs	r3, r2
    6b42:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6b44:	687b      	ldr	r3, [r7, #4]
    6b46:	789b      	ldrb	r3, [r3, #2]
    6b48:	2b00      	cmp	r3, #0
    6b4a:	d004      	beq.n	6b56 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6b4c:	69fb      	ldr	r3, [r7, #28]
    6b4e:	2280      	movs	r2, #128	; 0x80
    6b50:	02d2      	lsls	r2, r2, #11
    6b52:	4313      	orrs	r3, r2
    6b54:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6b56:	68fb      	ldr	r3, [r7, #12]
    6b58:	68ba      	ldr	r2, [r7, #8]
    6b5a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6b5c:	687b      	ldr	r3, [r7, #4]
    6b5e:	785b      	ldrb	r3, [r3, #1]
    6b60:	2b01      	cmp	r3, #1
    6b62:	d003      	beq.n	6b6c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6b64:	687b      	ldr	r3, [r7, #4]
    6b66:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6b68:	2b02      	cmp	r3, #2
    6b6a:	d107      	bne.n	6b7c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6b6c:	69fb      	ldr	r3, [r7, #28]
    6b6e:	4a22      	ldr	r2, [pc, #136]	; (6bf8 <_system_pinmux_config+0x10c>)
    6b70:	4013      	ands	r3, r2
    6b72:	61fb      	str	r3, [r7, #28]
    6b74:	e002      	b.n	6b7c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    6b76:	68fb      	ldr	r3, [r7, #12]
    6b78:	68ba      	ldr	r2, [r7, #8]
    6b7a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6b7c:	68bb      	ldr	r3, [r7, #8]
    6b7e:	041b      	lsls	r3, r3, #16
    6b80:	0c1b      	lsrs	r3, r3, #16
    6b82:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6b84:	68bb      	ldr	r3, [r7, #8]
    6b86:	0c1b      	lsrs	r3, r3, #16
    6b88:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6b8a:	69ba      	ldr	r2, [r7, #24]
    6b8c:	69fb      	ldr	r3, [r7, #28]
    6b8e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6b90:	22a0      	movs	r2, #160	; 0xa0
    6b92:	05d2      	lsls	r2, r2, #23
    6b94:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6b96:	68fb      	ldr	r3, [r7, #12]
    6b98:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6b9a:	697a      	ldr	r2, [r7, #20]
    6b9c:	69fb      	ldr	r3, [r7, #28]
    6b9e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6ba0:	22d0      	movs	r2, #208	; 0xd0
    6ba2:	0612      	lsls	r2, r2, #24
    6ba4:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6ba6:	68fb      	ldr	r3, [r7, #12]
    6ba8:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6baa:	687b      	ldr	r3, [r7, #4]
    6bac:	78db      	ldrb	r3, [r3, #3]
    6bae:	2201      	movs	r2, #1
    6bb0:	4053      	eors	r3, r2
    6bb2:	b2db      	uxtb	r3, r3
    6bb4:	2b00      	cmp	r3, #0
    6bb6:	d01a      	beq.n	6bee <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6bb8:	69fa      	ldr	r2, [r7, #28]
    6bba:	2380      	movs	r3, #128	; 0x80
    6bbc:	02db      	lsls	r3, r3, #11
    6bbe:	4013      	ands	r3, r2
    6bc0:	d00a      	beq.n	6bd8 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6bc2:	687b      	ldr	r3, [r7, #4]
    6bc4:	789b      	ldrb	r3, [r3, #2]
    6bc6:	2b01      	cmp	r3, #1
    6bc8:	d103      	bne.n	6bd2 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    6bca:	68fb      	ldr	r3, [r7, #12]
    6bcc:	68ba      	ldr	r2, [r7, #8]
    6bce:	619a      	str	r2, [r3, #24]
    6bd0:	e002      	b.n	6bd8 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    6bd2:	68fb      	ldr	r3, [r7, #12]
    6bd4:	68ba      	ldr	r2, [r7, #8]
    6bd6:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6bd8:	687b      	ldr	r3, [r7, #4]
    6bda:	785b      	ldrb	r3, [r3, #1]
    6bdc:	2b01      	cmp	r3, #1
    6bde:	d003      	beq.n	6be8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6be0:	687b      	ldr	r3, [r7, #4]
    6be2:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6be4:	2b02      	cmp	r3, #2
    6be6:	d102      	bne.n	6bee <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    6be8:	68fb      	ldr	r3, [r7, #12]
    6bea:	68ba      	ldr	r2, [r7, #8]
    6bec:	609a      	str	r2, [r3, #8]
		}
	}
}
    6bee:	46c0      	nop			; (mov r8, r8)
    6bf0:	46bd      	mov	sp, r7
    6bf2:	b008      	add	sp, #32
    6bf4:	bd80      	pop	{r7, pc}
    6bf6:	46c0      	nop			; (mov r8, r8)
    6bf8:	fffbffff 	.word	0xfffbffff

00006bfc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6bfc:	b580      	push	{r7, lr}
    6bfe:	b084      	sub	sp, #16
    6c00:	af00      	add	r7, sp, #0
    6c02:	0002      	movs	r2, r0
    6c04:	6039      	str	r1, [r7, #0]
    6c06:	1dfb      	adds	r3, r7, #7
    6c08:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6c0a:	1dfb      	adds	r3, r7, #7
    6c0c:	781b      	ldrb	r3, [r3, #0]
    6c0e:	0018      	movs	r0, r3
    6c10:	4b0a      	ldr	r3, [pc, #40]	; (6c3c <system_pinmux_pin_set_config+0x40>)
    6c12:	4798      	blx	r3
    6c14:	0003      	movs	r3, r0
    6c16:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6c18:	1dfb      	adds	r3, r7, #7
    6c1a:	781b      	ldrb	r3, [r3, #0]
    6c1c:	221f      	movs	r2, #31
    6c1e:	4013      	ands	r3, r2
    6c20:	2201      	movs	r2, #1
    6c22:	409a      	lsls	r2, r3
    6c24:	0013      	movs	r3, r2
    6c26:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    6c28:	683a      	ldr	r2, [r7, #0]
    6c2a:	68b9      	ldr	r1, [r7, #8]
    6c2c:	68fb      	ldr	r3, [r7, #12]
    6c2e:	0018      	movs	r0, r3
    6c30:	4b03      	ldr	r3, [pc, #12]	; (6c40 <system_pinmux_pin_set_config+0x44>)
    6c32:	4798      	blx	r3
}
    6c34:	46c0      	nop			; (mov r8, r8)
    6c36:	46bd      	mov	sp, r7
    6c38:	b004      	add	sp, #16
    6c3a:	bd80      	pop	{r7, pc}
    6c3c:	00006a8d 	.word	0x00006a8d
    6c40:	00006aed 	.word	0x00006aed

00006c44 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    6c44:	b580      	push	{r7, lr}
    6c46:	af00      	add	r7, sp, #0
	return;
    6c48:	46c0      	nop			; (mov r8, r8)
}
    6c4a:	46bd      	mov	sp, r7
    6c4c:	bd80      	pop	{r7, pc}
	...

00006c50 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6c50:	b580      	push	{r7, lr}
    6c52:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6c54:	4b06      	ldr	r3, [pc, #24]	; (6c70 <system_init+0x20>)
    6c56:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6c58:	4b06      	ldr	r3, [pc, #24]	; (6c74 <system_init+0x24>)
    6c5a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6c5c:	4b06      	ldr	r3, [pc, #24]	; (6c78 <system_init+0x28>)
    6c5e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6c60:	4b06      	ldr	r3, [pc, #24]	; (6c7c <system_init+0x2c>)
    6c62:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6c64:	4b06      	ldr	r3, [pc, #24]	; (6c80 <system_init+0x30>)
    6c66:	4798      	blx	r3
}
    6c68:	46c0      	nop			; (mov r8, r8)
    6c6a:	46bd      	mov	sp, r7
    6c6c:	bd80      	pop	{r7, pc}
    6c6e:	46c0      	nop			; (mov r8, r8)
    6c70:	00006375 	.word	0x00006375
    6c74:	000002f9 	.word	0x000002f9
    6c78:	00006c45 	.word	0x00006c45
    6c7c:	00006c45 	.word	0x00006c45
    6c80:	00006c45 	.word	0x00006c45

00006c84 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    6c84:	b580      	push	{r7, lr}
    6c86:	b082      	sub	sp, #8
    6c88:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    6c8a:	4b2f      	ldr	r3, [pc, #188]	; (6d48 <Reset_Handler+0xc4>)
    6c8c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    6c8e:	4b2f      	ldr	r3, [pc, #188]	; (6d4c <Reset_Handler+0xc8>)
    6c90:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    6c92:	687a      	ldr	r2, [r7, #4]
    6c94:	683b      	ldr	r3, [r7, #0]
    6c96:	429a      	cmp	r2, r3
    6c98:	d00c      	beq.n	6cb4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    6c9a:	e007      	b.n	6cac <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    6c9c:	683b      	ldr	r3, [r7, #0]
    6c9e:	1d1a      	adds	r2, r3, #4
    6ca0:	603a      	str	r2, [r7, #0]
    6ca2:	687a      	ldr	r2, [r7, #4]
    6ca4:	1d11      	adds	r1, r2, #4
    6ca6:	6079      	str	r1, [r7, #4]
    6ca8:	6812      	ldr	r2, [r2, #0]
    6caa:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    6cac:	683a      	ldr	r2, [r7, #0]
    6cae:	4b28      	ldr	r3, [pc, #160]	; (6d50 <Reset_Handler+0xcc>)
    6cb0:	429a      	cmp	r2, r3
    6cb2:	d3f3      	bcc.n	6c9c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    6cb4:	4b27      	ldr	r3, [pc, #156]	; (6d54 <Reset_Handler+0xd0>)
    6cb6:	603b      	str	r3, [r7, #0]
    6cb8:	e004      	b.n	6cc4 <Reset_Handler+0x40>
                *pDest++ = 0;
    6cba:	683b      	ldr	r3, [r7, #0]
    6cbc:	1d1a      	adds	r2, r3, #4
    6cbe:	603a      	str	r2, [r7, #0]
    6cc0:	2200      	movs	r2, #0
    6cc2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    6cc4:	683a      	ldr	r2, [r7, #0]
    6cc6:	4b24      	ldr	r3, [pc, #144]	; (6d58 <Reset_Handler+0xd4>)
    6cc8:	429a      	cmp	r2, r3
    6cca:	d3f6      	bcc.n	6cba <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    6ccc:	4b23      	ldr	r3, [pc, #140]	; (6d5c <Reset_Handler+0xd8>)
    6cce:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6cd0:	4b23      	ldr	r3, [pc, #140]	; (6d60 <Reset_Handler+0xdc>)
    6cd2:	687a      	ldr	r2, [r7, #4]
    6cd4:	21ff      	movs	r1, #255	; 0xff
    6cd6:	438a      	bics	r2, r1
    6cd8:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    6cda:	4a22      	ldr	r2, [pc, #136]	; (6d64 <Reset_Handler+0xe0>)
    6cdc:	2390      	movs	r3, #144	; 0x90
    6cde:	005b      	lsls	r3, r3, #1
    6ce0:	2102      	movs	r1, #2
    6ce2:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6ce4:	4a20      	ldr	r2, [pc, #128]	; (6d68 <Reset_Handler+0xe4>)
    6ce6:	78d3      	ldrb	r3, [r2, #3]
    6ce8:	2103      	movs	r1, #3
    6cea:	438b      	bics	r3, r1
    6cec:	1c19      	adds	r1, r3, #0
    6cee:	2302      	movs	r3, #2
    6cf0:	430b      	orrs	r3, r1
    6cf2:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6cf4:	4a1c      	ldr	r2, [pc, #112]	; (6d68 <Reset_Handler+0xe4>)
    6cf6:	78d3      	ldrb	r3, [r2, #3]
    6cf8:	210c      	movs	r1, #12
    6cfa:	438b      	bics	r3, r1
    6cfc:	1c19      	adds	r1, r3, #0
    6cfe:	2308      	movs	r3, #8
    6d00:	430b      	orrs	r3, r1
    6d02:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    6d04:	4a19      	ldr	r2, [pc, #100]	; (6d6c <Reset_Handler+0xe8>)
    6d06:	7b93      	ldrb	r3, [r2, #14]
    6d08:	2130      	movs	r1, #48	; 0x30
    6d0a:	438b      	bics	r3, r1
    6d0c:	1c19      	adds	r1, r3, #0
    6d0e:	2320      	movs	r3, #32
    6d10:	430b      	orrs	r3, r1
    6d12:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6d14:	4a15      	ldr	r2, [pc, #84]	; (6d6c <Reset_Handler+0xe8>)
    6d16:	7b93      	ldrb	r3, [r2, #14]
    6d18:	210c      	movs	r1, #12
    6d1a:	438b      	bics	r3, r1
    6d1c:	1c19      	adds	r1, r3, #0
    6d1e:	2308      	movs	r3, #8
    6d20:	430b      	orrs	r3, r1
    6d22:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6d24:	4a11      	ldr	r2, [pc, #68]	; (6d6c <Reset_Handler+0xe8>)
    6d26:	7b93      	ldrb	r3, [r2, #14]
    6d28:	2103      	movs	r1, #3
    6d2a:	438b      	bics	r3, r1
    6d2c:	1c19      	adds	r1, r3, #0
    6d2e:	2302      	movs	r3, #2
    6d30:	430b      	orrs	r3, r1
    6d32:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    6d34:	4a0e      	ldr	r2, [pc, #56]	; (6d70 <Reset_Handler+0xec>)
    6d36:	6853      	ldr	r3, [r2, #4]
    6d38:	2180      	movs	r1, #128	; 0x80
    6d3a:	430b      	orrs	r3, r1
    6d3c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    6d3e:	4b0d      	ldr	r3, [pc, #52]	; (6d74 <Reset_Handler+0xf0>)
    6d40:	4798      	blx	r3

        /* Branch to main function */
        main();
    6d42:	4b0d      	ldr	r3, [pc, #52]	; (6d78 <Reset_Handler+0xf4>)
    6d44:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    6d46:	e7fe      	b.n	6d46 <Reset_Handler+0xc2>
    6d48:	0000d6b0 	.word	0x0000d6b0
    6d4c:	20000000 	.word	0x20000000
    6d50:	200000d0 	.word	0x200000d0
    6d54:	200000d0 	.word	0x200000d0
    6d58:	20000ce0 	.word	0x20000ce0
    6d5c:	00000000 	.word	0x00000000
    6d60:	e000ed00 	.word	0xe000ed00
    6d64:	41007000 	.word	0x41007000
    6d68:	41005000 	.word	0x41005000
    6d6c:	41004800 	.word	0x41004800
    6d70:	41004000 	.word	0x41004000
    6d74:	0000bc0d 	.word	0x0000bc0d
    6d78:	0000aec1 	.word	0x0000aec1

00006d7c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    6d7c:	b580      	push	{r7, lr}
    6d7e:	af00      	add	r7, sp, #0
        while (1) {
    6d80:	e7fe      	b.n	6d80 <Dummy_Handler+0x4>
	...

00006d84 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    6d84:	b580      	push	{r7, lr}
    6d86:	b086      	sub	sp, #24
    6d88:	af00      	add	r7, sp, #0
    6d8a:	60f8      	str	r0, [r7, #12]
    6d8c:	60b9      	str	r1, [r7, #8]
    6d8e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    6d90:	2300      	movs	r3, #0
    6d92:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    6d94:	68fb      	ldr	r3, [r7, #12]
    6d96:	2b00      	cmp	r3, #0
    6d98:	d012      	beq.n	6dc0 <_read+0x3c>
		return -1;
    6d9a:	2301      	movs	r3, #1
    6d9c:	425b      	negs	r3, r3
    6d9e:	e013      	b.n	6dc8 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    6da0:	4b0b      	ldr	r3, [pc, #44]	; (6dd0 <_read+0x4c>)
    6da2:	681a      	ldr	r2, [r3, #0]
    6da4:	4b0b      	ldr	r3, [pc, #44]	; (6dd4 <_read+0x50>)
    6da6:	681b      	ldr	r3, [r3, #0]
    6da8:	68b9      	ldr	r1, [r7, #8]
    6daa:	0018      	movs	r0, r3
    6dac:	4790      	blx	r2
		ptr++;
    6dae:	68bb      	ldr	r3, [r7, #8]
    6db0:	3301      	adds	r3, #1
    6db2:	60bb      	str	r3, [r7, #8]
		nChars++;
    6db4:	697b      	ldr	r3, [r7, #20]
    6db6:	3301      	adds	r3, #1
    6db8:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    6dba:	687b      	ldr	r3, [r7, #4]
    6dbc:	3b01      	subs	r3, #1
    6dbe:	607b      	str	r3, [r7, #4]
    6dc0:	687b      	ldr	r3, [r7, #4]
    6dc2:	2b00      	cmp	r3, #0
    6dc4:	dcec      	bgt.n	6da0 <_read+0x1c>
	}
	return nChars;
    6dc6:	697b      	ldr	r3, [r7, #20]
}
    6dc8:	0018      	movs	r0, r3
    6dca:	46bd      	mov	sp, r7
    6dcc:	b006      	add	sp, #24
    6dce:	bd80      	pop	{r7, pc}
    6dd0:	20000a2c 	.word	0x20000a2c
    6dd4:	20000a34 	.word	0x20000a34

00006dd8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    6dd8:	b580      	push	{r7, lr}
    6dda:	b086      	sub	sp, #24
    6ddc:	af00      	add	r7, sp, #0
    6dde:	60f8      	str	r0, [r7, #12]
    6de0:	60b9      	str	r1, [r7, #8]
    6de2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    6de4:	2300      	movs	r3, #0
    6de6:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    6de8:	68fb      	ldr	r3, [r7, #12]
    6dea:	2b01      	cmp	r3, #1
    6dec:	d01d      	beq.n	6e2a <_write+0x52>
    6dee:	68fb      	ldr	r3, [r7, #12]
    6df0:	2b02      	cmp	r3, #2
    6df2:	d01a      	beq.n	6e2a <_write+0x52>
    6df4:	68fb      	ldr	r3, [r7, #12]
    6df6:	2b03      	cmp	r3, #3
    6df8:	d017      	beq.n	6e2a <_write+0x52>
		return -1;
    6dfa:	2301      	movs	r3, #1
    6dfc:	425b      	negs	r3, r3
    6dfe:	e018      	b.n	6e32 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    6e00:	4b0e      	ldr	r3, [pc, #56]	; (6e3c <_write+0x64>)
    6e02:	681a      	ldr	r2, [r3, #0]
    6e04:	4b0e      	ldr	r3, [pc, #56]	; (6e40 <_write+0x68>)
    6e06:	6818      	ldr	r0, [r3, #0]
    6e08:	68bb      	ldr	r3, [r7, #8]
    6e0a:	1c59      	adds	r1, r3, #1
    6e0c:	60b9      	str	r1, [r7, #8]
    6e0e:	781b      	ldrb	r3, [r3, #0]
    6e10:	0019      	movs	r1, r3
    6e12:	4790      	blx	r2
    6e14:	1e03      	subs	r3, r0, #0
    6e16:	da02      	bge.n	6e1e <_write+0x46>
			return -1;
    6e18:	2301      	movs	r3, #1
    6e1a:	425b      	negs	r3, r3
    6e1c:	e009      	b.n	6e32 <_write+0x5a>
		}
		++nChars;
    6e1e:	697b      	ldr	r3, [r7, #20]
    6e20:	3301      	adds	r3, #1
    6e22:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    6e24:	687b      	ldr	r3, [r7, #4]
    6e26:	3b01      	subs	r3, #1
    6e28:	607b      	str	r3, [r7, #4]
    6e2a:	687b      	ldr	r3, [r7, #4]
    6e2c:	2b00      	cmp	r3, #0
    6e2e:	d1e7      	bne.n	6e00 <_write+0x28>
	}
	return nChars;
    6e30:	697b      	ldr	r3, [r7, #20]
}
    6e32:	0018      	movs	r0, r3
    6e34:	46bd      	mov	sp, r7
    6e36:	b006      	add	sp, #24
    6e38:	bd80      	pop	{r7, pc}
    6e3a:	46c0      	nop			; (mov r8, r8)
    6e3c:	20000a30 	.word	0x20000a30
    6e40:	20000a34 	.word	0x20000a34

00006e44 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    6e44:	b580      	push	{r7, lr}
    6e46:	b084      	sub	sp, #16
    6e48:	af00      	add	r7, sp, #0
    6e4a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6e4c:	4b0a      	ldr	r3, [pc, #40]	; (6e78 <_sbrk+0x34>)
    6e4e:	681b      	ldr	r3, [r3, #0]
    6e50:	2b00      	cmp	r3, #0
    6e52:	d102      	bne.n	6e5a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    6e54:	4b08      	ldr	r3, [pc, #32]	; (6e78 <_sbrk+0x34>)
    6e56:	4a09      	ldr	r2, [pc, #36]	; (6e7c <_sbrk+0x38>)
    6e58:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    6e5a:	4b07      	ldr	r3, [pc, #28]	; (6e78 <_sbrk+0x34>)
    6e5c:	681b      	ldr	r3, [r3, #0]
    6e5e:	60fb      	str	r3, [r7, #12]

	heap += incr;
    6e60:	4b05      	ldr	r3, [pc, #20]	; (6e78 <_sbrk+0x34>)
    6e62:	681a      	ldr	r2, [r3, #0]
    6e64:	687b      	ldr	r3, [r7, #4]
    6e66:	18d2      	adds	r2, r2, r3
    6e68:	4b03      	ldr	r3, [pc, #12]	; (6e78 <_sbrk+0x34>)
    6e6a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    6e6c:	68fb      	ldr	r3, [r7, #12]
}
    6e6e:	0018      	movs	r0, r3
    6e70:	46bd      	mov	sp, r7
    6e72:	b004      	add	sp, #16
    6e74:	bd80      	pop	{r7, pc}
    6e76:	46c0      	nop			; (mov r8, r8)
    6e78:	200001b4 	.word	0x200001b4
    6e7c:	20002ce0 	.word	0x20002ce0

00006e80 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    6e80:	b580      	push	{r7, lr}
    6e82:	b082      	sub	sp, #8
    6e84:	af00      	add	r7, sp, #0
    6e86:	6078      	str	r0, [r7, #4]
	return -1;
    6e88:	2301      	movs	r3, #1
    6e8a:	425b      	negs	r3, r3
}
    6e8c:	0018      	movs	r0, r3
    6e8e:	46bd      	mov	sp, r7
    6e90:	b002      	add	sp, #8
    6e92:	bd80      	pop	{r7, pc}

00006e94 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    6e94:	b580      	push	{r7, lr}
    6e96:	b082      	sub	sp, #8
    6e98:	af00      	add	r7, sp, #0
    6e9a:	6078      	str	r0, [r7, #4]
    6e9c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    6e9e:	683b      	ldr	r3, [r7, #0]
    6ea0:	2280      	movs	r2, #128	; 0x80
    6ea2:	0192      	lsls	r2, r2, #6
    6ea4:	605a      	str	r2, [r3, #4]

	return 0;
    6ea6:	2300      	movs	r3, #0
}
    6ea8:	0018      	movs	r0, r3
    6eaa:	46bd      	mov	sp, r7
    6eac:	b002      	add	sp, #8
    6eae:	bd80      	pop	{r7, pc}

00006eb0 <_lseek>:
{
	return 1;
}

extern int _lseek(int file, int ptr, int dir)
{
    6eb0:	b580      	push	{r7, lr}
    6eb2:	b084      	sub	sp, #16
    6eb4:	af00      	add	r7, sp, #0
    6eb6:	60f8      	str	r0, [r7, #12]
    6eb8:	60b9      	str	r1, [r7, #8]
    6eba:	607a      	str	r2, [r7, #4]
	return 0;
    6ebc:	2300      	movs	r3, #0
}
    6ebe:	0018      	movs	r0, r3
    6ec0:	46bd      	mov	sp, r7
    6ec2:	b004      	add	sp, #16
    6ec4:	bd80      	pop	{r7, pc}

00006ec6 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
    6ec6:	b580      	push	{r7, lr}
    6ec8:	b082      	sub	sp, #8
    6eca:	af00      	add	r7, sp, #0
    6ecc:	6078      	str	r0, [r7, #4]
	time->second = 0;
    6ece:	687b      	ldr	r3, [r7, #4]
    6ed0:	2200      	movs	r2, #0
    6ed2:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
    6ed4:	687b      	ldr	r3, [r7, #4]
    6ed6:	2200      	movs	r2, #0
    6ed8:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
    6eda:	687b      	ldr	r3, [r7, #4]
    6edc:	2200      	movs	r2, #0
    6ede:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
    6ee0:	687b      	ldr	r3, [r7, #4]
    6ee2:	2200      	movs	r2, #0
    6ee4:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
    6ee6:	687b      	ldr	r3, [r7, #4]
    6ee8:	2201      	movs	r2, #1
    6eea:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
    6eec:	687b      	ldr	r3, [r7, #4]
    6eee:	2201      	movs	r2, #1
    6ef0:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
    6ef2:	687b      	ldr	r3, [r7, #4]
    6ef4:	22fa      	movs	r2, #250	; 0xfa
    6ef6:	00d2      	lsls	r2, r2, #3
    6ef8:	80da      	strh	r2, [r3, #6]
}
    6efa:	46c0      	nop			; (mov r8, r8)
    6efc:	46bd      	mov	sp, r7
    6efe:	b002      	add	sp, #8
    6f00:	bd80      	pop	{r7, pc}
	...

00006f04 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
    6f04:	b580      	push	{r7, lr}
    6f06:	b086      	sub	sp, #24
    6f08:	af00      	add	r7, sp, #0
    6f0a:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
    6f0c:	230c      	movs	r3, #12
    6f0e:	18fb      	adds	r3, r7, r3
    6f10:	0018      	movs	r0, r3
    6f12:	4b23      	ldr	r3, [pc, #140]	; (6fa0 <rtc_calendar_get_config_defaults+0x9c>)
    6f14:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    6f16:	687b      	ldr	r3, [r7, #4]
    6f18:	22a0      	movs	r2, #160	; 0xa0
    6f1a:	0112      	lsls	r2, r2, #4
    6f1c:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
    6f1e:	687b      	ldr	r3, [r7, #4]
    6f20:	2200      	movs	r2, #0
    6f22:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    6f24:	687b      	ldr	r3, [r7, #4]
    6f26:	2200      	movs	r2, #0
    6f28:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
    6f2a:	687b      	ldr	r3, [r7, #4]
    6f2c:	2200      	movs	r2, #0
    6f2e:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
    6f30:	687b      	ldr	r3, [r7, #4]
    6f32:	22fa      	movs	r2, #250	; 0xfa
    6f34:	00d2      	lsls	r2, r2, #3
    6f36:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    6f38:	2317      	movs	r3, #23
    6f3a:	18fb      	adds	r3, r7, r3
    6f3c:	2200      	movs	r2, #0
    6f3e:	701a      	strb	r2, [r3, #0]
    6f40:	e025      	b.n	6f8e <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
    6f42:	2317      	movs	r3, #23
    6f44:	18fb      	adds	r3, r7, r3
    6f46:	781a      	ldrb	r2, [r3, #0]
    6f48:	6879      	ldr	r1, [r7, #4]
    6f4a:	2008      	movs	r0, #8
    6f4c:	0013      	movs	r3, r2
    6f4e:	009b      	lsls	r3, r3, #2
    6f50:	189b      	adds	r3, r3, r2
    6f52:	005b      	lsls	r3, r3, #1
    6f54:	18cb      	adds	r3, r1, r3
    6f56:	181a      	adds	r2, r3, r0
    6f58:	230c      	movs	r3, #12
    6f5a:	18fb      	adds	r3, r7, r3
    6f5c:	0010      	movs	r0, r2
    6f5e:	0019      	movs	r1, r3
    6f60:	2308      	movs	r3, #8
    6f62:	001a      	movs	r2, r3
    6f64:	4b0f      	ldr	r3, [pc, #60]	; (6fa4 <rtc_calendar_get_config_defaults+0xa0>)
    6f66:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    6f68:	2317      	movs	r3, #23
    6f6a:	18fb      	adds	r3, r7, r3
    6f6c:	781a      	ldrb	r2, [r3, #0]
    6f6e:	6879      	ldr	r1, [r7, #4]
    6f70:	0013      	movs	r3, r2
    6f72:	009b      	lsls	r3, r3, #2
    6f74:	189b      	adds	r3, r3, r2
    6f76:	005b      	lsls	r3, r3, #1
    6f78:	18cb      	adds	r3, r1, r3
    6f7a:	3310      	adds	r3, #16
    6f7c:	2206      	movs	r2, #6
    6f7e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    6f80:	2317      	movs	r3, #23
    6f82:	18fb      	adds	r3, r7, r3
    6f84:	781a      	ldrb	r2, [r3, #0]
    6f86:	2317      	movs	r3, #23
    6f88:	18fb      	adds	r3, r7, r3
    6f8a:	3201      	adds	r2, #1
    6f8c:	701a      	strb	r2, [r3, #0]
    6f8e:	2317      	movs	r3, #23
    6f90:	18fb      	adds	r3, r7, r3
    6f92:	781b      	ldrb	r3, [r3, #0]
    6f94:	2b00      	cmp	r3, #0
    6f96:	d0d4      	beq.n	6f42 <rtc_calendar_get_config_defaults+0x3e>
	}
}
    6f98:	46c0      	nop			; (mov r8, r8)
    6f9a:	46bd      	mov	sp, r7
    6f9c:	b006      	add	sp, #24
    6f9e:	bd80      	pop	{r7, pc}
    6fa0:	00006ec7 	.word	0x00006ec7
    6fa4:	0000bc69 	.word	0x0000bc69

00006fa8 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
    6fa8:	b580      	push	{r7, lr}
    6faa:	b088      	sub	sp, #32
    6fac:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
    6fae:	230c      	movs	r3, #12
    6fb0:	18fb      	adds	r3, r7, r3
    6fb2:	0018      	movs	r0, r3
    6fb4:	4b1a      	ldr	r3, [pc, #104]	; (7020 <configure_rtc_calendar+0x78>)
    6fb6:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
    6fb8:	1d3b      	adds	r3, r7, #4
    6fba:	0018      	movs	r0, r3
    6fbc:	4b19      	ldr	r3, [pc, #100]	; (7024 <configure_rtc_calendar+0x7c>)
    6fbe:	4798      	blx	r3
	init_time.year   = 2014;
    6fc0:	1d3b      	adds	r3, r7, #4
    6fc2:	4a19      	ldr	r2, [pc, #100]	; (7028 <configure_rtc_calendar+0x80>)
    6fc4:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
    6fc6:	1d3b      	adds	r3, r7, #4
    6fc8:	2201      	movs	r2, #1
    6fca:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
    6fcc:	1d3b      	adds	r3, r7, #4
    6fce:	2201      	movs	r2, #1
    6fd0:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
    6fd2:	1d3b      	adds	r3, r7, #4
    6fd4:	2200      	movs	r2, #0
    6fd6:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
    6fd8:	1d3b      	adds	r3, r7, #4
    6fda:	2200      	movs	r2, #0
    6fdc:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
    6fde:	1d3b      	adds	r3, r7, #4
    6fe0:	2204      	movs	r2, #4
    6fe2:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
    6fe4:	230c      	movs	r3, #12
    6fe6:	18fb      	adds	r3, r7, r3
    6fe8:	2201      	movs	r2, #1
    6fea:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    6fec:	230c      	movs	r3, #12
    6fee:	18fb      	adds	r3, r7, r3
    6ff0:	1d3a      	adds	r2, r7, #4
    6ff2:	3308      	adds	r3, #8
    6ff4:	ca03      	ldmia	r2!, {r0, r1}
    6ff6:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    6ff8:	230c      	movs	r3, #12
    6ffa:	18fb      	adds	r3, r7, r3
    6ffc:	2206      	movs	r2, #6
    6ffe:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    7000:	230c      	movs	r3, #12
    7002:	18fa      	adds	r2, r7, r3
    7004:	4909      	ldr	r1, [pc, #36]	; (702c <configure_rtc_calendar+0x84>)
    7006:	4b0a      	ldr	r3, [pc, #40]	; (7030 <configure_rtc_calendar+0x88>)
    7008:	0018      	movs	r0, r3
    700a:	4b0a      	ldr	r3, [pc, #40]	; (7034 <configure_rtc_calendar+0x8c>)
    700c:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
    700e:	4b08      	ldr	r3, [pc, #32]	; (7030 <configure_rtc_calendar+0x88>)
    7010:	0018      	movs	r0, r3
    7012:	4b09      	ldr	r3, [pc, #36]	; (7038 <configure_rtc_calendar+0x90>)
    7014:	4798      	blx	r3
}
    7016:	46c0      	nop			; (mov r8, r8)
    7018:	46bd      	mov	sp, r7
    701a:	b008      	add	sp, #32
    701c:	bd80      	pop	{r7, pc}
    701e:	46c0      	nop			; (mov r8, r8)
    7020:	00006f05 	.word	0x00006f05
    7024:	00006ec7 	.word	0x00006ec7
    7028:	000007de 	.word	0x000007de
    702c:	40001400 	.word	0x40001400
    7030:	20000a38 	.word	0x20000a38
    7034:	000036ed 	.word	0x000036ed
    7038:	0000343d 	.word	0x0000343d

0000703c <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    703c:	b590      	push	{r4, r7, lr}
    703e:	b085      	sub	sp, #20
    7040:	af00      	add	r7, sp, #0
    7042:	0002      	movs	r2, r0
    7044:	1dfb      	adds	r3, r7, #7
    7046:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
    7048:	4b1a      	ldr	r3, [pc, #104]	; (70b4 <disk_initialize+0x78>)
    704a:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
    704c:	1dfb      	adds	r3, r7, #7
    704e:	781b      	ldrb	r3, [r3, #0]
    7050:	2b01      	cmp	r3, #1
    7052:	d901      	bls.n	7058 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    7054:	2301      	movs	r3, #1
    7056:	e029      	b.n	70ac <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
    7058:	2300      	movs	r3, #0
    705a:	60fb      	str	r3, [r7, #12]
    705c:	e010      	b.n	7080 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
    705e:	230b      	movs	r3, #11
    7060:	18fc      	adds	r4, r7, r3
    7062:	1dfb      	adds	r3, r7, #7
    7064:	781b      	ldrb	r3, [r3, #0]
    7066:	0018      	movs	r0, r3
    7068:	4b13      	ldr	r3, [pc, #76]	; (70b8 <disk_initialize+0x7c>)
    706a:	4798      	blx	r3
    706c:	0003      	movs	r3, r0
    706e:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
    7070:	230b      	movs	r3, #11
    7072:	18fb      	adds	r3, r7, r3
    7074:	781b      	ldrb	r3, [r3, #0]
    7076:	2b03      	cmp	r3, #3
    7078:	d106      	bne.n	7088 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
    707a:	68fb      	ldr	r3, [r7, #12]
    707c:	3301      	adds	r3, #1
    707e:	60fb      	str	r3, [r7, #12]
    7080:	68fb      	ldr	r3, [r7, #12]
    7082:	2b01      	cmp	r3, #1
    7084:	ddeb      	ble.n	705e <disk_initialize+0x22>
    7086:	e000      	b.n	708a <disk_initialize+0x4e>
			break;
    7088:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
    708a:	230b      	movs	r3, #11
    708c:	18fb      	adds	r3, r7, r3
    708e:	781b      	ldrb	r3, [r3, #0]
    7090:	2b00      	cmp	r3, #0
    7092:	d001      	beq.n	7098 <disk_initialize+0x5c>
		return STA_NOINIT;
    7094:	2301      	movs	r3, #1
    7096:	e009      	b.n	70ac <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
    7098:	1dfb      	adds	r3, r7, #7
    709a:	781b      	ldrb	r3, [r3, #0]
    709c:	0018      	movs	r0, r3
    709e:	4b07      	ldr	r3, [pc, #28]	; (70bc <disk_initialize+0x80>)
    70a0:	4798      	blx	r3
    70a2:	1e03      	subs	r3, r0, #0
    70a4:	d001      	beq.n	70aa <disk_initialize+0x6e>
		return STA_PROTECT;
    70a6:	2304      	movs	r3, #4
    70a8:	e000      	b.n	70ac <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
    70aa:	2300      	movs	r3, #0
}
    70ac:	0018      	movs	r0, r3
    70ae:	46bd      	mov	sp, r7
    70b0:	b005      	add	sp, #20
    70b2:	bd90      	pop	{r4, r7, pc}
    70b4:	00006fa9 	.word	0x00006fa9
    70b8:	000030dd 	.word	0x000030dd
    70bc:	00003195 	.word	0x00003195

000070c0 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    70c0:	b580      	push	{r7, lr}
    70c2:	b082      	sub	sp, #8
    70c4:	af00      	add	r7, sp, #0
    70c6:	0002      	movs	r2, r0
    70c8:	1dfb      	adds	r3, r7, #7
    70ca:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
    70cc:	1dfb      	adds	r3, r7, #7
    70ce:	781b      	ldrb	r3, [r3, #0]
    70d0:	0018      	movs	r0, r3
    70d2:	4b08      	ldr	r3, [pc, #32]	; (70f4 <disk_status+0x34>)
    70d4:	4798      	blx	r3
    70d6:	1e03      	subs	r3, r0, #0
    70d8:	d002      	beq.n	70e0 <disk_status+0x20>
    70da:	2b02      	cmp	r3, #2
    70dc:	d002      	beq.n	70e4 <disk_status+0x24>
    70de:	e003      	b.n	70e8 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
    70e0:	2300      	movs	r3, #0
    70e2:	e002      	b.n	70ea <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    70e4:	2303      	movs	r3, #3
    70e6:	e000      	b.n	70ea <disk_status+0x2a>
	default:
		return STA_NOINIT;
    70e8:	2301      	movs	r3, #1
	}
}
    70ea:	0018      	movs	r0, r3
    70ec:	46bd      	mov	sp, r7
    70ee:	b002      	add	sp, #8
    70f0:	bd80      	pop	{r7, pc}
    70f2:	46c0      	nop			; (mov r8, r8)
    70f4:	000030dd 	.word	0x000030dd

000070f8 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    70f8:	b590      	push	{r4, r7, lr}
    70fa:	b089      	sub	sp, #36	; 0x24
    70fc:	af00      	add	r7, sp, #0
    70fe:	60b9      	str	r1, [r7, #8]
    7100:	607a      	str	r2, [r7, #4]
    7102:	0019      	movs	r1, r3
    7104:	230f      	movs	r3, #15
    7106:	18fb      	adds	r3, r7, r3
    7108:	1c02      	adds	r2, r0, #0
    710a:	701a      	strb	r2, [r3, #0]
    710c:	230e      	movs	r3, #14
    710e:	18fb      	adds	r3, r7, r3
    7110:	1c0a      	adds	r2, r1, #0
    7112:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    7114:	231b      	movs	r3, #27
    7116:	18fc      	adds	r4, r7, r3
    7118:	230f      	movs	r3, #15
    711a:	18fb      	adds	r3, r7, r3
    711c:	781b      	ldrb	r3, [r3, #0]
    711e:	0018      	movs	r0, r3
    7120:	4b28      	ldr	r3, [pc, #160]	; (71c4 <disk_read+0xcc>)
    7122:	4798      	blx	r3
    7124:	0003      	movs	r3, r0
    7126:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    7128:	231b      	movs	r3, #27
    712a:	18fb      	adds	r3, r7, r3
    712c:	781b      	ldrb	r3, [r3, #0]
    712e:	2b00      	cmp	r3, #0
    7130:	d101      	bne.n	7136 <disk_read+0x3e>
		return RES_ERROR;
    7132:	2301      	movs	r3, #1
    7134:	e042      	b.n	71bc <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    7136:	2314      	movs	r3, #20
    7138:	18fa      	adds	r2, r7, r3
    713a:	230f      	movs	r3, #15
    713c:	18fb      	adds	r3, r7, r3
    713e:	781b      	ldrb	r3, [r3, #0]
    7140:	0011      	movs	r1, r2
    7142:	0018      	movs	r0, r3
    7144:	4b20      	ldr	r3, [pc, #128]	; (71c8 <disk_read+0xd0>)
    7146:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    7148:	230e      	movs	r3, #14
    714a:	18fb      	adds	r3, r7, r3
    714c:	781b      	ldrb	r3, [r3, #0]
    714e:	221b      	movs	r2, #27
    7150:	18ba      	adds	r2, r7, r2
    7152:	7812      	ldrb	r2, [r2, #0]
    7154:	4353      	muls	r3, r2
    7156:	001a      	movs	r2, r3
    7158:	687b      	ldr	r3, [r7, #4]
    715a:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    715c:	697b      	ldr	r3, [r7, #20]
    715e:	3301      	adds	r3, #1
    7160:	211b      	movs	r1, #27
    7162:	1879      	adds	r1, r7, r1
    7164:	7809      	ldrb	r1, [r1, #0]
    7166:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    7168:	429a      	cmp	r2, r3
    716a:	d901      	bls.n	7170 <disk_read+0x78>
		return RES_PARERR;
    716c:	2304      	movs	r3, #4
    716e:	e025      	b.n	71bc <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
    7170:	2300      	movs	r3, #0
    7172:	61fb      	str	r3, [r7, #28]
    7174:	e01b      	b.n	71ae <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    7176:	231b      	movs	r3, #27
    7178:	18fb      	adds	r3, r7, r3
    717a:	781b      	ldrb	r3, [r3, #0]
    717c:	69fa      	ldr	r2, [r7, #28]
    717e:	435a      	muls	r2, r3
    7180:	687b      	ldr	r3, [r7, #4]
    7182:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    7184:	231b      	movs	r3, #27
    7186:	18fb      	adds	r3, r7, r3
    7188:	781b      	ldrb	r3, [r3, #0]
    718a:	69fa      	ldr	r2, [r7, #28]
    718c:	4353      	muls	r3, r2
    718e:	025b      	lsls	r3, r3, #9
    7190:	68ba      	ldr	r2, [r7, #8]
    7192:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    7194:	230f      	movs	r3, #15
    7196:	18fb      	adds	r3, r7, r3
    7198:	781b      	ldrb	r3, [r3, #0]
    719a:	0018      	movs	r0, r3
    719c:	4b0b      	ldr	r3, [pc, #44]	; (71cc <disk_read+0xd4>)
    719e:	4798      	blx	r3
    71a0:	1e03      	subs	r3, r0, #0
    71a2:	d001      	beq.n	71a8 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
    71a4:	2301      	movs	r3, #1
    71a6:	e009      	b.n	71bc <disk_read+0xc4>
	for (i = 0; i < count; i++) {
    71a8:	69fb      	ldr	r3, [r7, #28]
    71aa:	3301      	adds	r3, #1
    71ac:	61fb      	str	r3, [r7, #28]
    71ae:	230e      	movs	r3, #14
    71b0:	18fb      	adds	r3, r7, r3
    71b2:	781a      	ldrb	r2, [r3, #0]
    71b4:	69fb      	ldr	r3, [r7, #28]
    71b6:	429a      	cmp	r2, r3
    71b8:	d8dd      	bhi.n	7176 <disk_read+0x7e>
		}
	}

	return RES_OK;
    71ba:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    71bc:	0018      	movs	r0, r3
    71be:	46bd      	mov	sp, r7
    71c0:	b009      	add	sp, #36	; 0x24
    71c2:	bd90      	pop	{r4, r7, pc}
    71c4:	00003169 	.word	0x00003169
    71c8:	0000311d 	.word	0x0000311d
    71cc:	000031dd 	.word	0x000031dd

000071d0 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    71d0:	b590      	push	{r4, r7, lr}
    71d2:	b089      	sub	sp, #36	; 0x24
    71d4:	af00      	add	r7, sp, #0
    71d6:	60b9      	str	r1, [r7, #8]
    71d8:	607a      	str	r2, [r7, #4]
    71da:	0019      	movs	r1, r3
    71dc:	230f      	movs	r3, #15
    71de:	18fb      	adds	r3, r7, r3
    71e0:	1c02      	adds	r2, r0, #0
    71e2:	701a      	strb	r2, [r3, #0]
    71e4:	230e      	movs	r3, #14
    71e6:	18fb      	adds	r3, r7, r3
    71e8:	1c0a      	adds	r2, r1, #0
    71ea:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    71ec:	231b      	movs	r3, #27
    71ee:	18fc      	adds	r4, r7, r3
    71f0:	230f      	movs	r3, #15
    71f2:	18fb      	adds	r3, r7, r3
    71f4:	781b      	ldrb	r3, [r3, #0]
    71f6:	0018      	movs	r0, r3
    71f8:	4b28      	ldr	r3, [pc, #160]	; (729c <disk_write+0xcc>)
    71fa:	4798      	blx	r3
    71fc:	0003      	movs	r3, r0
    71fe:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    7200:	231b      	movs	r3, #27
    7202:	18fb      	adds	r3, r7, r3
    7204:	781b      	ldrb	r3, [r3, #0]
    7206:	2b00      	cmp	r3, #0
    7208:	d101      	bne.n	720e <disk_write+0x3e>
		return RES_ERROR;
    720a:	2301      	movs	r3, #1
    720c:	e042      	b.n	7294 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    720e:	2314      	movs	r3, #20
    7210:	18fa      	adds	r2, r7, r3
    7212:	230f      	movs	r3, #15
    7214:	18fb      	adds	r3, r7, r3
    7216:	781b      	ldrb	r3, [r3, #0]
    7218:	0011      	movs	r1, r2
    721a:	0018      	movs	r0, r3
    721c:	4b20      	ldr	r3, [pc, #128]	; (72a0 <disk_write+0xd0>)
    721e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    7220:	230e      	movs	r3, #14
    7222:	18fb      	adds	r3, r7, r3
    7224:	781b      	ldrb	r3, [r3, #0]
    7226:	221b      	movs	r2, #27
    7228:	18ba      	adds	r2, r7, r2
    722a:	7812      	ldrb	r2, [r2, #0]
    722c:	4353      	muls	r3, r2
    722e:	001a      	movs	r2, r3
    7230:	687b      	ldr	r3, [r7, #4]
    7232:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    7234:	697b      	ldr	r3, [r7, #20]
    7236:	3301      	adds	r3, #1
    7238:	211b      	movs	r1, #27
    723a:	1879      	adds	r1, r7, r1
    723c:	7809      	ldrb	r1, [r1, #0]
    723e:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    7240:	429a      	cmp	r2, r3
    7242:	d901      	bls.n	7248 <disk_write+0x78>
		return RES_PARERR;
    7244:	2304      	movs	r3, #4
    7246:	e025      	b.n	7294 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
    7248:	2300      	movs	r3, #0
    724a:	61fb      	str	r3, [r7, #28]
    724c:	e01b      	b.n	7286 <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    724e:	231b      	movs	r3, #27
    7250:	18fb      	adds	r3, r7, r3
    7252:	781b      	ldrb	r3, [r3, #0]
    7254:	69fa      	ldr	r2, [r7, #28]
    7256:	435a      	muls	r2, r3
    7258:	687b      	ldr	r3, [r7, #4]
    725a:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    725c:	231b      	movs	r3, #27
    725e:	18fb      	adds	r3, r7, r3
    7260:	781b      	ldrb	r3, [r3, #0]
    7262:	69fa      	ldr	r2, [r7, #28]
    7264:	4353      	muls	r3, r2
    7266:	025b      	lsls	r3, r3, #9
    7268:	68ba      	ldr	r2, [r7, #8]
    726a:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    726c:	230f      	movs	r3, #15
    726e:	18fb      	adds	r3, r7, r3
    7270:	781b      	ldrb	r3, [r3, #0]
    7272:	0018      	movs	r0, r3
    7274:	4b0b      	ldr	r3, [pc, #44]	; (72a4 <disk_write+0xd4>)
    7276:	4798      	blx	r3
    7278:	1e03      	subs	r3, r0, #0
    727a:	d001      	beq.n	7280 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
    727c:	2301      	movs	r3, #1
    727e:	e009      	b.n	7294 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
    7280:	69fb      	ldr	r3, [r7, #28]
    7282:	3301      	adds	r3, #1
    7284:	61fb      	str	r3, [r7, #28]
    7286:	230e      	movs	r3, #14
    7288:	18fb      	adds	r3, r7, r3
    728a:	781a      	ldrb	r2, [r3, #0]
    728c:	69fb      	ldr	r3, [r7, #28]
    728e:	429a      	cmp	r2, r3
    7290:	d8dd      	bhi.n	724e <disk_write+0x7e>
		}
	}

	return RES_OK;
    7292:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    7294:	0018      	movs	r0, r3
    7296:	46bd      	mov	sp, r7
    7298:	b009      	add	sp, #36	; 0x24
    729a:	bd90      	pop	{r4, r7, pc}
    729c:	00003169 	.word	0x00003169
    72a0:	0000311d 	.word	0x0000311d
    72a4:	00003231 	.word	0x00003231

000072a8 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    72a8:	b590      	push	{r4, r7, lr}
    72aa:	b085      	sub	sp, #20
    72ac:	af00      	add	r7, sp, #0
    72ae:	603a      	str	r2, [r7, #0]
    72b0:	1dfb      	adds	r3, r7, #7
    72b2:	1c02      	adds	r2, r0, #0
    72b4:	701a      	strb	r2, [r3, #0]
    72b6:	1dbb      	adds	r3, r7, #6
    72b8:	1c0a      	adds	r2, r1, #0
    72ba:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
    72bc:	230f      	movs	r3, #15
    72be:	18fb      	adds	r3, r7, r3
    72c0:	2204      	movs	r2, #4
    72c2:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
    72c4:	1dbb      	adds	r3, r7, #6
    72c6:	781b      	ldrb	r3, [r3, #0]
    72c8:	2b01      	cmp	r3, #1
    72ca:	d00f      	beq.n	72ec <disk_ioctl+0x44>
    72cc:	dc02      	bgt.n	72d4 <disk_ioctl+0x2c>
    72ce:	2b00      	cmp	r3, #0
    72d0:	d044      	beq.n	735c <disk_ioctl+0xb4>
    72d2:	e054      	b.n	737e <disk_ioctl+0xd6>
    72d4:	2b02      	cmp	r3, #2
    72d6:	d01a      	beq.n	730e <disk_ioctl+0x66>
    72d8:	2b03      	cmp	r3, #3
    72da:	d150      	bne.n	737e <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
    72dc:	683b      	ldr	r3, [r7, #0]
    72de:	2201      	movs	r2, #1
    72e0:	601a      	str	r2, [r3, #0]
		res = RES_OK;
    72e2:	230f      	movs	r3, #15
    72e4:	18fb      	adds	r3, r7, r3
    72e6:	2200      	movs	r2, #0
    72e8:	701a      	strb	r2, [r3, #0]
		break;
    72ea:	e04c      	b.n	7386 <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
    72ec:	2308      	movs	r3, #8
    72ee:	18fa      	adds	r2, r7, r3
    72f0:	1dfb      	adds	r3, r7, #7
    72f2:	781b      	ldrb	r3, [r3, #0]
    72f4:	0011      	movs	r1, r2
    72f6:	0018      	movs	r0, r3
    72f8:	4b26      	ldr	r3, [pc, #152]	; (7394 <disk_ioctl+0xec>)
    72fa:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
    72fc:	68bb      	ldr	r3, [r7, #8]
    72fe:	1c5a      	adds	r2, r3, #1
    7300:	683b      	ldr	r3, [r7, #0]
    7302:	601a      	str	r2, [r3, #0]

		res = RES_OK;
    7304:	230f      	movs	r3, #15
    7306:	18fb      	adds	r3, r7, r3
    7308:	2200      	movs	r2, #0
    730a:	701a      	strb	r2, [r3, #0]
	}
	break;
    730c:	e03b      	b.n	7386 <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
    730e:	230e      	movs	r3, #14
    7310:	18fc      	adds	r4, r7, r3
    7312:	1dfb      	adds	r3, r7, #7
    7314:	781b      	ldrb	r3, [r3, #0]
    7316:	0018      	movs	r0, r3
    7318:	4b1f      	ldr	r3, [pc, #124]	; (7398 <disk_ioctl+0xf0>)
    731a:	4798      	blx	r3
    731c:	0003      	movs	r3, r0
    731e:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
    7320:	230e      	movs	r3, #14
    7322:	18fb      	adds	r3, r7, r3
    7324:	781b      	ldrb	r3, [r3, #0]
    7326:	2b01      	cmp	r3, #1
    7328:	d010      	beq.n	734c <disk_ioctl+0xa4>
    732a:	230e      	movs	r3, #14
    732c:	18fb      	adds	r3, r7, r3
    732e:	781b      	ldrb	r3, [r3, #0]
    7330:	2b02      	cmp	r3, #2
    7332:	d00b      	beq.n	734c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    7334:	230e      	movs	r3, #14
    7336:	18fb      	adds	r3, r7, r3
    7338:	781b      	ldrb	r3, [r3, #0]
    733a:	2b04      	cmp	r3, #4
    733c:	d006      	beq.n	734c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
    733e:	230e      	movs	r3, #14
    7340:	18fb      	adds	r3, r7, r3
    7342:	781b      	ldrb	r3, [r3, #0]
    7344:	2b08      	cmp	r3, #8
    7346:	d001      	beq.n	734c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
    7348:	2301      	movs	r3, #1
    734a:	e01f      	b.n	738c <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    734c:	683b      	ldr	r3, [r7, #0]
    734e:	2200      	movs	r2, #0
    7350:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
    7352:	230f      	movs	r3, #15
    7354:	18fb      	adds	r3, r7, r3
    7356:	2200      	movs	r2, #0
    7358:	701a      	strb	r2, [r3, #0]
	}
	break;
    735a:	e014      	b.n	7386 <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    735c:	1dfb      	adds	r3, r7, #7
    735e:	781b      	ldrb	r3, [r3, #0]
    7360:	0018      	movs	r0, r3
    7362:	4b0e      	ldr	r3, [pc, #56]	; (739c <disk_ioctl+0xf4>)
    7364:	4798      	blx	r3
    7366:	1e03      	subs	r3, r0, #0
    7368:	d104      	bne.n	7374 <disk_ioctl+0xcc>
			res = RES_OK;
    736a:	230f      	movs	r3, #15
    736c:	18fb      	adds	r3, r7, r3
    736e:	2200      	movs	r2, #0
    7370:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
    7372:	e008      	b.n	7386 <disk_ioctl+0xde>
			res = RES_NOTRDY;
    7374:	230f      	movs	r3, #15
    7376:	18fb      	adds	r3, r7, r3
    7378:	2203      	movs	r2, #3
    737a:	701a      	strb	r2, [r3, #0]
		break;
    737c:	e003      	b.n	7386 <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
    737e:	230f      	movs	r3, #15
    7380:	18fb      	adds	r3, r7, r3
    7382:	2204      	movs	r2, #4
    7384:	701a      	strb	r2, [r3, #0]
	}

	return res;
    7386:	230f      	movs	r3, #15
    7388:	18fb      	adds	r3, r7, r3
    738a:	781b      	ldrb	r3, [r3, #0]
}
    738c:	0018      	movs	r0, r3
    738e:	46bd      	mov	sp, r7
    7390:	b005      	add	sp, #20
    7392:	bd90      	pop	{r4, r7, pc}
    7394:	0000311d 	.word	0x0000311d
    7398:	00003169 	.word	0x00003169
    739c:	000030dd 	.word	0x000030dd

000073a0 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    73a0:	b580      	push	{r7, lr}
    73a2:	b084      	sub	sp, #16
    73a4:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    73a6:	1d3a      	adds	r2, r7, #4
    73a8:	4b12      	ldr	r3, [pc, #72]	; (73f4 <get_fattime+0x54>)
    73aa:	0011      	movs	r1, r2
    73ac:	0018      	movs	r0, r3
    73ae:	4b12      	ldr	r3, [pc, #72]	; (73f8 <get_fattime+0x58>)
    73b0:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
    73b2:	1d3b      	adds	r3, r7, #4
    73b4:	88db      	ldrh	r3, [r3, #6]
    73b6:	4a11      	ldr	r2, [pc, #68]	; (73fc <get_fattime+0x5c>)
    73b8:	4694      	mov	ip, r2
    73ba:	4463      	add	r3, ip
    73bc:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
    73be:	1d3b      	adds	r3, r7, #4
    73c0:	795b      	ldrb	r3, [r3, #5]
    73c2:	055b      	lsls	r3, r3, #21
    73c4:	431a      	orrs	r2, r3
			| (current_time.day << 16)
    73c6:	1d3b      	adds	r3, r7, #4
    73c8:	791b      	ldrb	r3, [r3, #4]
    73ca:	041b      	lsls	r3, r3, #16
    73cc:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
    73ce:	1d3b      	adds	r3, r7, #4
    73d0:	789b      	ldrb	r3, [r3, #2]
    73d2:	02db      	lsls	r3, r3, #11
    73d4:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
    73d6:	1d3b      	adds	r3, r7, #4
    73d8:	785b      	ldrb	r3, [r3, #1]
    73da:	015b      	lsls	r3, r3, #5
    73dc:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
    73de:	1d3a      	adds	r2, r7, #4
    73e0:	7812      	ldrb	r2, [r2, #0]
    73e2:	0852      	lsrs	r2, r2, #1
    73e4:	b2d2      	uxtb	r2, r2
    73e6:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
    73e8:	60fb      	str	r3, [r7, #12]

	return ul_time;
    73ea:	68fb      	ldr	r3, [r7, #12]
}
    73ec:	0018      	movs	r0, r3
    73ee:	46bd      	mov	sp, r7
    73f0:	b004      	add	sp, #16
    73f2:	bd80      	pop	{r7, pc}
    73f4:	20000a38 	.word	0x20000a38
    73f8:	00003781 	.word	0x00003781
    73fc:	fffff844 	.word	0xfffff844

00007400 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    7400:	b580      	push	{r7, lr}
    7402:	b086      	sub	sp, #24
    7404:	af00      	add	r7, sp, #0
    7406:	60f8      	str	r0, [r7, #12]
    7408:	60b9      	str	r1, [r7, #8]
    740a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    740c:	68fb      	ldr	r3, [r7, #12]
    740e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
    7410:	68bb      	ldr	r3, [r7, #8]
    7412:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    7414:	e007      	b.n	7426 <mem_cpy+0x26>
		*d++ = *s++;
    7416:	697b      	ldr	r3, [r7, #20]
    7418:	1c5a      	adds	r2, r3, #1
    741a:	617a      	str	r2, [r7, #20]
    741c:	693a      	ldr	r2, [r7, #16]
    741e:	1c51      	adds	r1, r2, #1
    7420:	6139      	str	r1, [r7, #16]
    7422:	7812      	ldrb	r2, [r2, #0]
    7424:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    7426:	687b      	ldr	r3, [r7, #4]
    7428:	1e5a      	subs	r2, r3, #1
    742a:	607a      	str	r2, [r7, #4]
    742c:	2b00      	cmp	r3, #0
    742e:	d1f2      	bne.n	7416 <mem_cpy+0x16>
}
    7430:	46c0      	nop			; (mov r8, r8)
    7432:	46bd      	mov	sp, r7
    7434:	b006      	add	sp, #24
    7436:	bd80      	pop	{r7, pc}

00007438 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
    7438:	b580      	push	{r7, lr}
    743a:	b086      	sub	sp, #24
    743c:	af00      	add	r7, sp, #0
    743e:	60f8      	str	r0, [r7, #12]
    7440:	60b9      	str	r1, [r7, #8]
    7442:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    7444:	68fb      	ldr	r3, [r7, #12]
    7446:	617b      	str	r3, [r7, #20]

	while (cnt--)
    7448:	e005      	b.n	7456 <mem_set+0x1e>
		*d++ = (BYTE)val;
    744a:	697b      	ldr	r3, [r7, #20]
    744c:	1c5a      	adds	r2, r3, #1
    744e:	617a      	str	r2, [r7, #20]
    7450:	68ba      	ldr	r2, [r7, #8]
    7452:	b2d2      	uxtb	r2, r2
    7454:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    7456:	687b      	ldr	r3, [r7, #4]
    7458:	1e5a      	subs	r2, r3, #1
    745a:	607a      	str	r2, [r7, #4]
    745c:	2b00      	cmp	r3, #0
    745e:	d1f4      	bne.n	744a <mem_set+0x12>
}
    7460:	46c0      	nop			; (mov r8, r8)
    7462:	46bd      	mov	sp, r7
    7464:	b006      	add	sp, #24
    7466:	bd80      	pop	{r7, pc}

00007468 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
    7468:	b580      	push	{r7, lr}
    746a:	b088      	sub	sp, #32
    746c:	af00      	add	r7, sp, #0
    746e:	60f8      	str	r0, [r7, #12]
    7470:	60b9      	str	r1, [r7, #8]
    7472:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    7474:	68fb      	ldr	r3, [r7, #12]
    7476:	61fb      	str	r3, [r7, #28]
    7478:	68bb      	ldr	r3, [r7, #8]
    747a:	61bb      	str	r3, [r7, #24]
	int r = 0;
    747c:	2300      	movs	r3, #0
    747e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    7480:	46c0      	nop			; (mov r8, r8)
    7482:	687b      	ldr	r3, [r7, #4]
    7484:	1e5a      	subs	r2, r3, #1
    7486:	607a      	str	r2, [r7, #4]
    7488:	2b00      	cmp	r3, #0
    748a:	d00d      	beq.n	74a8 <mem_cmp+0x40>
    748c:	69fb      	ldr	r3, [r7, #28]
    748e:	1c5a      	adds	r2, r3, #1
    7490:	61fa      	str	r2, [r7, #28]
    7492:	781b      	ldrb	r3, [r3, #0]
    7494:	0019      	movs	r1, r3
    7496:	69bb      	ldr	r3, [r7, #24]
    7498:	1c5a      	adds	r2, r3, #1
    749a:	61ba      	str	r2, [r7, #24]
    749c:	781b      	ldrb	r3, [r3, #0]
    749e:	1acb      	subs	r3, r1, r3
    74a0:	617b      	str	r3, [r7, #20]
    74a2:	697b      	ldr	r3, [r7, #20]
    74a4:	2b00      	cmp	r3, #0
    74a6:	d0ec      	beq.n	7482 <mem_cmp+0x1a>
	return r;
    74a8:	697b      	ldr	r3, [r7, #20]
}
    74aa:	0018      	movs	r0, r3
    74ac:	46bd      	mov	sp, r7
    74ae:	b008      	add	sp, #32
    74b0:	bd80      	pop	{r7, pc}

000074b2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
    74b2:	b580      	push	{r7, lr}
    74b4:	b082      	sub	sp, #8
    74b6:	af00      	add	r7, sp, #0
    74b8:	6078      	str	r0, [r7, #4]
    74ba:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
    74bc:	e002      	b.n	74c4 <chk_chr+0x12>
    74be:	687b      	ldr	r3, [r7, #4]
    74c0:	3301      	adds	r3, #1
    74c2:	607b      	str	r3, [r7, #4]
    74c4:	687b      	ldr	r3, [r7, #4]
    74c6:	781b      	ldrb	r3, [r3, #0]
    74c8:	2b00      	cmp	r3, #0
    74ca:	d005      	beq.n	74d8 <chk_chr+0x26>
    74cc:	687b      	ldr	r3, [r7, #4]
    74ce:	781b      	ldrb	r3, [r3, #0]
    74d0:	001a      	movs	r2, r3
    74d2:	683b      	ldr	r3, [r7, #0]
    74d4:	429a      	cmp	r2, r3
    74d6:	d1f2      	bne.n	74be <chk_chr+0xc>
	return *str;
    74d8:	687b      	ldr	r3, [r7, #4]
    74da:	781b      	ldrb	r3, [r3, #0]
}
    74dc:	0018      	movs	r0, r3
    74de:	46bd      	mov	sp, r7
    74e0:	b002      	add	sp, #8
    74e2:	bd80      	pop	{r7, pc}

000074e4 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    74e4:	b590      	push	{r4, r7, lr}
    74e6:	b085      	sub	sp, #20
    74e8:	af00      	add	r7, sp, #0
    74ea:	6078      	str	r0, [r7, #4]
    74ec:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
    74ee:	687b      	ldr	r3, [r7, #4]
    74f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    74f2:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
    74f4:	68fa      	ldr	r2, [r7, #12]
    74f6:	683b      	ldr	r3, [r7, #0]
    74f8:	429a      	cmp	r2, r3
    74fa:	d04e      	beq.n	759a <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    74fc:	687b      	ldr	r3, [r7, #4]
    74fe:	791b      	ldrb	r3, [r3, #4]
    7500:	2b00      	cmp	r3, #0
    7502:	d037      	beq.n	7574 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    7504:	687b      	ldr	r3, [r7, #4]
    7506:	7858      	ldrb	r0, [r3, #1]
    7508:	687b      	ldr	r3, [r7, #4]
    750a:	3330      	adds	r3, #48	; 0x30
    750c:	0019      	movs	r1, r3
    750e:	68fa      	ldr	r2, [r7, #12]
    7510:	2301      	movs	r3, #1
    7512:	4c24      	ldr	r4, [pc, #144]	; (75a4 <move_window+0xc0>)
    7514:	47a0      	blx	r4
    7516:	1e03      	subs	r3, r0, #0
    7518:	d001      	beq.n	751e <move_window+0x3a>
				return FR_DISK_ERR;
    751a:	2301      	movs	r3, #1
    751c:	e03e      	b.n	759c <move_window+0xb8>
			fs->wflag = 0;
    751e:	687b      	ldr	r3, [r7, #4]
    7520:	2200      	movs	r2, #0
    7522:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    7524:	687b      	ldr	r3, [r7, #4]
    7526:	6a1a      	ldr	r2, [r3, #32]
    7528:	687b      	ldr	r3, [r7, #4]
    752a:	69db      	ldr	r3, [r3, #28]
    752c:	18d2      	adds	r2, r2, r3
    752e:	68fb      	ldr	r3, [r7, #12]
    7530:	429a      	cmp	r2, r3
    7532:	d91f      	bls.n	7574 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    7534:	230b      	movs	r3, #11
    7536:	18fb      	adds	r3, r7, r3
    7538:	687a      	ldr	r2, [r7, #4]
    753a:	78d2      	ldrb	r2, [r2, #3]
    753c:	701a      	strb	r2, [r3, #0]
    753e:	e014      	b.n	756a <move_window+0x86>
					wsect += fs->fsize;
    7540:	687b      	ldr	r3, [r7, #4]
    7542:	69db      	ldr	r3, [r3, #28]
    7544:	68fa      	ldr	r2, [r7, #12]
    7546:	18d3      	adds	r3, r2, r3
    7548:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
    754a:	687b      	ldr	r3, [r7, #4]
    754c:	7858      	ldrb	r0, [r3, #1]
    754e:	687b      	ldr	r3, [r7, #4]
    7550:	3330      	adds	r3, #48	; 0x30
    7552:	0019      	movs	r1, r3
    7554:	68fa      	ldr	r2, [r7, #12]
    7556:	2301      	movs	r3, #1
    7558:	4c12      	ldr	r4, [pc, #72]	; (75a4 <move_window+0xc0>)
    755a:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    755c:	230b      	movs	r3, #11
    755e:	18fb      	adds	r3, r7, r3
    7560:	781a      	ldrb	r2, [r3, #0]
    7562:	230b      	movs	r3, #11
    7564:	18fb      	adds	r3, r7, r3
    7566:	3a01      	subs	r2, #1
    7568:	701a      	strb	r2, [r3, #0]
    756a:	230b      	movs	r3, #11
    756c:	18fb      	adds	r3, r7, r3
    756e:	781b      	ldrb	r3, [r3, #0]
    7570:	2b01      	cmp	r3, #1
    7572:	d8e5      	bhi.n	7540 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
    7574:	683b      	ldr	r3, [r7, #0]
    7576:	2b00      	cmp	r3, #0
    7578:	d00f      	beq.n	759a <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    757a:	687b      	ldr	r3, [r7, #4]
    757c:	7858      	ldrb	r0, [r3, #1]
    757e:	687b      	ldr	r3, [r7, #4]
    7580:	3330      	adds	r3, #48	; 0x30
    7582:	0019      	movs	r1, r3
    7584:	683a      	ldr	r2, [r7, #0]
    7586:	2301      	movs	r3, #1
    7588:	4c07      	ldr	r4, [pc, #28]	; (75a8 <move_window+0xc4>)
    758a:	47a0      	blx	r4
    758c:	1e03      	subs	r3, r0, #0
    758e:	d001      	beq.n	7594 <move_window+0xb0>
				return FR_DISK_ERR;
    7590:	2301      	movs	r3, #1
    7592:	e003      	b.n	759c <move_window+0xb8>
			fs->winsect = sector;
    7594:	687b      	ldr	r3, [r7, #4]
    7596:	683a      	ldr	r2, [r7, #0]
    7598:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
    759a:	2300      	movs	r3, #0
}
    759c:	0018      	movs	r0, r3
    759e:	46bd      	mov	sp, r7
    75a0:	b005      	add	sp, #20
    75a2:	bd90      	pop	{r4, r7, pc}
    75a4:	000071d1 	.word	0x000071d1
    75a8:	000070f9 	.word	0x000070f9

000075ac <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    75ac:	b590      	push	{r4, r7, lr}
    75ae:	b085      	sub	sp, #20
    75b0:	af00      	add	r7, sp, #0
    75b2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
    75b4:	230f      	movs	r3, #15
    75b6:	18fc      	adds	r4, r7, r3
    75b8:	687b      	ldr	r3, [r7, #4]
    75ba:	2100      	movs	r1, #0
    75bc:	0018      	movs	r0, r3
    75be:	4b52      	ldr	r3, [pc, #328]	; (7708 <sync+0x15c>)
    75c0:	4798      	blx	r3
    75c2:	0003      	movs	r3, r0
    75c4:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    75c6:	230f      	movs	r3, #15
    75c8:	18fb      	adds	r3, r7, r3
    75ca:	781b      	ldrb	r3, [r3, #0]
    75cc:	2b00      	cmp	r3, #0
    75ce:	d000      	beq.n	75d2 <sync+0x26>
    75d0:	e093      	b.n	76fa <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    75d2:	687b      	ldr	r3, [r7, #4]
    75d4:	781b      	ldrb	r3, [r3, #0]
    75d6:	2b03      	cmp	r3, #3
    75d8:	d000      	beq.n	75dc <sync+0x30>
    75da:	e081      	b.n	76e0 <sync+0x134>
    75dc:	687b      	ldr	r3, [r7, #4]
    75de:	795b      	ldrb	r3, [r3, #5]
    75e0:	2b00      	cmp	r3, #0
    75e2:	d07d      	beq.n	76e0 <sync+0x134>
			fs->winsect = 0;
    75e4:	687b      	ldr	r3, [r7, #4]
    75e6:	2200      	movs	r2, #0
    75e8:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    75ea:	687b      	ldr	r3, [r7, #4]
    75ec:	3330      	adds	r3, #48	; 0x30
    75ee:	0018      	movs	r0, r3
    75f0:	2380      	movs	r3, #128	; 0x80
    75f2:	009b      	lsls	r3, r3, #2
    75f4:	001a      	movs	r2, r3
    75f6:	2100      	movs	r1, #0
    75f8:	4b44      	ldr	r3, [pc, #272]	; (770c <sync+0x160>)
    75fa:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    75fc:	687b      	ldr	r3, [r7, #4]
    75fe:	4a44      	ldr	r2, [pc, #272]	; (7710 <sync+0x164>)
    7600:	2155      	movs	r1, #85	; 0x55
    7602:	5499      	strb	r1, [r3, r2]
    7604:	687b      	ldr	r3, [r7, #4]
    7606:	4a43      	ldr	r2, [pc, #268]	; (7714 <sync+0x168>)
    7608:	21aa      	movs	r1, #170	; 0xaa
    760a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    760c:	687b      	ldr	r3, [r7, #4]
    760e:	2230      	movs	r2, #48	; 0x30
    7610:	2152      	movs	r1, #82	; 0x52
    7612:	5499      	strb	r1, [r3, r2]
    7614:	687b      	ldr	r3, [r7, #4]
    7616:	2231      	movs	r2, #49	; 0x31
    7618:	2152      	movs	r1, #82	; 0x52
    761a:	5499      	strb	r1, [r3, r2]
    761c:	687b      	ldr	r3, [r7, #4]
    761e:	2232      	movs	r2, #50	; 0x32
    7620:	2161      	movs	r1, #97	; 0x61
    7622:	5499      	strb	r1, [r3, r2]
    7624:	687b      	ldr	r3, [r7, #4]
    7626:	2233      	movs	r2, #51	; 0x33
    7628:	2141      	movs	r1, #65	; 0x41
    762a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    762c:	687a      	ldr	r2, [r7, #4]
    762e:	2385      	movs	r3, #133	; 0x85
    7630:	009b      	lsls	r3, r3, #2
    7632:	2172      	movs	r1, #114	; 0x72
    7634:	54d1      	strb	r1, [r2, r3]
    7636:	687b      	ldr	r3, [r7, #4]
    7638:	4a37      	ldr	r2, [pc, #220]	; (7718 <sync+0x16c>)
    763a:	2172      	movs	r1, #114	; 0x72
    763c:	5499      	strb	r1, [r3, r2]
    763e:	687b      	ldr	r3, [r7, #4]
    7640:	4a36      	ldr	r2, [pc, #216]	; (771c <sync+0x170>)
    7642:	2141      	movs	r1, #65	; 0x41
    7644:	5499      	strb	r1, [r3, r2]
    7646:	687b      	ldr	r3, [r7, #4]
    7648:	4a35      	ldr	r2, [pc, #212]	; (7720 <sync+0x174>)
    764a:	2161      	movs	r1, #97	; 0x61
    764c:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    764e:	687b      	ldr	r3, [r7, #4]
    7650:	691b      	ldr	r3, [r3, #16]
    7652:	b2d9      	uxtb	r1, r3
    7654:	687a      	ldr	r2, [r7, #4]
    7656:	2386      	movs	r3, #134	; 0x86
    7658:	009b      	lsls	r3, r3, #2
    765a:	54d1      	strb	r1, [r2, r3]
    765c:	687b      	ldr	r3, [r7, #4]
    765e:	691b      	ldr	r3, [r3, #16]
    7660:	b29b      	uxth	r3, r3
    7662:	0a1b      	lsrs	r3, r3, #8
    7664:	b29b      	uxth	r3, r3
    7666:	b2d9      	uxtb	r1, r3
    7668:	687b      	ldr	r3, [r7, #4]
    766a:	4a2e      	ldr	r2, [pc, #184]	; (7724 <sync+0x178>)
    766c:	5499      	strb	r1, [r3, r2]
    766e:	687b      	ldr	r3, [r7, #4]
    7670:	691b      	ldr	r3, [r3, #16]
    7672:	0c1b      	lsrs	r3, r3, #16
    7674:	b2d9      	uxtb	r1, r3
    7676:	687b      	ldr	r3, [r7, #4]
    7678:	4a2b      	ldr	r2, [pc, #172]	; (7728 <sync+0x17c>)
    767a:	5499      	strb	r1, [r3, r2]
    767c:	687b      	ldr	r3, [r7, #4]
    767e:	691b      	ldr	r3, [r3, #16]
    7680:	0e1b      	lsrs	r3, r3, #24
    7682:	b2d9      	uxtb	r1, r3
    7684:	687b      	ldr	r3, [r7, #4]
    7686:	4a29      	ldr	r2, [pc, #164]	; (772c <sync+0x180>)
    7688:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    768a:	687b      	ldr	r3, [r7, #4]
    768c:	68db      	ldr	r3, [r3, #12]
    768e:	b2d9      	uxtb	r1, r3
    7690:	687a      	ldr	r2, [r7, #4]
    7692:	2387      	movs	r3, #135	; 0x87
    7694:	009b      	lsls	r3, r3, #2
    7696:	54d1      	strb	r1, [r2, r3]
    7698:	687b      	ldr	r3, [r7, #4]
    769a:	68db      	ldr	r3, [r3, #12]
    769c:	b29b      	uxth	r3, r3
    769e:	0a1b      	lsrs	r3, r3, #8
    76a0:	b29b      	uxth	r3, r3
    76a2:	b2d9      	uxtb	r1, r3
    76a4:	687b      	ldr	r3, [r7, #4]
    76a6:	4a22      	ldr	r2, [pc, #136]	; (7730 <sync+0x184>)
    76a8:	5499      	strb	r1, [r3, r2]
    76aa:	687b      	ldr	r3, [r7, #4]
    76ac:	68db      	ldr	r3, [r3, #12]
    76ae:	0c1b      	lsrs	r3, r3, #16
    76b0:	b2d9      	uxtb	r1, r3
    76b2:	687b      	ldr	r3, [r7, #4]
    76b4:	4a1f      	ldr	r2, [pc, #124]	; (7734 <sync+0x188>)
    76b6:	5499      	strb	r1, [r3, r2]
    76b8:	687b      	ldr	r3, [r7, #4]
    76ba:	68db      	ldr	r3, [r3, #12]
    76bc:	0e1b      	lsrs	r3, r3, #24
    76be:	b2d9      	uxtb	r1, r3
    76c0:	687b      	ldr	r3, [r7, #4]
    76c2:	4a1d      	ldr	r2, [pc, #116]	; (7738 <sync+0x18c>)
    76c4:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    76c6:	687b      	ldr	r3, [r7, #4]
    76c8:	7858      	ldrb	r0, [r3, #1]
    76ca:	687b      	ldr	r3, [r7, #4]
    76cc:	3330      	adds	r3, #48	; 0x30
    76ce:	0019      	movs	r1, r3
    76d0:	687b      	ldr	r3, [r7, #4]
    76d2:	695a      	ldr	r2, [r3, #20]
    76d4:	2301      	movs	r3, #1
    76d6:	4c19      	ldr	r4, [pc, #100]	; (773c <sync+0x190>)
    76d8:	47a0      	blx	r4
			fs->fsi_flag = 0;
    76da:	687b      	ldr	r3, [r7, #4]
    76dc:	2200      	movs	r2, #0
    76de:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    76e0:	687b      	ldr	r3, [r7, #4]
    76e2:	785b      	ldrb	r3, [r3, #1]
    76e4:	2200      	movs	r2, #0
    76e6:	2100      	movs	r1, #0
    76e8:	0018      	movs	r0, r3
    76ea:	4b15      	ldr	r3, [pc, #84]	; (7740 <sync+0x194>)
    76ec:	4798      	blx	r3
    76ee:	1e03      	subs	r3, r0, #0
    76f0:	d003      	beq.n	76fa <sync+0x14e>
			res = FR_DISK_ERR;
    76f2:	230f      	movs	r3, #15
    76f4:	18fb      	adds	r3, r7, r3
    76f6:	2201      	movs	r2, #1
    76f8:	701a      	strb	r2, [r3, #0]
	}

	return res;
    76fa:	230f      	movs	r3, #15
    76fc:	18fb      	adds	r3, r7, r3
    76fe:	781b      	ldrb	r3, [r3, #0]
}
    7700:	0018      	movs	r0, r3
    7702:	46bd      	mov	sp, r7
    7704:	b005      	add	sp, #20
    7706:	bd90      	pop	{r4, r7, pc}
    7708:	000074e5 	.word	0x000074e5
    770c:	00007439 	.word	0x00007439
    7710:	0000022e 	.word	0x0000022e
    7714:	0000022f 	.word	0x0000022f
    7718:	00000215 	.word	0x00000215
    771c:	00000216 	.word	0x00000216
    7720:	00000217 	.word	0x00000217
    7724:	00000219 	.word	0x00000219
    7728:	0000021a 	.word	0x0000021a
    772c:	0000021b 	.word	0x0000021b
    7730:	0000021d 	.word	0x0000021d
    7734:	0000021e 	.word	0x0000021e
    7738:	0000021f 	.word	0x0000021f
    773c:	000071d1 	.word	0x000071d1
    7740:	000072a9 	.word	0x000072a9

00007744 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    7744:	b580      	push	{r7, lr}
    7746:	b082      	sub	sp, #8
    7748:	af00      	add	r7, sp, #0
    774a:	6078      	str	r0, [r7, #4]
    774c:	6039      	str	r1, [r7, #0]
	clst -= 2;
    774e:	683b      	ldr	r3, [r7, #0]
    7750:	3b02      	subs	r3, #2
    7752:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    7754:	687b      	ldr	r3, [r7, #4]
    7756:	699b      	ldr	r3, [r3, #24]
    7758:	1e9a      	subs	r2, r3, #2
    775a:	683b      	ldr	r3, [r7, #0]
    775c:	429a      	cmp	r2, r3
    775e:	d801      	bhi.n	7764 <clust2sect+0x20>
    7760:	2300      	movs	r3, #0
    7762:	e007      	b.n	7774 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
    7764:	687b      	ldr	r3, [r7, #4]
    7766:	789b      	ldrb	r3, [r3, #2]
    7768:	001a      	movs	r2, r3
    776a:	683b      	ldr	r3, [r7, #0]
    776c:	435a      	muls	r2, r3
    776e:	687b      	ldr	r3, [r7, #4]
    7770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7772:	18d3      	adds	r3, r2, r3
}
    7774:	0018      	movs	r0, r3
    7776:	46bd      	mov	sp, r7
    7778:	b002      	add	sp, #8
    777a:	bd80      	pop	{r7, pc}

0000777c <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    777c:	b580      	push	{r7, lr}
    777e:	b086      	sub	sp, #24
    7780:	af00      	add	r7, sp, #0
    7782:	6078      	str	r0, [r7, #4]
    7784:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    7786:	683b      	ldr	r3, [r7, #0]
    7788:	2b01      	cmp	r3, #1
    778a:	d904      	bls.n	7796 <get_fat+0x1a>
    778c:	687b      	ldr	r3, [r7, #4]
    778e:	699a      	ldr	r2, [r3, #24]
    7790:	683b      	ldr	r3, [r7, #0]
    7792:	429a      	cmp	r2, r3
    7794:	d801      	bhi.n	779a <get_fat+0x1e>
		return 1;
    7796:	2301      	movs	r3, #1
    7798:	e09f      	b.n	78da <get_fat+0x15e>

	switch (fs->fs_type) {
    779a:	687b      	ldr	r3, [r7, #4]
    779c:	781b      	ldrb	r3, [r3, #0]
    779e:	2b02      	cmp	r3, #2
    77a0:	d048      	beq.n	7834 <get_fat+0xb8>
    77a2:	2b03      	cmp	r3, #3
    77a4:	d067      	beq.n	7876 <get_fat+0xfa>
    77a6:	2b01      	cmp	r3, #1
    77a8:	d000      	beq.n	77ac <get_fat+0x30>
    77aa:	e094      	b.n	78d6 <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    77ac:	683b      	ldr	r3, [r7, #0]
    77ae:	617b      	str	r3, [r7, #20]
    77b0:	697b      	ldr	r3, [r7, #20]
    77b2:	085b      	lsrs	r3, r3, #1
    77b4:	697a      	ldr	r2, [r7, #20]
    77b6:	18d3      	adds	r3, r2, r3
    77b8:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    77ba:	687b      	ldr	r3, [r7, #4]
    77bc:	6a1a      	ldr	r2, [r3, #32]
    77be:	697b      	ldr	r3, [r7, #20]
    77c0:	0a5b      	lsrs	r3, r3, #9
    77c2:	18d2      	adds	r2, r2, r3
    77c4:	687b      	ldr	r3, [r7, #4]
    77c6:	0011      	movs	r1, r2
    77c8:	0018      	movs	r0, r3
    77ca:	4b46      	ldr	r3, [pc, #280]	; (78e4 <get_fat+0x168>)
    77cc:	4798      	blx	r3
    77ce:	1e03      	subs	r3, r0, #0
    77d0:	d000      	beq.n	77d4 <get_fat+0x58>
    77d2:	e079      	b.n	78c8 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
    77d4:	697b      	ldr	r3, [r7, #20]
    77d6:	05db      	lsls	r3, r3, #23
    77d8:	0ddb      	lsrs	r3, r3, #23
    77da:	687a      	ldr	r2, [r7, #4]
    77dc:	2130      	movs	r1, #48	; 0x30
    77de:	18d3      	adds	r3, r2, r3
    77e0:	185b      	adds	r3, r3, r1
    77e2:	781b      	ldrb	r3, [r3, #0]
    77e4:	613b      	str	r3, [r7, #16]
    77e6:	697b      	ldr	r3, [r7, #20]
    77e8:	3301      	adds	r3, #1
    77ea:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    77ec:	687b      	ldr	r3, [r7, #4]
    77ee:	6a1a      	ldr	r2, [r3, #32]
    77f0:	697b      	ldr	r3, [r7, #20]
    77f2:	0a5b      	lsrs	r3, r3, #9
    77f4:	18d2      	adds	r2, r2, r3
    77f6:	687b      	ldr	r3, [r7, #4]
    77f8:	0011      	movs	r1, r2
    77fa:	0018      	movs	r0, r3
    77fc:	4b39      	ldr	r3, [pc, #228]	; (78e4 <get_fat+0x168>)
    77fe:	4798      	blx	r3
    7800:	1e03      	subs	r3, r0, #0
    7802:	d163      	bne.n	78cc <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
    7804:	697b      	ldr	r3, [r7, #20]
    7806:	05db      	lsls	r3, r3, #23
    7808:	0ddb      	lsrs	r3, r3, #23
    780a:	687a      	ldr	r2, [r7, #4]
    780c:	2130      	movs	r1, #48	; 0x30
    780e:	18d3      	adds	r3, r2, r3
    7810:	185b      	adds	r3, r3, r1
    7812:	781b      	ldrb	r3, [r3, #0]
    7814:	021b      	lsls	r3, r3, #8
    7816:	001a      	movs	r2, r3
    7818:	693b      	ldr	r3, [r7, #16]
    781a:	4313      	orrs	r3, r2
    781c:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    781e:	683b      	ldr	r3, [r7, #0]
    7820:	2201      	movs	r2, #1
    7822:	4013      	ands	r3, r2
    7824:	d002      	beq.n	782c <get_fat+0xb0>
    7826:	693b      	ldr	r3, [r7, #16]
    7828:	091b      	lsrs	r3, r3, #4
    782a:	e056      	b.n	78da <get_fat+0x15e>
    782c:	693b      	ldr	r3, [r7, #16]
    782e:	051b      	lsls	r3, r3, #20
    7830:	0d1b      	lsrs	r3, r3, #20
    7832:	e052      	b.n	78da <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    7834:	687b      	ldr	r3, [r7, #4]
    7836:	6a1a      	ldr	r2, [r3, #32]
    7838:	683b      	ldr	r3, [r7, #0]
    783a:	0a1b      	lsrs	r3, r3, #8
    783c:	18d2      	adds	r2, r2, r3
    783e:	687b      	ldr	r3, [r7, #4]
    7840:	0011      	movs	r1, r2
    7842:	0018      	movs	r0, r3
    7844:	4b27      	ldr	r3, [pc, #156]	; (78e4 <get_fat+0x168>)
    7846:	4798      	blx	r3
    7848:	1e03      	subs	r3, r0, #0
    784a:	d141      	bne.n	78d0 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
    784c:	683b      	ldr	r3, [r7, #0]
    784e:	005a      	lsls	r2, r3, #1
    7850:	23ff      	movs	r3, #255	; 0xff
    7852:	005b      	lsls	r3, r3, #1
    7854:	4013      	ands	r3, r2
    7856:	3330      	adds	r3, #48	; 0x30
    7858:	687a      	ldr	r2, [r7, #4]
    785a:	18d3      	adds	r3, r2, r3
    785c:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
    785e:	68fb      	ldr	r3, [r7, #12]
    7860:	3301      	adds	r3, #1
    7862:	781b      	ldrb	r3, [r3, #0]
    7864:	021b      	lsls	r3, r3, #8
    7866:	b21a      	sxth	r2, r3
    7868:	68fb      	ldr	r3, [r7, #12]
    786a:	781b      	ldrb	r3, [r3, #0]
    786c:	b21b      	sxth	r3, r3
    786e:	4313      	orrs	r3, r2
    7870:	b21b      	sxth	r3, r3
    7872:	b29b      	uxth	r3, r3
    7874:	e031      	b.n	78da <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    7876:	687b      	ldr	r3, [r7, #4]
    7878:	6a1a      	ldr	r2, [r3, #32]
    787a:	683b      	ldr	r3, [r7, #0]
    787c:	09db      	lsrs	r3, r3, #7
    787e:	18d2      	adds	r2, r2, r3
    7880:	687b      	ldr	r3, [r7, #4]
    7882:	0011      	movs	r1, r2
    7884:	0018      	movs	r0, r3
    7886:	4b17      	ldr	r3, [pc, #92]	; (78e4 <get_fat+0x168>)
    7888:	4798      	blx	r3
    788a:	1e03      	subs	r3, r0, #0
    788c:	d122      	bne.n	78d4 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
    788e:	683b      	ldr	r3, [r7, #0]
    7890:	009a      	lsls	r2, r3, #2
    7892:	23fe      	movs	r3, #254	; 0xfe
    7894:	005b      	lsls	r3, r3, #1
    7896:	4013      	ands	r3, r2
    7898:	3330      	adds	r3, #48	; 0x30
    789a:	687a      	ldr	r2, [r7, #4]
    789c:	18d3      	adds	r3, r2, r3
    789e:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
    78a0:	68fb      	ldr	r3, [r7, #12]
    78a2:	3303      	adds	r3, #3
    78a4:	781b      	ldrb	r3, [r3, #0]
    78a6:	061a      	lsls	r2, r3, #24
    78a8:	68fb      	ldr	r3, [r7, #12]
    78aa:	3302      	adds	r3, #2
    78ac:	781b      	ldrb	r3, [r3, #0]
    78ae:	041b      	lsls	r3, r3, #16
    78b0:	4313      	orrs	r3, r2
    78b2:	68fa      	ldr	r2, [r7, #12]
    78b4:	3201      	adds	r2, #1
    78b6:	7812      	ldrb	r2, [r2, #0]
    78b8:	0212      	lsls	r2, r2, #8
    78ba:	4313      	orrs	r3, r2
    78bc:	68fa      	ldr	r2, [r7, #12]
    78be:	7812      	ldrb	r2, [r2, #0]
    78c0:	4313      	orrs	r3, r2
    78c2:	011b      	lsls	r3, r3, #4
    78c4:	091b      	lsrs	r3, r3, #4
    78c6:	e008      	b.n	78da <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    78c8:	46c0      	nop			; (mov r8, r8)
    78ca:	e004      	b.n	78d6 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    78cc:	46c0      	nop			; (mov r8, r8)
    78ce:	e002      	b.n	78d6 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    78d0:	46c0      	nop			; (mov r8, r8)
    78d2:	e000      	b.n	78d6 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    78d4:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    78d6:	2301      	movs	r3, #1
    78d8:	425b      	negs	r3, r3
}
    78da:	0018      	movs	r0, r3
    78dc:	46bd      	mov	sp, r7
    78de:	b006      	add	sp, #24
    78e0:	bd80      	pop	{r7, pc}
    78e2:	46c0      	nop			; (mov r8, r8)
    78e4:	000074e5 	.word	0x000074e5

000078e8 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    78e8:	b590      	push	{r4, r7, lr}
    78ea:	b089      	sub	sp, #36	; 0x24
    78ec:	af00      	add	r7, sp, #0
    78ee:	60f8      	str	r0, [r7, #12]
    78f0:	60b9      	str	r1, [r7, #8]
    78f2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    78f4:	68bb      	ldr	r3, [r7, #8]
    78f6:	2b01      	cmp	r3, #1
    78f8:	d904      	bls.n	7904 <put_fat+0x1c>
    78fa:	68fb      	ldr	r3, [r7, #12]
    78fc:	699a      	ldr	r2, [r3, #24]
    78fe:	68bb      	ldr	r3, [r7, #8]
    7900:	429a      	cmp	r2, r3
    7902:	d804      	bhi.n	790e <put_fat+0x26>
		res = FR_INT_ERR;
    7904:	231f      	movs	r3, #31
    7906:	18fb      	adds	r3, r7, r3
    7908:	2202      	movs	r2, #2
    790a:	701a      	strb	r2, [r3, #0]
    790c:	e100      	b.n	7b10 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
    790e:	68fb      	ldr	r3, [r7, #12]
    7910:	781b      	ldrb	r3, [r3, #0]
    7912:	2b02      	cmp	r3, #2
    7914:	d100      	bne.n	7918 <put_fat+0x30>
    7916:	e078      	b.n	7a0a <put_fat+0x122>
    7918:	2b03      	cmp	r3, #3
    791a:	d100      	bne.n	791e <put_fat+0x36>
    791c:	e09e      	b.n	7a5c <put_fat+0x174>
    791e:	2b01      	cmp	r3, #1
    7920:	d000      	beq.n	7924 <put_fat+0x3c>
    7922:	e0e6      	b.n	7af2 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    7924:	68bb      	ldr	r3, [r7, #8]
    7926:	61bb      	str	r3, [r7, #24]
    7928:	69bb      	ldr	r3, [r7, #24]
    792a:	085b      	lsrs	r3, r3, #1
    792c:	69ba      	ldr	r2, [r7, #24]
    792e:	18d3      	adds	r3, r2, r3
    7930:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7932:	68fb      	ldr	r3, [r7, #12]
    7934:	6a1a      	ldr	r2, [r3, #32]
    7936:	69bb      	ldr	r3, [r7, #24]
    7938:	0a5b      	lsrs	r3, r3, #9
    793a:	18d2      	adds	r2, r2, r3
    793c:	231f      	movs	r3, #31
    793e:	18fc      	adds	r4, r7, r3
    7940:	68fb      	ldr	r3, [r7, #12]
    7942:	0011      	movs	r1, r2
    7944:	0018      	movs	r0, r3
    7946:	4b76      	ldr	r3, [pc, #472]	; (7b20 <put_fat+0x238>)
    7948:	4798      	blx	r3
    794a:	0003      	movs	r3, r0
    794c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    794e:	231f      	movs	r3, #31
    7950:	18fb      	adds	r3, r7, r3
    7952:	781b      	ldrb	r3, [r3, #0]
    7954:	2b00      	cmp	r3, #0
    7956:	d000      	beq.n	795a <put_fat+0x72>
    7958:	e0d0      	b.n	7afc <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
    795a:	69bb      	ldr	r3, [r7, #24]
    795c:	05db      	lsls	r3, r3, #23
    795e:	0ddb      	lsrs	r3, r3, #23
    7960:	3330      	adds	r3, #48	; 0x30
    7962:	68fa      	ldr	r2, [r7, #12]
    7964:	18d3      	adds	r3, r2, r3
    7966:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    7968:	68bb      	ldr	r3, [r7, #8]
    796a:	2201      	movs	r2, #1
    796c:	4013      	ands	r3, r2
    796e:	d00d      	beq.n	798c <put_fat+0xa4>
    7970:	697b      	ldr	r3, [r7, #20]
    7972:	781b      	ldrb	r3, [r3, #0]
    7974:	b25b      	sxtb	r3, r3
    7976:	220f      	movs	r2, #15
    7978:	4013      	ands	r3, r2
    797a:	b25a      	sxtb	r2, r3
    797c:	687b      	ldr	r3, [r7, #4]
    797e:	b2db      	uxtb	r3, r3
    7980:	011b      	lsls	r3, r3, #4
    7982:	b25b      	sxtb	r3, r3
    7984:	4313      	orrs	r3, r2
    7986:	b25b      	sxtb	r3, r3
    7988:	b2db      	uxtb	r3, r3
    798a:	e001      	b.n	7990 <put_fat+0xa8>
    798c:	687b      	ldr	r3, [r7, #4]
    798e:	b2db      	uxtb	r3, r3
    7990:	697a      	ldr	r2, [r7, #20]
    7992:	7013      	strb	r3, [r2, #0]
			bc++;
    7994:	69bb      	ldr	r3, [r7, #24]
    7996:	3301      	adds	r3, #1
    7998:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
    799a:	68fb      	ldr	r3, [r7, #12]
    799c:	2201      	movs	r2, #1
    799e:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    79a0:	68fb      	ldr	r3, [r7, #12]
    79a2:	6a1a      	ldr	r2, [r3, #32]
    79a4:	69bb      	ldr	r3, [r7, #24]
    79a6:	0a5b      	lsrs	r3, r3, #9
    79a8:	18d2      	adds	r2, r2, r3
    79aa:	231f      	movs	r3, #31
    79ac:	18fc      	adds	r4, r7, r3
    79ae:	68fb      	ldr	r3, [r7, #12]
    79b0:	0011      	movs	r1, r2
    79b2:	0018      	movs	r0, r3
    79b4:	4b5a      	ldr	r3, [pc, #360]	; (7b20 <put_fat+0x238>)
    79b6:	4798      	blx	r3
    79b8:	0003      	movs	r3, r0
    79ba:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    79bc:	231f      	movs	r3, #31
    79be:	18fb      	adds	r3, r7, r3
    79c0:	781b      	ldrb	r3, [r3, #0]
    79c2:	2b00      	cmp	r3, #0
    79c4:	d000      	beq.n	79c8 <put_fat+0xe0>
    79c6:	e09b      	b.n	7b00 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
    79c8:	69bb      	ldr	r3, [r7, #24]
    79ca:	05db      	lsls	r3, r3, #23
    79cc:	0ddb      	lsrs	r3, r3, #23
    79ce:	3330      	adds	r3, #48	; 0x30
    79d0:	68fa      	ldr	r2, [r7, #12]
    79d2:	18d3      	adds	r3, r2, r3
    79d4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    79d6:	68bb      	ldr	r3, [r7, #8]
    79d8:	2201      	movs	r2, #1
    79da:	4013      	ands	r3, r2
    79dc:	d003      	beq.n	79e6 <put_fat+0xfe>
    79de:	687b      	ldr	r3, [r7, #4]
    79e0:	091b      	lsrs	r3, r3, #4
    79e2:	b2db      	uxtb	r3, r3
    79e4:	e00e      	b.n	7a04 <put_fat+0x11c>
    79e6:	697b      	ldr	r3, [r7, #20]
    79e8:	781b      	ldrb	r3, [r3, #0]
    79ea:	b25b      	sxtb	r3, r3
    79ec:	220f      	movs	r2, #15
    79ee:	4393      	bics	r3, r2
    79f0:	b25a      	sxtb	r2, r3
    79f2:	687b      	ldr	r3, [r7, #4]
    79f4:	0a1b      	lsrs	r3, r3, #8
    79f6:	b25b      	sxtb	r3, r3
    79f8:	210f      	movs	r1, #15
    79fa:	400b      	ands	r3, r1
    79fc:	b25b      	sxtb	r3, r3
    79fe:	4313      	orrs	r3, r2
    7a00:	b25b      	sxtb	r3, r3
    7a02:	b2db      	uxtb	r3, r3
    7a04:	697a      	ldr	r2, [r7, #20]
    7a06:	7013      	strb	r3, [r2, #0]
			break;
    7a08:	e07f      	b.n	7b0a <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    7a0a:	68fb      	ldr	r3, [r7, #12]
    7a0c:	6a1a      	ldr	r2, [r3, #32]
    7a0e:	68bb      	ldr	r3, [r7, #8]
    7a10:	0a1b      	lsrs	r3, r3, #8
    7a12:	18d2      	adds	r2, r2, r3
    7a14:	231f      	movs	r3, #31
    7a16:	18fc      	adds	r4, r7, r3
    7a18:	68fb      	ldr	r3, [r7, #12]
    7a1a:	0011      	movs	r1, r2
    7a1c:	0018      	movs	r0, r3
    7a1e:	4b40      	ldr	r3, [pc, #256]	; (7b20 <put_fat+0x238>)
    7a20:	4798      	blx	r3
    7a22:	0003      	movs	r3, r0
    7a24:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7a26:	231f      	movs	r3, #31
    7a28:	18fb      	adds	r3, r7, r3
    7a2a:	781b      	ldrb	r3, [r3, #0]
    7a2c:	2b00      	cmp	r3, #0
    7a2e:	d169      	bne.n	7b04 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
    7a30:	68bb      	ldr	r3, [r7, #8]
    7a32:	005a      	lsls	r2, r3, #1
    7a34:	23ff      	movs	r3, #255	; 0xff
    7a36:	005b      	lsls	r3, r3, #1
    7a38:	4013      	ands	r3, r2
    7a3a:	3330      	adds	r3, #48	; 0x30
    7a3c:	68fa      	ldr	r2, [r7, #12]
    7a3e:	18d3      	adds	r3, r2, r3
    7a40:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
    7a42:	687b      	ldr	r3, [r7, #4]
    7a44:	b2da      	uxtb	r2, r3
    7a46:	697b      	ldr	r3, [r7, #20]
    7a48:	701a      	strb	r2, [r3, #0]
    7a4a:	697b      	ldr	r3, [r7, #20]
    7a4c:	3301      	adds	r3, #1
    7a4e:	687a      	ldr	r2, [r7, #4]
    7a50:	b292      	uxth	r2, r2
    7a52:	0a12      	lsrs	r2, r2, #8
    7a54:	b292      	uxth	r2, r2
    7a56:	b2d2      	uxtb	r2, r2
    7a58:	701a      	strb	r2, [r3, #0]
			break;
    7a5a:	e056      	b.n	7b0a <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    7a5c:	68fb      	ldr	r3, [r7, #12]
    7a5e:	6a1a      	ldr	r2, [r3, #32]
    7a60:	68bb      	ldr	r3, [r7, #8]
    7a62:	09db      	lsrs	r3, r3, #7
    7a64:	18d2      	adds	r2, r2, r3
    7a66:	231f      	movs	r3, #31
    7a68:	18fc      	adds	r4, r7, r3
    7a6a:	68fb      	ldr	r3, [r7, #12]
    7a6c:	0011      	movs	r1, r2
    7a6e:	0018      	movs	r0, r3
    7a70:	4b2b      	ldr	r3, [pc, #172]	; (7b20 <put_fat+0x238>)
    7a72:	4798      	blx	r3
    7a74:	0003      	movs	r3, r0
    7a76:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7a78:	231f      	movs	r3, #31
    7a7a:	18fb      	adds	r3, r7, r3
    7a7c:	781b      	ldrb	r3, [r3, #0]
    7a7e:	2b00      	cmp	r3, #0
    7a80:	d142      	bne.n	7b08 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
    7a82:	68bb      	ldr	r3, [r7, #8]
    7a84:	009a      	lsls	r2, r3, #2
    7a86:	23fe      	movs	r3, #254	; 0xfe
    7a88:	005b      	lsls	r3, r3, #1
    7a8a:	4013      	ands	r3, r2
    7a8c:	3330      	adds	r3, #48	; 0x30
    7a8e:	68fa      	ldr	r2, [r7, #12]
    7a90:	18d3      	adds	r3, r2, r3
    7a92:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
    7a94:	697b      	ldr	r3, [r7, #20]
    7a96:	3303      	adds	r3, #3
    7a98:	781b      	ldrb	r3, [r3, #0]
    7a9a:	061a      	lsls	r2, r3, #24
    7a9c:	697b      	ldr	r3, [r7, #20]
    7a9e:	3302      	adds	r3, #2
    7aa0:	781b      	ldrb	r3, [r3, #0]
    7aa2:	041b      	lsls	r3, r3, #16
    7aa4:	4313      	orrs	r3, r2
    7aa6:	697a      	ldr	r2, [r7, #20]
    7aa8:	3201      	adds	r2, #1
    7aaa:	7812      	ldrb	r2, [r2, #0]
    7aac:	0212      	lsls	r2, r2, #8
    7aae:	4313      	orrs	r3, r2
    7ab0:	697a      	ldr	r2, [r7, #20]
    7ab2:	7812      	ldrb	r2, [r2, #0]
    7ab4:	4313      	orrs	r3, r2
    7ab6:	0f1b      	lsrs	r3, r3, #28
    7ab8:	071b      	lsls	r3, r3, #28
    7aba:	687a      	ldr	r2, [r7, #4]
    7abc:	4313      	orrs	r3, r2
    7abe:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
    7ac0:	687b      	ldr	r3, [r7, #4]
    7ac2:	b2da      	uxtb	r2, r3
    7ac4:	697b      	ldr	r3, [r7, #20]
    7ac6:	701a      	strb	r2, [r3, #0]
    7ac8:	697b      	ldr	r3, [r7, #20]
    7aca:	3301      	adds	r3, #1
    7acc:	687a      	ldr	r2, [r7, #4]
    7ace:	b292      	uxth	r2, r2
    7ad0:	0a12      	lsrs	r2, r2, #8
    7ad2:	b292      	uxth	r2, r2
    7ad4:	b2d2      	uxtb	r2, r2
    7ad6:	701a      	strb	r2, [r3, #0]
    7ad8:	697b      	ldr	r3, [r7, #20]
    7ada:	3302      	adds	r3, #2
    7adc:	687a      	ldr	r2, [r7, #4]
    7ade:	0c12      	lsrs	r2, r2, #16
    7ae0:	b2d2      	uxtb	r2, r2
    7ae2:	701a      	strb	r2, [r3, #0]
    7ae4:	697b      	ldr	r3, [r7, #20]
    7ae6:	3303      	adds	r3, #3
    7ae8:	687a      	ldr	r2, [r7, #4]
    7aea:	0e12      	lsrs	r2, r2, #24
    7aec:	b2d2      	uxtb	r2, r2
    7aee:	701a      	strb	r2, [r3, #0]
			break;
    7af0:	e00b      	b.n	7b0a <put_fat+0x222>

		default :
			res = FR_INT_ERR;
    7af2:	231f      	movs	r3, #31
    7af4:	18fb      	adds	r3, r7, r3
    7af6:	2202      	movs	r2, #2
    7af8:	701a      	strb	r2, [r3, #0]
    7afa:	e006      	b.n	7b0a <put_fat+0x222>
			if (res != FR_OK) break;
    7afc:	46c0      	nop			; (mov r8, r8)
    7afe:	e004      	b.n	7b0a <put_fat+0x222>
			if (res != FR_OK) break;
    7b00:	46c0      	nop			; (mov r8, r8)
    7b02:	e002      	b.n	7b0a <put_fat+0x222>
			if (res != FR_OK) break;
    7b04:	46c0      	nop			; (mov r8, r8)
    7b06:	e000      	b.n	7b0a <put_fat+0x222>
			if (res != FR_OK) break;
    7b08:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
    7b0a:	68fb      	ldr	r3, [r7, #12]
    7b0c:	2201      	movs	r2, #1
    7b0e:	711a      	strb	r2, [r3, #4]
	}

	return res;
    7b10:	231f      	movs	r3, #31
    7b12:	18fb      	adds	r3, r7, r3
    7b14:	781b      	ldrb	r3, [r3, #0]
}
    7b16:	0018      	movs	r0, r3
    7b18:	46bd      	mov	sp, r7
    7b1a:	b009      	add	sp, #36	; 0x24
    7b1c:	bd90      	pop	{r4, r7, pc}
    7b1e:	46c0      	nop			; (mov r8, r8)
    7b20:	000074e5 	.word	0x000074e5

00007b24 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    7b24:	b590      	push	{r4, r7, lr}
    7b26:	b085      	sub	sp, #20
    7b28:	af00      	add	r7, sp, #0
    7b2a:	6078      	str	r0, [r7, #4]
    7b2c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    7b2e:	683b      	ldr	r3, [r7, #0]
    7b30:	2b01      	cmp	r3, #1
    7b32:	d904      	bls.n	7b3e <remove_chain+0x1a>
    7b34:	687b      	ldr	r3, [r7, #4]
    7b36:	699a      	ldr	r2, [r3, #24]
    7b38:	683b      	ldr	r3, [r7, #0]
    7b3a:	429a      	cmp	r2, r3
    7b3c:	d804      	bhi.n	7b48 <remove_chain+0x24>
		res = FR_INT_ERR;
    7b3e:	230f      	movs	r3, #15
    7b40:	18fb      	adds	r3, r7, r3
    7b42:	2202      	movs	r2, #2
    7b44:	701a      	strb	r2, [r3, #0]
    7b46:	e045      	b.n	7bd4 <remove_chain+0xb0>

	} else {
		res = FR_OK;
    7b48:	230f      	movs	r3, #15
    7b4a:	18fb      	adds	r3, r7, r3
    7b4c:	2200      	movs	r2, #0
    7b4e:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    7b50:	e037      	b.n	7bc2 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    7b52:	683a      	ldr	r2, [r7, #0]
    7b54:	687b      	ldr	r3, [r7, #4]
    7b56:	0011      	movs	r1, r2
    7b58:	0018      	movs	r0, r3
    7b5a:	4b22      	ldr	r3, [pc, #136]	; (7be4 <remove_chain+0xc0>)
    7b5c:	4798      	blx	r3
    7b5e:	0003      	movs	r3, r0
    7b60:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
    7b62:	68bb      	ldr	r3, [r7, #8]
    7b64:	2b00      	cmp	r3, #0
    7b66:	d032      	beq.n	7bce <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    7b68:	68bb      	ldr	r3, [r7, #8]
    7b6a:	2b01      	cmp	r3, #1
    7b6c:	d104      	bne.n	7b78 <remove_chain+0x54>
    7b6e:	230f      	movs	r3, #15
    7b70:	18fb      	adds	r3, r7, r3
    7b72:	2202      	movs	r2, #2
    7b74:	701a      	strb	r2, [r3, #0]
    7b76:	e02d      	b.n	7bd4 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    7b78:	68bb      	ldr	r3, [r7, #8]
    7b7a:	3301      	adds	r3, #1
    7b7c:	d104      	bne.n	7b88 <remove_chain+0x64>
    7b7e:	230f      	movs	r3, #15
    7b80:	18fb      	adds	r3, r7, r3
    7b82:	2201      	movs	r2, #1
    7b84:	701a      	strb	r2, [r3, #0]
    7b86:	e025      	b.n	7bd4 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    7b88:	230f      	movs	r3, #15
    7b8a:	18fc      	adds	r4, r7, r3
    7b8c:	6839      	ldr	r1, [r7, #0]
    7b8e:	687b      	ldr	r3, [r7, #4]
    7b90:	2200      	movs	r2, #0
    7b92:	0018      	movs	r0, r3
    7b94:	4b14      	ldr	r3, [pc, #80]	; (7be8 <remove_chain+0xc4>)
    7b96:	4798      	blx	r3
    7b98:	0003      	movs	r3, r0
    7b9a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7b9c:	230f      	movs	r3, #15
    7b9e:	18fb      	adds	r3, r7, r3
    7ba0:	781b      	ldrb	r3, [r3, #0]
    7ba2:	2b00      	cmp	r3, #0
    7ba4:	d115      	bne.n	7bd2 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    7ba6:	687b      	ldr	r3, [r7, #4]
    7ba8:	691b      	ldr	r3, [r3, #16]
    7baa:	3301      	adds	r3, #1
    7bac:	d007      	beq.n	7bbe <remove_chain+0x9a>
				fs->free_clust++;
    7bae:	687b      	ldr	r3, [r7, #4]
    7bb0:	691b      	ldr	r3, [r3, #16]
    7bb2:	1c5a      	adds	r2, r3, #1
    7bb4:	687b      	ldr	r3, [r7, #4]
    7bb6:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
    7bb8:	687b      	ldr	r3, [r7, #4]
    7bba:	2201      	movs	r2, #1
    7bbc:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
    7bbe:	68bb      	ldr	r3, [r7, #8]
    7bc0:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    7bc2:	687b      	ldr	r3, [r7, #4]
    7bc4:	699a      	ldr	r2, [r3, #24]
    7bc6:	683b      	ldr	r3, [r7, #0]
    7bc8:	429a      	cmp	r2, r3
    7bca:	d8c2      	bhi.n	7b52 <remove_chain+0x2e>
    7bcc:	e002      	b.n	7bd4 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
    7bce:	46c0      	nop			; (mov r8, r8)
    7bd0:	e000      	b.n	7bd4 <remove_chain+0xb0>
			if (res != FR_OK) break;
    7bd2:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    7bd4:	230f      	movs	r3, #15
    7bd6:	18fb      	adds	r3, r7, r3
    7bd8:	781b      	ldrb	r3, [r3, #0]
}
    7bda:	0018      	movs	r0, r3
    7bdc:	46bd      	mov	sp, r7
    7bde:	b005      	add	sp, #20
    7be0:	bd90      	pop	{r4, r7, pc}
    7be2:	46c0      	nop			; (mov r8, r8)
    7be4:	0000777d 	.word	0x0000777d
    7be8:	000078e9 	.word	0x000078e9

00007bec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    7bec:	b590      	push	{r4, r7, lr}
    7bee:	b087      	sub	sp, #28
    7bf0:	af00      	add	r7, sp, #0
    7bf2:	6078      	str	r0, [r7, #4]
    7bf4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    7bf6:	683b      	ldr	r3, [r7, #0]
    7bf8:	2b00      	cmp	r3, #0
    7bfa:	d10d      	bne.n	7c18 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
    7bfc:	687b      	ldr	r3, [r7, #4]
    7bfe:	68db      	ldr	r3, [r3, #12]
    7c00:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    7c02:	693b      	ldr	r3, [r7, #16]
    7c04:	2b00      	cmp	r3, #0
    7c06:	d004      	beq.n	7c12 <create_chain+0x26>
    7c08:	687b      	ldr	r3, [r7, #4]
    7c0a:	699a      	ldr	r2, [r3, #24]
    7c0c:	693b      	ldr	r3, [r7, #16]
    7c0e:	429a      	cmp	r2, r3
    7c10:	d818      	bhi.n	7c44 <create_chain+0x58>
    7c12:	2301      	movs	r3, #1
    7c14:	613b      	str	r3, [r7, #16]
    7c16:	e015      	b.n	7c44 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    7c18:	683a      	ldr	r2, [r7, #0]
    7c1a:	687b      	ldr	r3, [r7, #4]
    7c1c:	0011      	movs	r1, r2
    7c1e:	0018      	movs	r0, r3
    7c20:	4b3e      	ldr	r3, [pc, #248]	; (7d1c <create_chain+0x130>)
    7c22:	4798      	blx	r3
    7c24:	0003      	movs	r3, r0
    7c26:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
    7c28:	68bb      	ldr	r3, [r7, #8]
    7c2a:	2b01      	cmp	r3, #1
    7c2c:	d801      	bhi.n	7c32 <create_chain+0x46>
    7c2e:	2301      	movs	r3, #1
    7c30:	e070      	b.n	7d14 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    7c32:	687b      	ldr	r3, [r7, #4]
    7c34:	699a      	ldr	r2, [r3, #24]
    7c36:	68bb      	ldr	r3, [r7, #8]
    7c38:	429a      	cmp	r2, r3
    7c3a:	d901      	bls.n	7c40 <create_chain+0x54>
    7c3c:	68bb      	ldr	r3, [r7, #8]
    7c3e:	e069      	b.n	7d14 <create_chain+0x128>
		scl = clst;
    7c40:	683b      	ldr	r3, [r7, #0]
    7c42:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
    7c44:	693b      	ldr	r3, [r7, #16]
    7c46:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
    7c48:	697b      	ldr	r3, [r7, #20]
    7c4a:	3301      	adds	r3, #1
    7c4c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    7c4e:	687b      	ldr	r3, [r7, #4]
    7c50:	699a      	ldr	r2, [r3, #24]
    7c52:	697b      	ldr	r3, [r7, #20]
    7c54:	429a      	cmp	r2, r3
    7c56:	d807      	bhi.n	7c68 <create_chain+0x7c>
			ncl = 2;
    7c58:	2302      	movs	r3, #2
    7c5a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
    7c5c:	697a      	ldr	r2, [r7, #20]
    7c5e:	693b      	ldr	r3, [r7, #16]
    7c60:	429a      	cmp	r2, r3
    7c62:	d901      	bls.n	7c68 <create_chain+0x7c>
    7c64:	2300      	movs	r3, #0
    7c66:	e055      	b.n	7d14 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    7c68:	697a      	ldr	r2, [r7, #20]
    7c6a:	687b      	ldr	r3, [r7, #4]
    7c6c:	0011      	movs	r1, r2
    7c6e:	0018      	movs	r0, r3
    7c70:	4b2a      	ldr	r3, [pc, #168]	; (7d1c <create_chain+0x130>)
    7c72:	4798      	blx	r3
    7c74:	0003      	movs	r3, r0
    7c76:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
    7c78:	68bb      	ldr	r3, [r7, #8]
    7c7a:	2b00      	cmp	r3, #0
    7c7c:	d00d      	beq.n	7c9a <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    7c7e:	68bb      	ldr	r3, [r7, #8]
    7c80:	3301      	adds	r3, #1
    7c82:	d002      	beq.n	7c8a <create_chain+0x9e>
    7c84:	68bb      	ldr	r3, [r7, #8]
    7c86:	2b01      	cmp	r3, #1
    7c88:	d101      	bne.n	7c8e <create_chain+0xa2>
			return cs;
    7c8a:	68bb      	ldr	r3, [r7, #8]
    7c8c:	e042      	b.n	7d14 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
    7c8e:	697a      	ldr	r2, [r7, #20]
    7c90:	693b      	ldr	r3, [r7, #16]
    7c92:	429a      	cmp	r2, r3
    7c94:	d1d8      	bne.n	7c48 <create_chain+0x5c>
    7c96:	2300      	movs	r3, #0
    7c98:	e03c      	b.n	7d14 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
    7c9a:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    7c9c:	230f      	movs	r3, #15
    7c9e:	18fc      	adds	r4, r7, r3
    7ca0:	4a1f      	ldr	r2, [pc, #124]	; (7d20 <create_chain+0x134>)
    7ca2:	6979      	ldr	r1, [r7, #20]
    7ca4:	687b      	ldr	r3, [r7, #4]
    7ca6:	0018      	movs	r0, r3
    7ca8:	4b1e      	ldr	r3, [pc, #120]	; (7d24 <create_chain+0x138>)
    7caa:	4798      	blx	r3
    7cac:	0003      	movs	r3, r0
    7cae:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
    7cb0:	230f      	movs	r3, #15
    7cb2:	18fb      	adds	r3, r7, r3
    7cb4:	781b      	ldrb	r3, [r3, #0]
    7cb6:	2b00      	cmp	r3, #0
    7cb8:	d10c      	bne.n	7cd4 <create_chain+0xe8>
    7cba:	683b      	ldr	r3, [r7, #0]
    7cbc:	2b00      	cmp	r3, #0
    7cbe:	d009      	beq.n	7cd4 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    7cc0:	230f      	movs	r3, #15
    7cc2:	18fc      	adds	r4, r7, r3
    7cc4:	697a      	ldr	r2, [r7, #20]
    7cc6:	6839      	ldr	r1, [r7, #0]
    7cc8:	687b      	ldr	r3, [r7, #4]
    7cca:	0018      	movs	r0, r3
    7ccc:	4b15      	ldr	r3, [pc, #84]	; (7d24 <create_chain+0x138>)
    7cce:	4798      	blx	r3
    7cd0:	0003      	movs	r3, r0
    7cd2:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
    7cd4:	230f      	movs	r3, #15
    7cd6:	18fb      	adds	r3, r7, r3
    7cd8:	781b      	ldrb	r3, [r3, #0]
    7cda:	2b00      	cmp	r3, #0
    7cdc:	d10f      	bne.n	7cfe <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
    7cde:	687b      	ldr	r3, [r7, #4]
    7ce0:	697a      	ldr	r2, [r7, #20]
    7ce2:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    7ce4:	687b      	ldr	r3, [r7, #4]
    7ce6:	691b      	ldr	r3, [r3, #16]
    7ce8:	3301      	adds	r3, #1
    7cea:	d012      	beq.n	7d12 <create_chain+0x126>
			fs->free_clust--;
    7cec:	687b      	ldr	r3, [r7, #4]
    7cee:	691b      	ldr	r3, [r3, #16]
    7cf0:	1e5a      	subs	r2, r3, #1
    7cf2:	687b      	ldr	r3, [r7, #4]
    7cf4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
    7cf6:	687b      	ldr	r3, [r7, #4]
    7cf8:	2201      	movs	r2, #1
    7cfa:	715a      	strb	r2, [r3, #5]
    7cfc:	e009      	b.n	7d12 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    7cfe:	230f      	movs	r3, #15
    7d00:	18fb      	adds	r3, r7, r3
    7d02:	781b      	ldrb	r3, [r3, #0]
    7d04:	2b01      	cmp	r3, #1
    7d06:	d102      	bne.n	7d0e <create_chain+0x122>
    7d08:	2301      	movs	r3, #1
    7d0a:	425b      	negs	r3, r3
    7d0c:	e000      	b.n	7d10 <create_chain+0x124>
    7d0e:	2301      	movs	r3, #1
    7d10:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
    7d12:	697b      	ldr	r3, [r7, #20]
}
    7d14:	0018      	movs	r0, r3
    7d16:	46bd      	mov	sp, r7
    7d18:	b007      	add	sp, #28
    7d1a:	bd90      	pop	{r4, r7, pc}
    7d1c:	0000777d 	.word	0x0000777d
    7d20:	0fffffff 	.word	0x0fffffff
    7d24:	000078e9 	.word	0x000078e9

00007d28 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    7d28:	b580      	push	{r7, lr}
    7d2a:	b084      	sub	sp, #16
    7d2c:	af00      	add	r7, sp, #0
    7d2e:	6078      	str	r0, [r7, #4]
    7d30:	000a      	movs	r2, r1
    7d32:	1cbb      	adds	r3, r7, #2
    7d34:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
    7d36:	687b      	ldr	r3, [r7, #4]
    7d38:	1cba      	adds	r2, r7, #2
    7d3a:	8812      	ldrh	r2, [r2, #0]
    7d3c:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
    7d3e:	687b      	ldr	r3, [r7, #4]
    7d40:	689b      	ldr	r3, [r3, #8]
    7d42:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    7d44:	68fb      	ldr	r3, [r7, #12]
    7d46:	2b01      	cmp	r3, #1
    7d48:	d005      	beq.n	7d56 <dir_sdi+0x2e>
    7d4a:	687b      	ldr	r3, [r7, #4]
    7d4c:	681b      	ldr	r3, [r3, #0]
    7d4e:	699a      	ldr	r2, [r3, #24]
    7d50:	68fb      	ldr	r3, [r7, #12]
    7d52:	429a      	cmp	r2, r3
    7d54:	d801      	bhi.n	7d5a <dir_sdi+0x32>
		return FR_INT_ERR;
    7d56:	2302      	movs	r3, #2
    7d58:	e075      	b.n	7e46 <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    7d5a:	68fb      	ldr	r3, [r7, #12]
    7d5c:	2b00      	cmp	r3, #0
    7d5e:	d108      	bne.n	7d72 <dir_sdi+0x4a>
    7d60:	687b      	ldr	r3, [r7, #4]
    7d62:	681b      	ldr	r3, [r3, #0]
    7d64:	781b      	ldrb	r3, [r3, #0]
    7d66:	2b03      	cmp	r3, #3
    7d68:	d103      	bne.n	7d72 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
    7d6a:	687b      	ldr	r3, [r7, #4]
    7d6c:	681b      	ldr	r3, [r3, #0]
    7d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7d70:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    7d72:	68fb      	ldr	r3, [r7, #12]
    7d74:	2b00      	cmp	r3, #0
    7d76:	d116      	bne.n	7da6 <dir_sdi+0x7e>
		dj->clust = clst;
    7d78:	687b      	ldr	r3, [r7, #4]
    7d7a:	68fa      	ldr	r2, [r7, #12]
    7d7c:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    7d7e:	687b      	ldr	r3, [r7, #4]
    7d80:	681b      	ldr	r3, [r3, #0]
    7d82:	891b      	ldrh	r3, [r3, #8]
    7d84:	1cba      	adds	r2, r7, #2
    7d86:	8812      	ldrh	r2, [r2, #0]
    7d88:	429a      	cmp	r2, r3
    7d8a:	d301      	bcc.n	7d90 <dir_sdi+0x68>
			return FR_INT_ERR;
    7d8c:	2302      	movs	r3, #2
    7d8e:	e05a      	b.n	7e46 <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    7d90:	687b      	ldr	r3, [r7, #4]
    7d92:	681b      	ldr	r3, [r3, #0]
    7d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7d96:	1cba      	adds	r2, r7, #2
    7d98:	8812      	ldrh	r2, [r2, #0]
    7d9a:	0912      	lsrs	r2, r2, #4
    7d9c:	b292      	uxth	r2, r2
    7d9e:	189a      	adds	r2, r3, r2
    7da0:	687b      	ldr	r3, [r7, #4]
    7da2:	611a      	str	r2, [r3, #16]
    7da4:	e042      	b.n	7e2c <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    7da6:	687b      	ldr	r3, [r7, #4]
    7da8:	681b      	ldr	r3, [r3, #0]
    7daa:	789b      	ldrb	r3, [r3, #2]
    7dac:	b29a      	uxth	r2, r3
    7dae:	230a      	movs	r3, #10
    7db0:	18fb      	adds	r3, r7, r3
    7db2:	0112      	lsls	r2, r2, #4
    7db4:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    7db6:	e020      	b.n	7dfa <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    7db8:	687b      	ldr	r3, [r7, #4]
    7dba:	681b      	ldr	r3, [r3, #0]
    7dbc:	68fa      	ldr	r2, [r7, #12]
    7dbe:	0011      	movs	r1, r2
    7dc0:	0018      	movs	r0, r3
    7dc2:	4b23      	ldr	r3, [pc, #140]	; (7e50 <dir_sdi+0x128>)
    7dc4:	4798      	blx	r3
    7dc6:	0003      	movs	r3, r0
    7dc8:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    7dca:	68fb      	ldr	r3, [r7, #12]
    7dcc:	3301      	adds	r3, #1
    7dce:	d101      	bne.n	7dd4 <dir_sdi+0xac>
    7dd0:	2301      	movs	r3, #1
    7dd2:	e038      	b.n	7e46 <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    7dd4:	68fb      	ldr	r3, [r7, #12]
    7dd6:	2b01      	cmp	r3, #1
    7dd8:	d905      	bls.n	7de6 <dir_sdi+0xbe>
    7dda:	687b      	ldr	r3, [r7, #4]
    7ddc:	681b      	ldr	r3, [r3, #0]
    7dde:	699a      	ldr	r2, [r3, #24]
    7de0:	68fb      	ldr	r3, [r7, #12]
    7de2:	429a      	cmp	r2, r3
    7de4:	d801      	bhi.n	7dea <dir_sdi+0xc2>
				return FR_INT_ERR;
    7de6:	2302      	movs	r3, #2
    7de8:	e02d      	b.n	7e46 <dir_sdi+0x11e>
			idx -= ic;
    7dea:	1cbb      	adds	r3, r7, #2
    7dec:	1cb9      	adds	r1, r7, #2
    7dee:	220a      	movs	r2, #10
    7df0:	18ba      	adds	r2, r7, r2
    7df2:	8809      	ldrh	r1, [r1, #0]
    7df4:	8812      	ldrh	r2, [r2, #0]
    7df6:	1a8a      	subs	r2, r1, r2
    7df8:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    7dfa:	1cba      	adds	r2, r7, #2
    7dfc:	230a      	movs	r3, #10
    7dfe:	18fb      	adds	r3, r7, r3
    7e00:	8812      	ldrh	r2, [r2, #0]
    7e02:	881b      	ldrh	r3, [r3, #0]
    7e04:	429a      	cmp	r2, r3
    7e06:	d2d7      	bcs.n	7db8 <dir_sdi+0x90>
		}
		dj->clust = clst;
    7e08:	687b      	ldr	r3, [r7, #4]
    7e0a:	68fa      	ldr	r2, [r7, #12]
    7e0c:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    7e0e:	687b      	ldr	r3, [r7, #4]
    7e10:	681b      	ldr	r3, [r3, #0]
    7e12:	68fa      	ldr	r2, [r7, #12]
    7e14:	0011      	movs	r1, r2
    7e16:	0018      	movs	r0, r3
    7e18:	4b0e      	ldr	r3, [pc, #56]	; (7e54 <dir_sdi+0x12c>)
    7e1a:	4798      	blx	r3
    7e1c:	0002      	movs	r2, r0
    7e1e:	1cbb      	adds	r3, r7, #2
    7e20:	881b      	ldrh	r3, [r3, #0]
    7e22:	091b      	lsrs	r3, r3, #4
    7e24:	b29b      	uxth	r3, r3
    7e26:	18d2      	adds	r2, r2, r3
    7e28:	687b      	ldr	r3, [r7, #4]
    7e2a:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    7e2c:	687b      	ldr	r3, [r7, #4]
    7e2e:	681b      	ldr	r3, [r3, #0]
    7e30:	3330      	adds	r3, #48	; 0x30
    7e32:	001a      	movs	r2, r3
    7e34:	1cbb      	adds	r3, r7, #2
    7e36:	881b      	ldrh	r3, [r3, #0]
    7e38:	210f      	movs	r1, #15
    7e3a:	400b      	ands	r3, r1
    7e3c:	015b      	lsls	r3, r3, #5
    7e3e:	18d2      	adds	r2, r2, r3
    7e40:	687b      	ldr	r3, [r7, #4]
    7e42:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
    7e44:	2300      	movs	r3, #0
}
    7e46:	0018      	movs	r0, r3
    7e48:	46bd      	mov	sp, r7
    7e4a:	b004      	add	sp, #16
    7e4c:	bd80      	pop	{r7, pc}
    7e4e:	46c0      	nop			; (mov r8, r8)
    7e50:	0000777d 	.word	0x0000777d
    7e54:	00007745 	.word	0x00007745

00007e58 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    7e58:	b590      	push	{r4, r7, lr}
    7e5a:	b085      	sub	sp, #20
    7e5c:	af00      	add	r7, sp, #0
    7e5e:	6078      	str	r0, [r7, #4]
    7e60:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    7e62:	687b      	ldr	r3, [r7, #4]
    7e64:	88da      	ldrh	r2, [r3, #6]
    7e66:	2308      	movs	r3, #8
    7e68:	18fb      	adds	r3, r7, r3
    7e6a:	3201      	adds	r2, #1
    7e6c:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    7e6e:	2308      	movs	r3, #8
    7e70:	18fb      	adds	r3, r7, r3
    7e72:	881b      	ldrh	r3, [r3, #0]
    7e74:	2b00      	cmp	r3, #0
    7e76:	d003      	beq.n	7e80 <dir_next+0x28>
    7e78:	687b      	ldr	r3, [r7, #4]
    7e7a:	691b      	ldr	r3, [r3, #16]
    7e7c:	2b00      	cmp	r3, #0
    7e7e:	d101      	bne.n	7e84 <dir_next+0x2c>
		return FR_NO_FILE;
    7e80:	2304      	movs	r3, #4
    7e82:	e0d2      	b.n	802a <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    7e84:	2308      	movs	r3, #8
    7e86:	18fb      	adds	r3, r7, r3
    7e88:	881b      	ldrh	r3, [r3, #0]
    7e8a:	220f      	movs	r2, #15
    7e8c:	4013      	ands	r3, r2
    7e8e:	b29b      	uxth	r3, r3
    7e90:	2b00      	cmp	r3, #0
    7e92:	d000      	beq.n	7e96 <dir_next+0x3e>
    7e94:	e0b6      	b.n	8004 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
    7e96:	687b      	ldr	r3, [r7, #4]
    7e98:	691b      	ldr	r3, [r3, #16]
    7e9a:	1c5a      	adds	r2, r3, #1
    7e9c:	687b      	ldr	r3, [r7, #4]
    7e9e:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
    7ea0:	687b      	ldr	r3, [r7, #4]
    7ea2:	68db      	ldr	r3, [r3, #12]
    7ea4:	2b00      	cmp	r3, #0
    7ea6:	d10a      	bne.n	7ebe <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    7ea8:	687b      	ldr	r3, [r7, #4]
    7eaa:	681b      	ldr	r3, [r3, #0]
    7eac:	891b      	ldrh	r3, [r3, #8]
    7eae:	2208      	movs	r2, #8
    7eb0:	18ba      	adds	r2, r7, r2
    7eb2:	8812      	ldrh	r2, [r2, #0]
    7eb4:	429a      	cmp	r2, r3
    7eb6:	d200      	bcs.n	7eba <dir_next+0x62>
    7eb8:	e0a4      	b.n	8004 <dir_next+0x1ac>
				return FR_NO_FILE;
    7eba:	2304      	movs	r3, #4
    7ebc:	e0b5      	b.n	802a <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    7ebe:	2308      	movs	r3, #8
    7ec0:	18fb      	adds	r3, r7, r3
    7ec2:	881b      	ldrh	r3, [r3, #0]
    7ec4:	091b      	lsrs	r3, r3, #4
    7ec6:	b29b      	uxth	r3, r3
    7ec8:	001a      	movs	r2, r3
    7eca:	687b      	ldr	r3, [r7, #4]
    7ecc:	681b      	ldr	r3, [r3, #0]
    7ece:	789b      	ldrb	r3, [r3, #2]
    7ed0:	3b01      	subs	r3, #1
    7ed2:	4013      	ands	r3, r2
    7ed4:	d000      	beq.n	7ed8 <dir_next+0x80>
    7ed6:	e095      	b.n	8004 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    7ed8:	687b      	ldr	r3, [r7, #4]
    7eda:	681a      	ldr	r2, [r3, #0]
    7edc:	687b      	ldr	r3, [r7, #4]
    7ede:	68db      	ldr	r3, [r3, #12]
    7ee0:	0019      	movs	r1, r3
    7ee2:	0010      	movs	r0, r2
    7ee4:	4b53      	ldr	r3, [pc, #332]	; (8034 <dir_next+0x1dc>)
    7ee6:	4798      	blx	r3
    7ee8:	0003      	movs	r3, r0
    7eea:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
    7eec:	68fb      	ldr	r3, [r7, #12]
    7eee:	2b01      	cmp	r3, #1
    7ef0:	d801      	bhi.n	7ef6 <dir_next+0x9e>
    7ef2:	2302      	movs	r3, #2
    7ef4:	e099      	b.n	802a <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    7ef6:	68fb      	ldr	r3, [r7, #12]
    7ef8:	3301      	adds	r3, #1
    7efa:	d101      	bne.n	7f00 <dir_next+0xa8>
    7efc:	2301      	movs	r3, #1
    7efe:	e094      	b.n	802a <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    7f00:	687b      	ldr	r3, [r7, #4]
    7f02:	681b      	ldr	r3, [r3, #0]
    7f04:	699a      	ldr	r2, [r3, #24]
    7f06:	68fb      	ldr	r3, [r7, #12]
    7f08:	429a      	cmp	r2, r3
    7f0a:	d900      	bls.n	7f0e <dir_next+0xb6>
    7f0c:	e06d      	b.n	7fea <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    7f0e:	683b      	ldr	r3, [r7, #0]
    7f10:	2b00      	cmp	r3, #0
    7f12:	d101      	bne.n	7f18 <dir_next+0xc0>
    7f14:	2304      	movs	r3, #4
    7f16:	e088      	b.n	802a <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    7f18:	687b      	ldr	r3, [r7, #4]
    7f1a:	681a      	ldr	r2, [r3, #0]
    7f1c:	687b      	ldr	r3, [r7, #4]
    7f1e:	68db      	ldr	r3, [r3, #12]
    7f20:	0019      	movs	r1, r3
    7f22:	0010      	movs	r0, r2
    7f24:	4b44      	ldr	r3, [pc, #272]	; (8038 <dir_next+0x1e0>)
    7f26:	4798      	blx	r3
    7f28:	0003      	movs	r3, r0
    7f2a:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    7f2c:	68fb      	ldr	r3, [r7, #12]
    7f2e:	2b00      	cmp	r3, #0
    7f30:	d101      	bne.n	7f36 <dir_next+0xde>
    7f32:	2307      	movs	r3, #7
    7f34:	e079      	b.n	802a <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
    7f36:	68fb      	ldr	r3, [r7, #12]
    7f38:	2b01      	cmp	r3, #1
    7f3a:	d101      	bne.n	7f40 <dir_next+0xe8>
    7f3c:	2302      	movs	r3, #2
    7f3e:	e074      	b.n	802a <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    7f40:	68fb      	ldr	r3, [r7, #12]
    7f42:	3301      	adds	r3, #1
    7f44:	d101      	bne.n	7f4a <dir_next+0xf2>
    7f46:	2301      	movs	r3, #1
    7f48:	e06f      	b.n	802a <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    7f4a:	687b      	ldr	r3, [r7, #4]
    7f4c:	681b      	ldr	r3, [r3, #0]
    7f4e:	2100      	movs	r1, #0
    7f50:	0018      	movs	r0, r3
    7f52:	4b3a      	ldr	r3, [pc, #232]	; (803c <dir_next+0x1e4>)
    7f54:	4798      	blx	r3
    7f56:	1e03      	subs	r3, r0, #0
    7f58:	d001      	beq.n	7f5e <dir_next+0x106>
    7f5a:	2301      	movs	r3, #1
    7f5c:	e065      	b.n	802a <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    7f5e:	687b      	ldr	r3, [r7, #4]
    7f60:	681b      	ldr	r3, [r3, #0]
    7f62:	3330      	adds	r3, #48	; 0x30
    7f64:	0018      	movs	r0, r3
    7f66:	2380      	movs	r3, #128	; 0x80
    7f68:	009b      	lsls	r3, r3, #2
    7f6a:	001a      	movs	r2, r3
    7f6c:	2100      	movs	r1, #0
    7f6e:	4b34      	ldr	r3, [pc, #208]	; (8040 <dir_next+0x1e8>)
    7f70:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    7f72:	687b      	ldr	r3, [r7, #4]
    7f74:	681c      	ldr	r4, [r3, #0]
    7f76:	687b      	ldr	r3, [r7, #4]
    7f78:	681b      	ldr	r3, [r3, #0]
    7f7a:	68fa      	ldr	r2, [r7, #12]
    7f7c:	0011      	movs	r1, r2
    7f7e:	0018      	movs	r0, r3
    7f80:	4b30      	ldr	r3, [pc, #192]	; (8044 <dir_next+0x1ec>)
    7f82:	4798      	blx	r3
    7f84:	0003      	movs	r3, r0
    7f86:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    7f88:	230b      	movs	r3, #11
    7f8a:	18fb      	adds	r3, r7, r3
    7f8c:	2200      	movs	r2, #0
    7f8e:	701a      	strb	r2, [r3, #0]
    7f90:	e019      	b.n	7fc6 <dir_next+0x16e>
						dj->fs->wflag = 1;
    7f92:	687b      	ldr	r3, [r7, #4]
    7f94:	681b      	ldr	r3, [r3, #0]
    7f96:	2201      	movs	r2, #1
    7f98:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    7f9a:	687b      	ldr	r3, [r7, #4]
    7f9c:	681b      	ldr	r3, [r3, #0]
    7f9e:	2100      	movs	r1, #0
    7fa0:	0018      	movs	r0, r3
    7fa2:	4b26      	ldr	r3, [pc, #152]	; (803c <dir_next+0x1e4>)
    7fa4:	4798      	blx	r3
    7fa6:	1e03      	subs	r3, r0, #0
    7fa8:	d001      	beq.n	7fae <dir_next+0x156>
    7faa:	2301      	movs	r3, #1
    7fac:	e03d      	b.n	802a <dir_next+0x1d2>
						dj->fs->winsect++;
    7fae:	687b      	ldr	r3, [r7, #4]
    7fb0:	681b      	ldr	r3, [r3, #0]
    7fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7fb4:	3201      	adds	r2, #1
    7fb6:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    7fb8:	230b      	movs	r3, #11
    7fba:	18fb      	adds	r3, r7, r3
    7fbc:	781a      	ldrb	r2, [r3, #0]
    7fbe:	230b      	movs	r3, #11
    7fc0:	18fb      	adds	r3, r7, r3
    7fc2:	3201      	adds	r2, #1
    7fc4:	701a      	strb	r2, [r3, #0]
    7fc6:	687b      	ldr	r3, [r7, #4]
    7fc8:	681b      	ldr	r3, [r3, #0]
    7fca:	789b      	ldrb	r3, [r3, #2]
    7fcc:	220b      	movs	r2, #11
    7fce:	18ba      	adds	r2, r7, r2
    7fd0:	7812      	ldrb	r2, [r2, #0]
    7fd2:	429a      	cmp	r2, r3
    7fd4:	d3dd      	bcc.n	7f92 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    7fd6:	687b      	ldr	r3, [r7, #4]
    7fd8:	681b      	ldr	r3, [r3, #0]
    7fda:	687a      	ldr	r2, [r7, #4]
    7fdc:	6812      	ldr	r2, [r2, #0]
    7fde:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    7fe0:	220b      	movs	r2, #11
    7fe2:	18ba      	adds	r2, r7, r2
    7fe4:	7812      	ldrb	r2, [r2, #0]
    7fe6:	1a8a      	subs	r2, r1, r2
    7fe8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    7fea:	687b      	ldr	r3, [r7, #4]
    7fec:	68fa      	ldr	r2, [r7, #12]
    7fee:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
    7ff0:	687b      	ldr	r3, [r7, #4]
    7ff2:	681b      	ldr	r3, [r3, #0]
    7ff4:	68fa      	ldr	r2, [r7, #12]
    7ff6:	0011      	movs	r1, r2
    7ff8:	0018      	movs	r0, r3
    7ffa:	4b12      	ldr	r3, [pc, #72]	; (8044 <dir_next+0x1ec>)
    7ffc:	4798      	blx	r3
    7ffe:	0002      	movs	r2, r0
    8000:	687b      	ldr	r3, [r7, #4]
    8002:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
    8004:	687b      	ldr	r3, [r7, #4]
    8006:	2208      	movs	r2, #8
    8008:	18ba      	adds	r2, r7, r2
    800a:	8812      	ldrh	r2, [r2, #0]
    800c:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    800e:	687b      	ldr	r3, [r7, #4]
    8010:	681b      	ldr	r3, [r3, #0]
    8012:	3330      	adds	r3, #48	; 0x30
    8014:	001a      	movs	r2, r3
    8016:	2308      	movs	r3, #8
    8018:	18fb      	adds	r3, r7, r3
    801a:	881b      	ldrh	r3, [r3, #0]
    801c:	210f      	movs	r1, #15
    801e:	400b      	ands	r3, r1
    8020:	015b      	lsls	r3, r3, #5
    8022:	18d2      	adds	r2, r2, r3
    8024:	687b      	ldr	r3, [r7, #4]
    8026:	615a      	str	r2, [r3, #20]

	return FR_OK;
    8028:	2300      	movs	r3, #0
}
    802a:	0018      	movs	r0, r3
    802c:	46bd      	mov	sp, r7
    802e:	b005      	add	sp, #20
    8030:	bd90      	pop	{r4, r7, pc}
    8032:	46c0      	nop			; (mov r8, r8)
    8034:	0000777d 	.word	0x0000777d
    8038:	00007bed 	.word	0x00007bed
    803c:	000074e5 	.word	0x000074e5
    8040:	00007439 	.word	0x00007439
    8044:	00007745 	.word	0x00007745

00008048 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
    8048:	b590      	push	{r4, r7, lr}
    804a:	b087      	sub	sp, #28
    804c:	af00      	add	r7, sp, #0
    804e:	6078      	str	r0, [r7, #4]
    8050:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    8052:	683b      	ldr	r3, [r7, #0]
    8054:	781b      	ldrb	r3, [r3, #0]
    8056:	001a      	movs	r2, r3
    8058:	2340      	movs	r3, #64	; 0x40
    805a:	439a      	bics	r2, r3
    805c:	0013      	movs	r3, r2
    805e:	1e5a      	subs	r2, r3, #1
    8060:	0013      	movs	r3, r2
    8062:	005b      	lsls	r3, r3, #1
    8064:	189b      	adds	r3, r3, r2
    8066:	009b      	lsls	r3, r3, #2
    8068:	189b      	adds	r3, r3, r2
    806a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
    806c:	2300      	movs	r3, #0
    806e:	613b      	str	r3, [r7, #16]
    8070:	230e      	movs	r3, #14
    8072:	18fb      	adds	r3, r7, r3
    8074:	2201      	movs	r2, #1
    8076:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    8078:	4a31      	ldr	r2, [pc, #196]	; (8140 <cmp_lfn+0xf8>)
    807a:	693b      	ldr	r3, [r7, #16]
    807c:	18d3      	adds	r3, r2, r3
    807e:	781b      	ldrb	r3, [r3, #0]
    8080:	3301      	adds	r3, #1
    8082:	683a      	ldr	r2, [r7, #0]
    8084:	18d3      	adds	r3, r2, r3
    8086:	781b      	ldrb	r3, [r3, #0]
    8088:	021b      	lsls	r3, r3, #8
    808a:	b21a      	sxth	r2, r3
    808c:	492c      	ldr	r1, [pc, #176]	; (8140 <cmp_lfn+0xf8>)
    808e:	693b      	ldr	r3, [r7, #16]
    8090:	18cb      	adds	r3, r1, r3
    8092:	781b      	ldrb	r3, [r3, #0]
    8094:	0019      	movs	r1, r3
    8096:	683b      	ldr	r3, [r7, #0]
    8098:	185b      	adds	r3, r3, r1
    809a:	781b      	ldrb	r3, [r3, #0]
    809c:	b21b      	sxth	r3, r3
    809e:	4313      	orrs	r3, r2
    80a0:	b21a      	sxth	r2, r3
    80a2:	230c      	movs	r3, #12
    80a4:	18fb      	adds	r3, r7, r3
    80a6:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
    80a8:	230e      	movs	r3, #14
    80aa:	18fb      	adds	r3, r7, r3
    80ac:	881b      	ldrh	r3, [r3, #0]
    80ae:	2b00      	cmp	r3, #0
    80b0:	d01f      	beq.n	80f2 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    80b2:	230e      	movs	r3, #14
    80b4:	18fc      	adds	r4, r7, r3
    80b6:	230c      	movs	r3, #12
    80b8:	18fb      	adds	r3, r7, r3
    80ba:	881b      	ldrh	r3, [r3, #0]
    80bc:	0018      	movs	r0, r3
    80be:	4b21      	ldr	r3, [pc, #132]	; (8144 <cmp_lfn+0xfc>)
    80c0:	4798      	blx	r3
    80c2:	0003      	movs	r3, r0
    80c4:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    80c6:	697b      	ldr	r3, [r7, #20]
    80c8:	2bfe      	cmp	r3, #254	; 0xfe
    80ca:	d810      	bhi.n	80ee <cmp_lfn+0xa6>
    80cc:	697b      	ldr	r3, [r7, #20]
    80ce:	1c5a      	adds	r2, r3, #1
    80d0:	617a      	str	r2, [r7, #20]
    80d2:	005b      	lsls	r3, r3, #1
    80d4:	687a      	ldr	r2, [r7, #4]
    80d6:	18d3      	adds	r3, r2, r3
    80d8:	881b      	ldrh	r3, [r3, #0]
    80da:	0018      	movs	r0, r3
    80dc:	4b19      	ldr	r3, [pc, #100]	; (8144 <cmp_lfn+0xfc>)
    80de:	4798      	blx	r3
    80e0:	0003      	movs	r3, r0
    80e2:	001a      	movs	r2, r3
    80e4:	230e      	movs	r3, #14
    80e6:	18fb      	adds	r3, r7, r3
    80e8:	881b      	ldrh	r3, [r3, #0]
    80ea:	4293      	cmp	r3, r2
    80ec:	d009      	beq.n	8102 <cmp_lfn+0xba>
				return 0;				/* Not matched */
    80ee:	2300      	movs	r3, #0
    80f0:	e022      	b.n	8138 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
    80f2:	230c      	movs	r3, #12
    80f4:	18fb      	adds	r3, r7, r3
    80f6:	881b      	ldrh	r3, [r3, #0]
    80f8:	4a13      	ldr	r2, [pc, #76]	; (8148 <cmp_lfn+0x100>)
    80fa:	4293      	cmp	r3, r2
    80fc:	d001      	beq.n	8102 <cmp_lfn+0xba>
    80fe:	2300      	movs	r3, #0
    8100:	e01a      	b.n	8138 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    8102:	693b      	ldr	r3, [r7, #16]
    8104:	3301      	adds	r3, #1
    8106:	613b      	str	r3, [r7, #16]
    8108:	693b      	ldr	r3, [r7, #16]
    810a:	2b0c      	cmp	r3, #12
    810c:	d9b4      	bls.n	8078 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    810e:	683b      	ldr	r3, [r7, #0]
    8110:	781b      	ldrb	r3, [r3, #0]
    8112:	001a      	movs	r2, r3
    8114:	2340      	movs	r3, #64	; 0x40
    8116:	4013      	ands	r3, r2
    8118:	d00d      	beq.n	8136 <cmp_lfn+0xee>
    811a:	230e      	movs	r3, #14
    811c:	18fb      	adds	r3, r7, r3
    811e:	881b      	ldrh	r3, [r3, #0]
    8120:	2b00      	cmp	r3, #0
    8122:	d008      	beq.n	8136 <cmp_lfn+0xee>
    8124:	697b      	ldr	r3, [r7, #20]
    8126:	005b      	lsls	r3, r3, #1
    8128:	687a      	ldr	r2, [r7, #4]
    812a:	18d3      	adds	r3, r2, r3
    812c:	881b      	ldrh	r3, [r3, #0]
    812e:	2b00      	cmp	r3, #0
    8130:	d001      	beq.n	8136 <cmp_lfn+0xee>
		return 0;
    8132:	2300      	movs	r3, #0
    8134:	e000      	b.n	8138 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
    8136:	2301      	movs	r3, #1
}
    8138:	0018      	movs	r0, r3
    813a:	46bd      	mov	sp, r7
    813c:	b007      	add	sp, #28
    813e:	bd90      	pop	{r4, r7, pc}
    8140:	0000cd94 	.word	0x0000cd94
    8144:	0000ac79 	.word	0x0000ac79
    8148:	0000ffff 	.word	0x0000ffff

0000814c <pick_lfn>:
static
int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
	WCHAR *lfnbuf,		/* Pointer to the Unicode-LFN buffer */
	BYTE *dir			/* Pointer to the directory entry */
)
{
    814c:	b580      	push	{r7, lr}
    814e:	b086      	sub	sp, #24
    8150:	af00      	add	r7, sp, #0
    8152:	6078      	str	r0, [r7, #4]
    8154:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
    8156:	683b      	ldr	r3, [r7, #0]
    8158:	781b      	ldrb	r3, [r3, #0]
    815a:	001a      	movs	r2, r3
    815c:	233f      	movs	r3, #63	; 0x3f
    815e:	4013      	ands	r3, r2
    8160:	1e5a      	subs	r2, r3, #1
    8162:	0013      	movs	r3, r2
    8164:	005b      	lsls	r3, r3, #1
    8166:	189b      	adds	r3, r3, r2
    8168:	009b      	lsls	r3, r3, #2
    816a:	189b      	adds	r3, r3, r2
    816c:	617b      	str	r3, [r7, #20]

	s = 0; wc = 1;
    816e:	2300      	movs	r3, #0
    8170:	613b      	str	r3, [r7, #16]
    8172:	230e      	movs	r3, #14
    8174:	18fb      	adds	r3, r7, r3
    8176:	2201      	movs	r2, #1
    8178:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    817a:	4a2b      	ldr	r2, [pc, #172]	; (8228 <pick_lfn+0xdc>)
    817c:	693b      	ldr	r3, [r7, #16]
    817e:	18d3      	adds	r3, r2, r3
    8180:	781b      	ldrb	r3, [r3, #0]
    8182:	3301      	adds	r3, #1
    8184:	683a      	ldr	r2, [r7, #0]
    8186:	18d3      	adds	r3, r2, r3
    8188:	781b      	ldrb	r3, [r3, #0]
    818a:	021b      	lsls	r3, r3, #8
    818c:	b21a      	sxth	r2, r3
    818e:	4926      	ldr	r1, [pc, #152]	; (8228 <pick_lfn+0xdc>)
    8190:	693b      	ldr	r3, [r7, #16]
    8192:	18cb      	adds	r3, r1, r3
    8194:	781b      	ldrb	r3, [r3, #0]
    8196:	0019      	movs	r1, r3
    8198:	683b      	ldr	r3, [r7, #0]
    819a:	185b      	adds	r3, r3, r1
    819c:	781b      	ldrb	r3, [r3, #0]
    819e:	b21b      	sxth	r3, r3
    81a0:	4313      	orrs	r3, r2
    81a2:	b21a      	sxth	r2, r3
    81a4:	230c      	movs	r3, #12
    81a6:	18fb      	adds	r3, r7, r3
    81a8:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
    81aa:	230e      	movs	r3, #14
    81ac:	18fb      	adds	r3, r7, r3
    81ae:	881b      	ldrh	r3, [r3, #0]
    81b0:	2b00      	cmp	r3, #0
    81b2:	d015      	beq.n	81e0 <pick_lfn+0x94>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
    81b4:	697b      	ldr	r3, [r7, #20]
    81b6:	2bfe      	cmp	r3, #254	; 0xfe
    81b8:	d901      	bls.n	81be <pick_lfn+0x72>
    81ba:	2300      	movs	r3, #0
    81bc:	e030      	b.n	8220 <pick_lfn+0xd4>
			lfnbuf[i++] = wc = uc;			/* Store it */
    81be:	697b      	ldr	r3, [r7, #20]
    81c0:	1c5a      	adds	r2, r3, #1
    81c2:	617a      	str	r2, [r7, #20]
    81c4:	005b      	lsls	r3, r3, #1
    81c6:	687a      	ldr	r2, [r7, #4]
    81c8:	18d3      	adds	r3, r2, r3
    81ca:	220e      	movs	r2, #14
    81cc:	18ba      	adds	r2, r7, r2
    81ce:	210c      	movs	r1, #12
    81d0:	1879      	adds	r1, r7, r1
    81d2:	8809      	ldrh	r1, [r1, #0]
    81d4:	8011      	strh	r1, [r2, #0]
    81d6:	220e      	movs	r2, #14
    81d8:	18ba      	adds	r2, r7, r2
    81da:	8812      	ldrh	r2, [r2, #0]
    81dc:	801a      	strh	r2, [r3, #0]
    81de:	e007      	b.n	81f0 <pick_lfn+0xa4>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
    81e0:	230c      	movs	r3, #12
    81e2:	18fb      	adds	r3, r7, r3
    81e4:	881b      	ldrh	r3, [r3, #0]
    81e6:	4a11      	ldr	r2, [pc, #68]	; (822c <pick_lfn+0xe0>)
    81e8:	4293      	cmp	r3, r2
    81ea:	d001      	beq.n	81f0 <pick_lfn+0xa4>
    81ec:	2300      	movs	r3, #0
    81ee:	e017      	b.n	8220 <pick_lfn+0xd4>
		}
	} while (++s < 13);						/* Read all character in the entry */
    81f0:	693b      	ldr	r3, [r7, #16]
    81f2:	3301      	adds	r3, #1
    81f4:	613b      	str	r3, [r7, #16]
    81f6:	693b      	ldr	r3, [r7, #16]
    81f8:	2b0c      	cmp	r3, #12
    81fa:	d9be      	bls.n	817a <pick_lfn+0x2e>

	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
    81fc:	683b      	ldr	r3, [r7, #0]
    81fe:	781b      	ldrb	r3, [r3, #0]
    8200:	001a      	movs	r2, r3
    8202:	2340      	movs	r3, #64	; 0x40
    8204:	4013      	ands	r3, r2
    8206:	d00a      	beq.n	821e <pick_lfn+0xd2>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
    8208:	697b      	ldr	r3, [r7, #20]
    820a:	2bfe      	cmp	r3, #254	; 0xfe
    820c:	d901      	bls.n	8212 <pick_lfn+0xc6>
    820e:	2300      	movs	r3, #0
    8210:	e006      	b.n	8220 <pick_lfn+0xd4>
		lfnbuf[i] = 0;
    8212:	697b      	ldr	r3, [r7, #20]
    8214:	005b      	lsls	r3, r3, #1
    8216:	687a      	ldr	r2, [r7, #4]
    8218:	18d3      	adds	r3, r2, r3
    821a:	2200      	movs	r2, #0
    821c:	801a      	strh	r2, [r3, #0]
	}

	return 1;
    821e:	2301      	movs	r3, #1
}
    8220:	0018      	movs	r0, r3
    8222:	46bd      	mov	sp, r7
    8224:	b006      	add	sp, #24
    8226:	bd80      	pop	{r7, pc}
    8228:	0000cd94 	.word	0x0000cd94
    822c:	0000ffff 	.word	0x0000ffff

00008230 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
    8230:	b580      	push	{r7, lr}
    8232:	b088      	sub	sp, #32
    8234:	af00      	add	r7, sp, #0
    8236:	60f8      	str	r0, [r7, #12]
    8238:	60b9      	str	r1, [r7, #8]
    823a:	0019      	movs	r1, r3
    823c:	1dfb      	adds	r3, r7, #7
    823e:	701a      	strb	r2, [r3, #0]
    8240:	1dbb      	adds	r3, r7, #6
    8242:	1c0a      	adds	r2, r1, #0
    8244:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
    8246:	68bb      	ldr	r3, [r7, #8]
    8248:	330d      	adds	r3, #13
    824a:	1dba      	adds	r2, r7, #6
    824c:	7812      	ldrb	r2, [r2, #0]
    824e:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    8250:	68bb      	ldr	r3, [r7, #8]
    8252:	330b      	adds	r3, #11
    8254:	220f      	movs	r2, #15
    8256:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
    8258:	68bb      	ldr	r3, [r7, #8]
    825a:	330c      	adds	r3, #12
    825c:	2200      	movs	r2, #0
    825e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    8260:	68bb      	ldr	r3, [r7, #8]
    8262:	331a      	adds	r3, #26
    8264:	2200      	movs	r2, #0
    8266:	701a      	strb	r2, [r3, #0]
    8268:	68bb      	ldr	r3, [r7, #8]
    826a:	331b      	adds	r3, #27
    826c:	2200      	movs	r2, #0
    826e:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    8270:	1dfb      	adds	r3, r7, #7
    8272:	781b      	ldrb	r3, [r3, #0]
    8274:	1e5a      	subs	r2, r3, #1
    8276:	0013      	movs	r3, r2
    8278:	005b      	lsls	r3, r3, #1
    827a:	189b      	adds	r3, r3, r2
    827c:	009b      	lsls	r3, r3, #2
    827e:	189b      	adds	r3, r3, r2
    8280:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
    8282:	2316      	movs	r3, #22
    8284:	18fb      	adds	r3, r7, r3
    8286:	2200      	movs	r2, #0
    8288:	801a      	strh	r2, [r3, #0]
    828a:	2300      	movs	r3, #0
    828c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    828e:	2316      	movs	r3, #22
    8290:	18fb      	adds	r3, r7, r3
    8292:	881b      	ldrh	r3, [r3, #0]
    8294:	4a28      	ldr	r2, [pc, #160]	; (8338 <fit_lfn+0x108>)
    8296:	4293      	cmp	r3, r2
    8298:	d009      	beq.n	82ae <fit_lfn+0x7e>
    829a:	69fb      	ldr	r3, [r7, #28]
    829c:	1c5a      	adds	r2, r3, #1
    829e:	61fa      	str	r2, [r7, #28]
    82a0:	005b      	lsls	r3, r3, #1
    82a2:	68fa      	ldr	r2, [r7, #12]
    82a4:	18d2      	adds	r2, r2, r3
    82a6:	2316      	movs	r3, #22
    82a8:	18fb      	adds	r3, r7, r3
    82aa:	8812      	ldrh	r2, [r2, #0]
    82ac:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    82ae:	4a23      	ldr	r2, [pc, #140]	; (833c <fit_lfn+0x10c>)
    82b0:	69bb      	ldr	r3, [r7, #24]
    82b2:	18d3      	adds	r3, r2, r3
    82b4:	781b      	ldrb	r3, [r3, #0]
    82b6:	001a      	movs	r2, r3
    82b8:	68bb      	ldr	r3, [r7, #8]
    82ba:	189b      	adds	r3, r3, r2
    82bc:	2216      	movs	r2, #22
    82be:	18ba      	adds	r2, r7, r2
    82c0:	8812      	ldrh	r2, [r2, #0]
    82c2:	b2d2      	uxtb	r2, r2
    82c4:	701a      	strb	r2, [r3, #0]
    82c6:	4a1d      	ldr	r2, [pc, #116]	; (833c <fit_lfn+0x10c>)
    82c8:	69bb      	ldr	r3, [r7, #24]
    82ca:	18d3      	adds	r3, r2, r3
    82cc:	781b      	ldrb	r3, [r3, #0]
    82ce:	3301      	adds	r3, #1
    82d0:	68ba      	ldr	r2, [r7, #8]
    82d2:	18d3      	adds	r3, r2, r3
    82d4:	2216      	movs	r2, #22
    82d6:	18ba      	adds	r2, r7, r2
    82d8:	8812      	ldrh	r2, [r2, #0]
    82da:	0a12      	lsrs	r2, r2, #8
    82dc:	b292      	uxth	r2, r2
    82de:	b2d2      	uxtb	r2, r2
    82e0:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    82e2:	2316      	movs	r3, #22
    82e4:	18fb      	adds	r3, r7, r3
    82e6:	881b      	ldrh	r3, [r3, #0]
    82e8:	2b00      	cmp	r3, #0
    82ea:	d104      	bne.n	82f6 <fit_lfn+0xc6>
    82ec:	2316      	movs	r3, #22
    82ee:	18fb      	adds	r3, r7, r3
    82f0:	2201      	movs	r2, #1
    82f2:	4252      	negs	r2, r2
    82f4:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
    82f6:	69bb      	ldr	r3, [r7, #24]
    82f8:	3301      	adds	r3, #1
    82fa:	61bb      	str	r3, [r7, #24]
    82fc:	69bb      	ldr	r3, [r7, #24]
    82fe:	2b0c      	cmp	r3, #12
    8300:	d9c5      	bls.n	828e <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    8302:	2316      	movs	r3, #22
    8304:	18fb      	adds	r3, r7, r3
    8306:	881b      	ldrh	r3, [r3, #0]
    8308:	4a0b      	ldr	r2, [pc, #44]	; (8338 <fit_lfn+0x108>)
    830a:	4293      	cmp	r3, r2
    830c:	d006      	beq.n	831c <fit_lfn+0xec>
    830e:	69fb      	ldr	r3, [r7, #28]
    8310:	005b      	lsls	r3, r3, #1
    8312:	68fa      	ldr	r2, [r7, #12]
    8314:	18d3      	adds	r3, r2, r3
    8316:	881b      	ldrh	r3, [r3, #0]
    8318:	2b00      	cmp	r3, #0
    831a:	d105      	bne.n	8328 <fit_lfn+0xf8>
    831c:	1dfb      	adds	r3, r7, #7
    831e:	1dfa      	adds	r2, r7, #7
    8320:	7812      	ldrb	r2, [r2, #0]
    8322:	2140      	movs	r1, #64	; 0x40
    8324:	430a      	orrs	r2, r1
    8326:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    8328:	68bb      	ldr	r3, [r7, #8]
    832a:	1dfa      	adds	r2, r7, #7
    832c:	7812      	ldrb	r2, [r2, #0]
    832e:	701a      	strb	r2, [r3, #0]
}
    8330:	46c0      	nop			; (mov r8, r8)
    8332:	46bd      	mov	sp, r7
    8334:	b008      	add	sp, #32
    8336:	bd80      	pop	{r7, pc}
    8338:	0000ffff 	.word	0x0000ffff
    833c:	0000cd94 	.word	0x0000cd94

00008340 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
    8340:	b580      	push	{r7, lr}
    8342:	b08a      	sub	sp, #40	; 0x28
    8344:	af00      	add	r7, sp, #0
    8346:	60f8      	str	r0, [r7, #12]
    8348:	60b9      	str	r1, [r7, #8]
    834a:	607a      	str	r2, [r7, #4]
    834c:	001a      	movs	r2, r3
    834e:	1cbb      	adds	r3, r7, #2
    8350:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
    8352:	68b9      	ldr	r1, [r7, #8]
    8354:	68fb      	ldr	r3, [r7, #12]
    8356:	220b      	movs	r2, #11
    8358:	0018      	movs	r0, r3
    835a:	4b38      	ldr	r3, [pc, #224]	; (843c <gen_numname+0xfc>)
    835c:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    835e:	1cbb      	adds	r3, r7, #2
    8360:	881b      	ldrh	r3, [r3, #0]
    8362:	2b05      	cmp	r3, #5
    8364:	d911      	bls.n	838a <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    8366:	1cbb      	adds	r3, r7, #2
    8368:	881b      	ldrh	r3, [r3, #0]
    836a:	b29a      	uxth	r2, r3
    836c:	0852      	lsrs	r2, r2, #1
    836e:	03db      	lsls	r3, r3, #15
    8370:	4313      	orrs	r3, r2
    8372:	b299      	uxth	r1, r3
    8374:	687b      	ldr	r3, [r7, #4]
    8376:	1c9a      	adds	r2, r3, #2
    8378:	607a      	str	r2, [r7, #4]
    837a:	881a      	ldrh	r2, [r3, #0]
    837c:	1cbb      	adds	r3, r7, #2
    837e:	188a      	adds	r2, r1, r2
    8380:	801a      	strh	r2, [r3, #0]
    8382:	687b      	ldr	r3, [r7, #4]
    8384:	881b      	ldrh	r3, [r3, #0]
    8386:	2b00      	cmp	r3, #0
    8388:	d1ed      	bne.n	8366 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
    838a:	2307      	movs	r3, #7
    838c:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
    838e:	1cbb      	adds	r3, r7, #2
    8390:	881b      	ldrh	r3, [r3, #0]
    8392:	b2db      	uxtb	r3, r3
    8394:	220f      	movs	r2, #15
    8396:	4013      	ands	r3, r2
    8398:	b2da      	uxtb	r2, r3
    839a:	2327      	movs	r3, #39	; 0x27
    839c:	18fb      	adds	r3, r7, r3
    839e:	3230      	adds	r2, #48	; 0x30
    83a0:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
    83a2:	2327      	movs	r3, #39	; 0x27
    83a4:	18fb      	adds	r3, r7, r3
    83a6:	781b      	ldrb	r3, [r3, #0]
    83a8:	2b39      	cmp	r3, #57	; 0x39
    83aa:	d906      	bls.n	83ba <gen_numname+0x7a>
    83ac:	2327      	movs	r3, #39	; 0x27
    83ae:	18fb      	adds	r3, r7, r3
    83b0:	2227      	movs	r2, #39	; 0x27
    83b2:	18ba      	adds	r2, r7, r2
    83b4:	7812      	ldrb	r2, [r2, #0]
    83b6:	3207      	adds	r2, #7
    83b8:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
    83ba:	6a3b      	ldr	r3, [r7, #32]
    83bc:	1e5a      	subs	r2, r3, #1
    83be:	623a      	str	r2, [r7, #32]
    83c0:	2214      	movs	r2, #20
    83c2:	18ba      	adds	r2, r7, r2
    83c4:	2127      	movs	r1, #39	; 0x27
    83c6:	1879      	adds	r1, r7, r1
    83c8:	7809      	ldrb	r1, [r1, #0]
    83ca:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
    83cc:	1cbb      	adds	r3, r7, #2
    83ce:	1cba      	adds	r2, r7, #2
    83d0:	8812      	ldrh	r2, [r2, #0]
    83d2:	0912      	lsrs	r2, r2, #4
    83d4:	801a      	strh	r2, [r3, #0]
	} while (seq);
    83d6:	1cbb      	adds	r3, r7, #2
    83d8:	881b      	ldrh	r3, [r3, #0]
    83da:	2b00      	cmp	r3, #0
    83dc:	d1d7      	bne.n	838e <gen_numname+0x4e>
	ns[i] = '~';
    83de:	2314      	movs	r3, #20
    83e0:	18fa      	adds	r2, r7, r3
    83e2:	6a3b      	ldr	r3, [r7, #32]
    83e4:	18d3      	adds	r3, r2, r3
    83e6:	227e      	movs	r2, #126	; 0x7e
    83e8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
    83ea:	2300      	movs	r3, #0
    83ec:	61fb      	str	r3, [r7, #28]
    83ee:	e002      	b.n	83f6 <gen_numname+0xb6>
    83f0:	69fb      	ldr	r3, [r7, #28]
    83f2:	3301      	adds	r3, #1
    83f4:	61fb      	str	r3, [r7, #28]
    83f6:	69fa      	ldr	r2, [r7, #28]
    83f8:	6a3b      	ldr	r3, [r7, #32]
    83fa:	429a      	cmp	r2, r3
    83fc:	d205      	bcs.n	840a <gen_numname+0xca>
    83fe:	68fa      	ldr	r2, [r7, #12]
    8400:	69fb      	ldr	r3, [r7, #28]
    8402:	18d3      	adds	r3, r2, r3
    8404:	781b      	ldrb	r3, [r3, #0]
    8406:	2b20      	cmp	r3, #32
    8408:	d1f2      	bne.n	83f0 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    840a:	69fb      	ldr	r3, [r7, #28]
    840c:	1c5a      	adds	r2, r3, #1
    840e:	61fa      	str	r2, [r7, #28]
    8410:	68fa      	ldr	r2, [r7, #12]
    8412:	18d2      	adds	r2, r2, r3
    8414:	6a3b      	ldr	r3, [r7, #32]
    8416:	2b07      	cmp	r3, #7
    8418:	d806      	bhi.n	8428 <gen_numname+0xe8>
    841a:	6a3b      	ldr	r3, [r7, #32]
    841c:	1c59      	adds	r1, r3, #1
    841e:	6239      	str	r1, [r7, #32]
    8420:	2114      	movs	r1, #20
    8422:	1879      	adds	r1, r7, r1
    8424:	5ccb      	ldrb	r3, [r1, r3]
    8426:	e000      	b.n	842a <gen_numname+0xea>
    8428:	2320      	movs	r3, #32
    842a:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
    842c:	69fb      	ldr	r3, [r7, #28]
    842e:	2b07      	cmp	r3, #7
    8430:	d9eb      	bls.n	840a <gen_numname+0xca>
}
    8432:	46c0      	nop			; (mov r8, r8)
    8434:	46bd      	mov	sp, r7
    8436:	b00a      	add	sp, #40	; 0x28
    8438:	bd80      	pop	{r7, pc}
    843a:	46c0      	nop			; (mov r8, r8)
    843c:	00007401 	.word	0x00007401

00008440 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    8440:	b580      	push	{r7, lr}
    8442:	b084      	sub	sp, #16
    8444:	af00      	add	r7, sp, #0
    8446:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
    8448:	230f      	movs	r3, #15
    844a:	18fb      	adds	r3, r7, r3
    844c:	2200      	movs	r2, #0
    844e:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
    8450:	230b      	movs	r3, #11
    8452:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    8454:	230f      	movs	r3, #15
    8456:	18fb      	adds	r3, r7, r3
    8458:	781b      	ldrb	r3, [r3, #0]
    845a:	b2da      	uxtb	r2, r3
    845c:	0852      	lsrs	r2, r2, #1
    845e:	01db      	lsls	r3, r3, #7
    8460:	4313      	orrs	r3, r2
    8462:	b2d9      	uxtb	r1, r3
    8464:	687b      	ldr	r3, [r7, #4]
    8466:	1c5a      	adds	r2, r3, #1
    8468:	607a      	str	r2, [r7, #4]
    846a:	781a      	ldrb	r2, [r3, #0]
    846c:	230f      	movs	r3, #15
    846e:	18fb      	adds	r3, r7, r3
    8470:	188a      	adds	r2, r1, r2
    8472:	701a      	strb	r2, [r3, #0]
    8474:	68bb      	ldr	r3, [r7, #8]
    8476:	3b01      	subs	r3, #1
    8478:	60bb      	str	r3, [r7, #8]
    847a:	68bb      	ldr	r3, [r7, #8]
    847c:	2b00      	cmp	r3, #0
    847e:	d1e9      	bne.n	8454 <sum_sfn+0x14>
	return sum;
    8480:	230f      	movs	r3, #15
    8482:	18fb      	adds	r3, r7, r3
    8484:	781b      	ldrb	r3, [r3, #0]
}
    8486:	0018      	movs	r0, r3
    8488:	46bd      	mov	sp, r7
    848a:	b004      	add	sp, #16
    848c:	bd80      	pop	{r7, pc}
	...

00008490 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
    8490:	b590      	push	{r4, r7, lr}
    8492:	b087      	sub	sp, #28
    8494:	af00      	add	r7, sp, #0
    8496:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    8498:	2317      	movs	r3, #23
    849a:	18fc      	adds	r4, r7, r3
    849c:	687b      	ldr	r3, [r7, #4]
    849e:	2100      	movs	r1, #0
    84a0:	0018      	movs	r0, r3
    84a2:	4b74      	ldr	r3, [pc, #464]	; (8674 <dir_find+0x1e4>)
    84a4:	4798      	blx	r3
    84a6:	0003      	movs	r3, r0
    84a8:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
    84aa:	2317      	movs	r3, #23
    84ac:	18fb      	adds	r3, r7, r3
    84ae:	781b      	ldrb	r3, [r3, #0]
    84b0:	2b00      	cmp	r3, #0
    84b2:	d003      	beq.n	84bc <dir_find+0x2c>
    84b4:	2317      	movs	r3, #23
    84b6:	18fb      	adds	r3, r7, r3
    84b8:	781b      	ldrb	r3, [r3, #0]
    84ba:	e0d6      	b.n	866a <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
    84bc:	2314      	movs	r3, #20
    84be:	18fb      	adds	r3, r7, r3
    84c0:	22ff      	movs	r2, #255	; 0xff
    84c2:	701a      	strb	r2, [r3, #0]
    84c4:	2315      	movs	r3, #21
    84c6:	18fb      	adds	r3, r7, r3
    84c8:	2214      	movs	r2, #20
    84ca:	18ba      	adds	r2, r7, r2
    84cc:	7812      	ldrb	r2, [r2, #0]
    84ce:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    84d0:	687b      	ldr	r3, [r7, #4]
    84d2:	681a      	ldr	r2, [r3, #0]
    84d4:	687b      	ldr	r3, [r7, #4]
    84d6:	691b      	ldr	r3, [r3, #16]
    84d8:	2117      	movs	r1, #23
    84da:	187c      	adds	r4, r7, r1
    84dc:	0019      	movs	r1, r3
    84de:	0010      	movs	r0, r2
    84e0:	4b65      	ldr	r3, [pc, #404]	; (8678 <dir_find+0x1e8>)
    84e2:	4798      	blx	r3
    84e4:	0003      	movs	r3, r0
    84e6:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    84e8:	2317      	movs	r3, #23
    84ea:	18fb      	adds	r3, r7, r3
    84ec:	781b      	ldrb	r3, [r3, #0]
    84ee:	2b00      	cmp	r3, #0
    84f0:	d000      	beq.n	84f4 <dir_find+0x64>
    84f2:	e0b2      	b.n	865a <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    84f4:	687b      	ldr	r3, [r7, #4]
    84f6:	695b      	ldr	r3, [r3, #20]
    84f8:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
    84fa:	2316      	movs	r3, #22
    84fc:	18fb      	adds	r3, r7, r3
    84fe:	693a      	ldr	r2, [r7, #16]
    8500:	7812      	ldrb	r2, [r2, #0]
    8502:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    8504:	2316      	movs	r3, #22
    8506:	18fb      	adds	r3, r7, r3
    8508:	781b      	ldrb	r3, [r3, #0]
    850a:	2b00      	cmp	r3, #0
    850c:	d104      	bne.n	8518 <dir_find+0x88>
    850e:	2317      	movs	r3, #23
    8510:	18fb      	adds	r3, r7, r3
    8512:	2204      	movs	r2, #4
    8514:	701a      	strb	r2, [r3, #0]
    8516:	e0a5      	b.n	8664 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    8518:	693b      	ldr	r3, [r7, #16]
    851a:	330b      	adds	r3, #11
    851c:	781a      	ldrb	r2, [r3, #0]
    851e:	230f      	movs	r3, #15
    8520:	18fb      	adds	r3, r7, r3
    8522:	213f      	movs	r1, #63	; 0x3f
    8524:	400a      	ands	r2, r1
    8526:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    8528:	2316      	movs	r3, #22
    852a:	18fb      	adds	r3, r7, r3
    852c:	781b      	ldrb	r3, [r3, #0]
    852e:	2be5      	cmp	r3, #229	; 0xe5
    8530:	d00a      	beq.n	8548 <dir_find+0xb8>
    8532:	230f      	movs	r3, #15
    8534:	18fb      	adds	r3, r7, r3
    8536:	781b      	ldrb	r3, [r3, #0]
    8538:	2208      	movs	r2, #8
    853a:	4013      	ands	r3, r2
    853c:	d009      	beq.n	8552 <dir_find+0xc2>
    853e:	230f      	movs	r3, #15
    8540:	18fb      	adds	r3, r7, r3
    8542:	781b      	ldrb	r3, [r3, #0]
    8544:	2b0f      	cmp	r3, #15
    8546:	d004      	beq.n	8552 <dir_find+0xc2>
			ord = 0xFF;
    8548:	2315      	movs	r3, #21
    854a:	18fb      	adds	r3, r7, r3
    854c:	22ff      	movs	r2, #255	; 0xff
    854e:	701a      	strb	r2, [r3, #0]
    8550:	e073      	b.n	863a <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
    8552:	230f      	movs	r3, #15
    8554:	18fb      	adds	r3, r7, r3
    8556:	781b      	ldrb	r3, [r3, #0]
    8558:	2b0f      	cmp	r3, #15
    855a:	d145      	bne.n	85e8 <dir_find+0x158>
				if (dj->lfn) {
    855c:	687b      	ldr	r3, [r7, #4]
    855e:	69db      	ldr	r3, [r3, #28]
    8560:	2b00      	cmp	r3, #0
    8562:	d100      	bne.n	8566 <dir_find+0xd6>
    8564:	e069      	b.n	863a <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    8566:	2316      	movs	r3, #22
    8568:	18fb      	adds	r3, r7, r3
    856a:	781b      	ldrb	r3, [r3, #0]
    856c:	2240      	movs	r2, #64	; 0x40
    856e:	4013      	ands	r3, r2
    8570:	d016      	beq.n	85a0 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
    8572:	2314      	movs	r3, #20
    8574:	18fb      	adds	r3, r7, r3
    8576:	693a      	ldr	r2, [r7, #16]
    8578:	7b52      	ldrb	r2, [r2, #13]
    857a:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
    857c:	2316      	movs	r3, #22
    857e:	18fb      	adds	r3, r7, r3
    8580:	2216      	movs	r2, #22
    8582:	18ba      	adds	r2, r7, r2
    8584:	7812      	ldrb	r2, [r2, #0]
    8586:	2140      	movs	r1, #64	; 0x40
    8588:	438a      	bics	r2, r1
    858a:	701a      	strb	r2, [r3, #0]
    858c:	2315      	movs	r3, #21
    858e:	18fb      	adds	r3, r7, r3
    8590:	2216      	movs	r2, #22
    8592:	18ba      	adds	r2, r7, r2
    8594:	7812      	ldrb	r2, [r2, #0]
    8596:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
    8598:	687b      	ldr	r3, [r7, #4]
    859a:	88da      	ldrh	r2, [r3, #6]
    859c:	687b      	ldr	r3, [r7, #4]
    859e:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    85a0:	2316      	movs	r3, #22
    85a2:	18fa      	adds	r2, r7, r3
    85a4:	2315      	movs	r3, #21
    85a6:	18fb      	adds	r3, r7, r3
    85a8:	7812      	ldrb	r2, [r2, #0]
    85aa:	781b      	ldrb	r3, [r3, #0]
    85ac:	429a      	cmp	r2, r3
    85ae:	d116      	bne.n	85de <dir_find+0x14e>
    85b0:	693b      	ldr	r3, [r7, #16]
    85b2:	330d      	adds	r3, #13
    85b4:	781b      	ldrb	r3, [r3, #0]
    85b6:	2214      	movs	r2, #20
    85b8:	18ba      	adds	r2, r7, r2
    85ba:	7812      	ldrb	r2, [r2, #0]
    85bc:	429a      	cmp	r2, r3
    85be:	d10e      	bne.n	85de <dir_find+0x14e>
    85c0:	687b      	ldr	r3, [r7, #4]
    85c2:	69db      	ldr	r3, [r3, #28]
    85c4:	693a      	ldr	r2, [r7, #16]
    85c6:	0011      	movs	r1, r2
    85c8:	0018      	movs	r0, r3
    85ca:	4b2c      	ldr	r3, [pc, #176]	; (867c <dir_find+0x1ec>)
    85cc:	4798      	blx	r3
    85ce:	1e03      	subs	r3, r0, #0
    85d0:	d005      	beq.n	85de <dir_find+0x14e>
    85d2:	2315      	movs	r3, #21
    85d4:	18fb      	adds	r3, r7, r3
    85d6:	781b      	ldrb	r3, [r3, #0]
    85d8:	3b01      	subs	r3, #1
    85da:	b2da      	uxtb	r2, r3
    85dc:	e000      	b.n	85e0 <dir_find+0x150>
    85de:	22ff      	movs	r2, #255	; 0xff
    85e0:	2315      	movs	r3, #21
    85e2:	18fb      	adds	r3, r7, r3
    85e4:	701a      	strb	r2, [r3, #0]
    85e6:	e028      	b.n	863a <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    85e8:	2315      	movs	r3, #21
    85ea:	18fb      	adds	r3, r7, r3
    85ec:	781b      	ldrb	r3, [r3, #0]
    85ee:	2b00      	cmp	r3, #0
    85f0:	d10a      	bne.n	8608 <dir_find+0x178>
    85f2:	693b      	ldr	r3, [r7, #16]
    85f4:	0018      	movs	r0, r3
    85f6:	4b22      	ldr	r3, [pc, #136]	; (8680 <dir_find+0x1f0>)
    85f8:	4798      	blx	r3
    85fa:	0003      	movs	r3, r0
    85fc:	001a      	movs	r2, r3
    85fe:	2314      	movs	r3, #20
    8600:	18fb      	adds	r3, r7, r3
    8602:	781b      	ldrb	r3, [r3, #0]
    8604:	4293      	cmp	r3, r2
    8606:	d02a      	beq.n	865e <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    8608:	2315      	movs	r3, #21
    860a:	18fb      	adds	r3, r7, r3
    860c:	22ff      	movs	r2, #255	; 0xff
    860e:	701a      	strb	r2, [r3, #0]
    8610:	687b      	ldr	r3, [r7, #4]
    8612:	2201      	movs	r2, #1
    8614:	4252      	negs	r2, r2
    8616:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    8618:	687b      	ldr	r3, [r7, #4]
    861a:	699b      	ldr	r3, [r3, #24]
    861c:	330b      	adds	r3, #11
    861e:	781b      	ldrb	r3, [r3, #0]
    8620:	001a      	movs	r2, r3
    8622:	2301      	movs	r3, #1
    8624:	4013      	ands	r3, r2
    8626:	d108      	bne.n	863a <dir_find+0x1aa>
    8628:	687b      	ldr	r3, [r7, #4]
    862a:	6999      	ldr	r1, [r3, #24]
    862c:	693b      	ldr	r3, [r7, #16]
    862e:	220b      	movs	r2, #11
    8630:	0018      	movs	r0, r3
    8632:	4b14      	ldr	r3, [pc, #80]	; (8684 <dir_find+0x1f4>)
    8634:	4798      	blx	r3
    8636:	1e03      	subs	r3, r0, #0
    8638:	d013      	beq.n	8662 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    863a:	2317      	movs	r3, #23
    863c:	18fc      	adds	r4, r7, r3
    863e:	687b      	ldr	r3, [r7, #4]
    8640:	2100      	movs	r1, #0
    8642:	0018      	movs	r0, r3
    8644:	4b10      	ldr	r3, [pc, #64]	; (8688 <dir_find+0x1f8>)
    8646:	4798      	blx	r3
    8648:	0003      	movs	r3, r0
    864a:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
    864c:	2317      	movs	r3, #23
    864e:	18fb      	adds	r3, r7, r3
    8650:	781b      	ldrb	r3, [r3, #0]
    8652:	2b00      	cmp	r3, #0
    8654:	d100      	bne.n	8658 <dir_find+0x1c8>
    8656:	e73b      	b.n	84d0 <dir_find+0x40>
    8658:	e004      	b.n	8664 <dir_find+0x1d4>
		if (res != FR_OK) break;
    865a:	46c0      	nop			; (mov r8, r8)
    865c:	e002      	b.n	8664 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    865e:	46c0      	nop			; (mov r8, r8)
    8660:	e000      	b.n	8664 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    8662:	46c0      	nop			; (mov r8, r8)

	return res;
    8664:	2317      	movs	r3, #23
    8666:	18fb      	adds	r3, r7, r3
    8668:	781b      	ldrb	r3, [r3, #0]
}
    866a:	0018      	movs	r0, r3
    866c:	46bd      	mov	sp, r7
    866e:	b007      	add	sp, #28
    8670:	bd90      	pop	{r4, r7, pc}
    8672:	46c0      	nop			; (mov r8, r8)
    8674:	00007d29 	.word	0x00007d29
    8678:	000074e5 	.word	0x000074e5
    867c:	00008049 	.word	0x00008049
    8680:	00008441 	.word	0x00008441
    8684:	00007469 	.word	0x00007469
    8688:	00007e59 	.word	0x00007e59

0000868c <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    868c:	b590      	push	{r4, r7, lr}
    868e:	b087      	sub	sp, #28
    8690:	af00      	add	r7, sp, #0
    8692:	6078      	str	r0, [r7, #4]
	FRESULT res;
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
    8694:	2315      	movs	r3, #21
    8696:	18fb      	adds	r3, r7, r3
    8698:	22ff      	movs	r2, #255	; 0xff
    869a:	701a      	strb	r2, [r3, #0]
    869c:	2314      	movs	r3, #20
    869e:	18fb      	adds	r3, r7, r3
    86a0:	22ff      	movs	r2, #255	; 0xff
    86a2:	701a      	strb	r2, [r3, #0]
#endif

	res = FR_NO_FILE;
    86a4:	2317      	movs	r3, #23
    86a6:	18fb      	adds	r3, r7, r3
    86a8:	2204      	movs	r2, #4
    86aa:	701a      	strb	r2, [r3, #0]
	while (dj->sect) {
    86ac:	e0ae      	b.n	880c <dir_read+0x180>
		res = move_window(dj->fs, dj->sect);
    86ae:	687b      	ldr	r3, [r7, #4]
    86b0:	681a      	ldr	r2, [r3, #0]
    86b2:	687b      	ldr	r3, [r7, #4]
    86b4:	691b      	ldr	r3, [r3, #16]
    86b6:	2117      	movs	r1, #23
    86b8:	187c      	adds	r4, r7, r1
    86ba:	0019      	movs	r1, r3
    86bc:	0010      	movs	r0, r2
    86be:	4b60      	ldr	r3, [pc, #384]	; (8840 <dir_read+0x1b4>)
    86c0:	4798      	blx	r3
    86c2:	0003      	movs	r3, r0
    86c4:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    86c6:	2317      	movs	r3, #23
    86c8:	18fb      	adds	r3, r7, r3
    86ca:	781b      	ldrb	r3, [r3, #0]
    86cc:	2b00      	cmp	r3, #0
    86ce:	d000      	beq.n	86d2 <dir_read+0x46>
    86d0:	e0a2      	b.n	8818 <dir_read+0x18c>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    86d2:	687b      	ldr	r3, [r7, #4]
    86d4:	695b      	ldr	r3, [r3, #20]
    86d6:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
    86d8:	2316      	movs	r3, #22
    86da:	18fb      	adds	r3, r7, r3
    86dc:	693a      	ldr	r2, [r7, #16]
    86de:	7812      	ldrb	r2, [r2, #0]
    86e0:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    86e2:	2316      	movs	r3, #22
    86e4:	18fb      	adds	r3, r7, r3
    86e6:	781b      	ldrb	r3, [r3, #0]
    86e8:	2b00      	cmp	r3, #0
    86ea:	d104      	bne.n	86f6 <dir_read+0x6a>
    86ec:	2317      	movs	r3, #23
    86ee:	18fb      	adds	r3, r7, r3
    86f0:	2204      	movs	r2, #4
    86f2:	701a      	strb	r2, [r3, #0]
    86f4:	e095      	b.n	8822 <dir_read+0x196>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    86f6:	693b      	ldr	r3, [r7, #16]
    86f8:	330b      	adds	r3, #11
    86fa:	781a      	ldrb	r2, [r3, #0]
    86fc:	230f      	movs	r3, #15
    86fe:	18fb      	adds	r3, r7, r3
    8700:	213f      	movs	r1, #63	; 0x3f
    8702:	400a      	ands	r2, r1
    8704:	701a      	strb	r2, [r3, #0]
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    8706:	2316      	movs	r3, #22
    8708:	18fb      	adds	r3, r7, r3
    870a:	781b      	ldrb	r3, [r3, #0]
    870c:	2be5      	cmp	r3, #229	; 0xe5
    870e:	d00f      	beq.n	8730 <dir_read+0xa4>
    8710:	2316      	movs	r3, #22
    8712:	18fb      	adds	r3, r7, r3
    8714:	781b      	ldrb	r3, [r3, #0]
    8716:	2b2e      	cmp	r3, #46	; 0x2e
    8718:	d00a      	beq.n	8730 <dir_read+0xa4>
    871a:	230f      	movs	r3, #15
    871c:	18fb      	adds	r3, r7, r3
    871e:	781b      	ldrb	r3, [r3, #0]
    8720:	2208      	movs	r2, #8
    8722:	4013      	ands	r3, r2
    8724:	d009      	beq.n	873a <dir_read+0xae>
    8726:	230f      	movs	r3, #15
    8728:	18fb      	adds	r3, r7, r3
    872a:	781b      	ldrb	r3, [r3, #0]
    872c:	2b0f      	cmp	r3, #15
    872e:	d004      	beq.n	873a <dir_read+0xae>
			ord = 0xFF;
    8730:	2315      	movs	r3, #21
    8732:	18fb      	adds	r3, r7, r3
    8734:	22ff      	movs	r2, #255	; 0xff
    8736:	701a      	strb	r2, [r3, #0]
    8738:	e05a      	b.n	87f0 <dir_read+0x164>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
    873a:	230f      	movs	r3, #15
    873c:	18fb      	adds	r3, r7, r3
    873e:	781b      	ldrb	r3, [r3, #0]
    8740:	2b0f      	cmp	r3, #15
    8742:	d140      	bne.n	87c6 <dir_read+0x13a>
				if (c & LLE) {			/* Is it start of LFN sequence? */
    8744:	2316      	movs	r3, #22
    8746:	18fb      	adds	r3, r7, r3
    8748:	781b      	ldrb	r3, [r3, #0]
    874a:	2240      	movs	r2, #64	; 0x40
    874c:	4013      	ands	r3, r2
    874e:	d016      	beq.n	877e <dir_read+0xf2>
					sum = dir[LDIR_Chksum];
    8750:	2314      	movs	r3, #20
    8752:	18fb      	adds	r3, r7, r3
    8754:	693a      	ldr	r2, [r7, #16]
    8756:	7b52      	ldrb	r2, [r2, #13]
    8758:	701a      	strb	r2, [r3, #0]
					c &= ~LLE; ord = c;
    875a:	2316      	movs	r3, #22
    875c:	18fb      	adds	r3, r7, r3
    875e:	2216      	movs	r2, #22
    8760:	18ba      	adds	r2, r7, r2
    8762:	7812      	ldrb	r2, [r2, #0]
    8764:	2140      	movs	r1, #64	; 0x40
    8766:	438a      	bics	r2, r1
    8768:	701a      	strb	r2, [r3, #0]
    876a:	2315      	movs	r3, #21
    876c:	18fb      	adds	r3, r7, r3
    876e:	2216      	movs	r2, #22
    8770:	18ba      	adds	r2, r7, r2
    8772:	7812      	ldrb	r2, [r2, #0]
    8774:	701a      	strb	r2, [r3, #0]
					dj->lfn_idx = dj->index;
    8776:	687b      	ldr	r3, [r7, #4]
    8778:	88da      	ldrh	r2, [r3, #6]
    877a:	687b      	ldr	r3, [r7, #4]
    877c:	841a      	strh	r2, [r3, #32]
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    877e:	2316      	movs	r3, #22
    8780:	18fa      	adds	r2, r7, r3
    8782:	2315      	movs	r3, #21
    8784:	18fb      	adds	r3, r7, r3
    8786:	7812      	ldrb	r2, [r2, #0]
    8788:	781b      	ldrb	r3, [r3, #0]
    878a:	429a      	cmp	r2, r3
    878c:	d116      	bne.n	87bc <dir_read+0x130>
    878e:	693b      	ldr	r3, [r7, #16]
    8790:	330d      	adds	r3, #13
    8792:	781b      	ldrb	r3, [r3, #0]
    8794:	2214      	movs	r2, #20
    8796:	18ba      	adds	r2, r7, r2
    8798:	7812      	ldrb	r2, [r2, #0]
    879a:	429a      	cmp	r2, r3
    879c:	d10e      	bne.n	87bc <dir_read+0x130>
    879e:	687b      	ldr	r3, [r7, #4]
    87a0:	69db      	ldr	r3, [r3, #28]
    87a2:	693a      	ldr	r2, [r7, #16]
    87a4:	0011      	movs	r1, r2
    87a6:	0018      	movs	r0, r3
    87a8:	4b26      	ldr	r3, [pc, #152]	; (8844 <dir_read+0x1b8>)
    87aa:	4798      	blx	r3
    87ac:	1e03      	subs	r3, r0, #0
    87ae:	d005      	beq.n	87bc <dir_read+0x130>
    87b0:	2315      	movs	r3, #21
    87b2:	18fb      	adds	r3, r7, r3
    87b4:	781b      	ldrb	r3, [r3, #0]
    87b6:	3b01      	subs	r3, #1
    87b8:	b2da      	uxtb	r2, r3
    87ba:	e000      	b.n	87be <dir_read+0x132>
    87bc:	22ff      	movs	r2, #255	; 0xff
    87be:	2315      	movs	r3, #21
    87c0:	18fb      	adds	r3, r7, r3
    87c2:	701a      	strb	r2, [r3, #0]
    87c4:	e014      	b.n	87f0 <dir_read+0x164>
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
    87c6:	2315      	movs	r3, #21
    87c8:	18fb      	adds	r3, r7, r3
    87ca:	781b      	ldrb	r3, [r3, #0]
    87cc:	2b00      	cmp	r3, #0
    87ce:	d10a      	bne.n	87e6 <dir_read+0x15a>
    87d0:	693b      	ldr	r3, [r7, #16]
    87d2:	0018      	movs	r0, r3
    87d4:	4b1c      	ldr	r3, [pc, #112]	; (8848 <dir_read+0x1bc>)
    87d6:	4798      	blx	r3
    87d8:	0003      	movs	r3, r0
    87da:	001a      	movs	r2, r3
    87dc:	2314      	movs	r3, #20
    87de:	18fb      	adds	r3, r7, r3
    87e0:	781b      	ldrb	r3, [r3, #0]
    87e2:	4293      	cmp	r3, r2
    87e4:	d01a      	beq.n	881c <dir_read+0x190>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
    87e6:	687b      	ldr	r3, [r7, #4]
    87e8:	2201      	movs	r2, #1
    87ea:	4252      	negs	r2, r2
    87ec:	841a      	strh	r2, [r3, #32]
				break;
    87ee:	e015      	b.n	881c <dir_read+0x190>
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
    87f0:	2317      	movs	r3, #23
    87f2:	18fc      	adds	r4, r7, r3
    87f4:	687b      	ldr	r3, [r7, #4]
    87f6:	2100      	movs	r1, #0
    87f8:	0018      	movs	r0, r3
    87fa:	4b14      	ldr	r3, [pc, #80]	; (884c <dir_read+0x1c0>)
    87fc:	4798      	blx	r3
    87fe:	0003      	movs	r3, r0
    8800:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    8802:	2317      	movs	r3, #23
    8804:	18fb      	adds	r3, r7, r3
    8806:	781b      	ldrb	r3, [r3, #0]
    8808:	2b00      	cmp	r3, #0
    880a:	d109      	bne.n	8820 <dir_read+0x194>
	while (dj->sect) {
    880c:	687b      	ldr	r3, [r7, #4]
    880e:	691b      	ldr	r3, [r3, #16]
    8810:	2b00      	cmp	r3, #0
    8812:	d000      	beq.n	8816 <dir_read+0x18a>
    8814:	e74b      	b.n	86ae <dir_read+0x22>
    8816:	e004      	b.n	8822 <dir_read+0x196>
		if (res != FR_OK) break;
    8818:	46c0      	nop			; (mov r8, r8)
    881a:	e002      	b.n	8822 <dir_read+0x196>
				break;
    881c:	46c0      	nop			; (mov r8, r8)
    881e:	e000      	b.n	8822 <dir_read+0x196>
		if (res != FR_OK) break;
    8820:	46c0      	nop			; (mov r8, r8)
	}

	if (res != FR_OK) dj->sect = 0;
    8822:	2317      	movs	r3, #23
    8824:	18fb      	adds	r3, r7, r3
    8826:	781b      	ldrb	r3, [r3, #0]
    8828:	2b00      	cmp	r3, #0
    882a:	d002      	beq.n	8832 <dir_read+0x1a6>
    882c:	687b      	ldr	r3, [r7, #4]
    882e:	2200      	movs	r2, #0
    8830:	611a      	str	r2, [r3, #16]

	return res;
    8832:	2317      	movs	r3, #23
    8834:	18fb      	adds	r3, r7, r3
    8836:	781b      	ldrb	r3, [r3, #0]
}
    8838:	0018      	movs	r0, r3
    883a:	46bd      	mov	sp, r7
    883c:	b007      	add	sp, #28
    883e:	bd90      	pop	{r4, r7, pc}
    8840:	000074e5 	.word	0x000074e5
    8844:	0000814d 	.word	0x0000814d
    8848:	00008441 	.word	0x00008441
    884c:	00007e59 	.word	0x00007e59

00008850 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    8850:	b590      	push	{r4, r7, lr}
    8852:	b08d      	sub	sp, #52	; 0x34
    8854:	af00      	add	r7, sp, #0
    8856:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
    8858:	687b      	ldr	r3, [r7, #4]
    885a:	699b      	ldr	r3, [r3, #24]
    885c:	627b      	str	r3, [r7, #36]	; 0x24
    885e:	687b      	ldr	r3, [r7, #4]
    8860:	69db      	ldr	r3, [r3, #28]
    8862:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
    8864:	6a79      	ldr	r1, [r7, #36]	; 0x24
    8866:	230c      	movs	r3, #12
    8868:	18fb      	adds	r3, r7, r3
    886a:	220c      	movs	r2, #12
    886c:	0018      	movs	r0, r3
    886e:	4bc8      	ldr	r3, [pc, #800]	; (8b90 <dir_register+0x340>)
    8870:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    8872:	230c      	movs	r3, #12
    8874:	18fb      	adds	r3, r7, r3
    8876:	7adb      	ldrb	r3, [r3, #11]
    8878:	001a      	movs	r2, r3
    887a:	2301      	movs	r3, #1
    887c:	4013      	ands	r3, r2
    887e:	d048      	beq.n	8912 <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    8880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8882:	330b      	adds	r3, #11
    8884:	2200      	movs	r2, #0
    8886:	701a      	strb	r2, [r3, #0]
    8888:	687b      	ldr	r3, [r7, #4]
    888a:	2200      	movs	r2, #0
    888c:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
    888e:	232c      	movs	r3, #44	; 0x2c
    8890:	18fb      	adds	r3, r7, r3
    8892:	2201      	movs	r2, #1
    8894:	801a      	strh	r2, [r3, #0]
    8896:	e01c      	b.n	88d2 <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
    8898:	232c      	movs	r3, #44	; 0x2c
    889a:	18fb      	adds	r3, r7, r3
    889c:	881b      	ldrh	r3, [r3, #0]
    889e:	6a3a      	ldr	r2, [r7, #32]
    88a0:	210c      	movs	r1, #12
    88a2:	1879      	adds	r1, r7, r1
    88a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
    88a6:	4cbb      	ldr	r4, [pc, #748]	; (8b94 <dir_register+0x344>)
    88a8:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    88aa:	232f      	movs	r3, #47	; 0x2f
    88ac:	18fc      	adds	r4, r7, r3
    88ae:	687b      	ldr	r3, [r7, #4]
    88b0:	0018      	movs	r0, r3
    88b2:	4bb9      	ldr	r3, [pc, #740]	; (8b98 <dir_register+0x348>)
    88b4:	4798      	blx	r3
    88b6:	0003      	movs	r3, r0
    88b8:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    88ba:	232f      	movs	r3, #47	; 0x2f
    88bc:	18fb      	adds	r3, r7, r3
    88be:	781b      	ldrb	r3, [r3, #0]
    88c0:	2b00      	cmp	r3, #0
    88c2:	d10c      	bne.n	88de <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
    88c4:	232c      	movs	r3, #44	; 0x2c
    88c6:	18fb      	adds	r3, r7, r3
    88c8:	881a      	ldrh	r2, [r3, #0]
    88ca:	232c      	movs	r3, #44	; 0x2c
    88cc:	18fb      	adds	r3, r7, r3
    88ce:	3201      	adds	r2, #1
    88d0:	801a      	strh	r2, [r3, #0]
    88d2:	232c      	movs	r3, #44	; 0x2c
    88d4:	18fb      	adds	r3, r7, r3
    88d6:	881b      	ldrh	r3, [r3, #0]
    88d8:	2b63      	cmp	r3, #99	; 0x63
    88da:	d9dd      	bls.n	8898 <dir_register+0x48>
    88dc:	e000      	b.n	88e0 <dir_register+0x90>
			if (res != FR_OK) break;
    88de:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    88e0:	232c      	movs	r3, #44	; 0x2c
    88e2:	18fb      	adds	r3, r7, r3
    88e4:	881b      	ldrh	r3, [r3, #0]
    88e6:	2b64      	cmp	r3, #100	; 0x64
    88e8:	d101      	bne.n	88ee <dir_register+0x9e>
    88ea:	2307      	movs	r3, #7
    88ec:	e14c      	b.n	8b88 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    88ee:	232f      	movs	r3, #47	; 0x2f
    88f0:	18fb      	adds	r3, r7, r3
    88f2:	781b      	ldrb	r3, [r3, #0]
    88f4:	2b04      	cmp	r3, #4
    88f6:	d003      	beq.n	8900 <dir_register+0xb0>
    88f8:	232f      	movs	r3, #47	; 0x2f
    88fa:	18fb      	adds	r3, r7, r3
    88fc:	781b      	ldrb	r3, [r3, #0]
    88fe:	e143      	b.n	8b88 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
    8900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8902:	330b      	adds	r3, #11
    8904:	220c      	movs	r2, #12
    8906:	18ba      	adds	r2, r7, r2
    8908:	7ad2      	ldrb	r2, [r2, #11]
    890a:	701a      	strb	r2, [r3, #0]
    890c:	687b      	ldr	r3, [r7, #4]
    890e:	6a3a      	ldr	r2, [r7, #32]
    8910:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    8912:	230c      	movs	r3, #12
    8914:	18fb      	adds	r3, r7, r3
    8916:	7adb      	ldrb	r3, [r3, #11]
    8918:	001a      	movs	r2, r3
    891a:	2302      	movs	r3, #2
    891c:	4013      	ands	r3, r2
    891e:	d023      	beq.n	8968 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
    8920:	232a      	movs	r3, #42	; 0x2a
    8922:	18fb      	adds	r3, r7, r3
    8924:	2200      	movs	r2, #0
    8926:	801a      	strh	r2, [r3, #0]
    8928:	e006      	b.n	8938 <dir_register+0xe8>
    892a:	232a      	movs	r3, #42	; 0x2a
    892c:	18fb      	adds	r3, r7, r3
    892e:	881a      	ldrh	r2, [r3, #0]
    8930:	232a      	movs	r3, #42	; 0x2a
    8932:	18fb      	adds	r3, r7, r3
    8934:	3201      	adds	r2, #1
    8936:	801a      	strh	r2, [r3, #0]
    8938:	232a      	movs	r3, #42	; 0x2a
    893a:	18fb      	adds	r3, r7, r3
    893c:	881b      	ldrh	r3, [r3, #0]
    893e:	005b      	lsls	r3, r3, #1
    8940:	6a3a      	ldr	r2, [r7, #32]
    8942:	18d3      	adds	r3, r2, r3
    8944:	881b      	ldrh	r3, [r3, #0]
    8946:	2b00      	cmp	r3, #0
    8948:	d1ef      	bne.n	892a <dir_register+0xda>
		ne = (ne + 25) / 13;
    894a:	232a      	movs	r3, #42	; 0x2a
    894c:	18fb      	adds	r3, r7, r3
    894e:	881b      	ldrh	r3, [r3, #0]
    8950:	3319      	adds	r3, #25
    8952:	001a      	movs	r2, r3
    8954:	4b91      	ldr	r3, [pc, #580]	; (8b9c <dir_register+0x34c>)
    8956:	210d      	movs	r1, #13
    8958:	0010      	movs	r0, r2
    895a:	4798      	blx	r3
    895c:	0003      	movs	r3, r0
    895e:	001a      	movs	r2, r3
    8960:	232a      	movs	r3, #42	; 0x2a
    8962:	18fb      	adds	r3, r7, r3
    8964:	801a      	strh	r2, [r3, #0]
    8966:	e003      	b.n	8970 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
    8968:	232a      	movs	r3, #42	; 0x2a
    896a:	18fb      	adds	r3, r7, r3
    896c:	2201      	movs	r2, #1
    896e:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
    8970:	232f      	movs	r3, #47	; 0x2f
    8972:	18fc      	adds	r4, r7, r3
    8974:	687b      	ldr	r3, [r7, #4]
    8976:	2100      	movs	r1, #0
    8978:	0018      	movs	r0, r3
    897a:	4b89      	ldr	r3, [pc, #548]	; (8ba0 <dir_register+0x350>)
    897c:	4798      	blx	r3
    897e:	0003      	movs	r3, r0
    8980:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
    8982:	232f      	movs	r3, #47	; 0x2f
    8984:	18fb      	adds	r3, r7, r3
    8986:	781b      	ldrb	r3, [r3, #0]
    8988:	2b00      	cmp	r3, #0
    898a:	d003      	beq.n	8994 <dir_register+0x144>
    898c:	232f      	movs	r3, #47	; 0x2f
    898e:	18fb      	adds	r3, r7, r3
    8990:	781b      	ldrb	r3, [r3, #0]
    8992:	e0f9      	b.n	8b88 <dir_register+0x338>
	n = is = 0;
    8994:	2328      	movs	r3, #40	; 0x28
    8996:	18fb      	adds	r3, r7, r3
    8998:	2200      	movs	r2, #0
    899a:	801a      	strh	r2, [r3, #0]
    899c:	232c      	movs	r3, #44	; 0x2c
    899e:	18fb      	adds	r3, r7, r3
    89a0:	2228      	movs	r2, #40	; 0x28
    89a2:	18ba      	adds	r2, r7, r2
    89a4:	8812      	ldrh	r2, [r2, #0]
    89a6:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
    89a8:	687b      	ldr	r3, [r7, #4]
    89aa:	681a      	ldr	r2, [r3, #0]
    89ac:	687b      	ldr	r3, [r7, #4]
    89ae:	691b      	ldr	r3, [r3, #16]
    89b0:	212f      	movs	r1, #47	; 0x2f
    89b2:	187c      	adds	r4, r7, r1
    89b4:	0019      	movs	r1, r3
    89b6:	0010      	movs	r0, r2
    89b8:	4b7a      	ldr	r3, [pc, #488]	; (8ba4 <dir_register+0x354>)
    89ba:	4798      	blx	r3
    89bc:	0003      	movs	r3, r0
    89be:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    89c0:	232f      	movs	r3, #47	; 0x2f
    89c2:	18fb      	adds	r3, r7, r3
    89c4:	781b      	ldrb	r3, [r3, #0]
    89c6:	2b00      	cmp	r3, #0
    89c8:	d13c      	bne.n	8a44 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
    89ca:	687b      	ldr	r3, [r7, #4]
    89cc:	695a      	ldr	r2, [r3, #20]
    89ce:	231f      	movs	r3, #31
    89d0:	18fb      	adds	r3, r7, r3
    89d2:	7812      	ldrb	r2, [r2, #0]
    89d4:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    89d6:	231f      	movs	r3, #31
    89d8:	18fb      	adds	r3, r7, r3
    89da:	781b      	ldrb	r3, [r3, #0]
    89dc:	2be5      	cmp	r3, #229	; 0xe5
    89de:	d004      	beq.n	89ea <dir_register+0x19a>
    89e0:	231f      	movs	r3, #31
    89e2:	18fb      	adds	r3, r7, r3
    89e4:	781b      	ldrb	r3, [r3, #0]
    89e6:	2b00      	cmp	r3, #0
    89e8:	d119      	bne.n	8a1e <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    89ea:	232c      	movs	r3, #44	; 0x2c
    89ec:	18fb      	adds	r3, r7, r3
    89ee:	881b      	ldrh	r3, [r3, #0]
    89f0:	2b00      	cmp	r3, #0
    89f2:	d104      	bne.n	89fe <dir_register+0x1ae>
    89f4:	2328      	movs	r3, #40	; 0x28
    89f6:	18fb      	adds	r3, r7, r3
    89f8:	687a      	ldr	r2, [r7, #4]
    89fa:	88d2      	ldrh	r2, [r2, #6]
    89fc:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    89fe:	232c      	movs	r3, #44	; 0x2c
    8a00:	18fb      	adds	r3, r7, r3
    8a02:	222c      	movs	r2, #44	; 0x2c
    8a04:	18ba      	adds	r2, r7, r2
    8a06:	8812      	ldrh	r2, [r2, #0]
    8a08:	3201      	adds	r2, #1
    8a0a:	801a      	strh	r2, [r3, #0]
    8a0c:	232c      	movs	r3, #44	; 0x2c
    8a0e:	18fa      	adds	r2, r7, r3
    8a10:	232a      	movs	r3, #42	; 0x2a
    8a12:	18fb      	adds	r3, r7, r3
    8a14:	8812      	ldrh	r2, [r2, #0]
    8a16:	881b      	ldrh	r3, [r3, #0]
    8a18:	429a      	cmp	r2, r3
    8a1a:	d104      	bne.n	8a26 <dir_register+0x1d6>
    8a1c:	e013      	b.n	8a46 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
    8a1e:	232c      	movs	r3, #44	; 0x2c
    8a20:	18fb      	adds	r3, r7, r3
    8a22:	2200      	movs	r2, #0
    8a24:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    8a26:	232f      	movs	r3, #47	; 0x2f
    8a28:	18fc      	adds	r4, r7, r3
    8a2a:	687b      	ldr	r3, [r7, #4]
    8a2c:	2101      	movs	r1, #1
    8a2e:	0018      	movs	r0, r3
    8a30:	4b5d      	ldr	r3, [pc, #372]	; (8ba8 <dir_register+0x358>)
    8a32:	4798      	blx	r3
    8a34:	0003      	movs	r3, r0
    8a36:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
    8a38:	232f      	movs	r3, #47	; 0x2f
    8a3a:	18fb      	adds	r3, r7, r3
    8a3c:	781b      	ldrb	r3, [r3, #0]
    8a3e:	2b00      	cmp	r3, #0
    8a40:	d0b2      	beq.n	89a8 <dir_register+0x158>
    8a42:	e000      	b.n	8a46 <dir_register+0x1f6>
		if (res != FR_OK) break;
    8a44:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    8a46:	232f      	movs	r3, #47	; 0x2f
    8a48:	18fb      	adds	r3, r7, r3
    8a4a:	781b      	ldrb	r3, [r3, #0]
    8a4c:	2b00      	cmp	r3, #0
    8a4e:	d163      	bne.n	8b18 <dir_register+0x2c8>
    8a50:	232a      	movs	r3, #42	; 0x2a
    8a52:	18fb      	adds	r3, r7, r3
    8a54:	881b      	ldrh	r3, [r3, #0]
    8a56:	2b01      	cmp	r3, #1
    8a58:	d95e      	bls.n	8b18 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
    8a5a:	232f      	movs	r3, #47	; 0x2f
    8a5c:	18fc      	adds	r4, r7, r3
    8a5e:	2328      	movs	r3, #40	; 0x28
    8a60:	18fb      	adds	r3, r7, r3
    8a62:	881a      	ldrh	r2, [r3, #0]
    8a64:	687b      	ldr	r3, [r7, #4]
    8a66:	0011      	movs	r1, r2
    8a68:	0018      	movs	r0, r3
    8a6a:	4b4d      	ldr	r3, [pc, #308]	; (8ba0 <dir_register+0x350>)
    8a6c:	4798      	blx	r3
    8a6e:	0003      	movs	r3, r0
    8a70:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    8a72:	232f      	movs	r3, #47	; 0x2f
    8a74:	18fb      	adds	r3, r7, r3
    8a76:	781b      	ldrb	r3, [r3, #0]
    8a78:	2b00      	cmp	r3, #0
    8a7a:	d14d      	bne.n	8b18 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    8a7c:	687b      	ldr	r3, [r7, #4]
    8a7e:	699b      	ldr	r3, [r3, #24]
    8a80:	221e      	movs	r2, #30
    8a82:	18bc      	adds	r4, r7, r2
    8a84:	0018      	movs	r0, r3
    8a86:	4b49      	ldr	r3, [pc, #292]	; (8bac <dir_register+0x35c>)
    8a88:	4798      	blx	r3
    8a8a:	0003      	movs	r3, r0
    8a8c:	7023      	strb	r3, [r4, #0]
			ne--;
    8a8e:	232a      	movs	r3, #42	; 0x2a
    8a90:	18fb      	adds	r3, r7, r3
    8a92:	881a      	ldrh	r2, [r3, #0]
    8a94:	232a      	movs	r3, #42	; 0x2a
    8a96:	18fb      	adds	r3, r7, r3
    8a98:	3a01      	subs	r2, #1
    8a9a:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
    8a9c:	687b      	ldr	r3, [r7, #4]
    8a9e:	681a      	ldr	r2, [r3, #0]
    8aa0:	687b      	ldr	r3, [r7, #4]
    8aa2:	691b      	ldr	r3, [r3, #16]
    8aa4:	212f      	movs	r1, #47	; 0x2f
    8aa6:	187c      	adds	r4, r7, r1
    8aa8:	0019      	movs	r1, r3
    8aaa:	0010      	movs	r0, r2
    8aac:	4b3d      	ldr	r3, [pc, #244]	; (8ba4 <dir_register+0x354>)
    8aae:	4798      	blx	r3
    8ab0:	0003      	movs	r3, r0
    8ab2:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
    8ab4:	232f      	movs	r3, #47	; 0x2f
    8ab6:	18fb      	adds	r3, r7, r3
    8ab8:	781b      	ldrb	r3, [r3, #0]
    8aba:	2b00      	cmp	r3, #0
    8abc:	d12b      	bne.n	8b16 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    8abe:	687b      	ldr	r3, [r7, #4]
    8ac0:	69d8      	ldr	r0, [r3, #28]
    8ac2:	687b      	ldr	r3, [r7, #4]
    8ac4:	6959      	ldr	r1, [r3, #20]
    8ac6:	232a      	movs	r3, #42	; 0x2a
    8ac8:	18fb      	adds	r3, r7, r3
    8aca:	881b      	ldrh	r3, [r3, #0]
    8acc:	b2da      	uxtb	r2, r3
    8ace:	231e      	movs	r3, #30
    8ad0:	18fb      	adds	r3, r7, r3
    8ad2:	781b      	ldrb	r3, [r3, #0]
    8ad4:	4c36      	ldr	r4, [pc, #216]	; (8bb0 <dir_register+0x360>)
    8ad6:	47a0      	blx	r4
				dj->fs->wflag = 1;
    8ad8:	687b      	ldr	r3, [r7, #4]
    8ada:	681b      	ldr	r3, [r3, #0]
    8adc:	2201      	movs	r2, #1
    8ade:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
    8ae0:	232f      	movs	r3, #47	; 0x2f
    8ae2:	18fc      	adds	r4, r7, r3
    8ae4:	687b      	ldr	r3, [r7, #4]
    8ae6:	2100      	movs	r1, #0
    8ae8:	0018      	movs	r0, r3
    8aea:	4b2f      	ldr	r3, [pc, #188]	; (8ba8 <dir_register+0x358>)
    8aec:	4798      	blx	r3
    8aee:	0003      	movs	r3, r0
    8af0:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
    8af2:	232f      	movs	r3, #47	; 0x2f
    8af4:	18fb      	adds	r3, r7, r3
    8af6:	781b      	ldrb	r3, [r3, #0]
    8af8:	2b00      	cmp	r3, #0
    8afa:	d10d      	bne.n	8b18 <dir_register+0x2c8>
    8afc:	232a      	movs	r3, #42	; 0x2a
    8afe:	18fb      	adds	r3, r7, r3
    8b00:	222a      	movs	r2, #42	; 0x2a
    8b02:	18ba      	adds	r2, r7, r2
    8b04:	8812      	ldrh	r2, [r2, #0]
    8b06:	3a01      	subs	r2, #1
    8b08:	801a      	strh	r2, [r3, #0]
    8b0a:	232a      	movs	r3, #42	; 0x2a
    8b0c:	18fb      	adds	r3, r7, r3
    8b0e:	881b      	ldrh	r3, [r3, #0]
    8b10:	2b00      	cmp	r3, #0
    8b12:	d1c3      	bne.n	8a9c <dir_register+0x24c>
    8b14:	e000      	b.n	8b18 <dir_register+0x2c8>
				if (res != FR_OK) break;
    8b16:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
    8b18:	232f      	movs	r3, #47	; 0x2f
    8b1a:	18fb      	adds	r3, r7, r3
    8b1c:	781b      	ldrb	r3, [r3, #0]
    8b1e:	2b00      	cmp	r3, #0
    8b20:	d12f      	bne.n	8b82 <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
    8b22:	687b      	ldr	r3, [r7, #4]
    8b24:	681a      	ldr	r2, [r3, #0]
    8b26:	687b      	ldr	r3, [r7, #4]
    8b28:	691b      	ldr	r3, [r3, #16]
    8b2a:	212f      	movs	r1, #47	; 0x2f
    8b2c:	187c      	adds	r4, r7, r1
    8b2e:	0019      	movs	r1, r3
    8b30:	0010      	movs	r0, r2
    8b32:	4b1c      	ldr	r3, [pc, #112]	; (8ba4 <dir_register+0x354>)
    8b34:	4798      	blx	r3
    8b36:	0003      	movs	r3, r0
    8b38:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    8b3a:	232f      	movs	r3, #47	; 0x2f
    8b3c:	18fb      	adds	r3, r7, r3
    8b3e:	781b      	ldrb	r3, [r3, #0]
    8b40:	2b00      	cmp	r3, #0
    8b42:	d11e      	bne.n	8b82 <dir_register+0x332>
			dir = dj->dir;
    8b44:	687b      	ldr	r3, [r7, #4]
    8b46:	695b      	ldr	r3, [r3, #20]
    8b48:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    8b4a:	69bb      	ldr	r3, [r7, #24]
    8b4c:	2220      	movs	r2, #32
    8b4e:	2100      	movs	r1, #0
    8b50:	0018      	movs	r0, r3
    8b52:	4b18      	ldr	r3, [pc, #96]	; (8bb4 <dir_register+0x364>)
    8b54:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    8b56:	687b      	ldr	r3, [r7, #4]
    8b58:	6999      	ldr	r1, [r3, #24]
    8b5a:	69bb      	ldr	r3, [r7, #24]
    8b5c:	220b      	movs	r2, #11
    8b5e:	0018      	movs	r0, r3
    8b60:	4b0b      	ldr	r3, [pc, #44]	; (8b90 <dir_register+0x340>)
    8b62:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    8b64:	69bb      	ldr	r3, [r7, #24]
    8b66:	330c      	adds	r3, #12
    8b68:	001a      	movs	r2, r3
    8b6a:	687b      	ldr	r3, [r7, #4]
    8b6c:	699b      	ldr	r3, [r3, #24]
    8b6e:	330b      	adds	r3, #11
    8b70:	781b      	ldrb	r3, [r3, #0]
    8b72:	2118      	movs	r1, #24
    8b74:	400b      	ands	r3, r1
    8b76:	b2db      	uxtb	r3, r3
    8b78:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
    8b7a:	687b      	ldr	r3, [r7, #4]
    8b7c:	681b      	ldr	r3, [r3, #0]
    8b7e:	2201      	movs	r2, #1
    8b80:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
    8b82:	232f      	movs	r3, #47	; 0x2f
    8b84:	18fb      	adds	r3, r7, r3
    8b86:	781b      	ldrb	r3, [r3, #0]
}
    8b88:	0018      	movs	r0, r3
    8b8a:	46bd      	mov	sp, r7
    8b8c:	b00d      	add	sp, #52	; 0x34
    8b8e:	bd90      	pop	{r4, r7, pc}
    8b90:	00007401 	.word	0x00007401
    8b94:	00008341 	.word	0x00008341
    8b98:	00008491 	.word	0x00008491
    8b9c:	0000b9e1 	.word	0x0000b9e1
    8ba0:	00007d29 	.word	0x00007d29
    8ba4:	000074e5 	.word	0x000074e5
    8ba8:	00007e59 	.word	0x00007e59
    8bac:	00008441 	.word	0x00008441
    8bb0:	00008231 	.word	0x00008231
    8bb4:	00007439 	.word	0x00007439

00008bb8 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    8bb8:	b590      	push	{r4, r7, lr}
    8bba:	b085      	sub	sp, #20
    8bbc:	af00      	add	r7, sp, #0
    8bbe:	6078      	str	r0, [r7, #4]
	FRESULT res;
#if _USE_LFN	/* LFN configuration */
	WORD i;

	i = dj->index;	/* SFN index */
    8bc0:	230c      	movs	r3, #12
    8bc2:	18fb      	adds	r3, r7, r3
    8bc4:	687a      	ldr	r2, [r7, #4]
    8bc6:	88d2      	ldrh	r2, [r2, #6]
    8bc8:	801a      	strh	r2, [r3, #0]
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
    8bca:	687b      	ldr	r3, [r7, #4]
    8bcc:	8c1b      	ldrh	r3, [r3, #32]
    8bce:	4a2c      	ldr	r2, [pc, #176]	; (8c80 <dir_remove+0xc8>)
    8bd0:	4293      	cmp	r3, r2
    8bd2:	d002      	beq.n	8bda <dir_remove+0x22>
    8bd4:	687b      	ldr	r3, [r7, #4]
    8bd6:	8c1b      	ldrh	r3, [r3, #32]
    8bd8:	e002      	b.n	8be0 <dir_remove+0x28>
    8bda:	230c      	movs	r3, #12
    8bdc:	18fb      	adds	r3, r7, r3
    8bde:	881b      	ldrh	r3, [r3, #0]
    8be0:	220f      	movs	r2, #15
    8be2:	18bc      	adds	r4, r7, r2
    8be4:	687a      	ldr	r2, [r7, #4]
    8be6:	0019      	movs	r1, r3
    8be8:	0010      	movs	r0, r2
    8bea:	4b26      	ldr	r3, [pc, #152]	; (8c84 <dir_remove+0xcc>)
    8bec:	4798      	blx	r3
    8bee:	0003      	movs	r3, r0
    8bf0:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    8bf2:	230f      	movs	r3, #15
    8bf4:	18fb      	adds	r3, r7, r3
    8bf6:	781b      	ldrb	r3, [r3, #0]
    8bf8:	2b00      	cmp	r3, #0
    8bfa:	d13a      	bne.n	8c72 <dir_remove+0xba>
		do {
			res = move_window(dj->fs, dj->sect);
    8bfc:	687b      	ldr	r3, [r7, #4]
    8bfe:	681a      	ldr	r2, [r3, #0]
    8c00:	687b      	ldr	r3, [r7, #4]
    8c02:	691b      	ldr	r3, [r3, #16]
    8c04:	210f      	movs	r1, #15
    8c06:	187c      	adds	r4, r7, r1
    8c08:	0019      	movs	r1, r3
    8c0a:	0010      	movs	r0, r2
    8c0c:	4b1e      	ldr	r3, [pc, #120]	; (8c88 <dir_remove+0xd0>)
    8c0e:	4798      	blx	r3
    8c10:	0003      	movs	r3, r0
    8c12:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    8c14:	230f      	movs	r3, #15
    8c16:	18fb      	adds	r3, r7, r3
    8c18:	781b      	ldrb	r3, [r3, #0]
    8c1a:	2b00      	cmp	r3, #0
    8c1c:	d11d      	bne.n	8c5a <dir_remove+0xa2>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    8c1e:	687b      	ldr	r3, [r7, #4]
    8c20:	695b      	ldr	r3, [r3, #20]
    8c22:	22e5      	movs	r2, #229	; 0xe5
    8c24:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
    8c26:	687b      	ldr	r3, [r7, #4]
    8c28:	681b      	ldr	r3, [r3, #0]
    8c2a:	2201      	movs	r2, #1
    8c2c:	711a      	strb	r2, [r3, #4]
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
    8c2e:	687b      	ldr	r3, [r7, #4]
    8c30:	88db      	ldrh	r3, [r3, #6]
    8c32:	220c      	movs	r2, #12
    8c34:	18ba      	adds	r2, r7, r2
    8c36:	8812      	ldrh	r2, [r2, #0]
    8c38:	429a      	cmp	r2, r3
    8c3a:	d910      	bls.n	8c5e <dir_remove+0xa6>
			res = dir_next(dj, 0);		/* Next entry */
    8c3c:	230f      	movs	r3, #15
    8c3e:	18fc      	adds	r4, r7, r3
    8c40:	687b      	ldr	r3, [r7, #4]
    8c42:	2100      	movs	r1, #0
    8c44:	0018      	movs	r0, r3
    8c46:	4b11      	ldr	r3, [pc, #68]	; (8c8c <dir_remove+0xd4>)
    8c48:	4798      	blx	r3
    8c4a:	0003      	movs	r3, r0
    8c4c:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);
    8c4e:	230f      	movs	r3, #15
    8c50:	18fb      	adds	r3, r7, r3
    8c52:	781b      	ldrb	r3, [r3, #0]
    8c54:	2b00      	cmp	r3, #0
    8c56:	d0d1      	beq.n	8bfc <dir_remove+0x44>
    8c58:	e002      	b.n	8c60 <dir_remove+0xa8>
			if (res != FR_OK) break;
    8c5a:	46c0      	nop			; (mov r8, r8)
    8c5c:	e000      	b.n	8c60 <dir_remove+0xa8>
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
    8c5e:	46c0      	nop			; (mov r8, r8)
		if (res == FR_NO_FILE) res = FR_INT_ERR;
    8c60:	230f      	movs	r3, #15
    8c62:	18fb      	adds	r3, r7, r3
    8c64:	781b      	ldrb	r3, [r3, #0]
    8c66:	2b04      	cmp	r3, #4
    8c68:	d103      	bne.n	8c72 <dir_remove+0xba>
    8c6a:	230f      	movs	r3, #15
    8c6c:	18fb      	adds	r3, r7, r3
    8c6e:	2202      	movs	r2, #2
    8c70:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
		}
	}
#endif

	return res;
    8c72:	230f      	movs	r3, #15
    8c74:	18fb      	adds	r3, r7, r3
    8c76:	781b      	ldrb	r3, [r3, #0]
}
    8c78:	0018      	movs	r0, r3
    8c7a:	46bd      	mov	sp, r7
    8c7c:	b005      	add	sp, #20
    8c7e:	bd90      	pop	{r4, r7, pc}
    8c80:	0000ffff 	.word	0x0000ffff
    8c84:	00007d29 	.word	0x00007d29
    8c88:	000074e5 	.word	0x000074e5
    8c8c:	00007e59 	.word	0x00007e59

00008c90 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
    8c90:	b590      	push	{r4, r7, lr}
    8c92:	b08b      	sub	sp, #44	; 0x2c
    8c94:	af00      	add	r7, sp, #0
    8c96:	6078      	str	r0, [r7, #4]
    8c98:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    8c9a:	683b      	ldr	r3, [r7, #0]
    8c9c:	681b      	ldr	r3, [r3, #0]
    8c9e:	613b      	str	r3, [r7, #16]
    8ca0:	e002      	b.n	8ca8 <create_name+0x18>
    8ca2:	693b      	ldr	r3, [r7, #16]
    8ca4:	3301      	adds	r3, #1
    8ca6:	613b      	str	r3, [r7, #16]
    8ca8:	693b      	ldr	r3, [r7, #16]
    8caa:	781b      	ldrb	r3, [r3, #0]
    8cac:	2b2f      	cmp	r3, #47	; 0x2f
    8cae:	d0f8      	beq.n	8ca2 <create_name+0x12>
    8cb0:	693b      	ldr	r3, [r7, #16]
    8cb2:	781b      	ldrb	r3, [r3, #0]
    8cb4:	2b5c      	cmp	r3, #92	; 0x5c
    8cb6:	d0f4      	beq.n	8ca2 <create_name+0x12>
	lfn = dj->lfn;
    8cb8:	687b      	ldr	r3, [r7, #4]
    8cba:	69db      	ldr	r3, [r3, #28]
    8cbc:	60fb      	str	r3, [r7, #12]
	si = di = 0;
    8cbe:	2300      	movs	r3, #0
    8cc0:	617b      	str	r3, [r7, #20]
    8cc2:	697b      	ldr	r3, [r7, #20]
    8cc4:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
    8cc6:	69bb      	ldr	r3, [r7, #24]
    8cc8:	1c5a      	adds	r2, r3, #1
    8cca:	61ba      	str	r2, [r7, #24]
    8ccc:	693a      	ldr	r2, [r7, #16]
    8cce:	18d3      	adds	r3, r2, r3
    8cd0:	781a      	ldrb	r2, [r3, #0]
    8cd2:	2324      	movs	r3, #36	; 0x24
    8cd4:	18fb      	adds	r3, r7, r3
    8cd6:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    8cd8:	2324      	movs	r3, #36	; 0x24
    8cda:	18fb      	adds	r3, r7, r3
    8cdc:	881b      	ldrh	r3, [r3, #0]
    8cde:	2b1f      	cmp	r3, #31
    8ce0:	d944      	bls.n	8d6c <create_name+0xdc>
    8ce2:	2324      	movs	r3, #36	; 0x24
    8ce4:	18fb      	adds	r3, r7, r3
    8ce6:	881b      	ldrh	r3, [r3, #0]
    8ce8:	2b2f      	cmp	r3, #47	; 0x2f
    8cea:	d03f      	beq.n	8d6c <create_name+0xdc>
    8cec:	2324      	movs	r3, #36	; 0x24
    8cee:	18fb      	adds	r3, r7, r3
    8cf0:	881b      	ldrh	r3, [r3, #0]
    8cf2:	2b5c      	cmp	r3, #92	; 0x5c
    8cf4:	d03a      	beq.n	8d6c <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
    8cf6:	697b      	ldr	r3, [r7, #20]
    8cf8:	2bfe      	cmp	r3, #254	; 0xfe
    8cfa:	d901      	bls.n	8d00 <create_name+0x70>
			return FR_INVALID_NAME;
    8cfc:	2306      	movs	r3, #6
    8cfe:	e1e7      	b.n	90d0 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
    8d00:	2324      	movs	r3, #36	; 0x24
    8d02:	18fb      	adds	r3, r7, r3
    8d04:	2224      	movs	r2, #36	; 0x24
    8d06:	18ba      	adds	r2, r7, r2
    8d08:	8812      	ldrh	r2, [r2, #0]
    8d0a:	21ff      	movs	r1, #255	; 0xff
    8d0c:	400a      	ands	r2, r1
    8d0e:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    8d10:	2324      	movs	r3, #36	; 0x24
    8d12:	18fc      	adds	r4, r7, r3
    8d14:	2324      	movs	r3, #36	; 0x24
    8d16:	18fb      	adds	r3, r7, r3
    8d18:	881b      	ldrh	r3, [r3, #0]
    8d1a:	2101      	movs	r1, #1
    8d1c:	0018      	movs	r0, r3
    8d1e:	4bba      	ldr	r3, [pc, #744]	; (9008 <create_name+0x378>)
    8d20:	4798      	blx	r3
    8d22:	0003      	movs	r3, r0
    8d24:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    8d26:	2324      	movs	r3, #36	; 0x24
    8d28:	18fb      	adds	r3, r7, r3
    8d2a:	881b      	ldrh	r3, [r3, #0]
    8d2c:	2b00      	cmp	r3, #0
    8d2e:	d101      	bne.n	8d34 <create_name+0xa4>
    8d30:	2306      	movs	r3, #6
    8d32:	e1cd      	b.n	90d0 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    8d34:	2324      	movs	r3, #36	; 0x24
    8d36:	18fb      	adds	r3, r7, r3
    8d38:	881b      	ldrh	r3, [r3, #0]
    8d3a:	2b7f      	cmp	r3, #127	; 0x7f
    8d3c:	d80b      	bhi.n	8d56 <create_name+0xc6>
    8d3e:	2324      	movs	r3, #36	; 0x24
    8d40:	18fb      	adds	r3, r7, r3
    8d42:	881a      	ldrh	r2, [r3, #0]
    8d44:	4bb1      	ldr	r3, [pc, #708]	; (900c <create_name+0x37c>)
    8d46:	0011      	movs	r1, r2
    8d48:	0018      	movs	r0, r3
    8d4a:	4bb1      	ldr	r3, [pc, #708]	; (9010 <create_name+0x380>)
    8d4c:	4798      	blx	r3
    8d4e:	1e03      	subs	r3, r0, #0
    8d50:	d001      	beq.n	8d56 <create_name+0xc6>
			return FR_INVALID_NAME;
    8d52:	2306      	movs	r3, #6
    8d54:	e1bc      	b.n	90d0 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
    8d56:	697b      	ldr	r3, [r7, #20]
    8d58:	1c5a      	adds	r2, r3, #1
    8d5a:	617a      	str	r2, [r7, #20]
    8d5c:	005b      	lsls	r3, r3, #1
    8d5e:	68fa      	ldr	r2, [r7, #12]
    8d60:	18d3      	adds	r3, r2, r3
    8d62:	2224      	movs	r2, #36	; 0x24
    8d64:	18ba      	adds	r2, r7, r2
    8d66:	8812      	ldrh	r2, [r2, #0]
    8d68:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
    8d6a:	e7ac      	b.n	8cc6 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
    8d6c:	693a      	ldr	r2, [r7, #16]
    8d6e:	69bb      	ldr	r3, [r7, #24]
    8d70:	18d2      	adds	r2, r2, r3
    8d72:	683b      	ldr	r3, [r7, #0]
    8d74:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    8d76:	2324      	movs	r3, #36	; 0x24
    8d78:	18fb      	adds	r3, r7, r3
    8d7a:	881b      	ldrh	r3, [r3, #0]
    8d7c:	2b1f      	cmp	r3, #31
    8d7e:	d801      	bhi.n	8d84 <create_name+0xf4>
    8d80:	2204      	movs	r2, #4
    8d82:	e000      	b.n	8d86 <create_name+0xf6>
    8d84:	2200      	movs	r2, #0
    8d86:	2326      	movs	r3, #38	; 0x26
    8d88:	18fb      	adds	r3, r7, r3
    8d8a:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
    8d8c:	e017      	b.n	8dbe <create_name+0x12e>
		w = lfn[di-1];
    8d8e:	697b      	ldr	r3, [r7, #20]
    8d90:	4aa0      	ldr	r2, [pc, #640]	; (9014 <create_name+0x384>)
    8d92:	4694      	mov	ip, r2
    8d94:	4463      	add	r3, ip
    8d96:	005b      	lsls	r3, r3, #1
    8d98:	68fa      	ldr	r2, [r7, #12]
    8d9a:	18d2      	adds	r2, r2, r3
    8d9c:	2324      	movs	r3, #36	; 0x24
    8d9e:	18fb      	adds	r3, r7, r3
    8da0:	8812      	ldrh	r2, [r2, #0]
    8da2:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    8da4:	2324      	movs	r3, #36	; 0x24
    8da6:	18fb      	adds	r3, r7, r3
    8da8:	881b      	ldrh	r3, [r3, #0]
    8daa:	2b20      	cmp	r3, #32
    8dac:	d004      	beq.n	8db8 <create_name+0x128>
    8dae:	2324      	movs	r3, #36	; 0x24
    8db0:	18fb      	adds	r3, r7, r3
    8db2:	881b      	ldrh	r3, [r3, #0]
    8db4:	2b2e      	cmp	r3, #46	; 0x2e
    8db6:	d106      	bne.n	8dc6 <create_name+0x136>
		di--;
    8db8:	697b      	ldr	r3, [r7, #20]
    8dba:	3b01      	subs	r3, #1
    8dbc:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
    8dbe:	697b      	ldr	r3, [r7, #20]
    8dc0:	2b00      	cmp	r3, #0
    8dc2:	d1e4      	bne.n	8d8e <create_name+0xfe>
    8dc4:	e000      	b.n	8dc8 <create_name+0x138>
		if (w != ' ' && w != '.') break;
    8dc6:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    8dc8:	697b      	ldr	r3, [r7, #20]
    8dca:	2b00      	cmp	r3, #0
    8dcc:	d101      	bne.n	8dd2 <create_name+0x142>
    8dce:	2306      	movs	r3, #6
    8dd0:	e17e      	b.n	90d0 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
    8dd2:	697b      	ldr	r3, [r7, #20]
    8dd4:	005b      	lsls	r3, r3, #1
    8dd6:	68fa      	ldr	r2, [r7, #12]
    8dd8:	18d3      	adds	r3, r2, r3
    8dda:	2200      	movs	r2, #0
    8ddc:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
    8dde:	687b      	ldr	r3, [r7, #4]
    8de0:	699b      	ldr	r3, [r3, #24]
    8de2:	220b      	movs	r2, #11
    8de4:	2120      	movs	r1, #32
    8de6:	0018      	movs	r0, r3
    8de8:	4b8b      	ldr	r3, [pc, #556]	; (9018 <create_name+0x388>)
    8dea:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    8dec:	2300      	movs	r3, #0
    8dee:	61bb      	str	r3, [r7, #24]
    8df0:	e002      	b.n	8df8 <create_name+0x168>
    8df2:	69bb      	ldr	r3, [r7, #24]
    8df4:	3301      	adds	r3, #1
    8df6:	61bb      	str	r3, [r7, #24]
    8df8:	69bb      	ldr	r3, [r7, #24]
    8dfa:	005b      	lsls	r3, r3, #1
    8dfc:	68fa      	ldr	r2, [r7, #12]
    8dfe:	18d3      	adds	r3, r2, r3
    8e00:	881b      	ldrh	r3, [r3, #0]
    8e02:	2b20      	cmp	r3, #32
    8e04:	d0f5      	beq.n	8df2 <create_name+0x162>
    8e06:	69bb      	ldr	r3, [r7, #24]
    8e08:	005b      	lsls	r3, r3, #1
    8e0a:	68fa      	ldr	r2, [r7, #12]
    8e0c:	18d3      	adds	r3, r2, r3
    8e0e:	881b      	ldrh	r3, [r3, #0]
    8e10:	2b2e      	cmp	r3, #46	; 0x2e
    8e12:	d0ee      	beq.n	8df2 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
    8e14:	69bb      	ldr	r3, [r7, #24]
    8e16:	2b00      	cmp	r3, #0
    8e18:	d00b      	beq.n	8e32 <create_name+0x1a2>
    8e1a:	2326      	movs	r3, #38	; 0x26
    8e1c:	18fb      	adds	r3, r7, r3
    8e1e:	2226      	movs	r2, #38	; 0x26
    8e20:	18ba      	adds	r2, r7, r2
    8e22:	7812      	ldrb	r2, [r2, #0]
    8e24:	2103      	movs	r1, #3
    8e26:	430a      	orrs	r2, r1
    8e28:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    8e2a:	e002      	b.n	8e32 <create_name+0x1a2>
    8e2c:	697b      	ldr	r3, [r7, #20]
    8e2e:	3b01      	subs	r3, #1
    8e30:	617b      	str	r3, [r7, #20]
    8e32:	697b      	ldr	r3, [r7, #20]
    8e34:	2b00      	cmp	r3, #0
    8e36:	d009      	beq.n	8e4c <create_name+0x1bc>
    8e38:	697b      	ldr	r3, [r7, #20]
    8e3a:	4a76      	ldr	r2, [pc, #472]	; (9014 <create_name+0x384>)
    8e3c:	4694      	mov	ip, r2
    8e3e:	4463      	add	r3, ip
    8e40:	005b      	lsls	r3, r3, #1
    8e42:	68fa      	ldr	r2, [r7, #12]
    8e44:	18d3      	adds	r3, r2, r3
    8e46:	881b      	ldrh	r3, [r3, #0]
    8e48:	2b2e      	cmp	r3, #46	; 0x2e
    8e4a:	d1ef      	bne.n	8e2c <create_name+0x19c>

	b = i = 0; ni = 8;
    8e4c:	2300      	movs	r3, #0
    8e4e:	623b      	str	r3, [r7, #32]
    8e50:	2327      	movs	r3, #39	; 0x27
    8e52:	18fb      	adds	r3, r7, r3
    8e54:	2200      	movs	r2, #0
    8e56:	701a      	strb	r2, [r3, #0]
    8e58:	2308      	movs	r3, #8
    8e5a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
    8e5c:	69bb      	ldr	r3, [r7, #24]
    8e5e:	1c5a      	adds	r2, r3, #1
    8e60:	61ba      	str	r2, [r7, #24]
    8e62:	005b      	lsls	r3, r3, #1
    8e64:	68fa      	ldr	r2, [r7, #12]
    8e66:	18d2      	adds	r2, r2, r3
    8e68:	2324      	movs	r3, #36	; 0x24
    8e6a:	18fb      	adds	r3, r7, r3
    8e6c:	8812      	ldrh	r2, [r2, #0]
    8e6e:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
    8e70:	2324      	movs	r3, #36	; 0x24
    8e72:	18fb      	adds	r3, r7, r3
    8e74:	881b      	ldrh	r3, [r3, #0]
    8e76:	2b00      	cmp	r3, #0
    8e78:	d100      	bne.n	8e7c <create_name+0x1ec>
    8e7a:	e0c3      	b.n	9004 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    8e7c:	2324      	movs	r3, #36	; 0x24
    8e7e:	18fb      	adds	r3, r7, r3
    8e80:	881b      	ldrh	r3, [r3, #0]
    8e82:	2b20      	cmp	r3, #32
    8e84:	d008      	beq.n	8e98 <create_name+0x208>
    8e86:	2324      	movs	r3, #36	; 0x24
    8e88:	18fb      	adds	r3, r7, r3
    8e8a:	881b      	ldrh	r3, [r3, #0]
    8e8c:	2b2e      	cmp	r3, #46	; 0x2e
    8e8e:	d10c      	bne.n	8eaa <create_name+0x21a>
    8e90:	69ba      	ldr	r2, [r7, #24]
    8e92:	697b      	ldr	r3, [r7, #20]
    8e94:	429a      	cmp	r2, r3
    8e96:	d008      	beq.n	8eaa <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
    8e98:	2326      	movs	r3, #38	; 0x26
    8e9a:	18fb      	adds	r3, r7, r3
    8e9c:	2226      	movs	r2, #38	; 0x26
    8e9e:	18ba      	adds	r2, r7, r2
    8ea0:	7812      	ldrb	r2, [r2, #0]
    8ea2:	2103      	movs	r1, #3
    8ea4:	430a      	orrs	r2, r1
    8ea6:	701a      	strb	r2, [r3, #0]
    8ea8:	e0ab      	b.n	9002 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
    8eaa:	6a3a      	ldr	r2, [r7, #32]
    8eac:	69fb      	ldr	r3, [r7, #28]
    8eae:	429a      	cmp	r2, r3
    8eb0:	d203      	bcs.n	8eba <create_name+0x22a>
    8eb2:	69ba      	ldr	r2, [r7, #24]
    8eb4:	697b      	ldr	r3, [r7, #20]
    8eb6:	429a      	cmp	r2, r3
    8eb8:	d12a      	bne.n	8f10 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
    8eba:	69fb      	ldr	r3, [r7, #28]
    8ebc:	2b0b      	cmp	r3, #11
    8ebe:	d108      	bne.n	8ed2 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
    8ec0:	2326      	movs	r3, #38	; 0x26
    8ec2:	18fb      	adds	r3, r7, r3
    8ec4:	2226      	movs	r2, #38	; 0x26
    8ec6:	18ba      	adds	r2, r7, r2
    8ec8:	7812      	ldrb	r2, [r2, #0]
    8eca:	2103      	movs	r1, #3
    8ecc:	430a      	orrs	r2, r1
    8ece:	701a      	strb	r2, [r3, #0]
    8ed0:	e0a9      	b.n	9026 <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    8ed2:	69ba      	ldr	r2, [r7, #24]
    8ed4:	697b      	ldr	r3, [r7, #20]
    8ed6:	429a      	cmp	r2, r3
    8ed8:	d007      	beq.n	8eea <create_name+0x25a>
    8eda:	2326      	movs	r3, #38	; 0x26
    8edc:	18fb      	adds	r3, r7, r3
    8ede:	2226      	movs	r2, #38	; 0x26
    8ee0:	18ba      	adds	r2, r7, r2
    8ee2:	7812      	ldrb	r2, [r2, #0]
    8ee4:	2103      	movs	r1, #3
    8ee6:	430a      	orrs	r2, r1
    8ee8:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
    8eea:	69ba      	ldr	r2, [r7, #24]
    8eec:	697b      	ldr	r3, [r7, #20]
    8eee:	429a      	cmp	r2, r3
    8ef0:	d900      	bls.n	8ef4 <create_name+0x264>
    8ef2:	e097      	b.n	9024 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
    8ef4:	697b      	ldr	r3, [r7, #20]
    8ef6:	61bb      	str	r3, [r7, #24]
    8ef8:	2308      	movs	r3, #8
    8efa:	623b      	str	r3, [r7, #32]
    8efc:	230b      	movs	r3, #11
    8efe:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
    8f00:	2327      	movs	r3, #39	; 0x27
    8f02:	18fb      	adds	r3, r7, r3
    8f04:	2227      	movs	r2, #39	; 0x27
    8f06:	18ba      	adds	r2, r7, r2
    8f08:	7812      	ldrb	r2, [r2, #0]
    8f0a:	0092      	lsls	r2, r2, #2
    8f0c:	701a      	strb	r2, [r3, #0]
    8f0e:	e078      	b.n	9002 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
    8f10:	2324      	movs	r3, #36	; 0x24
    8f12:	18fb      	adds	r3, r7, r3
    8f14:	881b      	ldrh	r3, [r3, #0]
    8f16:	2b7f      	cmp	r3, #127	; 0x7f
    8f18:	d920      	bls.n	8f5c <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    8f1a:	2324      	movs	r3, #36	; 0x24
    8f1c:	18fc      	adds	r4, r7, r3
    8f1e:	2324      	movs	r3, #36	; 0x24
    8f20:	18fb      	adds	r3, r7, r3
    8f22:	881b      	ldrh	r3, [r3, #0]
    8f24:	2100      	movs	r1, #0
    8f26:	0018      	movs	r0, r3
    8f28:	4b37      	ldr	r3, [pc, #220]	; (9008 <create_name+0x378>)
    8f2a:	4798      	blx	r3
    8f2c:	0003      	movs	r3, r0
    8f2e:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    8f30:	2324      	movs	r3, #36	; 0x24
    8f32:	18fb      	adds	r3, r7, r3
    8f34:	881b      	ldrh	r3, [r3, #0]
    8f36:	2b00      	cmp	r3, #0
    8f38:	d008      	beq.n	8f4c <create_name+0x2bc>
    8f3a:	2324      	movs	r3, #36	; 0x24
    8f3c:	18fb      	adds	r3, r7, r3
    8f3e:	881b      	ldrh	r3, [r3, #0]
    8f40:	3b80      	subs	r3, #128	; 0x80
    8f42:	4a36      	ldr	r2, [pc, #216]	; (901c <create_name+0x38c>)
    8f44:	5cd2      	ldrb	r2, [r2, r3]
    8f46:	2324      	movs	r3, #36	; 0x24
    8f48:	18fb      	adds	r3, r7, r3
    8f4a:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
    8f4c:	2326      	movs	r3, #38	; 0x26
    8f4e:	18fb      	adds	r3, r7, r3
    8f50:	2226      	movs	r2, #38	; 0x26
    8f52:	18ba      	adds	r2, r7, r2
    8f54:	7812      	ldrb	r2, [r2, #0]
    8f56:	2102      	movs	r1, #2
    8f58:	430a      	orrs	r2, r1
    8f5a:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    8f5c:	2324      	movs	r3, #36	; 0x24
    8f5e:	18fb      	adds	r3, r7, r3
    8f60:	881b      	ldrh	r3, [r3, #0]
    8f62:	2b00      	cmp	r3, #0
    8f64:	d009      	beq.n	8f7a <create_name+0x2ea>
    8f66:	2324      	movs	r3, #36	; 0x24
    8f68:	18fb      	adds	r3, r7, r3
    8f6a:	881a      	ldrh	r2, [r3, #0]
    8f6c:	4b2c      	ldr	r3, [pc, #176]	; (9020 <create_name+0x390>)
    8f6e:	0011      	movs	r1, r2
    8f70:	0018      	movs	r0, r3
    8f72:	4b27      	ldr	r3, [pc, #156]	; (9010 <create_name+0x380>)
    8f74:	4798      	blx	r3
    8f76:	1e03      	subs	r3, r0, #0
    8f78:	d00c      	beq.n	8f94 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    8f7a:	2324      	movs	r3, #36	; 0x24
    8f7c:	18fb      	adds	r3, r7, r3
    8f7e:	225f      	movs	r2, #95	; 0x5f
    8f80:	801a      	strh	r2, [r3, #0]
    8f82:	2326      	movs	r3, #38	; 0x26
    8f84:	18fb      	adds	r3, r7, r3
    8f86:	2226      	movs	r2, #38	; 0x26
    8f88:	18ba      	adds	r2, r7, r2
    8f8a:	7812      	ldrb	r2, [r2, #0]
    8f8c:	2103      	movs	r1, #3
    8f8e:	430a      	orrs	r2, r1
    8f90:	701a      	strb	r2, [r3, #0]
    8f92:	e02b      	b.n	8fec <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
    8f94:	2324      	movs	r3, #36	; 0x24
    8f96:	18fb      	adds	r3, r7, r3
    8f98:	881b      	ldrh	r3, [r3, #0]
    8f9a:	2b40      	cmp	r3, #64	; 0x40
    8f9c:	d90d      	bls.n	8fba <create_name+0x32a>
    8f9e:	2324      	movs	r3, #36	; 0x24
    8fa0:	18fb      	adds	r3, r7, r3
    8fa2:	881b      	ldrh	r3, [r3, #0]
    8fa4:	2b5a      	cmp	r3, #90	; 0x5a
    8fa6:	d808      	bhi.n	8fba <create_name+0x32a>
					b |= 2;
    8fa8:	2327      	movs	r3, #39	; 0x27
    8faa:	18fb      	adds	r3, r7, r3
    8fac:	2227      	movs	r2, #39	; 0x27
    8fae:	18ba      	adds	r2, r7, r2
    8fb0:	7812      	ldrb	r2, [r2, #0]
    8fb2:	2102      	movs	r1, #2
    8fb4:	430a      	orrs	r2, r1
    8fb6:	701a      	strb	r2, [r3, #0]
    8fb8:	e018      	b.n	8fec <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
    8fba:	2324      	movs	r3, #36	; 0x24
    8fbc:	18fb      	adds	r3, r7, r3
    8fbe:	881b      	ldrh	r3, [r3, #0]
    8fc0:	2b60      	cmp	r3, #96	; 0x60
    8fc2:	d913      	bls.n	8fec <create_name+0x35c>
    8fc4:	2324      	movs	r3, #36	; 0x24
    8fc6:	18fb      	adds	r3, r7, r3
    8fc8:	881b      	ldrh	r3, [r3, #0]
    8fca:	2b7a      	cmp	r3, #122	; 0x7a
    8fcc:	d80e      	bhi.n	8fec <create_name+0x35c>
						b |= 1; w -= 0x20;
    8fce:	2327      	movs	r3, #39	; 0x27
    8fd0:	18fb      	adds	r3, r7, r3
    8fd2:	2227      	movs	r2, #39	; 0x27
    8fd4:	18ba      	adds	r2, r7, r2
    8fd6:	7812      	ldrb	r2, [r2, #0]
    8fd8:	2101      	movs	r1, #1
    8fda:	430a      	orrs	r2, r1
    8fdc:	701a      	strb	r2, [r3, #0]
    8fde:	2324      	movs	r3, #36	; 0x24
    8fe0:	18fb      	adds	r3, r7, r3
    8fe2:	2224      	movs	r2, #36	; 0x24
    8fe4:	18ba      	adds	r2, r7, r2
    8fe6:	8812      	ldrh	r2, [r2, #0]
    8fe8:	3a20      	subs	r2, #32
    8fea:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
    8fec:	687b      	ldr	r3, [r7, #4]
    8fee:	699a      	ldr	r2, [r3, #24]
    8ff0:	6a3b      	ldr	r3, [r7, #32]
    8ff2:	1c59      	adds	r1, r3, #1
    8ff4:	6239      	str	r1, [r7, #32]
    8ff6:	18d3      	adds	r3, r2, r3
    8ff8:	2224      	movs	r2, #36	; 0x24
    8ffa:	18ba      	adds	r2, r7, r2
    8ffc:	8812      	ldrh	r2, [r2, #0]
    8ffe:	b2d2      	uxtb	r2, r2
    9000:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
    9002:	e72b      	b.n	8e5c <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
    9004:	46c0      	nop			; (mov r8, r8)
    9006:	e00e      	b.n	9026 <create_name+0x396>
    9008:	0000abcd 	.word	0x0000abcd
    900c:	0000cda4 	.word	0x0000cda4
    9010:	000074b3 	.word	0x000074b3
    9014:	7fffffff 	.word	0x7fffffff
    9018:	00007439 	.word	0x00007439
    901c:	0000cdec 	.word	0x0000cdec
    9020:	0000cdb0 	.word	0x0000cdb0
			if (si > di) break;			/* No extension */
    9024:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    9026:	687b      	ldr	r3, [r7, #4]
    9028:	699b      	ldr	r3, [r3, #24]
    902a:	781b      	ldrb	r3, [r3, #0]
    902c:	2be5      	cmp	r3, #229	; 0xe5
    902e:	d103      	bne.n	9038 <create_name+0x3a8>
    9030:	687b      	ldr	r3, [r7, #4]
    9032:	699b      	ldr	r3, [r3, #24]
    9034:	2205      	movs	r2, #5
    9036:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
    9038:	69fb      	ldr	r3, [r7, #28]
    903a:	2b08      	cmp	r3, #8
    903c:	d106      	bne.n	904c <create_name+0x3bc>
    903e:	2327      	movs	r3, #39	; 0x27
    9040:	18fb      	adds	r3, r7, r3
    9042:	2227      	movs	r2, #39	; 0x27
    9044:	18ba      	adds	r2, r7, r2
    9046:	7812      	ldrb	r2, [r2, #0]
    9048:	0092      	lsls	r2, r2, #2
    904a:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    904c:	2327      	movs	r3, #39	; 0x27
    904e:	18fb      	adds	r3, r7, r3
    9050:	781b      	ldrb	r3, [r3, #0]
    9052:	220c      	movs	r2, #12
    9054:	4013      	ands	r3, r2
    9056:	2b0c      	cmp	r3, #12
    9058:	d006      	beq.n	9068 <create_name+0x3d8>
    905a:	2327      	movs	r3, #39	; 0x27
    905c:	18fb      	adds	r3, r7, r3
    905e:	781b      	ldrb	r3, [r3, #0]
    9060:	2203      	movs	r2, #3
    9062:	4013      	ands	r3, r2
    9064:	2b03      	cmp	r3, #3
    9066:	d107      	bne.n	9078 <create_name+0x3e8>
		cf |= NS_LFN;
    9068:	2326      	movs	r3, #38	; 0x26
    906a:	18fb      	adds	r3, r7, r3
    906c:	2226      	movs	r2, #38	; 0x26
    906e:	18ba      	adds	r2, r7, r2
    9070:	7812      	ldrb	r2, [r2, #0]
    9072:	2102      	movs	r1, #2
    9074:	430a      	orrs	r2, r1
    9076:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    9078:	2326      	movs	r3, #38	; 0x26
    907a:	18fb      	adds	r3, r7, r3
    907c:	781b      	ldrb	r3, [r3, #0]
    907e:	2202      	movs	r2, #2
    9080:	4013      	ands	r3, r2
    9082:	d11d      	bne.n	90c0 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    9084:	2327      	movs	r3, #39	; 0x27
    9086:	18fb      	adds	r3, r7, r3
    9088:	781b      	ldrb	r3, [r3, #0]
    908a:	2203      	movs	r2, #3
    908c:	4013      	ands	r3, r2
    908e:	2b01      	cmp	r3, #1
    9090:	d107      	bne.n	90a2 <create_name+0x412>
    9092:	2326      	movs	r3, #38	; 0x26
    9094:	18fb      	adds	r3, r7, r3
    9096:	2226      	movs	r2, #38	; 0x26
    9098:	18ba      	adds	r2, r7, r2
    909a:	7812      	ldrb	r2, [r2, #0]
    909c:	2110      	movs	r1, #16
    909e:	430a      	orrs	r2, r1
    90a0:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    90a2:	2327      	movs	r3, #39	; 0x27
    90a4:	18fb      	adds	r3, r7, r3
    90a6:	781b      	ldrb	r3, [r3, #0]
    90a8:	220c      	movs	r2, #12
    90aa:	4013      	ands	r3, r2
    90ac:	2b04      	cmp	r3, #4
    90ae:	d107      	bne.n	90c0 <create_name+0x430>
    90b0:	2326      	movs	r3, #38	; 0x26
    90b2:	18fb      	adds	r3, r7, r3
    90b4:	2226      	movs	r2, #38	; 0x26
    90b6:	18ba      	adds	r2, r7, r2
    90b8:	7812      	ldrb	r2, [r2, #0]
    90ba:	2108      	movs	r1, #8
    90bc:	430a      	orrs	r2, r1
    90be:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
    90c0:	687b      	ldr	r3, [r7, #4]
    90c2:	699b      	ldr	r3, [r3, #24]
    90c4:	330b      	adds	r3, #11
    90c6:	2226      	movs	r2, #38	; 0x26
    90c8:	18ba      	adds	r2, r7, r2
    90ca:	7812      	ldrb	r2, [r2, #0]
    90cc:	701a      	strb	r2, [r3, #0]

	return FR_OK;
    90ce:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
    90d0:	0018      	movs	r0, r3
    90d2:	46bd      	mov	sp, r7
    90d4:	b00b      	add	sp, #44	; 0x2c
    90d6:	bd90      	pop	{r4, r7, pc}

000090d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    90d8:	b590      	push	{r4, r7, lr}
    90da:	b085      	sub	sp, #20
    90dc:	af00      	add	r7, sp, #0
    90de:	6078      	str	r0, [r7, #4]
    90e0:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    90e2:	683b      	ldr	r3, [r7, #0]
    90e4:	781b      	ldrb	r3, [r3, #0]
    90e6:	2b2f      	cmp	r3, #47	; 0x2f
    90e8:	d003      	beq.n	90f2 <follow_path+0x1a>
    90ea:	683b      	ldr	r3, [r7, #0]
    90ec:	781b      	ldrb	r3, [r3, #0]
    90ee:	2b5c      	cmp	r3, #92	; 0x5c
    90f0:	d102      	bne.n	90f8 <follow_path+0x20>
		path++;
    90f2:	683b      	ldr	r3, [r7, #0]
    90f4:	3301      	adds	r3, #1
    90f6:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
    90f8:	687b      	ldr	r3, [r7, #4]
    90fa:	2200      	movs	r2, #0
    90fc:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    90fe:	683b      	ldr	r3, [r7, #0]
    9100:	781b      	ldrb	r3, [r3, #0]
    9102:	2b1f      	cmp	r3, #31
    9104:	d80c      	bhi.n	9120 <follow_path+0x48>
		res = dir_sdi(dj, 0);
    9106:	230f      	movs	r3, #15
    9108:	18fc      	adds	r4, r7, r3
    910a:	687b      	ldr	r3, [r7, #4]
    910c:	2100      	movs	r1, #0
    910e:	0018      	movs	r0, r3
    9110:	4b3c      	ldr	r3, [pc, #240]	; (9204 <follow_path+0x12c>)
    9112:	4798      	blx	r3
    9114:	0003      	movs	r3, r0
    9116:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
    9118:	687b      	ldr	r3, [r7, #4]
    911a:	2200      	movs	r2, #0
    911c:	615a      	str	r2, [r3, #20]
    911e:	e06a      	b.n	91f6 <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
    9120:	230f      	movs	r3, #15
    9122:	18fc      	adds	r4, r7, r3
    9124:	003a      	movs	r2, r7
    9126:	687b      	ldr	r3, [r7, #4]
    9128:	0011      	movs	r1, r2
    912a:	0018      	movs	r0, r3
    912c:	4b36      	ldr	r3, [pc, #216]	; (9208 <follow_path+0x130>)
    912e:	4798      	blx	r3
    9130:	0003      	movs	r3, r0
    9132:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    9134:	230f      	movs	r3, #15
    9136:	18fb      	adds	r3, r7, r3
    9138:	781b      	ldrb	r3, [r3, #0]
    913a:	2b00      	cmp	r3, #0
    913c:	d154      	bne.n	91e8 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
    913e:	230f      	movs	r3, #15
    9140:	18fc      	adds	r4, r7, r3
    9142:	687b      	ldr	r3, [r7, #4]
    9144:	0018      	movs	r0, r3
    9146:	4b31      	ldr	r3, [pc, #196]	; (920c <follow_path+0x134>)
    9148:	4798      	blx	r3
    914a:	0003      	movs	r3, r0
    914c:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
    914e:	687b      	ldr	r3, [r7, #4]
    9150:	699a      	ldr	r2, [r3, #24]
    9152:	230e      	movs	r3, #14
    9154:	18fb      	adds	r3, r7, r3
    9156:	7ad2      	ldrb	r2, [r2, #11]
    9158:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
    915a:	230f      	movs	r3, #15
    915c:	18fb      	adds	r3, r7, r3
    915e:	781b      	ldrb	r3, [r3, #0]
    9160:	2b00      	cmp	r3, #0
    9162:	d00f      	beq.n	9184 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    9164:	230f      	movs	r3, #15
    9166:	18fb      	adds	r3, r7, r3
    9168:	781b      	ldrb	r3, [r3, #0]
    916a:	2b04      	cmp	r3, #4
    916c:	d13e      	bne.n	91ec <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    916e:	230e      	movs	r3, #14
    9170:	18fb      	adds	r3, r7, r3
    9172:	781b      	ldrb	r3, [r3, #0]
    9174:	2204      	movs	r2, #4
    9176:	4013      	ands	r3, r2
    9178:	d13a      	bne.n	91f0 <follow_path+0x118>
    917a:	230f      	movs	r3, #15
    917c:	18fb      	adds	r3, r7, r3
    917e:	2205      	movs	r2, #5
    9180:	701a      	strb	r2, [r3, #0]
				}
				break;
    9182:	e035      	b.n	91f0 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    9184:	230e      	movs	r3, #14
    9186:	18fb      	adds	r3, r7, r3
    9188:	781b      	ldrb	r3, [r3, #0]
    918a:	2204      	movs	r2, #4
    918c:	4013      	ands	r3, r2
    918e:	d131      	bne.n	91f4 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    9190:	687b      	ldr	r3, [r7, #4]
    9192:	695b      	ldr	r3, [r3, #20]
    9194:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    9196:	68bb      	ldr	r3, [r7, #8]
    9198:	330b      	adds	r3, #11
    919a:	781b      	ldrb	r3, [r3, #0]
    919c:	001a      	movs	r2, r3
    919e:	2310      	movs	r3, #16
    91a0:	4013      	ands	r3, r2
    91a2:	d104      	bne.n	91ae <follow_path+0xd6>
				res = FR_NO_PATH; break;
    91a4:	230f      	movs	r3, #15
    91a6:	18fb      	adds	r3, r7, r3
    91a8:	2205      	movs	r2, #5
    91aa:	701a      	strb	r2, [r3, #0]
    91ac:	e023      	b.n	91f6 <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
    91ae:	68bb      	ldr	r3, [r7, #8]
    91b0:	3315      	adds	r3, #21
    91b2:	781b      	ldrb	r3, [r3, #0]
    91b4:	021b      	lsls	r3, r3, #8
    91b6:	b21a      	sxth	r2, r3
    91b8:	68bb      	ldr	r3, [r7, #8]
    91ba:	3314      	adds	r3, #20
    91bc:	781b      	ldrb	r3, [r3, #0]
    91be:	b21b      	sxth	r3, r3
    91c0:	4313      	orrs	r3, r2
    91c2:	b21b      	sxth	r3, r3
    91c4:	b29b      	uxth	r3, r3
    91c6:	041b      	lsls	r3, r3, #16
    91c8:	68ba      	ldr	r2, [r7, #8]
    91ca:	321b      	adds	r2, #27
    91cc:	7812      	ldrb	r2, [r2, #0]
    91ce:	0212      	lsls	r2, r2, #8
    91d0:	b211      	sxth	r1, r2
    91d2:	68ba      	ldr	r2, [r7, #8]
    91d4:	321a      	adds	r2, #26
    91d6:	7812      	ldrb	r2, [r2, #0]
    91d8:	b212      	sxth	r2, r2
    91da:	430a      	orrs	r2, r1
    91dc:	b212      	sxth	r2, r2
    91de:	b292      	uxth	r2, r2
    91e0:	431a      	orrs	r2, r3
    91e2:	687b      	ldr	r3, [r7, #4]
    91e4:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
    91e6:	e79b      	b.n	9120 <follow_path+0x48>
			if (res != FR_OK) break;
    91e8:	46c0      	nop			; (mov r8, r8)
    91ea:	e004      	b.n	91f6 <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    91ec:	46c0      	nop			; (mov r8, r8)
    91ee:	e002      	b.n	91f6 <follow_path+0x11e>
				break;
    91f0:	46c0      	nop			; (mov r8, r8)
    91f2:	e000      	b.n	91f6 <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    91f4:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    91f6:	230f      	movs	r3, #15
    91f8:	18fb      	adds	r3, r7, r3
    91fa:	781b      	ldrb	r3, [r3, #0]
}
    91fc:	0018      	movs	r0, r3
    91fe:	46bd      	mov	sp, r7
    9200:	b005      	add	sp, #20
    9202:	bd90      	pop	{r4, r7, pc}
    9204:	00007d29 	.word	0x00007d29
    9208:	00008c91 	.word	0x00008c91
    920c:	00008491 	.word	0x00008491

00009210 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    9210:	b590      	push	{r4, r7, lr}
    9212:	b083      	sub	sp, #12
    9214:	af00      	add	r7, sp, #0
    9216:	6078      	str	r0, [r7, #4]
    9218:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    921a:	687b      	ldr	r3, [r7, #4]
    921c:	7858      	ldrb	r0, [r3, #1]
    921e:	687b      	ldr	r3, [r7, #4]
    9220:	3330      	adds	r3, #48	; 0x30
    9222:	0019      	movs	r1, r3
    9224:	683a      	ldr	r2, [r7, #0]
    9226:	2301      	movs	r3, #1
    9228:	4c2a      	ldr	r4, [pc, #168]	; (92d4 <check_fs+0xc4>)
    922a:	47a0      	blx	r4
    922c:	1e03      	subs	r3, r0, #0
    922e:	d001      	beq.n	9234 <check_fs+0x24>
		return 3;
    9230:	2303      	movs	r3, #3
    9232:	e04b      	b.n	92cc <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    9234:	687b      	ldr	r3, [r7, #4]
    9236:	4a28      	ldr	r2, [pc, #160]	; (92d8 <check_fs+0xc8>)
    9238:	4694      	mov	ip, r2
    923a:	4463      	add	r3, ip
    923c:	3301      	adds	r3, #1
    923e:	781b      	ldrb	r3, [r3, #0]
    9240:	021b      	lsls	r3, r3, #8
    9242:	b21a      	sxth	r2, r3
    9244:	687b      	ldr	r3, [r7, #4]
    9246:	4924      	ldr	r1, [pc, #144]	; (92d8 <check_fs+0xc8>)
    9248:	5c5b      	ldrb	r3, [r3, r1]
    924a:	b21b      	sxth	r3, r3
    924c:	4313      	orrs	r3, r2
    924e:	b21b      	sxth	r3, r3
    9250:	4a22      	ldr	r2, [pc, #136]	; (92dc <check_fs+0xcc>)
    9252:	4293      	cmp	r3, r2
    9254:	d001      	beq.n	925a <check_fs+0x4a>
		return 2;
    9256:	2302      	movs	r3, #2
    9258:	e038      	b.n	92cc <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    925a:	687b      	ldr	r3, [r7, #4]
    925c:	3366      	adds	r3, #102	; 0x66
    925e:	3303      	adds	r3, #3
    9260:	781b      	ldrb	r3, [r3, #0]
    9262:	061a      	lsls	r2, r3, #24
    9264:	687b      	ldr	r3, [r7, #4]
    9266:	3366      	adds	r3, #102	; 0x66
    9268:	3302      	adds	r3, #2
    926a:	781b      	ldrb	r3, [r3, #0]
    926c:	041b      	lsls	r3, r3, #16
    926e:	4313      	orrs	r3, r2
    9270:	687a      	ldr	r2, [r7, #4]
    9272:	3266      	adds	r2, #102	; 0x66
    9274:	3201      	adds	r2, #1
    9276:	7812      	ldrb	r2, [r2, #0]
    9278:	0212      	lsls	r2, r2, #8
    927a:	4313      	orrs	r3, r2
    927c:	687a      	ldr	r2, [r7, #4]
    927e:	2166      	movs	r1, #102	; 0x66
    9280:	5c52      	ldrb	r2, [r2, r1]
    9282:	4313      	orrs	r3, r2
    9284:	021b      	lsls	r3, r3, #8
    9286:	0a1b      	lsrs	r3, r3, #8
    9288:	4a15      	ldr	r2, [pc, #84]	; (92e0 <check_fs+0xd0>)
    928a:	4293      	cmp	r3, r2
    928c:	d101      	bne.n	9292 <check_fs+0x82>
		return 0;
    928e:	2300      	movs	r3, #0
    9290:	e01c      	b.n	92cc <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    9292:	687b      	ldr	r3, [r7, #4]
    9294:	3382      	adds	r3, #130	; 0x82
    9296:	3303      	adds	r3, #3
    9298:	781b      	ldrb	r3, [r3, #0]
    929a:	061a      	lsls	r2, r3, #24
    929c:	687b      	ldr	r3, [r7, #4]
    929e:	3382      	adds	r3, #130	; 0x82
    92a0:	3302      	adds	r3, #2
    92a2:	781b      	ldrb	r3, [r3, #0]
    92a4:	041b      	lsls	r3, r3, #16
    92a6:	4313      	orrs	r3, r2
    92a8:	687a      	ldr	r2, [r7, #4]
    92aa:	3282      	adds	r2, #130	; 0x82
    92ac:	3201      	adds	r2, #1
    92ae:	7812      	ldrb	r2, [r2, #0]
    92b0:	0212      	lsls	r2, r2, #8
    92b2:	4313      	orrs	r3, r2
    92b4:	687a      	ldr	r2, [r7, #4]
    92b6:	2182      	movs	r1, #130	; 0x82
    92b8:	5c52      	ldrb	r2, [r2, r1]
    92ba:	4313      	orrs	r3, r2
    92bc:	021b      	lsls	r3, r3, #8
    92be:	0a1b      	lsrs	r3, r3, #8
    92c0:	4a07      	ldr	r2, [pc, #28]	; (92e0 <check_fs+0xd0>)
    92c2:	4293      	cmp	r3, r2
    92c4:	d101      	bne.n	92ca <check_fs+0xba>
		return 0;
    92c6:	2300      	movs	r3, #0
    92c8:	e000      	b.n	92cc <check_fs+0xbc>

	return 1;
    92ca:	2301      	movs	r3, #1
}
    92cc:	0018      	movs	r0, r3
    92ce:	46bd      	mov	sp, r7
    92d0:	b003      	add	sp, #12
    92d2:	bd90      	pop	{r4, r7, pc}
    92d4:	000070f9 	.word	0x000070f9
    92d8:	0000022e 	.word	0x0000022e
    92dc:	ffffaa55 	.word	0xffffaa55
    92e0:	00544146 	.word	0x00544146

000092e4 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    92e4:	b590      	push	{r4, r7, lr}
    92e6:	b093      	sub	sp, #76	; 0x4c
    92e8:	af00      	add	r7, sp, #0
    92ea:	60f8      	str	r0, [r7, #12]
    92ec:	60b9      	str	r1, [r7, #8]
    92ee:	1dfb      	adds	r3, r7, #7
    92f0:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
    92f2:	68fb      	ldr	r3, [r7, #12]
    92f4:	681b      	ldr	r3, [r3, #0]
    92f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    92f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    92fa:	781b      	ldrb	r3, [r3, #0]
    92fc:	3b30      	subs	r3, #48	; 0x30
    92fe:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    9300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9302:	2b09      	cmp	r3, #9
    9304:	d80b      	bhi.n	931e <chk_mounted+0x3a>
    9306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9308:	3301      	adds	r3, #1
    930a:	781b      	ldrb	r3, [r3, #0]
    930c:	2b3a      	cmp	r3, #58	; 0x3a
    930e:	d106      	bne.n	931e <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
    9310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9312:	3302      	adds	r3, #2
    9314:	62fb      	str	r3, [r7, #44]	; 0x2c
    9316:	68fb      	ldr	r3, [r7, #12]
    9318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    931a:	601a      	str	r2, [r3, #0]
    931c:	e001      	b.n	9322 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
    931e:	2300      	movs	r3, #0
    9320:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    9322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9324:	2b00      	cmp	r3, #0
    9326:	d001      	beq.n	932c <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
    9328:	230b      	movs	r3, #11
    932a:	e2af      	b.n	988c <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    932c:	4bc5      	ldr	r3, [pc, #788]	; (9644 <chk_mounted+0x360>)
    932e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9330:	0092      	lsls	r2, r2, #2
    9332:	58d3      	ldr	r3, [r2, r3]
    9334:	62bb      	str	r3, [r7, #40]	; 0x28
    9336:	68bb      	ldr	r3, [r7, #8]
    9338:	6aba      	ldr	r2, [r7, #40]	; 0x28
    933a:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    933c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    933e:	2b00      	cmp	r3, #0
    9340:	d101      	bne.n	9346 <chk_mounted+0x62>
    9342:	230c      	movs	r3, #12
    9344:	e2a2      	b.n	988c <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
    9346:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9348:	781b      	ldrb	r3, [r3, #0]
    934a:	2b00      	cmp	r3, #0
    934c:	d01c      	beq.n	9388 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
    934e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9350:	785b      	ldrb	r3, [r3, #1]
    9352:	2227      	movs	r2, #39	; 0x27
    9354:	18bc      	adds	r4, r7, r2
    9356:	0018      	movs	r0, r3
    9358:	4bbb      	ldr	r3, [pc, #748]	; (9648 <chk_mounted+0x364>)
    935a:	4798      	blx	r3
    935c:	0003      	movs	r3, r0
    935e:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    9360:	2327      	movs	r3, #39	; 0x27
    9362:	18fb      	adds	r3, r7, r3
    9364:	781b      	ldrb	r3, [r3, #0]
    9366:	2201      	movs	r2, #1
    9368:	4013      	ands	r3, r2
    936a:	d10d      	bne.n	9388 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    936c:	1dfb      	adds	r3, r7, #7
    936e:	781b      	ldrb	r3, [r3, #0]
    9370:	2b00      	cmp	r3, #0
    9372:	d007      	beq.n	9384 <chk_mounted+0xa0>
    9374:	2327      	movs	r3, #39	; 0x27
    9376:	18fb      	adds	r3, r7, r3
    9378:	781b      	ldrb	r3, [r3, #0]
    937a:	2204      	movs	r2, #4
    937c:	4013      	ands	r3, r2
    937e:	d001      	beq.n	9384 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
    9380:	230a      	movs	r3, #10
    9382:	e283      	b.n	988c <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
    9384:	2300      	movs	r3, #0
    9386:	e281      	b.n	988c <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    9388:	6abb      	ldr	r3, [r7, #40]	; 0x28
    938a:	2200      	movs	r2, #0
    938c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    938e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9390:	b2da      	uxtb	r2, r3
    9392:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9394:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    9396:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9398:	785b      	ldrb	r3, [r3, #1]
    939a:	2227      	movs	r2, #39	; 0x27
    939c:	18bc      	adds	r4, r7, r2
    939e:	0018      	movs	r0, r3
    93a0:	4baa      	ldr	r3, [pc, #680]	; (964c <chk_mounted+0x368>)
    93a2:	4798      	blx	r3
    93a4:	0003      	movs	r3, r0
    93a6:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    93a8:	2327      	movs	r3, #39	; 0x27
    93aa:	18fb      	adds	r3, r7, r3
    93ac:	781b      	ldrb	r3, [r3, #0]
    93ae:	2201      	movs	r2, #1
    93b0:	4013      	ands	r3, r2
    93b2:	d001      	beq.n	93b8 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    93b4:	2303      	movs	r3, #3
    93b6:	e269      	b.n	988c <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    93b8:	1dfb      	adds	r3, r7, #7
    93ba:	781b      	ldrb	r3, [r3, #0]
    93bc:	2b00      	cmp	r3, #0
    93be:	d007      	beq.n	93d0 <chk_mounted+0xec>
    93c0:	2327      	movs	r3, #39	; 0x27
    93c2:	18fb      	adds	r3, r7, r3
    93c4:	781b      	ldrb	r3, [r3, #0]
    93c6:	2204      	movs	r2, #4
    93c8:	4013      	ands	r3, r2
    93ca:	d001      	beq.n	93d0 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
    93cc:	230a      	movs	r3, #10
    93ce:	e25d      	b.n	988c <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    93d0:	2300      	movs	r3, #0
    93d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    93d4:	2347      	movs	r3, #71	; 0x47
    93d6:	18fc      	adds	r4, r7, r3
    93d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    93da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    93dc:	0011      	movs	r1, r2
    93de:	0018      	movs	r0, r3
    93e0:	4b9b      	ldr	r3, [pc, #620]	; (9650 <chk_mounted+0x36c>)
    93e2:	4798      	blx	r3
    93e4:	0003      	movs	r3, r0
    93e6:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    93e8:	2347      	movs	r3, #71	; 0x47
    93ea:	18fb      	adds	r3, r7, r3
    93ec:	781b      	ldrb	r3, [r3, #0]
    93ee:	2b01      	cmp	r3, #1
    93f0:	d13b      	bne.n	946a <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
    93f2:	2346      	movs	r3, #70	; 0x46
    93f4:	18fb      	adds	r3, r7, r3
    93f6:	2200      	movs	r2, #0
    93f8:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
    93fa:	2346      	movs	r3, #70	; 0x46
    93fc:	18fb      	adds	r3, r7, r3
    93fe:	781b      	ldrb	r3, [r3, #0]
    9400:	2b00      	cmp	r3, #0
    9402:	d006      	beq.n	9412 <chk_mounted+0x12e>
    9404:	2346      	movs	r3, #70	; 0x46
    9406:	18fb      	adds	r3, r7, r3
    9408:	781a      	ldrb	r2, [r3, #0]
    940a:	2346      	movs	r3, #70	; 0x46
    940c:	18fb      	adds	r3, r7, r3
    940e:	3a01      	subs	r2, #1
    9410:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
    9412:	2346      	movs	r3, #70	; 0x46
    9414:	18fb      	adds	r3, r7, r3
    9416:	781b      	ldrb	r3, [r3, #0]
    9418:	011b      	lsls	r3, r3, #4
    941a:	33bf      	adds	r3, #191	; 0xbf
    941c:	33ff      	adds	r3, #255	; 0xff
    941e:	3330      	adds	r3, #48	; 0x30
    9420:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9422:	18d3      	adds	r3, r2, r3
    9424:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
    9426:	6a3b      	ldr	r3, [r7, #32]
    9428:	3304      	adds	r3, #4
    942a:	781b      	ldrb	r3, [r3, #0]
    942c:	2b00      	cmp	r3, #0
    942e:	d01c      	beq.n	946a <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    9430:	6a3b      	ldr	r3, [r7, #32]
    9432:	330b      	adds	r3, #11
    9434:	781b      	ldrb	r3, [r3, #0]
    9436:	061a      	lsls	r2, r3, #24
    9438:	6a3b      	ldr	r3, [r7, #32]
    943a:	330a      	adds	r3, #10
    943c:	781b      	ldrb	r3, [r3, #0]
    943e:	041b      	lsls	r3, r3, #16
    9440:	4313      	orrs	r3, r2
    9442:	6a3a      	ldr	r2, [r7, #32]
    9444:	3209      	adds	r2, #9
    9446:	7812      	ldrb	r2, [r2, #0]
    9448:	0212      	lsls	r2, r2, #8
    944a:	4313      	orrs	r3, r2
    944c:	6a3a      	ldr	r2, [r7, #32]
    944e:	3208      	adds	r2, #8
    9450:	7812      	ldrb	r2, [r2, #0]
    9452:	4313      	orrs	r3, r2
    9454:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
    9456:	2347      	movs	r3, #71	; 0x47
    9458:	18fc      	adds	r4, r7, r3
    945a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    945c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    945e:	0011      	movs	r1, r2
    9460:	0018      	movs	r0, r3
    9462:	4b7b      	ldr	r3, [pc, #492]	; (9650 <chk_mounted+0x36c>)
    9464:	4798      	blx	r3
    9466:	0003      	movs	r3, r0
    9468:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    946a:	2347      	movs	r3, #71	; 0x47
    946c:	18fb      	adds	r3, r7, r3
    946e:	781b      	ldrb	r3, [r3, #0]
    9470:	2b03      	cmp	r3, #3
    9472:	d101      	bne.n	9478 <chk_mounted+0x194>
    9474:	2301      	movs	r3, #1
    9476:	e209      	b.n	988c <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    9478:	2347      	movs	r3, #71	; 0x47
    947a:	18fb      	adds	r3, r7, r3
    947c:	781b      	ldrb	r3, [r3, #0]
    947e:	2b00      	cmp	r3, #0
    9480:	d001      	beq.n	9486 <chk_mounted+0x1a2>
    9482:	230d      	movs	r3, #13
    9484:	e202      	b.n	988c <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    9486:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9488:	223c      	movs	r2, #60	; 0x3c
    948a:	5c9b      	ldrb	r3, [r3, r2]
    948c:	021b      	lsls	r3, r3, #8
    948e:	b21a      	sxth	r2, r3
    9490:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9492:	213b      	movs	r1, #59	; 0x3b
    9494:	5c5b      	ldrb	r3, [r3, r1]
    9496:	b21b      	sxth	r3, r3
    9498:	4313      	orrs	r3, r2
    949a:	b21a      	sxth	r2, r3
    949c:	2380      	movs	r3, #128	; 0x80
    949e:	009b      	lsls	r3, r3, #2
    94a0:	429a      	cmp	r2, r3
    94a2:	d001      	beq.n	94a8 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
    94a4:	230d      	movs	r3, #13
    94a6:	e1f1      	b.n	988c <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    94a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94aa:	2247      	movs	r2, #71	; 0x47
    94ac:	5c9b      	ldrb	r3, [r3, r2]
    94ae:	021b      	lsls	r3, r3, #8
    94b0:	b21a      	sxth	r2, r3
    94b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94b4:	2146      	movs	r1, #70	; 0x46
    94b6:	5c5b      	ldrb	r3, [r3, r1]
    94b8:	b21b      	sxth	r3, r3
    94ba:	4313      	orrs	r3, r2
    94bc:	b21b      	sxth	r3, r3
    94be:	b29b      	uxth	r3, r3
    94c0:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    94c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    94c4:	2b00      	cmp	r3, #0
    94c6:	d112      	bne.n	94ee <chk_mounted+0x20a>
    94c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94ca:	2257      	movs	r2, #87	; 0x57
    94cc:	5c9b      	ldrb	r3, [r3, r2]
    94ce:	061a      	lsls	r2, r3, #24
    94d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94d2:	2156      	movs	r1, #86	; 0x56
    94d4:	5c5b      	ldrb	r3, [r3, r1]
    94d6:	041b      	lsls	r3, r3, #16
    94d8:	4313      	orrs	r3, r2
    94da:	6aba      	ldr	r2, [r7, #40]	; 0x28
    94dc:	2155      	movs	r1, #85	; 0x55
    94de:	5c52      	ldrb	r2, [r2, r1]
    94e0:	0212      	lsls	r2, r2, #8
    94e2:	4313      	orrs	r3, r2
    94e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    94e6:	2154      	movs	r1, #84	; 0x54
    94e8:	5c52      	ldrb	r2, [r2, r1]
    94ea:	4313      	orrs	r3, r2
    94ec:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
    94ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    94f2:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    94f4:	231f      	movs	r3, #31
    94f6:	18fb      	adds	r3, r7, r3
    94f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    94fa:	2140      	movs	r1, #64	; 0x40
    94fc:	5c52      	ldrb	r2, [r2, r1]
    94fe:	701a      	strb	r2, [r3, #0]
    9500:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9502:	221f      	movs	r2, #31
    9504:	18ba      	adds	r2, r7, r2
    9506:	7812      	ldrb	r2, [r2, #0]
    9508:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    950a:	231f      	movs	r3, #31
    950c:	18fb      	adds	r3, r7, r3
    950e:	781b      	ldrb	r3, [r3, #0]
    9510:	2b01      	cmp	r3, #1
    9512:	d006      	beq.n	9522 <chk_mounted+0x23e>
    9514:	231f      	movs	r3, #31
    9516:	18fb      	adds	r3, r7, r3
    9518:	781b      	ldrb	r3, [r3, #0]
    951a:	2b02      	cmp	r3, #2
    951c:	d001      	beq.n	9522 <chk_mounted+0x23e>
    951e:	230d      	movs	r3, #13
    9520:	e1b4      	b.n	988c <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
    9522:	231f      	movs	r3, #31
    9524:	18fb      	adds	r3, r7, r3
    9526:	781a      	ldrb	r2, [r3, #0]
    9528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    952a:	4353      	muls	r3, r2
    952c:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    952e:	231f      	movs	r3, #31
    9530:	18fb      	adds	r3, r7, r3
    9532:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9534:	213d      	movs	r1, #61	; 0x3d
    9536:	5c52      	ldrb	r2, [r2, r1]
    9538:	701a      	strb	r2, [r3, #0]
    953a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    953c:	221f      	movs	r2, #31
    953e:	18ba      	adds	r2, r7, r2
    9540:	7812      	ldrb	r2, [r2, #0]
    9542:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    9544:	231f      	movs	r3, #31
    9546:	18fb      	adds	r3, r7, r3
    9548:	781b      	ldrb	r3, [r3, #0]
    954a:	2b00      	cmp	r3, #0
    954c:	d008      	beq.n	9560 <chk_mounted+0x27c>
    954e:	231f      	movs	r3, #31
    9550:	18fb      	adds	r3, r7, r3
    9552:	781b      	ldrb	r3, [r3, #0]
    9554:	221f      	movs	r2, #31
    9556:	18ba      	adds	r2, r7, r2
    9558:	7812      	ldrb	r2, [r2, #0]
    955a:	3a01      	subs	r2, #1
    955c:	4013      	ands	r3, r2
    955e:	d001      	beq.n	9564 <chk_mounted+0x280>
    9560:	230d      	movs	r3, #13
    9562:	e193      	b.n	988c <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    9564:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9566:	2242      	movs	r2, #66	; 0x42
    9568:	5c9b      	ldrb	r3, [r3, r2]
    956a:	021b      	lsls	r3, r3, #8
    956c:	b21a      	sxth	r2, r3
    956e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9570:	2141      	movs	r1, #65	; 0x41
    9572:	5c5b      	ldrb	r3, [r3, r1]
    9574:	b21b      	sxth	r3, r3
    9576:	4313      	orrs	r3, r2
    9578:	b21b      	sxth	r3, r3
    957a:	b29a      	uxth	r2, r3
    957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    957e:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    9580:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9582:	891b      	ldrh	r3, [r3, #8]
    9584:	220f      	movs	r2, #15
    9586:	4013      	ands	r3, r2
    9588:	b29b      	uxth	r3, r3
    958a:	2b00      	cmp	r3, #0
    958c:	d001      	beq.n	9592 <chk_mounted+0x2ae>
    958e:	230d      	movs	r3, #13
    9590:	e17c      	b.n	988c <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    9592:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9594:	2244      	movs	r2, #68	; 0x44
    9596:	5c9b      	ldrb	r3, [r3, r2]
    9598:	021b      	lsls	r3, r3, #8
    959a:	b21a      	sxth	r2, r3
    959c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    959e:	2143      	movs	r1, #67	; 0x43
    95a0:	5c5b      	ldrb	r3, [r3, r1]
    95a2:	b21b      	sxth	r3, r3
    95a4:	4313      	orrs	r3, r2
    95a6:	b21b      	sxth	r3, r3
    95a8:	b29b      	uxth	r3, r3
    95aa:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    95ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    95ae:	2b00      	cmp	r3, #0
    95b0:	d112      	bne.n	95d8 <chk_mounted+0x2f4>
    95b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95b4:	2253      	movs	r2, #83	; 0x53
    95b6:	5c9b      	ldrb	r3, [r3, r2]
    95b8:	061a      	lsls	r2, r3, #24
    95ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95bc:	2152      	movs	r1, #82	; 0x52
    95be:	5c5b      	ldrb	r3, [r3, r1]
    95c0:	041b      	lsls	r3, r3, #16
    95c2:	4313      	orrs	r3, r2
    95c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    95c6:	2151      	movs	r1, #81	; 0x51
    95c8:	5c52      	ldrb	r2, [r2, r1]
    95ca:	0212      	lsls	r2, r2, #8
    95cc:	4313      	orrs	r3, r2
    95ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
    95d0:	2150      	movs	r1, #80	; 0x50
    95d2:	5c52      	ldrb	r2, [r2, r1]
    95d4:	4313      	orrs	r3, r2
    95d6:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    95d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95da:	223f      	movs	r2, #63	; 0x3f
    95dc:	5c9b      	ldrb	r3, [r3, r2]
    95de:	021b      	lsls	r3, r3, #8
    95e0:	b21a      	sxth	r2, r3
    95e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95e4:	213e      	movs	r1, #62	; 0x3e
    95e6:	5c5b      	ldrb	r3, [r3, r1]
    95e8:	b21b      	sxth	r3, r3
    95ea:	4313      	orrs	r3, r2
    95ec:	b21a      	sxth	r2, r3
    95ee:	231c      	movs	r3, #28
    95f0:	18fb      	adds	r3, r7, r3
    95f2:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    95f4:	231c      	movs	r3, #28
    95f6:	18fb      	adds	r3, r7, r3
    95f8:	881b      	ldrh	r3, [r3, #0]
    95fa:	2b00      	cmp	r3, #0
    95fc:	d101      	bne.n	9602 <chk_mounted+0x31e>
    95fe:	230d      	movs	r3, #13
    9600:	e144      	b.n	988c <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    9602:	231c      	movs	r3, #28
    9604:	18fb      	adds	r3, r7, r3
    9606:	881a      	ldrh	r2, [r3, #0]
    9608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    960a:	18d3      	adds	r3, r2, r3
    960c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    960e:	8912      	ldrh	r2, [r2, #8]
    9610:	0912      	lsrs	r2, r2, #4
    9612:	b292      	uxth	r2, r2
    9614:	189b      	adds	r3, r3, r2
    9616:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    9618:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    961a:	69bb      	ldr	r3, [r7, #24]
    961c:	429a      	cmp	r2, r3
    961e:	d201      	bcs.n	9624 <chk_mounted+0x340>
    9620:	230d      	movs	r3, #13
    9622:	e133      	b.n	988c <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    9624:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    9626:	69bb      	ldr	r3, [r7, #24]
    9628:	1ad2      	subs	r2, r2, r3
    962a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    962c:	789b      	ldrb	r3, [r3, #2]
    962e:	0019      	movs	r1, r3
    9630:	4b08      	ldr	r3, [pc, #32]	; (9654 <chk_mounted+0x370>)
    9632:	0010      	movs	r0, r2
    9634:	4798      	blx	r3
    9636:	0003      	movs	r3, r0
    9638:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    963a:	697b      	ldr	r3, [r7, #20]
    963c:	2b00      	cmp	r3, #0
    963e:	d10b      	bne.n	9658 <chk_mounted+0x374>
    9640:	230d      	movs	r3, #13
    9642:	e123      	b.n	988c <chk_mounted+0x5a8>
    9644:	200001b8 	.word	0x200001b8
    9648:	000070c1 	.word	0x000070c1
    964c:	0000703d 	.word	0x0000703d
    9650:	00009211 	.word	0x00009211
    9654:	0000b8cd 	.word	0x0000b8cd
	fmt = FS_FAT12;
    9658:	2347      	movs	r3, #71	; 0x47
    965a:	18fb      	adds	r3, r7, r3
    965c:	2201      	movs	r2, #1
    965e:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    9660:	697b      	ldr	r3, [r7, #20]
    9662:	4a8c      	ldr	r2, [pc, #560]	; (9894 <chk_mounted+0x5b0>)
    9664:	4293      	cmp	r3, r2
    9666:	d903      	bls.n	9670 <chk_mounted+0x38c>
    9668:	2347      	movs	r3, #71	; 0x47
    966a:	18fb      	adds	r3, r7, r3
    966c:	2202      	movs	r2, #2
    966e:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    9670:	697b      	ldr	r3, [r7, #20]
    9672:	4a89      	ldr	r2, [pc, #548]	; (9898 <chk_mounted+0x5b4>)
    9674:	4293      	cmp	r3, r2
    9676:	d903      	bls.n	9680 <chk_mounted+0x39c>
    9678:	2347      	movs	r3, #71	; 0x47
    967a:	18fb      	adds	r3, r7, r3
    967c:	2203      	movs	r2, #3
    967e:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    9680:	697b      	ldr	r3, [r7, #20]
    9682:	1c9a      	adds	r2, r3, #2
    9684:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9686:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    9688:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    968a:	69bb      	ldr	r3, [r7, #24]
    968c:	18d2      	adds	r2, r2, r3
    968e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9690:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    9692:	231c      	movs	r3, #28
    9694:	18fb      	adds	r3, r7, r3
    9696:	881a      	ldrh	r2, [r3, #0]
    9698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    969a:	18d2      	adds	r2, r2, r3
    969c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    969e:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
    96a0:	2347      	movs	r3, #71	; 0x47
    96a2:	18fb      	adds	r3, r7, r3
    96a4:	781b      	ldrb	r3, [r3, #0]
    96a6:	2b03      	cmp	r3, #3
    96a8:	d11e      	bne.n	96e8 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    96aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96ac:	891b      	ldrh	r3, [r3, #8]
    96ae:	2b00      	cmp	r3, #0
    96b0:	d001      	beq.n	96b6 <chk_mounted+0x3d2>
    96b2:	230d      	movs	r3, #13
    96b4:	e0ea      	b.n	988c <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    96b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96b8:	225f      	movs	r2, #95	; 0x5f
    96ba:	5c9b      	ldrb	r3, [r3, r2]
    96bc:	061a      	lsls	r2, r3, #24
    96be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96c0:	215e      	movs	r1, #94	; 0x5e
    96c2:	5c5b      	ldrb	r3, [r3, r1]
    96c4:	041b      	lsls	r3, r3, #16
    96c6:	4313      	orrs	r3, r2
    96c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    96ca:	215d      	movs	r1, #93	; 0x5d
    96cc:	5c52      	ldrb	r2, [r2, r1]
    96ce:	0212      	lsls	r2, r2, #8
    96d0:	4313      	orrs	r3, r2
    96d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    96d4:	215c      	movs	r1, #92	; 0x5c
    96d6:	5c52      	ldrb	r2, [r2, r1]
    96d8:	431a      	orrs	r2, r3
    96da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96dc:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    96de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96e0:	699b      	ldr	r3, [r3, #24]
    96e2:	009b      	lsls	r3, r3, #2
    96e4:	633b      	str	r3, [r7, #48]	; 0x30
    96e6:	e020      	b.n	972a <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    96e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96ea:	891b      	ldrh	r3, [r3, #8]
    96ec:	2b00      	cmp	r3, #0
    96ee:	d101      	bne.n	96f4 <chk_mounted+0x410>
    96f0:	230d      	movs	r3, #13
    96f2:	e0cb      	b.n	988c <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    96f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96f6:	6a1a      	ldr	r2, [r3, #32]
    96f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    96fa:	18d2      	adds	r2, r2, r3
    96fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    96fe:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    9700:	2347      	movs	r3, #71	; 0x47
    9702:	18fb      	adds	r3, r7, r3
    9704:	781b      	ldrb	r3, [r3, #0]
    9706:	2b02      	cmp	r3, #2
    9708:	d103      	bne.n	9712 <chk_mounted+0x42e>
    970a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    970c:	699b      	ldr	r3, [r3, #24]
    970e:	005b      	lsls	r3, r3, #1
    9710:	e00a      	b.n	9728 <chk_mounted+0x444>
    9712:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9714:	699a      	ldr	r2, [r3, #24]
    9716:	0013      	movs	r3, r2
    9718:	005b      	lsls	r3, r3, #1
    971a:	189b      	adds	r3, r3, r2
    971c:	085a      	lsrs	r2, r3, #1
    971e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9720:	699b      	ldr	r3, [r3, #24]
    9722:	2101      	movs	r1, #1
    9724:	400b      	ands	r3, r1
    9726:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
    9728:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    972a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    972c:	69da      	ldr	r2, [r3, #28]
    972e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9730:	495a      	ldr	r1, [pc, #360]	; (989c <chk_mounted+0x5b8>)
    9732:	468c      	mov	ip, r1
    9734:	4463      	add	r3, ip
    9736:	0a5b      	lsrs	r3, r3, #9
    9738:	429a      	cmp	r2, r3
    973a:	d201      	bcs.n	9740 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
    973c:	230d      	movs	r3, #13
    973e:	e0a5      	b.n	988c <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    9740:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9742:	2201      	movs	r2, #1
    9744:	4252      	negs	r2, r2
    9746:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
    9748:	6abb      	ldr	r3, [r7, #40]	; 0x28
    974a:	2200      	movs	r2, #0
    974c:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    974e:	2347      	movs	r3, #71	; 0x47
    9750:	18fb      	adds	r3, r7, r3
    9752:	781b      	ldrb	r3, [r3, #0]
    9754:	2b03      	cmp	r3, #3
    9756:	d000      	beq.n	975a <chk_mounted+0x476>
    9758:	e082      	b.n	9860 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
    975a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    975c:	2200      	movs	r2, #0
    975e:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    9760:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9762:	2261      	movs	r2, #97	; 0x61
    9764:	5c9b      	ldrb	r3, [r3, r2]
    9766:	021b      	lsls	r3, r3, #8
    9768:	b21a      	sxth	r2, r3
    976a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    976c:	2160      	movs	r1, #96	; 0x60
    976e:	5c5b      	ldrb	r3, [r3, r1]
    9770:	b21b      	sxth	r3, r3
    9772:	4313      	orrs	r3, r2
    9774:	b21b      	sxth	r3, r3
    9776:	b29b      	uxth	r3, r3
    9778:	001a      	movs	r2, r3
    977a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    977c:	18d2      	adds	r2, r2, r3
    977e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9780:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    9782:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9784:	7858      	ldrb	r0, [r3, #1]
    9786:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9788:	3330      	adds	r3, #48	; 0x30
    978a:	0019      	movs	r1, r3
    978c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    978e:	695a      	ldr	r2, [r3, #20]
    9790:	2301      	movs	r3, #1
    9792:	4c43      	ldr	r4, [pc, #268]	; (98a0 <chk_mounted+0x5bc>)
    9794:	47a0      	blx	r4
    9796:	1e03      	subs	r3, r0, #0
    9798:	d162      	bne.n	9860 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    979a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    979c:	4a41      	ldr	r2, [pc, #260]	; (98a4 <chk_mounted+0x5c0>)
    979e:	5c9b      	ldrb	r3, [r3, r2]
    97a0:	021b      	lsls	r3, r3, #8
    97a2:	b21a      	sxth	r2, r3
    97a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97a6:	4940      	ldr	r1, [pc, #256]	; (98a8 <chk_mounted+0x5c4>)
    97a8:	5c5b      	ldrb	r3, [r3, r1]
    97aa:	b21b      	sxth	r3, r3
    97ac:	4313      	orrs	r3, r2
    97ae:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    97b0:	4a3e      	ldr	r2, [pc, #248]	; (98ac <chk_mounted+0x5c8>)
    97b2:	4293      	cmp	r3, r2
    97b4:	d154      	bne.n	9860 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    97b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97b8:	2233      	movs	r2, #51	; 0x33
    97ba:	5c9b      	ldrb	r3, [r3, r2]
    97bc:	061a      	lsls	r2, r3, #24
    97be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97c0:	2132      	movs	r1, #50	; 0x32
    97c2:	5c5b      	ldrb	r3, [r3, r1]
    97c4:	041b      	lsls	r3, r3, #16
    97c6:	4313      	orrs	r3, r2
    97c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    97ca:	2131      	movs	r1, #49	; 0x31
    97cc:	5c52      	ldrb	r2, [r2, r1]
    97ce:	0212      	lsls	r2, r2, #8
    97d0:	4313      	orrs	r3, r2
    97d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    97d4:	2130      	movs	r1, #48	; 0x30
    97d6:	5c52      	ldrb	r2, [r2, r1]
    97d8:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    97da:	4a35      	ldr	r2, [pc, #212]	; (98b0 <chk_mounted+0x5cc>)
    97dc:	4293      	cmp	r3, r2
    97de:	d13f      	bne.n	9860 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    97e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97e2:	4a34      	ldr	r2, [pc, #208]	; (98b4 <chk_mounted+0x5d0>)
    97e4:	5c9b      	ldrb	r3, [r3, r2]
    97e6:	061a      	lsls	r2, r3, #24
    97e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97ea:	4933      	ldr	r1, [pc, #204]	; (98b8 <chk_mounted+0x5d4>)
    97ec:	5c5b      	ldrb	r3, [r3, r1]
    97ee:	041b      	lsls	r3, r3, #16
    97f0:	4313      	orrs	r3, r2
    97f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    97f4:	4931      	ldr	r1, [pc, #196]	; (98bc <chk_mounted+0x5d8>)
    97f6:	5c52      	ldrb	r2, [r2, r1]
    97f8:	0212      	lsls	r2, r2, #8
    97fa:	4313      	orrs	r3, r2
    97fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    97fe:	2285      	movs	r2, #133	; 0x85
    9800:	0092      	lsls	r2, r2, #2
    9802:	5c8a      	ldrb	r2, [r1, r2]
    9804:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    9806:	4a2e      	ldr	r2, [pc, #184]	; (98c0 <chk_mounted+0x5dc>)
    9808:	4293      	cmp	r3, r2
    980a:	d129      	bne.n	9860 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    980c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    980e:	4a2d      	ldr	r2, [pc, #180]	; (98c4 <chk_mounted+0x5e0>)
    9810:	5c9b      	ldrb	r3, [r3, r2]
    9812:	061a      	lsls	r2, r3, #24
    9814:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9816:	492c      	ldr	r1, [pc, #176]	; (98c8 <chk_mounted+0x5e4>)
    9818:	5c5b      	ldrb	r3, [r3, r1]
    981a:	041b      	lsls	r3, r3, #16
    981c:	4313      	orrs	r3, r2
    981e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9820:	492a      	ldr	r1, [pc, #168]	; (98cc <chk_mounted+0x5e8>)
    9822:	5c52      	ldrb	r2, [r2, r1]
    9824:	0212      	lsls	r2, r2, #8
    9826:	4313      	orrs	r3, r2
    9828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    982a:	2287      	movs	r2, #135	; 0x87
    982c:	0092      	lsls	r2, r2, #2
    982e:	5c8a      	ldrb	r2, [r1, r2]
    9830:	431a      	orrs	r2, r3
    9832:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9834:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    9836:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9838:	4a25      	ldr	r2, [pc, #148]	; (98d0 <chk_mounted+0x5ec>)
    983a:	5c9b      	ldrb	r3, [r3, r2]
    983c:	061a      	lsls	r2, r3, #24
    983e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9840:	4924      	ldr	r1, [pc, #144]	; (98d4 <chk_mounted+0x5f0>)
    9842:	5c5b      	ldrb	r3, [r3, r1]
    9844:	041b      	lsls	r3, r3, #16
    9846:	4313      	orrs	r3, r2
    9848:	6aba      	ldr	r2, [r7, #40]	; 0x28
    984a:	4923      	ldr	r1, [pc, #140]	; (98d8 <chk_mounted+0x5f4>)
    984c:	5c52      	ldrb	r2, [r2, r1]
    984e:	0212      	lsls	r2, r2, #8
    9850:	4313      	orrs	r3, r2
    9852:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9854:	2286      	movs	r2, #134	; 0x86
    9856:	0092      	lsls	r2, r2, #2
    9858:	5c8a      	ldrb	r2, [r1, r2]
    985a:	431a      	orrs	r2, r3
    985c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    985e:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    9860:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9862:	2247      	movs	r2, #71	; 0x47
    9864:	18ba      	adds	r2, r7, r2
    9866:	7812      	ldrb	r2, [r2, #0]
    9868:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    986a:	4b1c      	ldr	r3, [pc, #112]	; (98dc <chk_mounted+0x5f8>)
    986c:	881b      	ldrh	r3, [r3, #0]
    986e:	3301      	adds	r3, #1
    9870:	b29a      	uxth	r2, r3
    9872:	4b1a      	ldr	r3, [pc, #104]	; (98dc <chk_mounted+0x5f8>)
    9874:	801a      	strh	r2, [r3, #0]
    9876:	4b19      	ldr	r3, [pc, #100]	; (98dc <chk_mounted+0x5f8>)
    9878:	881a      	ldrh	r2, [r3, #0]
    987a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    987c:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    987e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9880:	2200      	movs	r2, #0
    9882:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
    9884:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9886:	2200      	movs	r2, #0
    9888:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
    988a:	2300      	movs	r3, #0
}
    988c:	0018      	movs	r0, r3
    988e:	46bd      	mov	sp, r7
    9890:	b013      	add	sp, #76	; 0x4c
    9892:	bd90      	pop	{r4, r7, pc}
    9894:	00000ff5 	.word	0x00000ff5
    9898:	0000fff5 	.word	0x0000fff5
    989c:	000001ff 	.word	0x000001ff
    98a0:	000070f9 	.word	0x000070f9
    98a4:	0000022f 	.word	0x0000022f
    98a8:	0000022e 	.word	0x0000022e
    98ac:	ffffaa55 	.word	0xffffaa55
    98b0:	41615252 	.word	0x41615252
    98b4:	00000217 	.word	0x00000217
    98b8:	00000216 	.word	0x00000216
    98bc:	00000215 	.word	0x00000215
    98c0:	61417272 	.word	0x61417272
    98c4:	0000021f 	.word	0x0000021f
    98c8:	0000021e 	.word	0x0000021e
    98cc:	0000021d 	.word	0x0000021d
    98d0:	0000021b 	.word	0x0000021b
    98d4:	0000021a 	.word	0x0000021a
    98d8:	00000219 	.word	0x00000219
    98dc:	200001bc 	.word	0x200001bc

000098e0 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    98e0:	b580      	push	{r7, lr}
    98e2:	b082      	sub	sp, #8
    98e4:	af00      	add	r7, sp, #0
    98e6:	6078      	str	r0, [r7, #4]
    98e8:	000a      	movs	r2, r1
    98ea:	1cbb      	adds	r3, r7, #2
    98ec:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
    98ee:	687b      	ldr	r3, [r7, #4]
    98f0:	2b00      	cmp	r3, #0
    98f2:	d009      	beq.n	9908 <validate+0x28>
    98f4:	687b      	ldr	r3, [r7, #4]
    98f6:	781b      	ldrb	r3, [r3, #0]
    98f8:	2b00      	cmp	r3, #0
    98fa:	d005      	beq.n	9908 <validate+0x28>
    98fc:	687b      	ldr	r3, [r7, #4]
    98fe:	88db      	ldrh	r3, [r3, #6]
    9900:	1cba      	adds	r2, r7, #2
    9902:	8812      	ldrh	r2, [r2, #0]
    9904:	429a      	cmp	r2, r3
    9906:	d001      	beq.n	990c <validate+0x2c>
		return FR_INVALID_OBJECT;
    9908:	2309      	movs	r3, #9
    990a:	e00c      	b.n	9926 <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
    990c:	687b      	ldr	r3, [r7, #4]
    990e:	785b      	ldrb	r3, [r3, #1]
    9910:	0018      	movs	r0, r3
    9912:	4b07      	ldr	r3, [pc, #28]	; (9930 <validate+0x50>)
    9914:	4798      	blx	r3
    9916:	0003      	movs	r3, r0
    9918:	001a      	movs	r2, r3
    991a:	2301      	movs	r3, #1
    991c:	4013      	ands	r3, r2
    991e:	d001      	beq.n	9924 <validate+0x44>
		return FR_NOT_READY;
    9920:	2303      	movs	r3, #3
    9922:	e000      	b.n	9926 <validate+0x46>

	return FR_OK;
    9924:	2300      	movs	r3, #0
}
    9926:	0018      	movs	r0, r3
    9928:	46bd      	mov	sp, r7
    992a:	b002      	add	sp, #8
    992c:	bd80      	pop	{r7, pc}
    992e:	46c0      	nop			; (mov r8, r8)
    9930:	000070c1 	.word	0x000070c1

00009934 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    9934:	b580      	push	{r7, lr}
    9936:	b084      	sub	sp, #16
    9938:	af00      	add	r7, sp, #0
    993a:	0002      	movs	r2, r0
    993c:	6039      	str	r1, [r7, #0]
    993e:	1dfb      	adds	r3, r7, #7
    9940:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    9942:	1dfb      	adds	r3, r7, #7
    9944:	781b      	ldrb	r3, [r3, #0]
    9946:	2b00      	cmp	r3, #0
    9948:	d001      	beq.n	994e <f_mount+0x1a>
		return FR_INVALID_DRIVE;
    994a:	230b      	movs	r3, #11
    994c:	e018      	b.n	9980 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
    994e:	1dfb      	adds	r3, r7, #7
    9950:	781a      	ldrb	r2, [r3, #0]
    9952:	4b0d      	ldr	r3, [pc, #52]	; (9988 <f_mount+0x54>)
    9954:	0092      	lsls	r2, r2, #2
    9956:	58d3      	ldr	r3, [r2, r3]
    9958:	60fb      	str	r3, [r7, #12]

	if (rfs) {
    995a:	68fb      	ldr	r3, [r7, #12]
    995c:	2b00      	cmp	r3, #0
    995e:	d002      	beq.n	9966 <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    9960:	68fb      	ldr	r3, [r7, #12]
    9962:	2200      	movs	r2, #0
    9964:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
    9966:	683b      	ldr	r3, [r7, #0]
    9968:	2b00      	cmp	r3, #0
    996a:	d002      	beq.n	9972 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
    996c:	683b      	ldr	r3, [r7, #0]
    996e:	2200      	movs	r2, #0
    9970:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    9972:	1dfb      	adds	r3, r7, #7
    9974:	781a      	ldrb	r2, [r3, #0]
    9976:	4b04      	ldr	r3, [pc, #16]	; (9988 <f_mount+0x54>)
    9978:	0092      	lsls	r2, r2, #2
    997a:	6839      	ldr	r1, [r7, #0]
    997c:	50d1      	str	r1, [r2, r3]

	return FR_OK;
    997e:	2300      	movs	r3, #0
}
    9980:	0018      	movs	r0, r3
    9982:	46bd      	mov	sp, r7
    9984:	b004      	add	sp, #16
    9986:	bd80      	pop	{r7, pc}
    9988:	200001b8 	.word	0x200001b8

0000998c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    998c:	b590      	push	{r4, r7, lr}
    998e:	4ce5      	ldr	r4, [pc, #916]	; (9d24 <f_open+0x398>)
    9990:	44a5      	add	sp, r4
    9992:	af00      	add	r7, sp, #0
    9994:	60f8      	str	r0, [r7, #12]
    9996:	60b9      	str	r1, [r7, #8]
    9998:	4be3      	ldr	r3, [pc, #908]	; (9d28 <f_open+0x39c>)
    999a:	2194      	movs	r1, #148	; 0x94
    999c:	0089      	lsls	r1, r1, #2
    999e:	468c      	mov	ip, r1
    99a0:	44bc      	add	ip, r7
    99a2:	4463      	add	r3, ip
    99a4:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    99a6:	68fb      	ldr	r3, [r7, #12]
    99a8:	2200      	movs	r2, #0
    99aa:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    99ac:	4bde      	ldr	r3, [pc, #888]	; (9d28 <f_open+0x39c>)
    99ae:	2294      	movs	r2, #148	; 0x94
    99b0:	0092      	lsls	r2, r2, #2
    99b2:	4694      	mov	ip, r2
    99b4:	44bc      	add	ip, r7
    99b6:	4463      	add	r3, ip
    99b8:	4adb      	ldr	r2, [pc, #876]	; (9d28 <f_open+0x39c>)
    99ba:	2194      	movs	r1, #148	; 0x94
    99bc:	0089      	lsls	r1, r1, #2
    99be:	468c      	mov	ip, r1
    99c0:	44bc      	add	ip, r7
    99c2:	4462      	add	r2, ip
    99c4:	7812      	ldrb	r2, [r2, #0]
    99c6:	211f      	movs	r1, #31
    99c8:	400a      	ands	r2, r1
    99ca:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    99cc:	4bd6      	ldr	r3, [pc, #856]	; (9d28 <f_open+0x39c>)
    99ce:	2294      	movs	r2, #148	; 0x94
    99d0:	0092      	lsls	r2, r2, #2
    99d2:	4694      	mov	ip, r2
    99d4:	44bc      	add	ip, r7
    99d6:	4463      	add	r3, ip
    99d8:	781b      	ldrb	r3, [r3, #0]
    99da:	2201      	movs	r2, #1
    99dc:	4393      	bics	r3, r2
    99de:	b2da      	uxtb	r2, r3
    99e0:	4bd2      	ldr	r3, [pc, #840]	; (9d2c <f_open+0x3a0>)
    99e2:	18fc      	adds	r4, r7, r3
    99e4:	2387      	movs	r3, #135	; 0x87
    99e6:	009b      	lsls	r3, r3, #2
    99e8:	18f9      	adds	r1, r7, r3
    99ea:	2308      	movs	r3, #8
    99ec:	18fb      	adds	r3, r7, r3
    99ee:	0018      	movs	r0, r3
    99f0:	4bcf      	ldr	r3, [pc, #828]	; (9d30 <f_open+0x3a4>)
    99f2:	4798      	blx	r3
    99f4:	0003      	movs	r3, r0
    99f6:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    99f8:	2387      	movs	r3, #135	; 0x87
    99fa:	009b      	lsls	r3, r3, #2
    99fc:	18fb      	adds	r3, r7, r3
    99fe:	2284      	movs	r2, #132	; 0x84
    9a00:	0092      	lsls	r2, r2, #2
    9a02:	18ba      	adds	r2, r7, r2
    9a04:	619a      	str	r2, [r3, #24]
    9a06:	2387      	movs	r3, #135	; 0x87
    9a08:	009b      	lsls	r3, r3, #2
    9a0a:	18fb      	adds	r3, r7, r3
    9a0c:	2210      	movs	r2, #16
    9a0e:	18ba      	adds	r2, r7, r2
    9a10:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
    9a12:	4bc6      	ldr	r3, [pc, #792]	; (9d2c <f_open+0x3a0>)
    9a14:	18fb      	adds	r3, r7, r3
    9a16:	781b      	ldrb	r3, [r3, #0]
    9a18:	2b00      	cmp	r3, #0
    9a1a:	d10b      	bne.n	9a34 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
    9a1c:	68ba      	ldr	r2, [r7, #8]
    9a1e:	4bc3      	ldr	r3, [pc, #780]	; (9d2c <f_open+0x3a0>)
    9a20:	18fc      	adds	r4, r7, r3
    9a22:	2387      	movs	r3, #135	; 0x87
    9a24:	009b      	lsls	r3, r3, #2
    9a26:	18fb      	adds	r3, r7, r3
    9a28:	0011      	movs	r1, r2
    9a2a:	0018      	movs	r0, r3
    9a2c:	4bc1      	ldr	r3, [pc, #772]	; (9d34 <f_open+0x3a8>)
    9a2e:	4798      	blx	r3
    9a30:	0003      	movs	r3, r0
    9a32:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
    9a34:	2387      	movs	r3, #135	; 0x87
    9a36:	009b      	lsls	r3, r3, #2
    9a38:	18fb      	adds	r3, r7, r3
    9a3a:	695b      	ldr	r3, [r3, #20]
    9a3c:	2292      	movs	r2, #146	; 0x92
    9a3e:	0092      	lsls	r2, r2, #2
    9a40:	18ba      	adds	r2, r7, r2
    9a42:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    9a44:	4bb9      	ldr	r3, [pc, #740]	; (9d2c <f_open+0x3a0>)
    9a46:	18fb      	adds	r3, r7, r3
    9a48:	781b      	ldrb	r3, [r3, #0]
    9a4a:	2b00      	cmp	r3, #0
    9a4c:	d109      	bne.n	9a62 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
    9a4e:	2392      	movs	r3, #146	; 0x92
    9a50:	009b      	lsls	r3, r3, #2
    9a52:	18fb      	adds	r3, r7, r3
    9a54:	681b      	ldr	r3, [r3, #0]
    9a56:	2b00      	cmp	r3, #0
    9a58:	d103      	bne.n	9a62 <f_open+0xd6>
			res = FR_INVALID_NAME;
    9a5a:	4bb4      	ldr	r3, [pc, #720]	; (9d2c <f_open+0x3a0>)
    9a5c:	18fb      	adds	r3, r7, r3
    9a5e:	2206      	movs	r2, #6
    9a60:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    9a62:	4bb1      	ldr	r3, [pc, #708]	; (9d28 <f_open+0x39c>)
    9a64:	2294      	movs	r2, #148	; 0x94
    9a66:	0092      	lsls	r2, r2, #2
    9a68:	4694      	mov	ip, r2
    9a6a:	44bc      	add	ip, r7
    9a6c:	4463      	add	r3, ip
    9a6e:	781b      	ldrb	r3, [r3, #0]
    9a70:	221c      	movs	r2, #28
    9a72:	4013      	ands	r3, r2
    9a74:	d100      	bne.n	9a78 <f_open+0xec>
    9a76:	e141      	b.n	9cfc <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
    9a78:	4bac      	ldr	r3, [pc, #688]	; (9d2c <f_open+0x3a0>)
    9a7a:	18fb      	adds	r3, r7, r3
    9a7c:	781b      	ldrb	r3, [r3, #0]
    9a7e:	2b00      	cmp	r3, #0
    9a80:	d027      	beq.n	9ad2 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    9a82:	4baa      	ldr	r3, [pc, #680]	; (9d2c <f_open+0x3a0>)
    9a84:	18fb      	adds	r3, r7, r3
    9a86:	781b      	ldrb	r3, [r3, #0]
    9a88:	2b04      	cmp	r3, #4
    9a8a:	d109      	bne.n	9aa0 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
    9a8c:	4ba7      	ldr	r3, [pc, #668]	; (9d2c <f_open+0x3a0>)
    9a8e:	18fc      	adds	r4, r7, r3
    9a90:	2387      	movs	r3, #135	; 0x87
    9a92:	009b      	lsls	r3, r3, #2
    9a94:	18fb      	adds	r3, r7, r3
    9a96:	0018      	movs	r0, r3
    9a98:	4ba7      	ldr	r3, [pc, #668]	; (9d38 <f_open+0x3ac>)
    9a9a:	4798      	blx	r3
    9a9c:	0003      	movs	r3, r0
    9a9e:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    9aa0:	4ba1      	ldr	r3, [pc, #644]	; (9d28 <f_open+0x39c>)
    9aa2:	2294      	movs	r2, #148	; 0x94
    9aa4:	0092      	lsls	r2, r2, #2
    9aa6:	4694      	mov	ip, r2
    9aa8:	44bc      	add	ip, r7
    9aaa:	4463      	add	r3, ip
    9aac:	4a9e      	ldr	r2, [pc, #632]	; (9d28 <f_open+0x39c>)
    9aae:	2194      	movs	r1, #148	; 0x94
    9ab0:	0089      	lsls	r1, r1, #2
    9ab2:	468c      	mov	ip, r1
    9ab4:	44bc      	add	ip, r7
    9ab6:	4462      	add	r2, ip
    9ab8:	7812      	ldrb	r2, [r2, #0]
    9aba:	2108      	movs	r1, #8
    9abc:	430a      	orrs	r2, r1
    9abe:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
    9ac0:	2387      	movs	r3, #135	; 0x87
    9ac2:	009b      	lsls	r3, r3, #2
    9ac4:	18fb      	adds	r3, r7, r3
    9ac6:	695b      	ldr	r3, [r3, #20]
    9ac8:	2292      	movs	r2, #146	; 0x92
    9aca:	0092      	lsls	r2, r2, #2
    9acc:	18ba      	adds	r2, r7, r2
    9ace:	6013      	str	r3, [r2, #0]
    9ad0:	e01c      	b.n	9b0c <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    9ad2:	2392      	movs	r3, #146	; 0x92
    9ad4:	009b      	lsls	r3, r3, #2
    9ad6:	18fb      	adds	r3, r7, r3
    9ad8:	681b      	ldr	r3, [r3, #0]
    9ada:	330b      	adds	r3, #11
    9adc:	781b      	ldrb	r3, [r3, #0]
    9ade:	001a      	movs	r2, r3
    9ae0:	2311      	movs	r3, #17
    9ae2:	4013      	ands	r3, r2
    9ae4:	d004      	beq.n	9af0 <f_open+0x164>
				res = FR_DENIED;
    9ae6:	4b91      	ldr	r3, [pc, #580]	; (9d2c <f_open+0x3a0>)
    9ae8:	18fb      	adds	r3, r7, r3
    9aea:	2207      	movs	r2, #7
    9aec:	701a      	strb	r2, [r3, #0]
    9aee:	e00d      	b.n	9b0c <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    9af0:	4b8d      	ldr	r3, [pc, #564]	; (9d28 <f_open+0x39c>)
    9af2:	2294      	movs	r2, #148	; 0x94
    9af4:	0092      	lsls	r2, r2, #2
    9af6:	4694      	mov	ip, r2
    9af8:	44bc      	add	ip, r7
    9afa:	4463      	add	r3, ip
    9afc:	781b      	ldrb	r3, [r3, #0]
    9afe:	2204      	movs	r2, #4
    9b00:	4013      	ands	r3, r2
    9b02:	d003      	beq.n	9b0c <f_open+0x180>
					res = FR_EXIST;
    9b04:	4b89      	ldr	r3, [pc, #548]	; (9d2c <f_open+0x3a0>)
    9b06:	18fb      	adds	r3, r7, r3
    9b08:	2208      	movs	r2, #8
    9b0a:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    9b0c:	4b87      	ldr	r3, [pc, #540]	; (9d2c <f_open+0x3a0>)
    9b0e:	18fb      	adds	r3, r7, r3
    9b10:	781b      	ldrb	r3, [r3, #0]
    9b12:	2b00      	cmp	r3, #0
    9b14:	d000      	beq.n	9b18 <f_open+0x18c>
    9b16:	e12f      	b.n	9d78 <f_open+0x3ec>
    9b18:	4b83      	ldr	r3, [pc, #524]	; (9d28 <f_open+0x39c>)
    9b1a:	2294      	movs	r2, #148	; 0x94
    9b1c:	0092      	lsls	r2, r2, #2
    9b1e:	4694      	mov	ip, r2
    9b20:	44bc      	add	ip, r7
    9b22:	4463      	add	r3, ip
    9b24:	781b      	ldrb	r3, [r3, #0]
    9b26:	2208      	movs	r2, #8
    9b28:	4013      	ands	r3, r2
    9b2a:	d100      	bne.n	9b2e <f_open+0x1a2>
    9b2c:	e124      	b.n	9d78 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
    9b2e:	4b83      	ldr	r3, [pc, #524]	; (9d3c <f_open+0x3b0>)
    9b30:	4798      	blx	r3
    9b32:	0003      	movs	r3, r0
    9b34:	2291      	movs	r2, #145	; 0x91
    9b36:	0092      	lsls	r2, r2, #2
    9b38:	18ba      	adds	r2, r7, r2
    9b3a:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
    9b3c:	2392      	movs	r3, #146	; 0x92
    9b3e:	009b      	lsls	r3, r3, #2
    9b40:	18fb      	adds	r3, r7, r3
    9b42:	681b      	ldr	r3, [r3, #0]
    9b44:	330e      	adds	r3, #14
    9b46:	2291      	movs	r2, #145	; 0x91
    9b48:	0092      	lsls	r2, r2, #2
    9b4a:	18ba      	adds	r2, r7, r2
    9b4c:	6812      	ldr	r2, [r2, #0]
    9b4e:	b2d2      	uxtb	r2, r2
    9b50:	701a      	strb	r2, [r3, #0]
    9b52:	2392      	movs	r3, #146	; 0x92
    9b54:	009b      	lsls	r3, r3, #2
    9b56:	18fb      	adds	r3, r7, r3
    9b58:	681b      	ldr	r3, [r3, #0]
    9b5a:	330f      	adds	r3, #15
    9b5c:	2291      	movs	r2, #145	; 0x91
    9b5e:	0092      	lsls	r2, r2, #2
    9b60:	18ba      	adds	r2, r7, r2
    9b62:	6812      	ldr	r2, [r2, #0]
    9b64:	b292      	uxth	r2, r2
    9b66:	0a12      	lsrs	r2, r2, #8
    9b68:	b292      	uxth	r2, r2
    9b6a:	b2d2      	uxtb	r2, r2
    9b6c:	701a      	strb	r2, [r3, #0]
    9b6e:	2392      	movs	r3, #146	; 0x92
    9b70:	009b      	lsls	r3, r3, #2
    9b72:	18fb      	adds	r3, r7, r3
    9b74:	681b      	ldr	r3, [r3, #0]
    9b76:	3310      	adds	r3, #16
    9b78:	2291      	movs	r2, #145	; 0x91
    9b7a:	0092      	lsls	r2, r2, #2
    9b7c:	18ba      	adds	r2, r7, r2
    9b7e:	6812      	ldr	r2, [r2, #0]
    9b80:	0c12      	lsrs	r2, r2, #16
    9b82:	b2d2      	uxtb	r2, r2
    9b84:	701a      	strb	r2, [r3, #0]
    9b86:	2392      	movs	r3, #146	; 0x92
    9b88:	009b      	lsls	r3, r3, #2
    9b8a:	18fb      	adds	r3, r7, r3
    9b8c:	681b      	ldr	r3, [r3, #0]
    9b8e:	3311      	adds	r3, #17
    9b90:	2291      	movs	r2, #145	; 0x91
    9b92:	0092      	lsls	r2, r2, #2
    9b94:	18ba      	adds	r2, r7, r2
    9b96:	6812      	ldr	r2, [r2, #0]
    9b98:	0e12      	lsrs	r2, r2, #24
    9b9a:	b2d2      	uxtb	r2, r2
    9b9c:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    9b9e:	2392      	movs	r3, #146	; 0x92
    9ba0:	009b      	lsls	r3, r3, #2
    9ba2:	18fb      	adds	r3, r7, r3
    9ba4:	681b      	ldr	r3, [r3, #0]
    9ba6:	330b      	adds	r3, #11
    9ba8:	2200      	movs	r2, #0
    9baa:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    9bac:	2392      	movs	r3, #146	; 0x92
    9bae:	009b      	lsls	r3, r3, #2
    9bb0:	18fb      	adds	r3, r7, r3
    9bb2:	681b      	ldr	r3, [r3, #0]
    9bb4:	331c      	adds	r3, #28
    9bb6:	2200      	movs	r2, #0
    9bb8:	701a      	strb	r2, [r3, #0]
    9bba:	2392      	movs	r3, #146	; 0x92
    9bbc:	009b      	lsls	r3, r3, #2
    9bbe:	18fb      	adds	r3, r7, r3
    9bc0:	681b      	ldr	r3, [r3, #0]
    9bc2:	331d      	adds	r3, #29
    9bc4:	2200      	movs	r2, #0
    9bc6:	701a      	strb	r2, [r3, #0]
    9bc8:	2392      	movs	r3, #146	; 0x92
    9bca:	009b      	lsls	r3, r3, #2
    9bcc:	18fb      	adds	r3, r7, r3
    9bce:	681b      	ldr	r3, [r3, #0]
    9bd0:	331e      	adds	r3, #30
    9bd2:	2200      	movs	r2, #0
    9bd4:	701a      	strb	r2, [r3, #0]
    9bd6:	2392      	movs	r3, #146	; 0x92
    9bd8:	009b      	lsls	r3, r3, #2
    9bda:	18fb      	adds	r3, r7, r3
    9bdc:	681b      	ldr	r3, [r3, #0]
    9bde:	331f      	adds	r3, #31
    9be0:	2200      	movs	r2, #0
    9be2:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
    9be4:	2392      	movs	r3, #146	; 0x92
    9be6:	009b      	lsls	r3, r3, #2
    9be8:	18fb      	adds	r3, r7, r3
    9bea:	681b      	ldr	r3, [r3, #0]
    9bec:	3315      	adds	r3, #21
    9bee:	781b      	ldrb	r3, [r3, #0]
    9bf0:	021b      	lsls	r3, r3, #8
    9bf2:	b21a      	sxth	r2, r3
    9bf4:	2392      	movs	r3, #146	; 0x92
    9bf6:	009b      	lsls	r3, r3, #2
    9bf8:	18fb      	adds	r3, r7, r3
    9bfa:	681b      	ldr	r3, [r3, #0]
    9bfc:	3314      	adds	r3, #20
    9bfe:	781b      	ldrb	r3, [r3, #0]
    9c00:	b21b      	sxth	r3, r3
    9c02:	4313      	orrs	r3, r2
    9c04:	b21b      	sxth	r3, r3
    9c06:	b29b      	uxth	r3, r3
    9c08:	041b      	lsls	r3, r3, #16
    9c0a:	2292      	movs	r2, #146	; 0x92
    9c0c:	0092      	lsls	r2, r2, #2
    9c0e:	18ba      	adds	r2, r7, r2
    9c10:	6812      	ldr	r2, [r2, #0]
    9c12:	321b      	adds	r2, #27
    9c14:	7812      	ldrb	r2, [r2, #0]
    9c16:	0212      	lsls	r2, r2, #8
    9c18:	b211      	sxth	r1, r2
    9c1a:	2292      	movs	r2, #146	; 0x92
    9c1c:	0092      	lsls	r2, r2, #2
    9c1e:	18ba      	adds	r2, r7, r2
    9c20:	6812      	ldr	r2, [r2, #0]
    9c22:	321a      	adds	r2, #26
    9c24:	7812      	ldrb	r2, [r2, #0]
    9c26:	b212      	sxth	r2, r2
    9c28:	430a      	orrs	r2, r1
    9c2a:	b212      	sxth	r2, r2
    9c2c:	b292      	uxth	r2, r2
    9c2e:	4313      	orrs	r3, r2
    9c30:	2290      	movs	r2, #144	; 0x90
    9c32:	0092      	lsls	r2, r2, #2
    9c34:	18ba      	adds	r2, r7, r2
    9c36:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
    9c38:	2392      	movs	r3, #146	; 0x92
    9c3a:	009b      	lsls	r3, r3, #2
    9c3c:	18fb      	adds	r3, r7, r3
    9c3e:	681b      	ldr	r3, [r3, #0]
    9c40:	331a      	adds	r3, #26
    9c42:	2200      	movs	r2, #0
    9c44:	701a      	strb	r2, [r3, #0]
    9c46:	2392      	movs	r3, #146	; 0x92
    9c48:	009b      	lsls	r3, r3, #2
    9c4a:	18fb      	adds	r3, r7, r3
    9c4c:	681b      	ldr	r3, [r3, #0]
    9c4e:	331b      	adds	r3, #27
    9c50:	2200      	movs	r2, #0
    9c52:	701a      	strb	r2, [r3, #0]
    9c54:	2392      	movs	r3, #146	; 0x92
    9c56:	009b      	lsls	r3, r3, #2
    9c58:	18fb      	adds	r3, r7, r3
    9c5a:	681b      	ldr	r3, [r3, #0]
    9c5c:	3314      	adds	r3, #20
    9c5e:	2200      	movs	r2, #0
    9c60:	701a      	strb	r2, [r3, #0]
    9c62:	2392      	movs	r3, #146	; 0x92
    9c64:	009b      	lsls	r3, r3, #2
    9c66:	18fb      	adds	r3, r7, r3
    9c68:	681b      	ldr	r3, [r3, #0]
    9c6a:	3315      	adds	r3, #21
    9c6c:	2200      	movs	r2, #0
    9c6e:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
    9c70:	2387      	movs	r3, #135	; 0x87
    9c72:	009b      	lsls	r3, r3, #2
    9c74:	18fb      	adds	r3, r7, r3
    9c76:	681b      	ldr	r3, [r3, #0]
    9c78:	2201      	movs	r2, #1
    9c7a:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    9c7c:	2390      	movs	r3, #144	; 0x90
    9c7e:	009b      	lsls	r3, r3, #2
    9c80:	18fb      	adds	r3, r7, r3
    9c82:	681b      	ldr	r3, [r3, #0]
    9c84:	2b00      	cmp	r3, #0
    9c86:	d100      	bne.n	9c8a <f_open+0x2fe>
    9c88:	e076      	b.n	9d78 <f_open+0x3ec>
				dw = dj.fs->winsect;
    9c8a:	2387      	movs	r3, #135	; 0x87
    9c8c:	009b      	lsls	r3, r3, #2
    9c8e:	18fb      	adds	r3, r7, r3
    9c90:	681b      	ldr	r3, [r3, #0]
    9c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9c94:	2291      	movs	r2, #145	; 0x91
    9c96:	0092      	lsls	r2, r2, #2
    9c98:	18ba      	adds	r2, r7, r2
    9c9a:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
    9c9c:	2387      	movs	r3, #135	; 0x87
    9c9e:	009b      	lsls	r3, r3, #2
    9ca0:	18fb      	adds	r3, r7, r3
    9ca2:	681b      	ldr	r3, [r3, #0]
    9ca4:	4a21      	ldr	r2, [pc, #132]	; (9d2c <f_open+0x3a0>)
    9ca6:	18bc      	adds	r4, r7, r2
    9ca8:	2290      	movs	r2, #144	; 0x90
    9caa:	0092      	lsls	r2, r2, #2
    9cac:	18ba      	adds	r2, r7, r2
    9cae:	6812      	ldr	r2, [r2, #0]
    9cb0:	0011      	movs	r1, r2
    9cb2:	0018      	movs	r0, r3
    9cb4:	4b22      	ldr	r3, [pc, #136]	; (9d40 <f_open+0x3b4>)
    9cb6:	4798      	blx	r3
    9cb8:	0003      	movs	r3, r0
    9cba:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
    9cbc:	4b1b      	ldr	r3, [pc, #108]	; (9d2c <f_open+0x3a0>)
    9cbe:	18fb      	adds	r3, r7, r3
    9cc0:	781b      	ldrb	r3, [r3, #0]
    9cc2:	2b00      	cmp	r3, #0
    9cc4:	d158      	bne.n	9d78 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    9cc6:	2387      	movs	r3, #135	; 0x87
    9cc8:	009b      	lsls	r3, r3, #2
    9cca:	18fb      	adds	r3, r7, r3
    9ccc:	681b      	ldr	r3, [r3, #0]
    9cce:	2290      	movs	r2, #144	; 0x90
    9cd0:	0092      	lsls	r2, r2, #2
    9cd2:	18ba      	adds	r2, r7, r2
    9cd4:	6812      	ldr	r2, [r2, #0]
    9cd6:	3a01      	subs	r2, #1
    9cd8:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
    9cda:	2387      	movs	r3, #135	; 0x87
    9cdc:	009b      	lsls	r3, r3, #2
    9cde:	18fb      	adds	r3, r7, r3
    9ce0:	681b      	ldr	r3, [r3, #0]
    9ce2:	4a12      	ldr	r2, [pc, #72]	; (9d2c <f_open+0x3a0>)
    9ce4:	18bc      	adds	r4, r7, r2
    9ce6:	2291      	movs	r2, #145	; 0x91
    9ce8:	0092      	lsls	r2, r2, #2
    9cea:	18ba      	adds	r2, r7, r2
    9cec:	6812      	ldr	r2, [r2, #0]
    9cee:	0011      	movs	r1, r2
    9cf0:	0018      	movs	r0, r3
    9cf2:	4b14      	ldr	r3, [pc, #80]	; (9d44 <f_open+0x3b8>)
    9cf4:	4798      	blx	r3
    9cf6:	0003      	movs	r3, r0
    9cf8:	7023      	strb	r3, [r4, #0]
    9cfa:	e03d      	b.n	9d78 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    9cfc:	4b0b      	ldr	r3, [pc, #44]	; (9d2c <f_open+0x3a0>)
    9cfe:	18fb      	adds	r3, r7, r3
    9d00:	781b      	ldrb	r3, [r3, #0]
    9d02:	2b00      	cmp	r3, #0
    9d04:	d138      	bne.n	9d78 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    9d06:	2392      	movs	r3, #146	; 0x92
    9d08:	009b      	lsls	r3, r3, #2
    9d0a:	18fb      	adds	r3, r7, r3
    9d0c:	681b      	ldr	r3, [r3, #0]
    9d0e:	330b      	adds	r3, #11
    9d10:	781b      	ldrb	r3, [r3, #0]
    9d12:	001a      	movs	r2, r3
    9d14:	2310      	movs	r3, #16
    9d16:	4013      	ands	r3, r2
    9d18:	d016      	beq.n	9d48 <f_open+0x3bc>
				res = FR_NO_FILE;
    9d1a:	4b04      	ldr	r3, [pc, #16]	; (9d2c <f_open+0x3a0>)
    9d1c:	18fb      	adds	r3, r7, r3
    9d1e:	2204      	movs	r2, #4
    9d20:	701a      	strb	r2, [r3, #0]
    9d22:	e029      	b.n	9d78 <f_open+0x3ec>
    9d24:	fffffdac 	.word	0xfffffdac
    9d28:	fffffdb7 	.word	0xfffffdb7
    9d2c:	0000024f 	.word	0x0000024f
    9d30:	000092e5 	.word	0x000092e5
    9d34:	000090d9 	.word	0x000090d9
    9d38:	00008851 	.word	0x00008851
    9d3c:	000073a1 	.word	0x000073a1
    9d40:	00007b25 	.word	0x00007b25
    9d44:	000074e5 	.word	0x000074e5
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    9d48:	4b5a      	ldr	r3, [pc, #360]	; (9eb4 <f_open+0x528>)
    9d4a:	2294      	movs	r2, #148	; 0x94
    9d4c:	0092      	lsls	r2, r2, #2
    9d4e:	4694      	mov	ip, r2
    9d50:	44bc      	add	ip, r7
    9d52:	4463      	add	r3, ip
    9d54:	781b      	ldrb	r3, [r3, #0]
    9d56:	2202      	movs	r2, #2
    9d58:	4013      	ands	r3, r2
    9d5a:	d00d      	beq.n	9d78 <f_open+0x3ec>
    9d5c:	2392      	movs	r3, #146	; 0x92
    9d5e:	009b      	lsls	r3, r3, #2
    9d60:	18fb      	adds	r3, r7, r3
    9d62:	681b      	ldr	r3, [r3, #0]
    9d64:	330b      	adds	r3, #11
    9d66:	781b      	ldrb	r3, [r3, #0]
    9d68:	001a      	movs	r2, r3
    9d6a:	2301      	movs	r3, #1
    9d6c:	4013      	ands	r3, r2
    9d6e:	d003      	beq.n	9d78 <f_open+0x3ec>
					res = FR_DENIED;
    9d70:	4b51      	ldr	r3, [pc, #324]	; (9eb8 <f_open+0x52c>)
    9d72:	18fb      	adds	r3, r7, r3
    9d74:	2207      	movs	r2, #7
    9d76:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
    9d78:	4b4f      	ldr	r3, [pc, #316]	; (9eb8 <f_open+0x52c>)
    9d7a:	18fb      	adds	r3, r7, r3
    9d7c:	781b      	ldrb	r3, [r3, #0]
    9d7e:	2b00      	cmp	r3, #0
    9d80:	d126      	bne.n	9dd0 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    9d82:	4b4c      	ldr	r3, [pc, #304]	; (9eb4 <f_open+0x528>)
    9d84:	2294      	movs	r2, #148	; 0x94
    9d86:	0092      	lsls	r2, r2, #2
    9d88:	4694      	mov	ip, r2
    9d8a:	44bc      	add	ip, r7
    9d8c:	4463      	add	r3, ip
    9d8e:	781b      	ldrb	r3, [r3, #0]
    9d90:	2208      	movs	r2, #8
    9d92:	4013      	ands	r3, r2
    9d94:	d00f      	beq.n	9db6 <f_open+0x42a>
			mode |= FA__WRITTEN;
    9d96:	4b47      	ldr	r3, [pc, #284]	; (9eb4 <f_open+0x528>)
    9d98:	2294      	movs	r2, #148	; 0x94
    9d9a:	0092      	lsls	r2, r2, #2
    9d9c:	4694      	mov	ip, r2
    9d9e:	44bc      	add	ip, r7
    9da0:	4463      	add	r3, ip
    9da2:	4a44      	ldr	r2, [pc, #272]	; (9eb4 <f_open+0x528>)
    9da4:	2194      	movs	r1, #148	; 0x94
    9da6:	0089      	lsls	r1, r1, #2
    9da8:	468c      	mov	ip, r1
    9daa:	44bc      	add	ip, r7
    9dac:	4462      	add	r2, ip
    9dae:	7812      	ldrb	r2, [r2, #0]
    9db0:	2120      	movs	r1, #32
    9db2:	430a      	orrs	r2, r1
    9db4:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    9db6:	2387      	movs	r3, #135	; 0x87
    9db8:	009b      	lsls	r3, r3, #2
    9dba:	18fb      	adds	r3, r7, r3
    9dbc:	681b      	ldr	r3, [r3, #0]
    9dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9dc0:	68fb      	ldr	r3, [r7, #12]
    9dc2:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
    9dc4:	68fb      	ldr	r3, [r7, #12]
    9dc6:	2292      	movs	r2, #146	; 0x92
    9dc8:	0092      	lsls	r2, r2, #2
    9dca:	18ba      	adds	r2, r7, r2
    9dcc:	6812      	ldr	r2, [r2, #0]
    9dce:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
    9dd0:	4b39      	ldr	r3, [pc, #228]	; (9eb8 <f_open+0x52c>)
    9dd2:	18fb      	adds	r3, r7, r3
    9dd4:	781b      	ldrb	r3, [r3, #0]
    9dd6:	2b00      	cmp	r3, #0
    9dd8:	d163      	bne.n	9ea2 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
    9dda:	68fb      	ldr	r3, [r7, #12]
    9ddc:	4a35      	ldr	r2, [pc, #212]	; (9eb4 <f_open+0x528>)
    9dde:	2194      	movs	r1, #148	; 0x94
    9de0:	0089      	lsls	r1, r1, #2
    9de2:	468c      	mov	ip, r1
    9de4:	44bc      	add	ip, r7
    9de6:	4462      	add	r2, ip
    9de8:	7812      	ldrb	r2, [r2, #0]
    9dea:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    9dec:	2392      	movs	r3, #146	; 0x92
    9dee:	009b      	lsls	r3, r3, #2
    9df0:	18fb      	adds	r3, r7, r3
    9df2:	681b      	ldr	r3, [r3, #0]
    9df4:	3315      	adds	r3, #21
    9df6:	781b      	ldrb	r3, [r3, #0]
    9df8:	021b      	lsls	r3, r3, #8
    9dfa:	b21a      	sxth	r2, r3
    9dfc:	2392      	movs	r3, #146	; 0x92
    9dfe:	009b      	lsls	r3, r3, #2
    9e00:	18fb      	adds	r3, r7, r3
    9e02:	681b      	ldr	r3, [r3, #0]
    9e04:	3314      	adds	r3, #20
    9e06:	781b      	ldrb	r3, [r3, #0]
    9e08:	b21b      	sxth	r3, r3
    9e0a:	4313      	orrs	r3, r2
    9e0c:	b21b      	sxth	r3, r3
    9e0e:	b29b      	uxth	r3, r3
    9e10:	041b      	lsls	r3, r3, #16
    9e12:	2292      	movs	r2, #146	; 0x92
    9e14:	0092      	lsls	r2, r2, #2
    9e16:	18ba      	adds	r2, r7, r2
    9e18:	6812      	ldr	r2, [r2, #0]
    9e1a:	321b      	adds	r2, #27
    9e1c:	7812      	ldrb	r2, [r2, #0]
    9e1e:	0212      	lsls	r2, r2, #8
    9e20:	b211      	sxth	r1, r2
    9e22:	2292      	movs	r2, #146	; 0x92
    9e24:	0092      	lsls	r2, r2, #2
    9e26:	18ba      	adds	r2, r7, r2
    9e28:	6812      	ldr	r2, [r2, #0]
    9e2a:	321a      	adds	r2, #26
    9e2c:	7812      	ldrb	r2, [r2, #0]
    9e2e:	b212      	sxth	r2, r2
    9e30:	430a      	orrs	r2, r1
    9e32:	b212      	sxth	r2, r2
    9e34:	b292      	uxth	r2, r2
    9e36:	431a      	orrs	r2, r3
    9e38:	68fb      	ldr	r3, [r7, #12]
    9e3a:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    9e3c:	2392      	movs	r3, #146	; 0x92
    9e3e:	009b      	lsls	r3, r3, #2
    9e40:	18fb      	adds	r3, r7, r3
    9e42:	681b      	ldr	r3, [r3, #0]
    9e44:	331f      	adds	r3, #31
    9e46:	781b      	ldrb	r3, [r3, #0]
    9e48:	061a      	lsls	r2, r3, #24
    9e4a:	2392      	movs	r3, #146	; 0x92
    9e4c:	009b      	lsls	r3, r3, #2
    9e4e:	18fb      	adds	r3, r7, r3
    9e50:	681b      	ldr	r3, [r3, #0]
    9e52:	331e      	adds	r3, #30
    9e54:	781b      	ldrb	r3, [r3, #0]
    9e56:	041b      	lsls	r3, r3, #16
    9e58:	4313      	orrs	r3, r2
    9e5a:	2292      	movs	r2, #146	; 0x92
    9e5c:	0092      	lsls	r2, r2, #2
    9e5e:	18ba      	adds	r2, r7, r2
    9e60:	6812      	ldr	r2, [r2, #0]
    9e62:	321d      	adds	r2, #29
    9e64:	7812      	ldrb	r2, [r2, #0]
    9e66:	0212      	lsls	r2, r2, #8
    9e68:	4313      	orrs	r3, r2
    9e6a:	2292      	movs	r2, #146	; 0x92
    9e6c:	0092      	lsls	r2, r2, #2
    9e6e:	18ba      	adds	r2, r7, r2
    9e70:	6812      	ldr	r2, [r2, #0]
    9e72:	321c      	adds	r2, #28
    9e74:	7812      	ldrb	r2, [r2, #0]
    9e76:	431a      	orrs	r2, r3
    9e78:	68fb      	ldr	r3, [r7, #12]
    9e7a:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
    9e7c:	68fb      	ldr	r3, [r7, #12]
    9e7e:	2200      	movs	r2, #0
    9e80:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
    9e82:	68fb      	ldr	r3, [r7, #12]
    9e84:	2200      	movs	r2, #0
    9e86:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    9e88:	2387      	movs	r3, #135	; 0x87
    9e8a:	009b      	lsls	r3, r3, #2
    9e8c:	18fb      	adds	r3, r7, r3
    9e8e:	681a      	ldr	r2, [r3, #0]
    9e90:	68fb      	ldr	r3, [r7, #12]
    9e92:	601a      	str	r2, [r3, #0]
    9e94:	2387      	movs	r3, #135	; 0x87
    9e96:	009b      	lsls	r3, r3, #2
    9e98:	18fb      	adds	r3, r7, r3
    9e9a:	681b      	ldr	r3, [r3, #0]
    9e9c:	88da      	ldrh	r2, [r3, #6]
    9e9e:	68fb      	ldr	r3, [r7, #12]
    9ea0:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
    9ea2:	4b05      	ldr	r3, [pc, #20]	; (9eb8 <f_open+0x52c>)
    9ea4:	18fb      	adds	r3, r7, r3
    9ea6:	781b      	ldrb	r3, [r3, #0]
}
    9ea8:	0018      	movs	r0, r3
    9eaa:	46bd      	mov	sp, r7
    9eac:	2395      	movs	r3, #149	; 0x95
    9eae:	009b      	lsls	r3, r3, #2
    9eb0:	449d      	add	sp, r3
    9eb2:	bd90      	pop	{r4, r7, pc}
    9eb4:	fffffdb7 	.word	0xfffffdb7
    9eb8:	0000024f 	.word	0x0000024f

00009ebc <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    9ebc:	b590      	push	{r4, r7, lr}
    9ebe:	b08d      	sub	sp, #52	; 0x34
    9ec0:	af00      	add	r7, sp, #0
    9ec2:	60f8      	str	r0, [r7, #12]
    9ec4:	60b9      	str	r1, [r7, #8]
    9ec6:	607a      	str	r2, [r7, #4]
    9ec8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
    9eca:	68bb      	ldr	r3, [r7, #8]
    9ecc:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Initialize byte counter */
    9ece:	683b      	ldr	r3, [r7, #0]
    9ed0:	2200      	movs	r2, #0
    9ed2:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
    9ed4:	68fb      	ldr	r3, [r7, #12]
    9ed6:	681a      	ldr	r2, [r3, #0]
    9ed8:	68fb      	ldr	r3, [r7, #12]
    9eda:	889b      	ldrh	r3, [r3, #4]
    9edc:	211f      	movs	r1, #31
    9ede:	187c      	adds	r4, r7, r1
    9ee0:	0019      	movs	r1, r3
    9ee2:	0010      	movs	r0, r2
    9ee4:	4b96      	ldr	r3, [pc, #600]	; (a140 <f_read+0x284>)
    9ee6:	4798      	blx	r3
    9ee8:	0003      	movs	r3, r0
    9eea:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    9eec:	231f      	movs	r3, #31
    9eee:	18fb      	adds	r3, r7, r3
    9ef0:	781b      	ldrb	r3, [r3, #0]
    9ef2:	2b00      	cmp	r3, #0
    9ef4:	d003      	beq.n	9efe <f_read+0x42>
    9ef6:	231f      	movs	r3, #31
    9ef8:	18fb      	adds	r3, r7, r3
    9efa:	781b      	ldrb	r3, [r3, #0]
    9efc:	e11b      	b.n	a136 <f_read+0x27a>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    9efe:	68fb      	ldr	r3, [r7, #12]
    9f00:	799b      	ldrb	r3, [r3, #6]
    9f02:	b25b      	sxtb	r3, r3
    9f04:	2b00      	cmp	r3, #0
    9f06:	da01      	bge.n	9f0c <f_read+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    9f08:	2302      	movs	r3, #2
    9f0a:	e114      	b.n	a136 <f_read+0x27a>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    9f0c:	68fb      	ldr	r3, [r7, #12]
    9f0e:	799b      	ldrb	r3, [r3, #6]
    9f10:	001a      	movs	r2, r3
    9f12:	2301      	movs	r3, #1
    9f14:	4013      	ands	r3, r2
    9f16:	d101      	bne.n	9f1c <f_read+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
    9f18:	2307      	movs	r3, #7
    9f1a:	e10c      	b.n	a136 <f_read+0x27a>
	remain = fp->fsize - fp->fptr;
    9f1c:	68fb      	ldr	r3, [r7, #12]
    9f1e:	68da      	ldr	r2, [r3, #12]
    9f20:	68fb      	ldr	r3, [r7, #12]
    9f22:	689b      	ldr	r3, [r3, #8]
    9f24:	1ad3      	subs	r3, r2, r3
    9f26:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    9f28:	687a      	ldr	r2, [r7, #4]
    9f2a:	69bb      	ldr	r3, [r7, #24]
    9f2c:	429a      	cmp	r2, r3
    9f2e:	d800      	bhi.n	9f32 <f_read+0x76>
    9f30:	e0fc      	b.n	a12c <f_read+0x270>
    9f32:	69bb      	ldr	r3, [r7, #24]
    9f34:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
    9f36:	e0f9      	b.n	a12c <f_read+0x270>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    9f38:	68fb      	ldr	r3, [r7, #12]
    9f3a:	689b      	ldr	r3, [r3, #8]
    9f3c:	05db      	lsls	r3, r3, #23
    9f3e:	0ddb      	lsrs	r3, r3, #23
    9f40:	d000      	beq.n	9f44 <f_read+0x88>
    9f42:	e0b0      	b.n	a0a6 <f_read+0x1ea>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    9f44:	68fb      	ldr	r3, [r7, #12]
    9f46:	689b      	ldr	r3, [r3, #8]
    9f48:	0a5b      	lsrs	r3, r3, #9
    9f4a:	b2da      	uxtb	r2, r3
    9f4c:	68fb      	ldr	r3, [r7, #12]
    9f4e:	681b      	ldr	r3, [r3, #0]
    9f50:	789b      	ldrb	r3, [r3, #2]
    9f52:	3b01      	subs	r3, #1
    9f54:	b2d9      	uxtb	r1, r3
    9f56:	2317      	movs	r3, #23
    9f58:	18fb      	adds	r3, r7, r3
    9f5a:	400a      	ands	r2, r1
    9f5c:	701a      	strb	r2, [r3, #0]
			if (!csect) {						/* On the cluster boundary? */
    9f5e:	2317      	movs	r3, #23
    9f60:	18fb      	adds	r3, r7, r3
    9f62:	781b      	ldrb	r3, [r3, #0]
    9f64:	2b00      	cmp	r3, #0
    9f66:	d12e      	bne.n	9fc6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
    9f68:	68fb      	ldr	r3, [r7, #12]
    9f6a:	689b      	ldr	r3, [r3, #8]
    9f6c:	2b00      	cmp	r3, #0
    9f6e:	d103      	bne.n	9f78 <f_read+0xbc>
					clst = fp->sclust;			/* Follow from the origin */
    9f70:	68fb      	ldr	r3, [r7, #12]
    9f72:	691b      	ldr	r3, [r3, #16]
    9f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    9f76:	e009      	b.n	9f8c <f_read+0xd0>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    9f78:	68fb      	ldr	r3, [r7, #12]
    9f7a:	681a      	ldr	r2, [r3, #0]
    9f7c:	68fb      	ldr	r3, [r7, #12]
    9f7e:	695b      	ldr	r3, [r3, #20]
    9f80:	0019      	movs	r1, r3
    9f82:	0010      	movs	r0, r2
    9f84:	4b6f      	ldr	r3, [pc, #444]	; (a144 <f_read+0x288>)
    9f86:	4798      	blx	r3
    9f88:	0003      	movs	r3, r0
    9f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    9f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9f8e:	2b01      	cmp	r3, #1
    9f90:	d809      	bhi.n	9fa6 <f_read+0xea>
    9f92:	68fb      	ldr	r3, [r7, #12]
    9f94:	799b      	ldrb	r3, [r3, #6]
    9f96:	2280      	movs	r2, #128	; 0x80
    9f98:	4252      	negs	r2, r2
    9f9a:	4313      	orrs	r3, r2
    9f9c:	b2da      	uxtb	r2, r3
    9f9e:	68fb      	ldr	r3, [r7, #12]
    9fa0:	719a      	strb	r2, [r3, #6]
    9fa2:	2302      	movs	r3, #2
    9fa4:	e0c7      	b.n	a136 <f_read+0x27a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    9fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9fa8:	3301      	adds	r3, #1
    9faa:	d109      	bne.n	9fc0 <f_read+0x104>
    9fac:	68fb      	ldr	r3, [r7, #12]
    9fae:	799b      	ldrb	r3, [r3, #6]
    9fb0:	2280      	movs	r2, #128	; 0x80
    9fb2:	4252      	negs	r2, r2
    9fb4:	4313      	orrs	r3, r2
    9fb6:	b2da      	uxtb	r2, r3
    9fb8:	68fb      	ldr	r3, [r7, #12]
    9fba:	719a      	strb	r2, [r3, #6]
    9fbc:	2301      	movs	r3, #1
    9fbe:	e0ba      	b.n	a136 <f_read+0x27a>
				fp->clust = clst;				/* Update current cluster */
    9fc0:	68fb      	ldr	r3, [r7, #12]
    9fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    9fc4:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    9fc6:	68fb      	ldr	r3, [r7, #12]
    9fc8:	681a      	ldr	r2, [r3, #0]
    9fca:	68fb      	ldr	r3, [r7, #12]
    9fcc:	695b      	ldr	r3, [r3, #20]
    9fce:	0019      	movs	r1, r3
    9fd0:	0010      	movs	r0, r2
    9fd2:	4b5d      	ldr	r3, [pc, #372]	; (a148 <f_read+0x28c>)
    9fd4:	4798      	blx	r3
    9fd6:	0003      	movs	r3, r0
    9fd8:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    9fda:	693b      	ldr	r3, [r7, #16]
    9fdc:	2b00      	cmp	r3, #0
    9fde:	d109      	bne.n	9ff4 <f_read+0x138>
    9fe0:	68fb      	ldr	r3, [r7, #12]
    9fe2:	799b      	ldrb	r3, [r3, #6]
    9fe4:	2280      	movs	r2, #128	; 0x80
    9fe6:	4252      	negs	r2, r2
    9fe8:	4313      	orrs	r3, r2
    9fea:	b2da      	uxtb	r2, r3
    9fec:	68fb      	ldr	r3, [r7, #12]
    9fee:	719a      	strb	r2, [r3, #6]
    9ff0:	2302      	movs	r3, #2
    9ff2:	e0a0      	b.n	a136 <f_read+0x27a>
			sect += csect;
    9ff4:	2317      	movs	r3, #23
    9ff6:	18fb      	adds	r3, r7, r3
    9ff8:	781b      	ldrb	r3, [r3, #0]
    9ffa:	693a      	ldr	r2, [r7, #16]
    9ffc:	18d3      	adds	r3, r2, r3
    9ffe:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    a000:	687b      	ldr	r3, [r7, #4]
    a002:	0a5b      	lsrs	r3, r3, #9
    a004:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
    a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a008:	2b00      	cmp	r3, #0
    a00a:	d049      	beq.n	a0a0 <f_read+0x1e4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    a00c:	2317      	movs	r3, #23
    a00e:	18fb      	adds	r3, r7, r3
    a010:	781a      	ldrb	r2, [r3, #0]
    a012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a014:	18d2      	adds	r2, r2, r3
    a016:	68fb      	ldr	r3, [r7, #12]
    a018:	681b      	ldr	r3, [r3, #0]
    a01a:	789b      	ldrb	r3, [r3, #2]
    a01c:	429a      	cmp	r2, r3
    a01e:	d908      	bls.n	a032 <f_read+0x176>
					cc = fp->fs->csize - csect;
    a020:	68fb      	ldr	r3, [r7, #12]
    a022:	681b      	ldr	r3, [r3, #0]
    a024:	789b      	ldrb	r3, [r3, #2]
    a026:	001a      	movs	r2, r3
    a028:	2317      	movs	r3, #23
    a02a:	18fb      	adds	r3, r7, r3
    a02c:	781b      	ldrb	r3, [r3, #0]
    a02e:	1ad3      	subs	r3, r2, r3
    a030:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    a032:	68fb      	ldr	r3, [r7, #12]
    a034:	681b      	ldr	r3, [r3, #0]
    a036:	7858      	ldrb	r0, [r3, #1]
    a038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a03a:	b2db      	uxtb	r3, r3
    a03c:	693a      	ldr	r2, [r7, #16]
    a03e:	6a39      	ldr	r1, [r7, #32]
    a040:	4c42      	ldr	r4, [pc, #264]	; (a14c <f_read+0x290>)
    a042:	47a0      	blx	r4
    a044:	1e03      	subs	r3, r0, #0
    a046:	d009      	beq.n	a05c <f_read+0x1a0>
					ABORT(fp->fs, FR_DISK_ERR);
    a048:	68fb      	ldr	r3, [r7, #12]
    a04a:	799b      	ldrb	r3, [r3, #6]
    a04c:	2280      	movs	r2, #128	; 0x80
    a04e:	4252      	negs	r2, r2
    a050:	4313      	orrs	r3, r2
    a052:	b2da      	uxtb	r2, r3
    a054:	68fb      	ldr	r3, [r7, #12]
    a056:	719a      	strb	r2, [r3, #6]
    a058:	2301      	movs	r3, #1
    a05a:	e06c      	b.n	a136 <f_read+0x27a>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    a05c:	68fb      	ldr	r3, [r7, #12]
    a05e:	681b      	ldr	r3, [r3, #0]
    a060:	791b      	ldrb	r3, [r3, #4]
    a062:	2b00      	cmp	r3, #0
    a064:	d018      	beq.n	a098 <f_read+0x1dc>
    a066:	68fb      	ldr	r3, [r7, #12]
    a068:	681b      	ldr	r3, [r3, #0]
    a06a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a06c:	693b      	ldr	r3, [r7, #16]
    a06e:	1ad2      	subs	r2, r2, r3
    a070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a072:	429a      	cmp	r2, r3
    a074:	d210      	bcs.n	a098 <f_read+0x1dc>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    a076:	68fb      	ldr	r3, [r7, #12]
    a078:	681b      	ldr	r3, [r3, #0]
    a07a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a07c:	693b      	ldr	r3, [r7, #16]
    a07e:	1ad3      	subs	r3, r2, r3
    a080:	025b      	lsls	r3, r3, #9
    a082:	6a3a      	ldr	r2, [r7, #32]
    a084:	18d0      	adds	r0, r2, r3
    a086:	68fb      	ldr	r3, [r7, #12]
    a088:	681b      	ldr	r3, [r3, #0]
    a08a:	3330      	adds	r3, #48	; 0x30
    a08c:	0019      	movs	r1, r3
    a08e:	2380      	movs	r3, #128	; 0x80
    a090:	009b      	lsls	r3, r3, #2
    a092:	001a      	movs	r2, r3
    a094:	4b2e      	ldr	r3, [pc, #184]	; (a150 <f_read+0x294>)
    a096:	4798      	blx	r3
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    a098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a09a:	025b      	lsls	r3, r3, #9
    a09c:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
    a09e:	e031      	b.n	a104 <f_read+0x248>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    a0a0:	68fb      	ldr	r3, [r7, #12]
    a0a2:	693a      	ldr	r2, [r7, #16]
    a0a4:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    a0a6:	68fb      	ldr	r3, [r7, #12]
    a0a8:	689b      	ldr	r3, [r3, #8]
    a0aa:	05db      	lsls	r3, r3, #23
    a0ac:	0ddb      	lsrs	r3, r3, #23
    a0ae:	2280      	movs	r2, #128	; 0x80
    a0b0:	0092      	lsls	r2, r2, #2
    a0b2:	1ad3      	subs	r3, r2, r3
    a0b4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
    a0b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a0b8:	687b      	ldr	r3, [r7, #4]
    a0ba:	429a      	cmp	r2, r3
    a0bc:	d901      	bls.n	a0c2 <f_read+0x206>
    a0be:	687b      	ldr	r3, [r7, #4]
    a0c0:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    a0c2:	68fb      	ldr	r3, [r7, #12]
    a0c4:	681a      	ldr	r2, [r3, #0]
    a0c6:	68fb      	ldr	r3, [r7, #12]
    a0c8:	699b      	ldr	r3, [r3, #24]
    a0ca:	0019      	movs	r1, r3
    a0cc:	0010      	movs	r0, r2
    a0ce:	4b21      	ldr	r3, [pc, #132]	; (a154 <f_read+0x298>)
    a0d0:	4798      	blx	r3
    a0d2:	1e03      	subs	r3, r0, #0
    a0d4:	d009      	beq.n	a0ea <f_read+0x22e>
			ABORT(fp->fs, FR_DISK_ERR);
    a0d6:	68fb      	ldr	r3, [r7, #12]
    a0d8:	799b      	ldrb	r3, [r3, #6]
    a0da:	2280      	movs	r2, #128	; 0x80
    a0dc:	4252      	negs	r2, r2
    a0de:	4313      	orrs	r3, r2
    a0e0:	b2da      	uxtb	r2, r3
    a0e2:	68fb      	ldr	r3, [r7, #12]
    a0e4:	719a      	strb	r2, [r3, #6]
    a0e6:	2301      	movs	r3, #1
    a0e8:	e025      	b.n	a136 <f_read+0x27a>
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    a0ea:	68fb      	ldr	r3, [r7, #12]
    a0ec:	681a      	ldr	r2, [r3, #0]
    a0ee:	68fb      	ldr	r3, [r7, #12]
    a0f0:	689b      	ldr	r3, [r3, #8]
    a0f2:	05db      	lsls	r3, r3, #23
    a0f4:	0ddb      	lsrs	r3, r3, #23
    a0f6:	3330      	adds	r3, #48	; 0x30
    a0f8:	18d1      	adds	r1, r2, r3
    a0fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a0fc:	6a3b      	ldr	r3, [r7, #32]
    a0fe:	0018      	movs	r0, r3
    a100:	4b13      	ldr	r3, [pc, #76]	; (a150 <f_read+0x294>)
    a102:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    a104:	6a3a      	ldr	r2, [r7, #32]
    a106:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a108:	18d3      	adds	r3, r2, r3
    a10a:	623b      	str	r3, [r7, #32]
    a10c:	68fb      	ldr	r3, [r7, #12]
    a10e:	689a      	ldr	r2, [r3, #8]
    a110:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a112:	18d2      	adds	r2, r2, r3
    a114:	68fb      	ldr	r3, [r7, #12]
    a116:	609a      	str	r2, [r3, #8]
    a118:	683b      	ldr	r3, [r7, #0]
    a11a:	681a      	ldr	r2, [r3, #0]
    a11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a11e:	18d2      	adds	r2, r2, r3
    a120:	683b      	ldr	r3, [r7, #0]
    a122:	601a      	str	r2, [r3, #0]
    a124:	687a      	ldr	r2, [r7, #4]
    a126:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a128:	1ad3      	subs	r3, r2, r3
    a12a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
    a12c:	687b      	ldr	r3, [r7, #4]
    a12e:	2b00      	cmp	r3, #0
    a130:	d000      	beq.n	a134 <f_read+0x278>
    a132:	e701      	b.n	9f38 <f_read+0x7c>
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
    a134:	2300      	movs	r3, #0
}
    a136:	0018      	movs	r0, r3
    a138:	46bd      	mov	sp, r7
    a13a:	b00d      	add	sp, #52	; 0x34
    a13c:	bd90      	pop	{r4, r7, pc}
    a13e:	46c0      	nop			; (mov r8, r8)
    a140:	000098e1 	.word	0x000098e1
    a144:	0000777d 	.word	0x0000777d
    a148:	00007745 	.word	0x00007745
    a14c:	000070f9 	.word	0x000070f9
    a150:	00007401 	.word	0x00007401
    a154:	000074e5 	.word	0x000074e5

0000a158 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    a158:	b590      	push	{r4, r7, lr}
    a15a:	b08b      	sub	sp, #44	; 0x2c
    a15c:	af00      	add	r7, sp, #0
    a15e:	60f8      	str	r0, [r7, #12]
    a160:	60b9      	str	r1, [r7, #8]
    a162:	607a      	str	r2, [r7, #4]
    a164:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    a166:	68bb      	ldr	r3, [r7, #8]
    a168:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    a16a:	683b      	ldr	r3, [r7, #0]
    a16c:	2200      	movs	r2, #0
    a16e:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    a170:	68fb      	ldr	r3, [r7, #12]
    a172:	681a      	ldr	r2, [r3, #0]
    a174:	68fb      	ldr	r3, [r7, #12]
    a176:	889b      	ldrh	r3, [r3, #4]
    a178:	2117      	movs	r1, #23
    a17a:	187c      	adds	r4, r7, r1
    a17c:	0019      	movs	r1, r3
    a17e:	0010      	movs	r0, r2
    a180:	4bc3      	ldr	r3, [pc, #780]	; (a490 <f_write+0x338>)
    a182:	4798      	blx	r3
    a184:	0003      	movs	r3, r0
    a186:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    a188:	2317      	movs	r3, #23
    a18a:	18fb      	adds	r3, r7, r3
    a18c:	781b      	ldrb	r3, [r3, #0]
    a18e:	2b00      	cmp	r3, #0
    a190:	d003      	beq.n	a19a <f_write+0x42>
    a192:	2317      	movs	r3, #23
    a194:	18fb      	adds	r3, r7, r3
    a196:	781b      	ldrb	r3, [r3, #0]
    a198:	e176      	b.n	a488 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    a19a:	68fb      	ldr	r3, [r7, #12]
    a19c:	799b      	ldrb	r3, [r3, #6]
    a19e:	b25b      	sxtb	r3, r3
    a1a0:	2b00      	cmp	r3, #0
    a1a2:	da01      	bge.n	a1a8 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    a1a4:	2302      	movs	r3, #2
    a1a6:	e16f      	b.n	a488 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    a1a8:	68fb      	ldr	r3, [r7, #12]
    a1aa:	799b      	ldrb	r3, [r3, #6]
    a1ac:	001a      	movs	r2, r3
    a1ae:	2302      	movs	r3, #2
    a1b0:	4013      	ands	r3, r2
    a1b2:	d101      	bne.n	a1b8 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
    a1b4:	2307      	movs	r3, #7
    a1b6:	e167      	b.n	a488 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    a1b8:	68fb      	ldr	r3, [r7, #12]
    a1ba:	68da      	ldr	r2, [r3, #12]
    a1bc:	687b      	ldr	r3, [r7, #4]
    a1be:	18d2      	adds	r2, r2, r3
    a1c0:	68fb      	ldr	r3, [r7, #12]
    a1c2:	68db      	ldr	r3, [r3, #12]
    a1c4:	429a      	cmp	r2, r3
    a1c6:	d300      	bcc.n	a1ca <f_write+0x72>
    a1c8:	e146      	b.n	a458 <f_write+0x300>
    a1ca:	2300      	movs	r3, #0
    a1cc:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
    a1ce:	e143      	b.n	a458 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    a1d0:	68fb      	ldr	r3, [r7, #12]
    a1d2:	689b      	ldr	r3, [r3, #8]
    a1d4:	05db      	lsls	r3, r3, #23
    a1d6:	0ddb      	lsrs	r3, r3, #23
    a1d8:	d000      	beq.n	a1dc <f_write+0x84>
    a1da:	e0f6      	b.n	a3ca <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    a1dc:	68fb      	ldr	r3, [r7, #12]
    a1de:	689b      	ldr	r3, [r3, #8]
    a1e0:	0a5b      	lsrs	r3, r3, #9
    a1e2:	b2da      	uxtb	r2, r3
    a1e4:	68fb      	ldr	r3, [r7, #12]
    a1e6:	681b      	ldr	r3, [r3, #0]
    a1e8:	789b      	ldrb	r3, [r3, #2]
    a1ea:	3b01      	subs	r3, #1
    a1ec:	b2d9      	uxtb	r1, r3
    a1ee:	2316      	movs	r3, #22
    a1f0:	18fb      	adds	r3, r7, r3
    a1f2:	400a      	ands	r2, r1
    a1f4:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
    a1f6:	2316      	movs	r3, #22
    a1f8:	18fb      	adds	r3, r7, r3
    a1fa:	781b      	ldrb	r3, [r3, #0]
    a1fc:	2b00      	cmp	r3, #0
    a1fe:	d140      	bne.n	a282 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
    a200:	68fb      	ldr	r3, [r7, #12]
    a202:	689b      	ldr	r3, [r3, #8]
    a204:	2b00      	cmp	r3, #0
    a206:	d111      	bne.n	a22c <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
    a208:	68fb      	ldr	r3, [r7, #12]
    a20a:	691b      	ldr	r3, [r3, #16]
    a20c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
    a20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a210:	2b00      	cmp	r3, #0
    a212:	d115      	bne.n	a240 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    a214:	68fb      	ldr	r3, [r7, #12]
    a216:	681b      	ldr	r3, [r3, #0]
    a218:	2100      	movs	r1, #0
    a21a:	0018      	movs	r0, r3
    a21c:	4b9d      	ldr	r3, [pc, #628]	; (a494 <f_write+0x33c>)
    a21e:	4798      	blx	r3
    a220:	0003      	movs	r3, r0
    a222:	627b      	str	r3, [r7, #36]	; 0x24
    a224:	68fb      	ldr	r3, [r7, #12]
    a226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a228:	611a      	str	r2, [r3, #16]
    a22a:	e009      	b.n	a240 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    a22c:	68fb      	ldr	r3, [r7, #12]
    a22e:	681a      	ldr	r2, [r3, #0]
    a230:	68fb      	ldr	r3, [r7, #12]
    a232:	695b      	ldr	r3, [r3, #20]
    a234:	0019      	movs	r1, r3
    a236:	0010      	movs	r0, r2
    a238:	4b96      	ldr	r3, [pc, #600]	; (a494 <f_write+0x33c>)
    a23a:	4798      	blx	r3
    a23c:	0003      	movs	r3, r0
    a23e:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    a240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a242:	2b00      	cmp	r3, #0
    a244:	d100      	bne.n	a248 <f_write+0xf0>
    a246:	e10c      	b.n	a462 <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    a248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a24a:	2b01      	cmp	r3, #1
    a24c:	d109      	bne.n	a262 <f_write+0x10a>
    a24e:	68fb      	ldr	r3, [r7, #12]
    a250:	799b      	ldrb	r3, [r3, #6]
    a252:	2280      	movs	r2, #128	; 0x80
    a254:	4252      	negs	r2, r2
    a256:	4313      	orrs	r3, r2
    a258:	b2da      	uxtb	r2, r3
    a25a:	68fb      	ldr	r3, [r7, #12]
    a25c:	719a      	strb	r2, [r3, #6]
    a25e:	2302      	movs	r3, #2
    a260:	e112      	b.n	a488 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    a262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a264:	3301      	adds	r3, #1
    a266:	d109      	bne.n	a27c <f_write+0x124>
    a268:	68fb      	ldr	r3, [r7, #12]
    a26a:	799b      	ldrb	r3, [r3, #6]
    a26c:	2280      	movs	r2, #128	; 0x80
    a26e:	4252      	negs	r2, r2
    a270:	4313      	orrs	r3, r2
    a272:	b2da      	uxtb	r2, r3
    a274:	68fb      	ldr	r3, [r7, #12]
    a276:	719a      	strb	r2, [r3, #6]
    a278:	2301      	movs	r3, #1
    a27a:	e105      	b.n	a488 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
    a27c:	68fb      	ldr	r3, [r7, #12]
    a27e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a280:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    a282:	68fb      	ldr	r3, [r7, #12]
    a284:	681b      	ldr	r3, [r3, #0]
    a286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a288:	68fb      	ldr	r3, [r7, #12]
    a28a:	699b      	ldr	r3, [r3, #24]
    a28c:	429a      	cmp	r2, r3
    a28e:	d111      	bne.n	a2b4 <f_write+0x15c>
    a290:	68fb      	ldr	r3, [r7, #12]
    a292:	681b      	ldr	r3, [r3, #0]
    a294:	2100      	movs	r1, #0
    a296:	0018      	movs	r0, r3
    a298:	4b7f      	ldr	r3, [pc, #508]	; (a498 <f_write+0x340>)
    a29a:	4798      	blx	r3
    a29c:	1e03      	subs	r3, r0, #0
    a29e:	d009      	beq.n	a2b4 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
    a2a0:	68fb      	ldr	r3, [r7, #12]
    a2a2:	799b      	ldrb	r3, [r3, #6]
    a2a4:	2280      	movs	r2, #128	; 0x80
    a2a6:	4252      	negs	r2, r2
    a2a8:	4313      	orrs	r3, r2
    a2aa:	b2da      	uxtb	r2, r3
    a2ac:	68fb      	ldr	r3, [r7, #12]
    a2ae:	719a      	strb	r2, [r3, #6]
    a2b0:	2301      	movs	r3, #1
    a2b2:	e0e9      	b.n	a488 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    a2b4:	68fb      	ldr	r3, [r7, #12]
    a2b6:	681a      	ldr	r2, [r3, #0]
    a2b8:	68fb      	ldr	r3, [r7, #12]
    a2ba:	695b      	ldr	r3, [r3, #20]
    a2bc:	0019      	movs	r1, r3
    a2be:	0010      	movs	r0, r2
    a2c0:	4b76      	ldr	r3, [pc, #472]	; (a49c <f_write+0x344>)
    a2c2:	4798      	blx	r3
    a2c4:	0003      	movs	r3, r0
    a2c6:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    a2c8:	693b      	ldr	r3, [r7, #16]
    a2ca:	2b00      	cmp	r3, #0
    a2cc:	d109      	bne.n	a2e2 <f_write+0x18a>
    a2ce:	68fb      	ldr	r3, [r7, #12]
    a2d0:	799b      	ldrb	r3, [r3, #6]
    a2d2:	2280      	movs	r2, #128	; 0x80
    a2d4:	4252      	negs	r2, r2
    a2d6:	4313      	orrs	r3, r2
    a2d8:	b2da      	uxtb	r2, r3
    a2da:	68fb      	ldr	r3, [r7, #12]
    a2dc:	719a      	strb	r2, [r3, #6]
    a2de:	2302      	movs	r3, #2
    a2e0:	e0d2      	b.n	a488 <f_write+0x330>
			sect += csect;
    a2e2:	2316      	movs	r3, #22
    a2e4:	18fb      	adds	r3, r7, r3
    a2e6:	781b      	ldrb	r3, [r3, #0]
    a2e8:	693a      	ldr	r2, [r7, #16]
    a2ea:	18d3      	adds	r3, r2, r3
    a2ec:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    a2ee:	687b      	ldr	r3, [r7, #4]
    a2f0:	0a5b      	lsrs	r3, r3, #9
    a2f2:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
    a2f4:	69fb      	ldr	r3, [r7, #28]
    a2f6:	2b00      	cmp	r3, #0
    a2f8:	d048      	beq.n	a38c <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    a2fa:	2316      	movs	r3, #22
    a2fc:	18fb      	adds	r3, r7, r3
    a2fe:	781a      	ldrb	r2, [r3, #0]
    a300:	69fb      	ldr	r3, [r7, #28]
    a302:	18d2      	adds	r2, r2, r3
    a304:	68fb      	ldr	r3, [r7, #12]
    a306:	681b      	ldr	r3, [r3, #0]
    a308:	789b      	ldrb	r3, [r3, #2]
    a30a:	429a      	cmp	r2, r3
    a30c:	d908      	bls.n	a320 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
    a30e:	68fb      	ldr	r3, [r7, #12]
    a310:	681b      	ldr	r3, [r3, #0]
    a312:	789b      	ldrb	r3, [r3, #2]
    a314:	001a      	movs	r2, r3
    a316:	2316      	movs	r3, #22
    a318:	18fb      	adds	r3, r7, r3
    a31a:	781b      	ldrb	r3, [r3, #0]
    a31c:	1ad3      	subs	r3, r2, r3
    a31e:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    a320:	68fb      	ldr	r3, [r7, #12]
    a322:	681b      	ldr	r3, [r3, #0]
    a324:	7858      	ldrb	r0, [r3, #1]
    a326:	69fb      	ldr	r3, [r7, #28]
    a328:	b2db      	uxtb	r3, r3
    a32a:	693a      	ldr	r2, [r7, #16]
    a32c:	69b9      	ldr	r1, [r7, #24]
    a32e:	4c5c      	ldr	r4, [pc, #368]	; (a4a0 <f_write+0x348>)
    a330:	47a0      	blx	r4
    a332:	1e03      	subs	r3, r0, #0
    a334:	d009      	beq.n	a34a <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
    a336:	68fb      	ldr	r3, [r7, #12]
    a338:	799b      	ldrb	r3, [r3, #6]
    a33a:	2280      	movs	r2, #128	; 0x80
    a33c:	4252      	negs	r2, r2
    a33e:	4313      	orrs	r3, r2
    a340:	b2da      	uxtb	r2, r3
    a342:	68fb      	ldr	r3, [r7, #12]
    a344:	719a      	strb	r2, [r3, #6]
    a346:	2301      	movs	r3, #1
    a348:	e09e      	b.n	a488 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    a34a:	68fb      	ldr	r3, [r7, #12]
    a34c:	681b      	ldr	r3, [r3, #0]
    a34e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a350:	693b      	ldr	r3, [r7, #16]
    a352:	1ad2      	subs	r2, r2, r3
    a354:	69fb      	ldr	r3, [r7, #28]
    a356:	429a      	cmp	r2, r3
    a358:	d214      	bcs.n	a384 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    a35a:	68fb      	ldr	r3, [r7, #12]
    a35c:	681b      	ldr	r3, [r3, #0]
    a35e:	3330      	adds	r3, #48	; 0x30
    a360:	0018      	movs	r0, r3
    a362:	68fb      	ldr	r3, [r7, #12]
    a364:	681b      	ldr	r3, [r3, #0]
    a366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a368:	693b      	ldr	r3, [r7, #16]
    a36a:	1ad3      	subs	r3, r2, r3
    a36c:	025b      	lsls	r3, r3, #9
    a36e:	69ba      	ldr	r2, [r7, #24]
    a370:	18d1      	adds	r1, r2, r3
    a372:	2380      	movs	r3, #128	; 0x80
    a374:	009b      	lsls	r3, r3, #2
    a376:	001a      	movs	r2, r3
    a378:	4b4a      	ldr	r3, [pc, #296]	; (a4a4 <f_write+0x34c>)
    a37a:	4798      	blx	r3
					fp->fs->wflag = 0;
    a37c:	68fb      	ldr	r3, [r7, #12]
    a37e:	681b      	ldr	r3, [r3, #0]
    a380:	2200      	movs	r2, #0
    a382:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    a384:	69fb      	ldr	r3, [r7, #28]
    a386:	025b      	lsls	r3, r3, #9
    a388:	623b      	str	r3, [r7, #32]
				continue;
    a38a:	e051      	b.n	a430 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    a38c:	68fb      	ldr	r3, [r7, #12]
    a38e:	689a      	ldr	r2, [r3, #8]
    a390:	68fb      	ldr	r3, [r7, #12]
    a392:	68db      	ldr	r3, [r3, #12]
    a394:	429a      	cmp	r2, r3
    a396:	d315      	bcc.n	a3c4 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    a398:	68fb      	ldr	r3, [r7, #12]
    a39a:	681b      	ldr	r3, [r3, #0]
    a39c:	2100      	movs	r1, #0
    a39e:	0018      	movs	r0, r3
    a3a0:	4b3d      	ldr	r3, [pc, #244]	; (a498 <f_write+0x340>)
    a3a2:	4798      	blx	r3
    a3a4:	1e03      	subs	r3, r0, #0
    a3a6:	d009      	beq.n	a3bc <f_write+0x264>
    a3a8:	68fb      	ldr	r3, [r7, #12]
    a3aa:	799b      	ldrb	r3, [r3, #6]
    a3ac:	2280      	movs	r2, #128	; 0x80
    a3ae:	4252      	negs	r2, r2
    a3b0:	4313      	orrs	r3, r2
    a3b2:	b2da      	uxtb	r2, r3
    a3b4:	68fb      	ldr	r3, [r7, #12]
    a3b6:	719a      	strb	r2, [r3, #6]
    a3b8:	2301      	movs	r3, #1
    a3ba:	e065      	b.n	a488 <f_write+0x330>
				fp->fs->winsect = sect;
    a3bc:	68fb      	ldr	r3, [r7, #12]
    a3be:	681b      	ldr	r3, [r3, #0]
    a3c0:	693a      	ldr	r2, [r7, #16]
    a3c2:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    a3c4:	68fb      	ldr	r3, [r7, #12]
    a3c6:	693a      	ldr	r2, [r7, #16]
    a3c8:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    a3ca:	68fb      	ldr	r3, [r7, #12]
    a3cc:	689b      	ldr	r3, [r3, #8]
    a3ce:	05db      	lsls	r3, r3, #23
    a3d0:	0ddb      	lsrs	r3, r3, #23
    a3d2:	2280      	movs	r2, #128	; 0x80
    a3d4:	0092      	lsls	r2, r2, #2
    a3d6:	1ad3      	subs	r3, r2, r3
    a3d8:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
    a3da:	6a3a      	ldr	r2, [r7, #32]
    a3dc:	687b      	ldr	r3, [r7, #4]
    a3de:	429a      	cmp	r2, r3
    a3e0:	d901      	bls.n	a3e6 <f_write+0x28e>
    a3e2:	687b      	ldr	r3, [r7, #4]
    a3e4:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    a3e6:	68fb      	ldr	r3, [r7, #12]
    a3e8:	681a      	ldr	r2, [r3, #0]
    a3ea:	68fb      	ldr	r3, [r7, #12]
    a3ec:	699b      	ldr	r3, [r3, #24]
    a3ee:	0019      	movs	r1, r3
    a3f0:	0010      	movs	r0, r2
    a3f2:	4b29      	ldr	r3, [pc, #164]	; (a498 <f_write+0x340>)
    a3f4:	4798      	blx	r3
    a3f6:	1e03      	subs	r3, r0, #0
    a3f8:	d009      	beq.n	a40e <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
    a3fa:	68fb      	ldr	r3, [r7, #12]
    a3fc:	799b      	ldrb	r3, [r3, #6]
    a3fe:	2280      	movs	r2, #128	; 0x80
    a400:	4252      	negs	r2, r2
    a402:	4313      	orrs	r3, r2
    a404:	b2da      	uxtb	r2, r3
    a406:	68fb      	ldr	r3, [r7, #12]
    a408:	719a      	strb	r2, [r3, #6]
    a40a:	2301      	movs	r3, #1
    a40c:	e03c      	b.n	a488 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    a40e:	68fb      	ldr	r3, [r7, #12]
    a410:	681a      	ldr	r2, [r3, #0]
    a412:	68fb      	ldr	r3, [r7, #12]
    a414:	689b      	ldr	r3, [r3, #8]
    a416:	05db      	lsls	r3, r3, #23
    a418:	0ddb      	lsrs	r3, r3, #23
    a41a:	3330      	adds	r3, #48	; 0x30
    a41c:	18d3      	adds	r3, r2, r3
    a41e:	6a3a      	ldr	r2, [r7, #32]
    a420:	69b9      	ldr	r1, [r7, #24]
    a422:	0018      	movs	r0, r3
    a424:	4b1f      	ldr	r3, [pc, #124]	; (a4a4 <f_write+0x34c>)
    a426:	4798      	blx	r3
		fp->fs->wflag = 1;
    a428:	68fb      	ldr	r3, [r7, #12]
    a42a:	681b      	ldr	r3, [r3, #0]
    a42c:	2201      	movs	r2, #1
    a42e:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    a430:	69ba      	ldr	r2, [r7, #24]
    a432:	6a3b      	ldr	r3, [r7, #32]
    a434:	18d3      	adds	r3, r2, r3
    a436:	61bb      	str	r3, [r7, #24]
    a438:	68fb      	ldr	r3, [r7, #12]
    a43a:	689a      	ldr	r2, [r3, #8]
    a43c:	6a3b      	ldr	r3, [r7, #32]
    a43e:	18d2      	adds	r2, r2, r3
    a440:	68fb      	ldr	r3, [r7, #12]
    a442:	609a      	str	r2, [r3, #8]
    a444:	683b      	ldr	r3, [r7, #0]
    a446:	681a      	ldr	r2, [r3, #0]
    a448:	6a3b      	ldr	r3, [r7, #32]
    a44a:	18d2      	adds	r2, r2, r3
    a44c:	683b      	ldr	r3, [r7, #0]
    a44e:	601a      	str	r2, [r3, #0]
    a450:	687a      	ldr	r2, [r7, #4]
    a452:	6a3b      	ldr	r3, [r7, #32]
    a454:	1ad3      	subs	r3, r2, r3
    a456:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
    a458:	687b      	ldr	r3, [r7, #4]
    a45a:	2b00      	cmp	r3, #0
    a45c:	d000      	beq.n	a460 <f_write+0x308>
    a45e:	e6b7      	b.n	a1d0 <f_write+0x78>
    a460:	e000      	b.n	a464 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    a462:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    a464:	68fb      	ldr	r3, [r7, #12]
    a466:	689a      	ldr	r2, [r3, #8]
    a468:	68fb      	ldr	r3, [r7, #12]
    a46a:	68db      	ldr	r3, [r3, #12]
    a46c:	429a      	cmp	r2, r3
    a46e:	d903      	bls.n	a478 <f_write+0x320>
    a470:	68fb      	ldr	r3, [r7, #12]
    a472:	689a      	ldr	r2, [r3, #8]
    a474:	68fb      	ldr	r3, [r7, #12]
    a476:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    a478:	68fb      	ldr	r3, [r7, #12]
    a47a:	799b      	ldrb	r3, [r3, #6]
    a47c:	2220      	movs	r2, #32
    a47e:	4313      	orrs	r3, r2
    a480:	b2da      	uxtb	r2, r3
    a482:	68fb      	ldr	r3, [r7, #12]
    a484:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
    a486:	2300      	movs	r3, #0
}
    a488:	0018      	movs	r0, r3
    a48a:	46bd      	mov	sp, r7
    a48c:	b00b      	add	sp, #44	; 0x2c
    a48e:	bd90      	pop	{r4, r7, pc}
    a490:	000098e1 	.word	0x000098e1
    a494:	00007bed 	.word	0x00007bed
    a498:	000074e5 	.word	0x000074e5
    a49c:	00007745 	.word	0x00007745
    a4a0:	000071d1 	.word	0x000071d1
    a4a4:	00007401 	.word	0x00007401

0000a4a8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    a4a8:	b590      	push	{r4, r7, lr}
    a4aa:	b087      	sub	sp, #28
    a4ac:	af00      	add	r7, sp, #0
    a4ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    a4b0:	687b      	ldr	r3, [r7, #4]
    a4b2:	681a      	ldr	r2, [r3, #0]
    a4b4:	687b      	ldr	r3, [r7, #4]
    a4b6:	889b      	ldrh	r3, [r3, #4]
    a4b8:	2117      	movs	r1, #23
    a4ba:	187c      	adds	r4, r7, r1
    a4bc:	0019      	movs	r1, r3
    a4be:	0010      	movs	r0, r2
    a4c0:	4b55      	ldr	r3, [pc, #340]	; (a618 <f_sync+0x170>)
    a4c2:	4798      	blx	r3
    a4c4:	0003      	movs	r3, r0
    a4c6:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    a4c8:	2317      	movs	r3, #23
    a4ca:	18fb      	adds	r3, r7, r3
    a4cc:	781b      	ldrb	r3, [r3, #0]
    a4ce:	2b00      	cmp	r3, #0
    a4d0:	d000      	beq.n	a4d4 <f_sync+0x2c>
    a4d2:	e09a      	b.n	a60a <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    a4d4:	687b      	ldr	r3, [r7, #4]
    a4d6:	799b      	ldrb	r3, [r3, #6]
    a4d8:	001a      	movs	r2, r3
    a4da:	2320      	movs	r3, #32
    a4dc:	4013      	ands	r3, r2
    a4de:	d100      	bne.n	a4e2 <f_sync+0x3a>
    a4e0:	e093      	b.n	a60a <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    a4e2:	687b      	ldr	r3, [r7, #4]
    a4e4:	681a      	ldr	r2, [r3, #0]
    a4e6:	687b      	ldr	r3, [r7, #4]
    a4e8:	69db      	ldr	r3, [r3, #28]
    a4ea:	2117      	movs	r1, #23
    a4ec:	187c      	adds	r4, r7, r1
    a4ee:	0019      	movs	r1, r3
    a4f0:	0010      	movs	r0, r2
    a4f2:	4b4a      	ldr	r3, [pc, #296]	; (a61c <f_sync+0x174>)
    a4f4:	4798      	blx	r3
    a4f6:	0003      	movs	r3, r0
    a4f8:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
    a4fa:	2317      	movs	r3, #23
    a4fc:	18fb      	adds	r3, r7, r3
    a4fe:	781b      	ldrb	r3, [r3, #0]
    a500:	2b00      	cmp	r3, #0
    a502:	d000      	beq.n	a506 <f_sync+0x5e>
    a504:	e081      	b.n	a60a <f_sync+0x162>
				dir = fp->dir_ptr;
    a506:	687b      	ldr	r3, [r7, #4]
    a508:	6a1b      	ldr	r3, [r3, #32]
    a50a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    a50c:	693b      	ldr	r3, [r7, #16]
    a50e:	330b      	adds	r3, #11
    a510:	693a      	ldr	r2, [r7, #16]
    a512:	320b      	adds	r2, #11
    a514:	7812      	ldrb	r2, [r2, #0]
    a516:	2120      	movs	r1, #32
    a518:	430a      	orrs	r2, r1
    a51a:	b2d2      	uxtb	r2, r2
    a51c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    a51e:	693b      	ldr	r3, [r7, #16]
    a520:	331c      	adds	r3, #28
    a522:	001a      	movs	r2, r3
    a524:	687b      	ldr	r3, [r7, #4]
    a526:	68db      	ldr	r3, [r3, #12]
    a528:	b2db      	uxtb	r3, r3
    a52a:	7013      	strb	r3, [r2, #0]
    a52c:	693b      	ldr	r3, [r7, #16]
    a52e:	331d      	adds	r3, #29
    a530:	001a      	movs	r2, r3
    a532:	687b      	ldr	r3, [r7, #4]
    a534:	68db      	ldr	r3, [r3, #12]
    a536:	b29b      	uxth	r3, r3
    a538:	0a1b      	lsrs	r3, r3, #8
    a53a:	b29b      	uxth	r3, r3
    a53c:	b2db      	uxtb	r3, r3
    a53e:	7013      	strb	r3, [r2, #0]
    a540:	693b      	ldr	r3, [r7, #16]
    a542:	331e      	adds	r3, #30
    a544:	001a      	movs	r2, r3
    a546:	687b      	ldr	r3, [r7, #4]
    a548:	68db      	ldr	r3, [r3, #12]
    a54a:	0c1b      	lsrs	r3, r3, #16
    a54c:	b2db      	uxtb	r3, r3
    a54e:	7013      	strb	r3, [r2, #0]
    a550:	693b      	ldr	r3, [r7, #16]
    a552:	331f      	adds	r3, #31
    a554:	001a      	movs	r2, r3
    a556:	687b      	ldr	r3, [r7, #4]
    a558:	68db      	ldr	r3, [r3, #12]
    a55a:	0e1b      	lsrs	r3, r3, #24
    a55c:	b2db      	uxtb	r3, r3
    a55e:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    a560:	693b      	ldr	r3, [r7, #16]
    a562:	331a      	adds	r3, #26
    a564:	001a      	movs	r2, r3
    a566:	687b      	ldr	r3, [r7, #4]
    a568:	691b      	ldr	r3, [r3, #16]
    a56a:	b2db      	uxtb	r3, r3
    a56c:	7013      	strb	r3, [r2, #0]
    a56e:	693b      	ldr	r3, [r7, #16]
    a570:	331b      	adds	r3, #27
    a572:	001a      	movs	r2, r3
    a574:	687b      	ldr	r3, [r7, #4]
    a576:	691b      	ldr	r3, [r3, #16]
    a578:	b29b      	uxth	r3, r3
    a57a:	0a1b      	lsrs	r3, r3, #8
    a57c:	b29b      	uxth	r3, r3
    a57e:	b2db      	uxtb	r3, r3
    a580:	7013      	strb	r3, [r2, #0]
    a582:	693b      	ldr	r3, [r7, #16]
    a584:	3314      	adds	r3, #20
    a586:	001a      	movs	r2, r3
    a588:	687b      	ldr	r3, [r7, #4]
    a58a:	691b      	ldr	r3, [r3, #16]
    a58c:	0c1b      	lsrs	r3, r3, #16
    a58e:	b2db      	uxtb	r3, r3
    a590:	7013      	strb	r3, [r2, #0]
    a592:	693b      	ldr	r3, [r7, #16]
    a594:	3315      	adds	r3, #21
    a596:	001a      	movs	r2, r3
    a598:	687b      	ldr	r3, [r7, #4]
    a59a:	691b      	ldr	r3, [r3, #16]
    a59c:	0c1b      	lsrs	r3, r3, #16
    a59e:	b29b      	uxth	r3, r3
    a5a0:	0a1b      	lsrs	r3, r3, #8
    a5a2:	b29b      	uxth	r3, r3
    a5a4:	b2db      	uxtb	r3, r3
    a5a6:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
    a5a8:	4b1d      	ldr	r3, [pc, #116]	; (a620 <f_sync+0x178>)
    a5aa:	4798      	blx	r3
    a5ac:	0003      	movs	r3, r0
    a5ae:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
    a5b0:	693b      	ldr	r3, [r7, #16]
    a5b2:	3316      	adds	r3, #22
    a5b4:	68fa      	ldr	r2, [r7, #12]
    a5b6:	b2d2      	uxtb	r2, r2
    a5b8:	701a      	strb	r2, [r3, #0]
    a5ba:	693b      	ldr	r3, [r7, #16]
    a5bc:	3317      	adds	r3, #23
    a5be:	68fa      	ldr	r2, [r7, #12]
    a5c0:	b292      	uxth	r2, r2
    a5c2:	0a12      	lsrs	r2, r2, #8
    a5c4:	b292      	uxth	r2, r2
    a5c6:	b2d2      	uxtb	r2, r2
    a5c8:	701a      	strb	r2, [r3, #0]
    a5ca:	693b      	ldr	r3, [r7, #16]
    a5cc:	3318      	adds	r3, #24
    a5ce:	68fa      	ldr	r2, [r7, #12]
    a5d0:	0c12      	lsrs	r2, r2, #16
    a5d2:	b2d2      	uxtb	r2, r2
    a5d4:	701a      	strb	r2, [r3, #0]
    a5d6:	693b      	ldr	r3, [r7, #16]
    a5d8:	3319      	adds	r3, #25
    a5da:	68fa      	ldr	r2, [r7, #12]
    a5dc:	0e12      	lsrs	r2, r2, #24
    a5de:	b2d2      	uxtb	r2, r2
    a5e0:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
    a5e2:	687b      	ldr	r3, [r7, #4]
    a5e4:	799b      	ldrb	r3, [r3, #6]
    a5e6:	2220      	movs	r2, #32
    a5e8:	4393      	bics	r3, r2
    a5ea:	b2da      	uxtb	r2, r3
    a5ec:	687b      	ldr	r3, [r7, #4]
    a5ee:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
    a5f0:	687b      	ldr	r3, [r7, #4]
    a5f2:	681b      	ldr	r3, [r3, #0]
    a5f4:	2201      	movs	r2, #1
    a5f6:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
    a5f8:	687b      	ldr	r3, [r7, #4]
    a5fa:	681b      	ldr	r3, [r3, #0]
    a5fc:	2217      	movs	r2, #23
    a5fe:	18bc      	adds	r4, r7, r2
    a600:	0018      	movs	r0, r3
    a602:	4b08      	ldr	r3, [pc, #32]	; (a624 <f_sync+0x17c>)
    a604:	4798      	blx	r3
    a606:	0003      	movs	r3, r0
    a608:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
    a60a:	2317      	movs	r3, #23
    a60c:	18fb      	adds	r3, r7, r3
    a60e:	781b      	ldrb	r3, [r3, #0]
}
    a610:	0018      	movs	r0, r3
    a612:	46bd      	mov	sp, r7
    a614:	b007      	add	sp, #28
    a616:	bd90      	pop	{r4, r7, pc}
    a618:	000098e1 	.word	0x000098e1
    a61c:	000074e5 	.word	0x000074e5
    a620:	000073a1 	.word	0x000073a1
    a624:	000075ad 	.word	0x000075ad

0000a628 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    a628:	b590      	push	{r4, r7, lr}
    a62a:	b085      	sub	sp, #20
    a62c:	af00      	add	r7, sp, #0
    a62e:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    a630:	230f      	movs	r3, #15
    a632:	18fc      	adds	r4, r7, r3
    a634:	687b      	ldr	r3, [r7, #4]
    a636:	0018      	movs	r0, r3
    a638:	4b09      	ldr	r3, [pc, #36]	; (a660 <f_close+0x38>)
    a63a:	4798      	blx	r3
    a63c:	0003      	movs	r3, r0
    a63e:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    a640:	230f      	movs	r3, #15
    a642:	18fb      	adds	r3, r7, r3
    a644:	781b      	ldrb	r3, [r3, #0]
    a646:	2b00      	cmp	r3, #0
    a648:	d102      	bne.n	a650 <f_close+0x28>
    a64a:	687b      	ldr	r3, [r7, #4]
    a64c:	2200      	movs	r2, #0
    a64e:	601a      	str	r2, [r3, #0]
	return res;
    a650:	230f      	movs	r3, #15
    a652:	18fb      	adds	r3, r7, r3
    a654:	781b      	ldrb	r3, [r3, #0]
#endif
}
    a656:	0018      	movs	r0, r3
    a658:	46bd      	mov	sp, r7
    a65a:	b005      	add	sp, #20
    a65c:	bd90      	pop	{r4, r7, pc}
    a65e:	46c0      	nop			; (mov r8, r8)
    a660:	0000a4a9 	.word	0x0000a4a9

0000a664 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    a664:	b590      	push	{r4, r7, lr}
    a666:	b089      	sub	sp, #36	; 0x24
    a668:	af00      	add	r7, sp, #0
    a66a:	6078      	str	r0, [r7, #4]
    a66c:	6039      	str	r1, [r7, #0]
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    a66e:	687b      	ldr	r3, [r7, #4]
    a670:	681a      	ldr	r2, [r3, #0]
    a672:	687b      	ldr	r3, [r7, #4]
    a674:	889b      	ldrh	r3, [r3, #4]
    a676:	2117      	movs	r1, #23
    a678:	187c      	adds	r4, r7, r1
    a67a:	0019      	movs	r1, r3
    a67c:	0010      	movs	r0, r2
    a67e:	4b91      	ldr	r3, [pc, #580]	; (a8c4 <f_lseek+0x260>)
    a680:	4798      	blx	r3
    a682:	0003      	movs	r3, r0
    a684:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    a686:	2317      	movs	r3, #23
    a688:	18fb      	adds	r3, r7, r3
    a68a:	781b      	ldrb	r3, [r3, #0]
    a68c:	2b00      	cmp	r3, #0
    a68e:	d003      	beq.n	a698 <f_lseek+0x34>
    a690:	2317      	movs	r3, #23
    a692:	18fb      	adds	r3, r7, r3
    a694:	781b      	ldrb	r3, [r3, #0]
    a696:	e111      	b.n	a8bc <f_lseek+0x258>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    a698:	687b      	ldr	r3, [r7, #4]
    a69a:	799b      	ldrb	r3, [r3, #6]
    a69c:	b25b      	sxtb	r3, r3
    a69e:	2b00      	cmp	r3, #0
    a6a0:	da01      	bge.n	a6a6 <f_lseek+0x42>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    a6a2:	2302      	movs	r3, #2
    a6a4:	e10a      	b.n	a8bc <f_lseek+0x258>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    a6a6:	687b      	ldr	r3, [r7, #4]
    a6a8:	68da      	ldr	r2, [r3, #12]
    a6aa:	683b      	ldr	r3, [r7, #0]
    a6ac:	429a      	cmp	r2, r3
    a6ae:	d208      	bcs.n	a6c2 <f_lseek+0x5e>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    a6b0:	687b      	ldr	r3, [r7, #4]
    a6b2:	799b      	ldrb	r3, [r3, #6]
    a6b4:	001a      	movs	r2, r3
    a6b6:	2302      	movs	r3, #2
    a6b8:	4013      	ands	r3, r2
    a6ba:	d102      	bne.n	a6c2 <f_lseek+0x5e>
#endif
			) ofs = fp->fsize;
    a6bc:	687b      	ldr	r3, [r7, #4]
    a6be:	68db      	ldr	r3, [r3, #12]
    a6c0:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
    a6c2:	687b      	ldr	r3, [r7, #4]
    a6c4:	689b      	ldr	r3, [r3, #8]
    a6c6:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
    a6c8:	2300      	movs	r3, #0
    a6ca:	61bb      	str	r3, [r7, #24]
    a6cc:	687b      	ldr	r3, [r7, #4]
    a6ce:	69ba      	ldr	r2, [r7, #24]
    a6d0:	609a      	str	r2, [r3, #8]
		if (ofs) {
    a6d2:	683b      	ldr	r3, [r7, #0]
    a6d4:	2b00      	cmp	r3, #0
    a6d6:	d100      	bne.n	a6da <f_lseek+0x76>
    a6d8:	e0cf      	b.n	a87a <f_lseek+0x216>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    a6da:	687b      	ldr	r3, [r7, #4]
    a6dc:	681b      	ldr	r3, [r3, #0]
    a6de:	789b      	ldrb	r3, [r3, #2]
    a6e0:	025b      	lsls	r3, r3, #9
    a6e2:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
    a6e4:	693b      	ldr	r3, [r7, #16]
    a6e6:	2b00      	cmp	r3, #0
    a6e8:	d020      	beq.n	a72c <f_lseek+0xc8>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    a6ea:	683b      	ldr	r3, [r7, #0]
    a6ec:	1e5a      	subs	r2, r3, #1
    a6ee:	4b76      	ldr	r3, [pc, #472]	; (a8c8 <f_lseek+0x264>)
    a6f0:	68f9      	ldr	r1, [r7, #12]
    a6f2:	0010      	movs	r0, r2
    a6f4:	4798      	blx	r3
    a6f6:	0003      	movs	r3, r0
    a6f8:	001c      	movs	r4, r3
    a6fa:	693b      	ldr	r3, [r7, #16]
    a6fc:	1e5a      	subs	r2, r3, #1
    a6fe:	4b72      	ldr	r3, [pc, #456]	; (a8c8 <f_lseek+0x264>)
    a700:	68f9      	ldr	r1, [r7, #12]
    a702:	0010      	movs	r0, r2
    a704:	4798      	blx	r3
    a706:	0003      	movs	r3, r0
			if (ifptr > 0 &&
    a708:	429c      	cmp	r4, r3
    a70a:	d30f      	bcc.n	a72c <f_lseek+0xc8>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    a70c:	693b      	ldr	r3, [r7, #16]
    a70e:	3b01      	subs	r3, #1
    a710:	68fa      	ldr	r2, [r7, #12]
    a712:	4252      	negs	r2, r2
    a714:	401a      	ands	r2, r3
    a716:	687b      	ldr	r3, [r7, #4]
    a718:	609a      	str	r2, [r3, #8]
				ofs -= fp->fptr;
    a71a:	687b      	ldr	r3, [r7, #4]
    a71c:	689b      	ldr	r3, [r3, #8]
    a71e:	683a      	ldr	r2, [r7, #0]
    a720:	1ad3      	subs	r3, r2, r3
    a722:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
    a724:	687b      	ldr	r3, [r7, #4]
    a726:	695b      	ldr	r3, [r3, #20]
    a728:	61fb      	str	r3, [r7, #28]
    a72a:	e02d      	b.n	a788 <f_lseek+0x124>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    a72c:	687b      	ldr	r3, [r7, #4]
    a72e:	691b      	ldr	r3, [r3, #16]
    a730:	61fb      	str	r3, [r7, #28]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    a732:	69fb      	ldr	r3, [r7, #28]
    a734:	2b00      	cmp	r3, #0
    a736:	d124      	bne.n	a782 <f_lseek+0x11e>
					clst = create_chain(fp->fs, 0);
    a738:	687b      	ldr	r3, [r7, #4]
    a73a:	681b      	ldr	r3, [r3, #0]
    a73c:	2100      	movs	r1, #0
    a73e:	0018      	movs	r0, r3
    a740:	4b62      	ldr	r3, [pc, #392]	; (a8cc <f_lseek+0x268>)
    a742:	4798      	blx	r3
    a744:	0003      	movs	r3, r0
    a746:	61fb      	str	r3, [r7, #28]
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    a748:	69fb      	ldr	r3, [r7, #28]
    a74a:	2b01      	cmp	r3, #1
    a74c:	d109      	bne.n	a762 <f_lseek+0xfe>
    a74e:	687b      	ldr	r3, [r7, #4]
    a750:	799b      	ldrb	r3, [r3, #6]
    a752:	2280      	movs	r2, #128	; 0x80
    a754:	4252      	negs	r2, r2
    a756:	4313      	orrs	r3, r2
    a758:	b2da      	uxtb	r2, r3
    a75a:	687b      	ldr	r3, [r7, #4]
    a75c:	719a      	strb	r2, [r3, #6]
    a75e:	2302      	movs	r3, #2
    a760:	e0ac      	b.n	a8bc <f_lseek+0x258>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    a762:	69fb      	ldr	r3, [r7, #28]
    a764:	3301      	adds	r3, #1
    a766:	d109      	bne.n	a77c <f_lseek+0x118>
    a768:	687b      	ldr	r3, [r7, #4]
    a76a:	799b      	ldrb	r3, [r3, #6]
    a76c:	2280      	movs	r2, #128	; 0x80
    a76e:	4252      	negs	r2, r2
    a770:	4313      	orrs	r3, r2
    a772:	b2da      	uxtb	r2, r3
    a774:	687b      	ldr	r3, [r7, #4]
    a776:	719a      	strb	r2, [r3, #6]
    a778:	2301      	movs	r3, #1
    a77a:	e09f      	b.n	a8bc <f_lseek+0x258>
					fp->sclust = clst;
    a77c:	687b      	ldr	r3, [r7, #4]
    a77e:	69fa      	ldr	r2, [r7, #28]
    a780:	611a      	str	r2, [r3, #16]
				}
#endif
				fp->clust = clst;
    a782:	687b      	ldr	r3, [r7, #4]
    a784:	69fa      	ldr	r2, [r7, #28]
    a786:	615a      	str	r2, [r3, #20]
			}
			if (clst != 0) {
    a788:	69fb      	ldr	r3, [r7, #28]
    a78a:	2b00      	cmp	r3, #0
    a78c:	d100      	bne.n	a790 <f_lseek+0x12c>
    a78e:	e074      	b.n	a87a <f_lseek+0x216>
				while (ofs > bcs) {						/* Cluster following loop */
    a790:	e04a      	b.n	a828 <f_lseek+0x1c4>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    a792:	687b      	ldr	r3, [r7, #4]
    a794:	799b      	ldrb	r3, [r3, #6]
    a796:	001a      	movs	r2, r3
    a798:	2302      	movs	r3, #2
    a79a:	4013      	ands	r3, r2
    a79c:	d00e      	beq.n	a7bc <f_lseek+0x158>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    a79e:	687b      	ldr	r3, [r7, #4]
    a7a0:	681b      	ldr	r3, [r3, #0]
    a7a2:	69fa      	ldr	r2, [r7, #28]
    a7a4:	0011      	movs	r1, r2
    a7a6:	0018      	movs	r0, r3
    a7a8:	4b48      	ldr	r3, [pc, #288]	; (a8cc <f_lseek+0x268>)
    a7aa:	4798      	blx	r3
    a7ac:	0003      	movs	r3, r0
    a7ae:	61fb      	str	r3, [r7, #28]
						if (clst == 0) {				/* When disk gets full, clip file size */
    a7b0:	69fb      	ldr	r3, [r7, #28]
    a7b2:	2b00      	cmp	r3, #0
    a7b4:	d10b      	bne.n	a7ce <f_lseek+0x16a>
							ofs = bcs; break;
    a7b6:	68fb      	ldr	r3, [r7, #12]
    a7b8:	603b      	str	r3, [r7, #0]
    a7ba:	e039      	b.n	a830 <f_lseek+0x1cc>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    a7bc:	687b      	ldr	r3, [r7, #4]
    a7be:	681b      	ldr	r3, [r3, #0]
    a7c0:	69fa      	ldr	r2, [r7, #28]
    a7c2:	0011      	movs	r1, r2
    a7c4:	0018      	movs	r0, r3
    a7c6:	4b42      	ldr	r3, [pc, #264]	; (a8d0 <f_lseek+0x26c>)
    a7c8:	4798      	blx	r3
    a7ca:	0003      	movs	r3, r0
    a7cc:	61fb      	str	r3, [r7, #28]
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    a7ce:	69fb      	ldr	r3, [r7, #28]
    a7d0:	3301      	adds	r3, #1
    a7d2:	d109      	bne.n	a7e8 <f_lseek+0x184>
    a7d4:	687b      	ldr	r3, [r7, #4]
    a7d6:	799b      	ldrb	r3, [r3, #6]
    a7d8:	2280      	movs	r2, #128	; 0x80
    a7da:	4252      	negs	r2, r2
    a7dc:	4313      	orrs	r3, r2
    a7de:	b2da      	uxtb	r2, r3
    a7e0:	687b      	ldr	r3, [r7, #4]
    a7e2:	719a      	strb	r2, [r3, #6]
    a7e4:	2301      	movs	r3, #1
    a7e6:	e069      	b.n	a8bc <f_lseek+0x258>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    a7e8:	69fb      	ldr	r3, [r7, #28]
    a7ea:	2b01      	cmp	r3, #1
    a7ec:	d905      	bls.n	a7fa <f_lseek+0x196>
    a7ee:	687b      	ldr	r3, [r7, #4]
    a7f0:	681b      	ldr	r3, [r3, #0]
    a7f2:	699a      	ldr	r2, [r3, #24]
    a7f4:	69fb      	ldr	r3, [r7, #28]
    a7f6:	429a      	cmp	r2, r3
    a7f8:	d809      	bhi.n	a80e <f_lseek+0x1aa>
    a7fa:	687b      	ldr	r3, [r7, #4]
    a7fc:	799b      	ldrb	r3, [r3, #6]
    a7fe:	2280      	movs	r2, #128	; 0x80
    a800:	4252      	negs	r2, r2
    a802:	4313      	orrs	r3, r2
    a804:	b2da      	uxtb	r2, r3
    a806:	687b      	ldr	r3, [r7, #4]
    a808:	719a      	strb	r2, [r3, #6]
    a80a:	2302      	movs	r3, #2
    a80c:	e056      	b.n	a8bc <f_lseek+0x258>
					fp->clust = clst;
    a80e:	687b      	ldr	r3, [r7, #4]
    a810:	69fa      	ldr	r2, [r7, #28]
    a812:	615a      	str	r2, [r3, #20]
					fp->fptr += bcs;
    a814:	687b      	ldr	r3, [r7, #4]
    a816:	689a      	ldr	r2, [r3, #8]
    a818:	68fb      	ldr	r3, [r7, #12]
    a81a:	18d2      	adds	r2, r2, r3
    a81c:	687b      	ldr	r3, [r7, #4]
    a81e:	609a      	str	r2, [r3, #8]
					ofs -= bcs;
    a820:	683a      	ldr	r2, [r7, #0]
    a822:	68fb      	ldr	r3, [r7, #12]
    a824:	1ad3      	subs	r3, r2, r3
    a826:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
    a828:	683a      	ldr	r2, [r7, #0]
    a82a:	68fb      	ldr	r3, [r7, #12]
    a82c:	429a      	cmp	r2, r3
    a82e:	d8b0      	bhi.n	a792 <f_lseek+0x12e>
				}
				fp->fptr += ofs;
    a830:	687b      	ldr	r3, [r7, #4]
    a832:	689a      	ldr	r2, [r3, #8]
    a834:	683b      	ldr	r3, [r7, #0]
    a836:	18d2      	adds	r2, r2, r3
    a838:	687b      	ldr	r3, [r7, #4]
    a83a:	609a      	str	r2, [r3, #8]
				if (ofs % SS(fp->fs)) {
    a83c:	683b      	ldr	r3, [r7, #0]
    a83e:	05db      	lsls	r3, r3, #23
    a840:	0ddb      	lsrs	r3, r3, #23
    a842:	d01a      	beq.n	a87a <f_lseek+0x216>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    a844:	687b      	ldr	r3, [r7, #4]
    a846:	681b      	ldr	r3, [r3, #0]
    a848:	69fa      	ldr	r2, [r7, #28]
    a84a:	0011      	movs	r1, r2
    a84c:	0018      	movs	r0, r3
    a84e:	4b21      	ldr	r3, [pc, #132]	; (a8d4 <f_lseek+0x270>)
    a850:	4798      	blx	r3
    a852:	0003      	movs	r3, r0
    a854:	61bb      	str	r3, [r7, #24]
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    a856:	69bb      	ldr	r3, [r7, #24]
    a858:	2b00      	cmp	r3, #0
    a85a:	d109      	bne.n	a870 <f_lseek+0x20c>
    a85c:	687b      	ldr	r3, [r7, #4]
    a85e:	799b      	ldrb	r3, [r3, #6]
    a860:	2280      	movs	r2, #128	; 0x80
    a862:	4252      	negs	r2, r2
    a864:	4313      	orrs	r3, r2
    a866:	b2da      	uxtb	r2, r3
    a868:	687b      	ldr	r3, [r7, #4]
    a86a:	719a      	strb	r2, [r3, #6]
    a86c:	2302      	movs	r3, #2
    a86e:	e025      	b.n	a8bc <f_lseek+0x258>
					nsect += ofs / SS(fp->fs);
    a870:	683b      	ldr	r3, [r7, #0]
    a872:	0a5b      	lsrs	r3, r3, #9
    a874:	69ba      	ldr	r2, [r7, #24]
    a876:	18d3      	adds	r3, r2, r3
    a878:	61bb      	str	r3, [r7, #24]
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    a87a:	687b      	ldr	r3, [r7, #4]
    a87c:	689b      	ldr	r3, [r3, #8]
    a87e:	05db      	lsls	r3, r3, #23
    a880:	0ddb      	lsrs	r3, r3, #23
    a882:	d007      	beq.n	a894 <f_lseek+0x230>
    a884:	687b      	ldr	r3, [r7, #4]
    a886:	699a      	ldr	r2, [r3, #24]
    a888:	69bb      	ldr	r3, [r7, #24]
    a88a:	429a      	cmp	r2, r3
    a88c:	d002      	beq.n	a894 <f_lseek+0x230>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    a88e:	687b      	ldr	r3, [r7, #4]
    a890:	69ba      	ldr	r2, [r7, #24]
    a892:	619a      	str	r2, [r3, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    a894:	687b      	ldr	r3, [r7, #4]
    a896:	689a      	ldr	r2, [r3, #8]
    a898:	687b      	ldr	r3, [r7, #4]
    a89a:	68db      	ldr	r3, [r3, #12]
    a89c:	429a      	cmp	r2, r3
    a89e:	d90a      	bls.n	a8b6 <f_lseek+0x252>
			fp->fsize = fp->fptr;
    a8a0:	687b      	ldr	r3, [r7, #4]
    a8a2:	689a      	ldr	r2, [r3, #8]
    a8a4:	687b      	ldr	r3, [r7, #4]
    a8a6:	60da      	str	r2, [r3, #12]
			fp->flag |= FA__WRITTEN;
    a8a8:	687b      	ldr	r3, [r7, #4]
    a8aa:	799b      	ldrb	r3, [r3, #6]
    a8ac:	2220      	movs	r2, #32
    a8ae:	4313      	orrs	r3, r2
    a8b0:	b2da      	uxtb	r2, r3
    a8b2:	687b      	ldr	r3, [r7, #4]
    a8b4:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
    a8b6:	2317      	movs	r3, #23
    a8b8:	18fb      	adds	r3, r7, r3
    a8ba:	781b      	ldrb	r3, [r3, #0]
}
    a8bc:	0018      	movs	r0, r3
    a8be:	46bd      	mov	sp, r7
    a8c0:	b009      	add	sp, #36	; 0x24
    a8c2:	bd90      	pop	{r4, r7, pc}
    a8c4:	000098e1 	.word	0x000098e1
    a8c8:	0000b8cd 	.word	0x0000b8cd
    a8cc:	00007bed 	.word	0x00007bed
    a8d0:	0000777d 	.word	0x0000777d
    a8d4:	00007745 	.word	0x00007745

0000a8d8 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
    a8d8:	b590      	push	{r4, r7, lr}
    a8da:	4c8d      	ldr	r4, [pc, #564]	; (ab10 <f_unlink+0x238>)
    a8dc:	44a5      	add	sp, r4
    a8de:	af00      	add	r7, sp, #0
    a8e0:	6078      	str	r0, [r7, #4]
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    a8e2:	4b8c      	ldr	r3, [pc, #560]	; (ab14 <f_unlink+0x23c>)
    a8e4:	18fc      	adds	r4, r7, r3
    a8e6:	238e      	movs	r3, #142	; 0x8e
    a8e8:	009b      	lsls	r3, r3, #2
    a8ea:	18f9      	adds	r1, r7, r3
    a8ec:	1d3b      	adds	r3, r7, #4
    a8ee:	2201      	movs	r2, #1
    a8f0:	0018      	movs	r0, r3
    a8f2:	4b89      	ldr	r3, [pc, #548]	; (ab18 <f_unlink+0x240>)
    a8f4:	4798      	blx	r3
    a8f6:	0003      	movs	r3, r0
    a8f8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    a8fa:	4b86      	ldr	r3, [pc, #536]	; (ab14 <f_unlink+0x23c>)
    a8fc:	18fb      	adds	r3, r7, r3
    a8fe:	781b      	ldrb	r3, [r3, #0]
    a900:	2b00      	cmp	r3, #0
    a902:	d000      	beq.n	a906 <f_unlink+0x2e>
    a904:	e0fb      	b.n	aafe <f_unlink+0x226>
		INIT_BUF(dj);
    a906:	238e      	movs	r3, #142	; 0x8e
    a908:	009b      	lsls	r3, r3, #2
    a90a:	18fb      	adds	r3, r7, r3
    a90c:	2282      	movs	r2, #130	; 0x82
    a90e:	0092      	lsls	r2, r2, #2
    a910:	18ba      	adds	r2, r7, r2
    a912:	619a      	str	r2, [r3, #24]
    a914:	238e      	movs	r3, #142	; 0x8e
    a916:	009b      	lsls	r3, r3, #2
    a918:	18fb      	adds	r3, r7, r3
    a91a:	2208      	movs	r2, #8
    a91c:	18ba      	adds	r2, r7, r2
    a91e:	61da      	str	r2, [r3, #28]
		res = follow_path(&dj, path);		/* Follow the file path */
    a920:	687a      	ldr	r2, [r7, #4]
    a922:	4b7c      	ldr	r3, [pc, #496]	; (ab14 <f_unlink+0x23c>)
    a924:	18fc      	adds	r4, r7, r3
    a926:	238e      	movs	r3, #142	; 0x8e
    a928:	009b      	lsls	r3, r3, #2
    a92a:	18fb      	adds	r3, r7, r3
    a92c:	0011      	movs	r1, r2
    a92e:	0018      	movs	r0, r3
    a930:	4b7a      	ldr	r3, [pc, #488]	; (ab1c <f_unlink+0x244>)
    a932:	4798      	blx	r3
    a934:	0003      	movs	r3, r0
    a936:	7023      	strb	r3, [r4, #0]
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
    a938:	4b76      	ldr	r3, [pc, #472]	; (ab14 <f_unlink+0x23c>)
    a93a:	18fb      	adds	r3, r7, r3
    a93c:	781b      	ldrb	r3, [r3, #0]
    a93e:	2b00      	cmp	r3, #0
    a940:	d000      	beq.n	a944 <f_unlink+0x6c>
    a942:	e0dc      	b.n	aafe <f_unlink+0x226>
			dir = dj.dir;
    a944:	238e      	movs	r3, #142	; 0x8e
    a946:	009b      	lsls	r3, r3, #2
    a948:	18fb      	adds	r3, r7, r3
    a94a:	695b      	ldr	r3, [r3, #20]
    a94c:	2298      	movs	r2, #152	; 0x98
    a94e:	0092      	lsls	r2, r2, #2
    a950:	18ba      	adds	r2, r7, r2
    a952:	6013      	str	r3, [r2, #0]
			if (!dir) {
    a954:	2398      	movs	r3, #152	; 0x98
    a956:	009b      	lsls	r3, r3, #2
    a958:	18fb      	adds	r3, r7, r3
    a95a:	681b      	ldr	r3, [r3, #0]
    a95c:	2b00      	cmp	r3, #0
    a95e:	d104      	bne.n	a96a <f_unlink+0x92>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
    a960:	4b6c      	ldr	r3, [pc, #432]	; (ab14 <f_unlink+0x23c>)
    a962:	18fb      	adds	r3, r7, r3
    a964:	2206      	movs	r2, #6
    a966:	701a      	strb	r2, [r3, #0]
    a968:	e00d      	b.n	a986 <f_unlink+0xae>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
    a96a:	2398      	movs	r3, #152	; 0x98
    a96c:	009b      	lsls	r3, r3, #2
    a96e:	18fb      	adds	r3, r7, r3
    a970:	681b      	ldr	r3, [r3, #0]
    a972:	330b      	adds	r3, #11
    a974:	781b      	ldrb	r3, [r3, #0]
    a976:	001a      	movs	r2, r3
    a978:	2301      	movs	r3, #1
    a97a:	4013      	ands	r3, r2
    a97c:	d003      	beq.n	a986 <f_unlink+0xae>
					res = FR_DENIED;		/* Cannot remove R/O object */
    a97e:	4b65      	ldr	r3, [pc, #404]	; (ab14 <f_unlink+0x23c>)
    a980:	18fb      	adds	r3, r7, r3
    a982:	2207      	movs	r2, #7
    a984:	701a      	strb	r2, [r3, #0]
			}
			dclst = LD_CLUST(dir);
    a986:	2398      	movs	r3, #152	; 0x98
    a988:	009b      	lsls	r3, r3, #2
    a98a:	18fb      	adds	r3, r7, r3
    a98c:	681b      	ldr	r3, [r3, #0]
    a98e:	3315      	adds	r3, #21
    a990:	781b      	ldrb	r3, [r3, #0]
    a992:	021b      	lsls	r3, r3, #8
    a994:	b21a      	sxth	r2, r3
    a996:	2398      	movs	r3, #152	; 0x98
    a998:	009b      	lsls	r3, r3, #2
    a99a:	18fb      	adds	r3, r7, r3
    a99c:	681b      	ldr	r3, [r3, #0]
    a99e:	3314      	adds	r3, #20
    a9a0:	781b      	ldrb	r3, [r3, #0]
    a9a2:	b21b      	sxth	r3, r3
    a9a4:	4313      	orrs	r3, r2
    a9a6:	b21b      	sxth	r3, r3
    a9a8:	b29b      	uxth	r3, r3
    a9aa:	041b      	lsls	r3, r3, #16
    a9ac:	2298      	movs	r2, #152	; 0x98
    a9ae:	0092      	lsls	r2, r2, #2
    a9b0:	18ba      	adds	r2, r7, r2
    a9b2:	6812      	ldr	r2, [r2, #0]
    a9b4:	321b      	adds	r2, #27
    a9b6:	7812      	ldrb	r2, [r2, #0]
    a9b8:	0212      	lsls	r2, r2, #8
    a9ba:	b211      	sxth	r1, r2
    a9bc:	2298      	movs	r2, #152	; 0x98
    a9be:	0092      	lsls	r2, r2, #2
    a9c0:	18ba      	adds	r2, r7, r2
    a9c2:	6812      	ldr	r2, [r2, #0]
    a9c4:	321a      	adds	r2, #26
    a9c6:	7812      	ldrb	r2, [r2, #0]
    a9c8:	b212      	sxth	r2, r2
    a9ca:	430a      	orrs	r2, r1
    a9cc:	b212      	sxth	r2, r2
    a9ce:	b292      	uxth	r2, r2
    a9d0:	4313      	orrs	r3, r2
    a9d2:	2297      	movs	r2, #151	; 0x97
    a9d4:	0092      	lsls	r2, r2, #2
    a9d6:	18ba      	adds	r2, r7, r2
    a9d8:	6013      	str	r3, [r2, #0]
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    a9da:	4b4e      	ldr	r3, [pc, #312]	; (ab14 <f_unlink+0x23c>)
    a9dc:	18fb      	adds	r3, r7, r3
    a9de:	781b      	ldrb	r3, [r3, #0]
    a9e0:	2b00      	cmp	r3, #0
    a9e2:	d152      	bne.n	aa8a <f_unlink+0x1b2>
    a9e4:	2398      	movs	r3, #152	; 0x98
    a9e6:	009b      	lsls	r3, r3, #2
    a9e8:	18fb      	adds	r3, r7, r3
    a9ea:	681b      	ldr	r3, [r3, #0]
    a9ec:	330b      	adds	r3, #11
    a9ee:	781b      	ldrb	r3, [r3, #0]
    a9f0:	001a      	movs	r2, r3
    a9f2:	2310      	movs	r3, #16
    a9f4:	4013      	ands	r3, r2
    a9f6:	d048      	beq.n	aa8a <f_unlink+0x1b2>
				if (dclst < 2) {
    a9f8:	2397      	movs	r3, #151	; 0x97
    a9fa:	009b      	lsls	r3, r3, #2
    a9fc:	18fb      	adds	r3, r7, r3
    a9fe:	681b      	ldr	r3, [r3, #0]
    aa00:	2b01      	cmp	r3, #1
    aa02:	d804      	bhi.n	aa0e <f_unlink+0x136>
					res = FR_INT_ERR;
    aa04:	4b43      	ldr	r3, [pc, #268]	; (ab14 <f_unlink+0x23c>)
    aa06:	18fb      	adds	r3, r7, r3
    aa08:	2202      	movs	r2, #2
    aa0a:	701a      	strb	r2, [r3, #0]
    aa0c:	e03d      	b.n	aa8a <f_unlink+0x1b2>
				} else {
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
    aa0e:	238e      	movs	r3, #142	; 0x8e
    aa10:	009b      	lsls	r3, r3, #2
    aa12:	18f9      	adds	r1, r7, r3
    aa14:	2385      	movs	r3, #133	; 0x85
    aa16:	009b      	lsls	r3, r3, #2
    aa18:	18fb      	adds	r3, r7, r3
    aa1a:	2224      	movs	r2, #36	; 0x24
    aa1c:	0018      	movs	r0, r3
    aa1e:	4b40      	ldr	r3, [pc, #256]	; (ab20 <f_unlink+0x248>)
    aa20:	4798      	blx	r3
					sdj.sclust = dclst;
    aa22:	2385      	movs	r3, #133	; 0x85
    aa24:	009b      	lsls	r3, r3, #2
    aa26:	18fb      	adds	r3, r7, r3
    aa28:	2297      	movs	r2, #151	; 0x97
    aa2a:	0092      	lsls	r2, r2, #2
    aa2c:	18ba      	adds	r2, r7, r2
    aa2e:	6812      	ldr	r2, [r2, #0]
    aa30:	609a      	str	r2, [r3, #8]
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    aa32:	4b38      	ldr	r3, [pc, #224]	; (ab14 <f_unlink+0x23c>)
    aa34:	18fc      	adds	r4, r7, r3
    aa36:	2385      	movs	r3, #133	; 0x85
    aa38:	009b      	lsls	r3, r3, #2
    aa3a:	18fb      	adds	r3, r7, r3
    aa3c:	2102      	movs	r1, #2
    aa3e:	0018      	movs	r0, r3
    aa40:	4b38      	ldr	r3, [pc, #224]	; (ab24 <f_unlink+0x24c>)
    aa42:	4798      	blx	r3
    aa44:	0003      	movs	r3, r0
    aa46:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) {
    aa48:	4b32      	ldr	r3, [pc, #200]	; (ab14 <f_unlink+0x23c>)
    aa4a:	18fb      	adds	r3, r7, r3
    aa4c:	781b      	ldrb	r3, [r3, #0]
    aa4e:	2b00      	cmp	r3, #0
    aa50:	d11b      	bne.n	aa8a <f_unlink+0x1b2>
						res = dir_read(&sdj);
    aa52:	4b30      	ldr	r3, [pc, #192]	; (ab14 <f_unlink+0x23c>)
    aa54:	18fc      	adds	r4, r7, r3
    aa56:	2385      	movs	r3, #133	; 0x85
    aa58:	009b      	lsls	r3, r3, #2
    aa5a:	18fb      	adds	r3, r7, r3
    aa5c:	0018      	movs	r0, r3
    aa5e:	4b32      	ldr	r3, [pc, #200]	; (ab28 <f_unlink+0x250>)
    aa60:	4798      	blx	r3
    aa62:	0003      	movs	r3, r0
    aa64:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK			/* Not empty dir */
    aa66:	4b2b      	ldr	r3, [pc, #172]	; (ab14 <f_unlink+0x23c>)
    aa68:	18fb      	adds	r3, r7, r3
    aa6a:	781b      	ldrb	r3, [r3, #0]
    aa6c:	2b00      	cmp	r3, #0
    aa6e:	d103      	bne.n	aa78 <f_unlink+0x1a0>
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
#endif
						) res = FR_DENIED;
    aa70:	4b28      	ldr	r3, [pc, #160]	; (ab14 <f_unlink+0x23c>)
    aa72:	18fb      	adds	r3, r7, r3
    aa74:	2207      	movs	r2, #7
    aa76:	701a      	strb	r2, [r3, #0]
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    aa78:	4b26      	ldr	r3, [pc, #152]	; (ab14 <f_unlink+0x23c>)
    aa7a:	18fb      	adds	r3, r7, r3
    aa7c:	781b      	ldrb	r3, [r3, #0]
    aa7e:	2b04      	cmp	r3, #4
    aa80:	d103      	bne.n	aa8a <f_unlink+0x1b2>
    aa82:	4b24      	ldr	r3, [pc, #144]	; (ab14 <f_unlink+0x23c>)
    aa84:	18fb      	adds	r3, r7, r3
    aa86:	2200      	movs	r2, #0
    aa88:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			if (res == FR_OK) {
    aa8a:	4b22      	ldr	r3, [pc, #136]	; (ab14 <f_unlink+0x23c>)
    aa8c:	18fb      	adds	r3, r7, r3
    aa8e:	781b      	ldrb	r3, [r3, #0]
    aa90:	2b00      	cmp	r3, #0
    aa92:	d134      	bne.n	aafe <f_unlink+0x226>
				res = dir_remove(&dj);		/* Remove the directory entry */
    aa94:	4b1f      	ldr	r3, [pc, #124]	; (ab14 <f_unlink+0x23c>)
    aa96:	18fc      	adds	r4, r7, r3
    aa98:	238e      	movs	r3, #142	; 0x8e
    aa9a:	009b      	lsls	r3, r3, #2
    aa9c:	18fb      	adds	r3, r7, r3
    aa9e:	0018      	movs	r0, r3
    aaa0:	4b22      	ldr	r3, [pc, #136]	; (ab2c <f_unlink+0x254>)
    aaa2:	4798      	blx	r3
    aaa4:	0003      	movs	r3, r0
    aaa6:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
    aaa8:	4b1a      	ldr	r3, [pc, #104]	; (ab14 <f_unlink+0x23c>)
    aaaa:	18fb      	adds	r3, r7, r3
    aaac:	781b      	ldrb	r3, [r3, #0]
    aaae:	2b00      	cmp	r3, #0
    aab0:	d125      	bne.n	aafe <f_unlink+0x226>
					if (dclst)				/* Remove the cluster chain if exist */
    aab2:	2397      	movs	r3, #151	; 0x97
    aab4:	009b      	lsls	r3, r3, #2
    aab6:	18fb      	adds	r3, r7, r3
    aab8:	681b      	ldr	r3, [r3, #0]
    aaba:	2b00      	cmp	r3, #0
    aabc:	d00f      	beq.n	aade <f_unlink+0x206>
						res = remove_chain(dj.fs, dclst);
    aabe:	238e      	movs	r3, #142	; 0x8e
    aac0:	009b      	lsls	r3, r3, #2
    aac2:	18fb      	adds	r3, r7, r3
    aac4:	681b      	ldr	r3, [r3, #0]
    aac6:	4a13      	ldr	r2, [pc, #76]	; (ab14 <f_unlink+0x23c>)
    aac8:	18bc      	adds	r4, r7, r2
    aaca:	2297      	movs	r2, #151	; 0x97
    aacc:	0092      	lsls	r2, r2, #2
    aace:	18ba      	adds	r2, r7, r2
    aad0:	6812      	ldr	r2, [r2, #0]
    aad2:	0011      	movs	r1, r2
    aad4:	0018      	movs	r0, r3
    aad6:	4b16      	ldr	r3, [pc, #88]	; (ab30 <f_unlink+0x258>)
    aad8:	4798      	blx	r3
    aada:	0003      	movs	r3, r0
    aadc:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) res = sync(dj.fs);
    aade:	4b0d      	ldr	r3, [pc, #52]	; (ab14 <f_unlink+0x23c>)
    aae0:	18fb      	adds	r3, r7, r3
    aae2:	781b      	ldrb	r3, [r3, #0]
    aae4:	2b00      	cmp	r3, #0
    aae6:	d10a      	bne.n	aafe <f_unlink+0x226>
    aae8:	238e      	movs	r3, #142	; 0x8e
    aaea:	009b      	lsls	r3, r3, #2
    aaec:	18fb      	adds	r3, r7, r3
    aaee:	681b      	ldr	r3, [r3, #0]
    aaf0:	4a08      	ldr	r2, [pc, #32]	; (ab14 <f_unlink+0x23c>)
    aaf2:	18bc      	adds	r4, r7, r2
    aaf4:	0018      	movs	r0, r3
    aaf6:	4b0f      	ldr	r3, [pc, #60]	; (ab34 <f_unlink+0x25c>)
    aaf8:	4798      	blx	r3
    aafa:	0003      	movs	r3, r0
    aafc:	7023      	strb	r3, [r4, #0]
				}
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
    aafe:	4b05      	ldr	r3, [pc, #20]	; (ab14 <f_unlink+0x23c>)
    ab00:	18fb      	adds	r3, r7, r3
    ab02:	781b      	ldrb	r3, [r3, #0]
}
    ab04:	0018      	movs	r0, r3
    ab06:	46bd      	mov	sp, r7
    ab08:	239b      	movs	r3, #155	; 0x9b
    ab0a:	009b      	lsls	r3, r3, #2
    ab0c:	449d      	add	sp, r3
    ab0e:	bd90      	pop	{r4, r7, pc}
    ab10:	fffffd94 	.word	0xfffffd94
    ab14:	00000267 	.word	0x00000267
    ab18:	000092e5 	.word	0x000092e5
    ab1c:	000090d9 	.word	0x000090d9
    ab20:	00007401 	.word	0x00007401
    ab24:	00007d29 	.word	0x00007d29
    ab28:	0000868d 	.word	0x0000868d
    ab2c:	00008bb9 	.word	0x00008bb9
    ab30:	00007b25 	.word	0x00007b25
    ab34:	000075ad 	.word	0x000075ad

0000ab38 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
    ab38:	b590      	push	{r4, r7, lr}
    ab3a:	b087      	sub	sp, #28
    ab3c:	af00      	add	r7, sp, #0
    ab3e:	0002      	movs	r2, r0
    ab40:	6039      	str	r1, [r7, #0]
    ab42:	1dfb      	adds	r3, r7, #7
    ab44:	701a      	strb	r2, [r3, #0]
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
    ab46:	230c      	movs	r3, #12
    ab48:	18fb      	adds	r3, r7, r3
    ab4a:	1dfa      	adds	r2, r7, #7
    ab4c:	7812      	ldrb	r2, [r2, #0]
    ab4e:	701a      	strb	r2, [r3, #0]
	btw = 1;
    ab50:	2301      	movs	r3, #1
    ab52:	617b      	str	r3, [r7, #20]
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
    ab54:	2310      	movs	r3, #16
    ab56:	18fb      	adds	r3, r7, r3
    ab58:	697a      	ldr	r2, [r7, #20]
    ab5a:	210c      	movs	r1, #12
    ab5c:	1879      	adds	r1, r7, r1
    ab5e:	6838      	ldr	r0, [r7, #0]
    ab60:	4c06      	ldr	r4, [pc, #24]	; (ab7c <f_putc+0x44>)
    ab62:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
    ab64:	693a      	ldr	r2, [r7, #16]
    ab66:	697b      	ldr	r3, [r7, #20]
    ab68:	429a      	cmp	r2, r3
    ab6a:	d101      	bne.n	ab70 <f_putc+0x38>
    ab6c:	2301      	movs	r3, #1
    ab6e:	e001      	b.n	ab74 <f_putc+0x3c>
    ab70:	2301      	movs	r3, #1
    ab72:	425b      	negs	r3, r3
}
    ab74:	0018      	movs	r0, r3
    ab76:	46bd      	mov	sp, r7
    ab78:	b007      	add	sp, #28
    ab7a:	bd90      	pop	{r4, r7, pc}
    ab7c:	0000a159 	.word	0x0000a159

0000ab80 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    ab80:	b580      	push	{r7, lr}
    ab82:	b084      	sub	sp, #16
    ab84:	af00      	add	r7, sp, #0
    ab86:	6078      	str	r0, [r7, #4]
    ab88:	6039      	str	r1, [r7, #0]
	int n;


	for (n = 0; *str; str++, n++) {
    ab8a:	2300      	movs	r3, #0
    ab8c:	60fb      	str	r3, [r7, #12]
    ab8e:	e012      	b.n	abb6 <f_puts+0x36>
		if (f_putc(*str, fil) == EOF) return EOF;
    ab90:	687b      	ldr	r3, [r7, #4]
    ab92:	781b      	ldrb	r3, [r3, #0]
    ab94:	683a      	ldr	r2, [r7, #0]
    ab96:	0011      	movs	r1, r2
    ab98:	0018      	movs	r0, r3
    ab9a:	4b0b      	ldr	r3, [pc, #44]	; (abc8 <f_puts+0x48>)
    ab9c:	4798      	blx	r3
    ab9e:	0003      	movs	r3, r0
    aba0:	3301      	adds	r3, #1
    aba2:	d102      	bne.n	abaa <f_puts+0x2a>
    aba4:	2301      	movs	r3, #1
    aba6:	425b      	negs	r3, r3
    aba8:	e00a      	b.n	abc0 <f_puts+0x40>
	for (n = 0; *str; str++, n++) {
    abaa:	687b      	ldr	r3, [r7, #4]
    abac:	3301      	adds	r3, #1
    abae:	607b      	str	r3, [r7, #4]
    abb0:	68fb      	ldr	r3, [r7, #12]
    abb2:	3301      	adds	r3, #1
    abb4:	60fb      	str	r3, [r7, #12]
    abb6:	687b      	ldr	r3, [r7, #4]
    abb8:	781b      	ldrb	r3, [r3, #0]
    abba:	2b00      	cmp	r3, #0
    abbc:	d1e8      	bne.n	ab90 <f_puts+0x10>
	}
	return n;
    abbe:	68fb      	ldr	r3, [r7, #12]
}
    abc0:	0018      	movs	r0, r3
    abc2:	46bd      	mov	sp, r7
    abc4:	b004      	add	sp, #16
    abc6:	bd80      	pop	{r7, pc}
    abc8:	0000ab39 	.word	0x0000ab39

0000abcc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
    abcc:	b580      	push	{r7, lr}
    abce:	b084      	sub	sp, #16
    abd0:	af00      	add	r7, sp, #0
    abd2:	0002      	movs	r2, r0
    abd4:	6039      	str	r1, [r7, #0]
    abd6:	1dbb      	adds	r3, r7, #6
    abd8:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
    abda:	1dbb      	adds	r3, r7, #6
    abdc:	881b      	ldrh	r3, [r3, #0]
    abde:	2b7f      	cmp	r3, #127	; 0x7f
    abe0:	d805      	bhi.n	abee <ff_convert+0x22>
		c = src;
    abe2:	230e      	movs	r3, #14
    abe4:	18fb      	adds	r3, r7, r3
    abe6:	1dba      	adds	r2, r7, #6
    abe8:	8812      	ldrh	r2, [r2, #0]
    abea:	801a      	strh	r2, [r3, #0]
    abec:	e03a      	b.n	ac64 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    abee:	683b      	ldr	r3, [r7, #0]
    abf0:	2b00      	cmp	r3, #0
    abf2:	d010      	beq.n	ac16 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    abf4:	1dbb      	adds	r3, r7, #6
    abf6:	881b      	ldrh	r3, [r3, #0]
    abf8:	2bff      	cmp	r3, #255	; 0xff
    abfa:	d807      	bhi.n	ac0c <ff_convert+0x40>
    abfc:	1dbb      	adds	r3, r7, #6
    abfe:	881b      	ldrh	r3, [r3, #0]
    ac00:	3b80      	subs	r3, #128	; 0x80
    ac02:	001a      	movs	r2, r3
    ac04:	4b1b      	ldr	r3, [pc, #108]	; (ac74 <ff_convert+0xa8>)
    ac06:	0052      	lsls	r2, r2, #1
    ac08:	5ad2      	ldrh	r2, [r2, r3]
    ac0a:	e000      	b.n	ac0e <ff_convert+0x42>
    ac0c:	2200      	movs	r2, #0
    ac0e:	230e      	movs	r3, #14
    ac10:	18fb      	adds	r3, r7, r3
    ac12:	801a      	strh	r2, [r3, #0]
    ac14:	e026      	b.n	ac64 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
    ac16:	230e      	movs	r3, #14
    ac18:	18fb      	adds	r3, r7, r3
    ac1a:	2200      	movs	r2, #0
    ac1c:	801a      	strh	r2, [r3, #0]
    ac1e:	e010      	b.n	ac42 <ff_convert+0x76>
				if (src == Tbl[c]) break;
    ac20:	230e      	movs	r3, #14
    ac22:	18fb      	adds	r3, r7, r3
    ac24:	881a      	ldrh	r2, [r3, #0]
    ac26:	4b13      	ldr	r3, [pc, #76]	; (ac74 <ff_convert+0xa8>)
    ac28:	0052      	lsls	r2, r2, #1
    ac2a:	5ad3      	ldrh	r3, [r2, r3]
    ac2c:	1dba      	adds	r2, r7, #6
    ac2e:	8812      	ldrh	r2, [r2, #0]
    ac30:	429a      	cmp	r2, r3
    ac32:	d00c      	beq.n	ac4e <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
    ac34:	230e      	movs	r3, #14
    ac36:	18fb      	adds	r3, r7, r3
    ac38:	881a      	ldrh	r2, [r3, #0]
    ac3a:	230e      	movs	r3, #14
    ac3c:	18fb      	adds	r3, r7, r3
    ac3e:	3201      	adds	r2, #1
    ac40:	801a      	strh	r2, [r3, #0]
    ac42:	230e      	movs	r3, #14
    ac44:	18fb      	adds	r3, r7, r3
    ac46:	881b      	ldrh	r3, [r3, #0]
    ac48:	2b7f      	cmp	r3, #127	; 0x7f
    ac4a:	d9e9      	bls.n	ac20 <ff_convert+0x54>
    ac4c:	e000      	b.n	ac50 <ff_convert+0x84>
				if (src == Tbl[c]) break;
    ac4e:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
    ac50:	230e      	movs	r3, #14
    ac52:	18fb      	adds	r3, r7, r3
    ac54:	881b      	ldrh	r3, [r3, #0]
    ac56:	3380      	adds	r3, #128	; 0x80
    ac58:	b29a      	uxth	r2, r3
    ac5a:	230e      	movs	r3, #14
    ac5c:	18fb      	adds	r3, r7, r3
    ac5e:	21ff      	movs	r1, #255	; 0xff
    ac60:	400a      	ands	r2, r1
    ac62:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
    ac64:	230e      	movs	r3, #14
    ac66:	18fb      	adds	r3, r7, r3
    ac68:	881b      	ldrh	r3, [r3, #0]
}
    ac6a:	0018      	movs	r0, r3
    ac6c:	46bd      	mov	sp, r7
    ac6e:	b004      	add	sp, #16
    ac70:	bd80      	pop	{r7, pc}
    ac72:	46c0      	nop			; (mov r8, r8)
    ac74:	0000ce6c 	.word	0x0000ce6c

0000ac78 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
    ac78:	b580      	push	{r7, lr}
    ac7a:	b084      	sub	sp, #16
    ac7c:	af00      	add	r7, sp, #0
    ac7e:	0002      	movs	r2, r0
    ac80:	1dbb      	adds	r3, r7, #6
    ac82:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    ac84:	2300      	movs	r3, #0
    ac86:	60fb      	str	r3, [r7, #12]
    ac88:	e002      	b.n	ac90 <ff_wtoupper+0x18>
    ac8a:	68fb      	ldr	r3, [r7, #12]
    ac8c:	3301      	adds	r3, #1
    ac8e:	60fb      	str	r3, [r7, #12]
    ac90:	4b0f      	ldr	r3, [pc, #60]	; (acd0 <ff_wtoupper+0x58>)
    ac92:	68fa      	ldr	r2, [r7, #12]
    ac94:	0052      	lsls	r2, r2, #1
    ac96:	5ad3      	ldrh	r3, [r2, r3]
    ac98:	2b00      	cmp	r3, #0
    ac9a:	d007      	beq.n	acac <ff_wtoupper+0x34>
    ac9c:	4b0c      	ldr	r3, [pc, #48]	; (acd0 <ff_wtoupper+0x58>)
    ac9e:	68fa      	ldr	r2, [r7, #12]
    aca0:	0052      	lsls	r2, r2, #1
    aca2:	5ad3      	ldrh	r3, [r2, r3]
    aca4:	1dba      	adds	r2, r7, #6
    aca6:	8812      	ldrh	r2, [r2, #0]
    aca8:	429a      	cmp	r2, r3
    acaa:	d1ee      	bne.n	ac8a <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    acac:	4b08      	ldr	r3, [pc, #32]	; (acd0 <ff_wtoupper+0x58>)
    acae:	68fa      	ldr	r2, [r7, #12]
    acb0:	0052      	lsls	r2, r2, #1
    acb2:	5ad3      	ldrh	r3, [r2, r3]
    acb4:	2b00      	cmp	r3, #0
    acb6:	d004      	beq.n	acc2 <ff_wtoupper+0x4a>
    acb8:	4b06      	ldr	r3, [pc, #24]	; (acd4 <ff_wtoupper+0x5c>)
    acba:	68fa      	ldr	r2, [r7, #12]
    acbc:	0052      	lsls	r2, r2, #1
    acbe:	5ad3      	ldrh	r3, [r2, r3]
    acc0:	e001      	b.n	acc6 <ff_wtoupper+0x4e>
    acc2:	1dbb      	adds	r3, r7, #6
    acc4:	881b      	ldrh	r3, [r3, #0]
}
    acc6:	0018      	movs	r0, r3
    acc8:	46bd      	mov	sp, r7
    acca:	b004      	add	sp, #16
    accc:	bd80      	pop	{r7, pc}
    acce:	46c0      	nop			; (mov r8, r8)
    acd0:	0000cf6c 	.word	0x0000cf6c
    acd4:	0000d14c 	.word	0x0000d14c

0000acd8 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    acd8:	b580      	push	{r7, lr}
    acda:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
    acdc:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    ace0:	4b02      	ldr	r3, [pc, #8]	; (acec <NVIC_SystemReset+0x14>)
    ace2:	4a03      	ldr	r2, [pc, #12]	; (acf0 <NVIC_SystemReset+0x18>)
    ace4:	60da      	str	r2, [r3, #12]
    ace6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    acea:	e7fe      	b.n	acea <NVIC_SystemReset+0x12>
    acec:	e000ed00 	.word	0xe000ed00
    acf0:	05fa0004 	.word	0x05fa0004

0000acf4 <system_apb_clock_set_mask>:
{
    acf4:	b580      	push	{r7, lr}
    acf6:	b082      	sub	sp, #8
    acf8:	af00      	add	r7, sp, #0
    acfa:	0002      	movs	r2, r0
    acfc:	6039      	str	r1, [r7, #0]
    acfe:	1dfb      	adds	r3, r7, #7
    ad00:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    ad02:	1dfb      	adds	r3, r7, #7
    ad04:	781b      	ldrb	r3, [r3, #0]
    ad06:	2b01      	cmp	r3, #1
    ad08:	d00a      	beq.n	ad20 <system_apb_clock_set_mask+0x2c>
    ad0a:	2b02      	cmp	r3, #2
    ad0c:	d00f      	beq.n	ad2e <system_apb_clock_set_mask+0x3a>
    ad0e:	2b00      	cmp	r3, #0
    ad10:	d114      	bne.n	ad3c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    ad12:	4b0e      	ldr	r3, [pc, #56]	; (ad4c <system_apb_clock_set_mask+0x58>)
    ad14:	4a0d      	ldr	r2, [pc, #52]	; (ad4c <system_apb_clock_set_mask+0x58>)
    ad16:	6991      	ldr	r1, [r2, #24]
    ad18:	683a      	ldr	r2, [r7, #0]
    ad1a:	430a      	orrs	r2, r1
    ad1c:	619a      	str	r2, [r3, #24]
			break;
    ad1e:	e00f      	b.n	ad40 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    ad20:	4b0a      	ldr	r3, [pc, #40]	; (ad4c <system_apb_clock_set_mask+0x58>)
    ad22:	4a0a      	ldr	r2, [pc, #40]	; (ad4c <system_apb_clock_set_mask+0x58>)
    ad24:	69d1      	ldr	r1, [r2, #28]
    ad26:	683a      	ldr	r2, [r7, #0]
    ad28:	430a      	orrs	r2, r1
    ad2a:	61da      	str	r2, [r3, #28]
			break;
    ad2c:	e008      	b.n	ad40 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    ad2e:	4b07      	ldr	r3, [pc, #28]	; (ad4c <system_apb_clock_set_mask+0x58>)
    ad30:	4a06      	ldr	r2, [pc, #24]	; (ad4c <system_apb_clock_set_mask+0x58>)
    ad32:	6a11      	ldr	r1, [r2, #32]
    ad34:	683a      	ldr	r2, [r7, #0]
    ad36:	430a      	orrs	r2, r1
    ad38:	621a      	str	r2, [r3, #32]
			break;
    ad3a:	e001      	b.n	ad40 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    ad3c:	2317      	movs	r3, #23
    ad3e:	e000      	b.n	ad42 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    ad40:	2300      	movs	r3, #0
}
    ad42:	0018      	movs	r0, r3
    ad44:	46bd      	mov	sp, r7
    ad46:	b002      	add	sp, #8
    ad48:	bd80      	pop	{r7, pc}
    ad4a:	46c0      	nop			; (mov r8, r8)
    ad4c:	40000400 	.word	0x40000400

0000ad50 <nvm_get_config_defaults>:
{
    ad50:	b580      	push	{r7, lr}
    ad52:	b082      	sub	sp, #8
    ad54:	af00      	add	r7, sp, #0
    ad56:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    ad58:	687b      	ldr	r3, [r7, #4]
    ad5a:	2200      	movs	r2, #0
    ad5c:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    ad5e:	687b      	ldr	r3, [r7, #4]
    ad60:	2201      	movs	r2, #1
    ad62:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    ad64:	4b08      	ldr	r3, [pc, #32]	; (ad88 <nvm_get_config_defaults+0x38>)
    ad66:	685b      	ldr	r3, [r3, #4]
    ad68:	06db      	lsls	r3, r3, #27
    ad6a:	0f1b      	lsrs	r3, r3, #28
    ad6c:	b2db      	uxtb	r3, r3
    ad6e:	001a      	movs	r2, r3
    ad70:	687b      	ldr	r3, [r7, #4]
    ad72:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    ad74:	687b      	ldr	r3, [r7, #4]
    ad76:	2200      	movs	r2, #0
    ad78:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    ad7a:	687b      	ldr	r3, [r7, #4]
    ad7c:	2200      	movs	r2, #0
    ad7e:	711a      	strb	r2, [r3, #4]
}
    ad80:	46c0      	nop			; (mov r8, r8)
    ad82:	46bd      	mov	sp, r7
    ad84:	b002      	add	sp, #8
    ad86:	bd80      	pop	{r7, pc}
    ad88:	41004000 	.word	0x41004000

0000ad8c <system_pinmux_get_group_from_gpio_pin>:
{
    ad8c:	b580      	push	{r7, lr}
    ad8e:	b084      	sub	sp, #16
    ad90:	af00      	add	r7, sp, #0
    ad92:	0002      	movs	r2, r0
    ad94:	1dfb      	adds	r3, r7, #7
    ad96:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    ad98:	230f      	movs	r3, #15
    ad9a:	18fb      	adds	r3, r7, r3
    ad9c:	1dfa      	adds	r2, r7, #7
    ad9e:	7812      	ldrb	r2, [r2, #0]
    ada0:	09d2      	lsrs	r2, r2, #7
    ada2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    ada4:	230e      	movs	r3, #14
    ada6:	18fb      	adds	r3, r7, r3
    ada8:	1dfa      	adds	r2, r7, #7
    adaa:	7812      	ldrb	r2, [r2, #0]
    adac:	0952      	lsrs	r2, r2, #5
    adae:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    adb0:	4b0d      	ldr	r3, [pc, #52]	; (ade8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    adb2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    adb4:	230f      	movs	r3, #15
    adb6:	18fb      	adds	r3, r7, r3
    adb8:	781b      	ldrb	r3, [r3, #0]
    adba:	2b00      	cmp	r3, #0
    adbc:	d10f      	bne.n	adde <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    adbe:	230f      	movs	r3, #15
    adc0:	18fb      	adds	r3, r7, r3
    adc2:	781b      	ldrb	r3, [r3, #0]
    adc4:	009b      	lsls	r3, r3, #2
    adc6:	2210      	movs	r2, #16
    adc8:	4694      	mov	ip, r2
    adca:	44bc      	add	ip, r7
    adcc:	4463      	add	r3, ip
    adce:	3b08      	subs	r3, #8
    add0:	681a      	ldr	r2, [r3, #0]
    add2:	230e      	movs	r3, #14
    add4:	18fb      	adds	r3, r7, r3
    add6:	781b      	ldrb	r3, [r3, #0]
    add8:	01db      	lsls	r3, r3, #7
    adda:	18d3      	adds	r3, r2, r3
    addc:	e000      	b.n	ade0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    adde:	2300      	movs	r3, #0
}
    ade0:	0018      	movs	r0, r3
    ade2:	46bd      	mov	sp, r7
    ade4:	b004      	add	sp, #16
    ade6:	bd80      	pop	{r7, pc}
    ade8:	41004400 	.word	0x41004400

0000adec <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    adec:	b580      	push	{r7, lr}
    adee:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    adf0:	4b02      	ldr	r3, [pc, #8]	; (adfc <system_reset+0x10>)
    adf2:	4798      	blx	r3
}
    adf4:	46c0      	nop			; (mov r8, r8)
    adf6:	46bd      	mov	sp, r7
    adf8:	bd80      	pop	{r7, pc}
    adfa:	46c0      	nop			; (mov r8, r8)
    adfc:	0000acd9 	.word	0x0000acd9

0000ae00 <port_get_group_from_gpio_pin>:
{
    ae00:	b580      	push	{r7, lr}
    ae02:	b082      	sub	sp, #8
    ae04:	af00      	add	r7, sp, #0
    ae06:	0002      	movs	r2, r0
    ae08:	1dfb      	adds	r3, r7, #7
    ae0a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    ae0c:	1dfb      	adds	r3, r7, #7
    ae0e:	781b      	ldrb	r3, [r3, #0]
    ae10:	0018      	movs	r0, r3
    ae12:	4b03      	ldr	r3, [pc, #12]	; (ae20 <port_get_group_from_gpio_pin+0x20>)
    ae14:	4798      	blx	r3
    ae16:	0003      	movs	r3, r0
}
    ae18:	0018      	movs	r0, r3
    ae1a:	46bd      	mov	sp, r7
    ae1c:	b002      	add	sp, #8
    ae1e:	bd80      	pop	{r7, pc}
    ae20:	0000ad8d 	.word	0x0000ad8d

0000ae24 <port_get_config_defaults>:
{
    ae24:	b580      	push	{r7, lr}
    ae26:	b082      	sub	sp, #8
    ae28:	af00      	add	r7, sp, #0
    ae2a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    ae2c:	687b      	ldr	r3, [r7, #4]
    ae2e:	2200      	movs	r2, #0
    ae30:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    ae32:	687b      	ldr	r3, [r7, #4]
    ae34:	2201      	movs	r2, #1
    ae36:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    ae38:	687b      	ldr	r3, [r7, #4]
    ae3a:	2200      	movs	r2, #0
    ae3c:	709a      	strb	r2, [r3, #2]
}
    ae3e:	46c0      	nop			; (mov r8, r8)
    ae40:	46bd      	mov	sp, r7
    ae42:	b002      	add	sp, #8
    ae44:	bd80      	pop	{r7, pc}
	...

0000ae48 <port_pin_get_input_level>:
{
    ae48:	b580      	push	{r7, lr}
    ae4a:	b084      	sub	sp, #16
    ae4c:	af00      	add	r7, sp, #0
    ae4e:	0002      	movs	r2, r0
    ae50:	1dfb      	adds	r3, r7, #7
    ae52:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    ae54:	1dfb      	adds	r3, r7, #7
    ae56:	781b      	ldrb	r3, [r3, #0]
    ae58:	0018      	movs	r0, r3
    ae5a:	4b0b      	ldr	r3, [pc, #44]	; (ae88 <port_pin_get_input_level+0x40>)
    ae5c:	4798      	blx	r3
    ae5e:	0003      	movs	r3, r0
    ae60:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    ae62:	1dfb      	adds	r3, r7, #7
    ae64:	781b      	ldrb	r3, [r3, #0]
    ae66:	221f      	movs	r2, #31
    ae68:	4013      	ands	r3, r2
    ae6a:	2201      	movs	r2, #1
    ae6c:	409a      	lsls	r2, r3
    ae6e:	0013      	movs	r3, r2
    ae70:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
    ae72:	68fb      	ldr	r3, [r7, #12]
    ae74:	6a1b      	ldr	r3, [r3, #32]
    ae76:	68ba      	ldr	r2, [r7, #8]
    ae78:	4013      	ands	r3, r2
    ae7a:	1e5a      	subs	r2, r3, #1
    ae7c:	4193      	sbcs	r3, r2
    ae7e:	b2db      	uxtb	r3, r3
}
    ae80:	0018      	movs	r0, r3
    ae82:	46bd      	mov	sp, r7
    ae84:	b004      	add	sp, #16
    ae86:	bd80      	pop	{r7, pc}
    ae88:	0000ae01 	.word	0x0000ae01

0000ae8c <system_interrupt_enable_global>:
{
    ae8c:	b580      	push	{r7, lr}
    ae8e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    ae90:	4b04      	ldr	r3, [pc, #16]	; (aea4 <system_interrupt_enable_global+0x18>)
    ae92:	2201      	movs	r2, #1
    ae94:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
    ae96:	f3bf 8f5f 	dmb	sy
    ae9a:	b662      	cpsie	i
}
    ae9c:	46c0      	nop			; (mov r8, r8)
    ae9e:	46bd      	mov	sp, r7
    aea0:	bd80      	pop	{r7, pc}
    aea2:	46c0      	nop			; (mov r8, r8)
    aea4:	20000009 	.word	0x20000009

0000aea8 <dsu_crc32_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver.
 */
static inline void dsu_crc32_init(void)
{
    aea8:	b580      	push	{r7, lr}
    aeaa:	af00      	add	r7, sp, #0
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_DSU);
#else
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_DSU);
    aeac:	2102      	movs	r1, #2
    aeae:	2001      	movs	r0, #1
    aeb0:	4b02      	ldr	r3, [pc, #8]	; (aebc <dsu_crc32_init+0x14>)
    aeb2:	4798      	blx	r3
#endif

}
    aeb4:	46c0      	nop			; (mov r8, r8)
    aeb6:	46bd      	mov	sp, r7
    aeb8:	bd80      	pop	{r7, pc}
    aeba:	46c0      	nop			; (mov r8, r8)
    aebc:	0000acf5 	.word	0x0000acf5

0000aec0 <main>:
* @return	Unused (ANSI-C compatibility).
* @note		Bootloader code initiates here.
*****************************************************************************/

int main(void)
{
    aec0:	b590      	push	{r4, r7, lr}
    aec2:	b0e5      	sub	sp, #404	; 0x194
    aec4:	af02      	add	r7, sp, #8

/*1.) INIT SYSTEM PERIPHERALS INITIALIZATION*/
system_init();
    aec6:	4bab      	ldr	r3, [pc, #684]	; (b174 <main+0x2b4>)
    aec8:	4798      	blx	r3
delay_init();
    aeca:	4bab      	ldr	r3, [pc, #684]	; (b178 <main+0x2b8>)
    aecc:	4798      	blx	r3
InitializeSerialConsole();
    aece:	4bab      	ldr	r3, [pc, #684]	; (b17c <main+0x2bc>)
    aed0:	4798      	blx	r3
system_interrupt_enable_global();
    aed2:	4bab      	ldr	r3, [pc, #684]	; (b180 <main+0x2c0>)
    aed4:	4798      	blx	r3
/* Initialize SD MMC stack */
sd_mmc_init();
    aed6:	4bab      	ldr	r3, [pc, #684]	; (b184 <main+0x2c4>)
    aed8:	4798      	blx	r3

//Initialize the NVM driver
configure_nvm();
    aeda:	4bab      	ldr	r3, [pc, #684]	; (b188 <main+0x2c8>)
    aedc:	4798      	blx	r3

irq_initialize_vectors();
cpu_irq_enable();
    aede:	4bab      	ldr	r3, [pc, #684]	; (b18c <main+0x2cc>)
    aee0:	2201      	movs	r2, #1
    aee2:	701a      	strb	r2, [r3, #0]
    aee4:	f3bf 8f5f 	dmb	sy
    aee8:	b662      	cpsie	i

//Configure CRC32
dsu_crc32_init();
    aeea:	4ba9      	ldr	r3, [pc, #676]	; (b190 <main+0x2d0>)
    aeec:	4798      	blx	r3

SerialConsoleWriteString("ESE516 - ENTER BOOTLOADER");	//Order to add string to TX Buffer
    aeee:	4ba9      	ldr	r3, [pc, #676]	; (b194 <main+0x2d4>)
    aef0:	0018      	movs	r0, r3
    aef2:	4ba9      	ldr	r3, [pc, #676]	; (b198 <main+0x2d8>)
    aef4:	4798      	blx	r3

/*2.) STARTS SIMPLE SD CARD MOUNTING AND TEST!*/

//EXAMPLE CODE ON MOUNTING THE SD CARD AND WRITING TO A FILE
//See function inside to see how to open a file
SerialConsoleWriteString("\x0C\n\r-- SD/MMC Card Example on FatFs --\n\r");
    aef6:	4ba9      	ldr	r3, [pc, #676]	; (b19c <main+0x2dc>)
    aef8:	0018      	movs	r0, r3
    aefa:	4ba7      	ldr	r3, [pc, #668]	; (b198 <main+0x2d8>)
    aefc:	4798      	blx	r3

if(StartFilesystemAndTest() == false)
    aefe:	4ba8      	ldr	r3, [pc, #672]	; (b1a0 <main+0x2e0>)
    af00:	4798      	blx	r3
    af02:	0003      	movs	r3, r0
    af04:	001a      	movs	r2, r3
    af06:	2301      	movs	r3, #1
    af08:	4053      	eors	r3, r2
    af0a:	b2db      	uxtb	r3, r3
    af0c:	2b00      	cmp	r3, #0
    af0e:	d00a      	beq.n	af26 <main+0x66>
{
SerialConsoleWriteString("SD CARD failed! Check your connections. System will restart in 5 seconds...");
    af10:	4ba4      	ldr	r3, [pc, #656]	; (b1a4 <main+0x2e4>)
    af12:	0018      	movs	r0, r3
    af14:	4ba0      	ldr	r3, [pc, #640]	; (b198 <main+0x2d8>)
    af16:	4798      	blx	r3
delay_cycles_ms(5000);
    af18:	4ba3      	ldr	r3, [pc, #652]	; (b1a8 <main+0x2e8>)
    af1a:	0018      	movs	r0, r3
    af1c:	4ba3      	ldr	r3, [pc, #652]	; (b1ac <main+0x2ec>)
    af1e:	4798      	blx	r3
system_reset();
    af20:	4ba3      	ldr	r3, [pc, #652]	; (b1b0 <main+0x2f0>)
    af22:	4798      	blx	r3
    af24:	e003      	b.n	af2e <main+0x6e>
}
else
{
SerialConsoleWriteString("SD CARD mount success! Filesystem also mounted. \r\n");
    af26:	4ba3      	ldr	r3, [pc, #652]	; (b1b4 <main+0x2f4>)
    af28:	0018      	movs	r0, r3
    af2a:	4b9b      	ldr	r3, [pc, #620]	; (b198 <main+0x2d8>)
    af2c:	4798      	blx	r3
//Check out the NVM API at http://asf.atmel.com/docs/latest/samd21/html/group__asfdoc__sam0__nvm__group.html#asfdoc_sam0_nvm_examples . It provides important information too!

//We will ask the NVM driver for information on the MCU (SAMD21)
struct nvm_parameters parameters;
char helpStr[64]; //Used to help print values
nvm_get_parameters (&parameters); //Get NVM parameters
    af2e:	23a6      	movs	r3, #166	; 0xa6
    af30:	005b      	lsls	r3, r3, #1
    af32:	18fb      	adds	r3, r7, r3
    af34:	0018      	movs	r0, r3
    af36:	4ba0      	ldr	r3, [pc, #640]	; (b1b8 <main+0x2f8>)
    af38:	4798      	blx	r3
snprintf(helpStr, 63,"NVM Info: Number of Pages %d. Size of a page: %d bytes. \r\n", parameters.nvm_number_of_pages, parameters.page_size);
    af3a:	23a6      	movs	r3, #166	; 0xa6
    af3c:	005b      	lsls	r3, r3, #1
    af3e:	18fb      	adds	r3, r7, r3
    af40:	885b      	ldrh	r3, [r3, #2]
    af42:	0019      	movs	r1, r3
    af44:	23a6      	movs	r3, #166	; 0xa6
    af46:	005b      	lsls	r3, r3, #1
    af48:	18fb      	adds	r3, r7, r3
    af4a:	781b      	ldrb	r3, [r3, #0]
    af4c:	4a9b      	ldr	r2, [pc, #620]	; (b1bc <main+0x2fc>)
    af4e:	2086      	movs	r0, #134	; 0x86
    af50:	0040      	lsls	r0, r0, #1
    af52:	1838      	adds	r0, r7, r0
    af54:	9300      	str	r3, [sp, #0]
    af56:	000b      	movs	r3, r1
    af58:	213f      	movs	r1, #63	; 0x3f
    af5a:	4c99      	ldr	r4, [pc, #612]	; (b1c0 <main+0x300>)
    af5c:	47a0      	blx	r4
SerialConsoleWriteString(helpStr);
    af5e:	2386      	movs	r3, #134	; 0x86
    af60:	005b      	lsls	r3, r3, #1
    af62:	18fb      	adds	r3, r7, r3
    af64:	0018      	movs	r0, r3
    af66:	4b8c      	ldr	r3, [pc, #560]	; (b198 <main+0x2d8>)
    af68:	4798      	blx	r3
//Write it to the first row.


//configure pin BUTTON_0_PIN for SWO
struct port_config config_port_pin;//Define structure needed to configure a pin
port_get_config_defaults(&config_port_pin); //Initialize structure with default configurations.
    af6a:	2384      	movs	r3, #132	; 0x84
    af6c:	005b      	lsls	r3, r3, #1
    af6e:	18fb      	adds	r3, r7, r3
    af70:	0018      	movs	r0, r3
    af72:	4b94      	ldr	r3, [pc, #592]	; (b1c4 <main+0x304>)
    af74:	4798      	blx	r3
/* Set buttons as input */
config_port_pin.direction  = PORT_PIN_DIR_INPUT;
    af76:	2384      	movs	r3, #132	; 0x84
    af78:	005b      	lsls	r3, r3, #1
    af7a:	18fb      	adds	r3, r7, r3
    af7c:	2200      	movs	r2, #0
    af7e:	701a      	strb	r2, [r3, #0]
config_port_pin.input_pull = PORT_PIN_PULL_UP;
    af80:	2384      	movs	r3, #132	; 0x84
    af82:	005b      	lsls	r3, r3, #1
    af84:	18fb      	adds	r3, r7, r3
    af86:	2201      	movs	r2, #1
    af88:	705a      	strb	r2, [r3, #1]
port_pin_set_config(BUTTON_0_PIN, &config_port_pin);
    af8a:	2384      	movs	r3, #132	; 0x84
    af8c:	005b      	lsls	r3, r3, #1
    af8e:	18fb      	adds	r3, r7, r3
    af90:	0019      	movs	r1, r3
    af92:	2037      	movs	r0, #55	; 0x37
    af94:	4b8c      	ldr	r3, [pc, #560]	; (b1c8 <main+0x308>)
    af96:	4798      	blx	r3

uint8_t readBuffer[256]; //Buffer the size of one row
uint32_t numBytesRead = 0;
    af98:	2300      	movs	r3, #0
    af9a:	607b      	str	r3, [r7, #4]

// change state of flag based on SWO button press and Flags (FlagA.txt or FlagB.txt) created
state_AB = 2;
    af9c:	4b8b      	ldr	r3, [pc, #556]	; (b1cc <main+0x30c>)
    af9e:	2202      	movs	r2, #2
    afa0:	601a      	str	r2, [r3, #0]
delay_ms(20);
    afa2:	2014      	movs	r0, #20
    afa4:	4b81      	ldr	r3, [pc, #516]	; (b1ac <main+0x2ec>)
    afa6:	4798      	blx	r3

Test_bin_file_A[0] = LUN_ID_SD_MMC_0_MEM + '0';
    afa8:	4b89      	ldr	r3, [pc, #548]	; (b1d0 <main+0x310>)
    afaa:	2230      	movs	r2, #48	; 0x30
    afac:	701a      	strb	r2, [r3, #0]
res3 = f_open(&file_object, (char const *)Test_bin_file_A, FA_READ|FA_OPEN_EXISTING);
    afae:	4988      	ldr	r1, [pc, #544]	; (b1d0 <main+0x310>)
    afb0:	4b88      	ldr	r3, [pc, #544]	; (b1d4 <main+0x314>)
    afb2:	2201      	movs	r2, #1
    afb4:	0018      	movs	r0, r3
    afb6:	4b88      	ldr	r3, [pc, #544]	; (b1d8 <main+0x318>)
    afb8:	4798      	blx	r3
    afba:	0003      	movs	r3, r0
    afbc:	001a      	movs	r2, r3
    afbe:	4b87      	ldr	r3, [pc, #540]	; (b1dc <main+0x31c>)
    afc0:	701a      	strb	r2, [r3, #0]
Test_bin_file_B[0] = LUN_ID_SD_MMC_0_MEM + '0';
    afc2:	4b87      	ldr	r3, [pc, #540]	; (b1e0 <main+0x320>)
    afc4:	2230      	movs	r2, #48	; 0x30
    afc6:	701a      	strb	r2, [r3, #0]
res4 = f_open(&file_object, (char const *)Test_bin_file_B, FA_READ);
    afc8:	4985      	ldr	r1, [pc, #532]	; (b1e0 <main+0x320>)
    afca:	4b82      	ldr	r3, [pc, #520]	; (b1d4 <main+0x314>)
    afcc:	2201      	movs	r2, #1
    afce:	0018      	movs	r0, r3
    afd0:	4b81      	ldr	r3, [pc, #516]	; (b1d8 <main+0x318>)
    afd2:	4798      	blx	r3
    afd4:	0003      	movs	r3, r0
    afd6:	001a      	movs	r2, r3
    afd8:	4b82      	ldr	r3, [pc, #520]	; (b1e4 <main+0x324>)
    afda:	701a      	strb	r2, [r3, #0]

if(res3 == FR_OK){
    afdc:	4b7f      	ldr	r3, [pc, #508]	; (b1dc <main+0x31c>)
    afde:	781b      	ldrb	r3, [r3, #0]
    afe0:	2b00      	cmp	r3, #0
    afe2:	d103      	bne.n	afec <main+0x12c>
state_AB = 1;
    afe4:	4b79      	ldr	r3, [pc, #484]	; (b1cc <main+0x30c>)
    afe6:	2201      	movs	r2, #1
    afe8:	601a      	str	r2, [r3, #0]
    afea:	e00a      	b.n	b002 <main+0x142>
}
else if(res4 == FR_OK){
    afec:	4b7d      	ldr	r3, [pc, #500]	; (b1e4 <main+0x324>)
    afee:	781b      	ldrb	r3, [r3, #0]
    aff0:	2b00      	cmp	r3, #0
    aff2:	d103      	bne.n	affc <main+0x13c>
state_AB = 0;
    aff4:	4b75      	ldr	r3, [pc, #468]	; (b1cc <main+0x30c>)
    aff6:	2200      	movs	r2, #0
    aff8:	601a      	str	r2, [r3, #0]
    affa:	e002      	b.n	b002 <main+0x142>
}
else{
state_AB = 2;
    affc:	4b73      	ldr	r3, [pc, #460]	; (b1cc <main+0x30c>)
    affe:	2202      	movs	r2, #2
    b000:	601a      	str	r2, [r3, #0]
}

Test_file_name_B[0] = LUN_ID_SD_MMC_0_MEM + '0';
    b002:	4b79      	ldr	r3, [pc, #484]	; (b1e8 <main+0x328>)
    b004:	2230      	movs	r2, #48	; 0x30
    b006:	701a      	strb	r2, [r3, #0]
res1 = f_open(&file_object, (char const *)Test_file_name_B, FA_READ|FA_OPEN_EXISTING);
    b008:	4977      	ldr	r1, [pc, #476]	; (b1e8 <main+0x328>)
    b00a:	4b72      	ldr	r3, [pc, #456]	; (b1d4 <main+0x314>)
    b00c:	2201      	movs	r2, #1
    b00e:	0018      	movs	r0, r3
    b010:	4b71      	ldr	r3, [pc, #452]	; (b1d8 <main+0x318>)
    b012:	4798      	blx	r3
    b014:	0003      	movs	r3, r0
    b016:	001a      	movs	r2, r3
    b018:	4b74      	ldr	r3, [pc, #464]	; (b1ec <main+0x32c>)
    b01a:	701a      	strb	r2, [r3, #0]
Test_file_name_A[0] = LUN_ID_SD_MMC_0_MEM + '0';
    b01c:	4b74      	ldr	r3, [pc, #464]	; (b1f0 <main+0x330>)
    b01e:	2230      	movs	r2, #48	; 0x30
    b020:	701a      	strb	r2, [r3, #0]
res2 = f_open(&file_object, (char const *)Test_file_name_A, FA_READ);
    b022:	4973      	ldr	r1, [pc, #460]	; (b1f0 <main+0x330>)
    b024:	4b6b      	ldr	r3, [pc, #428]	; (b1d4 <main+0x314>)
    b026:	2201      	movs	r2, #1
    b028:	0018      	movs	r0, r3
    b02a:	4b6b      	ldr	r3, [pc, #428]	; (b1d8 <main+0x318>)
    b02c:	4798      	blx	r3
    b02e:	0003      	movs	r3, r0
    b030:	001a      	movs	r2, r3
    b032:	4b70      	ldr	r3, [pc, #448]	; (b1f4 <main+0x334>)
    b034:	701a      	strb	r2, [r3, #0]

if(port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE && res1 == FR_OK){
    b036:	2037      	movs	r0, #55	; 0x37
    b038:	4b6f      	ldr	r3, [pc, #444]	; (b1f8 <main+0x338>)
    b03a:	4798      	blx	r3
    b03c:	0003      	movs	r3, r0
    b03e:	001a      	movs	r2, r3
    b040:	2301      	movs	r3, #1
    b042:	4053      	eors	r3, r2
    b044:	b2db      	uxtb	r3, r3
    b046:	2b00      	cmp	r3, #0
    b048:	d00e      	beq.n	b068 <main+0x1a8>
    b04a:	4b68      	ldr	r3, [pc, #416]	; (b1ec <main+0x32c>)
    b04c:	781b      	ldrb	r3, [r3, #0]
    b04e:	2b00      	cmp	r3, #0
    b050:	d10a      	bne.n	b068 <main+0x1a8>
//if(state_AB == 1){
// Test_file_name_B[0] = LUN_ID_SD_MMC_0_MEM + '0';
// res = f_open(&file_object, (char const *)Test_file_name_B, FA_READ|FA_OPEN_EXISTING);
// if (res == FR_OK)
// {
state_AB = 0; //change state of flag
    b052:	4b5e      	ldr	r3, [pc, #376]	; (b1cc <main+0x30c>)
    b054:	2200      	movs	r2, #0
    b056:	601a      	str	r2, [r3, #0]
delay_ms(20);
    b058:	2014      	movs	r0, #20
    b05a:	4b54      	ldr	r3, [pc, #336]	; (b1ac <main+0x2ec>)
    b05c:	4798      	blx	r3
f_unlink((char const*)Test_file_name_B); //unlink FlagB.txt
    b05e:	4b62      	ldr	r3, [pc, #392]	; (b1e8 <main+0x328>)
    b060:	0018      	movs	r0, r3
    b062:	4b66      	ldr	r3, [pc, #408]	; (b1fc <main+0x33c>)
    b064:	4798      	blx	r3
    b066:	e017      	b.n	b098 <main+0x1d8>
//}
}
else if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE && res2 == FR_OK){
    b068:	2037      	movs	r0, #55	; 0x37
    b06a:	4b63      	ldr	r3, [pc, #396]	; (b1f8 <main+0x338>)
    b06c:	4798      	blx	r3
    b06e:	0003      	movs	r3, r0
    b070:	001a      	movs	r2, r3
    b072:	2301      	movs	r3, #1
    b074:	4053      	eors	r3, r2
    b076:	b2db      	uxtb	r3, r3
    b078:	2b00      	cmp	r3, #0
    b07a:	d00d      	beq.n	b098 <main+0x1d8>
    b07c:	4b5d      	ldr	r3, [pc, #372]	; (b1f4 <main+0x334>)
    b07e:	781b      	ldrb	r3, [r3, #0]
    b080:	2b00      	cmp	r3, #0
    b082:	d109      	bne.n	b098 <main+0x1d8>
// Test_file_name_A[0] = LUN_ID_SD_MMC_0_MEM + '0';
// res = f_open(&file_object, (char const *)Test_file_name_A, FA_READ);
// if (res == FR_OK)
// {
state_AB = 1; //changing state of flag
    b084:	4b51      	ldr	r3, [pc, #324]	; (b1cc <main+0x30c>)
    b086:	2201      	movs	r2, #1
    b088:	601a      	str	r2, [r3, #0]
delay_ms(20);
    b08a:	2014      	movs	r0, #20
    b08c:	4b47      	ldr	r3, [pc, #284]	; (b1ac <main+0x2ec>)
    b08e:	4798      	blx	r3
f_unlink((char const*)Test_file_name_A); //unlink FlagA.txt
    b090:	4b57      	ldr	r3, [pc, #348]	; (b1f0 <main+0x330>)
    b092:	0018      	movs	r0, r3
    b094:	4b59      	ldr	r3, [pc, #356]	; (b1fc <main+0x33c>)
    b096:	4798      	blx	r3
//}
}

//}
//check if Status is 1 or 0. If Status is 1 then run file TestA.bin else run TestB.bin
if(state_AB == 1){
    b098:	4b4c      	ldr	r3, [pc, #304]	; (b1cc <main+0x30c>)
    b09a:	681b      	ldr	r3, [r3, #0]
    b09c:	2b01      	cmp	r3, #1
    b09e:	d000      	beq.n	b0a2 <main+0x1e2>
    b0a0:	e145      	b.n	b32e <main+0x46e>
for(int w = 0; w < 165052; w=w + 256){
    b0a2:	2300      	movs	r3, #0
    b0a4:	22c2      	movs	r2, #194	; 0xc2
    b0a6:	0052      	lsls	r2, r2, #1
    b0a8:	18ba      	adds	r2, r7, r2
    b0aa:	6013      	str	r3, [r2, #0]
    b0ac:	e129      	b.n	b302 <main+0x442>
enum status_code nvmError = nvm_erase_row(APP_START_ADDRESS + w);
    b0ae:	23c2      	movs	r3, #194	; 0xc2
    b0b0:	005b      	lsls	r3, r3, #1
    b0b2:	18fb      	adds	r3, r7, r3
    b0b4:	681b      	ldr	r3, [r3, #0]
    b0b6:	2290      	movs	r2, #144	; 0x90
    b0b8:	0252      	lsls	r2, r2, #9
    b0ba:	4694      	mov	ip, r2
    b0bc:	4463      	add	r3, ip
    b0be:	2268      	movs	r2, #104	; 0x68
    b0c0:	32ff      	adds	r2, #255	; 0xff
    b0c2:	18bc      	adds	r4, r7, r2
    b0c4:	0018      	movs	r0, r3
    b0c6:	4b4e      	ldr	r3, [pc, #312]	; (b200 <main+0x340>)
    b0c8:	4798      	blx	r3
    b0ca:	0003      	movs	r3, r0
    b0cc:	7023      	strb	r3, [r4, #0]
{
//SerialConsoleWriteString("Erase error");
}

//Make sure it got erased - we read the page. Erasure in NVM is an 0xFF
for(int iter = 0; iter < 256; iter++)
    b0ce:	2300      	movs	r3, #0
    b0d0:	22c0      	movs	r2, #192	; 0xc0
    b0d2:	0052      	lsls	r2, r2, #1
    b0d4:	18ba      	adds	r2, r7, r2
    b0d6:	6013      	str	r3, [r2, #0]
    b0d8:	e01b      	b.n	b112 <main+0x252>
{
char *a = (char *)(APP_START_ADDRESS + iter); //Pointer pointing to address APP_START_ADDRESS
    b0da:	23c0      	movs	r3, #192	; 0xc0
    b0dc:	005b      	lsls	r3, r3, #1
    b0de:	18fb      	adds	r3, r7, r3
    b0e0:	681b      	ldr	r3, [r3, #0]
    b0e2:	2290      	movs	r2, #144	; 0x90
    b0e4:	0252      	lsls	r2, r2, #9
    b0e6:	4694      	mov	ip, r2
    b0e8:	4463      	add	r3, ip
    b0ea:	22b0      	movs	r2, #176	; 0xb0
    b0ec:	0052      	lsls	r2, r2, #1
    b0ee:	18ba      	adds	r2, r7, r2
    b0f0:	6013      	str	r3, [r2, #0]
if(*a != 0xFF)
    b0f2:	23b0      	movs	r3, #176	; 0xb0
    b0f4:	005b      	lsls	r3, r3, #1
    b0f6:	18fb      	adds	r3, r7, r3
    b0f8:	681b      	ldr	r3, [r3, #0]
    b0fa:	781b      	ldrb	r3, [r3, #0]
    b0fc:	2bff      	cmp	r3, #255	; 0xff
    b0fe:	d10f      	bne.n	b120 <main+0x260>
for(int iter = 0; iter < 256; iter++)
    b100:	23c0      	movs	r3, #192	; 0xc0
    b102:	005b      	lsls	r3, r3, #1
    b104:	18fb      	adds	r3, r7, r3
    b106:	681b      	ldr	r3, [r3, #0]
    b108:	3301      	adds	r3, #1
    b10a:	22c0      	movs	r2, #192	; 0xc0
    b10c:	0052      	lsls	r2, r2, #1
    b10e:	18ba      	adds	r2, r7, r2
    b110:	6013      	str	r3, [r2, #0]
    b112:	23c0      	movs	r3, #192	; 0xc0
    b114:	005b      	lsls	r3, r3, #1
    b116:	18fb      	adds	r3, r7, r3
    b118:	681b      	ldr	r3, [r3, #0]
    b11a:	2bff      	cmp	r3, #255	; 0xff
    b11c:	dddd      	ble.n	b0da <main+0x21a>
    b11e:	e000      	b.n	b122 <main+0x262>
{
//SerialConsoleWriteString("Error - test page is not erased!");
break;
    b120:	46c0      	nop			; (mov r8, r8)
}
}


Test_bin_file_A[0] = LUN_ID_SD_MMC_0_MEM + '0';
    b122:	4b2b      	ldr	r3, [pc, #172]	; (b1d0 <main+0x310>)
    b124:	2230      	movs	r2, #48	; 0x30
    b126:	701a      	strb	r2, [r3, #0]
res = f_open(&file_object, (char const *)Test_bin_file_A, FA_READ);
    b128:	4929      	ldr	r1, [pc, #164]	; (b1d0 <main+0x310>)
    b12a:	4b2a      	ldr	r3, [pc, #168]	; (b1d4 <main+0x314>)
    b12c:	2201      	movs	r2, #1
    b12e:	0018      	movs	r0, r3
    b130:	4b29      	ldr	r3, [pc, #164]	; (b1d8 <main+0x318>)
    b132:	4798      	blx	r3
    b134:	0003      	movs	r3, r0
    b136:	001a      	movs	r2, r3
    b138:	4b32      	ldr	r3, [pc, #200]	; (b204 <main+0x344>)
    b13a:	701a      	strb	r2, [r3, #0]
//SerialConsoleWriteString("Could not open test file!\r\n");
}

FRESULT f_unlink (const TCHAR* File_name_A);

int numBytesLeft = 256;
    b13c:	2380      	movs	r3, #128	; 0x80
    b13e:	005b      	lsls	r3, r3, #1
    b140:	22be      	movs	r2, #190	; 0xbe
    b142:	0052      	lsls	r2, r2, #1
    b144:	18ba      	adds	r2, r7, r2
    b146:	6013      	str	r3, [r2, #0]
numBytesRead = 0;
    b148:	2300      	movs	r3, #0
    b14a:	607b      	str	r3, [r7, #4]
int numberBytesTotal = 0;
    b14c:	2300      	movs	r3, #0
    b14e:	22bc      	movs	r2, #188	; 0xbc
    b150:	0052      	lsls	r2, r2, #1
    b152:	18ba      	adds	r2, r7, r2
    b154:	6013      	str	r3, [r2, #0]
res = f_lseek(&file_object, w);
    b156:	23c2      	movs	r3, #194	; 0xc2
    b158:	005b      	lsls	r3, r3, #1
    b15a:	18fb      	adds	r3, r7, r3
    b15c:	681a      	ldr	r2, [r3, #0]
    b15e:	4b1d      	ldr	r3, [pc, #116]	; (b1d4 <main+0x314>)
    b160:	0011      	movs	r1, r2
    b162:	0018      	movs	r0, r3
    b164:	4b28      	ldr	r3, [pc, #160]	; (b208 <main+0x348>)
    b166:	4798      	blx	r3
    b168:	0003      	movs	r3, r0
    b16a:	001a      	movs	r2, r3
    b16c:	4b25      	ldr	r3, [pc, #148]	; (b204 <main+0x344>)
    b16e:	701a      	strb	r2, [r3, #0]
while(numBytesLeft  != 0)
    b170:	e06e      	b.n	b250 <main+0x390>
    b172:	46c0      	nop			; (mov r8, r8)
    b174:	00006c51 	.word	0x00006c51
    b178:	00000149 	.word	0x00000149
    b17c:	00000d8d 	.word	0x00000d8d
    b180:	0000ae8d 	.word	0x0000ae8d
    b184:	00001c99 	.word	0x00001c99
    b188:	0000b8a1 	.word	0x0000b8a1
    b18c:	20000009 	.word	0x20000009
    b190:	0000aea9 	.word	0x0000aea9
    b194:	0000d32c 	.word	0x0000d32c
    b198:	00000e19 	.word	0x00000e19
    b19c:	0000d348 	.word	0x0000d348
    b1a0:	0000b5c1 	.word	0x0000b5c1
    b1a4:	0000d370 	.word	0x0000d370
    b1a8:	00001388 	.word	0x00001388
    b1ac:	000001a1 	.word	0x000001a1
    b1b0:	0000aded 	.word	0x0000aded
    b1b4:	0000d3bc 	.word	0x0000d3bc
    b1b8:	000007b1 	.word	0x000007b1
    b1bc:	0000d3f0 	.word	0x0000d3f0
    b1c0:	0000bf6d 	.word	0x0000bf6d
    b1c4:	0000ae25 	.word	0x0000ae25
    b1c8:	00003341 	.word	0x00003341
    b1cc:	20000cd4 	.word	0x20000cd4
    b1d0:	20000048 	.word	0x20000048
    b1d4:	20000c74 	.word	0x20000c74
    b1d8:	0000998d 	.word	0x0000998d
    b1dc:	20000cd0 	.word	0x20000cd0
    b1e0:	20000060 	.word	0x20000060
    b1e4:	20000a40 	.word	0x20000a40
    b1e8:	2000003c 	.word	0x2000003c
    b1ec:	20000c98 	.word	0x20000c98
    b1f0:	20000030 	.word	0x20000030
    b1f4:	20000a41 	.word	0x20000a41
    b1f8:	0000ae49 	.word	0x0000ae49
    b1fc:	0000a8d9 	.word	0x0000a8d9
    b200:	00000709 	.word	0x00000709
    b204:	20000cd8 	.word	0x20000cd8
    b208:	0000a665 	.word	0x0000a665
{

res = f_read(&file_object, &readBuffer[numberBytesTotal], numBytesLeft, &numBytesRead); //Question to students: What is numBytesRead? What are we doing here?
    b20c:	2308      	movs	r3, #8
    b20e:	18fa      	adds	r2, r7, r3
    b210:	23bc      	movs	r3, #188	; 0xbc
    b212:	005b      	lsls	r3, r3, #1
    b214:	18fb      	adds	r3, r7, r3
    b216:	681b      	ldr	r3, [r3, #0]
    b218:	18d1      	adds	r1, r2, r3
    b21a:	23be      	movs	r3, #190	; 0xbe
    b21c:	005b      	lsls	r3, r3, #1
    b21e:	18fb      	adds	r3, r7, r3
    b220:	681a      	ldr	r2, [r3, #0]
    b222:	1d3b      	adds	r3, r7, #4
    b224:	48ce      	ldr	r0, [pc, #824]	; (b560 <main+0x6a0>)
    b226:	4ccf      	ldr	r4, [pc, #828]	; (b564 <main+0x6a4>)
    b228:	47a0      	blx	r4
    b22a:	0003      	movs	r3, r0
    b22c:	001a      	movs	r2, r3
    b22e:	4bce      	ldr	r3, [pc, #824]	; (b568 <main+0x6a8>)
    b230:	701a      	strb	r2, [r3, #0]
numBytesLeft -= numBytesLeft;
    b232:	2300      	movs	r3, #0
    b234:	22be      	movs	r2, #190	; 0xbe
    b236:	0052      	lsls	r2, r2, #1
    b238:	18ba      	adds	r2, r7, r2
    b23a:	6013      	str	r3, [r2, #0]
numberBytesTotal += numBytesRead;
    b23c:	23bc      	movs	r3, #188	; 0xbc
    b23e:	005b      	lsls	r3, r3, #1
    b240:	18fb      	adds	r3, r7, r3
    b242:	681a      	ldr	r2, [r3, #0]
    b244:	687b      	ldr	r3, [r7, #4]
    b246:	18d3      	adds	r3, r2, r3
    b248:	22bc      	movs	r2, #188	; 0xbc
    b24a:	0052      	lsls	r2, r2, #1
    b24c:	18ba      	adds	r2, r7, r2
    b24e:	6013      	str	r3, [r2, #0]
while(numBytesLeft  != 0)
    b250:	23be      	movs	r3, #190	; 0xbe
    b252:	005b      	lsls	r3, r3, #1
    b254:	18fb      	adds	r3, r7, r3
    b256:	681b      	ldr	r3, [r3, #0]
    b258:	2b00      	cmp	r3, #0
    b25a:	d1d7      	bne.n	b20c <main+0x34c>
}
SerialConsoleWriteString("A read successfully\r\n");
    b25c:	4bc3      	ldr	r3, [pc, #780]	; (b56c <main+0x6ac>)
    b25e:	0018      	movs	r0, r3
    b260:	4bc3      	ldr	r3, [pc, #780]	; (b570 <main+0x6b0>)
    b262:	4798      	blx	r3
//Write data to first row. Writes are per page, so we need four writes to write a complete row
res = nvm_write_buffer (APP_START_ADDRESS + w, &readBuffer[0], 64);
    b264:	23c2      	movs	r3, #194	; 0xc2
    b266:	005b      	lsls	r3, r3, #1
    b268:	18fb      	adds	r3, r7, r3
    b26a:	681b      	ldr	r3, [r3, #0]
    b26c:	2290      	movs	r2, #144	; 0x90
    b26e:	0252      	lsls	r2, r2, #9
    b270:	4694      	mov	ip, r2
    b272:	4463      	add	r3, ip
    b274:	2208      	movs	r2, #8
    b276:	18b9      	adds	r1, r7, r2
    b278:	2240      	movs	r2, #64	; 0x40
    b27a:	0018      	movs	r0, r3
    b27c:	4bbd      	ldr	r3, [pc, #756]	; (b574 <main+0x6b4>)
    b27e:	4798      	blx	r3
    b280:	0003      	movs	r3, r0
    b282:	001a      	movs	r2, r3
    b284:	4bb8      	ldr	r3, [pc, #736]	; (b568 <main+0x6a8>)
    b286:	701a      	strb	r2, [r3, #0]
res = nvm_write_buffer (APP_START_ADDRESS + 64 + w, &readBuffer[64], 64);
    b288:	23c2      	movs	r3, #194	; 0xc2
    b28a:	005b      	lsls	r3, r3, #1
    b28c:	18fb      	adds	r3, r7, r3
    b28e:	681b      	ldr	r3, [r3, #0]
    b290:	4ab9      	ldr	r2, [pc, #740]	; (b578 <main+0x6b8>)
    b292:	1898      	adds	r0, r3, r2
    b294:	2308      	movs	r3, #8
    b296:	18fb      	adds	r3, r7, r3
    b298:	3340      	adds	r3, #64	; 0x40
    b29a:	2240      	movs	r2, #64	; 0x40
    b29c:	0019      	movs	r1, r3
    b29e:	4bb5      	ldr	r3, [pc, #724]	; (b574 <main+0x6b4>)
    b2a0:	4798      	blx	r3
    b2a2:	0003      	movs	r3, r0
    b2a4:	001a      	movs	r2, r3
    b2a6:	4bb0      	ldr	r3, [pc, #704]	; (b568 <main+0x6a8>)
    b2a8:	701a      	strb	r2, [r3, #0]
res = nvm_write_buffer (APP_START_ADDRESS + 128 + w, &readBuffer[128], 64);
    b2aa:	23c2      	movs	r3, #194	; 0xc2
    b2ac:	005b      	lsls	r3, r3, #1
    b2ae:	18fb      	adds	r3, r7, r3
    b2b0:	681b      	ldr	r3, [r3, #0]
    b2b2:	4ab2      	ldr	r2, [pc, #712]	; (b57c <main+0x6bc>)
    b2b4:	1898      	adds	r0, r3, r2
    b2b6:	2308      	movs	r3, #8
    b2b8:	18fb      	adds	r3, r7, r3
    b2ba:	3380      	adds	r3, #128	; 0x80
    b2bc:	2240      	movs	r2, #64	; 0x40
    b2be:	0019      	movs	r1, r3
    b2c0:	4bac      	ldr	r3, [pc, #688]	; (b574 <main+0x6b4>)
    b2c2:	4798      	blx	r3
    b2c4:	0003      	movs	r3, r0
    b2c6:	001a      	movs	r2, r3
    b2c8:	4ba7      	ldr	r3, [pc, #668]	; (b568 <main+0x6a8>)
    b2ca:	701a      	strb	r2, [r3, #0]
res = nvm_write_buffer (APP_START_ADDRESS + 192 + w, &readBuffer[192], 64);
    b2cc:	23c2      	movs	r3, #194	; 0xc2
    b2ce:	005b      	lsls	r3, r3, #1
    b2d0:	18fb      	adds	r3, r7, r3
    b2d2:	681b      	ldr	r3, [r3, #0]
    b2d4:	4aaa      	ldr	r2, [pc, #680]	; (b580 <main+0x6c0>)
    b2d6:	1898      	adds	r0, r3, r2
    b2d8:	2308      	movs	r3, #8
    b2da:	18fb      	adds	r3, r7, r3
    b2dc:	33c0      	adds	r3, #192	; 0xc0
    b2de:	2240      	movs	r2, #64	; 0x40
    b2e0:	0019      	movs	r1, r3
    b2e2:	4ba4      	ldr	r3, [pc, #656]	; (b574 <main+0x6b4>)
    b2e4:	4798      	blx	r3
    b2e6:	0003      	movs	r3, r0
    b2e8:	001a      	movs	r2, r3
    b2ea:	4b9f      	ldr	r3, [pc, #636]	; (b568 <main+0x6a8>)
    b2ec:	701a      	strb	r2, [r3, #0]
for(int w = 0; w < 165052; w=w + 256){
    b2ee:	23c2      	movs	r3, #194	; 0xc2
    b2f0:	005b      	lsls	r3, r3, #1
    b2f2:	18fb      	adds	r3, r7, r3
    b2f4:	681b      	ldr	r3, [r3, #0]
    b2f6:	3301      	adds	r3, #1
    b2f8:	33ff      	adds	r3, #255	; 0xff
    b2fa:	22c2      	movs	r2, #194	; 0xc2
    b2fc:	0052      	lsls	r2, r2, #1
    b2fe:	18ba      	adds	r2, r7, r2
    b300:	6013      	str	r3, [r2, #0]
    b302:	23c2      	movs	r3, #194	; 0xc2
    b304:	005b      	lsls	r3, r3, #1
    b306:	18fb      	adds	r3, r7, r3
    b308:	681b      	ldr	r3, [r3, #0]
    b30a:	4a9e      	ldr	r2, [pc, #632]	; (b584 <main+0x6c4>)
    b30c:	4293      	cmp	r3, r2
    b30e:	dc00      	bgt.n	b312 <main+0x452>
    b310:	e6cd      	b.n	b0ae <main+0x1ee>

}
if (res != FR_OK)
    b312:	4b95      	ldr	r3, [pc, #596]	; (b568 <main+0x6a8>)
    b314:	781b      	ldrb	r3, [r3, #0]
    b316:	2b00      	cmp	r3, #0
    b318:	d004      	beq.n	b324 <main+0x464>
{
SerialConsoleWriteString("Test write to NVM failed!\r\n");
    b31a:	4b9b      	ldr	r3, [pc, #620]	; (b588 <main+0x6c8>)
    b31c:	0018      	movs	r0, r3
    b31e:	4b94      	ldr	r3, [pc, #592]	; (b570 <main+0x6b0>)
    b320:	4798      	blx	r3
    b322:	e10b      	b.n	b53c <main+0x67c>
}
else
{
SerialConsoleWriteString("Test write to NVM succeeded!\r\n");
    b324:	4b99      	ldr	r3, [pc, #612]	; (b58c <main+0x6cc>)
    b326:	0018      	movs	r0, r3
    b328:	4b91      	ldr	r3, [pc, #580]	; (b570 <main+0x6b0>)
    b32a:	4798      	blx	r3
    b32c:	e106      	b.n	b53c <main+0x67c>
}
}

else if (state_AB == 0){
    b32e:	4b98      	ldr	r3, [pc, #608]	; (b590 <main+0x6d0>)
    b330:	681b      	ldr	r3, [r3, #0]
    b332:	2b00      	cmp	r3, #0
    b334:	d000      	beq.n	b338 <main+0x478>
    b336:	e101      	b.n	b53c <main+0x67c>
for(int w = 0; w < 32768; w=w + 256){
    b338:	2300      	movs	r3, #0
    b33a:	22ba      	movs	r2, #186	; 0xba
    b33c:	0052      	lsls	r2, r2, #1
    b33e:	18ba      	adds	r2, r7, r2
    b340:	6013      	str	r3, [r2, #0]
    b342:	e0e6      	b.n	b512 <main+0x652>
enum status_code nvmError = nvm_erase_row(APP_START_ADDRESS + w);
    b344:	23ba      	movs	r3, #186	; 0xba
    b346:	005b      	lsls	r3, r3, #1
    b348:	18fb      	adds	r3, r7, r3
    b34a:	681b      	ldr	r3, [r3, #0]
    b34c:	2290      	movs	r2, #144	; 0x90
    b34e:	0252      	lsls	r2, r2, #9
    b350:	4694      	mov	ip, r2
    b352:	4463      	add	r3, ip
    b354:	2260      	movs	r2, #96	; 0x60
    b356:	32ff      	adds	r2, #255	; 0xff
    b358:	18bc      	adds	r4, r7, r2
    b35a:	0018      	movs	r0, r3
    b35c:	4b8d      	ldr	r3, [pc, #564]	; (b594 <main+0x6d4>)
    b35e:	4798      	blx	r3
    b360:	0003      	movs	r3, r0
    b362:	7023      	strb	r3, [r4, #0]
if(nvmError != STATUS_OK)
    b364:	2360      	movs	r3, #96	; 0x60
    b366:	33ff      	adds	r3, #255	; 0xff
    b368:	18fb      	adds	r3, r7, r3
    b36a:	781b      	ldrb	r3, [r3, #0]
    b36c:	2b00      	cmp	r3, #0
    b36e:	d003      	beq.n	b378 <main+0x4b8>
{
SerialConsoleWriteString("Erase error");
    b370:	4b89      	ldr	r3, [pc, #548]	; (b598 <main+0x6d8>)
    b372:	0018      	movs	r0, r3
    b374:	4b7e      	ldr	r3, [pc, #504]	; (b570 <main+0x6b0>)
    b376:	4798      	blx	r3
}

//Make sure it got erased - we read the page. Erasure in NVM is an 0xFF
for(int iter = 0; iter < 256; iter++)
    b378:	2300      	movs	r3, #0
    b37a:	22b8      	movs	r2, #184	; 0xb8
    b37c:	0052      	lsls	r2, r2, #1
    b37e:	18ba      	adds	r2, r7, r2
    b380:	6013      	str	r3, [r2, #0]
    b382:	e01b      	b.n	b3bc <main+0x4fc>
{
char *a = (char *)(APP_START_ADDRESS + iter); //Pointer pointing to address APP_START_ADDRESS
    b384:	23b8      	movs	r3, #184	; 0xb8
    b386:	005b      	lsls	r3, r3, #1
    b388:	18fb      	adds	r3, r7, r3
    b38a:	681b      	ldr	r3, [r3, #0]
    b38c:	2290      	movs	r2, #144	; 0x90
    b38e:	0252      	lsls	r2, r2, #9
    b390:	4694      	mov	ip, r2
    b392:	4463      	add	r3, ip
    b394:	22ac      	movs	r2, #172	; 0xac
    b396:	0052      	lsls	r2, r2, #1
    b398:	18ba      	adds	r2, r7, r2
    b39a:	6013      	str	r3, [r2, #0]
if(*a != 0xFF)
    b39c:	23ac      	movs	r3, #172	; 0xac
    b39e:	005b      	lsls	r3, r3, #1
    b3a0:	18fb      	adds	r3, r7, r3
    b3a2:	681b      	ldr	r3, [r3, #0]
    b3a4:	781b      	ldrb	r3, [r3, #0]
    b3a6:	2bff      	cmp	r3, #255	; 0xff
    b3a8:	d10f      	bne.n	b3ca <main+0x50a>
for(int iter = 0; iter < 256; iter++)
    b3aa:	23b8      	movs	r3, #184	; 0xb8
    b3ac:	005b      	lsls	r3, r3, #1
    b3ae:	18fb      	adds	r3, r7, r3
    b3b0:	681b      	ldr	r3, [r3, #0]
    b3b2:	3301      	adds	r3, #1
    b3b4:	22b8      	movs	r2, #184	; 0xb8
    b3b6:	0052      	lsls	r2, r2, #1
    b3b8:	18ba      	adds	r2, r7, r2
    b3ba:	6013      	str	r3, [r2, #0]
    b3bc:	23b8      	movs	r3, #184	; 0xb8
    b3be:	005b      	lsls	r3, r3, #1
    b3c0:	18fb      	adds	r3, r7, r3
    b3c2:	681b      	ldr	r3, [r3, #0]
    b3c4:	2bff      	cmp	r3, #255	; 0xff
    b3c6:	dddd      	ble.n	b384 <main+0x4c4>
    b3c8:	e000      	b.n	b3cc <main+0x50c>
{
//SerialConsoleWriteString("Error - test page is not erased!");
break;
    b3ca:	46c0      	nop			; (mov r8, r8)
}
}


Test_bin_file_B[0] = LUN_ID_SD_MMC_0_MEM + '0';
    b3cc:	4b73      	ldr	r3, [pc, #460]	; (b59c <main+0x6dc>)
    b3ce:	2230      	movs	r2, #48	; 0x30
    b3d0:	701a      	strb	r2, [r3, #0]
res = f_open(&file_object, (char const *)Test_bin_file_B, FA_READ);
    b3d2:	4972      	ldr	r1, [pc, #456]	; (b59c <main+0x6dc>)
    b3d4:	4b62      	ldr	r3, [pc, #392]	; (b560 <main+0x6a0>)
    b3d6:	2201      	movs	r2, #1
    b3d8:	0018      	movs	r0, r3
    b3da:	4b71      	ldr	r3, [pc, #452]	; (b5a0 <main+0x6e0>)
    b3dc:	4798      	blx	r3
    b3de:	0003      	movs	r3, r0
    b3e0:	001a      	movs	r2, r3
    b3e2:	4b61      	ldr	r3, [pc, #388]	; (b568 <main+0x6a8>)
    b3e4:	701a      	strb	r2, [r3, #0]
//SerialConsoleWriteString("Could not open test file!\r\n");
}

FRESULT f_unlink (const TCHAR* File_name_B);

int numBytesLeft = 256;
    b3e6:	2380      	movs	r3, #128	; 0x80
    b3e8:	005b      	lsls	r3, r3, #1
    b3ea:	22b6      	movs	r2, #182	; 0xb6
    b3ec:	0052      	lsls	r2, r2, #1
    b3ee:	18ba      	adds	r2, r7, r2
    b3f0:	6013      	str	r3, [r2, #0]
numBytesRead = 0;
    b3f2:	2300      	movs	r3, #0
    b3f4:	607b      	str	r3, [r7, #4]
int numberBytesTotal = 0;
    b3f6:	2300      	movs	r3, #0
    b3f8:	22b4      	movs	r2, #180	; 0xb4
    b3fa:	0052      	lsls	r2, r2, #1
    b3fc:	18ba      	adds	r2, r7, r2
    b3fe:	6013      	str	r3, [r2, #0]
res = f_lseek(&file_object, w);
    b400:	23ba      	movs	r3, #186	; 0xba
    b402:	005b      	lsls	r3, r3, #1
    b404:	18fb      	adds	r3, r7, r3
    b406:	681a      	ldr	r2, [r3, #0]
    b408:	4b55      	ldr	r3, [pc, #340]	; (b560 <main+0x6a0>)
    b40a:	0011      	movs	r1, r2
    b40c:	0018      	movs	r0, r3
    b40e:	4b65      	ldr	r3, [pc, #404]	; (b5a4 <main+0x6e4>)
    b410:	4798      	blx	r3
    b412:	0003      	movs	r3, r0
    b414:	001a      	movs	r2, r3
    b416:	4b54      	ldr	r3, [pc, #336]	; (b568 <main+0x6a8>)
    b418:	701a      	strb	r2, [r3, #0]
while(numBytesLeft  != 0)
    b41a:	e021      	b.n	b460 <main+0x5a0>
{

res = f_read(&file_object, &readBuffer[numberBytesTotal], numBytesLeft, &numBytesRead); //Question to students: What is numBytesRead? What are we doing here?
    b41c:	2308      	movs	r3, #8
    b41e:	18fa      	adds	r2, r7, r3
    b420:	23b4      	movs	r3, #180	; 0xb4
    b422:	005b      	lsls	r3, r3, #1
    b424:	18fb      	adds	r3, r7, r3
    b426:	681b      	ldr	r3, [r3, #0]
    b428:	18d1      	adds	r1, r2, r3
    b42a:	23b6      	movs	r3, #182	; 0xb6
    b42c:	005b      	lsls	r3, r3, #1
    b42e:	18fb      	adds	r3, r7, r3
    b430:	681a      	ldr	r2, [r3, #0]
    b432:	1d3b      	adds	r3, r7, #4
    b434:	484a      	ldr	r0, [pc, #296]	; (b560 <main+0x6a0>)
    b436:	4c4b      	ldr	r4, [pc, #300]	; (b564 <main+0x6a4>)
    b438:	47a0      	blx	r4
    b43a:	0003      	movs	r3, r0
    b43c:	001a      	movs	r2, r3
    b43e:	4b4a      	ldr	r3, [pc, #296]	; (b568 <main+0x6a8>)
    b440:	701a      	strb	r2, [r3, #0]
numBytesLeft -= numBytesLeft;
    b442:	2300      	movs	r3, #0
    b444:	22b6      	movs	r2, #182	; 0xb6
    b446:	0052      	lsls	r2, r2, #1
    b448:	18ba      	adds	r2, r7, r2
    b44a:	6013      	str	r3, [r2, #0]
numberBytesTotal += numBytesRead;
    b44c:	23b4      	movs	r3, #180	; 0xb4
    b44e:	005b      	lsls	r3, r3, #1
    b450:	18fb      	adds	r3, r7, r3
    b452:	681a      	ldr	r2, [r3, #0]
    b454:	687b      	ldr	r3, [r7, #4]
    b456:	18d3      	adds	r3, r2, r3
    b458:	22b4      	movs	r2, #180	; 0xb4
    b45a:	0052      	lsls	r2, r2, #1
    b45c:	18ba      	adds	r2, r7, r2
    b45e:	6013      	str	r3, [r2, #0]
while(numBytesLeft  != 0)
    b460:	23b6      	movs	r3, #182	; 0xb6
    b462:	005b      	lsls	r3, r3, #1
    b464:	18fb      	adds	r3, r7, r3
    b466:	681b      	ldr	r3, [r3, #0]
    b468:	2b00      	cmp	r3, #0
    b46a:	d1d7      	bne.n	b41c <main+0x55c>
}
SerialConsoleWriteString("A read successfully\r\n");
    b46c:	4b3f      	ldr	r3, [pc, #252]	; (b56c <main+0x6ac>)
    b46e:	0018      	movs	r0, r3
    b470:	4b3f      	ldr	r3, [pc, #252]	; (b570 <main+0x6b0>)
    b472:	4798      	blx	r3
//Write data to first row. Writes are per page, so we need four writes to write a complete row
res = nvm_write_buffer (APP_START_ADDRESS + w, &readBuffer[0], 64);
    b474:	23ba      	movs	r3, #186	; 0xba
    b476:	005b      	lsls	r3, r3, #1
    b478:	18fb      	adds	r3, r7, r3
    b47a:	681b      	ldr	r3, [r3, #0]
    b47c:	2290      	movs	r2, #144	; 0x90
    b47e:	0252      	lsls	r2, r2, #9
    b480:	4694      	mov	ip, r2
    b482:	4463      	add	r3, ip
    b484:	2208      	movs	r2, #8
    b486:	18b9      	adds	r1, r7, r2
    b488:	2240      	movs	r2, #64	; 0x40
    b48a:	0018      	movs	r0, r3
    b48c:	4b39      	ldr	r3, [pc, #228]	; (b574 <main+0x6b4>)
    b48e:	4798      	blx	r3
    b490:	0003      	movs	r3, r0
    b492:	001a      	movs	r2, r3
    b494:	4b34      	ldr	r3, [pc, #208]	; (b568 <main+0x6a8>)
    b496:	701a      	strb	r2, [r3, #0]
res = nvm_write_buffer (APP_START_ADDRESS + 64 + w, &readBuffer[64], 64);
    b498:	23ba      	movs	r3, #186	; 0xba
    b49a:	005b      	lsls	r3, r3, #1
    b49c:	18fb      	adds	r3, r7, r3
    b49e:	681b      	ldr	r3, [r3, #0]
    b4a0:	4a35      	ldr	r2, [pc, #212]	; (b578 <main+0x6b8>)
    b4a2:	1898      	adds	r0, r3, r2
    b4a4:	2308      	movs	r3, #8
    b4a6:	18fb      	adds	r3, r7, r3
    b4a8:	3340      	adds	r3, #64	; 0x40
    b4aa:	2240      	movs	r2, #64	; 0x40
    b4ac:	0019      	movs	r1, r3
    b4ae:	4b31      	ldr	r3, [pc, #196]	; (b574 <main+0x6b4>)
    b4b0:	4798      	blx	r3
    b4b2:	0003      	movs	r3, r0
    b4b4:	001a      	movs	r2, r3
    b4b6:	4b2c      	ldr	r3, [pc, #176]	; (b568 <main+0x6a8>)
    b4b8:	701a      	strb	r2, [r3, #0]
res = nvm_write_buffer (APP_START_ADDRESS + 128 + w, &readBuffer[128], 64);
    b4ba:	23ba      	movs	r3, #186	; 0xba
    b4bc:	005b      	lsls	r3, r3, #1
    b4be:	18fb      	adds	r3, r7, r3
    b4c0:	681b      	ldr	r3, [r3, #0]
    b4c2:	4a2e      	ldr	r2, [pc, #184]	; (b57c <main+0x6bc>)
    b4c4:	1898      	adds	r0, r3, r2
    b4c6:	2308      	movs	r3, #8
    b4c8:	18fb      	adds	r3, r7, r3
    b4ca:	3380      	adds	r3, #128	; 0x80
    b4cc:	2240      	movs	r2, #64	; 0x40
    b4ce:	0019      	movs	r1, r3
    b4d0:	4b28      	ldr	r3, [pc, #160]	; (b574 <main+0x6b4>)
    b4d2:	4798      	blx	r3
    b4d4:	0003      	movs	r3, r0
    b4d6:	001a      	movs	r2, r3
    b4d8:	4b23      	ldr	r3, [pc, #140]	; (b568 <main+0x6a8>)
    b4da:	701a      	strb	r2, [r3, #0]
res = nvm_write_buffer (APP_START_ADDRESS + 192 + w, &readBuffer[192], 64);
    b4dc:	23ba      	movs	r3, #186	; 0xba
    b4de:	005b      	lsls	r3, r3, #1
    b4e0:	18fb      	adds	r3, r7, r3
    b4e2:	681b      	ldr	r3, [r3, #0]
    b4e4:	4a26      	ldr	r2, [pc, #152]	; (b580 <main+0x6c0>)
    b4e6:	1898      	adds	r0, r3, r2
    b4e8:	2308      	movs	r3, #8
    b4ea:	18fb      	adds	r3, r7, r3
    b4ec:	33c0      	adds	r3, #192	; 0xc0
    b4ee:	2240      	movs	r2, #64	; 0x40
    b4f0:	0019      	movs	r1, r3
    b4f2:	4b20      	ldr	r3, [pc, #128]	; (b574 <main+0x6b4>)
    b4f4:	4798      	blx	r3
    b4f6:	0003      	movs	r3, r0
    b4f8:	001a      	movs	r2, r3
    b4fa:	4b1b      	ldr	r3, [pc, #108]	; (b568 <main+0x6a8>)
    b4fc:	701a      	strb	r2, [r3, #0]
for(int w = 0; w < 32768; w=w + 256){
    b4fe:	23ba      	movs	r3, #186	; 0xba
    b500:	005b      	lsls	r3, r3, #1
    b502:	18fb      	adds	r3, r7, r3
    b504:	681b      	ldr	r3, [r3, #0]
    b506:	3301      	adds	r3, #1
    b508:	33ff      	adds	r3, #255	; 0xff
    b50a:	22ba      	movs	r2, #186	; 0xba
    b50c:	0052      	lsls	r2, r2, #1
    b50e:	18ba      	adds	r2, r7, r2
    b510:	6013      	str	r3, [r2, #0]
    b512:	23ba      	movs	r3, #186	; 0xba
    b514:	005b      	lsls	r3, r3, #1
    b516:	18fb      	adds	r3, r7, r3
    b518:	681b      	ldr	r3, [r3, #0]
    b51a:	4a23      	ldr	r2, [pc, #140]	; (b5a8 <main+0x6e8>)
    b51c:	4293      	cmp	r3, r2
    b51e:	dc00      	bgt.n	b522 <main+0x662>
    b520:	e710      	b.n	b344 <main+0x484>

}
if (res != FR_OK)
    b522:	4b11      	ldr	r3, [pc, #68]	; (b568 <main+0x6a8>)
    b524:	781b      	ldrb	r3, [r3, #0]
    b526:	2b00      	cmp	r3, #0
    b528:	d004      	beq.n	b534 <main+0x674>
{
SerialConsoleWriteString("Test write to NVM failed!\r\n");
    b52a:	4b17      	ldr	r3, [pc, #92]	; (b588 <main+0x6c8>)
    b52c:	0018      	movs	r0, r3
    b52e:	4b10      	ldr	r3, [pc, #64]	; (b570 <main+0x6b0>)
    b530:	4798      	blx	r3
    b532:	e003      	b.n	b53c <main+0x67c>
}
else
{
SerialConsoleWriteString("Test write to NVM succeeded!\r\n");
    b534:	4b15      	ldr	r3, [pc, #84]	; (b58c <main+0x6cc>)
    b536:	0018      	movs	r0, r3
    b538:	4b0d      	ldr	r3, [pc, #52]	; (b570 <main+0x6b0>)
    b53a:	4798      	blx	r3
}

/*END BOOTLOADER HERE!*/

//4.) DEINITIALIZE HW AND JUMP TO MAIN APPLICATION!
SerialConsoleWriteString("ESE516 - EXIT BOOTLOADER");	//Order to add string to TX Buffer
    b53c:	4b1b      	ldr	r3, [pc, #108]	; (b5ac <main+0x6ec>)
    b53e:	0018      	movs	r0, r3
    b540:	4b0b      	ldr	r3, [pc, #44]	; (b570 <main+0x6b0>)
    b542:	4798      	blx	r3
delay_cycles_ms(100); //Delay to allow print
    b544:	2064      	movs	r0, #100	; 0x64
    b546:	4b1a      	ldr	r3, [pc, #104]	; (b5b0 <main+0x6f0>)
    b548:	4798      	blx	r3

//Deinitialize HW - deinitialize started HW here!
DeinitializeSerialConsole(); //Deinitializes UART
    b54a:	4b1a      	ldr	r3, [pc, #104]	; (b5b4 <main+0x6f4>)
    b54c:	4798      	blx	r3
sd_mmc_deinit(); //Deinitialize SD CARD
    b54e:	4b1a      	ldr	r3, [pc, #104]	; (b5b8 <main+0x6f8>)
    b550:	4798      	blx	r3


//Jump to application
jumpToApplication();
    b552:	4b1a      	ldr	r3, [pc, #104]	; (b5bc <main+0x6fc>)
    b554:	4798      	blx	r3
    b556:	2300      	movs	r3, #0

//Should not reach here! The device should have jumped to the main FW.

}
    b558:	0018      	movs	r0, r3
    b55a:	46bd      	mov	sp, r7
    b55c:	b063      	add	sp, #396	; 0x18c
    b55e:	bd90      	pop	{r4, r7, pc}
    b560:	20000c74 	.word	0x20000c74
    b564:	00009ebd 	.word	0x00009ebd
    b568:	20000cd8 	.word	0x20000cd8
    b56c:	0000d42c 	.word	0x0000d42c
    b570:	00000e19 	.word	0x00000e19
    b574:	000005bd 	.word	0x000005bd
    b578:	00012040 	.word	0x00012040
    b57c:	00012080 	.word	0x00012080
    b580:	000120c0 	.word	0x000120c0
    b584:	000284bb 	.word	0x000284bb
    b588:	0000d444 	.word	0x0000d444
    b58c:	0000d460 	.word	0x0000d460
    b590:	20000cd4 	.word	0x20000cd4
    b594:	00000709 	.word	0x00000709
    b598:	0000d480 	.word	0x0000d480
    b59c:	20000060 	.word	0x20000060
    b5a0:	0000998d 	.word	0x0000998d
    b5a4:	0000a665 	.word	0x0000a665
    b5a8:	00007fff 	.word	0x00007fff
    b5ac:	0000d48c 	.word	0x0000d48c
    b5b0:	000001a1 	.word	0x000001a1
    b5b4:	00000dfd 	.word	0x00000dfd
    b5b8:	00002a41 	.word	0x00002a41
    b5bc:	0000b869 	.word	0x0000b869

0000b5c0 <StartFilesystemAndTest>:
* @details      Jumps to the main application. Please turn off ALL PERIPHERALS that were turned on by the bootloader
*				before performing the jump!
* @return       Returns true is SD card and file system test passed. False otherwise.
******************************************************************************/
static bool StartFilesystemAndTest(void)
{
    b5c0:	b590      	push	{r4, r7, lr}
    b5c2:	b0c5      	sub	sp, #276	; 0x114
    b5c4:	af00      	add	r7, sp, #0
bool sdCardPass = true;
    b5c6:	2310      	movs	r3, #16
    b5c8:	33ff      	adds	r3, #255	; 0xff
    b5ca:	18fb      	adds	r3, r7, r3
    b5cc:	2201      	movs	r2, #1
    b5ce:	701a      	strb	r2, [r3, #0]
uint8_t binbuff[256];

//Before we begin - fill buffer for binary write test
//Fill binbuff with values 0x00 - 0xFF
for(int i = 0; i < 256; i++)
    b5d0:	2300      	movs	r3, #0
    b5d2:	2284      	movs	r2, #132	; 0x84
    b5d4:	0052      	lsls	r2, r2, #1
    b5d6:	18ba      	adds	r2, r7, r2
    b5d8:	6013      	str	r3, [r2, #0]
    b5da:	e019      	b.n	b610 <StartFilesystemAndTest+0x50>
{
binbuff[i] = i;
    b5dc:	2384      	movs	r3, #132	; 0x84
    b5de:	005b      	lsls	r3, r3, #1
    b5e0:	18fb      	adds	r3, r7, r3
    b5e2:	681b      	ldr	r3, [r3, #0]
    b5e4:	b2d9      	uxtb	r1, r3
    b5e6:	4b84      	ldr	r3, [pc, #528]	; (b7f8 <StartFilesystemAndTest+0x238>)
    b5e8:	2288      	movs	r2, #136	; 0x88
    b5ea:	0052      	lsls	r2, r2, #1
    b5ec:	18ba      	adds	r2, r7, r2
    b5ee:	18d2      	adds	r2, r2, r3
    b5f0:	2384      	movs	r3, #132	; 0x84
    b5f2:	005b      	lsls	r3, r3, #1
    b5f4:	18fb      	adds	r3, r7, r3
    b5f6:	681b      	ldr	r3, [r3, #0]
    b5f8:	18d3      	adds	r3, r2, r3
    b5fa:	1c0a      	adds	r2, r1, #0
    b5fc:	701a      	strb	r2, [r3, #0]
for(int i = 0; i < 256; i++)
    b5fe:	2384      	movs	r3, #132	; 0x84
    b600:	005b      	lsls	r3, r3, #1
    b602:	18fb      	adds	r3, r7, r3
    b604:	681b      	ldr	r3, [r3, #0]
    b606:	3301      	adds	r3, #1
    b608:	2284      	movs	r2, #132	; 0x84
    b60a:	0052      	lsls	r2, r2, #1
    b60c:	18ba      	adds	r2, r7, r2
    b60e:	6013      	str	r3, [r2, #0]
    b610:	2384      	movs	r3, #132	; 0x84
    b612:	005b      	lsls	r3, r3, #1
    b614:	18fb      	adds	r3, r7, r3
    b616:	681b      	ldr	r3, [r3, #0]
    b618:	2bff      	cmp	r3, #255	; 0xff
    b61a:	dddf      	ble.n	b5dc <StartFilesystemAndTest+0x1c>
}

//MOUNT SD CARD
Ctrl_status sdStatus= SdCard_Initiate();
    b61c:	2308      	movs	r3, #8
    b61e:	33ff      	adds	r3, #255	; 0xff
    b620:	18fc      	adds	r4, r7, r3
    b622:	4b76      	ldr	r3, [pc, #472]	; (b7fc <StartFilesystemAndTest+0x23c>)
    b624:	4798      	blx	r3
    b626:	0003      	movs	r3, r0
    b628:	7023      	strb	r3, [r4, #0]
if(sdStatus == CTRL_GOOD) //If the SD card is good we continue mounting the system!
    b62a:	2308      	movs	r3, #8
    b62c:	33ff      	adds	r3, #255	; 0xff
    b62e:	18fb      	adds	r3, r7, r3
    b630:	781b      	ldrb	r3, [r3, #0]
    b632:	2b00      	cmp	r3, #0
    b634:	d000      	beq.n	b638 <StartFilesystemAndTest+0x78>
    b636:	e0ce      	b.n	b7d6 <StartFilesystemAndTest+0x216>
{
SerialConsoleWriteString("SD Card initiated correctly!\n\r");
    b638:	4b71      	ldr	r3, [pc, #452]	; (b800 <StartFilesystemAndTest+0x240>)
    b63a:	0018      	movs	r0, r3
    b63c:	4b71      	ldr	r3, [pc, #452]	; (b804 <StartFilesystemAndTest+0x244>)
    b63e:	4798      	blx	r3

//Attempt to mount a FAT file system on the SD Card using FATFS
SerialConsoleWriteString("Mount disk (f_mount)...\r\n");
    b640:	4b71      	ldr	r3, [pc, #452]	; (b808 <StartFilesystemAndTest+0x248>)
    b642:	0018      	movs	r0, r3
    b644:	4b6f      	ldr	r3, [pc, #444]	; (b804 <StartFilesystemAndTest+0x244>)
    b646:	4798      	blx	r3
memset(&fs, 0, sizeof(FATFS));
    b648:	238c      	movs	r3, #140	; 0x8c
    b64a:	009a      	lsls	r2, r3, #2
    b64c:	4b6f      	ldr	r3, [pc, #444]	; (b80c <StartFilesystemAndTest+0x24c>)
    b64e:	2100      	movs	r1, #0
    b650:	0018      	movs	r0, r3
    b652:	4b6f      	ldr	r3, [pc, #444]	; (b810 <StartFilesystemAndTest+0x250>)
    b654:	4798      	blx	r3
res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs); //Order FATFS Mount
    b656:	4b6d      	ldr	r3, [pc, #436]	; (b80c <StartFilesystemAndTest+0x24c>)
    b658:	0019      	movs	r1, r3
    b65a:	2000      	movs	r0, #0
    b65c:	4b6d      	ldr	r3, [pc, #436]	; (b814 <StartFilesystemAndTest+0x254>)
    b65e:	4798      	blx	r3
    b660:	0003      	movs	r3, r0
    b662:	001a      	movs	r2, r3
    b664:	4b6c      	ldr	r3, [pc, #432]	; (b818 <StartFilesystemAndTest+0x258>)
    b666:	701a      	strb	r2, [r3, #0]
if (FR_INVALID_DRIVE == res)
    b668:	4b6b      	ldr	r3, [pc, #428]	; (b818 <StartFilesystemAndTest+0x258>)
    b66a:	781b      	ldrb	r3, [r3, #0]
    b66c:	2b0b      	cmp	r3, #11
    b66e:	d10d      	bne.n	b68c <StartFilesystemAndTest+0xcc>
{
LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    b670:	4b69      	ldr	r3, [pc, #420]	; (b818 <StartFilesystemAndTest+0x258>)
    b672:	781b      	ldrb	r3, [r3, #0]
    b674:	001a      	movs	r2, r3
    b676:	4b69      	ldr	r3, [pc, #420]	; (b81c <StartFilesystemAndTest+0x25c>)
    b678:	0019      	movs	r1, r3
    b67a:	2000      	movs	r0, #0
    b67c:	4b68      	ldr	r3, [pc, #416]	; (b820 <StartFilesystemAndTest+0x260>)
    b67e:	4798      	blx	r3
sdCardPass = false;
    b680:	2310      	movs	r3, #16
    b682:	33ff      	adds	r3, #255	; 0xff
    b684:	18fb      	adds	r3, r7, r3
    b686:	2200      	movs	r2, #0
    b688:	701a      	strb	r2, [r3, #0]
goto main_end_of_test;
    b68a:	e09f      	b.n	b7cc <StartFilesystemAndTest+0x20c>
}
SerialConsoleWriteString("[OK]\r\n");
    b68c:	4b65      	ldr	r3, [pc, #404]	; (b824 <StartFilesystemAndTest+0x264>)
    b68e:	0018      	movs	r0, r3
    b690:	4b5c      	ldr	r3, [pc, #368]	; (b804 <StartFilesystemAndTest+0x244>)
    b692:	4798      	blx	r3

//Create and open a file
SerialConsoleWriteString("Create a file (f_open)...\r\n");
    b694:	4b64      	ldr	r3, [pc, #400]	; (b828 <StartFilesystemAndTest+0x268>)
    b696:	0018      	movs	r0, r3
    b698:	4b5a      	ldr	r3, [pc, #360]	; (b804 <StartFilesystemAndTest+0x244>)
    b69a:	4798      	blx	r3

test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    b69c:	4b63      	ldr	r3, [pc, #396]	; (b82c <StartFilesystemAndTest+0x26c>)
    b69e:	2230      	movs	r2, #48	; 0x30
    b6a0:	701a      	strb	r2, [r3, #0]
res = f_open(&file_object,
    b6a2:	4962      	ldr	r1, [pc, #392]	; (b82c <StartFilesystemAndTest+0x26c>)
    b6a4:	4b62      	ldr	r3, [pc, #392]	; (b830 <StartFilesystemAndTest+0x270>)
    b6a6:	220a      	movs	r2, #10
    b6a8:	0018      	movs	r0, r3
    b6aa:	4b62      	ldr	r3, [pc, #392]	; (b834 <StartFilesystemAndTest+0x274>)
    b6ac:	4798      	blx	r3
    b6ae:	0003      	movs	r3, r0
    b6b0:	001a      	movs	r2, r3
    b6b2:	4b59      	ldr	r3, [pc, #356]	; (b818 <StartFilesystemAndTest+0x258>)
    b6b4:	701a      	strb	r2, [r3, #0]
(char const *)test_file_name,
FA_CREATE_ALWAYS | FA_WRITE);

if (res != FR_OK)
    b6b6:	4b58      	ldr	r3, [pc, #352]	; (b818 <StartFilesystemAndTest+0x258>)
    b6b8:	781b      	ldrb	r3, [r3, #0]
    b6ba:	2b00      	cmp	r3, #0
    b6bc:	d00d      	beq.n	b6da <StartFilesystemAndTest+0x11a>
{
LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    b6be:	4b56      	ldr	r3, [pc, #344]	; (b818 <StartFilesystemAndTest+0x258>)
    b6c0:	781b      	ldrb	r3, [r3, #0]
    b6c2:	001a      	movs	r2, r3
    b6c4:	4b55      	ldr	r3, [pc, #340]	; (b81c <StartFilesystemAndTest+0x25c>)
    b6c6:	0019      	movs	r1, r3
    b6c8:	2000      	movs	r0, #0
    b6ca:	4b55      	ldr	r3, [pc, #340]	; (b820 <StartFilesystemAndTest+0x260>)
    b6cc:	4798      	blx	r3
sdCardPass = false;
    b6ce:	2310      	movs	r3, #16
    b6d0:	33ff      	adds	r3, #255	; 0xff
    b6d2:	18fb      	adds	r3, r7, r3
    b6d4:	2200      	movs	r2, #0
    b6d6:	701a      	strb	r2, [r3, #0]
goto main_end_of_test;
    b6d8:	e078      	b.n	b7cc <StartFilesystemAndTest+0x20c>
}

SerialConsoleWriteString("[OK]\r\n");
    b6da:	4b52      	ldr	r3, [pc, #328]	; (b824 <StartFilesystemAndTest+0x264>)
    b6dc:	0018      	movs	r0, r3
    b6de:	4b49      	ldr	r3, [pc, #292]	; (b804 <StartFilesystemAndTest+0x244>)
    b6e0:	4798      	blx	r3

//Write to a file
SerialConsoleWriteString("Write to test file (f_puts)...\r\n");
    b6e2:	4b55      	ldr	r3, [pc, #340]	; (b838 <StartFilesystemAndTest+0x278>)
    b6e4:	0018      	movs	r0, r3
    b6e6:	4b47      	ldr	r3, [pc, #284]	; (b804 <StartFilesystemAndTest+0x244>)
    b6e8:	4798      	blx	r3

if (0 == f_puts("Test SD/MMC stack\n", &file_object))
    b6ea:	4a51      	ldr	r2, [pc, #324]	; (b830 <StartFilesystemAndTest+0x270>)
    b6ec:	4b53      	ldr	r3, [pc, #332]	; (b83c <StartFilesystemAndTest+0x27c>)
    b6ee:	0011      	movs	r1, r2
    b6f0:	0018      	movs	r0, r3
    b6f2:	4b53      	ldr	r3, [pc, #332]	; (b840 <StartFilesystemAndTest+0x280>)
    b6f4:	4798      	blx	r3
    b6f6:	1e03      	subs	r3, r0, #0
    b6f8:	d10e      	bne.n	b718 <StartFilesystemAndTest+0x158>
{
f_close(&file_object);
    b6fa:	4b4d      	ldr	r3, [pc, #308]	; (b830 <StartFilesystemAndTest+0x270>)
    b6fc:	0018      	movs	r0, r3
    b6fe:	4b51      	ldr	r3, [pc, #324]	; (b844 <StartFilesystemAndTest+0x284>)
    b700:	4798      	blx	r3
LogMessage(LOG_INFO_LVL ,"[FAIL]\r\n");
    b702:	4b51      	ldr	r3, [pc, #324]	; (b848 <StartFilesystemAndTest+0x288>)
    b704:	0019      	movs	r1, r3
    b706:	2000      	movs	r0, #0
    b708:	4b45      	ldr	r3, [pc, #276]	; (b820 <StartFilesystemAndTest+0x260>)
    b70a:	4798      	blx	r3
sdCardPass = false;
    b70c:	2310      	movs	r3, #16
    b70e:	33ff      	adds	r3, #255	; 0xff
    b710:	18fb      	adds	r3, r7, r3
    b712:	2200      	movs	r2, #0
    b714:	701a      	strb	r2, [r3, #0]
goto main_end_of_test;
    b716:	e059      	b.n	b7cc <StartFilesystemAndTest+0x20c>
}

SerialConsoleWriteString("[OK]\r\n");
    b718:	4b42      	ldr	r3, [pc, #264]	; (b824 <StartFilesystemAndTest+0x264>)
    b71a:	0018      	movs	r0, r3
    b71c:	4b39      	ldr	r3, [pc, #228]	; (b804 <StartFilesystemAndTest+0x244>)
    b71e:	4798      	blx	r3
f_close(&file_object); //Close file
    b720:	4b43      	ldr	r3, [pc, #268]	; (b830 <StartFilesystemAndTest+0x270>)
    b722:	0018      	movs	r0, r3
    b724:	4b47      	ldr	r3, [pc, #284]	; (b844 <StartFilesystemAndTest+0x284>)
    b726:	4798      	blx	r3
SerialConsoleWriteString("Test is successful.\n\r");
    b728:	4b48      	ldr	r3, [pc, #288]	; (b84c <StartFilesystemAndTest+0x28c>)
    b72a:	0018      	movs	r0, r3
    b72c:	4b35      	ldr	r3, [pc, #212]	; (b804 <StartFilesystemAndTest+0x244>)
    b72e:	4798      	blx	r3


//Write binary file
//Read SD Card File
test_bin_file[0] = LUN_ID_SD_MMC_0_MEM + '0';
    b730:	4b47      	ldr	r3, [pc, #284]	; (b850 <StartFilesystemAndTest+0x290>)
    b732:	2230      	movs	r2, #48	; 0x30
    b734:	701a      	strb	r2, [r3, #0]
res = f_open(&file_object, (char const *)test_bin_file, FA_WRITE | FA_CREATE_ALWAYS);
    b736:	4946      	ldr	r1, [pc, #280]	; (b850 <StartFilesystemAndTest+0x290>)
    b738:	4b3d      	ldr	r3, [pc, #244]	; (b830 <StartFilesystemAndTest+0x270>)
    b73a:	220a      	movs	r2, #10
    b73c:	0018      	movs	r0, r3
    b73e:	4b3d      	ldr	r3, [pc, #244]	; (b834 <StartFilesystemAndTest+0x274>)
    b740:	4798      	blx	r3
    b742:	0003      	movs	r3, r0
    b744:	001a      	movs	r2, r3
    b746:	4b34      	ldr	r3, [pc, #208]	; (b818 <StartFilesystemAndTest+0x258>)
    b748:	701a      	strb	r2, [r3, #0]

if (res != FR_OK)
    b74a:	4b33      	ldr	r3, [pc, #204]	; (b818 <StartFilesystemAndTest+0x258>)
    b74c:	781b      	ldrb	r3, [r3, #0]
    b74e:	2b00      	cmp	r3, #0
    b750:	d011      	beq.n	b776 <StartFilesystemAndTest+0x1b6>
{
SerialConsoleWriteString("Could not open binary file!\r\n");
    b752:	4b40      	ldr	r3, [pc, #256]	; (b854 <StartFilesystemAndTest+0x294>)
    b754:	0018      	movs	r0, r3
    b756:	4b2b      	ldr	r3, [pc, #172]	; (b804 <StartFilesystemAndTest+0x244>)
    b758:	4798      	blx	r3
LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    b75a:	4b2f      	ldr	r3, [pc, #188]	; (b818 <StartFilesystemAndTest+0x258>)
    b75c:	781b      	ldrb	r3, [r3, #0]
    b75e:	001a      	movs	r2, r3
    b760:	4b2e      	ldr	r3, [pc, #184]	; (b81c <StartFilesystemAndTest+0x25c>)
    b762:	0019      	movs	r1, r3
    b764:	2000      	movs	r0, #0
    b766:	4b2e      	ldr	r3, [pc, #184]	; (b820 <StartFilesystemAndTest+0x260>)
    b768:	4798      	blx	r3
sdCardPass = false;
    b76a:	2310      	movs	r3, #16
    b76c:	33ff      	adds	r3, #255	; 0xff
    b76e:	18fb      	adds	r3, r7, r3
    b770:	2200      	movs	r2, #0
    b772:	701a      	strb	r2, [r3, #0]
goto main_end_of_test;
    b774:	e02a      	b.n	b7cc <StartFilesystemAndTest+0x20c>
}

//Write to a binaryfile
SerialConsoleWriteString("Write to test file (f_write)...\r\n");
    b776:	4b38      	ldr	r3, [pc, #224]	; (b858 <StartFilesystemAndTest+0x298>)
    b778:	0018      	movs	r0, r3
    b77a:	4b22      	ldr	r3, [pc, #136]	; (b804 <StartFilesystemAndTest+0x244>)
    b77c:	4798      	blx	r3
uint32_t varWrite = 0;
    b77e:	2300      	movs	r3, #0
    b780:	603b      	str	r3, [r7, #0]
if (0 != f_write(&file_object, binbuff,256, (UINT*) &varWrite))
    b782:	003c      	movs	r4, r7
    b784:	2380      	movs	r3, #128	; 0x80
    b786:	005a      	lsls	r2, r3, #1
    b788:	1d39      	adds	r1, r7, #4
    b78a:	4829      	ldr	r0, [pc, #164]	; (b830 <StartFilesystemAndTest+0x270>)
    b78c:	0023      	movs	r3, r4
    b78e:	4c33      	ldr	r4, [pc, #204]	; (b85c <StartFilesystemAndTest+0x29c>)
    b790:	47a0      	blx	r4
    b792:	1e03      	subs	r3, r0, #0
    b794:	d00e      	beq.n	b7b4 <StartFilesystemAndTest+0x1f4>
{
f_close(&file_object);
    b796:	4b26      	ldr	r3, [pc, #152]	; (b830 <StartFilesystemAndTest+0x270>)
    b798:	0018      	movs	r0, r3
    b79a:	4b2a      	ldr	r3, [pc, #168]	; (b844 <StartFilesystemAndTest+0x284>)
    b79c:	4798      	blx	r3
LogMessage(LOG_INFO_LVL ,"[FAIL]\r\n");
    b79e:	4b2a      	ldr	r3, [pc, #168]	; (b848 <StartFilesystemAndTest+0x288>)
    b7a0:	0019      	movs	r1, r3
    b7a2:	2000      	movs	r0, #0
    b7a4:	4b1e      	ldr	r3, [pc, #120]	; (b820 <StartFilesystemAndTest+0x260>)
    b7a6:	4798      	blx	r3
sdCardPass = false;
    b7a8:	2310      	movs	r3, #16
    b7aa:	33ff      	adds	r3, #255	; 0xff
    b7ac:	18fb      	adds	r3, r7, r3
    b7ae:	2200      	movs	r2, #0
    b7b0:	701a      	strb	r2, [r3, #0]
goto main_end_of_test;
    b7b2:	e00b      	b.n	b7cc <StartFilesystemAndTest+0x20c>
}

SerialConsoleWriteString("[OK]\r\n");
    b7b4:	4b1b      	ldr	r3, [pc, #108]	; (b824 <StartFilesystemAndTest+0x264>)
    b7b6:	0018      	movs	r0, r3
    b7b8:	4b12      	ldr	r3, [pc, #72]	; (b804 <StartFilesystemAndTest+0x244>)
    b7ba:	4798      	blx	r3
f_close(&file_object); //Close file
    b7bc:	4b1c      	ldr	r3, [pc, #112]	; (b830 <StartFilesystemAndTest+0x270>)
    b7be:	0018      	movs	r0, r3
    b7c0:	4b20      	ldr	r3, [pc, #128]	; (b844 <StartFilesystemAndTest+0x284>)
    b7c2:	4798      	blx	r3
SerialConsoleWriteString("Test is successful.\n\r");
    b7c4:	4b21      	ldr	r3, [pc, #132]	; (b84c <StartFilesystemAndTest+0x28c>)
    b7c6:	0018      	movs	r0, r3
    b7c8:	4b0e      	ldr	r3, [pc, #56]	; (b804 <StartFilesystemAndTest+0x244>)
    b7ca:	4798      	blx	r3

main_end_of_test:
SerialConsoleWriteString("End of Test.\n\r");
    b7cc:	4b24      	ldr	r3, [pc, #144]	; (b860 <StartFilesystemAndTest+0x2a0>)
    b7ce:	0018      	movs	r0, r3
    b7d0:	4b0c      	ldr	r3, [pc, #48]	; (b804 <StartFilesystemAndTest+0x244>)
    b7d2:	4798      	blx	r3
    b7d4:	e008      	b.n	b7e8 <StartFilesystemAndTest+0x228>

}
else
{
SerialConsoleWriteString("SD Card failed initiation! Check connections!\n\r");
    b7d6:	4b23      	ldr	r3, [pc, #140]	; (b864 <StartFilesystemAndTest+0x2a4>)
    b7d8:	0018      	movs	r0, r3
    b7da:	4b0a      	ldr	r3, [pc, #40]	; (b804 <StartFilesystemAndTest+0x244>)
    b7dc:	4798      	blx	r3
sdCardPass = false;
    b7de:	2310      	movs	r3, #16
    b7e0:	33ff      	adds	r3, #255	; 0xff
    b7e2:	18fb      	adds	r3, r7, r3
    b7e4:	2200      	movs	r2, #0
    b7e6:	701a      	strb	r2, [r3, #0]
}

return sdCardPass;
    b7e8:	2310      	movs	r3, #16
    b7ea:	33ff      	adds	r3, #255	; 0xff
    b7ec:	18fb      	adds	r3, r7, r3
    b7ee:	781b      	ldrb	r3, [r3, #0]
}
    b7f0:	0018      	movs	r0, r3
    b7f2:	46bd      	mov	sp, r7
    b7f4:	b045      	add	sp, #276	; 0x114
    b7f6:	bd90      	pop	{r4, r7, pc}
    b7f8:	fffffef4 	.word	0xfffffef4
    b7fc:	0000086d 	.word	0x0000086d
    b800:	0000d4a8 	.word	0x0000d4a8
    b804:	00000e19 	.word	0x00000e19
    b808:	0000d4c8 	.word	0x0000d4c8
    b80c:	20000a44 	.word	0x20000a44
    b810:	0000bc7b 	.word	0x0000bc7b
    b814:	00009935 	.word	0x00009935
    b818:	20000cd8 	.word	0x20000cd8
    b81c:	0000d4e4 	.word	0x0000d4e4
    b820:	00000ea5 	.word	0x00000ea5
    b824:	0000d4f4 	.word	0x0000d4f4
    b828:	0000d4fc 	.word	0x0000d4fc
    b82c:	2000000c 	.word	0x2000000c
    b830:	20000c74 	.word	0x20000c74
    b834:	0000998d 	.word	0x0000998d
    b838:	0000d518 	.word	0x0000d518
    b83c:	0000d53c 	.word	0x0000d53c
    b840:	0000ab81 	.word	0x0000ab81
    b844:	0000a629 	.word	0x0000a629
    b848:	0000d550 	.word	0x0000d550
    b84c:	0000d55c 	.word	0x0000d55c
    b850:	20000020 	.word	0x20000020
    b854:	0000d574 	.word	0x0000d574
    b858:	0000d594 	.word	0x0000d594
    b85c:	0000a159 	.word	0x0000a159
    b860:	0000d5b8 	.word	0x0000d5b8
    b864:	0000d5c8 	.word	0x0000d5c8

0000b868 <jumpToApplication>:
* @details      Jumps to the main application. Please turn off ALL PERIPHERALS that were turned on by the bootloader
*				before performing the jump!
* @return
******************************************************************************/
static void jumpToApplication(void)
{
    b868:	b580      	push	{r7, lr}
    b86a:	b082      	sub	sp, #8
    b86c:	af00      	add	r7, sp, #0
// Function pointer to application section
void (*applicationCodeEntry)(void);

// Rebase stack pointer
__set_MSP(*(uint32_t *) APP_START_ADDRESS);
    b86e:	2390      	movs	r3, #144	; 0x90
    b870:	025b      	lsls	r3, r3, #9
    b872:	681b      	ldr	r3, [r3, #0]
    b874:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    b876:	683b      	ldr	r3, [r7, #0]
    b878:	f383 8808 	msr	MSP, r3

// Rebase vector table
SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    b87c:	4b06      	ldr	r3, [pc, #24]	; (b898 <jumpToApplication+0x30>)
    b87e:	2290      	movs	r2, #144	; 0x90
    b880:	0252      	lsls	r2, r2, #9
    b882:	609a      	str	r2, [r3, #8]

// Set pointer to application section
applicationCodeEntry =
(void (*)(void))(unsigned *)(*(unsigned *)(APP_START_RESET_VEC_ADDRESS));
    b884:	4b05      	ldr	r3, [pc, #20]	; (b89c <jumpToApplication+0x34>)
    b886:	681b      	ldr	r3, [r3, #0]
applicationCodeEntry =
    b888:	607b      	str	r3, [r7, #4]

// Jump to application. By calling applicationCodeEntry() as a function we move the PC to the point in memory pointed by applicationCodeEntry,
//which should be the start of the main FW.
applicationCodeEntry();
    b88a:	687b      	ldr	r3, [r7, #4]
    b88c:	4798      	blx	r3
}
    b88e:	46c0      	nop			; (mov r8, r8)
    b890:	46bd      	mov	sp, r7
    b892:	b002      	add	sp, #8
    b894:	bd80      	pop	{r7, pc}
    b896:	46c0      	nop			; (mov r8, r8)
    b898:	e000ed00 	.word	0xe000ed00
    b89c:	00012004 	.word	0x00012004

0000b8a0 <configure_nvm>:
* @brief        Configures the NVM driver
* @details
* @return
******************************************************************************/
static void configure_nvm(void)
{
    b8a0:	b580      	push	{r7, lr}
    b8a2:	b082      	sub	sp, #8
    b8a4:	af00      	add	r7, sp, #0
struct nvm_config config_nvm;
nvm_get_config_defaults(&config_nvm);
    b8a6:	003b      	movs	r3, r7
    b8a8:	0018      	movs	r0, r3
    b8aa:	4b06      	ldr	r3, [pc, #24]	; (b8c4 <configure_nvm+0x24>)
    b8ac:	4798      	blx	r3
config_nvm.manual_page_write = false;
    b8ae:	003b      	movs	r3, r7
    b8b0:	2200      	movs	r2, #0
    b8b2:	705a      	strb	r2, [r3, #1]
nvm_set_config(&config_nvm);
    b8b4:	003b      	movs	r3, r7
    b8b6:	0018      	movs	r0, r3
    b8b8:	4b03      	ldr	r3, [pc, #12]	; (b8c8 <configure_nvm+0x28>)
    b8ba:	4798      	blx	r3
}
    b8bc:	46c0      	nop			; (mov r8, r8)
    b8be:	46bd      	mov	sp, r7
    b8c0:	b002      	add	sp, #8
    b8c2:	bd80      	pop	{r7, pc}
    b8c4:	0000ad51 	.word	0x0000ad51
    b8c8:	000003cd 	.word	0x000003cd

0000b8cc <__udivsi3>:
    b8cc:	2200      	movs	r2, #0
    b8ce:	0843      	lsrs	r3, r0, #1
    b8d0:	428b      	cmp	r3, r1
    b8d2:	d374      	bcc.n	b9be <__udivsi3+0xf2>
    b8d4:	0903      	lsrs	r3, r0, #4
    b8d6:	428b      	cmp	r3, r1
    b8d8:	d35f      	bcc.n	b99a <__udivsi3+0xce>
    b8da:	0a03      	lsrs	r3, r0, #8
    b8dc:	428b      	cmp	r3, r1
    b8de:	d344      	bcc.n	b96a <__udivsi3+0x9e>
    b8e0:	0b03      	lsrs	r3, r0, #12
    b8e2:	428b      	cmp	r3, r1
    b8e4:	d328      	bcc.n	b938 <__udivsi3+0x6c>
    b8e6:	0c03      	lsrs	r3, r0, #16
    b8e8:	428b      	cmp	r3, r1
    b8ea:	d30d      	bcc.n	b908 <__udivsi3+0x3c>
    b8ec:	22ff      	movs	r2, #255	; 0xff
    b8ee:	0209      	lsls	r1, r1, #8
    b8f0:	ba12      	rev	r2, r2
    b8f2:	0c03      	lsrs	r3, r0, #16
    b8f4:	428b      	cmp	r3, r1
    b8f6:	d302      	bcc.n	b8fe <__udivsi3+0x32>
    b8f8:	1212      	asrs	r2, r2, #8
    b8fa:	0209      	lsls	r1, r1, #8
    b8fc:	d065      	beq.n	b9ca <__udivsi3+0xfe>
    b8fe:	0b03      	lsrs	r3, r0, #12
    b900:	428b      	cmp	r3, r1
    b902:	d319      	bcc.n	b938 <__udivsi3+0x6c>
    b904:	e000      	b.n	b908 <__udivsi3+0x3c>
    b906:	0a09      	lsrs	r1, r1, #8
    b908:	0bc3      	lsrs	r3, r0, #15
    b90a:	428b      	cmp	r3, r1
    b90c:	d301      	bcc.n	b912 <__udivsi3+0x46>
    b90e:	03cb      	lsls	r3, r1, #15
    b910:	1ac0      	subs	r0, r0, r3
    b912:	4152      	adcs	r2, r2
    b914:	0b83      	lsrs	r3, r0, #14
    b916:	428b      	cmp	r3, r1
    b918:	d301      	bcc.n	b91e <__udivsi3+0x52>
    b91a:	038b      	lsls	r3, r1, #14
    b91c:	1ac0      	subs	r0, r0, r3
    b91e:	4152      	adcs	r2, r2
    b920:	0b43      	lsrs	r3, r0, #13
    b922:	428b      	cmp	r3, r1
    b924:	d301      	bcc.n	b92a <__udivsi3+0x5e>
    b926:	034b      	lsls	r3, r1, #13
    b928:	1ac0      	subs	r0, r0, r3
    b92a:	4152      	adcs	r2, r2
    b92c:	0b03      	lsrs	r3, r0, #12
    b92e:	428b      	cmp	r3, r1
    b930:	d301      	bcc.n	b936 <__udivsi3+0x6a>
    b932:	030b      	lsls	r3, r1, #12
    b934:	1ac0      	subs	r0, r0, r3
    b936:	4152      	adcs	r2, r2
    b938:	0ac3      	lsrs	r3, r0, #11
    b93a:	428b      	cmp	r3, r1
    b93c:	d301      	bcc.n	b942 <__udivsi3+0x76>
    b93e:	02cb      	lsls	r3, r1, #11
    b940:	1ac0      	subs	r0, r0, r3
    b942:	4152      	adcs	r2, r2
    b944:	0a83      	lsrs	r3, r0, #10
    b946:	428b      	cmp	r3, r1
    b948:	d301      	bcc.n	b94e <__udivsi3+0x82>
    b94a:	028b      	lsls	r3, r1, #10
    b94c:	1ac0      	subs	r0, r0, r3
    b94e:	4152      	adcs	r2, r2
    b950:	0a43      	lsrs	r3, r0, #9
    b952:	428b      	cmp	r3, r1
    b954:	d301      	bcc.n	b95a <__udivsi3+0x8e>
    b956:	024b      	lsls	r3, r1, #9
    b958:	1ac0      	subs	r0, r0, r3
    b95a:	4152      	adcs	r2, r2
    b95c:	0a03      	lsrs	r3, r0, #8
    b95e:	428b      	cmp	r3, r1
    b960:	d301      	bcc.n	b966 <__udivsi3+0x9a>
    b962:	020b      	lsls	r3, r1, #8
    b964:	1ac0      	subs	r0, r0, r3
    b966:	4152      	adcs	r2, r2
    b968:	d2cd      	bcs.n	b906 <__udivsi3+0x3a>
    b96a:	09c3      	lsrs	r3, r0, #7
    b96c:	428b      	cmp	r3, r1
    b96e:	d301      	bcc.n	b974 <__udivsi3+0xa8>
    b970:	01cb      	lsls	r3, r1, #7
    b972:	1ac0      	subs	r0, r0, r3
    b974:	4152      	adcs	r2, r2
    b976:	0983      	lsrs	r3, r0, #6
    b978:	428b      	cmp	r3, r1
    b97a:	d301      	bcc.n	b980 <__udivsi3+0xb4>
    b97c:	018b      	lsls	r3, r1, #6
    b97e:	1ac0      	subs	r0, r0, r3
    b980:	4152      	adcs	r2, r2
    b982:	0943      	lsrs	r3, r0, #5
    b984:	428b      	cmp	r3, r1
    b986:	d301      	bcc.n	b98c <__udivsi3+0xc0>
    b988:	014b      	lsls	r3, r1, #5
    b98a:	1ac0      	subs	r0, r0, r3
    b98c:	4152      	adcs	r2, r2
    b98e:	0903      	lsrs	r3, r0, #4
    b990:	428b      	cmp	r3, r1
    b992:	d301      	bcc.n	b998 <__udivsi3+0xcc>
    b994:	010b      	lsls	r3, r1, #4
    b996:	1ac0      	subs	r0, r0, r3
    b998:	4152      	adcs	r2, r2
    b99a:	08c3      	lsrs	r3, r0, #3
    b99c:	428b      	cmp	r3, r1
    b99e:	d301      	bcc.n	b9a4 <__udivsi3+0xd8>
    b9a0:	00cb      	lsls	r3, r1, #3
    b9a2:	1ac0      	subs	r0, r0, r3
    b9a4:	4152      	adcs	r2, r2
    b9a6:	0883      	lsrs	r3, r0, #2
    b9a8:	428b      	cmp	r3, r1
    b9aa:	d301      	bcc.n	b9b0 <__udivsi3+0xe4>
    b9ac:	008b      	lsls	r3, r1, #2
    b9ae:	1ac0      	subs	r0, r0, r3
    b9b0:	4152      	adcs	r2, r2
    b9b2:	0843      	lsrs	r3, r0, #1
    b9b4:	428b      	cmp	r3, r1
    b9b6:	d301      	bcc.n	b9bc <__udivsi3+0xf0>
    b9b8:	004b      	lsls	r3, r1, #1
    b9ba:	1ac0      	subs	r0, r0, r3
    b9bc:	4152      	adcs	r2, r2
    b9be:	1a41      	subs	r1, r0, r1
    b9c0:	d200      	bcs.n	b9c4 <__udivsi3+0xf8>
    b9c2:	4601      	mov	r1, r0
    b9c4:	4152      	adcs	r2, r2
    b9c6:	4610      	mov	r0, r2
    b9c8:	4770      	bx	lr
    b9ca:	e7ff      	b.n	b9cc <__udivsi3+0x100>
    b9cc:	b501      	push	{r0, lr}
    b9ce:	2000      	movs	r0, #0
    b9d0:	f000 f8f0 	bl	bbb4 <__aeabi_idiv0>
    b9d4:	bd02      	pop	{r1, pc}
    b9d6:	46c0      	nop			; (mov r8, r8)

0000b9d8 <__aeabi_uidivmod>:
    b9d8:	2900      	cmp	r1, #0
    b9da:	d0f7      	beq.n	b9cc <__udivsi3+0x100>
    b9dc:	e776      	b.n	b8cc <__udivsi3>
    b9de:	4770      	bx	lr

0000b9e0 <__divsi3>:
    b9e0:	4603      	mov	r3, r0
    b9e2:	430b      	orrs	r3, r1
    b9e4:	d47f      	bmi.n	bae6 <__divsi3+0x106>
    b9e6:	2200      	movs	r2, #0
    b9e8:	0843      	lsrs	r3, r0, #1
    b9ea:	428b      	cmp	r3, r1
    b9ec:	d374      	bcc.n	bad8 <__divsi3+0xf8>
    b9ee:	0903      	lsrs	r3, r0, #4
    b9f0:	428b      	cmp	r3, r1
    b9f2:	d35f      	bcc.n	bab4 <__divsi3+0xd4>
    b9f4:	0a03      	lsrs	r3, r0, #8
    b9f6:	428b      	cmp	r3, r1
    b9f8:	d344      	bcc.n	ba84 <__divsi3+0xa4>
    b9fa:	0b03      	lsrs	r3, r0, #12
    b9fc:	428b      	cmp	r3, r1
    b9fe:	d328      	bcc.n	ba52 <__divsi3+0x72>
    ba00:	0c03      	lsrs	r3, r0, #16
    ba02:	428b      	cmp	r3, r1
    ba04:	d30d      	bcc.n	ba22 <__divsi3+0x42>
    ba06:	22ff      	movs	r2, #255	; 0xff
    ba08:	0209      	lsls	r1, r1, #8
    ba0a:	ba12      	rev	r2, r2
    ba0c:	0c03      	lsrs	r3, r0, #16
    ba0e:	428b      	cmp	r3, r1
    ba10:	d302      	bcc.n	ba18 <__divsi3+0x38>
    ba12:	1212      	asrs	r2, r2, #8
    ba14:	0209      	lsls	r1, r1, #8
    ba16:	d065      	beq.n	bae4 <__divsi3+0x104>
    ba18:	0b03      	lsrs	r3, r0, #12
    ba1a:	428b      	cmp	r3, r1
    ba1c:	d319      	bcc.n	ba52 <__divsi3+0x72>
    ba1e:	e000      	b.n	ba22 <__divsi3+0x42>
    ba20:	0a09      	lsrs	r1, r1, #8
    ba22:	0bc3      	lsrs	r3, r0, #15
    ba24:	428b      	cmp	r3, r1
    ba26:	d301      	bcc.n	ba2c <__divsi3+0x4c>
    ba28:	03cb      	lsls	r3, r1, #15
    ba2a:	1ac0      	subs	r0, r0, r3
    ba2c:	4152      	adcs	r2, r2
    ba2e:	0b83      	lsrs	r3, r0, #14
    ba30:	428b      	cmp	r3, r1
    ba32:	d301      	bcc.n	ba38 <__divsi3+0x58>
    ba34:	038b      	lsls	r3, r1, #14
    ba36:	1ac0      	subs	r0, r0, r3
    ba38:	4152      	adcs	r2, r2
    ba3a:	0b43      	lsrs	r3, r0, #13
    ba3c:	428b      	cmp	r3, r1
    ba3e:	d301      	bcc.n	ba44 <__divsi3+0x64>
    ba40:	034b      	lsls	r3, r1, #13
    ba42:	1ac0      	subs	r0, r0, r3
    ba44:	4152      	adcs	r2, r2
    ba46:	0b03      	lsrs	r3, r0, #12
    ba48:	428b      	cmp	r3, r1
    ba4a:	d301      	bcc.n	ba50 <__divsi3+0x70>
    ba4c:	030b      	lsls	r3, r1, #12
    ba4e:	1ac0      	subs	r0, r0, r3
    ba50:	4152      	adcs	r2, r2
    ba52:	0ac3      	lsrs	r3, r0, #11
    ba54:	428b      	cmp	r3, r1
    ba56:	d301      	bcc.n	ba5c <__divsi3+0x7c>
    ba58:	02cb      	lsls	r3, r1, #11
    ba5a:	1ac0      	subs	r0, r0, r3
    ba5c:	4152      	adcs	r2, r2
    ba5e:	0a83      	lsrs	r3, r0, #10
    ba60:	428b      	cmp	r3, r1
    ba62:	d301      	bcc.n	ba68 <__divsi3+0x88>
    ba64:	028b      	lsls	r3, r1, #10
    ba66:	1ac0      	subs	r0, r0, r3
    ba68:	4152      	adcs	r2, r2
    ba6a:	0a43      	lsrs	r3, r0, #9
    ba6c:	428b      	cmp	r3, r1
    ba6e:	d301      	bcc.n	ba74 <__divsi3+0x94>
    ba70:	024b      	lsls	r3, r1, #9
    ba72:	1ac0      	subs	r0, r0, r3
    ba74:	4152      	adcs	r2, r2
    ba76:	0a03      	lsrs	r3, r0, #8
    ba78:	428b      	cmp	r3, r1
    ba7a:	d301      	bcc.n	ba80 <__divsi3+0xa0>
    ba7c:	020b      	lsls	r3, r1, #8
    ba7e:	1ac0      	subs	r0, r0, r3
    ba80:	4152      	adcs	r2, r2
    ba82:	d2cd      	bcs.n	ba20 <__divsi3+0x40>
    ba84:	09c3      	lsrs	r3, r0, #7
    ba86:	428b      	cmp	r3, r1
    ba88:	d301      	bcc.n	ba8e <__divsi3+0xae>
    ba8a:	01cb      	lsls	r3, r1, #7
    ba8c:	1ac0      	subs	r0, r0, r3
    ba8e:	4152      	adcs	r2, r2
    ba90:	0983      	lsrs	r3, r0, #6
    ba92:	428b      	cmp	r3, r1
    ba94:	d301      	bcc.n	ba9a <__divsi3+0xba>
    ba96:	018b      	lsls	r3, r1, #6
    ba98:	1ac0      	subs	r0, r0, r3
    ba9a:	4152      	adcs	r2, r2
    ba9c:	0943      	lsrs	r3, r0, #5
    ba9e:	428b      	cmp	r3, r1
    baa0:	d301      	bcc.n	baa6 <__divsi3+0xc6>
    baa2:	014b      	lsls	r3, r1, #5
    baa4:	1ac0      	subs	r0, r0, r3
    baa6:	4152      	adcs	r2, r2
    baa8:	0903      	lsrs	r3, r0, #4
    baaa:	428b      	cmp	r3, r1
    baac:	d301      	bcc.n	bab2 <__divsi3+0xd2>
    baae:	010b      	lsls	r3, r1, #4
    bab0:	1ac0      	subs	r0, r0, r3
    bab2:	4152      	adcs	r2, r2
    bab4:	08c3      	lsrs	r3, r0, #3
    bab6:	428b      	cmp	r3, r1
    bab8:	d301      	bcc.n	babe <__divsi3+0xde>
    baba:	00cb      	lsls	r3, r1, #3
    babc:	1ac0      	subs	r0, r0, r3
    babe:	4152      	adcs	r2, r2
    bac0:	0883      	lsrs	r3, r0, #2
    bac2:	428b      	cmp	r3, r1
    bac4:	d301      	bcc.n	baca <__divsi3+0xea>
    bac6:	008b      	lsls	r3, r1, #2
    bac8:	1ac0      	subs	r0, r0, r3
    baca:	4152      	adcs	r2, r2
    bacc:	0843      	lsrs	r3, r0, #1
    bace:	428b      	cmp	r3, r1
    bad0:	d301      	bcc.n	bad6 <__divsi3+0xf6>
    bad2:	004b      	lsls	r3, r1, #1
    bad4:	1ac0      	subs	r0, r0, r3
    bad6:	4152      	adcs	r2, r2
    bad8:	1a41      	subs	r1, r0, r1
    bada:	d200      	bcs.n	bade <__divsi3+0xfe>
    badc:	4601      	mov	r1, r0
    bade:	4152      	adcs	r2, r2
    bae0:	4610      	mov	r0, r2
    bae2:	4770      	bx	lr
    bae4:	e05d      	b.n	bba2 <__divsi3+0x1c2>
    bae6:	0fca      	lsrs	r2, r1, #31
    bae8:	d000      	beq.n	baec <__divsi3+0x10c>
    baea:	4249      	negs	r1, r1
    baec:	1003      	asrs	r3, r0, #32
    baee:	d300      	bcc.n	baf2 <__divsi3+0x112>
    baf0:	4240      	negs	r0, r0
    baf2:	4053      	eors	r3, r2
    baf4:	2200      	movs	r2, #0
    baf6:	469c      	mov	ip, r3
    baf8:	0903      	lsrs	r3, r0, #4
    bafa:	428b      	cmp	r3, r1
    bafc:	d32d      	bcc.n	bb5a <__divsi3+0x17a>
    bafe:	0a03      	lsrs	r3, r0, #8
    bb00:	428b      	cmp	r3, r1
    bb02:	d312      	bcc.n	bb2a <__divsi3+0x14a>
    bb04:	22fc      	movs	r2, #252	; 0xfc
    bb06:	0189      	lsls	r1, r1, #6
    bb08:	ba12      	rev	r2, r2
    bb0a:	0a03      	lsrs	r3, r0, #8
    bb0c:	428b      	cmp	r3, r1
    bb0e:	d30c      	bcc.n	bb2a <__divsi3+0x14a>
    bb10:	0189      	lsls	r1, r1, #6
    bb12:	1192      	asrs	r2, r2, #6
    bb14:	428b      	cmp	r3, r1
    bb16:	d308      	bcc.n	bb2a <__divsi3+0x14a>
    bb18:	0189      	lsls	r1, r1, #6
    bb1a:	1192      	asrs	r2, r2, #6
    bb1c:	428b      	cmp	r3, r1
    bb1e:	d304      	bcc.n	bb2a <__divsi3+0x14a>
    bb20:	0189      	lsls	r1, r1, #6
    bb22:	d03a      	beq.n	bb9a <__divsi3+0x1ba>
    bb24:	1192      	asrs	r2, r2, #6
    bb26:	e000      	b.n	bb2a <__divsi3+0x14a>
    bb28:	0989      	lsrs	r1, r1, #6
    bb2a:	09c3      	lsrs	r3, r0, #7
    bb2c:	428b      	cmp	r3, r1
    bb2e:	d301      	bcc.n	bb34 <__divsi3+0x154>
    bb30:	01cb      	lsls	r3, r1, #7
    bb32:	1ac0      	subs	r0, r0, r3
    bb34:	4152      	adcs	r2, r2
    bb36:	0983      	lsrs	r3, r0, #6
    bb38:	428b      	cmp	r3, r1
    bb3a:	d301      	bcc.n	bb40 <__divsi3+0x160>
    bb3c:	018b      	lsls	r3, r1, #6
    bb3e:	1ac0      	subs	r0, r0, r3
    bb40:	4152      	adcs	r2, r2
    bb42:	0943      	lsrs	r3, r0, #5
    bb44:	428b      	cmp	r3, r1
    bb46:	d301      	bcc.n	bb4c <__divsi3+0x16c>
    bb48:	014b      	lsls	r3, r1, #5
    bb4a:	1ac0      	subs	r0, r0, r3
    bb4c:	4152      	adcs	r2, r2
    bb4e:	0903      	lsrs	r3, r0, #4
    bb50:	428b      	cmp	r3, r1
    bb52:	d301      	bcc.n	bb58 <__divsi3+0x178>
    bb54:	010b      	lsls	r3, r1, #4
    bb56:	1ac0      	subs	r0, r0, r3
    bb58:	4152      	adcs	r2, r2
    bb5a:	08c3      	lsrs	r3, r0, #3
    bb5c:	428b      	cmp	r3, r1
    bb5e:	d301      	bcc.n	bb64 <__divsi3+0x184>
    bb60:	00cb      	lsls	r3, r1, #3
    bb62:	1ac0      	subs	r0, r0, r3
    bb64:	4152      	adcs	r2, r2
    bb66:	0883      	lsrs	r3, r0, #2
    bb68:	428b      	cmp	r3, r1
    bb6a:	d301      	bcc.n	bb70 <__divsi3+0x190>
    bb6c:	008b      	lsls	r3, r1, #2
    bb6e:	1ac0      	subs	r0, r0, r3
    bb70:	4152      	adcs	r2, r2
    bb72:	d2d9      	bcs.n	bb28 <__divsi3+0x148>
    bb74:	0843      	lsrs	r3, r0, #1
    bb76:	428b      	cmp	r3, r1
    bb78:	d301      	bcc.n	bb7e <__divsi3+0x19e>
    bb7a:	004b      	lsls	r3, r1, #1
    bb7c:	1ac0      	subs	r0, r0, r3
    bb7e:	4152      	adcs	r2, r2
    bb80:	1a41      	subs	r1, r0, r1
    bb82:	d200      	bcs.n	bb86 <__divsi3+0x1a6>
    bb84:	4601      	mov	r1, r0
    bb86:	4663      	mov	r3, ip
    bb88:	4152      	adcs	r2, r2
    bb8a:	105b      	asrs	r3, r3, #1
    bb8c:	4610      	mov	r0, r2
    bb8e:	d301      	bcc.n	bb94 <__divsi3+0x1b4>
    bb90:	4240      	negs	r0, r0
    bb92:	2b00      	cmp	r3, #0
    bb94:	d500      	bpl.n	bb98 <__divsi3+0x1b8>
    bb96:	4249      	negs	r1, r1
    bb98:	4770      	bx	lr
    bb9a:	4663      	mov	r3, ip
    bb9c:	105b      	asrs	r3, r3, #1
    bb9e:	d300      	bcc.n	bba2 <__divsi3+0x1c2>
    bba0:	4240      	negs	r0, r0
    bba2:	b501      	push	{r0, lr}
    bba4:	2000      	movs	r0, #0
    bba6:	f000 f805 	bl	bbb4 <__aeabi_idiv0>
    bbaa:	bd02      	pop	{r1, pc}

0000bbac <__aeabi_idivmod>:
    bbac:	2900      	cmp	r1, #0
    bbae:	d0f8      	beq.n	bba2 <__divsi3+0x1c2>
    bbb0:	e716      	b.n	b9e0 <__divsi3>
    bbb2:	4770      	bx	lr

0000bbb4 <__aeabi_idiv0>:
    bbb4:	4770      	bx	lr
    bbb6:	46c0      	nop			; (mov r8, r8)

0000bbb8 <__aeabi_lmul>:
    bbb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    bbba:	46ce      	mov	lr, r9
    bbbc:	4647      	mov	r7, r8
    bbbe:	0415      	lsls	r5, r2, #16
    bbc0:	0c2d      	lsrs	r5, r5, #16
    bbc2:	002e      	movs	r6, r5
    bbc4:	b580      	push	{r7, lr}
    bbc6:	0407      	lsls	r7, r0, #16
    bbc8:	0c14      	lsrs	r4, r2, #16
    bbca:	0c3f      	lsrs	r7, r7, #16
    bbcc:	4699      	mov	r9, r3
    bbce:	0c03      	lsrs	r3, r0, #16
    bbd0:	437e      	muls	r6, r7
    bbd2:	435d      	muls	r5, r3
    bbd4:	4367      	muls	r7, r4
    bbd6:	4363      	muls	r3, r4
    bbd8:	197f      	adds	r7, r7, r5
    bbda:	0c34      	lsrs	r4, r6, #16
    bbdc:	19e4      	adds	r4, r4, r7
    bbde:	469c      	mov	ip, r3
    bbe0:	42a5      	cmp	r5, r4
    bbe2:	d903      	bls.n	bbec <__aeabi_lmul+0x34>
    bbe4:	2380      	movs	r3, #128	; 0x80
    bbe6:	025b      	lsls	r3, r3, #9
    bbe8:	4698      	mov	r8, r3
    bbea:	44c4      	add	ip, r8
    bbec:	464b      	mov	r3, r9
    bbee:	4351      	muls	r1, r2
    bbf0:	4343      	muls	r3, r0
    bbf2:	0436      	lsls	r6, r6, #16
    bbf4:	0c36      	lsrs	r6, r6, #16
    bbf6:	0c25      	lsrs	r5, r4, #16
    bbf8:	0424      	lsls	r4, r4, #16
    bbfa:	4465      	add	r5, ip
    bbfc:	19a4      	adds	r4, r4, r6
    bbfe:	1859      	adds	r1, r3, r1
    bc00:	1949      	adds	r1, r1, r5
    bc02:	0020      	movs	r0, r4
    bc04:	bc0c      	pop	{r2, r3}
    bc06:	4690      	mov	r8, r2
    bc08:	4699      	mov	r9, r3
    bc0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000bc0c <__libc_init_array>:
    bc0c:	b570      	push	{r4, r5, r6, lr}
    bc0e:	2600      	movs	r6, #0
    bc10:	4d0c      	ldr	r5, [pc, #48]	; (bc44 <__libc_init_array+0x38>)
    bc12:	4c0d      	ldr	r4, [pc, #52]	; (bc48 <__libc_init_array+0x3c>)
    bc14:	1b64      	subs	r4, r4, r5
    bc16:	10a4      	asrs	r4, r4, #2
    bc18:	42a6      	cmp	r6, r4
    bc1a:	d109      	bne.n	bc30 <__libc_init_array+0x24>
    bc1c:	2600      	movs	r6, #0
    bc1e:	f001 fd37 	bl	d690 <_init>
    bc22:	4d0a      	ldr	r5, [pc, #40]	; (bc4c <__libc_init_array+0x40>)
    bc24:	4c0a      	ldr	r4, [pc, #40]	; (bc50 <__libc_init_array+0x44>)
    bc26:	1b64      	subs	r4, r4, r5
    bc28:	10a4      	asrs	r4, r4, #2
    bc2a:	42a6      	cmp	r6, r4
    bc2c:	d105      	bne.n	bc3a <__libc_init_array+0x2e>
    bc2e:	bd70      	pop	{r4, r5, r6, pc}
    bc30:	00b3      	lsls	r3, r6, #2
    bc32:	58eb      	ldr	r3, [r5, r3]
    bc34:	4798      	blx	r3
    bc36:	3601      	adds	r6, #1
    bc38:	e7ee      	b.n	bc18 <__libc_init_array+0xc>
    bc3a:	00b3      	lsls	r3, r6, #2
    bc3c:	58eb      	ldr	r3, [r5, r3]
    bc3e:	4798      	blx	r3
    bc40:	3601      	adds	r6, #1
    bc42:	e7f2      	b.n	bc2a <__libc_init_array+0x1e>
    bc44:	0000d69c 	.word	0x0000d69c
    bc48:	0000d69c 	.word	0x0000d69c
    bc4c:	0000d69c 	.word	0x0000d69c
    bc50:	0000d6a0 	.word	0x0000d6a0

0000bc54 <malloc>:
    bc54:	b510      	push	{r4, lr}
    bc56:	4b03      	ldr	r3, [pc, #12]	; (bc64 <malloc+0x10>)
    bc58:	0001      	movs	r1, r0
    bc5a:	6818      	ldr	r0, [r3, #0]
    bc5c:	f000 f860 	bl	bd20 <_malloc_r>
    bc60:	bd10      	pop	{r4, pc}
    bc62:	46c0      	nop			; (mov r8, r8)
    bc64:	2000006c 	.word	0x2000006c

0000bc68 <memcpy>:
    bc68:	2300      	movs	r3, #0
    bc6a:	b510      	push	{r4, lr}
    bc6c:	429a      	cmp	r2, r3
    bc6e:	d100      	bne.n	bc72 <memcpy+0xa>
    bc70:	bd10      	pop	{r4, pc}
    bc72:	5ccc      	ldrb	r4, [r1, r3]
    bc74:	54c4      	strb	r4, [r0, r3]
    bc76:	3301      	adds	r3, #1
    bc78:	e7f8      	b.n	bc6c <memcpy+0x4>

0000bc7a <memset>:
    bc7a:	0003      	movs	r3, r0
    bc7c:	1882      	adds	r2, r0, r2
    bc7e:	4293      	cmp	r3, r2
    bc80:	d100      	bne.n	bc84 <memset+0xa>
    bc82:	4770      	bx	lr
    bc84:	7019      	strb	r1, [r3, #0]
    bc86:	3301      	adds	r3, #1
    bc88:	e7f9      	b.n	bc7e <memset+0x4>
	...

0000bc8c <_free_r>:
    bc8c:	b570      	push	{r4, r5, r6, lr}
    bc8e:	0005      	movs	r5, r0
    bc90:	2900      	cmp	r1, #0
    bc92:	d010      	beq.n	bcb6 <_free_r+0x2a>
    bc94:	1f0c      	subs	r4, r1, #4
    bc96:	6823      	ldr	r3, [r4, #0]
    bc98:	2b00      	cmp	r3, #0
    bc9a:	da00      	bge.n	bc9e <_free_r+0x12>
    bc9c:	18e4      	adds	r4, r4, r3
    bc9e:	0028      	movs	r0, r5
    bca0:	f000 fb54 	bl	c34c <__malloc_lock>
    bca4:	4a1d      	ldr	r2, [pc, #116]	; (bd1c <_free_r+0x90>)
    bca6:	6813      	ldr	r3, [r2, #0]
    bca8:	2b00      	cmp	r3, #0
    bcaa:	d105      	bne.n	bcb8 <_free_r+0x2c>
    bcac:	6063      	str	r3, [r4, #4]
    bcae:	6014      	str	r4, [r2, #0]
    bcb0:	0028      	movs	r0, r5
    bcb2:	f000 fb4c 	bl	c34e <__malloc_unlock>
    bcb6:	bd70      	pop	{r4, r5, r6, pc}
    bcb8:	42a3      	cmp	r3, r4
    bcba:	d909      	bls.n	bcd0 <_free_r+0x44>
    bcbc:	6821      	ldr	r1, [r4, #0]
    bcbe:	1860      	adds	r0, r4, r1
    bcc0:	4283      	cmp	r3, r0
    bcc2:	d1f3      	bne.n	bcac <_free_r+0x20>
    bcc4:	6818      	ldr	r0, [r3, #0]
    bcc6:	685b      	ldr	r3, [r3, #4]
    bcc8:	1841      	adds	r1, r0, r1
    bcca:	6021      	str	r1, [r4, #0]
    bccc:	e7ee      	b.n	bcac <_free_r+0x20>
    bcce:	0013      	movs	r3, r2
    bcd0:	685a      	ldr	r2, [r3, #4]
    bcd2:	2a00      	cmp	r2, #0
    bcd4:	d001      	beq.n	bcda <_free_r+0x4e>
    bcd6:	42a2      	cmp	r2, r4
    bcd8:	d9f9      	bls.n	bcce <_free_r+0x42>
    bcda:	6819      	ldr	r1, [r3, #0]
    bcdc:	1858      	adds	r0, r3, r1
    bcde:	42a0      	cmp	r0, r4
    bce0:	d10b      	bne.n	bcfa <_free_r+0x6e>
    bce2:	6820      	ldr	r0, [r4, #0]
    bce4:	1809      	adds	r1, r1, r0
    bce6:	1858      	adds	r0, r3, r1
    bce8:	6019      	str	r1, [r3, #0]
    bcea:	4282      	cmp	r2, r0
    bcec:	d1e0      	bne.n	bcb0 <_free_r+0x24>
    bcee:	6810      	ldr	r0, [r2, #0]
    bcf0:	6852      	ldr	r2, [r2, #4]
    bcf2:	1841      	adds	r1, r0, r1
    bcf4:	6019      	str	r1, [r3, #0]
    bcf6:	605a      	str	r2, [r3, #4]
    bcf8:	e7da      	b.n	bcb0 <_free_r+0x24>
    bcfa:	42a0      	cmp	r0, r4
    bcfc:	d902      	bls.n	bd04 <_free_r+0x78>
    bcfe:	230c      	movs	r3, #12
    bd00:	602b      	str	r3, [r5, #0]
    bd02:	e7d5      	b.n	bcb0 <_free_r+0x24>
    bd04:	6821      	ldr	r1, [r4, #0]
    bd06:	1860      	adds	r0, r4, r1
    bd08:	4282      	cmp	r2, r0
    bd0a:	d103      	bne.n	bd14 <_free_r+0x88>
    bd0c:	6810      	ldr	r0, [r2, #0]
    bd0e:	6852      	ldr	r2, [r2, #4]
    bd10:	1841      	adds	r1, r0, r1
    bd12:	6021      	str	r1, [r4, #0]
    bd14:	6062      	str	r2, [r4, #4]
    bd16:	605c      	str	r4, [r3, #4]
    bd18:	e7ca      	b.n	bcb0 <_free_r+0x24>
    bd1a:	46c0      	nop			; (mov r8, r8)
    bd1c:	200001c0 	.word	0x200001c0

0000bd20 <_malloc_r>:
    bd20:	2303      	movs	r3, #3
    bd22:	b570      	push	{r4, r5, r6, lr}
    bd24:	1ccd      	adds	r5, r1, #3
    bd26:	439d      	bics	r5, r3
    bd28:	3508      	adds	r5, #8
    bd2a:	0006      	movs	r6, r0
    bd2c:	2d0c      	cmp	r5, #12
    bd2e:	d21e      	bcs.n	bd6e <_malloc_r+0x4e>
    bd30:	250c      	movs	r5, #12
    bd32:	42a9      	cmp	r1, r5
    bd34:	d81d      	bhi.n	bd72 <_malloc_r+0x52>
    bd36:	0030      	movs	r0, r6
    bd38:	f000 fb08 	bl	c34c <__malloc_lock>
    bd3c:	4a25      	ldr	r2, [pc, #148]	; (bdd4 <_malloc_r+0xb4>)
    bd3e:	6814      	ldr	r4, [r2, #0]
    bd40:	0021      	movs	r1, r4
    bd42:	2900      	cmp	r1, #0
    bd44:	d119      	bne.n	bd7a <_malloc_r+0x5a>
    bd46:	4c24      	ldr	r4, [pc, #144]	; (bdd8 <_malloc_r+0xb8>)
    bd48:	6823      	ldr	r3, [r4, #0]
    bd4a:	2b00      	cmp	r3, #0
    bd4c:	d103      	bne.n	bd56 <_malloc_r+0x36>
    bd4e:	0030      	movs	r0, r6
    bd50:	f000 f844 	bl	bddc <_sbrk_r>
    bd54:	6020      	str	r0, [r4, #0]
    bd56:	0029      	movs	r1, r5
    bd58:	0030      	movs	r0, r6
    bd5a:	f000 f83f 	bl	bddc <_sbrk_r>
    bd5e:	1c43      	adds	r3, r0, #1
    bd60:	d12c      	bne.n	bdbc <_malloc_r+0x9c>
    bd62:	230c      	movs	r3, #12
    bd64:	0030      	movs	r0, r6
    bd66:	6033      	str	r3, [r6, #0]
    bd68:	f000 faf1 	bl	c34e <__malloc_unlock>
    bd6c:	e003      	b.n	bd76 <_malloc_r+0x56>
    bd6e:	2d00      	cmp	r5, #0
    bd70:	dadf      	bge.n	bd32 <_malloc_r+0x12>
    bd72:	230c      	movs	r3, #12
    bd74:	6033      	str	r3, [r6, #0]
    bd76:	2000      	movs	r0, #0
    bd78:	bd70      	pop	{r4, r5, r6, pc}
    bd7a:	680b      	ldr	r3, [r1, #0]
    bd7c:	1b5b      	subs	r3, r3, r5
    bd7e:	d41a      	bmi.n	bdb6 <_malloc_r+0x96>
    bd80:	2b0b      	cmp	r3, #11
    bd82:	d903      	bls.n	bd8c <_malloc_r+0x6c>
    bd84:	600b      	str	r3, [r1, #0]
    bd86:	18cc      	adds	r4, r1, r3
    bd88:	6025      	str	r5, [r4, #0]
    bd8a:	e003      	b.n	bd94 <_malloc_r+0x74>
    bd8c:	428c      	cmp	r4, r1
    bd8e:	d10e      	bne.n	bdae <_malloc_r+0x8e>
    bd90:	6863      	ldr	r3, [r4, #4]
    bd92:	6013      	str	r3, [r2, #0]
    bd94:	0030      	movs	r0, r6
    bd96:	f000 fada 	bl	c34e <__malloc_unlock>
    bd9a:	0020      	movs	r0, r4
    bd9c:	2207      	movs	r2, #7
    bd9e:	300b      	adds	r0, #11
    bda0:	1d23      	adds	r3, r4, #4
    bda2:	4390      	bics	r0, r2
    bda4:	1ac3      	subs	r3, r0, r3
    bda6:	d0e7      	beq.n	bd78 <_malloc_r+0x58>
    bda8:	425a      	negs	r2, r3
    bdaa:	50e2      	str	r2, [r4, r3]
    bdac:	e7e4      	b.n	bd78 <_malloc_r+0x58>
    bdae:	684b      	ldr	r3, [r1, #4]
    bdb0:	6063      	str	r3, [r4, #4]
    bdb2:	000c      	movs	r4, r1
    bdb4:	e7ee      	b.n	bd94 <_malloc_r+0x74>
    bdb6:	000c      	movs	r4, r1
    bdb8:	6849      	ldr	r1, [r1, #4]
    bdba:	e7c2      	b.n	bd42 <_malloc_r+0x22>
    bdbc:	2303      	movs	r3, #3
    bdbe:	1cc4      	adds	r4, r0, #3
    bdc0:	439c      	bics	r4, r3
    bdc2:	42a0      	cmp	r0, r4
    bdc4:	d0e0      	beq.n	bd88 <_malloc_r+0x68>
    bdc6:	1a21      	subs	r1, r4, r0
    bdc8:	0030      	movs	r0, r6
    bdca:	f000 f807 	bl	bddc <_sbrk_r>
    bdce:	1c43      	adds	r3, r0, #1
    bdd0:	d1da      	bne.n	bd88 <_malloc_r+0x68>
    bdd2:	e7c6      	b.n	bd62 <_malloc_r+0x42>
    bdd4:	200001c0 	.word	0x200001c0
    bdd8:	200001c4 	.word	0x200001c4

0000bddc <_sbrk_r>:
    bddc:	2300      	movs	r3, #0
    bdde:	b570      	push	{r4, r5, r6, lr}
    bde0:	4c06      	ldr	r4, [pc, #24]	; (bdfc <_sbrk_r+0x20>)
    bde2:	0005      	movs	r5, r0
    bde4:	0008      	movs	r0, r1
    bde6:	6023      	str	r3, [r4, #0]
    bde8:	f7fb f82c 	bl	6e44 <_sbrk>
    bdec:	1c43      	adds	r3, r0, #1
    bdee:	d103      	bne.n	bdf8 <_sbrk_r+0x1c>
    bdf0:	6823      	ldr	r3, [r4, #0]
    bdf2:	2b00      	cmp	r3, #0
    bdf4:	d000      	beq.n	bdf8 <_sbrk_r+0x1c>
    bdf6:	602b      	str	r3, [r5, #0]
    bdf8:	bd70      	pop	{r4, r5, r6, pc}
    bdfa:	46c0      	nop			; (mov r8, r8)
    bdfc:	20000cdc 	.word	0x20000cdc

0000be00 <setbuf>:
    be00:	424a      	negs	r2, r1
    be02:	414a      	adcs	r2, r1
    be04:	2380      	movs	r3, #128	; 0x80
    be06:	b510      	push	{r4, lr}
    be08:	0052      	lsls	r2, r2, #1
    be0a:	00db      	lsls	r3, r3, #3
    be0c:	f000 f802 	bl	be14 <setvbuf>
    be10:	bd10      	pop	{r4, pc}
	...

0000be14 <setvbuf>:
    be14:	b5f0      	push	{r4, r5, r6, r7, lr}
    be16:	001d      	movs	r5, r3
    be18:	4b4f      	ldr	r3, [pc, #316]	; (bf58 <setvbuf+0x144>)
    be1a:	b085      	sub	sp, #20
    be1c:	681e      	ldr	r6, [r3, #0]
    be1e:	0004      	movs	r4, r0
    be20:	000f      	movs	r7, r1
    be22:	9200      	str	r2, [sp, #0]
    be24:	2e00      	cmp	r6, #0
    be26:	d005      	beq.n	be34 <setvbuf+0x20>
    be28:	69b3      	ldr	r3, [r6, #24]
    be2a:	2b00      	cmp	r3, #0
    be2c:	d102      	bne.n	be34 <setvbuf+0x20>
    be2e:	0030      	movs	r0, r6
    be30:	f000 f9ce 	bl	c1d0 <__sinit>
    be34:	4b49      	ldr	r3, [pc, #292]	; (bf5c <setvbuf+0x148>)
    be36:	429c      	cmp	r4, r3
    be38:	d150      	bne.n	bedc <setvbuf+0xc8>
    be3a:	6874      	ldr	r4, [r6, #4]
    be3c:	9b00      	ldr	r3, [sp, #0]
    be3e:	2b02      	cmp	r3, #2
    be40:	d005      	beq.n	be4e <setvbuf+0x3a>
    be42:	2b01      	cmp	r3, #1
    be44:	d900      	bls.n	be48 <setvbuf+0x34>
    be46:	e084      	b.n	bf52 <setvbuf+0x13e>
    be48:	2d00      	cmp	r5, #0
    be4a:	da00      	bge.n	be4e <setvbuf+0x3a>
    be4c:	e081      	b.n	bf52 <setvbuf+0x13e>
    be4e:	0021      	movs	r1, r4
    be50:	0030      	movs	r0, r6
    be52:	f000 f94f 	bl	c0f4 <_fflush_r>
    be56:	6b61      	ldr	r1, [r4, #52]	; 0x34
    be58:	2900      	cmp	r1, #0
    be5a:	d008      	beq.n	be6e <setvbuf+0x5a>
    be5c:	0023      	movs	r3, r4
    be5e:	3344      	adds	r3, #68	; 0x44
    be60:	4299      	cmp	r1, r3
    be62:	d002      	beq.n	be6a <setvbuf+0x56>
    be64:	0030      	movs	r0, r6
    be66:	f7ff ff11 	bl	bc8c <_free_r>
    be6a:	2300      	movs	r3, #0
    be6c:	6363      	str	r3, [r4, #52]	; 0x34
    be6e:	2300      	movs	r3, #0
    be70:	61a3      	str	r3, [r4, #24]
    be72:	6063      	str	r3, [r4, #4]
    be74:	89a3      	ldrh	r3, [r4, #12]
    be76:	061b      	lsls	r3, r3, #24
    be78:	d503      	bpl.n	be82 <setvbuf+0x6e>
    be7a:	6921      	ldr	r1, [r4, #16]
    be7c:	0030      	movs	r0, r6
    be7e:	f7ff ff05 	bl	bc8c <_free_r>
    be82:	89a3      	ldrh	r3, [r4, #12]
    be84:	4a36      	ldr	r2, [pc, #216]	; (bf60 <setvbuf+0x14c>)
    be86:	4013      	ands	r3, r2
    be88:	81a3      	strh	r3, [r4, #12]
    be8a:	9b00      	ldr	r3, [sp, #0]
    be8c:	2b02      	cmp	r3, #2
    be8e:	d05a      	beq.n	bf46 <setvbuf+0x132>
    be90:	ab03      	add	r3, sp, #12
    be92:	aa02      	add	r2, sp, #8
    be94:	0021      	movs	r1, r4
    be96:	0030      	movs	r0, r6
    be98:	f000 fa30 	bl	c2fc <__swhatbuf_r>
    be9c:	89a3      	ldrh	r3, [r4, #12]
    be9e:	4318      	orrs	r0, r3
    bea0:	81a0      	strh	r0, [r4, #12]
    bea2:	2d00      	cmp	r5, #0
    bea4:	d124      	bne.n	bef0 <setvbuf+0xdc>
    bea6:	9d02      	ldr	r5, [sp, #8]
    bea8:	0028      	movs	r0, r5
    beaa:	f7ff fed3 	bl	bc54 <malloc>
    beae:	9501      	str	r5, [sp, #4]
    beb0:	1e07      	subs	r7, r0, #0
    beb2:	d142      	bne.n	bf3a <setvbuf+0x126>
    beb4:	9b02      	ldr	r3, [sp, #8]
    beb6:	9301      	str	r3, [sp, #4]
    beb8:	42ab      	cmp	r3, r5
    beba:	d139      	bne.n	bf30 <setvbuf+0x11c>
    bebc:	2001      	movs	r0, #1
    bebe:	4240      	negs	r0, r0
    bec0:	2302      	movs	r3, #2
    bec2:	89a2      	ldrh	r2, [r4, #12]
    bec4:	4313      	orrs	r3, r2
    bec6:	81a3      	strh	r3, [r4, #12]
    bec8:	2300      	movs	r3, #0
    beca:	60a3      	str	r3, [r4, #8]
    becc:	0023      	movs	r3, r4
    bece:	3347      	adds	r3, #71	; 0x47
    bed0:	6023      	str	r3, [r4, #0]
    bed2:	6123      	str	r3, [r4, #16]
    bed4:	2301      	movs	r3, #1
    bed6:	6163      	str	r3, [r4, #20]
    bed8:	b005      	add	sp, #20
    beda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bedc:	4b21      	ldr	r3, [pc, #132]	; (bf64 <setvbuf+0x150>)
    bede:	429c      	cmp	r4, r3
    bee0:	d101      	bne.n	bee6 <setvbuf+0xd2>
    bee2:	68b4      	ldr	r4, [r6, #8]
    bee4:	e7aa      	b.n	be3c <setvbuf+0x28>
    bee6:	4b20      	ldr	r3, [pc, #128]	; (bf68 <setvbuf+0x154>)
    bee8:	429c      	cmp	r4, r3
    beea:	d1a7      	bne.n	be3c <setvbuf+0x28>
    beec:	68f4      	ldr	r4, [r6, #12]
    beee:	e7a5      	b.n	be3c <setvbuf+0x28>
    bef0:	2f00      	cmp	r7, #0
    bef2:	d0d9      	beq.n	bea8 <setvbuf+0x94>
    bef4:	69b3      	ldr	r3, [r6, #24]
    bef6:	2b00      	cmp	r3, #0
    bef8:	d102      	bne.n	bf00 <setvbuf+0xec>
    befa:	0030      	movs	r0, r6
    befc:	f000 f968 	bl	c1d0 <__sinit>
    bf00:	9b00      	ldr	r3, [sp, #0]
    bf02:	2b01      	cmp	r3, #1
    bf04:	d103      	bne.n	bf0e <setvbuf+0xfa>
    bf06:	89a3      	ldrh	r3, [r4, #12]
    bf08:	9a00      	ldr	r2, [sp, #0]
    bf0a:	431a      	orrs	r2, r3
    bf0c:	81a2      	strh	r2, [r4, #12]
    bf0e:	2008      	movs	r0, #8
    bf10:	89a3      	ldrh	r3, [r4, #12]
    bf12:	6027      	str	r7, [r4, #0]
    bf14:	6127      	str	r7, [r4, #16]
    bf16:	6165      	str	r5, [r4, #20]
    bf18:	4018      	ands	r0, r3
    bf1a:	d018      	beq.n	bf4e <setvbuf+0x13a>
    bf1c:	2001      	movs	r0, #1
    bf1e:	4018      	ands	r0, r3
    bf20:	2300      	movs	r3, #0
    bf22:	4298      	cmp	r0, r3
    bf24:	d011      	beq.n	bf4a <setvbuf+0x136>
    bf26:	426d      	negs	r5, r5
    bf28:	60a3      	str	r3, [r4, #8]
    bf2a:	61a5      	str	r5, [r4, #24]
    bf2c:	0018      	movs	r0, r3
    bf2e:	e7d3      	b.n	bed8 <setvbuf+0xc4>
    bf30:	9801      	ldr	r0, [sp, #4]
    bf32:	f7ff fe8f 	bl	bc54 <malloc>
    bf36:	1e07      	subs	r7, r0, #0
    bf38:	d0c0      	beq.n	bebc <setvbuf+0xa8>
    bf3a:	2380      	movs	r3, #128	; 0x80
    bf3c:	89a2      	ldrh	r2, [r4, #12]
    bf3e:	9d01      	ldr	r5, [sp, #4]
    bf40:	4313      	orrs	r3, r2
    bf42:	81a3      	strh	r3, [r4, #12]
    bf44:	e7d6      	b.n	bef4 <setvbuf+0xe0>
    bf46:	2000      	movs	r0, #0
    bf48:	e7ba      	b.n	bec0 <setvbuf+0xac>
    bf4a:	60a5      	str	r5, [r4, #8]
    bf4c:	e7c4      	b.n	bed8 <setvbuf+0xc4>
    bf4e:	60a0      	str	r0, [r4, #8]
    bf50:	e7c2      	b.n	bed8 <setvbuf+0xc4>
    bf52:	2001      	movs	r0, #1
    bf54:	4240      	negs	r0, r0
    bf56:	e7bf      	b.n	bed8 <setvbuf+0xc4>
    bf58:	2000006c 	.word	0x2000006c
    bf5c:	0000d61c 	.word	0x0000d61c
    bf60:	fffff35c 	.word	0xfffff35c
    bf64:	0000d63c 	.word	0x0000d63c
    bf68:	0000d5fc 	.word	0x0000d5fc

0000bf6c <sniprintf>:
    bf6c:	b40c      	push	{r2, r3}
    bf6e:	b530      	push	{r4, r5, lr}
    bf70:	4b16      	ldr	r3, [pc, #88]	; (bfcc <sniprintf+0x60>)
    bf72:	b09d      	sub	sp, #116	; 0x74
    bf74:	1e0c      	subs	r4, r1, #0
    bf76:	681d      	ldr	r5, [r3, #0]
    bf78:	da08      	bge.n	bf8c <sniprintf+0x20>
    bf7a:	238b      	movs	r3, #139	; 0x8b
    bf7c:	2001      	movs	r0, #1
    bf7e:	602b      	str	r3, [r5, #0]
    bf80:	4240      	negs	r0, r0
    bf82:	b01d      	add	sp, #116	; 0x74
    bf84:	bc30      	pop	{r4, r5}
    bf86:	bc08      	pop	{r3}
    bf88:	b002      	add	sp, #8
    bf8a:	4718      	bx	r3
    bf8c:	2382      	movs	r3, #130	; 0x82
    bf8e:	a902      	add	r1, sp, #8
    bf90:	009b      	lsls	r3, r3, #2
    bf92:	818b      	strh	r3, [r1, #12]
    bf94:	2300      	movs	r3, #0
    bf96:	9002      	str	r0, [sp, #8]
    bf98:	6108      	str	r0, [r1, #16]
    bf9a:	429c      	cmp	r4, r3
    bf9c:	d000      	beq.n	bfa0 <sniprintf+0x34>
    bf9e:	1e63      	subs	r3, r4, #1
    bfa0:	608b      	str	r3, [r1, #8]
    bfa2:	614b      	str	r3, [r1, #20]
    bfa4:	2301      	movs	r3, #1
    bfa6:	425b      	negs	r3, r3
    bfa8:	81cb      	strh	r3, [r1, #14]
    bfaa:	9a20      	ldr	r2, [sp, #128]	; 0x80
    bfac:	ab21      	add	r3, sp, #132	; 0x84
    bfae:	0028      	movs	r0, r5
    bfb0:	9301      	str	r3, [sp, #4]
    bfb2:	f000 fa2f 	bl	c414 <_svfiprintf_r>
    bfb6:	1c43      	adds	r3, r0, #1
    bfb8:	da01      	bge.n	bfbe <sniprintf+0x52>
    bfba:	238b      	movs	r3, #139	; 0x8b
    bfbc:	602b      	str	r3, [r5, #0]
    bfbe:	2c00      	cmp	r4, #0
    bfc0:	d0df      	beq.n	bf82 <sniprintf+0x16>
    bfc2:	2300      	movs	r3, #0
    bfc4:	9a02      	ldr	r2, [sp, #8]
    bfc6:	7013      	strb	r3, [r2, #0]
    bfc8:	e7db      	b.n	bf82 <sniprintf+0x16>
    bfca:	46c0      	nop			; (mov r8, r8)
    bfcc:	2000006c 	.word	0x2000006c

0000bfd0 <strlen>:
    bfd0:	2300      	movs	r3, #0
    bfd2:	5cc2      	ldrb	r2, [r0, r3]
    bfd4:	3301      	adds	r3, #1
    bfd6:	2a00      	cmp	r2, #0
    bfd8:	d1fb      	bne.n	bfd2 <strlen+0x2>
    bfda:	1e58      	subs	r0, r3, #1
    bfdc:	4770      	bx	lr
	...

0000bfe0 <__sflush_r>:
    bfe0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bfe2:	898a      	ldrh	r2, [r1, #12]
    bfe4:	0005      	movs	r5, r0
    bfe6:	000c      	movs	r4, r1
    bfe8:	0713      	lsls	r3, r2, #28
    bfea:	d460      	bmi.n	c0ae <__sflush_r+0xce>
    bfec:	684b      	ldr	r3, [r1, #4]
    bfee:	2b00      	cmp	r3, #0
    bff0:	dc04      	bgt.n	bffc <__sflush_r+0x1c>
    bff2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    bff4:	2b00      	cmp	r3, #0
    bff6:	dc01      	bgt.n	bffc <__sflush_r+0x1c>
    bff8:	2000      	movs	r0, #0
    bffa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    bffc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    bffe:	2f00      	cmp	r7, #0
    c000:	d0fa      	beq.n	bff8 <__sflush_r+0x18>
    c002:	2300      	movs	r3, #0
    c004:	682e      	ldr	r6, [r5, #0]
    c006:	602b      	str	r3, [r5, #0]
    c008:	2380      	movs	r3, #128	; 0x80
    c00a:	015b      	lsls	r3, r3, #5
    c00c:	401a      	ands	r2, r3
    c00e:	d034      	beq.n	c07a <__sflush_r+0x9a>
    c010:	6d60      	ldr	r0, [r4, #84]	; 0x54
    c012:	89a3      	ldrh	r3, [r4, #12]
    c014:	075b      	lsls	r3, r3, #29
    c016:	d506      	bpl.n	c026 <__sflush_r+0x46>
    c018:	6863      	ldr	r3, [r4, #4]
    c01a:	1ac0      	subs	r0, r0, r3
    c01c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c01e:	2b00      	cmp	r3, #0
    c020:	d001      	beq.n	c026 <__sflush_r+0x46>
    c022:	6c23      	ldr	r3, [r4, #64]	; 0x40
    c024:	1ac0      	subs	r0, r0, r3
    c026:	0002      	movs	r2, r0
    c028:	6a21      	ldr	r1, [r4, #32]
    c02a:	2300      	movs	r3, #0
    c02c:	0028      	movs	r0, r5
    c02e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    c030:	47b8      	blx	r7
    c032:	89a1      	ldrh	r1, [r4, #12]
    c034:	1c43      	adds	r3, r0, #1
    c036:	d106      	bne.n	c046 <__sflush_r+0x66>
    c038:	682b      	ldr	r3, [r5, #0]
    c03a:	2b1d      	cmp	r3, #29
    c03c:	d831      	bhi.n	c0a2 <__sflush_r+0xc2>
    c03e:	4a2c      	ldr	r2, [pc, #176]	; (c0f0 <__sflush_r+0x110>)
    c040:	40da      	lsrs	r2, r3
    c042:	07d3      	lsls	r3, r2, #31
    c044:	d52d      	bpl.n	c0a2 <__sflush_r+0xc2>
    c046:	2300      	movs	r3, #0
    c048:	6063      	str	r3, [r4, #4]
    c04a:	6923      	ldr	r3, [r4, #16]
    c04c:	6023      	str	r3, [r4, #0]
    c04e:	04cb      	lsls	r3, r1, #19
    c050:	d505      	bpl.n	c05e <__sflush_r+0x7e>
    c052:	1c43      	adds	r3, r0, #1
    c054:	d102      	bne.n	c05c <__sflush_r+0x7c>
    c056:	682b      	ldr	r3, [r5, #0]
    c058:	2b00      	cmp	r3, #0
    c05a:	d100      	bne.n	c05e <__sflush_r+0x7e>
    c05c:	6560      	str	r0, [r4, #84]	; 0x54
    c05e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c060:	602e      	str	r6, [r5, #0]
    c062:	2900      	cmp	r1, #0
    c064:	d0c8      	beq.n	bff8 <__sflush_r+0x18>
    c066:	0023      	movs	r3, r4
    c068:	3344      	adds	r3, #68	; 0x44
    c06a:	4299      	cmp	r1, r3
    c06c:	d002      	beq.n	c074 <__sflush_r+0x94>
    c06e:	0028      	movs	r0, r5
    c070:	f7ff fe0c 	bl	bc8c <_free_r>
    c074:	2000      	movs	r0, #0
    c076:	6360      	str	r0, [r4, #52]	; 0x34
    c078:	e7bf      	b.n	bffa <__sflush_r+0x1a>
    c07a:	2301      	movs	r3, #1
    c07c:	6a21      	ldr	r1, [r4, #32]
    c07e:	0028      	movs	r0, r5
    c080:	47b8      	blx	r7
    c082:	1c43      	adds	r3, r0, #1
    c084:	d1c5      	bne.n	c012 <__sflush_r+0x32>
    c086:	682b      	ldr	r3, [r5, #0]
    c088:	2b00      	cmp	r3, #0
    c08a:	d0c2      	beq.n	c012 <__sflush_r+0x32>
    c08c:	2b1d      	cmp	r3, #29
    c08e:	d001      	beq.n	c094 <__sflush_r+0xb4>
    c090:	2b16      	cmp	r3, #22
    c092:	d101      	bne.n	c098 <__sflush_r+0xb8>
    c094:	602e      	str	r6, [r5, #0]
    c096:	e7af      	b.n	bff8 <__sflush_r+0x18>
    c098:	2340      	movs	r3, #64	; 0x40
    c09a:	89a2      	ldrh	r2, [r4, #12]
    c09c:	4313      	orrs	r3, r2
    c09e:	81a3      	strh	r3, [r4, #12]
    c0a0:	e7ab      	b.n	bffa <__sflush_r+0x1a>
    c0a2:	2340      	movs	r3, #64	; 0x40
    c0a4:	430b      	orrs	r3, r1
    c0a6:	2001      	movs	r0, #1
    c0a8:	81a3      	strh	r3, [r4, #12]
    c0aa:	4240      	negs	r0, r0
    c0ac:	e7a5      	b.n	bffa <__sflush_r+0x1a>
    c0ae:	690f      	ldr	r7, [r1, #16]
    c0b0:	2f00      	cmp	r7, #0
    c0b2:	d0a1      	beq.n	bff8 <__sflush_r+0x18>
    c0b4:	680b      	ldr	r3, [r1, #0]
    c0b6:	600f      	str	r7, [r1, #0]
    c0b8:	1bdb      	subs	r3, r3, r7
    c0ba:	9301      	str	r3, [sp, #4]
    c0bc:	2300      	movs	r3, #0
    c0be:	0792      	lsls	r2, r2, #30
    c0c0:	d100      	bne.n	c0c4 <__sflush_r+0xe4>
    c0c2:	694b      	ldr	r3, [r1, #20]
    c0c4:	60a3      	str	r3, [r4, #8]
    c0c6:	9b01      	ldr	r3, [sp, #4]
    c0c8:	2b00      	cmp	r3, #0
    c0ca:	dc00      	bgt.n	c0ce <__sflush_r+0xee>
    c0cc:	e794      	b.n	bff8 <__sflush_r+0x18>
    c0ce:	9b01      	ldr	r3, [sp, #4]
    c0d0:	003a      	movs	r2, r7
    c0d2:	6a21      	ldr	r1, [r4, #32]
    c0d4:	0028      	movs	r0, r5
    c0d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    c0d8:	47b0      	blx	r6
    c0da:	2800      	cmp	r0, #0
    c0dc:	dc03      	bgt.n	c0e6 <__sflush_r+0x106>
    c0de:	2340      	movs	r3, #64	; 0x40
    c0e0:	89a2      	ldrh	r2, [r4, #12]
    c0e2:	4313      	orrs	r3, r2
    c0e4:	e7df      	b.n	c0a6 <__sflush_r+0xc6>
    c0e6:	9b01      	ldr	r3, [sp, #4]
    c0e8:	183f      	adds	r7, r7, r0
    c0ea:	1a1b      	subs	r3, r3, r0
    c0ec:	9301      	str	r3, [sp, #4]
    c0ee:	e7ea      	b.n	c0c6 <__sflush_r+0xe6>
    c0f0:	20400001 	.word	0x20400001

0000c0f4 <_fflush_r>:
    c0f4:	690b      	ldr	r3, [r1, #16]
    c0f6:	b570      	push	{r4, r5, r6, lr}
    c0f8:	0005      	movs	r5, r0
    c0fa:	000c      	movs	r4, r1
    c0fc:	2b00      	cmp	r3, #0
    c0fe:	d101      	bne.n	c104 <_fflush_r+0x10>
    c100:	2000      	movs	r0, #0
    c102:	bd70      	pop	{r4, r5, r6, pc}
    c104:	2800      	cmp	r0, #0
    c106:	d004      	beq.n	c112 <_fflush_r+0x1e>
    c108:	6983      	ldr	r3, [r0, #24]
    c10a:	2b00      	cmp	r3, #0
    c10c:	d101      	bne.n	c112 <_fflush_r+0x1e>
    c10e:	f000 f85f 	bl	c1d0 <__sinit>
    c112:	4b0b      	ldr	r3, [pc, #44]	; (c140 <_fflush_r+0x4c>)
    c114:	429c      	cmp	r4, r3
    c116:	d109      	bne.n	c12c <_fflush_r+0x38>
    c118:	686c      	ldr	r4, [r5, #4]
    c11a:	220c      	movs	r2, #12
    c11c:	5ea3      	ldrsh	r3, [r4, r2]
    c11e:	2b00      	cmp	r3, #0
    c120:	d0ee      	beq.n	c100 <_fflush_r+0xc>
    c122:	0021      	movs	r1, r4
    c124:	0028      	movs	r0, r5
    c126:	f7ff ff5b 	bl	bfe0 <__sflush_r>
    c12a:	e7ea      	b.n	c102 <_fflush_r+0xe>
    c12c:	4b05      	ldr	r3, [pc, #20]	; (c144 <_fflush_r+0x50>)
    c12e:	429c      	cmp	r4, r3
    c130:	d101      	bne.n	c136 <_fflush_r+0x42>
    c132:	68ac      	ldr	r4, [r5, #8]
    c134:	e7f1      	b.n	c11a <_fflush_r+0x26>
    c136:	4b04      	ldr	r3, [pc, #16]	; (c148 <_fflush_r+0x54>)
    c138:	429c      	cmp	r4, r3
    c13a:	d1ee      	bne.n	c11a <_fflush_r+0x26>
    c13c:	68ec      	ldr	r4, [r5, #12]
    c13e:	e7ec      	b.n	c11a <_fflush_r+0x26>
    c140:	0000d61c 	.word	0x0000d61c
    c144:	0000d63c 	.word	0x0000d63c
    c148:	0000d5fc 	.word	0x0000d5fc

0000c14c <_cleanup_r>:
    c14c:	b510      	push	{r4, lr}
    c14e:	4902      	ldr	r1, [pc, #8]	; (c158 <_cleanup_r+0xc>)
    c150:	f000 f8b2 	bl	c2b8 <_fwalk_reent>
    c154:	bd10      	pop	{r4, pc}
    c156:	46c0      	nop			; (mov r8, r8)
    c158:	0000c0f5 	.word	0x0000c0f5

0000c15c <std.isra.0>:
    c15c:	2300      	movs	r3, #0
    c15e:	b510      	push	{r4, lr}
    c160:	0004      	movs	r4, r0
    c162:	6003      	str	r3, [r0, #0]
    c164:	6043      	str	r3, [r0, #4]
    c166:	6083      	str	r3, [r0, #8]
    c168:	8181      	strh	r1, [r0, #12]
    c16a:	6643      	str	r3, [r0, #100]	; 0x64
    c16c:	81c2      	strh	r2, [r0, #14]
    c16e:	6103      	str	r3, [r0, #16]
    c170:	6143      	str	r3, [r0, #20]
    c172:	6183      	str	r3, [r0, #24]
    c174:	0019      	movs	r1, r3
    c176:	2208      	movs	r2, #8
    c178:	305c      	adds	r0, #92	; 0x5c
    c17a:	f7ff fd7e 	bl	bc7a <memset>
    c17e:	4b05      	ldr	r3, [pc, #20]	; (c194 <std.isra.0+0x38>)
    c180:	6224      	str	r4, [r4, #32]
    c182:	6263      	str	r3, [r4, #36]	; 0x24
    c184:	4b04      	ldr	r3, [pc, #16]	; (c198 <std.isra.0+0x3c>)
    c186:	62a3      	str	r3, [r4, #40]	; 0x28
    c188:	4b04      	ldr	r3, [pc, #16]	; (c19c <std.isra.0+0x40>)
    c18a:	62e3      	str	r3, [r4, #44]	; 0x2c
    c18c:	4b04      	ldr	r3, [pc, #16]	; (c1a0 <std.isra.0+0x44>)
    c18e:	6323      	str	r3, [r4, #48]	; 0x30
    c190:	bd10      	pop	{r4, pc}
    c192:	46c0      	nop			; (mov r8, r8)
    c194:	0000c92d 	.word	0x0000c92d
    c198:	0000c955 	.word	0x0000c955
    c19c:	0000c98d 	.word	0x0000c98d
    c1a0:	0000c9b9 	.word	0x0000c9b9

0000c1a4 <__sfmoreglue>:
    c1a4:	b570      	push	{r4, r5, r6, lr}
    c1a6:	2568      	movs	r5, #104	; 0x68
    c1a8:	1e4a      	subs	r2, r1, #1
    c1aa:	4355      	muls	r5, r2
    c1ac:	000e      	movs	r6, r1
    c1ae:	0029      	movs	r1, r5
    c1b0:	3174      	adds	r1, #116	; 0x74
    c1b2:	f7ff fdb5 	bl	bd20 <_malloc_r>
    c1b6:	1e04      	subs	r4, r0, #0
    c1b8:	d008      	beq.n	c1cc <__sfmoreglue+0x28>
    c1ba:	2100      	movs	r1, #0
    c1bc:	002a      	movs	r2, r5
    c1be:	6001      	str	r1, [r0, #0]
    c1c0:	6046      	str	r6, [r0, #4]
    c1c2:	300c      	adds	r0, #12
    c1c4:	60a0      	str	r0, [r4, #8]
    c1c6:	3268      	adds	r2, #104	; 0x68
    c1c8:	f7ff fd57 	bl	bc7a <memset>
    c1cc:	0020      	movs	r0, r4
    c1ce:	bd70      	pop	{r4, r5, r6, pc}

0000c1d0 <__sinit>:
    c1d0:	6983      	ldr	r3, [r0, #24]
    c1d2:	b513      	push	{r0, r1, r4, lr}
    c1d4:	0004      	movs	r4, r0
    c1d6:	2b00      	cmp	r3, #0
    c1d8:	d128      	bne.n	c22c <__sinit+0x5c>
    c1da:	6483      	str	r3, [r0, #72]	; 0x48
    c1dc:	64c3      	str	r3, [r0, #76]	; 0x4c
    c1de:	6503      	str	r3, [r0, #80]	; 0x50
    c1e0:	4b13      	ldr	r3, [pc, #76]	; (c230 <__sinit+0x60>)
    c1e2:	4a14      	ldr	r2, [pc, #80]	; (c234 <__sinit+0x64>)
    c1e4:	681b      	ldr	r3, [r3, #0]
    c1e6:	6282      	str	r2, [r0, #40]	; 0x28
    c1e8:	9301      	str	r3, [sp, #4]
    c1ea:	4298      	cmp	r0, r3
    c1ec:	d101      	bne.n	c1f2 <__sinit+0x22>
    c1ee:	2301      	movs	r3, #1
    c1f0:	6183      	str	r3, [r0, #24]
    c1f2:	0020      	movs	r0, r4
    c1f4:	f000 f820 	bl	c238 <__sfp>
    c1f8:	6060      	str	r0, [r4, #4]
    c1fa:	0020      	movs	r0, r4
    c1fc:	f000 f81c 	bl	c238 <__sfp>
    c200:	60a0      	str	r0, [r4, #8]
    c202:	0020      	movs	r0, r4
    c204:	f000 f818 	bl	c238 <__sfp>
    c208:	2200      	movs	r2, #0
    c20a:	60e0      	str	r0, [r4, #12]
    c20c:	2104      	movs	r1, #4
    c20e:	6860      	ldr	r0, [r4, #4]
    c210:	f7ff ffa4 	bl	c15c <std.isra.0>
    c214:	2201      	movs	r2, #1
    c216:	2109      	movs	r1, #9
    c218:	68a0      	ldr	r0, [r4, #8]
    c21a:	f7ff ff9f 	bl	c15c <std.isra.0>
    c21e:	2202      	movs	r2, #2
    c220:	2112      	movs	r1, #18
    c222:	68e0      	ldr	r0, [r4, #12]
    c224:	f7ff ff9a 	bl	c15c <std.isra.0>
    c228:	2301      	movs	r3, #1
    c22a:	61a3      	str	r3, [r4, #24]
    c22c:	bd13      	pop	{r0, r1, r4, pc}
    c22e:	46c0      	nop			; (mov r8, r8)
    c230:	0000d5f8 	.word	0x0000d5f8
    c234:	0000c14d 	.word	0x0000c14d

0000c238 <__sfp>:
    c238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c23a:	4b1e      	ldr	r3, [pc, #120]	; (c2b4 <__sfp+0x7c>)
    c23c:	0007      	movs	r7, r0
    c23e:	681e      	ldr	r6, [r3, #0]
    c240:	69b3      	ldr	r3, [r6, #24]
    c242:	2b00      	cmp	r3, #0
    c244:	d102      	bne.n	c24c <__sfp+0x14>
    c246:	0030      	movs	r0, r6
    c248:	f7ff ffc2 	bl	c1d0 <__sinit>
    c24c:	3648      	adds	r6, #72	; 0x48
    c24e:	68b4      	ldr	r4, [r6, #8]
    c250:	6873      	ldr	r3, [r6, #4]
    c252:	3b01      	subs	r3, #1
    c254:	d504      	bpl.n	c260 <__sfp+0x28>
    c256:	6833      	ldr	r3, [r6, #0]
    c258:	2b00      	cmp	r3, #0
    c25a:	d007      	beq.n	c26c <__sfp+0x34>
    c25c:	6836      	ldr	r6, [r6, #0]
    c25e:	e7f6      	b.n	c24e <__sfp+0x16>
    c260:	220c      	movs	r2, #12
    c262:	5ea5      	ldrsh	r5, [r4, r2]
    c264:	2d00      	cmp	r5, #0
    c266:	d00d      	beq.n	c284 <__sfp+0x4c>
    c268:	3468      	adds	r4, #104	; 0x68
    c26a:	e7f2      	b.n	c252 <__sfp+0x1a>
    c26c:	2104      	movs	r1, #4
    c26e:	0038      	movs	r0, r7
    c270:	f7ff ff98 	bl	c1a4 <__sfmoreglue>
    c274:	6030      	str	r0, [r6, #0]
    c276:	2800      	cmp	r0, #0
    c278:	d1f0      	bne.n	c25c <__sfp+0x24>
    c27a:	230c      	movs	r3, #12
    c27c:	0004      	movs	r4, r0
    c27e:	603b      	str	r3, [r7, #0]
    c280:	0020      	movs	r0, r4
    c282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c284:	2301      	movs	r3, #1
    c286:	0020      	movs	r0, r4
    c288:	425b      	negs	r3, r3
    c28a:	81e3      	strh	r3, [r4, #14]
    c28c:	3302      	adds	r3, #2
    c28e:	81a3      	strh	r3, [r4, #12]
    c290:	6665      	str	r5, [r4, #100]	; 0x64
    c292:	6025      	str	r5, [r4, #0]
    c294:	60a5      	str	r5, [r4, #8]
    c296:	6065      	str	r5, [r4, #4]
    c298:	6125      	str	r5, [r4, #16]
    c29a:	6165      	str	r5, [r4, #20]
    c29c:	61a5      	str	r5, [r4, #24]
    c29e:	2208      	movs	r2, #8
    c2a0:	0029      	movs	r1, r5
    c2a2:	305c      	adds	r0, #92	; 0x5c
    c2a4:	f7ff fce9 	bl	bc7a <memset>
    c2a8:	6365      	str	r5, [r4, #52]	; 0x34
    c2aa:	63a5      	str	r5, [r4, #56]	; 0x38
    c2ac:	64a5      	str	r5, [r4, #72]	; 0x48
    c2ae:	64e5      	str	r5, [r4, #76]	; 0x4c
    c2b0:	e7e6      	b.n	c280 <__sfp+0x48>
    c2b2:	46c0      	nop			; (mov r8, r8)
    c2b4:	0000d5f8 	.word	0x0000d5f8

0000c2b8 <_fwalk_reent>:
    c2b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c2ba:	0004      	movs	r4, r0
    c2bc:	0007      	movs	r7, r0
    c2be:	2600      	movs	r6, #0
    c2c0:	9101      	str	r1, [sp, #4]
    c2c2:	3448      	adds	r4, #72	; 0x48
    c2c4:	2c00      	cmp	r4, #0
    c2c6:	d101      	bne.n	c2cc <_fwalk_reent+0x14>
    c2c8:	0030      	movs	r0, r6
    c2ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c2cc:	6863      	ldr	r3, [r4, #4]
    c2ce:	68a5      	ldr	r5, [r4, #8]
    c2d0:	9300      	str	r3, [sp, #0]
    c2d2:	9b00      	ldr	r3, [sp, #0]
    c2d4:	3b01      	subs	r3, #1
    c2d6:	9300      	str	r3, [sp, #0]
    c2d8:	d501      	bpl.n	c2de <_fwalk_reent+0x26>
    c2da:	6824      	ldr	r4, [r4, #0]
    c2dc:	e7f2      	b.n	c2c4 <_fwalk_reent+0xc>
    c2de:	89ab      	ldrh	r3, [r5, #12]
    c2e0:	2b01      	cmp	r3, #1
    c2e2:	d908      	bls.n	c2f6 <_fwalk_reent+0x3e>
    c2e4:	220e      	movs	r2, #14
    c2e6:	5eab      	ldrsh	r3, [r5, r2]
    c2e8:	3301      	adds	r3, #1
    c2ea:	d004      	beq.n	c2f6 <_fwalk_reent+0x3e>
    c2ec:	0029      	movs	r1, r5
    c2ee:	0038      	movs	r0, r7
    c2f0:	9b01      	ldr	r3, [sp, #4]
    c2f2:	4798      	blx	r3
    c2f4:	4306      	orrs	r6, r0
    c2f6:	3568      	adds	r5, #104	; 0x68
    c2f8:	e7eb      	b.n	c2d2 <_fwalk_reent+0x1a>
	...

0000c2fc <__swhatbuf_r>:
    c2fc:	b570      	push	{r4, r5, r6, lr}
    c2fe:	000e      	movs	r6, r1
    c300:	001d      	movs	r5, r3
    c302:	230e      	movs	r3, #14
    c304:	5ec9      	ldrsh	r1, [r1, r3]
    c306:	b090      	sub	sp, #64	; 0x40
    c308:	0014      	movs	r4, r2
    c30a:	2900      	cmp	r1, #0
    c30c:	da07      	bge.n	c31e <__swhatbuf_r+0x22>
    c30e:	2300      	movs	r3, #0
    c310:	602b      	str	r3, [r5, #0]
    c312:	89b3      	ldrh	r3, [r6, #12]
    c314:	061b      	lsls	r3, r3, #24
    c316:	d411      	bmi.n	c33c <__swhatbuf_r+0x40>
    c318:	2380      	movs	r3, #128	; 0x80
    c31a:	00db      	lsls	r3, r3, #3
    c31c:	e00f      	b.n	c33e <__swhatbuf_r+0x42>
    c31e:	aa01      	add	r2, sp, #4
    c320:	f000 fb76 	bl	ca10 <_fstat_r>
    c324:	2800      	cmp	r0, #0
    c326:	dbf2      	blt.n	c30e <__swhatbuf_r+0x12>
    c328:	22f0      	movs	r2, #240	; 0xf0
    c32a:	9b02      	ldr	r3, [sp, #8]
    c32c:	0212      	lsls	r2, r2, #8
    c32e:	4013      	ands	r3, r2
    c330:	4a05      	ldr	r2, [pc, #20]	; (c348 <__swhatbuf_r+0x4c>)
    c332:	189b      	adds	r3, r3, r2
    c334:	425a      	negs	r2, r3
    c336:	4153      	adcs	r3, r2
    c338:	602b      	str	r3, [r5, #0]
    c33a:	e7ed      	b.n	c318 <__swhatbuf_r+0x1c>
    c33c:	2340      	movs	r3, #64	; 0x40
    c33e:	2000      	movs	r0, #0
    c340:	6023      	str	r3, [r4, #0]
    c342:	b010      	add	sp, #64	; 0x40
    c344:	bd70      	pop	{r4, r5, r6, pc}
    c346:	46c0      	nop			; (mov r8, r8)
    c348:	ffffe000 	.word	0xffffe000

0000c34c <__malloc_lock>:
    c34c:	4770      	bx	lr

0000c34e <__malloc_unlock>:
    c34e:	4770      	bx	lr

0000c350 <__ssputs_r>:
    c350:	b5f0      	push	{r4, r5, r6, r7, lr}
    c352:	688e      	ldr	r6, [r1, #8]
    c354:	b085      	sub	sp, #20
    c356:	0007      	movs	r7, r0
    c358:	000c      	movs	r4, r1
    c35a:	9203      	str	r2, [sp, #12]
    c35c:	9301      	str	r3, [sp, #4]
    c35e:	429e      	cmp	r6, r3
    c360:	d839      	bhi.n	c3d6 <__ssputs_r+0x86>
    c362:	2390      	movs	r3, #144	; 0x90
    c364:	898a      	ldrh	r2, [r1, #12]
    c366:	00db      	lsls	r3, r3, #3
    c368:	421a      	tst	r2, r3
    c36a:	d034      	beq.n	c3d6 <__ssputs_r+0x86>
    c36c:	2503      	movs	r5, #3
    c36e:	6909      	ldr	r1, [r1, #16]
    c370:	6823      	ldr	r3, [r4, #0]
    c372:	1a5b      	subs	r3, r3, r1
    c374:	9302      	str	r3, [sp, #8]
    c376:	6963      	ldr	r3, [r4, #20]
    c378:	9802      	ldr	r0, [sp, #8]
    c37a:	435d      	muls	r5, r3
    c37c:	0feb      	lsrs	r3, r5, #31
    c37e:	195d      	adds	r5, r3, r5
    c380:	9b01      	ldr	r3, [sp, #4]
    c382:	106d      	asrs	r5, r5, #1
    c384:	3301      	adds	r3, #1
    c386:	181b      	adds	r3, r3, r0
    c388:	42ab      	cmp	r3, r5
    c38a:	d900      	bls.n	c38e <__ssputs_r+0x3e>
    c38c:	001d      	movs	r5, r3
    c38e:	0553      	lsls	r3, r2, #21
    c390:	d532      	bpl.n	c3f8 <__ssputs_r+0xa8>
    c392:	0029      	movs	r1, r5
    c394:	0038      	movs	r0, r7
    c396:	f7ff fcc3 	bl	bd20 <_malloc_r>
    c39a:	1e06      	subs	r6, r0, #0
    c39c:	d109      	bne.n	c3b2 <__ssputs_r+0x62>
    c39e:	230c      	movs	r3, #12
    c3a0:	603b      	str	r3, [r7, #0]
    c3a2:	2340      	movs	r3, #64	; 0x40
    c3a4:	2001      	movs	r0, #1
    c3a6:	89a2      	ldrh	r2, [r4, #12]
    c3a8:	4240      	negs	r0, r0
    c3aa:	4313      	orrs	r3, r2
    c3ac:	81a3      	strh	r3, [r4, #12]
    c3ae:	b005      	add	sp, #20
    c3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c3b2:	9a02      	ldr	r2, [sp, #8]
    c3b4:	6921      	ldr	r1, [r4, #16]
    c3b6:	f7ff fc57 	bl	bc68 <memcpy>
    c3ba:	89a3      	ldrh	r3, [r4, #12]
    c3bc:	4a14      	ldr	r2, [pc, #80]	; (c410 <__ssputs_r+0xc0>)
    c3be:	401a      	ands	r2, r3
    c3c0:	2380      	movs	r3, #128	; 0x80
    c3c2:	4313      	orrs	r3, r2
    c3c4:	81a3      	strh	r3, [r4, #12]
    c3c6:	9b02      	ldr	r3, [sp, #8]
    c3c8:	6126      	str	r6, [r4, #16]
    c3ca:	18f6      	adds	r6, r6, r3
    c3cc:	6026      	str	r6, [r4, #0]
    c3ce:	6165      	str	r5, [r4, #20]
    c3d0:	9e01      	ldr	r6, [sp, #4]
    c3d2:	1aed      	subs	r5, r5, r3
    c3d4:	60a5      	str	r5, [r4, #8]
    c3d6:	9b01      	ldr	r3, [sp, #4]
    c3d8:	42b3      	cmp	r3, r6
    c3da:	d200      	bcs.n	c3de <__ssputs_r+0x8e>
    c3dc:	001e      	movs	r6, r3
    c3de:	0032      	movs	r2, r6
    c3e0:	9903      	ldr	r1, [sp, #12]
    c3e2:	6820      	ldr	r0, [r4, #0]
    c3e4:	f000 fb45 	bl	ca72 <memmove>
    c3e8:	68a3      	ldr	r3, [r4, #8]
    c3ea:	2000      	movs	r0, #0
    c3ec:	1b9b      	subs	r3, r3, r6
    c3ee:	60a3      	str	r3, [r4, #8]
    c3f0:	6823      	ldr	r3, [r4, #0]
    c3f2:	199e      	adds	r6, r3, r6
    c3f4:	6026      	str	r6, [r4, #0]
    c3f6:	e7da      	b.n	c3ae <__ssputs_r+0x5e>
    c3f8:	002a      	movs	r2, r5
    c3fa:	0038      	movs	r0, r7
    c3fc:	f000 fb4b 	bl	ca96 <_realloc_r>
    c400:	1e06      	subs	r6, r0, #0
    c402:	d1e0      	bne.n	c3c6 <__ssputs_r+0x76>
    c404:	6921      	ldr	r1, [r4, #16]
    c406:	0038      	movs	r0, r7
    c408:	f7ff fc40 	bl	bc8c <_free_r>
    c40c:	e7c7      	b.n	c39e <__ssputs_r+0x4e>
    c40e:	46c0      	nop			; (mov r8, r8)
    c410:	fffffb7f 	.word	0xfffffb7f

0000c414 <_svfiprintf_r>:
    c414:	b5f0      	push	{r4, r5, r6, r7, lr}
    c416:	b09f      	sub	sp, #124	; 0x7c
    c418:	9002      	str	r0, [sp, #8]
    c41a:	9305      	str	r3, [sp, #20]
    c41c:	898b      	ldrh	r3, [r1, #12]
    c41e:	000f      	movs	r7, r1
    c420:	0016      	movs	r6, r2
    c422:	061b      	lsls	r3, r3, #24
    c424:	d511      	bpl.n	c44a <_svfiprintf_r+0x36>
    c426:	690b      	ldr	r3, [r1, #16]
    c428:	2b00      	cmp	r3, #0
    c42a:	d10e      	bne.n	c44a <_svfiprintf_r+0x36>
    c42c:	2140      	movs	r1, #64	; 0x40
    c42e:	f7ff fc77 	bl	bd20 <_malloc_r>
    c432:	6038      	str	r0, [r7, #0]
    c434:	6138      	str	r0, [r7, #16]
    c436:	2800      	cmp	r0, #0
    c438:	d105      	bne.n	c446 <_svfiprintf_r+0x32>
    c43a:	230c      	movs	r3, #12
    c43c:	9a02      	ldr	r2, [sp, #8]
    c43e:	3801      	subs	r0, #1
    c440:	6013      	str	r3, [r2, #0]
    c442:	b01f      	add	sp, #124	; 0x7c
    c444:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c446:	2340      	movs	r3, #64	; 0x40
    c448:	617b      	str	r3, [r7, #20]
    c44a:	2300      	movs	r3, #0
    c44c:	ad06      	add	r5, sp, #24
    c44e:	616b      	str	r3, [r5, #20]
    c450:	3320      	adds	r3, #32
    c452:	766b      	strb	r3, [r5, #25]
    c454:	3310      	adds	r3, #16
    c456:	76ab      	strb	r3, [r5, #26]
    c458:	0034      	movs	r4, r6
    c45a:	7823      	ldrb	r3, [r4, #0]
    c45c:	2b00      	cmp	r3, #0
    c45e:	d147      	bne.n	c4f0 <_svfiprintf_r+0xdc>
    c460:	1ba3      	subs	r3, r4, r6
    c462:	9304      	str	r3, [sp, #16]
    c464:	d00d      	beq.n	c482 <_svfiprintf_r+0x6e>
    c466:	1ba3      	subs	r3, r4, r6
    c468:	0032      	movs	r2, r6
    c46a:	0039      	movs	r1, r7
    c46c:	9802      	ldr	r0, [sp, #8]
    c46e:	f7ff ff6f 	bl	c350 <__ssputs_r>
    c472:	1c43      	adds	r3, r0, #1
    c474:	d100      	bne.n	c478 <_svfiprintf_r+0x64>
    c476:	e0b5      	b.n	c5e4 <_svfiprintf_r+0x1d0>
    c478:	696a      	ldr	r2, [r5, #20]
    c47a:	9b04      	ldr	r3, [sp, #16]
    c47c:	4694      	mov	ip, r2
    c47e:	4463      	add	r3, ip
    c480:	616b      	str	r3, [r5, #20]
    c482:	7823      	ldrb	r3, [r4, #0]
    c484:	2b00      	cmp	r3, #0
    c486:	d100      	bne.n	c48a <_svfiprintf_r+0x76>
    c488:	e0ac      	b.n	c5e4 <_svfiprintf_r+0x1d0>
    c48a:	2201      	movs	r2, #1
    c48c:	2300      	movs	r3, #0
    c48e:	4252      	negs	r2, r2
    c490:	606a      	str	r2, [r5, #4]
    c492:	a902      	add	r1, sp, #8
    c494:	3254      	adds	r2, #84	; 0x54
    c496:	1852      	adds	r2, r2, r1
    c498:	3401      	adds	r4, #1
    c49a:	602b      	str	r3, [r5, #0]
    c49c:	60eb      	str	r3, [r5, #12]
    c49e:	60ab      	str	r3, [r5, #8]
    c4a0:	7013      	strb	r3, [r2, #0]
    c4a2:	65ab      	str	r3, [r5, #88]	; 0x58
    c4a4:	4e58      	ldr	r6, [pc, #352]	; (c608 <_svfiprintf_r+0x1f4>)
    c4a6:	2205      	movs	r2, #5
    c4a8:	7821      	ldrb	r1, [r4, #0]
    c4aa:	0030      	movs	r0, r6
    c4ac:	f000 fad6 	bl	ca5c <memchr>
    c4b0:	1c62      	adds	r2, r4, #1
    c4b2:	2800      	cmp	r0, #0
    c4b4:	d120      	bne.n	c4f8 <_svfiprintf_r+0xe4>
    c4b6:	6829      	ldr	r1, [r5, #0]
    c4b8:	06cb      	lsls	r3, r1, #27
    c4ba:	d504      	bpl.n	c4c6 <_svfiprintf_r+0xb2>
    c4bc:	2353      	movs	r3, #83	; 0x53
    c4be:	ae02      	add	r6, sp, #8
    c4c0:	3020      	adds	r0, #32
    c4c2:	199b      	adds	r3, r3, r6
    c4c4:	7018      	strb	r0, [r3, #0]
    c4c6:	070b      	lsls	r3, r1, #28
    c4c8:	d504      	bpl.n	c4d4 <_svfiprintf_r+0xc0>
    c4ca:	2353      	movs	r3, #83	; 0x53
    c4cc:	202b      	movs	r0, #43	; 0x2b
    c4ce:	ae02      	add	r6, sp, #8
    c4d0:	199b      	adds	r3, r3, r6
    c4d2:	7018      	strb	r0, [r3, #0]
    c4d4:	7823      	ldrb	r3, [r4, #0]
    c4d6:	2b2a      	cmp	r3, #42	; 0x2a
    c4d8:	d016      	beq.n	c508 <_svfiprintf_r+0xf4>
    c4da:	2000      	movs	r0, #0
    c4dc:	210a      	movs	r1, #10
    c4de:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c4e0:	7822      	ldrb	r2, [r4, #0]
    c4e2:	3a30      	subs	r2, #48	; 0x30
    c4e4:	2a09      	cmp	r2, #9
    c4e6:	d955      	bls.n	c594 <_svfiprintf_r+0x180>
    c4e8:	2800      	cmp	r0, #0
    c4ea:	d015      	beq.n	c518 <_svfiprintf_r+0x104>
    c4ec:	9309      	str	r3, [sp, #36]	; 0x24
    c4ee:	e013      	b.n	c518 <_svfiprintf_r+0x104>
    c4f0:	2b25      	cmp	r3, #37	; 0x25
    c4f2:	d0b5      	beq.n	c460 <_svfiprintf_r+0x4c>
    c4f4:	3401      	adds	r4, #1
    c4f6:	e7b0      	b.n	c45a <_svfiprintf_r+0x46>
    c4f8:	2301      	movs	r3, #1
    c4fa:	1b80      	subs	r0, r0, r6
    c4fc:	4083      	lsls	r3, r0
    c4fe:	6829      	ldr	r1, [r5, #0]
    c500:	0014      	movs	r4, r2
    c502:	430b      	orrs	r3, r1
    c504:	602b      	str	r3, [r5, #0]
    c506:	e7cd      	b.n	c4a4 <_svfiprintf_r+0x90>
    c508:	9b05      	ldr	r3, [sp, #20]
    c50a:	1d18      	adds	r0, r3, #4
    c50c:	681b      	ldr	r3, [r3, #0]
    c50e:	9005      	str	r0, [sp, #20]
    c510:	2b00      	cmp	r3, #0
    c512:	db39      	blt.n	c588 <_svfiprintf_r+0x174>
    c514:	9309      	str	r3, [sp, #36]	; 0x24
    c516:	0014      	movs	r4, r2
    c518:	7823      	ldrb	r3, [r4, #0]
    c51a:	2b2e      	cmp	r3, #46	; 0x2e
    c51c:	d10b      	bne.n	c536 <_svfiprintf_r+0x122>
    c51e:	7863      	ldrb	r3, [r4, #1]
    c520:	1c62      	adds	r2, r4, #1
    c522:	2b2a      	cmp	r3, #42	; 0x2a
    c524:	d13e      	bne.n	c5a4 <_svfiprintf_r+0x190>
    c526:	9b05      	ldr	r3, [sp, #20]
    c528:	3402      	adds	r4, #2
    c52a:	1d1a      	adds	r2, r3, #4
    c52c:	681b      	ldr	r3, [r3, #0]
    c52e:	9205      	str	r2, [sp, #20]
    c530:	2b00      	cmp	r3, #0
    c532:	db34      	blt.n	c59e <_svfiprintf_r+0x18a>
    c534:	9307      	str	r3, [sp, #28]
    c536:	4e35      	ldr	r6, [pc, #212]	; (c60c <_svfiprintf_r+0x1f8>)
    c538:	7821      	ldrb	r1, [r4, #0]
    c53a:	2203      	movs	r2, #3
    c53c:	0030      	movs	r0, r6
    c53e:	f000 fa8d 	bl	ca5c <memchr>
    c542:	2800      	cmp	r0, #0
    c544:	d006      	beq.n	c554 <_svfiprintf_r+0x140>
    c546:	2340      	movs	r3, #64	; 0x40
    c548:	1b80      	subs	r0, r0, r6
    c54a:	4083      	lsls	r3, r0
    c54c:	682a      	ldr	r2, [r5, #0]
    c54e:	3401      	adds	r4, #1
    c550:	4313      	orrs	r3, r2
    c552:	602b      	str	r3, [r5, #0]
    c554:	7821      	ldrb	r1, [r4, #0]
    c556:	2206      	movs	r2, #6
    c558:	482d      	ldr	r0, [pc, #180]	; (c610 <_svfiprintf_r+0x1fc>)
    c55a:	1c66      	adds	r6, r4, #1
    c55c:	7629      	strb	r1, [r5, #24]
    c55e:	f000 fa7d 	bl	ca5c <memchr>
    c562:	2800      	cmp	r0, #0
    c564:	d046      	beq.n	c5f4 <_svfiprintf_r+0x1e0>
    c566:	4b2b      	ldr	r3, [pc, #172]	; (c614 <_svfiprintf_r+0x200>)
    c568:	2b00      	cmp	r3, #0
    c56a:	d12f      	bne.n	c5cc <_svfiprintf_r+0x1b8>
    c56c:	6829      	ldr	r1, [r5, #0]
    c56e:	9b05      	ldr	r3, [sp, #20]
    c570:	2207      	movs	r2, #7
    c572:	05c9      	lsls	r1, r1, #23
    c574:	d528      	bpl.n	c5c8 <_svfiprintf_r+0x1b4>
    c576:	189b      	adds	r3, r3, r2
    c578:	4393      	bics	r3, r2
    c57a:	3308      	adds	r3, #8
    c57c:	9305      	str	r3, [sp, #20]
    c57e:	696b      	ldr	r3, [r5, #20]
    c580:	9a03      	ldr	r2, [sp, #12]
    c582:	189b      	adds	r3, r3, r2
    c584:	616b      	str	r3, [r5, #20]
    c586:	e767      	b.n	c458 <_svfiprintf_r+0x44>
    c588:	425b      	negs	r3, r3
    c58a:	60eb      	str	r3, [r5, #12]
    c58c:	2302      	movs	r3, #2
    c58e:	430b      	orrs	r3, r1
    c590:	602b      	str	r3, [r5, #0]
    c592:	e7c0      	b.n	c516 <_svfiprintf_r+0x102>
    c594:	434b      	muls	r3, r1
    c596:	3401      	adds	r4, #1
    c598:	189b      	adds	r3, r3, r2
    c59a:	2001      	movs	r0, #1
    c59c:	e7a0      	b.n	c4e0 <_svfiprintf_r+0xcc>
    c59e:	2301      	movs	r3, #1
    c5a0:	425b      	negs	r3, r3
    c5a2:	e7c7      	b.n	c534 <_svfiprintf_r+0x120>
    c5a4:	2300      	movs	r3, #0
    c5a6:	0014      	movs	r4, r2
    c5a8:	200a      	movs	r0, #10
    c5aa:	001a      	movs	r2, r3
    c5ac:	606b      	str	r3, [r5, #4]
    c5ae:	7821      	ldrb	r1, [r4, #0]
    c5b0:	3930      	subs	r1, #48	; 0x30
    c5b2:	2909      	cmp	r1, #9
    c5b4:	d903      	bls.n	c5be <_svfiprintf_r+0x1aa>
    c5b6:	2b00      	cmp	r3, #0
    c5b8:	d0bd      	beq.n	c536 <_svfiprintf_r+0x122>
    c5ba:	9207      	str	r2, [sp, #28]
    c5bc:	e7bb      	b.n	c536 <_svfiprintf_r+0x122>
    c5be:	4342      	muls	r2, r0
    c5c0:	3401      	adds	r4, #1
    c5c2:	1852      	adds	r2, r2, r1
    c5c4:	2301      	movs	r3, #1
    c5c6:	e7f2      	b.n	c5ae <_svfiprintf_r+0x19a>
    c5c8:	3307      	adds	r3, #7
    c5ca:	e7d5      	b.n	c578 <_svfiprintf_r+0x164>
    c5cc:	ab05      	add	r3, sp, #20
    c5ce:	9300      	str	r3, [sp, #0]
    c5d0:	003a      	movs	r2, r7
    c5d2:	4b11      	ldr	r3, [pc, #68]	; (c618 <_svfiprintf_r+0x204>)
    c5d4:	0029      	movs	r1, r5
    c5d6:	9802      	ldr	r0, [sp, #8]
    c5d8:	e000      	b.n	c5dc <_svfiprintf_r+0x1c8>
    c5da:	bf00      	nop
    c5dc:	9003      	str	r0, [sp, #12]
    c5de:	9b03      	ldr	r3, [sp, #12]
    c5e0:	3301      	adds	r3, #1
    c5e2:	d1cc      	bne.n	c57e <_svfiprintf_r+0x16a>
    c5e4:	89bb      	ldrh	r3, [r7, #12]
    c5e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c5e8:	065b      	lsls	r3, r3, #25
    c5ea:	d400      	bmi.n	c5ee <_svfiprintf_r+0x1da>
    c5ec:	e729      	b.n	c442 <_svfiprintf_r+0x2e>
    c5ee:	2001      	movs	r0, #1
    c5f0:	4240      	negs	r0, r0
    c5f2:	e726      	b.n	c442 <_svfiprintf_r+0x2e>
    c5f4:	ab05      	add	r3, sp, #20
    c5f6:	9300      	str	r3, [sp, #0]
    c5f8:	003a      	movs	r2, r7
    c5fa:	4b07      	ldr	r3, [pc, #28]	; (c618 <_svfiprintf_r+0x204>)
    c5fc:	0029      	movs	r1, r5
    c5fe:	9802      	ldr	r0, [sp, #8]
    c600:	f000 f87a 	bl	c6f8 <_printf_i>
    c604:	e7ea      	b.n	c5dc <_svfiprintf_r+0x1c8>
    c606:	46c0      	nop			; (mov r8, r8)
    c608:	0000d65c 	.word	0x0000d65c
    c60c:	0000d662 	.word	0x0000d662
    c610:	0000d666 	.word	0x0000d666
    c614:	00000000 	.word	0x00000000
    c618:	0000c351 	.word	0x0000c351

0000c61c <_printf_common>:
    c61c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c61e:	0015      	movs	r5, r2
    c620:	9301      	str	r3, [sp, #4]
    c622:	688a      	ldr	r2, [r1, #8]
    c624:	690b      	ldr	r3, [r1, #16]
    c626:	9000      	str	r0, [sp, #0]
    c628:	000c      	movs	r4, r1
    c62a:	4293      	cmp	r3, r2
    c62c:	da00      	bge.n	c630 <_printf_common+0x14>
    c62e:	0013      	movs	r3, r2
    c630:	0022      	movs	r2, r4
    c632:	602b      	str	r3, [r5, #0]
    c634:	3243      	adds	r2, #67	; 0x43
    c636:	7812      	ldrb	r2, [r2, #0]
    c638:	2a00      	cmp	r2, #0
    c63a:	d001      	beq.n	c640 <_printf_common+0x24>
    c63c:	3301      	adds	r3, #1
    c63e:	602b      	str	r3, [r5, #0]
    c640:	6823      	ldr	r3, [r4, #0]
    c642:	069b      	lsls	r3, r3, #26
    c644:	d502      	bpl.n	c64c <_printf_common+0x30>
    c646:	682b      	ldr	r3, [r5, #0]
    c648:	3302      	adds	r3, #2
    c64a:	602b      	str	r3, [r5, #0]
    c64c:	2706      	movs	r7, #6
    c64e:	6823      	ldr	r3, [r4, #0]
    c650:	401f      	ands	r7, r3
    c652:	d027      	beq.n	c6a4 <_printf_common+0x88>
    c654:	0023      	movs	r3, r4
    c656:	3343      	adds	r3, #67	; 0x43
    c658:	781b      	ldrb	r3, [r3, #0]
    c65a:	1e5a      	subs	r2, r3, #1
    c65c:	4193      	sbcs	r3, r2
    c65e:	6822      	ldr	r2, [r4, #0]
    c660:	0692      	lsls	r2, r2, #26
    c662:	d430      	bmi.n	c6c6 <_printf_common+0xaa>
    c664:	0022      	movs	r2, r4
    c666:	9901      	ldr	r1, [sp, #4]
    c668:	3243      	adds	r2, #67	; 0x43
    c66a:	9800      	ldr	r0, [sp, #0]
    c66c:	9e08      	ldr	r6, [sp, #32]
    c66e:	47b0      	blx	r6
    c670:	1c43      	adds	r3, r0, #1
    c672:	d025      	beq.n	c6c0 <_printf_common+0xa4>
    c674:	2306      	movs	r3, #6
    c676:	6820      	ldr	r0, [r4, #0]
    c678:	682a      	ldr	r2, [r5, #0]
    c67a:	68e1      	ldr	r1, [r4, #12]
    c67c:	4003      	ands	r3, r0
    c67e:	2500      	movs	r5, #0
    c680:	2b04      	cmp	r3, #4
    c682:	d103      	bne.n	c68c <_printf_common+0x70>
    c684:	1a8d      	subs	r5, r1, r2
    c686:	43eb      	mvns	r3, r5
    c688:	17db      	asrs	r3, r3, #31
    c68a:	401d      	ands	r5, r3
    c68c:	68a3      	ldr	r3, [r4, #8]
    c68e:	6922      	ldr	r2, [r4, #16]
    c690:	4293      	cmp	r3, r2
    c692:	dd01      	ble.n	c698 <_printf_common+0x7c>
    c694:	1a9b      	subs	r3, r3, r2
    c696:	18ed      	adds	r5, r5, r3
    c698:	2700      	movs	r7, #0
    c69a:	42bd      	cmp	r5, r7
    c69c:	d120      	bne.n	c6e0 <_printf_common+0xc4>
    c69e:	2000      	movs	r0, #0
    c6a0:	e010      	b.n	c6c4 <_printf_common+0xa8>
    c6a2:	3701      	adds	r7, #1
    c6a4:	68e3      	ldr	r3, [r4, #12]
    c6a6:	682a      	ldr	r2, [r5, #0]
    c6a8:	1a9b      	subs	r3, r3, r2
    c6aa:	429f      	cmp	r7, r3
    c6ac:	dad2      	bge.n	c654 <_printf_common+0x38>
    c6ae:	0022      	movs	r2, r4
    c6b0:	2301      	movs	r3, #1
    c6b2:	3219      	adds	r2, #25
    c6b4:	9901      	ldr	r1, [sp, #4]
    c6b6:	9800      	ldr	r0, [sp, #0]
    c6b8:	9e08      	ldr	r6, [sp, #32]
    c6ba:	47b0      	blx	r6
    c6bc:	1c43      	adds	r3, r0, #1
    c6be:	d1f0      	bne.n	c6a2 <_printf_common+0x86>
    c6c0:	2001      	movs	r0, #1
    c6c2:	4240      	negs	r0, r0
    c6c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c6c6:	2030      	movs	r0, #48	; 0x30
    c6c8:	18e1      	adds	r1, r4, r3
    c6ca:	3143      	adds	r1, #67	; 0x43
    c6cc:	7008      	strb	r0, [r1, #0]
    c6ce:	0021      	movs	r1, r4
    c6d0:	1c5a      	adds	r2, r3, #1
    c6d2:	3145      	adds	r1, #69	; 0x45
    c6d4:	7809      	ldrb	r1, [r1, #0]
    c6d6:	18a2      	adds	r2, r4, r2
    c6d8:	3243      	adds	r2, #67	; 0x43
    c6da:	3302      	adds	r3, #2
    c6dc:	7011      	strb	r1, [r2, #0]
    c6de:	e7c1      	b.n	c664 <_printf_common+0x48>
    c6e0:	0022      	movs	r2, r4
    c6e2:	2301      	movs	r3, #1
    c6e4:	321a      	adds	r2, #26
    c6e6:	9901      	ldr	r1, [sp, #4]
    c6e8:	9800      	ldr	r0, [sp, #0]
    c6ea:	9e08      	ldr	r6, [sp, #32]
    c6ec:	47b0      	blx	r6
    c6ee:	1c43      	adds	r3, r0, #1
    c6f0:	d0e6      	beq.n	c6c0 <_printf_common+0xa4>
    c6f2:	3701      	adds	r7, #1
    c6f4:	e7d1      	b.n	c69a <_printf_common+0x7e>
	...

0000c6f8 <_printf_i>:
    c6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6fa:	b08b      	sub	sp, #44	; 0x2c
    c6fc:	9206      	str	r2, [sp, #24]
    c6fe:	000a      	movs	r2, r1
    c700:	3243      	adds	r2, #67	; 0x43
    c702:	9307      	str	r3, [sp, #28]
    c704:	9005      	str	r0, [sp, #20]
    c706:	9204      	str	r2, [sp, #16]
    c708:	7e0a      	ldrb	r2, [r1, #24]
    c70a:	000c      	movs	r4, r1
    c70c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c70e:	2a6e      	cmp	r2, #110	; 0x6e
    c710:	d100      	bne.n	c714 <_printf_i+0x1c>
    c712:	e08f      	b.n	c834 <_printf_i+0x13c>
    c714:	d817      	bhi.n	c746 <_printf_i+0x4e>
    c716:	2a63      	cmp	r2, #99	; 0x63
    c718:	d02c      	beq.n	c774 <_printf_i+0x7c>
    c71a:	d808      	bhi.n	c72e <_printf_i+0x36>
    c71c:	2a00      	cmp	r2, #0
    c71e:	d100      	bne.n	c722 <_printf_i+0x2a>
    c720:	e099      	b.n	c856 <_printf_i+0x15e>
    c722:	2a58      	cmp	r2, #88	; 0x58
    c724:	d054      	beq.n	c7d0 <_printf_i+0xd8>
    c726:	0026      	movs	r6, r4
    c728:	3642      	adds	r6, #66	; 0x42
    c72a:	7032      	strb	r2, [r6, #0]
    c72c:	e029      	b.n	c782 <_printf_i+0x8a>
    c72e:	2a64      	cmp	r2, #100	; 0x64
    c730:	d001      	beq.n	c736 <_printf_i+0x3e>
    c732:	2a69      	cmp	r2, #105	; 0x69
    c734:	d1f7      	bne.n	c726 <_printf_i+0x2e>
    c736:	6821      	ldr	r1, [r4, #0]
    c738:	681a      	ldr	r2, [r3, #0]
    c73a:	0608      	lsls	r0, r1, #24
    c73c:	d523      	bpl.n	c786 <_printf_i+0x8e>
    c73e:	1d11      	adds	r1, r2, #4
    c740:	6019      	str	r1, [r3, #0]
    c742:	6815      	ldr	r5, [r2, #0]
    c744:	e025      	b.n	c792 <_printf_i+0x9a>
    c746:	2a73      	cmp	r2, #115	; 0x73
    c748:	d100      	bne.n	c74c <_printf_i+0x54>
    c74a:	e088      	b.n	c85e <_printf_i+0x166>
    c74c:	d808      	bhi.n	c760 <_printf_i+0x68>
    c74e:	2a6f      	cmp	r2, #111	; 0x6f
    c750:	d029      	beq.n	c7a6 <_printf_i+0xae>
    c752:	2a70      	cmp	r2, #112	; 0x70
    c754:	d1e7      	bne.n	c726 <_printf_i+0x2e>
    c756:	2220      	movs	r2, #32
    c758:	6809      	ldr	r1, [r1, #0]
    c75a:	430a      	orrs	r2, r1
    c75c:	6022      	str	r2, [r4, #0]
    c75e:	e003      	b.n	c768 <_printf_i+0x70>
    c760:	2a75      	cmp	r2, #117	; 0x75
    c762:	d020      	beq.n	c7a6 <_printf_i+0xae>
    c764:	2a78      	cmp	r2, #120	; 0x78
    c766:	d1de      	bne.n	c726 <_printf_i+0x2e>
    c768:	0022      	movs	r2, r4
    c76a:	2178      	movs	r1, #120	; 0x78
    c76c:	3245      	adds	r2, #69	; 0x45
    c76e:	7011      	strb	r1, [r2, #0]
    c770:	4a6c      	ldr	r2, [pc, #432]	; (c924 <_printf_i+0x22c>)
    c772:	e030      	b.n	c7d6 <_printf_i+0xde>
    c774:	000e      	movs	r6, r1
    c776:	681a      	ldr	r2, [r3, #0]
    c778:	3642      	adds	r6, #66	; 0x42
    c77a:	1d11      	adds	r1, r2, #4
    c77c:	6019      	str	r1, [r3, #0]
    c77e:	6813      	ldr	r3, [r2, #0]
    c780:	7033      	strb	r3, [r6, #0]
    c782:	2301      	movs	r3, #1
    c784:	e079      	b.n	c87a <_printf_i+0x182>
    c786:	0649      	lsls	r1, r1, #25
    c788:	d5d9      	bpl.n	c73e <_printf_i+0x46>
    c78a:	1d11      	adds	r1, r2, #4
    c78c:	6019      	str	r1, [r3, #0]
    c78e:	2300      	movs	r3, #0
    c790:	5ed5      	ldrsh	r5, [r2, r3]
    c792:	2d00      	cmp	r5, #0
    c794:	da03      	bge.n	c79e <_printf_i+0xa6>
    c796:	232d      	movs	r3, #45	; 0x2d
    c798:	9a04      	ldr	r2, [sp, #16]
    c79a:	426d      	negs	r5, r5
    c79c:	7013      	strb	r3, [r2, #0]
    c79e:	4b62      	ldr	r3, [pc, #392]	; (c928 <_printf_i+0x230>)
    c7a0:	270a      	movs	r7, #10
    c7a2:	9303      	str	r3, [sp, #12]
    c7a4:	e02f      	b.n	c806 <_printf_i+0x10e>
    c7a6:	6820      	ldr	r0, [r4, #0]
    c7a8:	6819      	ldr	r1, [r3, #0]
    c7aa:	0605      	lsls	r5, r0, #24
    c7ac:	d503      	bpl.n	c7b6 <_printf_i+0xbe>
    c7ae:	1d08      	adds	r0, r1, #4
    c7b0:	6018      	str	r0, [r3, #0]
    c7b2:	680d      	ldr	r5, [r1, #0]
    c7b4:	e005      	b.n	c7c2 <_printf_i+0xca>
    c7b6:	0640      	lsls	r0, r0, #25
    c7b8:	d5f9      	bpl.n	c7ae <_printf_i+0xb6>
    c7ba:	680d      	ldr	r5, [r1, #0]
    c7bc:	1d08      	adds	r0, r1, #4
    c7be:	6018      	str	r0, [r3, #0]
    c7c0:	b2ad      	uxth	r5, r5
    c7c2:	4b59      	ldr	r3, [pc, #356]	; (c928 <_printf_i+0x230>)
    c7c4:	2708      	movs	r7, #8
    c7c6:	9303      	str	r3, [sp, #12]
    c7c8:	2a6f      	cmp	r2, #111	; 0x6f
    c7ca:	d018      	beq.n	c7fe <_printf_i+0x106>
    c7cc:	270a      	movs	r7, #10
    c7ce:	e016      	b.n	c7fe <_printf_i+0x106>
    c7d0:	3145      	adds	r1, #69	; 0x45
    c7d2:	700a      	strb	r2, [r1, #0]
    c7d4:	4a54      	ldr	r2, [pc, #336]	; (c928 <_printf_i+0x230>)
    c7d6:	9203      	str	r2, [sp, #12]
    c7d8:	681a      	ldr	r2, [r3, #0]
    c7da:	6821      	ldr	r1, [r4, #0]
    c7dc:	1d10      	adds	r0, r2, #4
    c7de:	6018      	str	r0, [r3, #0]
    c7e0:	6815      	ldr	r5, [r2, #0]
    c7e2:	0608      	lsls	r0, r1, #24
    c7e4:	d522      	bpl.n	c82c <_printf_i+0x134>
    c7e6:	07cb      	lsls	r3, r1, #31
    c7e8:	d502      	bpl.n	c7f0 <_printf_i+0xf8>
    c7ea:	2320      	movs	r3, #32
    c7ec:	4319      	orrs	r1, r3
    c7ee:	6021      	str	r1, [r4, #0]
    c7f0:	2710      	movs	r7, #16
    c7f2:	2d00      	cmp	r5, #0
    c7f4:	d103      	bne.n	c7fe <_printf_i+0x106>
    c7f6:	2320      	movs	r3, #32
    c7f8:	6822      	ldr	r2, [r4, #0]
    c7fa:	439a      	bics	r2, r3
    c7fc:	6022      	str	r2, [r4, #0]
    c7fe:	0023      	movs	r3, r4
    c800:	2200      	movs	r2, #0
    c802:	3343      	adds	r3, #67	; 0x43
    c804:	701a      	strb	r2, [r3, #0]
    c806:	6863      	ldr	r3, [r4, #4]
    c808:	60a3      	str	r3, [r4, #8]
    c80a:	2b00      	cmp	r3, #0
    c80c:	db5c      	blt.n	c8c8 <_printf_i+0x1d0>
    c80e:	2204      	movs	r2, #4
    c810:	6821      	ldr	r1, [r4, #0]
    c812:	4391      	bics	r1, r2
    c814:	6021      	str	r1, [r4, #0]
    c816:	2d00      	cmp	r5, #0
    c818:	d158      	bne.n	c8cc <_printf_i+0x1d4>
    c81a:	9e04      	ldr	r6, [sp, #16]
    c81c:	2b00      	cmp	r3, #0
    c81e:	d064      	beq.n	c8ea <_printf_i+0x1f2>
    c820:	0026      	movs	r6, r4
    c822:	9b03      	ldr	r3, [sp, #12]
    c824:	3642      	adds	r6, #66	; 0x42
    c826:	781b      	ldrb	r3, [r3, #0]
    c828:	7033      	strb	r3, [r6, #0]
    c82a:	e05e      	b.n	c8ea <_printf_i+0x1f2>
    c82c:	0648      	lsls	r0, r1, #25
    c82e:	d5da      	bpl.n	c7e6 <_printf_i+0xee>
    c830:	b2ad      	uxth	r5, r5
    c832:	e7d8      	b.n	c7e6 <_printf_i+0xee>
    c834:	6809      	ldr	r1, [r1, #0]
    c836:	681a      	ldr	r2, [r3, #0]
    c838:	0608      	lsls	r0, r1, #24
    c83a:	d505      	bpl.n	c848 <_printf_i+0x150>
    c83c:	1d11      	adds	r1, r2, #4
    c83e:	6019      	str	r1, [r3, #0]
    c840:	6813      	ldr	r3, [r2, #0]
    c842:	6962      	ldr	r2, [r4, #20]
    c844:	601a      	str	r2, [r3, #0]
    c846:	e006      	b.n	c856 <_printf_i+0x15e>
    c848:	0649      	lsls	r1, r1, #25
    c84a:	d5f7      	bpl.n	c83c <_printf_i+0x144>
    c84c:	1d11      	adds	r1, r2, #4
    c84e:	6019      	str	r1, [r3, #0]
    c850:	6813      	ldr	r3, [r2, #0]
    c852:	8aa2      	ldrh	r2, [r4, #20]
    c854:	801a      	strh	r2, [r3, #0]
    c856:	2300      	movs	r3, #0
    c858:	9e04      	ldr	r6, [sp, #16]
    c85a:	6123      	str	r3, [r4, #16]
    c85c:	e054      	b.n	c908 <_printf_i+0x210>
    c85e:	681a      	ldr	r2, [r3, #0]
    c860:	1d11      	adds	r1, r2, #4
    c862:	6019      	str	r1, [r3, #0]
    c864:	6816      	ldr	r6, [r2, #0]
    c866:	2100      	movs	r1, #0
    c868:	6862      	ldr	r2, [r4, #4]
    c86a:	0030      	movs	r0, r6
    c86c:	f000 f8f6 	bl	ca5c <memchr>
    c870:	2800      	cmp	r0, #0
    c872:	d001      	beq.n	c878 <_printf_i+0x180>
    c874:	1b80      	subs	r0, r0, r6
    c876:	6060      	str	r0, [r4, #4]
    c878:	6863      	ldr	r3, [r4, #4]
    c87a:	6123      	str	r3, [r4, #16]
    c87c:	2300      	movs	r3, #0
    c87e:	9a04      	ldr	r2, [sp, #16]
    c880:	7013      	strb	r3, [r2, #0]
    c882:	e041      	b.n	c908 <_printf_i+0x210>
    c884:	6923      	ldr	r3, [r4, #16]
    c886:	0032      	movs	r2, r6
    c888:	9906      	ldr	r1, [sp, #24]
    c88a:	9805      	ldr	r0, [sp, #20]
    c88c:	9d07      	ldr	r5, [sp, #28]
    c88e:	47a8      	blx	r5
    c890:	1c43      	adds	r3, r0, #1
    c892:	d043      	beq.n	c91c <_printf_i+0x224>
    c894:	6823      	ldr	r3, [r4, #0]
    c896:	2500      	movs	r5, #0
    c898:	079b      	lsls	r3, r3, #30
    c89a:	d40f      	bmi.n	c8bc <_printf_i+0x1c4>
    c89c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c89e:	68e0      	ldr	r0, [r4, #12]
    c8a0:	4298      	cmp	r0, r3
    c8a2:	da3d      	bge.n	c920 <_printf_i+0x228>
    c8a4:	0018      	movs	r0, r3
    c8a6:	e03b      	b.n	c920 <_printf_i+0x228>
    c8a8:	0022      	movs	r2, r4
    c8aa:	2301      	movs	r3, #1
    c8ac:	3219      	adds	r2, #25
    c8ae:	9906      	ldr	r1, [sp, #24]
    c8b0:	9805      	ldr	r0, [sp, #20]
    c8b2:	9e07      	ldr	r6, [sp, #28]
    c8b4:	47b0      	blx	r6
    c8b6:	1c43      	adds	r3, r0, #1
    c8b8:	d030      	beq.n	c91c <_printf_i+0x224>
    c8ba:	3501      	adds	r5, #1
    c8bc:	68e3      	ldr	r3, [r4, #12]
    c8be:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c8c0:	1a9b      	subs	r3, r3, r2
    c8c2:	429d      	cmp	r5, r3
    c8c4:	dbf0      	blt.n	c8a8 <_printf_i+0x1b0>
    c8c6:	e7e9      	b.n	c89c <_printf_i+0x1a4>
    c8c8:	2d00      	cmp	r5, #0
    c8ca:	d0a9      	beq.n	c820 <_printf_i+0x128>
    c8cc:	9e04      	ldr	r6, [sp, #16]
    c8ce:	0028      	movs	r0, r5
    c8d0:	0039      	movs	r1, r7
    c8d2:	f7ff f881 	bl	b9d8 <__aeabi_uidivmod>
    c8d6:	9b03      	ldr	r3, [sp, #12]
    c8d8:	3e01      	subs	r6, #1
    c8da:	5c5b      	ldrb	r3, [r3, r1]
    c8dc:	0028      	movs	r0, r5
    c8de:	7033      	strb	r3, [r6, #0]
    c8e0:	0039      	movs	r1, r7
    c8e2:	f7fe fff3 	bl	b8cc <__udivsi3>
    c8e6:	1e05      	subs	r5, r0, #0
    c8e8:	d1f1      	bne.n	c8ce <_printf_i+0x1d6>
    c8ea:	2f08      	cmp	r7, #8
    c8ec:	d109      	bne.n	c902 <_printf_i+0x20a>
    c8ee:	6823      	ldr	r3, [r4, #0]
    c8f0:	07db      	lsls	r3, r3, #31
    c8f2:	d506      	bpl.n	c902 <_printf_i+0x20a>
    c8f4:	6863      	ldr	r3, [r4, #4]
    c8f6:	6922      	ldr	r2, [r4, #16]
    c8f8:	4293      	cmp	r3, r2
    c8fa:	dc02      	bgt.n	c902 <_printf_i+0x20a>
    c8fc:	2330      	movs	r3, #48	; 0x30
    c8fe:	3e01      	subs	r6, #1
    c900:	7033      	strb	r3, [r6, #0]
    c902:	9b04      	ldr	r3, [sp, #16]
    c904:	1b9b      	subs	r3, r3, r6
    c906:	6123      	str	r3, [r4, #16]
    c908:	9b07      	ldr	r3, [sp, #28]
    c90a:	aa09      	add	r2, sp, #36	; 0x24
    c90c:	9300      	str	r3, [sp, #0]
    c90e:	0021      	movs	r1, r4
    c910:	9b06      	ldr	r3, [sp, #24]
    c912:	9805      	ldr	r0, [sp, #20]
    c914:	f7ff fe82 	bl	c61c <_printf_common>
    c918:	1c43      	adds	r3, r0, #1
    c91a:	d1b3      	bne.n	c884 <_printf_i+0x18c>
    c91c:	2001      	movs	r0, #1
    c91e:	4240      	negs	r0, r0
    c920:	b00b      	add	sp, #44	; 0x2c
    c922:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c924:	0000d67e 	.word	0x0000d67e
    c928:	0000d66d 	.word	0x0000d66d

0000c92c <__sread>:
    c92c:	b570      	push	{r4, r5, r6, lr}
    c92e:	000c      	movs	r4, r1
    c930:	250e      	movs	r5, #14
    c932:	5f49      	ldrsh	r1, [r1, r5]
    c934:	f000 f8d6 	bl	cae4 <_read_r>
    c938:	2800      	cmp	r0, #0
    c93a:	db03      	blt.n	c944 <__sread+0x18>
    c93c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    c93e:	181b      	adds	r3, r3, r0
    c940:	6563      	str	r3, [r4, #84]	; 0x54
    c942:	bd70      	pop	{r4, r5, r6, pc}
    c944:	89a3      	ldrh	r3, [r4, #12]
    c946:	4a02      	ldr	r2, [pc, #8]	; (c950 <__sread+0x24>)
    c948:	4013      	ands	r3, r2
    c94a:	81a3      	strh	r3, [r4, #12]
    c94c:	e7f9      	b.n	c942 <__sread+0x16>
    c94e:	46c0      	nop			; (mov r8, r8)
    c950:	ffffefff 	.word	0xffffefff

0000c954 <__swrite>:
    c954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c956:	001f      	movs	r7, r3
    c958:	898b      	ldrh	r3, [r1, #12]
    c95a:	0005      	movs	r5, r0
    c95c:	000c      	movs	r4, r1
    c95e:	0016      	movs	r6, r2
    c960:	05db      	lsls	r3, r3, #23
    c962:	d505      	bpl.n	c970 <__swrite+0x1c>
    c964:	230e      	movs	r3, #14
    c966:	5ec9      	ldrsh	r1, [r1, r3]
    c968:	2200      	movs	r2, #0
    c96a:	2302      	movs	r3, #2
    c96c:	f000 f862 	bl	ca34 <_lseek_r>
    c970:	89a3      	ldrh	r3, [r4, #12]
    c972:	4a05      	ldr	r2, [pc, #20]	; (c988 <__swrite+0x34>)
    c974:	0028      	movs	r0, r5
    c976:	4013      	ands	r3, r2
    c978:	81a3      	strh	r3, [r4, #12]
    c97a:	0032      	movs	r2, r6
    c97c:	230e      	movs	r3, #14
    c97e:	5ee1      	ldrsh	r1, [r4, r3]
    c980:	003b      	movs	r3, r7
    c982:	f000 f81f 	bl	c9c4 <_write_r>
    c986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c988:	ffffefff 	.word	0xffffefff

0000c98c <__sseek>:
    c98c:	b570      	push	{r4, r5, r6, lr}
    c98e:	000c      	movs	r4, r1
    c990:	250e      	movs	r5, #14
    c992:	5f49      	ldrsh	r1, [r1, r5]
    c994:	f000 f84e 	bl	ca34 <_lseek_r>
    c998:	89a3      	ldrh	r3, [r4, #12]
    c99a:	1c42      	adds	r2, r0, #1
    c99c:	d103      	bne.n	c9a6 <__sseek+0x1a>
    c99e:	4a05      	ldr	r2, [pc, #20]	; (c9b4 <__sseek+0x28>)
    c9a0:	4013      	ands	r3, r2
    c9a2:	81a3      	strh	r3, [r4, #12]
    c9a4:	bd70      	pop	{r4, r5, r6, pc}
    c9a6:	2280      	movs	r2, #128	; 0x80
    c9a8:	0152      	lsls	r2, r2, #5
    c9aa:	4313      	orrs	r3, r2
    c9ac:	81a3      	strh	r3, [r4, #12]
    c9ae:	6560      	str	r0, [r4, #84]	; 0x54
    c9b0:	e7f8      	b.n	c9a4 <__sseek+0x18>
    c9b2:	46c0      	nop			; (mov r8, r8)
    c9b4:	ffffefff 	.word	0xffffefff

0000c9b8 <__sclose>:
    c9b8:	b510      	push	{r4, lr}
    c9ba:	230e      	movs	r3, #14
    c9bc:	5ec9      	ldrsh	r1, [r1, r3]
    c9be:	f000 f815 	bl	c9ec <_close_r>
    c9c2:	bd10      	pop	{r4, pc}

0000c9c4 <_write_r>:
    c9c4:	b570      	push	{r4, r5, r6, lr}
    c9c6:	0005      	movs	r5, r0
    c9c8:	0008      	movs	r0, r1
    c9ca:	0011      	movs	r1, r2
    c9cc:	2200      	movs	r2, #0
    c9ce:	4c06      	ldr	r4, [pc, #24]	; (c9e8 <_write_r+0x24>)
    c9d0:	6022      	str	r2, [r4, #0]
    c9d2:	001a      	movs	r2, r3
    c9d4:	f7fa fa00 	bl	6dd8 <_write>
    c9d8:	1c43      	adds	r3, r0, #1
    c9da:	d103      	bne.n	c9e4 <_write_r+0x20>
    c9dc:	6823      	ldr	r3, [r4, #0]
    c9de:	2b00      	cmp	r3, #0
    c9e0:	d000      	beq.n	c9e4 <_write_r+0x20>
    c9e2:	602b      	str	r3, [r5, #0]
    c9e4:	bd70      	pop	{r4, r5, r6, pc}
    c9e6:	46c0      	nop			; (mov r8, r8)
    c9e8:	20000cdc 	.word	0x20000cdc

0000c9ec <_close_r>:
    c9ec:	2300      	movs	r3, #0
    c9ee:	b570      	push	{r4, r5, r6, lr}
    c9f0:	4c06      	ldr	r4, [pc, #24]	; (ca0c <_close_r+0x20>)
    c9f2:	0005      	movs	r5, r0
    c9f4:	0008      	movs	r0, r1
    c9f6:	6023      	str	r3, [r4, #0]
    c9f8:	f7fa fa42 	bl	6e80 <_close>
    c9fc:	1c43      	adds	r3, r0, #1
    c9fe:	d103      	bne.n	ca08 <_close_r+0x1c>
    ca00:	6823      	ldr	r3, [r4, #0]
    ca02:	2b00      	cmp	r3, #0
    ca04:	d000      	beq.n	ca08 <_close_r+0x1c>
    ca06:	602b      	str	r3, [r5, #0]
    ca08:	bd70      	pop	{r4, r5, r6, pc}
    ca0a:	46c0      	nop			; (mov r8, r8)
    ca0c:	20000cdc 	.word	0x20000cdc

0000ca10 <_fstat_r>:
    ca10:	2300      	movs	r3, #0
    ca12:	b570      	push	{r4, r5, r6, lr}
    ca14:	4c06      	ldr	r4, [pc, #24]	; (ca30 <_fstat_r+0x20>)
    ca16:	0005      	movs	r5, r0
    ca18:	0008      	movs	r0, r1
    ca1a:	0011      	movs	r1, r2
    ca1c:	6023      	str	r3, [r4, #0]
    ca1e:	f7fa fa39 	bl	6e94 <_fstat>
    ca22:	1c43      	adds	r3, r0, #1
    ca24:	d103      	bne.n	ca2e <_fstat_r+0x1e>
    ca26:	6823      	ldr	r3, [r4, #0]
    ca28:	2b00      	cmp	r3, #0
    ca2a:	d000      	beq.n	ca2e <_fstat_r+0x1e>
    ca2c:	602b      	str	r3, [r5, #0]
    ca2e:	bd70      	pop	{r4, r5, r6, pc}
    ca30:	20000cdc 	.word	0x20000cdc

0000ca34 <_lseek_r>:
    ca34:	b570      	push	{r4, r5, r6, lr}
    ca36:	0005      	movs	r5, r0
    ca38:	0008      	movs	r0, r1
    ca3a:	0011      	movs	r1, r2
    ca3c:	2200      	movs	r2, #0
    ca3e:	4c06      	ldr	r4, [pc, #24]	; (ca58 <_lseek_r+0x24>)
    ca40:	6022      	str	r2, [r4, #0]
    ca42:	001a      	movs	r2, r3
    ca44:	f7fa fa34 	bl	6eb0 <_lseek>
    ca48:	1c43      	adds	r3, r0, #1
    ca4a:	d103      	bne.n	ca54 <_lseek_r+0x20>
    ca4c:	6823      	ldr	r3, [r4, #0]
    ca4e:	2b00      	cmp	r3, #0
    ca50:	d000      	beq.n	ca54 <_lseek_r+0x20>
    ca52:	602b      	str	r3, [r5, #0]
    ca54:	bd70      	pop	{r4, r5, r6, pc}
    ca56:	46c0      	nop			; (mov r8, r8)
    ca58:	20000cdc 	.word	0x20000cdc

0000ca5c <memchr>:
    ca5c:	b2c9      	uxtb	r1, r1
    ca5e:	1882      	adds	r2, r0, r2
    ca60:	4290      	cmp	r0, r2
    ca62:	d101      	bne.n	ca68 <memchr+0xc>
    ca64:	2000      	movs	r0, #0
    ca66:	4770      	bx	lr
    ca68:	7803      	ldrb	r3, [r0, #0]
    ca6a:	428b      	cmp	r3, r1
    ca6c:	d0fb      	beq.n	ca66 <memchr+0xa>
    ca6e:	3001      	adds	r0, #1
    ca70:	e7f6      	b.n	ca60 <memchr+0x4>

0000ca72 <memmove>:
    ca72:	b510      	push	{r4, lr}
    ca74:	4288      	cmp	r0, r1
    ca76:	d902      	bls.n	ca7e <memmove+0xc>
    ca78:	188b      	adds	r3, r1, r2
    ca7a:	4298      	cmp	r0, r3
    ca7c:	d308      	bcc.n	ca90 <memmove+0x1e>
    ca7e:	2300      	movs	r3, #0
    ca80:	429a      	cmp	r2, r3
    ca82:	d007      	beq.n	ca94 <memmove+0x22>
    ca84:	5ccc      	ldrb	r4, [r1, r3]
    ca86:	54c4      	strb	r4, [r0, r3]
    ca88:	3301      	adds	r3, #1
    ca8a:	e7f9      	b.n	ca80 <memmove+0xe>
    ca8c:	5c8b      	ldrb	r3, [r1, r2]
    ca8e:	5483      	strb	r3, [r0, r2]
    ca90:	3a01      	subs	r2, #1
    ca92:	d2fb      	bcs.n	ca8c <memmove+0x1a>
    ca94:	bd10      	pop	{r4, pc}

0000ca96 <_realloc_r>:
    ca96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ca98:	0007      	movs	r7, r0
    ca9a:	000d      	movs	r5, r1
    ca9c:	0016      	movs	r6, r2
    ca9e:	2900      	cmp	r1, #0
    caa0:	d105      	bne.n	caae <_realloc_r+0x18>
    caa2:	0011      	movs	r1, r2
    caa4:	f7ff f93c 	bl	bd20 <_malloc_r>
    caa8:	0004      	movs	r4, r0
    caaa:	0020      	movs	r0, r4
    caac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    caae:	2a00      	cmp	r2, #0
    cab0:	d103      	bne.n	caba <_realloc_r+0x24>
    cab2:	f7ff f8eb 	bl	bc8c <_free_r>
    cab6:	0034      	movs	r4, r6
    cab8:	e7f7      	b.n	caaa <_realloc_r+0x14>
    caba:	f000 f827 	bl	cb0c <_malloc_usable_size_r>
    cabe:	002c      	movs	r4, r5
    cac0:	4286      	cmp	r6, r0
    cac2:	d9f2      	bls.n	caaa <_realloc_r+0x14>
    cac4:	0031      	movs	r1, r6
    cac6:	0038      	movs	r0, r7
    cac8:	f7ff f92a 	bl	bd20 <_malloc_r>
    cacc:	1e04      	subs	r4, r0, #0
    cace:	d0ec      	beq.n	caaa <_realloc_r+0x14>
    cad0:	0029      	movs	r1, r5
    cad2:	0032      	movs	r2, r6
    cad4:	f7ff f8c8 	bl	bc68 <memcpy>
    cad8:	0029      	movs	r1, r5
    cada:	0038      	movs	r0, r7
    cadc:	f7ff f8d6 	bl	bc8c <_free_r>
    cae0:	e7e3      	b.n	caaa <_realloc_r+0x14>
	...

0000cae4 <_read_r>:
    cae4:	b570      	push	{r4, r5, r6, lr}
    cae6:	0005      	movs	r5, r0
    cae8:	0008      	movs	r0, r1
    caea:	0011      	movs	r1, r2
    caec:	2200      	movs	r2, #0
    caee:	4c06      	ldr	r4, [pc, #24]	; (cb08 <_read_r+0x24>)
    caf0:	6022      	str	r2, [r4, #0]
    caf2:	001a      	movs	r2, r3
    caf4:	f7fa f946 	bl	6d84 <_read>
    caf8:	1c43      	adds	r3, r0, #1
    cafa:	d103      	bne.n	cb04 <_read_r+0x20>
    cafc:	6823      	ldr	r3, [r4, #0]
    cafe:	2b00      	cmp	r3, #0
    cb00:	d000      	beq.n	cb04 <_read_r+0x20>
    cb02:	602b      	str	r3, [r5, #0]
    cb04:	bd70      	pop	{r4, r5, r6, pc}
    cb06:	46c0      	nop			; (mov r8, r8)
    cb08:	20000cdc 	.word	0x20000cdc

0000cb0c <_malloc_usable_size_r>:
    cb0c:	1f0b      	subs	r3, r1, #4
    cb0e:	681b      	ldr	r3, [r3, #0]
    cb10:	1f18      	subs	r0, r3, #4
    cb12:	2b00      	cmp	r3, #0
    cb14:	da01      	bge.n	cb1a <_malloc_usable_size_r+0xe>
    cb16:	580b      	ldr	r3, [r1, r0]
    cb18:	18c0      	adds	r0, r0, r3
    cb1a:	4770      	bx	lr
    cb1c:	0000055c 	.word	0x0000055c
    cb20:	0000055c 	.word	0x0000055c
    cb24:	00000550 	.word	0x00000550
    cb28:	0000055c 	.word	0x0000055c
    cb2c:	00000550 	.word	0x00000550
    cb30:	0000052a 	.word	0x0000052a
    cb34:	0000052a 	.word	0x0000052a
    cb38:	0000055c 	.word	0x0000055c
    cb3c:	0000055c 	.word	0x0000055c
    cb40:	0000055c 	.word	0x0000055c
    cb44:	0000055c 	.word	0x0000055c
    cb48:	0000055c 	.word	0x0000055c
    cb4c:	0000055c 	.word	0x0000055c
    cb50:	0000055c 	.word	0x0000055c
    cb54:	0000055c 	.word	0x0000055c
    cb58:	0000055c 	.word	0x0000055c
    cb5c:	0000055c 	.word	0x0000055c
    cb60:	0000055c 	.word	0x0000055c
    cb64:	0000055c 	.word	0x0000055c
    cb68:	0000055c 	.word	0x0000055c
    cb6c:	0000055c 	.word	0x0000055c
    cb70:	0000055c 	.word	0x0000055c
    cb74:	0000055c 	.word	0x0000055c
    cb78:	0000055c 	.word	0x0000055c
    cb7c:	0000055c 	.word	0x0000055c
    cb80:	0000055c 	.word	0x0000055c
    cb84:	0000055c 	.word	0x0000055c
    cb88:	0000055c 	.word	0x0000055c
    cb8c:	0000055c 	.word	0x0000055c
    cb90:	0000055c 	.word	0x0000055c
    cb94:	0000055c 	.word	0x0000055c
    cb98:	0000055c 	.word	0x0000055c
    cb9c:	0000055c 	.word	0x0000055c
    cba0:	0000055c 	.word	0x0000055c
    cba4:	0000055c 	.word	0x0000055c
    cba8:	0000055c 	.word	0x0000055c
    cbac:	0000055c 	.word	0x0000055c
    cbb0:	0000055c 	.word	0x0000055c
    cbb4:	0000055c 	.word	0x0000055c
    cbb8:	0000055c 	.word	0x0000055c
    cbbc:	0000055c 	.word	0x0000055c
    cbc0:	0000055c 	.word	0x0000055c
    cbc4:	0000055c 	.word	0x0000055c
    cbc8:	0000055c 	.word	0x0000055c
    cbcc:	0000055c 	.word	0x0000055c
    cbd0:	0000055c 	.word	0x0000055c
    cbd4:	0000055c 	.word	0x0000055c
    cbd8:	0000055c 	.word	0x0000055c
    cbdc:	0000055c 	.word	0x0000055c
    cbe0:	0000055c 	.word	0x0000055c
    cbe4:	0000055c 	.word	0x0000055c
    cbe8:	0000055c 	.word	0x0000055c
    cbec:	0000055c 	.word	0x0000055c
    cbf0:	0000055c 	.word	0x0000055c
    cbf4:	0000055c 	.word	0x0000055c
    cbf8:	0000055c 	.word	0x0000055c
    cbfc:	0000055c 	.word	0x0000055c
    cc00:	0000055c 	.word	0x0000055c
    cc04:	0000055c 	.word	0x0000055c
    cc08:	0000055c 	.word	0x0000055c
    cc0c:	0000055c 	.word	0x0000055c
    cc10:	0000055c 	.word	0x0000055c
    cc14:	0000055c 	.word	0x0000055c
    cc18:	0000055c 	.word	0x0000055c
    cc1c:	00000550 	.word	0x00000550
    cc20:	00000550 	.word	0x00000550
    cc24:	00000566 	.word	0x00000566
    cc28:	00000566 	.word	0x00000566
    cc2c:	00000566 	.word	0x00000566
    cc30:	00000566 	.word	0x00000566

0000cc34 <sd_mmc_trans_units>:
    cc34:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0000cc50 <sd_trans_multipliers>:
    cc50:	00000000 0000000a 0000000c 0000000d     ................
    cc60:	0000000f 00000014 00000019 0000001e     ................
    cc70:	00000023 00000028 0000002d 00000032     #...(...-...2...
    cc80:	00000037 0000003c 00000046 00000050     7...<...F...P...

0000cc90 <mmc_trans_multipliers>:
    cc90:	00000000 0000000a 0000000c 0000000d     ................
    cca0:	0000000f 00000014 0000001a 0000001e     ................
    ccb0:	00000023 00000028 0000002d 00000034     #...(...-...4...
    ccc0:	00000037 0000003c 00000046 00000050     7...<...F...P...
    ccd0:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
    cce0:	22302074 00000000                       t 0"....

0000cce8 <lun_desc>:
    cce8:	000021ed 00002245 00002291 000022dd     .!..E"..."..."..
    ccf8:	0000230d 00002391 00002421 0000ccd0     .#...#..!$......
    cd08:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    cd18:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
    cd28:	00005f02 00005f7c 00005f7c 00005f20     ._..|_..|_.. _..
    cd38:	00005f1a 00005f26 00005f08 00005f2c     ._..&_..._..,_..
    cd48:	00005f62 00006248 00006298 00006298     b_..Hb...b...b..
    cd58:	00006294 0000623a 0000625a 0000622a     .b..:b..Zb..*b..
    cd68:	0000626c 0000627e 000062e6 00006314     lb..~b...b...c..
    cd78:	00006314 00006310 000062e0 000062ec     .c...c...b...b..
    cd88:	000062da 000062f2 000062f8              .b...b...b..

0000cd94 <LfnOfs>:
    cd94:	07050301 12100e09 1c181614 0000001e     ................
    cda4:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
    cdb4:	00005d5b 4d90feeb 534f4453 00302e35     [].....MSDOS5.0.
    cdc4:	4e204f4e 20454d41 46202020 32335441     NO NAME    FAT32
    cdd4:	00202020 4e204f4e 20454d41 46202020        .NO NAME    F
    cde4:	20205441 00202020                       AT     .

0000cdec <excvt.4558>:
    cdec:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
    cdfc:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
    ce0c:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
    ce1c:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    ce2c:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
    ce3c:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    ce4c:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
    ce5c:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0000ce6c <Tbl>:
    ce6c:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
    ce7c:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
    ce8c:	00e600c9 00f400c6 00f200f6 00f900fb     ................
    ce9c:	00d600ff 00f800dc 00d800a3 019200d7     ................
    ceac:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
    cebc:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
    cecc:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
    cedc:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
    ceec:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
    cefc:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
    cf0c:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
    cf1c:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
    cf2c:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
    cf3c:	00da00de 00d900db 00dd00fd 00b400af     ................
    cf4c:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
    cf5c:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0000cf6c <tbl_lower.4308>:
    cf6c:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    cf7c:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
    cf8c:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
    cf9c:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
    cfac:	00e100e0 00e300e2 00e500e4 00e700e6     ................
    cfbc:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
    cfcc:	00f100f0 00f300f2 00f500f4 00f800f6     ................
    cfdc:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
    cfec:	01050103 01090107 010d010b 0111010f     ................
    cffc:	01150113 01190117 011d011b 0121011f     ..............!.
    d00c:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
    d01c:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
    d02c:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
    d03c:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
    d04c:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
    d05c:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
    d06c:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
    d07c:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
    d08c:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
    d09c:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
    d0ac:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
    d0bc:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
    d0cc:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
    d0dc:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
    d0ec:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
    d0fc:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
    d10c:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
    d11c:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
    d12c:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
    d13c:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0000d14c <tbl_upper.4309>:
    d14c:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
    d15c:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    d16c:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
    d17c:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
    d18c:	00c100c0 00c300c2 00c500c4 00c700c6     ................
    d19c:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
    d1ac:	00d100d0 00d300d2 00d500d4 00d800d6     ................
    d1bc:	00da00d9 00dc00db 00de00dd 01000178     ............x...
    d1cc:	01040102 01080106 010c010a 0110010e     ................
    d1dc:	01140112 01180116 011c011a 0120011e     .............. .
    d1ec:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
    d1fc:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
    d20c:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
    d21c:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
    d22c:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
    d23c:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
    d24c:	03940393 03960395 03980397 039a0399     ................
    d25c:	039c039b 039e039d 03a0039f 03a303a1     ................
    d26c:	03a503a4 03a703a6 03a903a8 041003aa     ................
    d27c:	04120411 04140413 04160415 04180417     ................
    d28c:	041a0419 041c041b 041e041d 0420041f     .............. .
    d29c:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
    d2ac:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
    d2bc:	04030402 04050404 04070406 04090408     ................
    d2cc:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
    d2dc:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
    d2ec:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
    d2fc:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
    d30c:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
    d31c:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
    d32c:	35455345 2d203631 544e4520 42205245     ESE516 - ENTER B
    d33c:	4c544f4f 4544414f 00000052 2d0d0a0c     OOTLOADER......-
    d34c:	4453202d 434d4d2f 72614320 78452064     - SD/MMC Card Ex
    d35c:	6c706d61 6e6f2065 74614620 2d207346     ample on FatFs -
    d36c:	000d0a2d 43204453 20445241 6c696166     -...SD CARD fail
    d37c:	20216465 63656843 6f79206b 63207275     ed! Check your c
    d38c:	656e6e6f 6f697463 202e736e 74737953     onnections. Syst
    d39c:	77206d65 206c6c69 74736572 20747261     em will restart 
    d3ac:	35206e69 63657320 73646e6f 002e2e2e     in 5 seconds....
    d3bc:	43204453 20445241 6e756f6d 75732074     SD CARD mount su
    d3cc:	73656363 46202173 73656c69 65747379     ccess! Filesyste
    d3dc:	6c61206d 6d206f73 746e756f 202e6465     m also mounted. 
    d3ec:	00000a0d 204d564e 6f666e49 754e203a     ....NVM Info: Nu
    d3fc:	7265626d 20666f20 65676150 64252073     mber of Pages %d
    d40c:	6953202e 6f20657a 20612066 65676170     . Size of a page
    d41c:	6425203a 74796220 202e7365 00000a0d     : %d bytes. ....
    d42c:	65722041 73206461 65636375 75667373     A read successfu
    d43c:	0d796c6c 0000000a 74736554 69727720     lly.....Test wri
    d44c:	74206574 564e206f 6166204d 64656c69     te to NVM failed
    d45c:	000a0d21 74736554 69727720 74206574     !...Test write t
    d46c:	564e206f 7573204d 65656363 21646564     o NVM succeeded!
    d47c:	00000a0d 73617245 72652065 00726f72     ....Erase error.
    d48c:	35455345 2d203631 49584520 4f422054     ESE516 - EXIT BO
    d49c:	4f4c544f 52454441 00000000 43204453     OTLOADER....SD C
    d4ac:	20647261 74696e69 65746169 6f632064     ard initiated co
    d4bc:	63657272 21796c74 00000d0a 6e756f4d     rrectly!....Moun
    d4cc:	69642074 28206b73 6f6d5f66 29746e75     t disk (f_mount)
    d4dc:	0d2e2e2e 0000000a 4941465b 72205d4c     ........[FAIL] r
    d4ec:	25207365 000a0d64 5d4b4f5b 00000a0d     es %d...[OK]....
    d4fc:	61657243 61206574 6c696620 66282065     Create a file (f
    d50c:	65706f5f 2e2e296e 000a0d2e 74697257     _open)......Writ
    d51c:	6f742065 73657420 69662074 2820656c     e to test file (
    d52c:	75705f66 2e297374 0a0d2e2e 00000000     f_puts).........
    d53c:	74736554 2f445320 20434d4d 63617473     Test SD/MMC stac
    d54c:	00000a6b 4941465b 0a0d5d4c 00000000     k...[FAIL]......
    d55c:	74736554 20736920 63637573 66737365     Test is successf
    d56c:	0a2e6c75 0000000d 6c756f43 6f6e2064     ul......Could no
    d57c:	706f2074 62206e65 72616e69 69662079     t open binary fi
    d58c:	0d21656c 0000000a 74697257 6f742065     le!.....Write to
    d59c:	73657420 69662074 2820656c 72775f66      test file (f_wr
    d5ac:	29657469 0d2e2e2e 0000000a 20646e45     ite)........End 
    d5bc:	5420666f 2e747365 00000d0a 43204453     of Test.....SD C
    d5cc:	20647261 6c696166 69206465 6974696e     ard failed initi
    d5dc:	6f697461 4320216e 6b636568 6e6f6320     ation! Check con
    d5ec:	7463656e 736e6f69 000d0a21              nections!...

0000d5f8 <_global_impure_ptr>:
    d5f8:	20000070                                p.. 

0000d5fc <__sf_fake_stderr>:
	...

0000d61c <__sf_fake_stdin>:
	...

0000d63c <__sf_fake_stdout>:
	...
    d65c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    d66c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    d67c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    d68c:	00006665                                ef..

0000d690 <_init>:
    d690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d692:	46c0      	nop			; (mov r8, r8)
    d694:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d696:	bc08      	pop	{r3}
    d698:	469e      	mov	lr, r3
    d69a:	4770      	bx	lr

0000d69c <__init_array_start>:
    d69c:	000000dd 	.word	0x000000dd

0000d6a0 <_fini>:
    d6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d6a2:	46c0      	nop			; (mov r8, r8)
    d6a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d6a6:	bc08      	pop	{r3}
    d6a8:	469e      	mov	lr, r3
    d6aa:	4770      	bx	lr

0000d6ac <__fini_array_start>:
    d6ac:	000000b5 	.word	0x000000b5
